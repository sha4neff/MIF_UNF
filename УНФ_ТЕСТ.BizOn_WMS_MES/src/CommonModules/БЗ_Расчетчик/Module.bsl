Функция ПолучитьИмяПеречисления(Знач ПеречислениеСсылка)  	
	ИмяМетаданных = ПеречислениеСсылка.Метаданные().Имя;
	НазваниеМенеджера = "ПеречислениеМенеджер." + ИмяМетаданных;    
	Менеджер = Новый (НазваниеМенеджера); 
	Имя = ПеречислениеСсылка.Метаданные().ЗначенияПеречисления[Менеджер.Индекс(ПеречислениеСсылка)].Имя;
	Возврат Имя;  
КонецФункции    

Функция ПолучитьПеречислениеПоИмени(Знач Наименование, Знач Тип)  
	Если Тип <> "" Тогда	
		ПеречислениеСсылка = Неопределено;
		СтрокаВыполнить = "ПеречислениеСсылка = Перечисления." + Тип + "." + Наименование; 		 
		Попытка  		
			Выполнить СтрокаВыполнить; 		
		Исключение
		    Сообщить(ОписаниеОшибки());
		КонецПопытки; 		
	Иначе 
		ПеречислениеСсылка = Неопределено;	
	КонецЕсли;
	Возврат ПеречислениеСсылка;  	
КонецФункции

Функция ТекстЗапросаПолученияСостояния()
Возврат  
		"ВЫБРАТЬ
		|	ЗаказыПокупателейОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗаказыПокупателейОстатки.Номенклатура КАК Номенклатура,
		|	ЗаказыПокупателейОстатки.Характеристика КАК Характеристика,
		|	СУММА(ЗаказыПокупателейОстатки.КоличествоОстаток) КАК Количество
		|ПОМЕСТИТЬ ВтОстаткиЗаказов
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(
		|			,
		|			ЗаказПокупателя.ДатаОтгрузки МЕЖДУ &ДатаНачала И &ДатаОкончания
		|				И ЗаказПокупателя.СостояниеЗаказа.Наименование <> ""Не действителен""
		|				И Номенклатура.Изготовитель В (&Изготовитель)) КАК ЗаказыПокупателейОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыПокупателейОстатки.ЗаказПокупателя,
		|	ЗаказыПокупателейОстатки.Номенклатура,
		|	ЗаказыПокупателейОстатки.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтОстаткиЗаказов.ЗаказПокупателя КАК ЗаказПокупателя,
		|	СпецификацииПоУмолчанию.Номенклатура КАК Номенклатура,
		|	СпецификацииПоУмолчанию.Характеристика КАК Характеристика,
		|	СпецификацииПоУмолчанию.Спецификация КАК Спецификация,
		|	ВтОстаткиЗаказов.Количество КАК Количество
		|ПОМЕСТИТЬ ОсновнаяНоменклатураЗаказов
		|ИЗ
		|	РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтОстаткиЗаказов КАК ВтОстаткиЗаказов
		|		ПО СпецификацииПоУмолчанию.Номенклатура = ВтОстаткиЗаказов.Номенклатура
		|			И СпецификацииПоУмолчанию.Характеристика = ВтОстаткиЗаказов.Характеристика
		|ГДЕ
		|	ВтОстаткиЗаказов.Номенклатура.Изготовитель.Наименование = ""Основное""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Спецификация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СпецификацииСостав.Ссылка КАК НачалоДуги,
		|	СпецификацииСостав.Спецификация КАК КонецДуги,
		|	СУММА(СпецификацииСостав.КоличествоПродукции) КАК КоличествоПродукции,
		|	СУММА(СпецификацииСостав.Количество) КАК Количество,
		|	1 КАК УровеньИерархии
		|ПОМЕСТИТЬ ЗамыканияДлины1
		|ИЗ
		|	Справочник.Спецификации.Состав КАК СпецификацииСостав
		|ГДЕ
		|	СпецификацииСостав.Спецификация <> ЗНАЧЕНИЕ(Справочник.Спецификации.ПустаяСсылка)
		|	И СпецификацииСостав.Номенклатура.Изготовитель В(&Изготовитель)
		|
		|СГРУППИРОВАТЬ ПО
		|	СпецификацииСостав.Ссылка,
		|	СпецификацииСостав.Спецификация
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Спецификации.Ссылка,
		|	Спецификации.Ссылка,
		|	1,
		|	1,
		|	0
		|ИЗ
		|	Справочник.Спецификации КАК Спецификации
		|ГДЕ
		|	Спецификации.Владелец.Изготовитель В(&Изготовитель)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НачалоДуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерваяДуга.НачалоДуги КАК НачалоДуги,
		|	ВтораяДуга.КонецДуги КАК КонецДуги,
		|	ПерваяДуга.КоличествоПродукции / ВтораяДуга.КоличествоПродукции КАК КоличествоПродукции,
		|	ПерваяДуга.Количество / ПерваяДуга.КоличествоПродукции * ВтораяДуга.Количество / ВтораяДуга.КоличествоПродукции КАК Количество,
		|	ПерваяДуга.УровеньИерархии + ВтораяДуга.УровеньИерархии КАК УровеньИерархии
		|ПОМЕСТИТЬ ЗамыканияДлины2
		|ИЗ
		|	ЗамыканияДлины1 КАК ПерваяДуга
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗамыканияДлины1 КАК ВтораяДуга
		|		ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НачалоДуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗамыканияДлины1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПерваяДуга.НачалоДуги КАК НачалоДуги,
		|	ВтораяДуга.КонецДуги КАК КонецДуги,
		|	ПерваяДуга.КоличествоПродукции / ВтораяДуга.КоличествоПродукции КАК КоличествоПродукции,
		|	ПерваяДуга.Количество / ПерваяДуга.КоличествоПродукции * ВтораяДуга.Количество / ВтораяДуга.КоличествоПродукции КАК Количество,
		|	ПерваяДуга.УровеньИерархии + ВтораяДуга.УровеньИерархии КАК УровеньИерархии
		|ПОМЕСТИТЬ ЗамыканияДлины4
		|ИЗ
		|	ЗамыканияДлины2 КАК ПерваяДуга
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗамыканияДлины2 КАК ВтораяДуга
		|		ПО ПерваяДуга.КонецДуги = ВтораяДуга.НачалоДуги
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НачалоДуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЗамыканияДлины2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗамыканияДлины4.НачалоДуги КАК ПродукцияСпецификация,
		|	ЗамыканияДлины4.НачалоДуги.Владелец КАК ПродукцияНоменклатура,
		|	ЗамыканияДлины4.НачалоДуги.ХарактеристикаПродукции КАК ПродукцияХарактеристика,
		|	ЗамыканияДлины4.НачалоДуги.Владелец.Изготовитель КАК ПродукцияИзготовитель,
		|	ЗамыканияДлины4.КонецДуги КАК КомплектующаяСпецификация,
		|	ЗамыканияДлины4.КонецДуги.Владелец КАК КомплектующаяНоменклатура,
		|	ЗамыканияДлины4.КонецДуги.ХарактеристикаПродукции КАК КомплектующаяХарактеристика,
		|	ЗамыканияДлины4.КонецДуги.Владелец.Изготовитель КАК КомплектующаяИзготовитель,
		|	ЗамыканияДлины4.КоличествоПродукции * ОсновнаяНоменклатураЗаказов.Количество КАК КоличествоПродукции,
		|	ЗамыканияДлины4.Количество * ОсновнаяНоменклатураЗаказов.Количество КАК КоличествоКомплектующих,
		|	ЗамыканияДлины4.УровеньИерархии КАК УровеньИерархии,
		|	ОсновнаяНоменклатураЗаказов.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ОсновнаяНоменклатураЗаказов.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ЗамыканияДлины4.КоличествоПродукции КАК Продукция_Спецификация_Количество,
		|	ЗамыканияДлины4.Количество КАК Комплектующая_Спецификация_Количество
		|ПОМЕСТИТЬ ПотребностьЗаказовПокупателей
		|ИЗ
		|	ЗамыканияДлины4 КАК ЗамыканияДлины4
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОсновнаяНоменклатураЗаказов КАК ОсновнаяНоменклатураЗаказов
		|		ПО (ОсновнаяНоменклатураЗаказов.Спецификация = ЗамыканияДлины4.НачалоДуги)
		|ГДЕ
		|	ЗамыканияДлины4.КонецДуги.Владелец.Изготовитель В(&Изготовитель)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПотребностьЗаказов.КомплектующаяНоменклатура КАК КомплектующаяНоменклатура,
		|	ПотребностьЗаказов.КомплектующаяХарактеристика КАК КомплектующаяХарактеристика,
		|	СУММА(ПотребностьЗаказов.КоличествоКомплектующих) КАК КоличествоКомплектующих
		|ПОМЕСТИТЬ ТоварыЗаказов
		|ИЗ
		|	ПотребностьЗаказовПокупателей КАК ПотребностьЗаказов
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотребностьЗаказов.КомплектующаяНоменклатура,
		|	ПотребностьЗаказов.КомплектующаяХарактеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыЗаказов.КомплектующаяНоменклатура КАК КомплектующаяНоменклатура,
		|	ТоварыЗаказов.КомплектующаяХарактеристика КАК КомплектующаяХарактеристика,
		|	СУММА(ЕСТЬNULL(ЗаказыНаПроизводствоОстатки.КоличествоОстаток, 0)) КАК КоличествоЗаказНаПроизводство
		|ПОМЕСТИТЬ ЗаказыНаПроизводство
		|ИЗ
		|	ТоварыЗаказов КАК ТоварыЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПроизводство.Остатки(&ДатаОкончания, ЗаказНаПроизводство.Проведен) КАК ЗаказыНаПроизводствоОстатки
		|		ПО ТоварыЗаказов.КомплектующаяНоменклатура = ЗаказыНаПроизводствоОстатки.Номенклатура
		|			И ТоварыЗаказов.КомплектующаяХарактеристика = ЗаказыНаПроизводствоОстатки.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыЗаказов.КомплектующаяХарактеристика,
		|	ТоварыЗаказов.КомплектующаяНоменклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыЗаказов.КомплектующаяНоменклатура КАК КомплектующаяНоменклатура,
		|	ТоварыЗаказов.КомплектующаяХарактеристика КАК КомплектующаяХарактеристика,
		|	СУММА(ЕСТЬNULL(ЗапасыНаСкладахОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток
		|ПОМЕСТИТЬ Остатки
		|ИЗ
		|	ТоварыЗаказов КАК ТоварыЗаказов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗапасыНаСкладах.Остатки(, ) КАК ЗапасыНаСкладахОстатки
		|		ПО ТоварыЗаказов.КомплектующаяНоменклатура = ЗапасыНаСкладахОстатки.Номенклатура
		|			И ТоварыЗаказов.КомплектующаяХарактеристика = ЗапасыНаСкладахОстатки.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыЗаказов.КомплектующаяНоменклатура,
		|	ТоварыЗаказов.КомплектующаяХарактеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыОстатки.Номенклатура КАК КомплектующаяНоменклатура,
		|	ЗапасыОстатки.Характеристика КАК КомплектующаяХарактеристика,
		|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоРезерв,
		|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ЗапасыОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ПОМЕСТИТЬ Резервы
		|ИЗ
		|	ТоварыЗаказов КАК ТоварыЗаказов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.Запасы.Остатки(
		|				,
		|				ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
		|					ИЛИ ЗаказНаПроизводство <> ЗНАЧЕНИЕ(Документ.ЗаказНаПроизводство.ПустаяСсылка)) КАК ЗапасыОстатки
		|		ПО ТоварыЗаказов.КомплектующаяНоменклатура = ЗапасыОстатки.Номенклатура
		|			И ТоварыЗаказов.КомплектующаяХарактеристика = ЗапасыОстатки.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапасыОстатки.Номенклатура,
		|	ЗапасыОстатки.Характеристика,
		|	ЗапасыОстатки.ЗаказПокупателя,
		|	ЗапасыОстатки.ЗаказНаПроизводство
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Резервы.КомплектующаяНоменклатура КАК КомплектующаяНоменклатура,
		|	Резервы.КомплектующаяХарактеристика КАК КомплектующаяХарактеристика,
		|	СУММА(Резервы.КоличествоРезерв) КАК КоличествоРезерв
		|ПОМЕСТИТЬ РезервыСводно
		|ИЗ
		|	Резервы КАК Резервы
		|
		|СГРУППИРОВАТЬ ПО
		|	Резервы.КомплектующаяНоменклатура,
		|	Резервы.КомплектующаяХарактеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтОстаткиЗаказов.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ВтОстаткиЗаказов.Номенклатура КАК Номенклатура,
		|	ВтОстаткиЗаказов.Характеристика КАК Характеристика,
		|	ВтОстаткиЗаказов.Количество КАК Потребность,
		|	ВтОстаткиЗаказов.ЗаказПокупателя.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1) КАК ЕстьДатаОтгрузки,
		|	ВтОстаткиЗаказов.ЗаказПокупателя.ДатаОтгрузки КАК ДатаОтгрузки,
		|	ВтОстаткиЗаказов.Количество КАК Осталось_Обеспечить
		|ИЗ
		|	ВтОстаткиЗаказов КАК ВтОстаткиЗаказов
		|ГДЕ
		|	ВтОстаткиЗаказов.ЗаказПокупателя.Проведен = ИСТИНА
		|	И ВтОстаткиЗаказов.Количество > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕстьДатаОтгрузки,
		|	ДатаОтгрузки,
		|	ВтОстаткиЗаказов.Номенклатура.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПотребностьЗаказовПокупателей.ЗаказПокупателя КАК ЗаказПокупателя,
		|	ПотребностьЗаказовПокупателей.ПродукцияСпецификация КАК ПродукцияСпецификация,
		|	ПотребностьЗаказовПокупателей.ПродукцияНоменклатура КАК ПродукцияНоменклатура,
		|	ПотребностьЗаказовПокупателей.ПродукцияХарактеристика КАК ПродукцияХарактеристика,
		|	ПотребностьЗаказовПокупателей.ПродукцияИзготовитель КАК ПродукцияИзготовитель,
		|	ПотребностьЗаказовПокупателей.КомплектующаяСпецификация КАК Спецификация,
		|	ПотребностьЗаказовПокупателей.КомплектующаяНоменклатура КАК Номенклатура,
		|	ПотребностьЗаказовПокупателей.КомплектующаяХарактеристика КАК Характеристика,
		|	ПотребностьЗаказовПокупателей.КомплектующаяИзготовитель КАК Изготовитель,
		|	МАКСИМУМ(ПотребностьЗаказовПокупателей.КоличествоПродукции) КАК ПродукцияПотребность,
		|	СУММА(ПотребностьЗаказовПокупателей.КоличествоКомплектующих) КАК Потребность,
		|	ПотребностьЗаказовПокупателей.УровеньИерархии КАК УровеньИерархии,
		|	ПотребностьЗаказовПокупателей.ДатаОтгрузки КАК ДатаОтгрузки,
		|	СУММА(ЕСТЬNULL(ЗаказыНаПроизводство.КоличествоЗаказНаПроизводство, 0)) КАК Комплектующая_ЗаказНаПроизводство,
		|	СУММА(ЕСТЬNULL(ТоварыЗаказов.КоличествоКомплектующих, 0)) КАК Комплектующая_ПотребностьВсего,
		|	СУММА(ЕСТЬNULL(ТоварыЗаказов.КоличествоКомплектующих, 0) - ЕСТЬNULL(ЗаказыНаПроизводство.КоличествоЗаказНаПроизводство, 0)) КАК Комплектующая_ОсталосьОбеспечитьВсего,
		|	СУММА(ЕСТЬNULL(РезервыСводно.КоличествоРезерв, 0)) КАК Комплектующая_РезервВсего,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстаток, 0)) КАК Комплектующая_Остаток,
		|	СУММА(1) КАК Коэффициент,
		|	СУММА(ПотребностьЗаказовПокупателей.Продукция_Спецификация_Количество) КАК Спецификация_КоличествоПродукции,
		|	МАКСИМУМ(ПотребностьЗаказовПокупателей.Комплектующая_Спецификация_Количество) КАК Спецификация_Количество,
		|	СУММА(ПотребностьЗаказовПокупателей.КоличествоКомплектующих) КАК Осталось_Обеспечить
		|ИЗ
		|	ПотребностьЗаказовПокупателей КАК ПотребностьЗаказовПокупателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыНаПроизводство КАК ЗаказыНаПроизводство
		|		ПО ПотребностьЗаказовПокупателей.КомплектующаяНоменклатура = ЗаказыНаПроизводство.КомплектующаяНоменклатура
		|			И ПотребностьЗаказовПокупателей.КомплектующаяХарактеристика = ЗаказыНаПроизводство.КомплектующаяХарактеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыЗаказов КАК ТоварыЗаказов
		|		ПО ПотребностьЗаказовПокупателей.КомплектующаяНоменклатура = ТоварыЗаказов.КомплектующаяНоменклатура
		|			И ПотребностьЗаказовПокупателей.КомплектующаяХарактеристика = ТоварыЗаказов.КомплектующаяХарактеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
		|		ПО ПотребностьЗаказовПокупателей.КомплектующаяНоменклатура = Остатки.КомплектующаяНоменклатура
		|			И ПотребностьЗаказовПокупателей.КомплектующаяХарактеристика = Остатки.КомплектующаяХарактеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РезервыСводно КАК РезервыСводно
		|		ПО ПотребностьЗаказовПокупателей.КомплектующаяНоменклатура = РезервыСводно.КомплектующаяНоменклатура
		|			И ПотребностьЗаказовПокупателей.КомплектующаяХарактеристика = РезервыСводно.КомплектующаяХарактеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотребностьЗаказовПокупателей.КомплектующаяХарактеристика,
		|	ПотребностьЗаказовПокупателей.КомплектующаяИзготовитель,
		|	ПотребностьЗаказовПокупателей.КомплектующаяНоменклатура,
		|	ПотребностьЗаказовПокупателей.ПродукцияХарактеристика,
		|	ПотребностьЗаказовПокупателей.ПродукцияСпецификация,
		|	ПотребностьЗаказовПокупателей.ПродукцияИзготовитель,
		|	ПотребностьЗаказовПокупателей.ПродукцияНоменклатура,
		|	ПотребностьЗаказовПокупателей.КомплектующаяСпецификация,
		|	ПотребностьЗаказовПокупателей.ДатаОтгрузки,
		|	ПотребностьЗаказовПокупателей.ЗаказПокупателя,
		|	ПотребностьЗаказовПокупателей.УровеньИерархии
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаОтгрузки,
		|	ЗаказПокупателя,
		|	ПотребностьЗаказовПокупателей.ПродукцияНоменклатура.Наименование,
		|	ПотребностьЗаказовПокупателей.ПродукцияХарактеристика.Наименование,
		|	ПотребностьЗаказовПокупателей.УровеньИерархии,
		|	ПотребностьЗаказовПокупателей.КомплектующаяИзготовитель.Наименование,
		|	ПотребностьЗаказовПокупателей.КомплектующаяНоменклатура.Наименование,
		|	ПотребностьЗаказовПокупателей.КомплектующаяХарактеристика.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Остатки.КомплектующаяНоменклатура КАК Номенклатура,
		|	Остатки.КомплектующаяХарактеристика КАК Характеристика,
		|	СУММА(Остатки.КоличествоОстаток) КАК Остаток,
		|	0 КАК ПланПриход,
		|	0 КАК ПланРасход
		|ИЗ
		|	Остатки КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.КомплектующаяНоменклатура,
		|	Остатки.КомплектующаяХарактеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Резервы.КомплектующаяНоменклатура КАК КомплектующаяНоменклатура,
		|	Резервы.КомплектующаяХарактеристика КАК КомплектующаяХарактеристика,
		|	Резервы.КоличествоРезерв КАК КоличествоРезерв,
		|	Резервы.ЗаказПокупателя КАК ЗаказПокупателя,
		|	Резервы.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ИЗ
		|	Резервы КАК Резервы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказыНаПроизводство.КомплектующаяНоменклатура КАК Номенклатура,
		|	ЗаказыНаПроизводство.КомплектующаяХарактеристика КАК Характеристика,
		|	СУММА(ЗаказыНаПроизводство.КоличествоЗаказНаПроизводство) КАК КоличествоЗаказано,
		|	0 КАК ПланПриход,
		|	0 КАК ПланРасход
		|ИЗ
		|	ЗаказыНаПроизводство КАК ЗаказыНаПроизводство
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказыНаПроизводство.КомплектующаяХарактеристика,
		|	ЗаказыНаПроизводство.КомплектующаяНоменклатура";
КонецФункции

Функция ПолучитьИзготовителей()
	Изготовители = Новый СписокЗначений;
	Изготовители.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Основное"));
	Изготовители.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Фасад"));
	Изготовители.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Пресс"));
	Изготовители.Добавить(Справочники.СтруктурныеЕдиницы.НайтиПоНаименованию("Нестинг"));
	Возврат Изготовители;
КонецФункции

Процедура РасчетЗНП_010_ПодготовкаТаблицСостояния(ТБСостояния)
	БЗ_Блокировки.СтартТранзакции();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыПокупателей");	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗапасыНаСкладах");	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ЗаказыНаПроизводство");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РезервыТоваровОрганизаций");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;	
	Блокировка.Заблокировать(); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПолученияСостояния();
	ЗППакет=13;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДобавитьМесяц(ТекущаяДата(),-12));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ТекущаяДата()));    
	
	Изготовители = ПолучитьИзготовителей(); 
	
	Запрос.УстановитьПараметр("Изготовитель", Изготовители);

	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Если ТБСостояния.ПараметрыРасчета.Свойство("ОтладкуВыполняет") И ТБСостояния.ПараметрыРасчета.ОтладкуВыполняет=ПараметрыСеанса.АвторизованныйПользователь Тогда 
		ВнешниеОбработки.Создать("C:\Users\USR1CV8\AppData\Local\Temp\zapr.epf",Ложь).Дамп(Запрос);	 
	КонецЕсли;
	БЗ_Блокировки.ФинишТранзакции(Истина);
	
	Потребность=ПакетРезультатов[ЗППакет].Выгрузить();
	
	ПотребностьДетально=ПакетРезультатов[ЗППакет+1].Выгрузить();
	Остатки=ПакетРезультатов[ЗППакет+2].Выгрузить();
	Резервы=ПакетРезультатов[ЗППакет+3].Выгрузить();
	ЗаказыНаПроизводство=ПакетРезультатов[ЗППакет+4].Выгрузить();    
	
	//Потребность
	Для Каждого Статус из Перечисления.БЗ_СтатусыОбеспеченияЗаказов.ПустаяСсылка().Метаданные().ЗначенияПеречисления Цикл
		Потребность.Колонки.Добавить("Обеспечено_"+Строка(Статус.Имя),Новый ОписаниеТипов("Число"));
		ПотребностьДетально.Колонки.Добавить("Обеспечено_"+Строка(Статус.Имя),Новый ОписаниеТипов("Число"));
	КонецЦикла;
	
	//Таблицы состояния
	ТБСостояния.Вставить("Потребность", Потребность); 
	ТБСостояния.Вставить("ПотребностьДетально", ПотребностьДетально);                  
	ТБСостояния.Вставить("Остатки", Остатки);
	ТБСостояния.Вставить("Резервы", Резервы);
	ТБСостояния.Вставить("ЗаказыНаПроизводство", ЗаказыНаПроизводство);

КонецПроцедуры

Функция РасчетЗНП_020_ПодготовкаТаблицПланирования()
	ОбеспеченныеТоварыЗаказов=Новый ТаблицаЗначений;
	ОбеспеченныеТоварыЗаказов.Колонки.Добавить("ЗаказПокупателя",Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
 	ОбеспеченныеТоварыЗаказов.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ОбеспеченныеТоварыЗаказов.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ОбеспеченныеТоварыЗаказов.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ОбеспеченныеТоварыЗаказов.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.БЗ_СтатусыОбеспеченияЗаказов"));

	
	ТБОбеспечениеЗаказов=Новый ТаблицаЗначений;
	ТБОбеспечениеЗаказов.Колонки.Добавить("ЗаказПокупателя",Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("ПродукцияСпецификация",Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("ПродукцияНоменклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("ПродукцияХарактеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("ПродукцияИзготовитель",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Спецификация",Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Изготовитель",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Продукция_Потребность",Новый ОписаниеТипов("Число"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Потребность",Новый ОписаниеТипов("Число"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Коэффициент",Новый ОписаниеТипов("Число"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Обеспечено_РезервНаСкладе",Новый ОписаниеТипов("Число"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Обеспечено_ОстатокНаСкладе",Новый ОписаниеТипов("Число"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Обеспечено_ЗаказНаПроизводство",Новый ОписаниеТипов("Число"));
	ТБОбеспечениеЗаказов.Колонки.Добавить("Обеспечено_ПланПроизводства",Новый ОписаниеТипов("Число"));
	
	
	ТБПредПланыЗНП_Продукция=Новый ТаблицаЗначений;
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("Идентификатор",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(80,ДопустимаяДлина.Переменная)));
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("НСтроки",Новый ОписаниеТипов("Число"));
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("КлючСвязи",Новый ОписаниеТипов("Число"));

	ТБПредПланыЗНП_Продукция.Колонки.Добавить("СтруктурнаяЕдиница",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("ЗаказПокупателя",Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("Спецификация",Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("ПодразделениеИзготовитель",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("ДатаВремя",Новый ОписаниеТипов("Дата"));

	ТБПредПланыЗНП_Продукция.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТБПредПланыЗНП_Продукция.Колонки.Добавить("Резерв",Новый ОписаниеТипов("Число"));
	
	ТБПредПланыЗНП_Запасы=Новый ТаблицаЗначений;
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("Идентификатор",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(80,ДопустимаяДлина.Переменная)));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("НСтроки",Новый ОписаниеТипов("Число"));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("КлючСвязи",Новый ОписаниеТипов("Число"));

	ТБПредПланыЗНП_Запасы.Колонки.Добавить("СтруктурнаяЕдиница",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("ЗаказПокупателя",Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя"));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("Спецификация",Новый ОписаниеТипов("СправочникСсылка.Спецификации"));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("ПодразделениеИзготовитель",Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы"));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("ДатаВремя",Новый ОписаниеТипов("Дата"));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("ДоляСтоимости",Новый ОписаниеТипов("Число"));

	ТБПредПланыЗНП_Запасы.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТБПредПланыЗНП_Запасы.Колонки.Добавить("Резерв",Новый ОписаниеТипов("Число"));

	ТБПланирования = Новый Структура;
	ТБПланирования.Вставить("ОбеспечениеЗаказов", ТБОбеспечениеЗаказов);                  
	ТБПланирования.Вставить("ПредПланыЗНП_Продукция", ТБПредПланыЗНП_Продукция);
	ТБПланирования.Вставить("ПредПланыЗНП_Запасы", ТБПредПланыЗНП_Запасы);
	ТБПланирования.Вставить("ОбеспеченныеТоварыЗаказов", ОбеспеченныеТоварыЗаказов);                  
	
	Возврат ТБПланирования;
КонецФункции  

Процедура РасчетЗНП_030_Предпланирование(ТБСостояния,ТБПланирования)      
	//ПОТРЕБНОСТЬ:
	//	ЗаказПокупателя,
	//	Номенклатура,
	//	Характеристика,
	//	Количество
	
	
	Для Каждого СТПотребность из ТБСостояния.Потребность Цикл
		Если СТПотребность.Потребность=0 Тогда Продолжить; КонецЕсли; // Что-то пошло не так, здесь оказались остаток потребности 0 
		Если СТПотребность.Потребность<0 Тогда Продолжить; КонецЕсли; // Распровели заказ, а отгрузка осталась. 
		//Если НЕ СТПотребность.ЗаказПокупателя.Проведен Тогда  Продолжить; КонецЕсли; //Заказ закрыт  
		
		СТПотребность.Осталось_Обеспечить=СТПотребность.Потребность;
		
		
		//остаток ГП
		ОбеспечитьПоТоварам(ТБСостояния,ТБПланирования,СТПотребность);
	
	КонецЦикла;
	
	
	
КонецПроцедуры      

Функция ОбеспеченныйТоварЗаказа(ТБСостояния,ТБПланирования,СТПотребность,Количество,Статус) Экспорт
	//ПОТРЕБНОСТЬ:
	//	ЗаказПокупателя,
	//	Номенклатура,
	//	Характеристика,
	//	Количество
	СТТовар=ТБПланирования.ОбеспеченныеТоварыЗаказов.Добавить();
	СТТовар.ЗаказПокупателя=СТПотребность.ЗаказПокупателя;
	СТТовар.Номенклатура=СТПотребность.Номенклатура;
	СТТовар.Характеристика=СТПотребность.Характеристика;
	СТТовар.Количество=Количество;
	СТТовар.Статус=Статус;
	КолонкаОбеспечено="Обеспечено_"+Строка(ПолучитьИмяПеречисления(Статус));
	СТПотребность[КолонкаОбеспечено]=СТПотребность[КолонкаОбеспечено]+Количество;
	СТПотребность.Осталось_Обеспечить=СТПотребность.Осталось_Обеспечить-Количество
КонецФункции

Процедура ДобавитьВПредПланЗаказа(ТБСостояния,ТБПланирования,СТПотребность,Количество,Параметры = Неопределено) Экспорт
	Если Количество=0 Тогда Возврат; КонецЕсли;
	СТПредПланЗаказ=ТБПланирования.ПредПланыЗНП_Запасы.Добавить();
	СТПредПланЗаказ.ЗаказПокупателя=СТПотребность.ЗаказПокупателя;
	СТПредПланЗаказ.Номенклатура=СТПотребность.Номенклатура;
	СТПредПланЗаказ.Характеристика=СТПотребность.Характеристика;
	СТПредПланЗаказ.Количество=Количество;
	Если Параметры=Неопределено Тогда
		Параметры=Новый Структура();
	Иначе
		ЗаполнитьЗначенияСвойств(СТПредПланЗаказ,Параметры);
	КонецЕсли;	
	//СТПредПланыОтбор.ОставитьПослеПервогоПрохода=СТПредПланыОтбор.НеКомплект ИЛИ СТПредПланыОтбор.НеПолнаяКоробка;
	//Если НЕ Параметры.Свойство("БезКоррекцииОстатков") Тогда
	//	Расчет.ОстатокВОбласти_Коррекция_v2(ОбластьВзять,Номенклатура,ХарактеристикаНоменклатуры,Остатки,0,0,Количество);
	//КонецЕсли;
КонецПроцедуры


Процедура ОбеспечитьПоТоварам(ТБСостояния,ТБПланирования,СТПотребность);
	
	Комплектующие=ТБСостояния.ПотребностьДетально.Скопировать(ТБСостояния.ПотребностьДетально.НайтиСтроки(Новый Структура("ЗаказПокупателя,ПродукцияНоменклатура,ПродукцияХарактеристика", СТПотребность.ЗаказПокупателя, СТПотребность.Номенклатура,СТПотребность.Характеристика)));
	
	Для Каждого Комплектующая Из Комплектующие Цикл
		
		ПараметрыОтбора=Новый Структура("Номенклатура, Характеристика");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора,Комплектующая);
        //Наличие
		ТБОстаток = ОстатокНаСкладе(ТБСостояния,ПараметрыОтбора);
		
		Если Комплектующая.УровеньИерархии = 0 Тогда //ГП просто бронируем остаток
			МожноОтобрать = Макс(0,Мин(ТБОстаток.Остаток, СТПотребность.Осталось_Обеспечить));
			Если МожноОтобрать > 0 Тогда                                                                   
				ОбеспеченныйТоварЗаказа(ТБСостояния,ТБПланирования,СТПотребность,МожноОтобрать,Перечисления.БЗ_СтатусыОбеспеченияЗаказов.ОстатокНаСкладе);
				ТБОстаток = ОстатокНаСкладеКоррекция(ТБСостояния,ПараметрыОтбора,ТБОстаток, 0, МожноОтобрать);
			КонецЕсли; 
		Иначе //есть остаток, добавим в план на этом уровне
			МожноОтобрать = Макс(0,Мин(ТБОстаток.Остаток, СТПотребность.Осталось_Обеспечить));
			Если МожноОтобрать > 0 Тогда                                                                   
				ДобавитьВПредПланЗаказа(ТБСостояния,ТБПланирования,Комплектующая,МожноОтобрать);
			КонецЕсли;
		КонецЕсли;
		
        //ЗаказНаПроизводство
		ТБОстаток = ОстатокЗаказНаПроизводство(ТБСостояния,ПараметрыОтбора);
		МожноОтобрать = Макс(0,Мин(ТБОстаток.Остаток, СТПотребность.Осталось_Обеспечить));
		Если МожноОтобрать > 0 Тогда                                                                   
			Если Комплектующая.УровеньИерархии = 0 Тогда //ГП
				ОбеспеченныйТоварЗаказа(ТБСостояния,ТБПланирования,СТПотребность,МожноОтобрать,Перечисления.БЗ_СтатусыОбеспеченияЗаказов.ПланПроизводства);
			КонецЕсли;
			//ДобавитьВПредПланЗаказа(ТБСостояния,ТБПланирования,СТПотребность,МожноОтобрать);
			ТБОстаток = ОстатокЗаказНаПроизводствоКоррекция(ТБСостояния,ПараметрыОтбора,ТБОстаток, 0, МожноОтобрать);
		КонецЕсли;  
	КонецЦикла;	
	
	
	
КонецПроцедуры

Функция ОстатокНаСкладе(ТБСостояния, ПараметрыОтбора);
	
	НОстатки=ТБСостояния.Остатки.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",ПараметрыОтбора.Номенклатура,ПараметрыОтбора.Характеристика));
	КоличествоСтрок = НОстатки.Количество();
	Остаток = 0;    
	ПланПриход = 0;
	ПланРасход = 0;
	Если КоличествоСтрок=0 Тогда		
		//ничего не делаем
	ИначеЕсли КоличествоСтрок = 1 Тогда 
		СТОстаток=НОстатки[0];
		Остаток = СТОстаток.Остаток;    
		ПланПриход = СТОстаток.ПланПриход;
		ПланРасход = СТОстаток.ПланРасход;
	Иначе   
		ТЗОстатки=ТБСостояния.Остатки.Скопировать(НОстатки);
		Остаток = ТЗОстатки.Итог("Остаток");
		ПланПриход = ТЗОстатки.Итог("ПланПриход");
		ПланРасход = ТЗОстатки.Итог("ПланРасход");
	КонецЕсли;
	СтруктураОстатки = Новый Структура;
	СтруктураОстатки.Вставить("ОстатокНачальный", Остаток);
	СтруктураОстатки.Вставить("Остаток", Остаток+ПланПриход-ПланРасход);
	СтруктураОстатки.Вставить("ПланПриход", ПланПриход);
	СтруктураОстатки.Вставить("ПланРасход", ПланРасход);
	СтруктураОстатки.Вставить("НОстатки", НОстатки);
	Возврат СтруктураОстатки;

КонецФункции

Функция ОстатокНаСкладеКоррекция(ТБСостояния,ПараметрыОтбора,ТБОстаток = Неопределено, ПланПриход, ПланРасход);
	
	Если ТБОстаток = Неопределено Тогда
		НОстатки=ТБСостояния.Остатки.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",ПараметрыОтбора.Номенклатура,ПараметрыОтбора.Характеристика));
	Иначе
		НОстатки=ТБОстаток.НОстатки;
	КонецЕсли;
	КоличествоСтрок = НОстатки.Количество();
	Если КоличествоСтрок=0 Тогда		
		СТОстаток=ТБСостояния.Остатки.Добавить();
		СТОстаток.Номенклатура=ПараметрыОтбора.Номенклатура;
		СТОстаток.Характеристика=ПараметрыОтбора.Характеристика;
		СТОстаток.Остаток=0;
		СТОстаток.ПланПриход=ПланПриход;
		СТОстаток.ПланРасход=ПланРасход;		
	Иначе
		СТОстаток=НОстатки[0];
		СТОстаток.ПланПриход=СТОстаток.ПланПриход+ПланПриход;
		СТОстаток.ПланРасход=СТОстаток.ПланРасход+ПланРасход;		
	КонецЕсли;
	
	СтруктураОстатки = Новый Структура;
	СтруктураОстатки.Вставить("ОстатокНачальный", СТОстаток.Остаток);
	СтруктураОстатки.Вставить("Остаток", СТОстаток.Остаток+ПланПриход-ПланРасход);
	СтруктураОстатки.Вставить("ПланПриход", СТОстаток.ПланПриход);
	СтруктураОстатки.Вставить("ПланРасход", СТОстаток.ПланРасход);
	СтруктураОстатки.Вставить("НОстатки", НОстатки);
	Возврат СтруктураОстатки;
КонецФункции

Функция ОстатокЗаказНаПроизводство(ТБСостояния, ПараметрыОтбора);
	
	НОстатки=ТБСостояния.ЗаказыНаПроизводство.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",ПараметрыОтбора.Номенклатура,ПараметрыОтбора.Характеристика));
	КоличествоСтрок = НОстатки.Количество();
	Остаток = 0;    
	ПланПриход = 0;
	ПланРасход = 0;
	Если КоличествоСтрок=0 Тогда		
		//ничего не делаем
	ИначеЕсли КоличествоСтрок = 1 Тогда 
		СТОстаток=НОстатки[0];
		Остаток = СТОстаток.КоличествоЗаказано;    
		ПланПриход = СТОстаток.ПланПриход;
		ПланРасход = СТОстаток.ПланРасход;
	Иначе   
		ТЗОстатки=ТБСостояния.Остатки.Скопировать(НОстатки);
		Остаток = ТЗОстатки.Итог("КоличествоЗаказано");
		ПланПриход = ТЗОстатки.Итог("ПланПриход");
		ПланРасход = ТЗОстатки.Итог("ПланРасход");
	КонецЕсли;
	СтруктураОстатки = Новый Структура;
	СтруктураОстатки.Вставить("ОстатокНачальный", Остаток);
	СтруктураОстатки.Вставить("Остаток", Остаток+ПланПриход-ПланРасход);
	СтруктураОстатки.Вставить("ПланПриход", ПланПриход);
	СтруктураОстатки.Вставить("ПланРасход", ПланРасход);
	СтруктураОстатки.Вставить("НОстатки", НОстатки);
	Возврат СтруктураОстатки;
КонецФункции

Функция ОстатокЗаказНаПроизводствоКоррекция(ТБСостояния,ПараметрыОтбора,ТБОстаток = Неопределено, ПланПриход, ПланРасход);
	
	Если ТБОстаток = Неопределено Тогда
		НОстатки=ТБСостояния.ЗаказыНаПроизводство.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",ПараметрыОтбора.Номенклатура,ПараметрыОтбора.Характеристика));
	Иначе
		НОстатки=ТБОстаток.НОстатки;
	КонецЕсли;
	КоличествоСтрок = НОстатки.Количество();
	Если КоличествоСтрок=0 Тогда		
		СТОстаток=ТБСостояния.Остатки.Добавить();
		СТОстаток.Номенклатура=ПараметрыОтбора.Номенклатура;
		СТОстаток.Характеристика=ПараметрыОтбора.Характеристика;
		СТОстаток.Остаток=0;
		СТОстаток.ПланПриход=ПланПриход;
		СТОстаток.ПланРасход=ПланРасход;		
	Иначе
		СТОстаток=НОстатки[0];
		СТОстаток.ПланПриход=СТОстаток.ПланПриход+ПланПриход;
		СТОстаток.ПланРасход=СТОстаток.ПланРасход+ПланРасход;		
	КонецЕсли;
	
	СтруктураОстатки = Новый Структура;
	СтруктураОстатки.Вставить("ОстатокНачальный", СТОстаток.КоличествоЗаказано);
	СтруктураОстатки.Вставить("Остаток", СТОстаток.КоличествоЗаказано+ПланПриход-ПланРасход);
	СтруктураОстатки.Вставить("ПланПриход", СТОстаток.ПланПриход);
	СтруктураОстатки.Вставить("ПланРасход", СТОстаток.ПланРасход);
	СтруктураОстатки.Вставить("НОстатки", НОстатки);
	Возврат СтруктураОстатки;
КонецФункции


Процедура РасчетЗНП(ПараметрыРасчета) Экспорт
	// Блокируем процесс расчета, если уже заблокирован выходим 
	БЗ_Логирование.Лог("РасчетЗНП","--------------- РАСЧЕТ ЗАДАНИЙ НА ПРОИЗВОДСТВО ----------------------");      
	БЗ_Блокировки.СтартТранзакции();
	Процессы=БЗ_Блокировки.ПолучитьТекущиеПроцессы();
	Если Процессы.Найти(Перечисления.БЗ_ТипБлокировки.РасчетЗНП,"Тип")=Неопределено Тогда
		БЗ_Блокировки.УстановитьБлокировкуПроцесса(Перечисления.БЗ_ТипБлокировки.РасчетЗНП);
	Иначе
		БЗ_Блокировки.ФинишТранзакции(Ложь);
		Возврат;
	КонецЕсли;
	
	БЗ_Логирование.Лог("РасчетЗНП","Инициализация таблиц состояния");      

	ТБСостояния = Новый Структура;
	ТБСостояния.Вставить("Отказ", Ложь);
	Если ПараметрыРасчета<>Неопределено Тогда
		ТБСостояния.Вставить("ПараметрыРасчета",ПараметрыРасчета);
	Иначе
		ТБСостояния.Вставить("ПараметрыРасчета", Новый Структура);
	КонецЕсли;
	
	РасчетЗНП_010_ПодготовкаТаблицСостояния(ТБСостояния);
	
	БЗ_Логирование.Лог("РасчетЗНП","Инициализация таблиц предпланирования");      
	
	ТБПланирования = РасчетЗНП_020_ПодготовкаТаблицПланирования();

	БЗ_Логирование.Лог("РасчетЗНП","Предпланирование");      
	
	РасчетЗНП_030_Предпланирование(ТБСостояния, ТБПланирования);	
	
	БЗ_Логирование.Лог("РасчетЗНП","Расчет ЗНП");      
	
	БЗ_Логирование.Лог("РасчетЗНП","Обновление данных расчета - НАЧАЛО");      
	РасчетЗНП_100_Обновить_ДанныеРасчета(ТБСостояния, ТБПланирования);
	БЗ_Логирование.Лог("РасчетЗНП","Обновление данных расчета - ЗАВЕРШЕНИЕ");      
	БЗ_Блокировки.ФинишТранзакции(НЕ ТБСостояния.Отказ);
	
КонецПроцедуры            

Процедура РасчетЗНП_100_Обновить_ДанныеРасчета(ТБСостояния, ТБПланирования);   
	БЗ_Логирование.Лог("РасчетЗНП","Обеспечение заказов покупателей, сводно");      
	Обновить_ОбеспечениеЗаказовПокупателей_Сводно(ТБСостояния, ТБПланирования); 
	БЗ_Логирование.Лог("РасчетЗНП","Обеспечение заказов покупателей, комплектующие");      
	Обновить_ОбеспечениеЗаказовПокупателей_Комплектующие(ТБСостояния, ТБПланирования); 
КонецПроцедуры            

Процедура Обновить_ОбеспечениеЗаказовПокупателей_Сводно_Образец(ТБСостояния, ТБПланирования); 
	Запрос = Новый Запрос;
	Запрос.Текст = 

	"ВЫБРАТЬ
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Номенклатура КАК Номенклатура,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Характеристика КАК Характеристика,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Потребность КАК Потребность,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_РезервНаСкладе КАК Обеспечено_РезервНаСкладе,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ОстатокНаСкладе КАК Обеспечено_ОстатокНаСкладе,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ЗаказНаПроизводство КАК Обеспечено_ЗаказНаПроизводство,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ПланПроизводства КАК Обеспечено_ПланПроизводства,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Осталось_Обеспечить КАК Осталось_Обеспечить,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЛОЖЬ КАК НужноУдалить
	|ПОМЕСТИТЬ ТЗ_ОбеспечениеЗаказовПокупателей_Сводно
	|ИЗ
	|	&ТЗ_ОбеспечениеЗаказовПокупателей_Сводно КАК ТЗ_ОбеспечениеЗаказовПокупателей_Сводно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БЗ_ОбеспечениеЗаказовПокупателей_Сводно.ЗаказПокупателя КАК ЗаказПокупателя,
	|	БЗ_ОбеспечениеЗаказовПокупателей_Сводно.Номенклатура КАК Номенклатура,
	|	БЗ_ОбеспечениеЗаказовПокупателей_Сводно.Характеристика КАК Характеристика,
	|	БЗ_ОбеспечениеЗаказовПокупателей_Сводно.Потребность КАК Потребность,
	|	БЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_РезервНаСкладе КАК Обеспечено_РезервНаСкладе,
	|	БЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ОстатокНаСкладе КАК Обеспечено_ОстатокНаСкладе,
	|	БЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ЗаказНаПроизводство КАК Обеспечено_ЗаказНаПроизводство,
	|	БЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ПланПроизводства КАК Обеспечено_ПланПроизводства,
	|	БЗ_ОбеспечениеЗаказовПокупателей_Сводно.Осталось_Обеспечить КАК Осталось_Обеспечить,
	|	БЗ_ОбеспечениеЗаказовПокупателей_Сводно.ДатаОтгрузки КАК ДатаОтгрузки
	|ПОМЕСТИТЬ РС_ОбеспечениеЗаказовПокупателей_Сводно
	|ИЗ
	|	РегистрСведений.БЗ_ОбеспечениеЗаказовПокупателей_Сводно КАК БЗ_ОбеспечениеЗаказовПокупателей_Сводно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.ЗаказПокупателя, РС_ОбеспечениеЗаказовПокупателей_Сводно.ЗаказПокупателя) КАК ЗаказПокупателя,
	|	ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Номенклатура, РС_ОбеспечениеЗаказовПокупателей_Сводно.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Характеристика, РС_ОбеспечениеЗаказовПокупателей_Сводно.Характеристика) КАК Характеристика,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Потребность КАК Потребность,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_РезервНаСкладе КАК Обеспечено_РезервНаСкладе,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ОстатокНаСкладе КАК Обеспечено_ОстатокНаСкладе,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ЗаказНаПроизводство КАК Обеспечено_ЗаказНаПроизводство,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ПланПроизводства КАК Обеспечено_ПланПроизводства,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Осталось_Обеспечить КАК Осталось_Обеспечить,
	|	ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.НужноУдалить, ИСТИНА) КАК НужноУдалить
	|ИЗ
	|	РС_ОбеспечениеЗаказовПокупателей_Сводно КАК РС_ОбеспечениеЗаказовПокупателей_Сводно
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТЗ_ОбеспечениеЗаказовПокупателей_Сводно КАК ТЗ_ОбеспечениеЗаказовПокупателей_Сводно
	|		ПО РС_ОбеспечениеЗаказовПокупателей_Сводно.ЗаказПокупателя = ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.ЗаказПокупателя
	|			И РС_ОбеспечениеЗаказовПокупателей_Сводно.Номенклатура = ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Номенклатура
	|			И РС_ОбеспечениеЗаказовПокупателей_Сводно.Характеристика = ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Характеристика
	|ГДЕ
	|	(ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Потребность, 0) <> ЕСТЬNULL(РС_ОбеспечениеЗаказовПокупателей_Сводно.Потребность, 0)
	|			ИЛИ ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_РезервНаСкладе, 0) <> ЕСТЬNULL(РС_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_РезервНаСкладе, 0)
	|			ИЛИ ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ОстатокНаСкладе, 0) <> ЕСТЬNULL(РС_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ОстатокНаСкладе, 0)
	|			ИЛИ ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ЗаказНаПроизводство, 0) <> ЕСТЬNULL(РС_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ЗаказНаПроизводство, 0)
	|			ИЛИ ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ПланПроизводства, 0) <> ЕСТЬNULL(РС_ОбеспечениеЗаказовПокупателей_Сводно.Обеспечено_ПланПроизводства, 0)
	|			ИЛИ ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.Осталось_Обеспечить, 0) <> ЕСТЬNULL(РС_ОбеспечениеЗаказовПокупателей_Сводно.Осталось_Обеспечить, 0)
	|			ИЛИ ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1)) <> ЕСТЬNULL(РС_ОбеспечениеЗаказовПокупателей_Сводно.ДатаОтгрузки, ДАТАВРЕМЯ(1, 1, 1))
	|			ИЛИ ЕСТЬNULL(ТЗ_ОбеспечениеЗаказовПокупателей_Сводно.НужноУдалить, ИСТИНА))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателя,
	|	Номенклатура,
	|	Характеристика";
	Запрос.УстановитьПараметр("ТЗ_ОбеспечениеЗаказовПокупателей_Сводно", ТБСостояния.Потребность); 
	Если ТБСостояния.ПараметрыРасчета.Свойство("ОтладкуВыполняет") И ТБСостояния.ПараметрыРасчета.ОтладкуВыполняет=ПараметрыСеанса.АвторизованныйПользователь Тогда 
		ВнешниеОбработки.Создать("C:\Users\USR1CV8\AppData\Local\Temp\zapr.epf",Ложь).Дамп(Запрос);	
	КонецЕсли;
	
	ТЗ_ДляОбновленияРегистра = Запрос.Выполнить().Выгрузить();

	ПараметрыОбновления = Новый Структура("ИмяОтборов, ИмяРегистра", "ЗаказПокупателя","БЗ_ОбеспечениеЗаказовПокупателей_Сводно");
	ИмяОтборов = "ЗаказПокупателя";
	ИмяРегистра = "БЗ_ОбеспечениеЗаказовПокупателей_Сводно";

	Обновить_ДанныеРегистра_Запись(ТБСостояния,ТЗ_ДляОбновленияРегистра, ПараметрыОбновления);
	
КонецПроцедуры

Процедура Обновить_ОбеспечениеЗаказовПокупателей_Сводно(ТБСостояния, ТБПланирования); 

	ИмяОтборов = "ЗаказПокупателя";
	ИмяРегистра = "БЗ_ОбеспечениеЗаказовПокупателей_Сводно";
	ПараметрыОбновления = Новый Структура("ИмяОтборов, ИмяРегистра", ИмяОтборов,ИмяРегистра);
	
	ТЗ_ДляОбновленияРегистра = Обновить_ДанныеРегистра_СоздатьТЗОбновления(ТБСостояния, ТБСостояния.Потребность, ПараметрыОбновления);

	Обновить_ДанныеРегистра_Запись(ТБСостояния,ТЗ_ДляОбновленияРегистра, ПараметрыОбновления);
	
КонецПроцедуры

Процедура Обновить_ОбеспечениеЗаказовПокупателей_Комплектующие(ТБСостояния, ТБПланирования); 

	ИмяОтборов = "ЗаказПокупателя";
	ИмяРегистра = "БЗ_ОбеспечениеЗаказовПокупателей_Комплектующие";
	ПараметрыОбновления = Новый Структура("ИмяОтборов, ИмяРегистра", ИмяОтборов,ИмяРегистра);
	
	ТЗ_ДляОбновленияРегистра = Обновить_ДанныеРегистра_СоздатьТЗОбновления(ТБСостояния, ТБСостояния.ПотребностьДетально, ПараметрыОбновления);

	Обновить_ДанныеРегистра_Запись(ТБСостояния,ТЗ_ДляОбновленияРегистра, ПараметрыОбновления);
	
КонецПроцедуры




Функция Обновить_ДанныеРегистра_СоздатьТЗОбновления(ТБСостояния, ТЗ_Исходная, ПараметрыОбновления)
	МДРегистра = Метаданные.РегистрыСведений[ПараметрыОбновления.ИмяРегистра];
	//МДРегистра = Метаданные.РегистрыСведений.БЗ_ОбеспечениеЗаказовПокупателей_Сводно;
//Выборка ТЗ	
	ЗапросТекст = "ВЫБРАТЬ";
	Первое = Истина;	
	Для Каждого Измерение из МДРегистра.Измерения Цикл
		ЗапросТекст = ЗапросТекст + ?(Первое,"",",")+"
		|	ТЗ_Исходная."+Измерение.Имя+" КАК "+Измерение.Имя;
		Первое = Ложь;	
	КонецЦикла;
	Для Каждого Ресурс из МДРегистра.Ресурсы Цикл
		ЗапросТекст = ЗапросТекст + ",
		|	ТЗ_Исходная."+Ресурс.Имя+" КАК "+Ресурс.Имя;
	КонецЦикла;
	Для Каждого Реквизит из МДРегистра.Реквизиты Цикл
		ЗапросТекст = ЗапросТекст + ",
		|	ТЗ_Исходная."+Реквизит.Имя+" КАК "+Реквизит.Имя;
	КонецЦикла;   
	
	ЗапросТекст = ЗапросТекст +",
	|	ЛОЖЬ КАК НужноУдалить
	|ПОМЕСТИТЬ ТЗ_Исходная
	|ИЗ
	|	&ТЗ_Исходная КАК ТЗ_Исходная
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ";

//Выборка Регистра
	Первое = Истина;	
	Для Каждого Измерение из МДРегистра.Измерения Цикл
		ЗапросТекст = ЗапросТекст + ?(Первое,"",",")+"
		|	РС_Исходный."+Измерение.Имя+" КАК "+Измерение.Имя;
		Первое = Ложь;	
	КонецЦикла;
	Для Каждого Ресурс из МДРегистра.Ресурсы Цикл
		ЗапросТекст = ЗапросТекст + ",
		|	РС_Исходный."+Ресурс.Имя+" КАК "+Ресурс.Имя;
	КонецЦикла;
	Для Каждого Реквизит из МДРегистра.Реквизиты Цикл
		ЗапросТекст = ЗапросТекст + ",
		|	РС_Исходный."+Реквизит.Имя+" КАК "+Реквизит.Имя;
	КонецЦикла;
	ЗапросТекст = ЗапросТекст +"
	|ПОМЕСТИТЬ РС_Исходный
	|ИЗ
	|	РегистрСведений."+ПараметрыОбновления.ИмяРегистра+" КАК РС_Исходный
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ";
//Объединение
	Первое = Истина;	
	Для Каждого Измерение из МДРегистра.Измерения Цикл
		ЗапросТекст = ЗапросТекст + ?(Первое,"",",")+"
		|	ЕСТЬNULL(ТЗ_Исходная."+Измерение.Имя+",РС_Исходный."+Измерение.Имя+") КАК "+Измерение.Имя;
		Первое = Ложь;	
	КонецЦикла;
	Для Каждого Ресурс из МДРегистра.Ресурсы Цикл
		ЗапросТекст = ЗапросТекст + ",
		|	ТЗ_Исходная."+Ресурс.Имя+" КАК "+Ресурс.Имя;
	КонецЦикла;
	Для Каждого Реквизит из МДРегистра.Реквизиты Цикл
		ЗапросТекст = ЗапросТекст + ",
		|	ТЗ_Исходная."+Реквизит.Имя+" КАК "+Реквизит.Имя;
	КонецЦикла;
	ЗапросТекст = ЗапросТекст +",
	|	ЕСТЬNULL(ТЗ_Исходная.НужноУдалить, ИСТИНА) КАК НужноУдалить
	|ИЗ
	|	РС_Исходный КАК РС_Исходный
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТЗ_Исходная КАК ТЗ_Исходная
	|		ПО";
	Первое = Истина;	
	Для Каждого Измерение из МДРегистра.Измерения Цикл
		ЗапросТекст = ЗапросТекст + ?(Первое,"","
		|	И ")+" РС_Исходный."+Измерение.Имя+" = ТЗ_Исходная."+Измерение.Имя;
		Первое = Ложь;	
	КонецЦикла;
	ЗапросТекст = ЗапросТекст +"
	|ГДЕ
	|	(";
	Первое = Истина;	
	Для Каждого Ресурс из МДРегистра.Ресурсы Цикл
		ЗапросТекст = ЗапросТекст + ?(Первое,"","
		|	ИЛИ ")+
		"ЕСТЬNULL(ТЗ_Исходная."+Ресурс.Имя+", "+Обновить_ДанныеРегистра_ЗначениеЗаполнения(Ресурс)+" ) <> "+
		"ЕСТЬNULL(РС_Исходный."+Ресурс.Имя+", "+Обновить_ДанныеРегистра_ЗначениеЗаполнения(Ресурс)+" )";
		Первое = Ложь;	
	КонецЦикла;
	Для Каждого Реквизит из МДРегистра.Реквизиты Цикл
		ЗапросТекст = ЗапросТекст + "
		|	ИЛИ "+
		"ЕСТЬNULL(ТЗ_Исходная."+Ресурс.Имя+", "+Обновить_ДанныеРегистра_ЗначениеЗаполнения(Ресурс)+" ) <> "+
		"ЕСТЬNULL(РС_Исходный."+Ресурс.Имя+", "+Обновить_ДанныеРегистра_ЗначениеЗаполнения(Ресурс)+" )";
	КонецЦикла;
	ЗапросТекст = ЗапросТекст +"
	|			ИЛИ ЕСТЬNULL(ТЗ_Исходная.НужноУдалить, ИСТИНА))
	|
	|УПОРЯДОЧИТЬ ПО";
	Первое = Истина;	
	Для Каждого Измерение из МДРегистра.Измерения Цикл
		ЗапросТекст = ЗапросТекст + ?(Первое,"",",")+"
		|	"+Измерение.Имя;
		Первое = Ложь;	
	КонецЦикла; 
	Запрос = Новый Запрос;
	Запрос.Текст = ЗапросТекст;
	
	Запрос.УстановитьПараметр("ТЗ_Исходная", ТЗ_Исходная);  
	
	Если ТБСостояния.ПараметрыРасчета.Свойство("ОтладкуВыполняет") И ТБСостояния.ПараметрыРасчета.ОтладкуВыполняет=ПараметрыСеанса.АвторизованныйПользователь Тогда 
		ВнешниеОбработки.Создать("C:\Users\USR1CV8\AppData\Local\Temp\zapr.epf",Ложь).Дамп(Запрос);	
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции       

Функция Обновить_ДанныеРегистра_ЗначениеЗаполнения(МДРеквизита)
	Если МДРеквизита.Тип.СодержитТип(Тип("Число")) Тогда
		Если ЗначениеЗаполнено(МДРеквизита.ЗначениеЗаполнения) Тогда
			Возврат Формат(МДРеквизита.ЗначениеЗаполнения,"ЧРД=.; ЧН=0; ЧГ=0");
		Иначе
			Возврат "0";
		КонецЕсли;
	ИначеЕсли  МДРеквизита.Тип.СодержитТип(Тип("Дата")) Тогда
		Если ЗначениеЗаполнено(МДРеквизита.ЗначениеЗаполнения) Тогда
			Возврат "ДАТАВРЕМЯ("+Год(МДРеквизита.ЗначениеЗаполнения)+","+Месяц(МДРеквизита.ЗначениеЗаполнения)+","+День(МДРеквизита.ЗначениеЗаполнения)+")";
		Иначе       
			Возврат "ДАТАВРЕМЯ(1,1,1)";
		КонецЕсли;
	ИначеЕсли  МДРеквизита.Тип.СодержитТип(Тип("Строка")) Тогда
		Если ЗначениеЗаполнено(МДРеквизита.ЗначениеЗаполнения) Тогда
			Возврат """"+МДРеквизита.ЗначениеЗаполнения+"""";
		Иначе           
			Возврат """"""; //""
		КонецЕсли;
	Иначе
		Возврат "НЕОПРЕДЕЛЕНО";
	КонецЕсли
КонецФункции


Процедура Обновить_ДанныеРегистра_Запись(ТБСостояния,ТЗОбновления, ПараметрыОбновления)
	ТЗ_Отборы = ТЗОбновления.Скопировать(,ПараметрыОбновления.ИмяОтборов);
	ТЗ_Отборы.Свернуть(ПараметрыОбновления.ИмяОтборов);                 
	
	Индексы = "НужноУдалить";
	Для Каждого Колонка из ТЗ_Отборы.Колонки Цикл
		Индексы=Индексы+","+Колонка.Имя;      
	КонецЦикла;
	ТЗОбновления.Индексы.Добавить(Индексы);
		
	
	НаборЗаписейРегистра=РегистрыСведений[ПараметрыОбновления.ИмяРегистра].СоздатьНаборЗаписей();
	Для Каждого СтрокаОтбор из ТЗ_Отборы Цикл
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений."+ПараметрыОбновления.ИмяРегистра);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		НаборЗаписейРегистра.Отбор.Сбросить();
		ПараметрыОтбора = Новый Структура("НужноУдалить", Ложь);
		Для Каждого Колонка из ТЗ_Отборы.Колонки Цикл
		    ЭлементБлокировки.УстановитьЗначение(Колонка.Имя, СтрокаОтбор[Колонка.Имя]);
			НаборЗаписейРегистра.Отбор[Колонка.Имя].Установить(СтрокаОтбор[Колонка.Имя],Истина);
			ПараметрыОтбора.Вставить(Колонка.Имя,СтрокаОтбор[Колонка.Имя]);
		КонецЦикла;
		ТЗ_Набор = ТЗОбновления.Скопировать(ТЗОбновления.НайтиСтроки(ПараметрыОтбора));
		Блокировка.Заблокировать();	                     
		НаборЗаписейРегистра.Загрузить(ТЗ_Набор);  
		НаборЗаписейРегистра.Записать(Истина);
		ЗафиксироватьТранзакцию();	
	КонецЦикла;
КонецПроцедуры

Процедура Расчет(ПараметрыРасчета = Неопределено) Экспорт
		
	РасчетЗНП(ПараметрыРасчета);
	////временно	
	//РегСтатусы= РегистрыСведений.БЗ_ОбеспечениеЗаказовПокупателей.СоздатьНаборЗаписей();
	//РегСтатусы.Загрузить(ТЗ);
	//РегСтатусы.Записать();
		
	
КонецПроцедуры