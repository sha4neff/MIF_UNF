Функция Лог(Событие,Уровень, Данные,Комментарий="") Экспорт
	ЗаписьЖурналаРегистрации(Событие,Уровень,,Данные,Комментарий,РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
КонецФункции

Функция Записать_JSON(Данные) Экспорт
	ЗаписьJSON=Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	НастройкиСериализацииJSON=Новый НастройкиСериализацииJSON();
	НастройкиСериализацииJSON.ВариантЗаписиДаты=ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты=ФорматДатыJSON.ISO;
	ЗаписатьJSON(ЗаписьJSON,Данные,НастройкиСериализацииJSON);
	Возврат ЗаписьJSON.Закрыть();
КонецФункции

Функция ТБПакеты_ЗаданияНаПогрузку(Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БЗ_ЗаданиеНаПогрузкуПакеты.Номенклатура КАК Номенклатура,
	|	БЗ_ЗаданиеНаПогрузкуПакеты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	БЗ_ЗаданиеНаПогрузкуПакеты.Пакет КАК Пакет,
	|	БЗ_ЗаданиеНаПогрузкуПакеты.ХарактеристикаПакета КАК ХарактеристикаПакета,
	|	БЗ_ЗаданиеНаПогрузкуПакеты.Количество КАК Количество,
	|	БЗ_ЗаданиеНаПогрузкуПакеты.КоличествоИзделий КАК КоличествоИзделий
	|ПОМЕСТИТЬ Пакеты
	|ИЗ
	|	Документ.БЗ_ЗаданиеНаПогрузку.Пакеты КАК БЗ_ЗаданиеНаПогрузкуПакеты
	|ГДЕ
	|	БЗ_ЗаданиеНаПогрузкуПакеты.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БЗ_КорректировкаПогрузкиПакеты.Номенклатура,
	|	БЗ_КорректировкаПогрузкиПакеты.ХарактеристикаНоменклатуры,
	|	БЗ_КорректировкаПогрузкиПакеты.Пакет,
	|	БЗ_КорректировкаПогрузкиПакеты.ХарактеристикаПакета,
	|	БЗ_КорректировкаПогрузкиПакеты.Количество,
	|	БЗ_КорректировкаПогрузкиПакеты.КоличествоИзделий
	|ИЗ
	|	Документ.БЗ_КорректировкаПогрузки.Пакеты КАК БЗ_КорректировкаПогрузкиПакеты
	|ГДЕ
	|	БЗ_КорректировкаПогрузкиПакеты.Ссылка.ДокументОснование = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пакеты.Номенклатура КАК Номенклатура,
	|	Пакеты.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	Пакеты.Пакет КАК Пакет,
	|	Пакеты.ХарактеристикаПакета КАК ХарактеристикаПакета,
	|	СУММА(Пакеты.Количество) КАК Количество,
	|	СУММА(Пакеты.КоличествоИзделий) КАК КоличествоИзделий
	|ИЗ
	|	Пакеты КАК Пакеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Пакеты.Пакет,
	|	Пакеты.ХарактеристикаПакета,
	|	Пакеты.Номенклатура,
	|	Пакеты.ХарактеристикаНоменклатуры";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ТБТовары_ЗаданияНаПогрузку(Ссылка) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БЗ_ЗаданиеНаПогрузкуТовары.Номенклатура КАК Номенклатура,
	|	БЗ_ЗаданиеНаПогрузкуТовары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	БЗ_ЗаданиеНаПогрузкуТовары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	Документ.БЗ_ЗаданиеНаПогрузку.Товары КАК БЗ_ЗаданиеНаПогрузкуТовары
	|ГДЕ
	|	БЗ_ЗаданиеНаПогрузкуТовары.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БЗ_КорректировкаПогрузкиТовары.Номенклатура,
	|	БЗ_КорректировкаПогрузкиТовары.ХарактеристикаНоменклатуры,
	|	БЗ_КорректировкаПогрузкиТовары.Количество
	|ИЗ
	|	Документ.БЗ_КорректировкаПогрузки.Товары КАК БЗ_КорректировкаПогрузкиТовары
	|ГДЕ
	|	БЗ_КорректировкаПогрузкиТовары.Ссылка.ДокументОснование = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	СУММА(Товары.Количество) КАК Количество
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.ХарактеристикаНоменклатуры";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Процедура Экспорт_Номенклатура(УзелОбъект)
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	НоменклатураИзменения.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
	                    |ГДЕ
	                    |	НоменклатураИзменения.Узел = &Узел");	
	Запрос.Параметры.Вставить("Узел",УзелОбъект.Ссылка);
	ОбменНоменклатура=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой); // Таблица регистраций на узле
	Запрос=Новый Запрос("ВЫБРАТЬ
						|	ХарактеристикиНоменклатурыИзменения.Ссылка.Владелец КАК Владелец,
						|	ХарактеристикиНоменклатурыИзменения.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.ХарактеристикиНоменклатуры.Изменения КАК ХарактеристикиНоменклатурыИзменения
						|ГДЕ
						|	ХарактеристикиНоменклатурыИзменения.Ссылка.Владелец ССЫЛКА Справочник.Номенклатура
						|	И ХарактеристикиНоменклатурыИзменения.Узел = &Узел");
	Запрос.Параметры.Вставить("Узел",УзелОбъект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		Если ОбменНоменклатура.Найти(Выборка.Владелец,"Ссылка")=Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбъект.Ссылка,Выборка.Владелец);
		КонецЕсли;
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
	КонецЦикла;
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ШтрихкодыНоменклатуры");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	ШтрихкодыНоменклатуры.Номенклатура КАК Владелец
	                    |ИЗ
	                    |	РегистрСведений.ШтрихкодыНоменклатуры.Изменения КАК ШтрихкодыНоменклатурыИзменения
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	                    |		ПО ШтрихкодыНоменклатурыИзменения.Штрихкод = ШтрихкодыНоменклатуры.Штрихкод
	                    |ГДЕ
	                    |	ШтрихкодыНоменклатурыИзменения.Узел = &Узел
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	ШтрихкодыНоменклатуры.Номенклатура");
	Запрос.Параметры.Вставить("Узел",УзелОбъект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		Если ОбменНоменклатура.Найти(Выборка.Владелец,"Ссылка")=Неопределено Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбъект.Ссылка,Выборка.Владелец);
		КонецЕсли;
	КонецЦикла;
	Запрос=Новый Запрос("ВЫБРАТЬ
	|	ШтрихкодыНоменклатурыИзменения.Штрихкод КАК Штрихкод,
	|	ШтрихкодыНоменклатурыИзменения.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатурыИзменения.Характеристика КАК Характеристика,
	|	ШтрихкодыНоменклатурыИзменения.Партия КАК Партия,
	|	ШтрихкодыНоменклатурыИзменения.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры.Изменения КАК ШтрихкодыНоменклатурыИзменения
	|ГДЕ
	|	ШтрихкодыНоменклатурыИзменения.Узел = &Узел");
	Запрос.Параметры.Вставить("Узел",УзелОбъект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		Набор = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		Набор.Отбор.Штрихкод.Установить(Выборка.Штрихкод);
		Набор.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		Набор.Отбор.Характеристика.Установить(Выборка.Характеристика);
		Набор.Отбор.Партия.Установить(Выборка.Партия);
		Набор.Отбор.ЕдиницаИзмерения.Установить(Выборка.ЕдиницаИзмерения);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Набор);		
	КонецЦикла;	
	ЗафиксироватьТранзакцию();
	Запрос=Новый Запрос("ВЫБРАТЬ
						|	НоменклатураИзменения.Ссылка КАК Ссылка
						|ИЗ
						|	Справочник.Номенклатура.Изменения КАК НоменклатураИзменения
						|ГДЕ
						|	НоменклатураИзменения.Узел = &Узел");	
	Запрос.Параметры.Вставить("Узел",УзелОбъект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Ссылка.ЭтоГруппа Тогда
			//Если НЕ ЗначениеЗаполнено(Выборка.Ссылка.БЗ_ОтгрузкаЧерезWMS) Тогда
			//	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
			//	Продолжить;
			//КонецЕсли;
		КонецЕсли;
		Если УзелОбъект.ВыполнитьОтправкуJSONПакета(УзелОбъект.ПолучитьJSON_Номенклатура(Выборка.Ссылка))="ok" Тогда
			 ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура Экспорт_БЗ_ЗаданиеНаПогрузку(УзелОбъект)
	//------ Регистрация Погрузок по измененому ЗНП	------
	Запрос=Новый Запрос(
	"ВЫБРАТЬ
	|	БЗ_КорректировкаПогрузкиИзменения.Ссылка.ДокументОснование КАК ЗНП,
	|	БЗ_КорректировкаПогрузкиИзменения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БЗ_КорректировкаПогрузки.Изменения КАК БЗ_КорректировкаПогрузкиИзменения
	|ГДЕ
	|	БЗ_КорректировкаПогрузкиИзменения.Узел = &Узел");
	Запрос.Параметры.Вставить("Узел",УзелОбъект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбъект.Ссылка,Выборка.ЗНП);
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
	КонецЦикла;
	//------
	Запрос=Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Документ.БЗ_ЗаданиеНаПогрузку.Изменения ГДЕ Узел=&Узел");
	Запрос.Параметры.Вставить("Узел",УзелОбъект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		// Проверяем может ли этот узел выгружать документы для склада измененой погрузки, если нет то удаляем регистрацию
		//СТСклад=УзелОбъект.Склады.Найти(Выборка.Ссылка.Склад,"Склад");
		//Если СТСклад=Неопределено Тогда
		//	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
		//	Продолжить;
		//КонецЕсли;
		// Проверяем, что это документ в пределах рабочего периода
		//Если Выборка.Ссылка.Дата<СТСклад.ДатаНачалаРаботы ИЛИ Выборка.Ссылка.Дата<(ТекущаяДата()-14*86400) Тогда
		//Если Выборка.Ссылка.Дата<СТСклад.ДатаНачалаРаботы Тогда
		//	ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
		//	Продолжить;
		//КонецЕсли;
		Ответ="";
		JSONЗапрос=УзелОбъект.ПолучитьJSON_ЗаданиеНаПогрузку(Выборка.Ссылка);
		Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
		Если Результат="ok" Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
		ИначеЕсли Результат="need_update_goods" Тогда
			ТБПакеты=БЗ_WMS_Обмен.ТБПакеты_ЗаданияНаПогрузку(Выборка.Ссылка);
			Для Каждого СТТовар Из ТБПакеты Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбъект.Ссылка,СТТовар.Пакет);
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбъект.Ссылка,СТТовар.Номенклатура);
			КонецЦикла;
		ИначеЕсли Результат="need_objects" Тогда
			Если НЕ ОтправитьНенайденыеОбъекты(УзелОбъект, Ответ.НенайденыОбъекты) Тогда
				Возврат;
			Иначе
				Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
				Если Результат="ok" Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры

Процедура Экспорт_ТоварыВПроизводстве(УзелОбъект)
	Запрос = Новый Запрос();
	//Запрос.Текст="ВЫБРАТЬ
	//             |	ЗаказыНаПроизводство.Номенклатура КАК Номенклатура,
	//             |	ЗаказыНаПроизводство.Характеристика КАК Характеристика,
	//             |	ЗаказыНаПроизводство.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	//             |	СУММА(ЗаказыНаПроизводство.КоличествоОстаток) КАК Количество,
	//             |	ЗаказыНаПроизводство.Назначение КАК Назначение
	//             |ПОМЕСТИТЬ ОстаткиЗНП
	//             |ИЗ
	//             |	РегистрНакопления.БЗ_ОстаткиНазначений.Остатки(
	//             |			,
	//             |			Подразделение <> &ЦехФурнитура
	//             |				И ЗаказНаПроизводство.Дата > &ДатаВидимости
	//             |				И ЗаказНаПроизводство.Проведен = ИСТИНА) КАК ЗаказыНаПроизводство
	//             |ГДЕ
	//             |	ЗаказыНаПроизводство.Номенклатура.Изготовитель <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	//             |
	//             |СГРУППИРОВАТЬ ПО
	//             |	ЗаказыНаПроизводство.Номенклатура,
	//             |	ЗаказыНаПроизводство.Характеристика,
	//             |	ЗаказыНаПроизводство.ЗаказНаПроизводство,
	//             |	ЗаказыНаПроизводство.Назначение
	//             |
	//             |ИНДЕКСИРОВАТЬ ПО
	//             |	ЗаказНаПроизводство
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ
	//             |	ОстаткиЗаказов.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	//             |ПОМЕСТИТЬ ОткрытыеЗНП
	//             |ИЗ
	//             |	ОстаткиЗНП КАК ОстаткиЗаказов
	//             |
	//             |СГРУППИРОВАТЬ ПО
	//             |	ОстаткиЗаказов.ЗаказНаПроизводство
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ
	//             |	БЗ_ОПСТСД_ВводДанных.Номенклатура КАК Номенклатура,
	//             |	БЗ_ОПСТСД_ВводДанных.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	//             |	БЗ_ОПСТСД_ВводДанных.ЗНП КАК ЗНП,
	//             |	БЗ_ОПСТСД_ВводДанных.Назначение КАК Назначение,
	//             |	ВЫБОР
	//             |		КОГДА ПринятыеПалеты.НомерПаллеты ЕСТЬ NULL
	//             |			ТОГДА -СУММА(БЗ_ОПСТСД_ВводДанных.Количество)
	//             |		ИНАЧЕ 0
	//             |	КОНЕЦ КАК Количество
	//             |ПОМЕСТИТЬ НеПринятыеПалеты
	//             |ИЗ
	//             |	ОткрытыеЗНП КАК ОткрытыеЗНП
	//             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.БЗ_ОПС.ТСД_ВводДанных КАК БЗ_ОПСТСД_ВводДанных
	//             |			ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	//             |				БЗ_ОПСПриемкиТоваров.Ссылка КАК Ссылка,
	//             |				БЗ_ОПСПриемкиТоваров.НомерПаллеты КАК НомерПаллеты
	//             |			ИЗ
	//             |				Документ.БЗ_ОПС.ПриемкиТоваров КАК БЗ_ОПСПриемкиТоваров
	//             |			ГДЕ
	//             |				БЗ_ОПСПриемкиТоваров.Ссылка.Проведен = ИСТИНА
	//             |				И БЗ_ОПСПриемкиТоваров.Ссылка.ПринятоНаСкладе = ЛОЖЬ
	//             |			
	//             |			СГРУППИРОВАТЬ ПО
	//             |				БЗ_ОПСПриемкиТоваров.Ссылка,
	//             |				БЗ_ОПСПриемкиТоваров.НомерПаллеты) КАК ПринятыеПалеты
	//             |			ПО БЗ_ОПСТСД_ВводДанных.Ссылка = ПринятыеПалеты.Ссылка
	//             |				И БЗ_ОПСТСД_ВводДанных.НомерПаллеты = ПринятыеПалеты.НомерПаллеты
	//             |		ПО ОткрытыеЗНП.ЗаказНаПроизводство = БЗ_ОПСТСД_ВводДанных.ЗНП
	//             |ГДЕ
	//             |	БЗ_ОПСТСД_ВводДанных.Ссылка.ПринятоНаСкладе = ЛОЖЬ
	//             |	И БЗ_ОПСТСД_ВводДанных.Ссылка.Дата > &ДатаВидимости
	//             |
	//             |СГРУППИРОВАТЬ ПО
	//             |	БЗ_ОПСТСД_ВводДанных.Номенклатура,
	//             |	БЗ_ОПСТСД_ВводДанных.ХарактеристикаНоменклатуры,
	//             |	БЗ_ОПСТСД_ВводДанных.ЗНП,
	//             |	БЗ_ОПСТСД_ВводДанных.Назначение,
	//             |	ПринятыеПалеты.НомерПаллеты
	//             |
	//             |ИНДЕКСИРОВАТЬ ПО
	//             |	ЗНП
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ
	//             |	ОстаткиЗНП.Номенклатура КАК Номенклатура,
	//             |	ОстаткиЗНП.Характеристика КАК Характеристика,
	//             |	ОстаткиЗНП.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	//             |	ОстаткиЗНП.Количество КАК Количество,
	//             |	ОстаткиЗНП.Назначение КАК Назначение
	//             |ПОМЕСТИТЬ Сводная
	//             |ИЗ
	//             |	ОстаткиЗНП КАК ОстаткиЗНП
	//             |
	//             |ОБЪЕДИНИТЬ ВСЕ
	//             |
	//             |ВЫБРАТЬ
	//             |	НеПринятыеПалеты.Номенклатура,
	//             |	НеПринятыеПалеты.ХарактеристикаНоменклатуры,
	//             |	НеПринятыеПалеты.ЗНП,
	//             |	0,
	//             |	НеПринятыеПалеты.Назначение
	//             |ИЗ
	//             |	НеПринятыеПалеты КАК НеПринятыеПалеты
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ
	//             |	Сводная.Номенклатура КАК Номенклатура,
	//             |	Сводная.Характеристика КАК Характеристика,
	//             |	Сводная.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	//             |	СУММА(Сводная.Количество) КАК Количество,
	//             |	Сводная.Назначение КАК Назначение
	//             |ПОМЕСТИТЬ Итоговая
	//             |ИЗ
	//             |	Сводная КАК Сводная
	//             |
	//             |СГРУППИРОВАТЬ ПО
	//             |	Сводная.Номенклатура,
	//             |	Сводная.Характеристика,
	//             |	Сводная.ЗаказНаПроизводство,
	//             |	Сводная.Назначение
	//             |;
	//             |
	//             |////////////////////////////////////////////////////////////////////////////////
	//             |ВЫБРАТЬ
	//             |	Итоговая.Номенклатура КАК Номенклатура,
	//             |	Итоговая.Характеристика КАК Характеристика,
	//             |	Итоговая.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	//             |	Итоговая.Количество КАК Количество,
	//             |	Итоговая.Назначение КАК Назначение,
	//             |	Итоговая.ЗаказНаПроизводство.Дата КАК Дата,
	//             |	Итоговая.ЗаказНаПроизводство.Номер КАК Номер,
	//             |	Итоговая.ЗаказНаПроизводство.СтруктурнаяЕдиница КАК Подразделение
	//             |ИЗ
	//             |	Итоговая КАК Итоговая
	//             |ГДЕ
	//             |	Итоговая.Количество > 0";
	Запрос.Текст="ВЫБРАТЬ
	             |	ЗаказыНаПроизводство.Номенклатура КАК Номенклатура,
	             |	ЗаказыНаПроизводство.Характеристика КАК Характеристика,
	             |	ЗаказыНаПроизводство.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	             |	СУММА(ЗаказыНаПроизводство.КоличествоОстаток) КАК Количество,
	             |	ЗаказыНаПроизводство.Назначение КАК Назначение
	             |ПОМЕСТИТЬ ОстаткиЗНП
	             |ИЗ
	             |	РегистрНакопления.БЗ_ОстаткиНазначений.Остатки(
	             |			,
	             |			Подразделение <> &ЦехФурнитура
	             |				И ЗаказНаПроизводство.Дата > &ДатаВидимости
	             |				И ЗаказНаПроизводство.Проведен = ИСТИНА) КАК ЗаказыНаПроизводство
	             |ГДЕ
	             |	ЗаказыНаПроизводство.Номенклатура.Изготовитель <> ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ЗаказыНаПроизводство.Номенклатура,
	             |	ЗаказыНаПроизводство.Характеристика,
	             |	ЗаказыНаПроизводство.ЗаказНаПроизводство,
	             |	ЗаказыНаПроизводство.Назначение
	             |
	             |ИНДЕКСИРОВАТЬ ПО
	             |	ЗаказНаПроизводство
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиЗаказов.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	             |ПОМЕСТИТЬ ОткрытыеЗНП
	             |ИЗ
	             |	ОстаткиЗНП КАК ОстаткиЗаказов
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ОстаткиЗаказов.ЗаказНаПроизводство
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ОстаткиЗНП.Номенклатура КАК Номенклатура,
	             |	ОстаткиЗНП.Характеристика КАК Характеристика,
	             |	ОстаткиЗНП.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	             |	ОстаткиЗНП.Количество КАК Количество,
	             |	ОстаткиЗНП.Назначение КАК Назначение
	             |ПОМЕСТИТЬ Сводная
	             |ИЗ
	             |	ОстаткиЗНП КАК ОстаткиЗНП
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Сводная.Номенклатура КАК Номенклатура,
	             |	Сводная.Характеристика КАК Характеристика,
	             |	Сводная.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	             |	СУММА(Сводная.Количество) КАК Количество,
	             |	Сводная.Назначение КАК Назначение
	             |ПОМЕСТИТЬ Итоговая
	             |ИЗ
	             |	Сводная КАК Сводная
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	Сводная.Номенклатура,
	             |	Сводная.Характеристика,
	             |	Сводная.ЗаказНаПроизводство,
	             |	Сводная.Назначение
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	Итоговая.Номенклатура КАК Номенклатура,
	             |	Итоговая.Характеристика КАК Характеристика,
	             |	Итоговая.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	             |	Итоговая.Количество КАК Количество,
	             |	Итоговая.Назначение КАК Назначение,
	             |	Итоговая.ЗаказНаПроизводство.Дата КАК Дата,
	             |	Итоговая.ЗаказНаПроизводство.Номер КАК Номер,
	             |	Итоговая.ЗаказНаПроизводство.СтруктурнаяЕдиница КАК Подразделение
	             |ИЗ
	             |	Итоговая КАК Итоговая
	             |ГДЕ
	             |	Итоговая.Количество > 0";
	Запрос.УстановитьПараметр("ДатаВидимости", НачалоДня(ТекущаяДата())-60*60*24*240); // 240 дней	
	Запрос.УстановитьПараметр("ЦехФурнитура", Справочники.СтруктурныеЕдиницы.НайтиПоКоду("НФ-000016")); // 240 дней	
	ВыборкаОстатки=Запрос.Выполнить().Выбрать();
	Остатки=Новый Массив();
	Пока ВыборкаОстатки.Следующий() Цикл
		Остатки.Добавить(
			Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, ЗаказНаПроизводство, Количество, Подразделение",
			Строка(ВыборкаОстатки.Номенклатура.УникальныйИдентификатор()),?(ЗначениеЗаполнено(ВыборкаОстатки.Характеристика),Строка(ВыборкаОстатки.Характеристика.УникальныйИдентификатор()),""),
			"ЗНП "+Строка(ВыборкаОстатки.Номер)+" ("+Строка(ВыборкаОстатки.Дата)+")",
			ВыборкаОстатки.Количество, Строка(ВыборкаОстатки.Подразделение.УникальныйИдентификатор())));
	КонецЦикла;
	ЗаписьЖурналаРегистрации("ОбменWMS",,,"Выгружено: "+СокрЛП(Остатки.Количество()),"",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

	JSONПакет=Новый Структура();
	JSONПакет.Вставить("КодБД",УзелОбъект.КодБД);
	JSONПакет.Вставить("Тип","ТоварыВПроизводстве");
	JSONПакет.Вставить("Данные",Остатки);
	JSONЗапрос=Записать_JSON(JSONПакет);
	Ответ="";
	СтатусОтвета=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
	Если СтатусОтвета="need_objects" И Ответ.Свойство("НенайденыТовары")Тогда
		Для Каждого Товар Из Ответ.НенайденыТовары Цикл
			Попытка
				Номенклатура=Справочники.Номенклатура.ПолучитьСсылку(Товар).ПолучитьОбъект().Ссылка;
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбъект.Ссылка,Номенклатура);
			Исключение
				Продолжить;
			КонецПопытки;
		КонецЦикла;
	ИначеЕсли СтатусОтвета="need_objects" И Ответ.Свойство("НенайденыОбъекты")Тогда
		Если НЕ ОтправитьНенайденыеОбъекты(УзелОбъект, Ответ.НенайденыОбъекты) Тогда
			 Возврат ;
		 КонецЕсли;			 
	КонецЕсли;
КонецПроцедуры

Процедура Экспорт_ОПС(УзелОбъект) Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Документ.БЗ_ОПС.Изменения ГДЕ Узел=&Узел");
	Запрос.Параметры.Вставить("Узел",УзелОбъект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		СТСклад=УзелОбъект.Склады.Найти(Выборка.Ссылка.СкладПриемки,"Склад");
		Если СТСклад=Неопределено Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		Если Выборка.Ссылка.Дата<СТСклад.ДатаНачалаРаботы ИЛИ Выборка.Ссылка.Дата<(ТекущаяДата()-14*86400) Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		JSONЗапрос=УзелОбъект.ПолучитьJSON_ОПС(Выборка.Ссылка);
		Ответ="";
		Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
		Если Результат="ok" Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
		ИначеЕсли Результат="need_update_goods" Тогда
			Тбл=Выборка.Ссылка.Товары.Выгрузить();
			Тбл.Свернуть("Номенклатура","Количество");
			Для Каждого СТТовар Из Тбл Цикл
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбъект.Ссылка,СТТовар.Номенклатура);
			КонецЦикла;
		ИначеЕсли Результат="need_objects" Тогда
			Если НЕ ОтправитьНенайденыеОбъекты(УзелОбъект, Ответ.НенайденыОбъекты) Тогда
				Возврат;
			Иначе
				Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
				Если Результат="ok" Тогда
					ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;		
	КонецЦикла;	
КонецПроцедуры

Процедура Импорт_ПриемкаОПС(УзелОбъект)
	JSONПакет=Новый Структура();
	JSONПакет.Вставить("Тип","ПолучитьПриемкиОПС");
	JSONПакет.Вставить("КодБД","УНФ");
	JSONПакет.Вставить("Склады",УзелОбъект.Склады.ВыгрузитьКолонку("СкладWMS"));
	JSONОтвет="";
	Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(ПланыОбмена.БЗ_WMS.Записать_JSON(JSONПакет),JSONОтвет);
	Если Результат="ok" Тогда
		ПринятыеДокументы=Новый Массив();
		Для Каждого Данные Из JSONОтвет.Документы Цикл		
			Запрос = Новый Запрос;
			Запрос.Текст =			
			"ВЫБРАТЬ
			|	БЗ_ОПС.Ссылка
			|ИЗ
			|	Документ.БЗ_ОПС КАК БЗ_ОПС
			|ГДЕ
			|	БЗ_ОПС.GUID = &GUID";
			Запрос.УстановитьПараметр("GUID",СокрЛП(Данные.ОПСGUID));
			ВыборкаОПС=Запрос.Выполнить().Выбрать();
			Если ВыборкаОПС.Следующий() Тогда
				НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ.БЗ_ОПС");
				ЭлементБлокировки.УстановитьЗначение("Ссылка",ВыборкаОПС.Ссылка);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;				
				Блокировка.Заблокировать();				
				Запрос = Новый Запрос;
				Запрос.Текст =				
				"ВЫБРАТЬ
				|	БЗ_ОПСПриемкиТоваров.ПриемкаТоваров,
				|	БЗ_ОПСПриемкиТоваров.НомерСтроки
				|ИЗ
				|	Документ.БЗ_ОПС.ПриемкиТоваров КАК БЗ_ОПСПриемкиТоваров
				|ГДЕ
				|	БЗ_ОПСПриемкиТоваров.Ссылка = &Ссылка
				|	И БЗ_ОПСПриемкиТоваров.НомерПаллеты = &НомерПаллеты";
				Запрос.УстановитьПараметр("Ссылка",ВыборкаОПС.Ссылка);
				Запрос.УстановитьПараметр("НомерПаллеты",Данные.ОПСНомерПаллеты);
				ВыборкаПриемка=Запрос.Выполнить().Выбрать();
				ЕстьДокумент=Ложь;
				Пока ВыборкаПриемка.Следующий() Цикл
					ЕстьДокумент=Истина;
					Если Данные.Проведен Тогда
						ПринятыеДокументы.Добавить(Данные.GUID);
						Продолжить;
					Иначе
						// Приемка удалена в WMS
						ПриёмТоваров=ВыборкаПриемка.ПриемкаТоваров.ПолучитьОбъект();
						ПриёмТоваров.УстановитьПометкуУдаления(Истина);
						ОПС=ВыборкаОПС.Ссылка.ПолучитьОбъект();
						ОПС.ПриемкиТоваров.Удалить(ВыборкаПриемка.НомерСтроки);						
						ОПС.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
						Продолжить;
					КонецЕсли;					
				КонецЦикла;
				Если ЕстьДокумент Тогда	
					ЗафиксироватьТранзакцию();
					Продолжить;	
				КонецЕсли;
				ОПС=ВыборкаОПС.Ссылка.ПолучитьОбъект();				
				Запрос = Новый Запрос;
				Запрос.Текст =				
				"ВЫБРАТЬ
				|	БЗ_ОПСТСД_ВводДанных.Номенклатура КАК Номенклатура,
				|	БЗ_ОПСТСД_ВводДанных.ХарактеристикаНоменклатуры КАК Характеристика,
				|	СУММА(БЗ_ОПСТСД_ВводДанных.Количество) КАК Количество,
				|	БЗ_ОПСТСД_ВводДанных.ЗНП КАК ЗНП,
				|	СпецификацииПоУмолчанию.Спецификация КАК Спецификация,
				|	БЗ_ОПСТСД_ВводДанных.Сотрудник КАК Сотрудник,
				|	БЗ_ОПСТСД_ВводДанных.Ссылка.Участок.Подразделение КАК УчастокПодразделение,
				|	БЗ_ОПСТСД_ВводДанных.Назначение КАК БЗ_Назначение
				|ИЗ
				|	Документ.БЗ_ОПС.ТСД_ВводДанных КАК БЗ_ОПСТСД_ВводДанных
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпецификацииПоУмолчанию КАК СпецификацииПоУмолчанию
				|		ПО БЗ_ОПСТСД_ВводДанных.Номенклатура = СпецификацииПоУмолчанию.Номенклатура
				|			И БЗ_ОПСТСД_ВводДанных.ХарактеристикаНоменклатуры = СпецификацииПоУмолчанию.Характеристика
				|ГДЕ
				|	БЗ_ОПСТСД_ВводДанных.НомерПаллеты = &НомерПаллеты
				|	И БЗ_ОПСТСД_ВводДанных.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	БЗ_ОПСТСД_ВводДанных.Номенклатура,
				|	БЗ_ОПСТСД_ВводДанных.ХарактеристикаНоменклатуры,
				|	БЗ_ОПСТСД_ВводДанных.ЗНП,
				|	СпецификацииПоУмолчанию.Спецификация,
				|	БЗ_ОПСТСД_ВводДанных.Сотрудник,
				|	БЗ_ОПСТСД_ВводДанных.Ссылка.Участок.Подразделение,
				|	БЗ_ОПСТСД_ВводДанных.Назначение
				|ИТОГИ ПО
				|	ЗНП";
				Запрос.УстановитьПараметр("Ссылка",ВыборкаОПС.Ссылка);
				Запрос.УстановитьПараметр("НомерПаллеты",Данные.ОПСНомерПаллеты);
				ВыборкаЗНП=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				НачатьТранзакцию();
				ПроизошлаОшибка=Ложь;				
				Пока ВыборкаЗНП.Следующий() Цикл
					Сотрудник=Справочники.ФизическиеЛица.НайтиПоКоду("0000001545");
					докПроизводство=Документы.СборкаЗапасов.СоздатьДокумент();
					докПроизводство.ЗаполнитьПоЗаказуНаПроизводство(ВыборкаЗнп.ЗНп);
					ДокПроизводство.Запасы.Очистить();
					докПроизводство.Продукция.Очистить();
					ДокПроизводство.Автор  =ВыборкаЗНП.сотрудник;
					ДокПроизводство.ВидОперации=Перечисления.ВидыОперацийСборкаЗапасов.Сборка;
				//	докПроизводство.ХозяйственнаяОперация=Перечисления.ВидыОперацийСборкаЗапасов.Сборка; 
					докПроизводство.ЗаказНаПроизводство=ВыборкаЗнп.ЗНп;
					докПроизводство.документОснование= ВыборкаЗнп.ЗНп;
					докПроизводство.Организация=Справочники.Организации.НайтиПоКоду("НФ-000002");
					докПроизводство.Дата=ТекущаяДата();
								//докПроизводство.Организация=ВыборкаЗнп.ЗНп.Организация;
					докПроизводство.СтруктурнаяЕдиница=ВыборкаОПС.Ссылка.Участок.Подразделение;
						докПроизводство.СтруктурнаяЕдиницаЗавершенияПроизводства=ВыборкаОПС.Ссылка.Участок.Подразделение;

					докПроизводство.СтруктурнаяЕдиницаПродукции=докПроизводство.СтруктурнаяЕдиница.ПолучательПеремещения;
					докПроизводство.СтруктурнаяЕдиницаЗапасов=	докПроизводство.СтруктурнаяЕдиница.ИсточникПеремещения;	
					докПроизводство.ПоложениеСклада=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
					ВыборкаТоваров=ВыборкаЗНП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					кл=1;
					Пока ВыборкаТоваров.Следующий() Цикл
						СтрокаДокумента=докПроизводство.Продукция.Добавить();
						ЗаполнитьЗначенияСвойств(строкаДокумента, ВыборкаТоваров);
						строкаДокумента.ПодразделениеЗавершающегоЭтапа=докПроизводство.СтруктурнаяЕдиницаЗавершенияПроизводства;
						строкаДокумента.ЕдиницаИзмерения=строкаДокумента.Номенклатура.ЕдиницаИзмерения;	
						строкаДокумента.ключСвязи=кл;
						кл=кл+1;
					КонецЦикла;
					докПроизводство.ЗаполнитьТабличнуюЧастьПоСпецификации();
					ЗаполнитьПоОстаткам(докПроизводство);					
					Попытка
						ДокПроизводство.Записать(РежимЗаписиДокумента.Проведение);
						СТПриемка=ОПС.ПриемкиТоваров.Добавить();
						СТПриемка.ПриемкаТоваров=ДокПроизводство.Ссылка;
						СТПриемка.НомерПаллеты=Данные.ОПСНомерПаллеты;
						СТПриемка.GUID=Данные.GUID;
					Исключение
						ПроизошлаОшибка=Истина;    
						Прервать;
					КонецПопытки;					
				КонецЦикла;
				Если НЕ ПроизошлаОшибка Тогда					
					ОПС.Записать(РежимЗаписиДокумента.Проведение);
					Запрос=Новый Запрос();
					Запрос.Текст =
					"ВЫБРАТЬ
					|	План.НомерПаллеты
					|ИЗ
					|	(ВЫБРАТЬ
					|		ТСД_ВводДанных.НомерПаллеты КАК НомерПаллеты
					|	ИЗ
					|		Документ.БЗ_ОПС.ТСД_ВводДанных КАК ТСД_ВводДанных
					|	ГДЕ
					|		ТСД_ВводДанных.Ссылка = &Ссылка
					|	
					|	СГРУППИРОВАТЬ ПО
					|		ТСД_ВводДанных.НомерПаллеты) КАК План
					|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
					|			ПриемкиТоваров.НомерПаллеты КАК НомерПаллеты
					|		ИЗ
					|			Документ.БЗ_ОПС.ПриемкиТоваров КАК ПриемкиТоваров
					|		ГДЕ
					|			ПриемкиТоваров.Ссылка = &Ссылка
					|		
					|		СГРУППИРОВАТЬ ПО
					|			ПриемкиТоваров.НомерПаллеты) КАК Факт
					|		ПО План.НомерПаллеты = Факт.НомерПаллеты
					|ГДЕ
					|	Факт.НомерПаллеты ЕСТЬ NULL";
					Запрос.УстановитьПараметр("Ссылка",ВыборкаОПС.Ссылка);
					Если Запрос.Выполнить().Пустой() Тогда
						ОПС.ПринятоНаСкладе=Истина;
						ОПС.Записать(РежимЗаписиДокумента.Проведение);
					КонецЕсли;
					ЗафиксироватьТранзакцию();
					ЗафиксироватьТранзакцию();
					ПринятыеДокументы.Добавить(Данные.GUID);
				Иначе
					ОтменитьТранзакцию();
					ОтменитьТранзакцию();
				КонецЕсли;				
			КонецЕсли;
		КонецЦикла;
		Если ПринятыеДокументы.Количество()>0 Тогда // Нужно отправить в WMS данные о том что документы приняты
			JSONПакет=Новый Структура();
			JSONПакет.Вставить("Тип","ПолученыПриемкиОПС");
			JSONПакет.Вставить("КодБД","УНФ");
			JSONПакет.Вставить("ПолученыДокументы",ПринятыеДокументы);
			Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(ПланыОбмена.БЗ_WMS.Записать_JSON(JSONПакет));
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

Процедура Импорт_ИзлишкиСписания(УзелОбъект)
	JSONПакет=Новый Структура();
	JSONПакет.Вставить("Тип","ПолучитьИзлишкиСписания");
	JSONПакет.Вставить("КодБД","УНФ");
	JSONПакет.Вставить("Склады",УзелОбъект.Склады.ВыгрузитьКолонку("СкладWMS"));
	JSONОтвет="";
	Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(ПланыОбмена.БЗ_WMS.Записать_JSON(JSONПакет),JSONОтвет);
	Если Результат="ok" Тогда
		ПолученыДокументы=Новый Массив();
		Для Каждого Документ Из JSONОтвет.Документы Цикл
			Запрос=Новый Запрос("ВЫБРАТЬ Документы.Ссылка КАК Ссылка ИЗ	Документ."+Документ.Тип+" КАК Документы
			|ГДЕ Документы.БЗ_WMS_GUID = &БЗ_WMS_GUID");
			Запрос.УстановитьПараметр("БЗ_WMS_GUID",Документ.GUID);
			Выборка=Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ДокументОбъект=Выборка.Ссылка.ПолучитьОбъект();
			Иначе
				ДокументОбъект=Документы[Документ.Тип].СоздатьДокумент();				
				ДокументОбъект.Дата=ТекущаяДата();
				ДокументОбъект.БЗ_WMS_GUID=Документ.GUID;
				ДокументОбъект.Организация=Справочники.Организации.НайтиПоКоду("НФ-000002");
				ДокументОбъект.СтруктурнаяЕдиница=УзелОбъект.Склады[0].Склад;				
			КонецЕсли;
			ДокументОбъект.Комментарий=Документ.Комментарий;
			ДокументОбъект.Запасы.Очистить();
			Ключ=0;
			Для Каждого СТТовар Из Документ.Товары Цикл				
				Попытка
					ДокТовар=ДокументОбъект.Запасы.Добавить();
					ДокТовар.Номенклатура=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СТТовар.Номенклатура)).ПолучитьОбъект().Ссылка;
					ДокТовар.Характеристика=?(СТТовар.ХарактеристикаНоменклатуры="",Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка(),Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СТТовар.ХарактеристикаНоменклатуры)).ПолучитьОбъект().Ссылка);
					ДокТовар.ЕдиницаИзмерения=ДокТовар.Номенклатура.ЕдиницаИзмерения;
					ДокТовар.Количество=СТТовар.Количество;
					ДокТовар.КлючСвязи=Ключ;
					Ключ=Ключ+1;
				Исключение
					Продолжить;
				КонецПопытки;
			КонецЦикла;
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;			
			ПолученыДокументы.Добавить(Новый Структура("Тип,GUID",Документ.ТипWMS,Документ.GUID));
		КонецЦикла;
		JSONПакет=Новый Структура();
		JSONПакет.Вставить("Тип","ПолученыИзлишкиСписания");
		JSONПакет.Вставить("КодБД","УНФ");
		JSONПакет.Вставить("ПолученыДокументы",ПолученыДокументы);
		JSONОтвет="";
		Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(ПланыОбмена.БЗ_WMS.Записать_JSON(JSONПакет),JSONОтвет);		
	КонецЕсли;
КонецПроцедуры

Функция Импорт_ВыполнениеПогрузки_ОбновитьДокумент(ЗаданиеНаПогрузку,Данные,Завершен)
	ТБТовары=Новый ТаблицаЗначений();
	ТБТовары.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТБТовары.Колонки.Добавить("ХарактеристикаНоменклатуры",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТБТовары.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число"));
	ТБКладовщики=Новый ТаблицаЗначений();
	ТБКладовщики.Колонки.Добавить("Кладовщик",Новый ОписаниеТипов("СправочникСсылка.БЗ_WMS_Сотрудники"));
	ТБКладовщики.Колонки.Добавить("Используется",Новый ОписаниеТипов("Число"));
	Для Каждого СТИсполнитель Из Данные.Исполнители Цикл
		Запрос=Новый Запрос("ВЫБРАТЬ БЗ_WMS_Сотрудники.Ссылка КАК Сотрудник ИЗ Справочник.БЗ_WMS_Сотрудники КАК БЗ_WMS_Сотрудники ГДЕ БЗ_WMS_Сотрудники.GUID=&GUID");
		Запрос.УстановитьПараметр("GUID",Строка(СТИсполнитель.GUID));
		Выборка=Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			ОБСотрудник=Справочники.БЗ_WMS_Сотрудники.СоздатьЭлемент();
			ОБСотрудник.GUID=СТИсполнитель.GUID;
			ОБСотрудник.Наименование=СТИсполнитель.Наименование;
			ОБСотрудник.Записать();
			Сотрудник=ОБСотрудник.Ссылка;
		Иначе
			Сотрудник=Выборка.Сотрудник;
		КонецЕсли;
		СТКладавщики=ТБКладовщики.Добавить();
		СТКладавщики.Кладовщик=Сотрудник;
		СТКладавщики.Используется=1;
	КонецЦикла;
	Для Каждого СтрокаТовары Из Данные.Данные Цикл
		Попытка
			СТТовар=ТБТовары.Добавить();
			СТТовар.Номенклатура=Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.Номенклатура)).ПолучитьОбъект().Ссылка;
			Если ЗначениеЗаполнено(СтрокаТовары.Характеристика) Тогда
				СТТовар.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТовары.Характеристика)).ПолучитьОбъект().Ссылка;
			Иначе
				СТТовар.ХарактеристикаНоменклатуры=Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			КонецЕсли;
			СТТовар.Количество=СтрокаТовары.Количество;
		Исключение
			Продолжить;
		КонецПопытки;
	КонецЦикла;
	
	НовыйДокумент=Истина;	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	БЗ_ВыполнениеПогрузки.Ссылка
	                    |ИЗ
	                    |	Документ.БЗ_ВыполнениеПогрузки КАК БЗ_ВыполнениеПогрузки
	                    |ГДЕ
	                    |	БЗ_ВыполнениеПогрузки.ДокументОснование = &ЗаданиеНаПогрузку
	                    |	И БЗ_ВыполнениеПогрузки.Проведен");
	Запрос.УстановитьПараметр("ЗаданиеНаПогрузку",ЗаданиеНаПогрузку);
	ВыборкаДокумент=Запрос.Выполнить().Выбрать();
	Если ВыборкаДокумент.Следующий() Тогда
		НовыйДокумент=Ложь;
		ОБВыполнениеПогрузки=ВыборкаДокумент.Ссылка.ПолучитьОбъект();		
	Иначе
		ОБВыполнениеПогрузки=Документы.БЗ_ВыполнениеПогрузки.СоздатьДокумент();
		ОБВыполнениеПогрузки.Дата=ТекущаяДата();
		ОБВыполнениеПогрузки.ДокументОснование=ЗаданиеНаПогрузку;
		ОБВыполнениеПогрузки.Склад=ЗаданиеНаПогрузку.Склад;
		ОБВыполнениеПогрузки.Получатель=ЗаданиеНаПогрузку.Получатель;		
	КонецЕсли;
	КладовщикиСовпадает=Ложь;
	Если НЕ НовыйДокумент И НЕ Завершен Тогда
		ТБТоварыСравнение=ОБВыполнениеПогрузки.Товары.Выгрузить(,"Номенклатура,ХарактеристикаНоменклатуры,Количество");
		Для Каждого Товар Из ТБТовары Цикл
			Строка=ТБТоварыСравнение.Добавить();
			Строка.Номенклатура=Товар.Номенклатура;
			Строка.ХарактеристикаНоменклатуры=Товар.ХарактеристикаНоменклатуры;
			Строка.Количество=-Товар.Количество;
		КонецЦикла;
		ТоварСовпадает=Истина;
		ТБТоварыСравнение.Свернуть("Номенклатура,ХарактеристикаНоменклатуры","Количество");
		Для Каждого Товар Из ТБТоварыСравнение Цикл
			Если Товар.Количество<>0 Тогда
				ТоварСовпадает=Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СТКладовщики Из ОБВыполнениеПогрузки.Кладовщики Цикл
			СТКладавщики=ТБКладовщики.Добавить();
			СТКладавщики.Кладовщик=Сотрудник;
			СТКладавщики.Используется=-1;
		КонецЦикла;
		КладовщикиСовпадает=Истина;
		ТБКладовщики.Свернуть("Кладовщик","Используется");
		Для Каждого СТКладовщики Из ТБКладовщики Цикл
			Если СТКладовщики.Используется<>0 Тогда
				КладовщикиСовпадает=Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ТоварСовпадает И КладовщикиСовпадает Тогда
			//Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Если НЕ КладовщикиСовпадает Тогда
		ОБВыполнениеПогрузки.Кладовщики.Очистить();
		Для Каждого СТКладовщики Из ТБКладовщики Цикл
			Если СТКладовщики.Используется>=0 Тогда
				СтрокаКладовщики=ОБВыполнениеПогрузки.Кладовщики.Добавить();
				СтрокаКладовщики.Кладовщик=СТКладовщики.Кладовщик;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ОБВыполнениеПогрузки.Товары.Очистить();
	Для Каждого Товар Из ТБТовары Цикл
		СтрокаДокумента=ОБВыполнениеПогрузки.Товары.Добавить();
		СтрокаДокумента.Номенклатура=Товар.Номенклатура;
		СтрокаДокумента.ХарактеристикаНоменклатуры=Товар.ХарактеристикаНоменклатуры;
		СтрокаДокумента.Количество=Товар.Количество;
		СтрокаДокумента.ВидДвижения=Перечисления.БЗ_ВидыДвиженияТоваров.Выполнено;
	КонецЦикла;	
	Если Завершен Тогда
		ОБВыполнениеПогрузки.ДатаВремяПогрузки=ТекущаяДата();
		ОБВыполнениеПогрузки.Статус=Перечисления.БЗ_СтатусыЗаданийНаПогрузку.Погружен;
	Иначе
		Если ТБТовары.Количество()=0 Тогда
			ОБВыполнениеПогрузки.Статус=Перечисления.БЗ_СтатусыЗаданийНаПогрузку.Создан;
		Иначе
			ОБВыполнениеПогрузки.Статус=Перечисления.БЗ_СтатусыЗаданийНаПогрузку.ЧастичноПогружен;
		КонецЕсли;
	КонецЕсли;
	НачатьТранзакцию();
	Попытка
		ОБВыполнениеПогрузки.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	Попытка
		Если Завершен Тогда
			ОБЗаданиеНаПогрузку=ЗаданиеНаПогрузку.ПолучитьОбъект();
			ОБЗаданиеНаПогрузку.Статус=Перечисления.БЗ_СтатусыЗаданийНаПогрузку.Погружен;
			ОБЗаданиеНаПогрузку.ОбменДанными.Загрузка=Истина;
			ОБЗаданиеНаПогрузку.Записать();
			БЗ_проводкаРеализации.ПровестиРеализации(ОбВыполнениеПогрузки.Ссылка);
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;			
	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

Процедура ЗАполнитьПоостаткам(ДокПроизводство)
	   

Для каждого стр из докПроизводство.запасы цикл
		если стр.номенклатура.способПополнения=Перечисления.СпособыПополненияЗапасов.Закупка Тогда
				стр.структурнаяЕдиница=справочники.СтруктурныеЕдиницы.НайтиПоКоду("НФ-000004");	
			
		Иначе
			     стр.структурнаяЕдиница=Справочники.СтруктурныеЕдиницы.НайтиПоКоду("00-000001");
		КонецЕсли;
	
КонецЦикла;

КонецПроцедуры

Процедура Импорт_ВыполнениеПогрузки(УзелОбъект)
	JSONПакет=Новый Структура();
	JSONПакет.Вставить("Тип","ПолучитьРезультатыОтгрузок");
	JSONПакет.Вставить("КодБД","УНФ");
	JSONПакет.Вставить("Склады",УзелОбъект.Склады.ВыгрузитьКолонку("СкладWMS"));
	JSONОтвет="";
	Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(ПланыОбмена.БЗ_WMS.Записать_JSON(JSONПакет),JSONОтвет);
	Если Результат="ok" Тогда
		Для Каждого Данные Из JSONОтвет.ОтгрузкиВРаботе Цикл
			Попытка 
				ЗаданиеНаПогрузку=Документы.БЗ_ЗаданиеНаПогрузку.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.Документ)).ПолучитьОбъект().Ссылка;
			Исключение
				 Продолжить;
			КонецПопытки;
			Импорт_ВыполнениеПогрузки_ОбновитьДокумент(ЗаданиеНаПогрузку,Данные,Ложь);
		КонецЦикла;
		Для Каждого Данные Из JSONОтвет.ВыполняетсяОтбор Цикл
			Попытка 
				ЗаданиеНаПогрузку=Документы.БЗ_ЗаданиеНаПогрузку.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные)).ПолучитьОбъект().Ссылка;
				ЗНПОбъект=ЗаданиеНаПогрузку.ПолучитьОбъект();
				ЗНПОбъект.Прочитать();
				Если ЗНПОбъект.Статус<>Перечисления.БЗ_СтатусыЗаданийНаПогрузку.ВыполняетсяОтбор Тогда
					ЗНПОбъект.Статус=Перечисления.БЗ_СтатусыЗаданийНаПогрузку.ВыполняетсяОтбор;
					ЗНПОбъект.ОбменДанными.Загрузка=Истина;
					ЗНПОбъект.Записать();
				КонецЕсли;
			Исключение
				 Продолжить;
			КонецПопытки;			 
		КонецЦикла;		
		ПринятыеДокументы=Новый Массив();		
		Для Каждого Данные Из JSONОтвет.Отгрузки Цикл
			Попытка 
				ЗаданиеНаПогрузку=Документы.БЗ_ЗаданиеНаПогрузку.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.Документ)).ПолучитьОбъект().Ссылка;
			Исключение
				ПринятыеДокументы.Добавить(Строка(Данные.Документ));
				Продолжить;
			КонецПопытки;
			Если Импорт_ВыполнениеПогрузки_ОбновитьДокумент(ЗаданиеНаПогрузку,Данные,Истина) Тогда					
				ПринятыеДокументы.Добавить(Данные.Документ);
			КонецЕсли;
		КонецЦикла;
		Если ПринятыеДокументы.Количество()>0 Тогда // Нужно отправить в WMS данные о том что документы приняты
			JSONПакет=Новый Структура();
			JSONПакет.Вставить("Тип","ПолученыРезультатыОтгрузок");
			JSONПакет.Вставить("КодБД","УНФ");
			JSONПакет.Вставить("ПолученыДокументы",ПринятыеДокументы);
			Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(ПланыОбмена.БЗ_WMS.Записать_JSON(JSONПакет));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ВыполнитьОбменУзла(УзелОбъект)
	КодОбмена = СокрЛП(УзелОбъект.Код)+" | ";
	Экспорт_Номенклатура(УзелОбъект);
	Экспорт_БЗ_ЗаданиеНаПогрузку(УзелОбъект);
	Экспорт_ОПС(УзелОбъект);
	РЗначение=РегистрыСведений.БЗ_WMS_Параметры.Получить(Новый Структура("Параметр",КодОбмена+"ВремяЗапускаПолученияПроизводство"));
	Если РЗначение.Значение=Неопределено Тогда
		РЗначение.Значение=ТекущаяДата()-86400;
	КонецЕсли;
	Если РЗначение.Значение<ТекущаяДата()-300 Тогда
		Экспорт_ТоварыВПроизводстве(УзелОбъект);
		МПараметр=РегистрыСведений.БЗ_WMS_Параметры.СоздатьМенеджерЗаписи();
		МПараметр.Параметр=КодОбмена+"ВремяЗапускаПолученияПроизводство";
		МПараметр.Значение=ТекущаяДата();
		МПараметр.Записать(Истина);
	КонецЕсли;
	Импорт_ПриемкаОПС(УзелОбъект);
	РЗначение=РегистрыСведений.БЗ_WMS_Параметры.Получить(Новый Структура("Параметр",КодОбмена+"ВремяЗапускаПолученияОтгрузки"));
	Если РЗначение.Значение=Неопределено Тогда
		РЗначение.Значение=ТекущаяДата()-86400;
	КонецЕсли;
	Если РЗначение.Значение<ТекущаяДата()-УзелОбъект.ТаймерОтгрузки Тогда		
		Импорт_ВыполнениеПогрузки(УзелОбъект);
		МПараметр=РегистрыСведений.БЗ_WMS_Параметры.СоздатьМенеджерЗаписи();
		МПараметр.Параметр=КодОбмена+"ВремяЗапускаПолученияОтгрузки";
		МПараметр.Значение=ТекущаяДата();
		МПараметр.Записать(Истина);
	КонецЕсли;
	Если НЕ Экспорт_Справочник(УзелОбъект,"БЗ_Участки") Тогда Возврат Ложь; КонецЕсли;
	Если НЕ Экспорт_Справочник(УзелОбъект,"БЗ_Сотрудники_ТСД") Тогда Возврат Ложь; КонецЕсли;
	Если НЕ Экспорт_Справочник(УзелОбъект,"БЗ_Принтеры") Тогда Возврат Ложь; КонецЕсли;
	МПараметр=РегистрыСведений.БЗ_WMS_Параметры.СоздатьМенеджерЗаписи();
	МПараметр.Параметр=КодОбмена+"ВремяЗапускаОкончанияОбмена";
	МПараметр.Значение=ТекущаяДата();
	МПараметр.Записать(Истина);
	ПараметрыОбмена=Новый Массив();
	ПараметрыОбмена.Добавить(Новый Структура("КодБД,Параметр,Значение","УНФ","99. ВремяЗапускаОкончанияОбмена",ТекущаяДата()));	
	JSONПакет=Новый Структура();
	JSONПакет.Вставить("Тип","ОбработатьПараметрыОбмена");
	JSONПакет.Вставить("КодБД","УНФ");
	JSONПакет.Вставить("ПараметрыОбмена",ПараметрыОбмена);
	JSONОтвет="";
	JSONЗапрос=ПланыОбмена.БЗ_MES.Записать_JSON(JSONПакет);
	Ответ="";
	СтатусОтвета=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
	Если СтатусОтвета="need_objects" и Ответ.Свойство("НенайденыОбъекты") Тогда
		Если НЕ ОтправитьНенайденыеОбъекты(УзелОбъект, Ответ.НенайденыОбъекты) Тогда
			Возврат Ложь;
		Иначе
			СтатусОтвета=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
		КонецЕсли;		
	КонецЕсли;
	Если СтатусОтвета="ok" Тогда
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция Экспорт_Справочник(УзелОбъект,Справочник,ТолькоВыгруженные=Ложь)
	Запрос=Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник."+Справочник+".Изменения ГДЕ Узел=&Узел");	
	Запрос.Параметры.Вставить("Узел",УзелОбъект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.ПолучитьОбъект()=Неопределено Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
			Продолжить;
		КонецЕсли;
		Если ТолькоВыгруженные Тогда
			Если НЕ УзелОбъект.ОбъектОтправлен(Выборка.Ссылка) Тогда
				 ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
				 Продолжить;
			КонецЕсли;
		КонецЕсли;
		Ответ="";
		JSONПакет=Новый Структура();
		Если Выборка.Ссылка.ЭтоГруппа Тогда
			JSONПакет.Вставить("Тип",Справочник+"_Группа");			
		Иначе
			JSONПакет.Вставить("Тип",Справочник);
		КонецЕсли;
		Выполнить("JSONПакет.Вставить(""Объект"",УзелОбъект.Получить_"+Справочник+"(Выборка.Ссылка))");
		JSONЗапрос=ПланыОбмена.БЗ_WMS.Записать_JSON(JSONПакет);
		JSONПакет=Неопределено;
		СтатусОтвета=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
		JSONЗапрос=Неопределено;
		Если СтатусОтвета="ok" Тогда
			 ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
		ИначеЕсли СтатусОтвета="need_objects" Тогда
			 Если НЕ ОтправитьНенайденыеОбъекты(УзелОбъект, Ответ.НенайденыОбъекты) Тогда
				 Возврат Ложь;
			 КонецЕсли;			 
			 СтатусОтвета=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
			 Если СтатусОтвета="ok" Тогда
				 ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбъект.Ссылка,Выборка.Ссылка);
			 ИначеЕсли СтатусОтвета="limit_out" Тогда
				 Возврат Ложь;				 
			 КонецЕсли;
		ИначеЕсли СтатусОтвета="limit_out" Тогда
			 Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ОтправитьНенайденыеОбъекты(УзелОбъект, СписокОбъектов, Знач Уровень=1)
	Для Каждого Объект Из СписокОбъектов Цикл		
		Тип=Объект.Тип;
		Если Тип="Подразделения" Тогда
			Ссылка=Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.GUID)).ПолучитьОбъект().Ссылка;
			Если Ссылка.ЭтоГруппа Тогда	Тип=Объект.Тип+"_Группа"; КонецЕсли;
		ИначеЕсли Тип="Склады" Тогда
			Ссылка=Справочники.СтруктурныеЕдиницы.ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.GUID)).ПолучитьОбъект().Ссылка;
			Если Ссылка.ЭтоГруппа Тогда	Тип=Объект.Тип+"_Группа"; КонецЕсли;
		Иначе			
			Попытка
				Ссылка=Справочники[Объект.Тип].ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.GUID)).ПолучитьОбъект().Ссылка;
				Если Ссылка.ЭтоГруппа Тогда
					Тип=Объект.Тип+"_Группа";
				КонецЕсли;			
			Исключение
				Попытка
					Ссылка=Документы[Объект.Тип].ПолучитьСсылку(Новый УникальныйИдентификатор(Объект.GUID)).ПолучитьОбъект().Ссылка;
				Исключение
					Продолжить;
				КонецПопытки;
			КонецПопытки;
		КонецЕсли;
		Если ТипЗнч(Ссылка)=Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
			Ссылка=Ссылка.Владелец;
			Объект.Тип="Номенклатура";
			Тип="Номенклатура";
		ИначеЕсли ТипЗнч(Ссылка)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			Ссылка=Ссылка.Владелец;
			Объект.Тип="Номенклатура";
			Тип="Номенклатура";
		КонецЕсли;		
		Ответ="";
		JSONПакет=Новый Структура();
		JSONПакет.Вставить("Тип",Тип);
		Выполнить("JSONПакет.Вставить(""Объект"",УзелОбъект.Получить_"+Объект.Тип+"(Ссылка))");
		JSONЗапрос=ПланыОбмена.БЗ_WMS.Записать_JSON(JSONПакет);
		СтатусОтвета=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
		Если СтатусОтвета="need_objects" Тогда
			 Если Уровень=5 Тогда Возврат Истина; КонецЕсли; // На случай рекурсионной зацикленности
			 Если НЕ ОтправитьНенайденыеОбъекты(УзелОбъект, Ответ.НенайденыОбъекты, Уровень+1) Тогда
				 Возврат Ложь;
			 КонецЕсли;
			 СтатусОтвета=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,Ответ);
		ИначеЕсли СтатусОтвета="limit_out" Тогда
			 Возврат Ложь;			 
		КонецЕсли;			
	КонецЦикла;
	Возврат Истина;
КонецФункции

// --- Точка входа обмена ---
Процедура ВыполнитьОбмен(Дебаг=Ложь) Экспорт
	ПараметрыСеанса.БЗ_WMS_Обмен_Счетчик=0;
	ПараметрыСеанса.БЗ_ПроводитьБезКонтроляОстатков=истина;
	Выборка=ПланыОбмена.БЗ_WMS.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Активирован ИЛИ Дебаг Тогда
			ПараметрыСеанса.БЗ_WMS_Обмен_Сессия="";			
			УзелОбъект=Выборка.Ссылка.ПолучитьОбъект();
			Если НЕ ВыполнитьОбменУзла(УзелОбъект) Тогда
				УзелОбъект.ЗавершитьСессию();
				Прервать;
			КонецЕсли;
			УзелОбъект.ЗавершитьСессию();
		КонецЕсли;
	КонецЦикла;
	//Выборка=ПланыОбмена.БЗ_WMS.Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	Если Выборка.Активирован ИЛИ Дебаг Тогда
	//		Если Выборка.Ссылка.АдресСервера="" Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		УзелОбъект=Выборка.Ссылка.ПолучитьОбъект();
	//		ВыполнитьОбменУзла(УзелОбъект);			
	//	КонецЕсли;
	//КонецЦикла;
КонецПроцедуры

// --- Подписки на события ---
Процедура БЗ_WMS_СозданиеЗНП(Источник,ДатаОтправки=Неопределено) Экспорт	
	//--- Дата начала работы через WMS
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МИНИМУМ(WMSСклады.ДатаНачалаРаботы) КАК ДатаНачалаРаботы
	|ИЗ
	|	ПланОбмена.БЗ_WMS.Склады КАК WMSСклады");
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаНачалаРаботы = Выборка.ДатаНачалаРаботы;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаРаботы) Тогда
		Возврат;
	КонецЕсли;
		
	ДатаНоменклатуры=Источник.Дата;
	//Если НЕ ЗначениеЗаполнено(ДатаОтправки) Тогда		
	//	Если Источник.Дата<ДатаНачалаРаботы Тогда
	//		Возврат;
	//	КонецЕсли;
	//Иначе
	//	ДатаНоменклатуры=ДатаОтправки;
	//КонецЕсли;
	
	// ----	
	ЗНП = Неопределено;
	Запрос=Новый Запрос(
	"ВЫБРАТЬ
	|	БЗ_ЗаданиеНаПогрузку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БЗ_ЗаданиеНаПогрузку КАК БЗ_ЗаданиеНаПогрузку
	|ГДЕ
	|	БЗ_ЗаданиеНаПогрузку.ДокументОснование = &ДокументОснование");
	
	// МИФ +
	БЗ_ГлавныйЗаказ=Источник.БЗ_ГлавныйЗаказ;
	Если ЗначениеЗАполнено(БЗ_ГлавныйЗаказ) Тогда 
		
		Запрос.УстановитьПараметр("ДокументОснование",БЗ_ГлавныйЗаказ);
	Иначе
		БЗ_ГлавныйЗаказ  =Источник;
	Запрос.УстановитьПараметр("ДокументОснование",Источник);
КонецЕсли;
	// МИФ -

	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗНП = Выборка.Ссылка;
	КонецЕсли;
	
	
	//  МИФ +   удаляем подчиненный знп если он есть
		Если ЗначениеЗаполнено(БЗ_ГлавныйЗаказ) и значениеЗаполнено(ЗНП)  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БЗ_ЗаданиеНаПогрузку.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.БЗ_ЗаданиеНаПогрузку КАК БЗ_ЗаданиеНаПогрузку
		|ГДЕ
		|	БЗ_ЗаданиеНаПогрузку.ДокументОснование = &ДокументОснование";
		
		Запрос.УстановитьПараметр("ДокументОснование", Источник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗНППодчиненный= ВыборкаДетальныеЗаписи.ссылка;
		Иначе
			ЗНППодчиненный= Неопределено;			
		КонецЕсли;
		
				
		
		Если ЗначениеЗаполнено(ЗНППодчиненный) и знпПодчиненный<>ЗНП  Тогда // Нужно пометить на удаление документы
			Если НЕ ЗНППодчиненный.ПометкаУдаления Тогда
				ОбъектЗНП=ЗНППодчиненный.ПолучитьОбъект();
				ОбъектЗНП.Статус=Перечисления.БЗ_СтатусыЗаданийНаПогрузку.Отменен;
				ОбъектЗНП.Записать(РежимЗаписиДокумента.Запись);
				ОбъектЗНП.УстановитьПометкуУдаления(Истина);
				// И все корректировки по ЗНП
				Запрос=Новый Запрос(
				"ВЫБРАТЬ
				|	БЗ_КорректировкаПогрузки.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.БЗ_КорректировкаПогрузки КАК БЗ_КорректировкаПогрузки
				|ГДЕ
				|	БЗ_КорректировкаПогрузки.ДокументОснование = &ДокументОснование");
				Запрос.УстановитьПараметр("ДокументОснование",ЗНППодчиненный);
				Выборка=Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл			
					КЗНПОбъект=Выборка.Ссылка.ПолучитьОбъект();
					КЗНПОбъект.УстановитьПометкуУдаления(Истина);
				КонецЦикла;		
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	// МИФ - 

	
	
	// Проверка наличия номенклатуры WMS в документе // проверка не используется работаем со всей номенклатурой
    ЕстьНоменклатураWMS=Истина;
	
	Если ЗначениеЗаполнено(ЗНП) И (НЕ БЗ_ГлавныйЗаказ.Проведен ИЛИ НЕ ЕстьНоменклатураWMS) Тогда // Нужно пометить на удаление документы
		Если НЕ ЗНП.ПометкаУдаления Тогда
			ОбъектЗНП=ЗНП.ПолучитьОбъект();
			ОбъектЗНП.Статус=Перечисления.БЗ_СтатусыЗаданийНаПогрузку.Отменен;
			ОбъектЗНП.Записать(РежимЗаписиДокумента.Запись);
			ОбъектЗНП.УстановитьПометкуУдаления(Истина);
			// И все корректировки по ЗНП
			Запрос=Новый Запрос(
			"ВЫБРАТЬ
			|	БЗ_КорректировкаПогрузки.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.БЗ_КорректировкаПогрузки КАК БЗ_КорректировкаПогрузки
			|ГДЕ
			|	БЗ_КорректировкаПогрузки.ДокументОснование = &ДокументОснование");
			Запрос.УстановитьПараметр("ДокументОснование",ЗНП);
			Выборка=Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл			
				КЗНПОбъект=Выборка.Ссылка.ПолучитьОбъект();
				КЗНПОбъект.УстановитьПометкуУдаления(Истина);
			КонецЦикла;
			Возврат;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ЗНП) И БЗ_ГлавныйЗАказ.Проведен И ЕстьНоменклатураWMS Тогда
		Если ЗНП.ПометкаУдаления Тогда
			ОбъектЗНП=ЗНП.ПолучитьОбъект();
			ОбъектЗНП.УстановитьПометкуУдаления(Ложь);
			ОбъектЗНП.Статус=Перечисления.БЗ_СтатусыЗаданийНаПогрузку.Создан;
			ОбъектЗНП.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			// И все корректировки по ЗНП
			Запрос=Новый Запрос(
			"ВЫБРАТЬ
			|	БЗ_КорректировкаПогрузки.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.БЗ_КорректировкаПогрузки КАК БЗ_КорректировкаПогрузки
			|ГДЕ
			|	БЗ_КорректировкаПогрузки.ДокументОснование = &ДокументОснование");
			Запрос.УстановитьПараметр("ДокументОснование",ЗНП);
			Выборка=Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл			
				ОбъектКЗНП=Выборка.Ссылка.ПолучитьОбъект();
				ОбъектКЗНП.УстановитьПометкуУдаления(Ложь);
				ОбъектКЗНП.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			КонецЦикла;			
		КонецЕсли;		
	КонецЕсли;
	
	
	
	Если НЕ ЕстьНоменклатураWMS Тогда // В документе нет номенклатуры WMS
		Возврат;
	КонецЕсли;
	
	// --- Таблицы товаров и пакетов к отгрузке ---
	
	//   МИФ +
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Номенклатура КАК Номенклатура,
		|	ЗаказПокупателя.Характеристика КАК ХарактеристикаНоменклатуры,
		|	СУММА(ЗаказПокупателя.Количество) КАК Количество
		|ИЗ
		|	Документ.ЗаказПокупателя.Запасы КАК ЗаказПокупателя
		|ГДЕ
		|	(ЗаказПокупателя.Ссылка = &Документ
		|			ИЛИ ЗаказПокупателя.Ссылка.БЗ_ГлавныйЗаказ = &Документ)
		|	И ЗаказПокупателя.Ссылка.СостояниеЗаказа = &СостояниеЗаказа
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказПокупателя.Номенклатура,
		|	ЗаказПокупателя.Характеристика");
	//МИФ -
	Запрос.УстановитьПараметр("Документ",БЗ_ГлавныйЗаказ);		
		Запрос.УстановитьПараметр("СостояниеЗаказа",Справочники.СостоянияЗаказовПокупателей.НайтиПоНаименованию("В наборке"));	
	ТБТовары=Запрос.Выполнить().Выгрузить();
	
	ТБТоварыСВ=ТБТовары.Скопировать();
	ТБТоварыСВ.Свернуть("Номенклатура,ХарактеристикаНоменклатуры","Количество");
	ТБТоварыСВ.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число"));
	НомерСтроки=0;
	Для Каждого Строка Из ТБТоварыСВ Цикл 
		НомерСтроки=НомерСтроки+1;
		Строка.НомерСтроки=НомерСтроки;		
	КонецЦикла;
	
	ТБПакеты=БЗ_Пакетирование.ПолучитьУпаковкиПродукции(Источник.Ссылка);
	
	Если ЗНП=Неопределено Тогда // Документ не создан
		ОбъектЗНП=Документы.БЗ_ЗаданиеНаПогрузку.СоздатьДокумент();
		ОбъектЗНП.Дата=ТекущаяДата();
		//++ Миф Добавил ответственного в комментарий 
		ОбъектЗНП.Комментарий=Строка(Источник.Контрагент.Ответственный);
		//--
		ОбъектЗНП.Склад=Источник.СтруктурнаяЕдиницаРезерв;
		//++ МИФ
		Если ЗначениеЗаполнено(БЗ_ГлавныйЗаказ) Тогда
			ОбъектЗНП.ДокументОснование=БЗ_ГлавныйЗаказ;
		Иначе
			ОбъектЗНП.ДокументОснование=Источник.Ссылка;
		КонецЕсли;
		//--МИФ
		//ОбъектЗНП.Водитель=Источник.Маршрут.Водитель;
		//ОбъектЗНП.ТранспортноеСредство=Источник.Маршрут.Машина;
		ОбъектЗНП.Получатель=Источник.Контрагент;
		ОбъектЗНП.Автор=ПараметрыСеанса.ТекущийПользователь;		
		ОбъектЗНП.Статус=Перечисления.БЗ_СтатусыЗаданийНаПогрузку.Создан;
		Для Каждого Строка Из ТБТоварыСВ Цикл
			ДСтрока=ОбъектЗНП.Товары.Добавить();
			ДСтрока.Номенклатура=Строка.Номенклатура;
			ДСтрока.ХарактеристикаНоменклатуры=Строка.ХарактеристикаНоменклатуры;
			ДСтрока.Количество=Строка.Количество;
		КонецЦикла;
		Для Каждого Строка Из ТБПакеты Цикл
			ДСтрока=ОбъектЗНП.Пакеты.Добавить();
			ДСтрока.Номенклатура=Строка.Номенклатура;
			ДСтрока.ХарактеристикаНоменклатуры=Строка.ХарактеристикаНоменклатуры;
			ДСтрока.Количество=Строка.Количество;
			ДСтрока.КоличествоИзделий=Строка.КоличествоИзделий;
			ДСтрока.Пакет=Строка.Пакет;
			ДСтрока.ХарактеристикаПакета=Строка.ХарактеристикаПакета;
		КонецЦикла;
		ОбъектЗНП.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		Возврат;
	Иначе
		СТТБТовары=БЗ_WMS_Обмен.ТБТовары_ЗаданияНаПогрузку(ЗНП);
		СТТБПакеты=БЗ_WMS_Обмен.ТБПакеты_ЗаданияНаПогрузку(ЗНП);
		Для Каждого Строка Из ТБТовары Цикл
			ДСтрока=СТТБТовары.Добавить();
			ДСтрока.Номенклатура=Строка.Номенклатура;
			ДСтрока.ХарактеристикаНоменклатуры=Строка.ХарактеристикаНоменклатуры;
			ДСтрока.Количество=-Строка.Количество;
		КонецЦикла;
		Для Каждого Строка Из ТБПакеты Цикл
			ДСтрока=СТТБПакеты.Добавить();
			ДСтрока.Номенклатура=Строка.Номенклатура;
			ДСтрока.ХарактеристикаНоменклатуры=Строка.ХарактеристикаНоменклатуры;
			ДСтрока.Пакет=Строка.Пакет;
			ДСтрока.ХарактеристикаПакета=Строка.ХарактеристикаПакета;						
			ДСтрока.КоличествоИзделий=-Строка.КоличествоИзделий;
			ДСтрока.Количество=-Строка.Количество;
		КонецЦикла;
		СТТБТовары.Свернуть("Номенклатура,ХарактеристикаНоменклатуры","Количество");
		СТТБПакеты.Свернуть("Номенклатура,ХарактеристикаНоменклатуры,Пакет,ХарактеристикаПакета","КоличествоИзделий,Количество");
		Изменения=Ложь;
		Для Каждого Пакет Из СТТБПакеты Цикл
			Если Пакет.Количество<>0 Тогда
				Изменения=Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Изменения Тогда
			ОбъектКЗНП=Документы.БЗ_КорректировкаПогрузки.СоздатьДокумент();
			ОбъектКЗНП.Дата=ТекущаяДата();
			ОбъектКЗНП.Склад=ЗНП.Склад;
			ОбъектКЗНП.ДокументОснование=ЗНП;
			ОбъектКЗНП.Получатель=ЗНП.Получатель;			
			ОбъектКЗНП.Автор=ПараметрыСеанса.ТекущийПользователь;
			Для Каждого Строка Из СТТБТовары Цикл
				Если Строка.Количество=0 Тогда Продолжить; КонецЕсли;
				ДСтрока=ОбъектКЗНП.Товары.Добавить();
				ДСтрока.Номенклатура=Строка.Номенклатура;
				ДСтрока.ХарактеристикаНоменклатуры=Строка.ХарактеристикаНоменклатуры;
				ДСтрока.Количество=Строка.Количество*(-1);
			КонецЦикла;
			Для Каждого Строка Из СТТБПакеты Цикл
				Если Строка.Количество=0 Тогда Продолжить; КонецЕсли;
				ДСтрока=ОбъектКЗНП.Пакеты.Добавить();
				ДСтрока.Номенклатура=Строка.Номенклатура;
				ДСтрока.ХарактеристикаНоменклатуры=Строка.ХарактеристикаНоменклатуры;
				ДСтрока.Пакет=Строка.Пакет;
				ДСтрока.ХарактеристикаПакета=Строка.ХарактеристикаПакета;
				ДСтрока.КоличествоИзделий=Строка.КоличествоИзделий*(-1);
				ДСтрока.Количество=Строка.Количество*(-1);
			КонецЦикла;			
			ОбъектКЗНП.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
		Иначе
		
			ОбъектЗНП=ЗНП.ПолучитьОбъект(); 
			Если ОбъектЗНП.ПометкаУдаления Тогда
			    ОбъектЗНП.Записать(РежимЗаписиДокумента.Запись);
			Иначе	
				ОбъектЗНП.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

// --- Проверка блокировки документа на складе ---
Функция ПроверитьБлокировкуНакладной(Ссылка) Экспорт
	ЗНП = Неопределено;
	Узел = Неопределено;
	JSONОтвет = "";
	Запрос=Новый Запрос(
	"ВЫБРАТЬ
	|	БЗ_ЗаданиеНаПогрузку.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.БЗ_ЗаданиеНаПогрузку КАК БЗ_ЗаданиеНаПогрузку
	|ГДЕ
	|	БЗ_ЗаданиеНаПогрузку.ДокументОснование = &ДокументОснование");
	Запрос.УстановитьПараметр("ДокументОснование",Ссылка);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗНП = Выборка.Ссылка;
	КонецЕсли;
	Если ЗНП = Неопределено Тогда
		Возврат "";
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	WMSСклады.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.БЗ_WMS.Склады КАК WMSСклады
	|ГДЕ
	|	WMSСклады.Склад = &Склад";
	Запрос.УстановитьПараметр("Склад", ЗНП.Склад);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Узел = Выборка.Ссылка;
	КонецЕсли;
	Если Узел = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	JSONПакет=Новый Структура();
	JSONПакет.Вставить("Тип","ПолучитьСтатусОтгрузки");
	JSONПакет.Вставить("КодБД",Узел.КодБД);
	JSONПакет.Вставить("Объект",Новый Структура("GUID",ЗНП.УникальныйИдентификатор()));
	JSONЗапрос=ПланыОбмена.БЗ_WMS.Записать_JSON(JSONПакет);
	УзелОбъект=Узел.ПолучитьОбъект();
	Результат=УзелОбъект.ВыполнитьОтправкуJSONПакета(JSONЗапрос,JSONОтвет);
	Если Результат="ok" Тогда
		Если JSONОтвет.СтатусОтгрузки="Выполнен" Тогда
			Возврат "Товары уже отгружены со склада !"+Символы.ПС+"Редактирование состава и количества товаров не рекомендуется";
		КонецЕсли;
		Возврат "";
	Иначе
		Возврат "Ошибка соединения со Складской БД";
	КонецЕсли;		
КонецФункции
