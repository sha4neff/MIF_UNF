Процедура СтартТранзакции() Экспорт
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
КонецПроцедуры

Процедура ФинишТранзакции(Фиксировать) Экспорт
	Если Фиксировать Тогда ЗафиксироватьТранзакцию() Иначе ОтменитьТранзакцию(); КонецЕсли;
КонецПроцедуры

// ---- Кратковременные блокировки при инициализированой транзакции

//Функция ВыдачаЗаданий() Экспорт		
//	Блокировка = Новый БлокировкаДанных;
//	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Блокировки");
//	ЭлементБлокировки.УстановитьЗначение("Тип",Перечисления.ТипБлокировки.ВыдачаЗаданий);
//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//	Блокировка.Заблокировать();
//КонецФункции

//Функция Отбор() Экспорт
//	Блокировка = Новый БлокировкаДанных;
//	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Блокировки");
//	ЭлементБлокировки.УстановитьЗначение("Тип",Перечисления.ТипБлокировки.Отбор);
//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//	Блокировка.Заблокировать();
//КонецФункции

//Функция Перемещение() Экспорт
//	Блокировка = Новый БлокировкаДанных;
//	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Блокировки");
//	ЭлементБлокировки.УстановитьЗначение("Тип",Перечисления.ТипБлокировки.Перемещение);
//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//	Блокировка.Заблокировать();
//КонецФункции

//Функция Подпитка() Экспорт
//	Блокировка = Новый БлокировкаДанных;
//	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Блокировки");
//	ЭлементБлокировки.УстановитьЗначение("Тип",Перечисления.ТипБлокировки.Подпитка);
//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//	Блокировка.Заблокировать();
//КонецФункции

//Функция Размещение() Экспорт
//	Блокировка = Новый БлокировкаДанных;
//	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Блокировки");
//	ЭлементБлокировки.УстановитьЗначение("Тип",Перечисления.ТипБлокировки.Подпитка);
//	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//	Блокировка.Заблокировать();
//КонецФункции

// ---- Длительные блокировки процессов

Функция ПолучитьТекущиеПроцессы() Экспорт 
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БЗ_Блокировки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();	
	ЗапросБлокировки = Новый Запрос("ВЫБРАТЬ
	                                |	Блокировки.Тип КАК Тип
	                                |ИЗ
	                                |	РегистрСведений.БЗ_Блокировки КАК Блокировки
	                                |ГДЕ
	                                |	Блокировки.Установлен > &Установлен");
	ЗапросБлокировки.УстановитьПараметр("Установлен",ТекущаяДата()-300);
	Возврат ЗапросБлокировки.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

Функция УстановитьБлокировкуПроцесса(Тип) Экспорт
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БЗ_Блокировки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	НаборЗаписей = РегистрыСведений.БЗ_Блокировки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Тип.Установить(Тип);
	СтрокаНабора = НаборЗаписей.Добавить();
	СтрокаНабора.Тип = Тип;
	СтрокаНабора.Установлен = ТекущаяДата();
	НаборЗаписей.Записать(Истина);
КонецФункции

Функция СнятьБлокировкуПроцесса(Тип) Экспорт
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.БЗ_Блокировки");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	НаборЗаписей = РегистрыСведений.БЗ_Блокировки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Тип.Установить(Тип);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать(Истина);
КонецФункции