&НаКлиенте
Перем мИмяФайла, СисИнфо, Версия, ПутьКЛогам, СтруктураУИД,КоличествоПопытокПрочитатьПлан,ИмяВременногоФайлаЗапросов;                        // имя файла запросов
&НаКлиенте
Перем мИмяПути;                         // путь к файлу запорсов
&НаКлиенте
Перем мЗаголовокФормы;                  // заголовок формы
&НаКлиенте
Перем мРезЗапроса;                      // результат 
&НаСервере
Перем мТаблицаВыборок;                  // таблица настроек выборок из результата
&НаКлиенте
Перем МИдентификаторТекСтроки;  
&НаКлиенте
Перем мСписокПоследнихОткрытыхФайлов;	// список последних открытых файлов
&НаКлиенте
Перем мТаблицаЗагружена;                // признак того, что рез-т запроса загружен в табличное поле
&НаКлиенте
Перем мСводнаяТаблицаЗагружена;         // признак того, что рез-т запроса загружен в сводную таблицу
&НаКлиенте
Перем обMSScriptControl;
&НаКлиенте
Перем мПанельЦентральноеОкноВидимость; //видимость панели параметров
&НаКлиенте
Перем мПанельСписокЗапросовСвернутаВлево;
&НаКлиенте
Перем мФормаОбновленаПриОткрытии;
&НаКлиенте
Перем мДатаТекущейВерсииЗапроса;
&НаКлиенте
Перем мФайлЗапросовСохранитьБы;
&НаКлиенте
Перем мПутьКОбработке Экспорт;
&НаКлиенте
Процедура ОткрытьКонструкторЗапроса(Команда)
	Перем ОписаниеОповещения;
	Попытка
		
		Выполнить("ОписаниеОповещения = Новый ОписаниеОповещения(""СконструированЗапрос"",ЭтаФорма)");
		//попытаемся создать конструктор для 8.3.5
		Конструктор = Неопределено;
		Если ЗначениеЗаполнено(ТекстЗапроса.ПолучитьТекст()) Тогда
			Выполнить("Конструктор = Новый КонструкторЗапроса(ТекстЗапроса.ПолучитьТекст());");
		Иначе
			Выполнить("Конструктор = Новый КонструкторЗапроса();");
		КонецЕсли;
			Выполнить("Конструктор.Показать(ОписаниеОповещения)");
		Возврат;
	Исключение
		Ошибка = ОписаниеОшибки();
		Если Найти(Ошибка,"Тип не определен")>0 Тогда
			ПоказатьОповещениеПользователя("Конструктор",,"Конструктор запроса для тонкого клиента доступен с версии 8.3.5!");
		Иначе
			//Сообщить(Ошибка);
		КонецЕсли;
	КонецПопытки;

	#Если ТолстыйКлиентУправляемоеПриложение Тогда
		Если ЗначениеЗаполнено(ТекстЗапроса.ПолучитьТекст()) Тогда
			Конструктор = Новый КонструкторЗапроса(ТекстЗапроса.ПолучитьТекст());
		Иначе
			Конструктор = Новый КонструкторЗапроса();
		КонецЕсли;
		Если Конструктор.ОткрытьМодально() Тогда
			ТекстЗапроса.УстановитьТекст(Конструктор.Текст);
		Иначе
			Модифицированность = Ложь;
		КонецЕсли;
   #КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СконструированЗапрос(Результат,Дополнительно) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапроса.УстановитьТекст(Результат);
	Модифицированность = Истина;

КонецПроцедуры // СконструированЗапрос()

&НаКлиенте
// Устанавливает текст запроса в текстовом поле
//
// Параметры:
//  Текст - устанавливаемый текст запроса.
//
Процедура вЗадатьТекстЗапроса(Текст)

	ТекстЗапроса.УстановитьТекст(Текст);

КонецПроцедуры // ЗадатьТекстЗапроса()
&НаКлиенте
// Сохраняет дерево запросов в файл
//
// Параметры:
//  ЗапрашиватьСохранение - признак необходимости предупрежедния перед сохранением
//	ЗапрашиватьИмяФайла - признак необходимости запроса имени файла.
//
Функция вСохранитьЗапросыВФайл(ЗапрашиватьСохранение = Ложь, ЗапрашиватьИмяФайла = Ложь,ФайлСохранения = Неопределено)

	вСохранитьЗапросТекущейСтроки();
	Если ЗапрашиватьИмяФайла Тогда
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		Длг.ПолноеИмяФайла = ИмяФайлаЗапроса;
		Длг.Каталог = ПутьФайлаЗапроса;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			ИмяФайлаЗапроса = Длг.ПолноеИмяФайла;
			ПутьФайлаЗапроса = Длг.Каталог;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ФайлСохранения<>Неопределено Тогда
		СтарыйФайл = ИмяФайлаЗапроса;
		СтарыйПуть = ПутьФайлаЗапроса;
		ИмяФайлаЗапроса = ФайлСохранения.ПолноеИмя;
		ПутьФайлаЗапроса = ФайлСохранения.Путь;
	ИначеЕсли НЕ ЗначениеЗаполнено(ИмяФайлаЗапроса) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	АдресВХранилище = СохранитьДеревоЗапросовВФайлНаСервере();
	Если ПолучитьФайл(АдресВХранилище,ИмяФайлаЗапроса,Ложь) Тогда
		Модифицированность = Ложь;
		
		Если СписокПоследныхОткрытыхФайлов.НайтиПоЗначению(ИмяФайлаЗапроса) = Неопределено Тогда
			СписокПоследныхОткрытыхФайлов.Вставить(0,ИмяФайлаЗапроса);
			Если СписокПоследныхОткрытыхФайлов.Количество() = 16 Тогда
				СписокПоследныхОткрытыхФайлов.Удалить(15);
			КонецЕсли; 
			
			СформироватьПодменюПоследнихФайлов();
		КонецЕсли; 
		Если ФайлСохранения<>Неопределено Тогда
			ИмяФайлаЗапроса = СтарыйФайл;
			ПутьФайлаЗапроса = СтарыйПуть;
		КонецЕсли;
		УправлениеДиалогом();

		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
	
	
КонецФункции // СохранитьЗапросыВФайл()
&НаКлиенте
//переносит список последних файлов в спец. подменю
//
Процедура СформироватьПодменюПоследнихФайлов()

	ПоследниеФайлыЗапросов.Очистить();
	
	//добавляем последний выполненный
	
	Для каждого ЭлементСписка Из СписокПоследныхОткрытыхФайлов Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда Продолжить КонецЕсли; 
		
		Файл = Новый Файл(ЭлементСписка.Значение);
		
		Если Не Файл.Существует() Тогда Продолжить	КонецЕсли;  
		
		НовСтрока = ПоследниеФайлыЗапросов.Добавить();
		НовСтрока.Файл = Файл.Имя;
		НовСтрока.Каталог = Файл.Путь;
		
	КонецЦикла; 

КонецПроцедуры //СформироватьПодменюПоследнихФайлов


&НаСервере
Функция СохранитьДеревоЗапросовВФайлНаСервере()
	ИмяВременногоФайла =ПолучитьИмяВременногоФайла("sel"); 
	ЗначениеВФайл(ИмяВременногоФайла,РеквизитФормыВЗначение("ДеревоЗапросов"));
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные,УникальныйИдентификатор);
	УдалитьФайлы(ИмяВременногоФайла);
	Возврат АдресВХранилище;
КонецФункции // СохранитьДеревоЗапросоввФайлНаСервере()

&НаКлиенте
// Очищает дерево запросов, текстовое поле, список параметров
//
// Параметры:
//  Нет.
//
Процедура вОчиститьЗначения()

	ДеревоЗапросов.ПолучитьЭлементы().Очистить();
	вЗадатьТекстЗапроса("");
	ПараметрыЗапроса.Очистить();
	ТаблицаВыборок.Очистить();
	ПоказыватьСлужебныеКолонкиРезультата = Ложь;
	
КонецПроцедуры // ОчиститьЗначения()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбработкаОбъект = реквизитформывзначение("объект");
	Если НЕ Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные()) Тогда
		СтрокаОтладки = "ВнешниеОбработки.Создать("""+КаталогВременныхФайлов()+"zapr.epf"",Ложь).Дамп(Запрос)";
		ПутьФайлаОбработки = ОбработкаОбъект.ИспользуемоеИмяФайла;
		Если Найти(ПутьФайлаОбработки,"e1cib\")>0 Тогда
			Если Метаданные.Справочники.Найти("ДополнительныеОтчетыИОбработки")<>Неопределено Тогда
				ДопОбработка = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоРеквизиту("ИмяОбъекта","Запросник2_0");
				Если ЗначениеЗаполнено(ДопОбработка) Тогда
					Данные  = ДопОбработка.ХранилищеОбработки.Получить();
					Данные.Записать(КаталогВременныхФайлов()+"zapr.epf");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтрокаОтладки = "Обработки."+ОбработкаОбъект.Метаданные().Имя+".Дамп(Запрос)";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТекстЗапросаОтМусора()

	ТекстЗапроса.УстановитьТекст(обПропылесоситьТекстЗапроса(ТекстЗапроса.ПолучитьТекст()));

КонецПроцедуры // ОчиститьТекстЗапросаОтМусора()

Функция обПолучитьВременныеТаблицыИзТекстаЗапроса(ТекстДляОбработки) Экспорт
	
	МассивВозврата = Новый Массив;
	
	ПакетЗапросов = ПолучитьМассивТекстовЗапросов(ТекстДляОбработки);
	Для Каждого Запрос Из ПакетЗапросов Цикл
		ЭтоВременная = Найти(Врег(Запрос),"ПОМЕСТИТЬ")>0;
		Если ЭтоВременная Тогда
			МассивВозврата.Добавить(ПолучитьИмяВТ(Запрос));
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции //обПолучитьВременныеТаблицыИзТекстаЗапроса

&НаКлиенте
Процедура ЗагрузкаПлановЗапроса()
	КоличествоПопытокПрочитатьПлан=КоличествоПопытокПрочитатьПлан+1;
	Для Каждого УидДляПлана Из СтруктураУИД Цикл
		Если УидДляПлана.Ключ = "ОсновнойЗапрос" Тогда
			СтруктураЗапроса = ПолучитьСтруктуруЗапроса(УидДляПлана.Значение.Начало,УидДляПлана.Значение.Конец);
			Если КоличествоПопытокПрочитатьПлан=3 И не ЗначениеЗаполнено(СтруктураЗапроса.План) Тогда
				СтруктураЗапроса.План = "Не удалось прочитать план запроса. Возможно, не прошло 60 секунд с момента настройки ЖР";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтруктураЗапроса.План) Тогда
				РезультатВМетаданных = ПреобразоватьВМетаданные(СтруктураЗапроса.Запрос,СтруктураЗапроса.План,СтруктураЗапроса.ТипСУБД,АдресХранилищаМетаданных);
				СтруктураУИД.ОсновнойЗапрос.ПланМета = РезультатВМетаданных.ПланВыполненияЗапросаВМетаданных;
				СтруктураУИД.ОсновнойЗапрос.ЗапросМета = РезультатВМетаданных.ТекстЗапросаВВидеМетаданных;
				ПланЗапроса = РезультатВМетаданных.ПланВыполненияЗапросаВМетаданных;
				ТекстЗапросаСУБД = РезультатВМетаданных.ТекстЗапросаВВидеМетаданных;
				СтруктураУИД.ОсновнойЗапрос.Запрос = СтруктураЗапроса.Запрос;
				СтруктураУИД.ОсновнойЗапрос.План = СтруктураЗапроса.План;
				ОтключитьОбработчикОжидания("ЗагрузкаПлановЗапроса");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	

КонецПроцедуры // ПолучениеПлановЗапроса()

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	ОчиститьТекстЗапросаОтМусора();
	Элементы.НадписьВыполнениеЗапроса.Заголовок = "Выполнение запроса...";
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	СтруктураУид = Новый структура;
	Файл = Новый Файл(КаталогВременныхФайлов()+"ZaprTemp.Sel");
	вСохранитьЗапросыВФайл(Ложь,Ложь,Файл);
	ВыполнитьЗапросНаСервере(СтруктураУИД);
	ВремяОкончания = ТекущаяУниверсальнаяДатаВМиллисекундах();
	ВремяВсего = ВремяОкончания - ВремяНачала;	
	//Элементы.НадписьВыполнениеЗапроса.Заголовок = Элементы.НадписьВыполнениеЗапроса.Заголовок+Символы.ПС+"Полное время вызова: "+ВремяВсего/1000+" сек.";
	НовСтрока = ВерсииЗапроса.Добавить();
	НовСтрока.ДатаВерсии = ТекущаяДата();
	мДатаТекущейВерсииЗапроса = НовСтрока.ДатаВерсии;
	НовСтрока.ТекстЗапроса = ТекстЗапроса.ПолучитьТекст();
	ЗаполнитьКоллекциюКоллекцией(НовСтрока.Параметры,ПараметрыЗапроса);
	УстановитьДоступностьКнопокВерсий();

	УправлениеДиалогом();
	Если ВключеноПолучениеПланаЗапросов Тогда
		КоличествоПопытокПрочитатьПлан = 0;
		ПодключитьОбработчикОжидания("ЗагрузкаПлановЗапроса",3,Ложь);
		ПланЗапроса = "Ожидается получение плана запроса...";
		ТекстЗапросаСУБД = "Ожидается получение текста запроса СУБД...";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗапросНаСервере(СтруктураУИД)
	// Вставить содержимое обработчика.
	


	обТекущийЗапрос = Новый Запрос;
	ОбТекущийЗапрос.Текст = ТекстЗапроса.ПолучитьТекст();
	МассивВТ = обПолучитьВременныеТаблицыИзТекстаЗапроса(ОбТекущийЗапрос.Текст);
	Если обТекущийЗапрос.МенеджерВременныхТаблиц = Неопределено Тогда
			обТекущийЗапрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	УдалениеПовторныхВТ = Новый Массив;
	Для каждого ИмяВТ Из МассивВТ Цикл
		
		Попытка
			НайденнаяТаблица = Неопределено;
			Для Каждого ТаблицаВТ Из ВременныеТаблицы Цикл
				Если Врег(ТаблицаВТ.Таблица)= Врег(ИмяВт) Тогда
					НайденнаяТаблица = ВременныеТаблицы.Индекс(ТаблицаВТ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НайденнаяТаблица<>Неопределено Тогда
				ОчиститьХранилищеВТНаФорме(ИмяВТ);
				ВременныеТаблицы.Удалить(НайденнаяТаблица);
			КонецЕсли;
		Исключение  
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
		
	КонецЦикла; 
	
	МассивВТ = ПолучитьМассивВТ(ТекстЗапроса.ПолучитьТекст());
	//если в запросе используется ВТ, которой нет в текстах создания ВТ, но она есть в сохраненном виде на форме,
	//то нужно добавить её в менеджер ВТ
	Для Каждого ВТИсточник Из МассивВТ Цикл
		Для Каждого ВременнаяТ Из ВременныеТаблицы Цикл
			Если Врег(ВременнаяТ.Таблица) = Врег(ВТИсточник) Тогда
				ЗапросМенеджера = Новый Запрос;
				ЗапросМенеджера.МенеджерВременныхТаблиц = обТекущийЗапрос.МенеджерВременныхТаблиц;
				ЗапросМенеджера.Текст = "Выбрать * Поместить "+ВременнаяТ.Таблица+" Из &ТЗ Т";
				ТЗ = ПолучитьИзВременногоХранилища(ВременнаяТ.Адрес);
				Если ТЗ = Неопределено Тогда
					Сообщить("Не обнаружено сохраненного значения для ВТ "+ВременнаяТ.Таблица);
					Продолжить;
				КонецЕсли;
				ЗапросМенеджера.УстановитьПараметр("ТЗ",ТЗ);
				ЗапросМенеджера.Выполнить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	
	ОбТекущийЗапрос.Текст = ТекстЗапроса.ПолучитьТекст();
	//установка параметров запроса
	Для каждого СтрокаПараметров Из ПараметрыЗапроса Цикл
		Если СтрокаПараметров.ЭтоВыражение Тогда
			обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Вычислить(СтрокаПараметров.ЗначениеПараметра));
		Иначе
			
			Если ТипЗнч(СтрокаПараметров.ЗначениеПараметра) = Тип("СписокЗначений") Тогда
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра.ВыгрузитьЗначения());
			ИначеЕсли ЗначениеЗаполнено(СтрокаПараметров.МоментВремениСсылка) Тогда	
				//это момент времени
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Новый МоментВремени(СтрокаПараметров.МоментВремениДата,СтрокаПараметров.МоментВремениСсылка));
			ИначеЕсли ЗначениеЗаполнено(СтрокаПараметров.ГраницаВид) Тогда
				//это граница
				Граница = Новый Граница(СтрокаПараметров.ГраницаЗначение,ВидГраницы[СтрокаПараметров.ГраницаВид]);
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, Граница);
			//ИначеЕсли Лев(СтрокаПараметров.ЗначениеПараметра,17) = "<ТаблицаЗначений>" Тогда	
			ИначеЕсли Лев(СтрокаПараметров.ЗначениеПараметра,15) = "ТаблицаЗначений" Тогда	
				ТЗ = Новый ТаблицаЗначений;
				Для Каждого Колонка Из СтрокаПараметров.ОписаниеТаблицыЗначений Цикл
					ТЗ.Колонки.Добавить(Колонка.Значение.ИмяКолонки,Колонка.Значение.ТипЗначения);
				КонецЦикла;
				Для Каждого СтрокаТЗ Из СтрокаПараметров.ТаблицаЗначений Цикл
					НоваяСтрока = ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ.Значение);
				КонецЦикла;
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, ТЗ);
			Иначе	
				обТекущийЗапрос.УстановитьПараметр(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
			КонецЕсли;//  
			
		КонецЕсли;
	КонецЦикла;


	Если ПустаяСтрока(обТекущийЗапрос.Текст) Тогда
		Сообщить("Не заполнен текст запроса!");
		Возврат;
	КонецЕсли;
	МассивТекстовЗапросов = ПолучитьМассивТекстовЗапросов(ОбТекущийЗапрос.Текст);
	НомерЗапроса = 1;
	ОбщееВремяЗапроса = 0;
	Для Каждого ТекЗапрос Из МассивТекстовЗапросов Цикл
		ЭтоВременная = Найти(Врег(ТекЗапрос),"ПОМЕСТИТЬ")>0;
		Если ЭтоВременная Тогда
			ИмяТаблицы = ПолучитьИмяВТ(ТекЗапрос);
		Иначе
			
			Если Найти(ТекЗапрос, "УНИЧТОЖИТЬ ")>0 Тогда
				ИмяТаблицы = "Запрос №"+Строка(НомерЗапроса)+"("+СокрЛП(ТекЗапрос)+")";	
			Иначе
				ИмяТаблицы = "Запрос №"+Строка(НомерЗапроса);	
			КонецЕсли;
			
			Количество = "";
			НомерЗапроса = НомерЗапроса + 1;
			
		КонецЕсли;
		ОбТекущийЗапрос.Текст = ТекЗапрос;
		Если ВключеноПолучениеПланаЗапросов Тогда
			//Добавим простенький запрос для идентификации
			УИДЗапроса = Новый УникальныйИдентификатор;
			УИДЗапросаОкончание = Новый УникальныйИдентификатор;
			обТекущийЗапрос.Текст = "Выбрать """+УИДЗапроса+""" ;"+Символы.ПС+обТекущийЗапрос.Текст+Символы.ПС
				+?(Найти(обТекущийЗапрос.Текст,";")>0,"",";")+"Выбрать """+УИДЗапросаОкончание+"""";
		КонецЕсли;
		НачальныйОтрезок = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если ВключеноПолучениеПланаЗапросов Тогда
			мРезЗапроса = ОбТекущийЗапрос.ВыполнитьПакет()[1];
		Иначе
			мРезЗапроса = ОбТекущийЗапрос.Выполнить();
		КонецЕсли;
		
		КонечныйОтрезок = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ВремяВМиллисекундах = КонечныйОтрезок - НачальныйОтрезок;
		ОбщееВремяЗапроса = ОбщееВремяЗапроса + ВремяВМиллисекундах;
		Если ЭтоВременная Тогда
			Выборка = мРезЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Количество = Строка(Выборка[0]);
			КонецЕсли;
			
			НоваяСтрока = ВременныеТаблицы.Добавить();
			НоваяСтрока.Таблица = ИмяТаблицы;
			НоваяСтрока.ВремяВыполнения  = Строка(ВремяВМиллисекундах/1000)+" сек.";
			НоваяСтрока.КоличествоСтрок  = Количество;
			НоваяСтрока.ТекстЗапроса = ТекЗапрос;
			НоваяСтрока.Отладить = "отладить";
			СоздатьХранилищеВТНаФорме(НоваяСтрока.Таблица,ОбТекущийЗапрос,НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	Если ВключеноПолучениеПланаЗапросов Тогда
		СтруктураУИД.Вставить("ОсновнойЗапрос",Новый Структура("Начало,Конец,Запрос,План,ЗапросМета,ПланМета",УИДЗапроса,УИДЗапросаОкончание,"","","",""));
	КонецЕсли;
	Элементы.НадписьВыполнениеЗапроса.Заголовок = "Чистое время выполнения "+ВремяВМиллисекундах/1000+" сек.";
	ВывестиРезультат(мРезЗапроса);
	//теперь запомним все ВТ, которые были в качестве источника данных
	МассивВТ = ПолучитьМассивВТ(ТекстЗапроса.ПолучитьТекст());
	Для Каждого ВТИсточник Из МассивВТ Цикл
		НайденныеВТ = Новый Массив;
		Для Каждого ВременнаяТ Из ВременныеТаблицы Цикл
			Если Врег(ВременнаяТ.Таблица) = Врег(ВТИсточник) Тогда
				НайденныеВТ.Добавить(ВременнаяТ);
			КонецЕсли;
		КонецЦикла;
		Если НайденныеВТ.Количество()= 0 Тогда
			НоваяСтрока = ВременныеТаблицы.Добавить();
			НоваяСтрока.Таблица = ВтИсточник;
		КонецЕсли;
	КонецЦикла;
	
	Если ВременныеТаблицы.Количество() > 0 Тогда
		
		Элементы.ВременныеТаблицы.Заголовок = "Временные таблицы (" + СокрЛП(ВременныеТаблицы.Количество()) + ")";
		
	Иначе	
		
		Элементы.ВременныеТаблицы.Заголовок = "Временные таблицы";
		
	КонецЕсли;
	
	ВременнаяТаблица.Очистить();
	ИмяВременнойТаблицы = "";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруЗапроса(УИД,УидКонца)
	ФайлыЛогаТЖ = НайтиФайлы(КаталогВременныхФайлов()+"ZaprosnikTemp","*.log",Истина);
	Для Каждого ФайлЛога Из ФайлыЛогаТЖ Цикл
		СодержаниеЛога = Новый ЧтениеТекста(ФайлЛога.ПолноеИмя,,,,Ложь);
		Выход = Ложь;
		Пока НЕ Выход Цикл
			СледующаяСтрока =  СодержаниеЛога.ПрочитатьСтроку();
			Если СледующаяСтрока = Неопределено Тогда
				Прервать;
			КонецЕсли;
			Если Найти(СледующаяСтрока,Строка(УИД))>0 Тогда
				Возврат ПрочитатьТекстыТЖ(СодержаниеЛога,УИД,УидКонца);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	Возврат Новый Структура("Запрос,План,ТипСУБД,ПланМета,ЗапросМета","","","","","");
КонецФункции // ПолучитьСтруктуруЗапроса()

&НаСервереБезКонтекста
Функция ПрочитатьТекстыТЖ(СодержаниеЛога, УИД,УИДКонца)
	Запрос = "";
	План = "";
	НачатоЧтениеЗапроса = Ложь;
	НачатоЧтениеПлана = Ложь;
	СпецСимвол = "'";
	ТекущееСобытие = "";
	ЗапросПрочитан = Ложь;
	ОкончательноПрочитан = Ложь;
	ПланПрочитан = Ложь;
	СимволКонцаЗапроса = "";
	АктуальныйЗапрос = "";
	Пока Истина Цикл
		СледующаяСтрока = СодержаниеЛога.ПрочитатьСтроку();
		Если СледующаяСтрока = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Если Найти(СледующаяСтрока,",DBMSSQL,")>0 Тогда
			ТекущееСобытие = "DBMSSQL";
		ИначеЕсли Найти(СледующаяСтрока,",DBV8DBENG,")>0 Тогда
			ТекущееСобытие = "DBV8DBENG";
		ИначеЕсли Найти(СледующаяСтрока,",DBPOSTGRS,")>0 Тогда
			ТекущееСобытие = "DBPOSTGRS";
		КонецЕсли;
		ПозицияПлана = Найти(СледующаяСтрока,"planSQLText='");
		ПозицияЗапроса = Найти(СледующаяСтрока,"Sql=");
		ПозицияСпецсимвола = Найти(СледующаяСтрока,СпецСимвол);
		ПозицияСимволаКонцаЗапроса = Найти(СледующаяСтрока,СимволКонцаЗапроса);
		Если НачатоЧтениеЗапроса Тогда
			Если ПозицияСимволаКонцаЗапроса = 0 Тогда
				Запрос = Запрос + СледующаяСтрока + Символы.ПС;
			Иначе
				Запрос = Запрос + Лев(СледующаяСтрока,ПозицияСимволаКонцаЗапроса-1)+ Символы.ПС;
				НачатоЧтениеЗапроса = Ложь;
				Если Найти(Запрос,УИД)=0 и Найти(Врег(Запрос),"ACCRGOPT")=0 
					и Найти(Врег(Запрос),"ACCUMRGOPT")=0 
					и Найти(Врег(Запрос),"ACCUMRGAGGOPT")=0
					и Найти(Врег(Запрос),"TRUNCATE TABLE")=0 
					и Найти(Врег(Запрос),"DROP TABLE")=0 Тогда     
					ЗапросПрочитан = Истина;
					Если Найти(Врег(Запрос),врег(УИДКонца))>0 Тогда
						ОкончательноПрочитан = Истина;
						Возврат Новый Структура("Запрос,План, ТипСУБД,ПланМета,ЗапросМета",АктуальныйЗапрос,План,ТекущееСобытие,"","");
					КонецЕсли;
					АктуальныйЗапрос = Запрос;
				Иначе
					Запрос = "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НачатоЧтениеПлана Тогда
			Если ПозицияСпецсимвола = 0 Тогда
				План = План +СледующаяСтрока+ Символы.ПС ;
			Иначе
				План = План + Лев(СледующаяСтрока,ПозицияСпецсимвола-1)+ Символы.ПС;
				НачатоЧтениеПлана = Ложь;
				Если Найти(План,УИД)=0
					и Найти(Врег(План),"ACCRGOPT")=0
					и Найти(Врег(План),"ACCUMRGAGGOPT")=0 Тогда
					ПланПрочитан = Истина;
				Иначе
					План = "";
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
		Если ПозицияПлана <> 0 и ЗапросПрочитан Тогда
			План = "";
			Если ТекущееСобытие = "DBMSSQL" Тогда
				План = "Rows,Executes,EstimateRows,EstimateIO,EstimateCPU,AvgRowSize,TotalSubtreeCost,EstimateExecutions,StmtText"+Символы.ПС;
			ИначеЕсли ТекущееСобытие = "DBPOSTGRS" Тогда
			КонецЕсли;
			НачатоЧтениеПлана = Истина;
			План = План + Сред(СледующаяСтрока,ПозицияПлана+13,СтрДлина(СледующаяСтрока))+ Символы.ПС;
			
			Продолжить;
		ИначеЕсли ПозицияЗапроса <> 0 Тогда
			НачатоЧтениеЗапроса = Истина;
			Запрос = Сред(СледующаяСтрока,ПозицияЗапроса+4,СтрДлина(СледующаяСтрока))+ Символы.ПС;
			СимволКонцаЗапроса = Сред(СледующаяСтрока,ПозицияЗапроса+4,1);
			Если СимволКонцаЗапроса<>"'" и СимволКонцаЗапроса<>"""" Тогда
				СимволКонцаЗапроса = ",";
			Иначе
				Запрос = Сред(Запрос,2,СтрДлина(Запрос));
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ОкончательноПрочитан и ПланПрочитан Тогда
			Возврат Новый Структура("Запрос,План,ТипСУБД,ПланМета,ЗапросМета",Запрос,План,ТекущееСобытие,"","");
		КонецЕсли;
	КонецЦикла;
	Возврат Новый Структура("Запрос,План,ТипСУБД,ПланМета,ЗапросМета","","","","","");

КонецФункции // ПрочитатьТекстыТЖ()

// Процедуры изменения реквизитов формы 
&НаСервере
Процедура СоздатьХранилищеВТНаФорме(ИмяТаблицы,Запрос,СтрокаВТ)
	Запрос.Текст = "Выбрать * Из "+ИмяТаблицы;
	ТЗ = Запрос.Выполнить().Выгрузить();
 //   МассивРеквизитов = Новый Массив;
 //   МассивТипаВыбора = Новый Массив;
 //   МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
 //   ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
 //   МассивРеквизитов.Добавить(Новый РеквизитФормы("ВТ_"+Врег(ИмяТаблицы), ОписаниеТипаВыбора, "","ВТ_"+Врег(ИмяТаблицы)));
 //   
 //   Для Каждого Колонка Из ТЗ.Колонки Цикл
 //		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ВТ_"+Врег(ИмяТаблицы)));
 //   КонецЦикла;
 //
 //   ИзменитьРеквизиты(МассивРеквизитов);
 //  
 //   ЗначениеВРеквизитФормы(ТЗ,"ВТ_"+ИмяТаблицы);
 	Если СтрокаВТ.Адрес <> "" Тогда
 		СтрокаВТ.Адрес = ПоместитьВоВременноеХранилище(ТЗ,СтрокаВТ.Адрес);
	Иначе
		СтрокаВТ.Адрес = ПоместитьВоВременноеХранилище(ТЗ,УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры // СоздатьХранилищеВТНаФорме()

Процедура ОчиститьХранилищеВТНаФорме(ИмяУдаляемойВт=Неопределено)
	
	МассивНаУдаление = Новый Массив;
	Для Каждого ИмяВт Из ВременныеТаблицы Цикл
		Если ВРЕГ(ИмяВТ.Таблица)<>Врег(ИмяУдаляемойВт) и ИмяУдаляемойВт<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		//МассивНаУдаление.Добавить("ВТ_"+ИмяВт.Таблица);
		//
		//КоллекцияКолонок = РеквизитФормыВЗначение("ВТ_"+Врег(ИмяВт.Таблица)).Колонки;
		//МассивУдаляемыхКолонок = Новый Массив;
		//Для Каждого Колонка Из КоллекцияКолонок Цикл
		//	Если Колонка.Имя = "СлужебныйРек__" Тогда
		//		Продолжить;
		//	КонецЕсли;
		//	ЭлементФормы = Элементы.Найти("ВТ_"+Врег(ИмяВт.Таблица)+Колонка.Имя);
		//	Если ЭлементФормы<>Неопределено Тогда
		//		Элементы.Удалить(ЭлементФормы);
		//	КонецЕсли;
		//КонецЦикла;
		ПоместитьВоВременноеХранилище(Неопределено,ИмяВт.Адрес);
	КонецЦикла;
	//ИзменитьРеквизиты(,МассивНаУдаление);
   
КонецПроцедуры // СоздатьХранилищеВТНаФорме()

//Процедуры изменения реквизитов формы конец
&НаСервере
Функция ПолучитьИмяВТ(ТекЗапрос)
	ТекстПарсинга = Врег(ТекЗапрос);
	ТекстПарсингаБезВрег = ТекЗапрос;
	ПервыйСимвол = Найти(ТекстПарсинга,"ПОМЕСТИТЬ");
	ТекстПарсинга = Сред(ТекстПарсинга,ПервыйСимвол+СтрДлина("Поместить")+1,СтрДлина(ТекстПарсинга));
	ТекстПарсингаБезВрег = Сред(ТекстПарсингаБезВрег,ПервыйСимвол+СтрДлина("Поместить")+1,СтрДлина(ТекстПарсингаБезВрег));
	ТекстПарсинга = СокрЛП(ТекстПарсинга);
	ТекстПарсингаБезВрег = СокрЛП(ТекстПарсингаБезВрег);
	НайденныйСимвол = СтрДлина(ТекстПарсинга);
	МассивСимволовКонцаВТ = Новый Массив;
	МассивСимволовКонцаВТ.Добавить(" ");
	МассивСимволовКонцаВТ.Добавить("	");
	МассивСимволовКонцаВТ.Добавить(Символы.ПС);
	МассивСимволовКонцаВТ.Добавить(";");
	МассивСимволовКонцаВТ.Добавить(")");
	Для Каждого ПоследнийСимвол Из МассивСимволовКонцаВТ Цикл
		ОчереднойСимвол = Найти(ТекстПарсинга,ПоследнийСимвол);
		Если ОчереднойСимвол>0 Тогда
			Если НайденныйСимвол>ОчереднойСимвол Тогда
				НайденныйСимвол = ОчереднойСимвол;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Лев(ТекстПарсингаБезВрег,НайденныйСимвол-1)
КонецФункции // ПолучитьИмяВТ()

&НаСервере
Функция ПолучитьМассивТекстовЗапросов(ТекстИзначальный)
 ТекстПарсинга = Врег(ТекстИзначальный);
 ТекстБезВрег = ТекстИзначальный;
 МассивЗапросов = Новый Массив;
 КоличествоЗапросовВПакете = СтрЧислоВхождений(ТекстИзначальный,";")+1;
 Для Сч = 1 По КоличествоЗапросовВПакете Цикл
	ТекКонец = Найти(ТекстПарсинга,";");
	Если ТекКонец = 0 Тогда
		Если (Найти(Врег(ТекстПарсинга),"ВЫБРАТЬ")>0 или Найти(Врег(ТекстПарсинга),"УНИЧТОЖИТЬ")>0) Тогда
			МассивЗапросов.Добавить(ТекстБезВрег);
		КонецЕсли;
	Иначе
		СледующийТекст = Сред(ТекстБезВрег,1,ТекКонец);
		МассивЗапросов.Добавить(СледующийТекст);
		ТекстПарсинга = Сред(ТекстПарсинга,СтрДлина(СледующийТекст)+1,СтрДлина(ТекстПарсинга));
 		ТекстБезВрег = Сред(ТекстБезВрег,СтрДлина(СледующийТекст)+1,СтрДлина(ТекстБезВрег));;
	КонецЕсли;
КонецЦикла;
Возврат МассивЗапросов;
	

КонецФункции // ПолучитьМассивТекстовЗапросов()

&НаСервере
Функция ПолучитьМассивВТ(ЗапросИсточник) Экспорт
	//Получить все источники данных
	ВременныйТекстЗапроса = Врег(ЗапросИсточник);
	ТекстБезВрег = ЗапросИсточник;

	МассивВТ = Новый Массив;
	МассивКлючевыхСлов = Новый Массив;
	МассивКлючевыхСлов.Добавить("ИЗ");
	МассивКлючевыхСлов.Добавить("СОЕДИНЕНИЕ");
		Для Каждого КлючевоеСлово Из МассивКлючевыхСлов Цикл
		Для ВариантПрефикса = 1 по 3 Цикл
			ТекКлючСлово = КлючевоеСлово;
			Если ВариантПрефикса=1 Тогда
				ТекКлючСлово = Символы.ПС + ТекКлючСлово;
			ИначеЕсли ВариантПрефикса = 2 Тогда
				ТекКлючСлово = " " + ТекКлючСлово;
			ИначеЕсли ВариантПрефикса = 3 Тогда
				ТекКлючСлово = "	"+ТекКлючСлово;
			КонецЕсли;
			Для ВариантПостфикcа = 1 по 2 Цикл
				СловоСПрефиксом = ТекКлючСлово;
				Если ВариантПостфикcа = 1 Тогда
					ОкончательноеСлово = СловоСПрефиксом+" ";
				Иначе
					ОкончательноеСлово = СловоСПрефиксом+Символы.ПС;
				КонецЕсли;
				ВременныйТекстЗапроса = Врег(ЗапросИсточник);
				ТекстБезВрег = ЗапросИсточник;

				ЧислоСекций = СтрЧислоВхождений(ВременныйТекстЗапроса,ОкончательноеСлово);
				Для Сч = 1 По ЧислоСекций Цикл
					ТекстБезВрег = Сред(ТекстБезВрег,Найти(ВременныйТекстЗапроса,ОкончательноеСлово)+СтрДлина(ОкончательноеСлово),СтрДлина(ВременныйТекстЗапроса));
					ВременныйТекстЗапроса = Сред(ВременныйТекстЗапроса,Найти(ВременныйТекстЗапроса,ОкончательноеСлово)+СтрДлина(ОкончательноеСлово),СтрДлина(ВременныйТекстЗапроса));
					ВременныйТекстЗапроса = СокрЛП(ВременныйТекстЗапроса);
					ТекстБезВрег = СокрЛП(ТекстБезВрег);
					СократитьДоЗначимогоСимвола(ВременныйТекстЗапроса);
					СократитьДоЗначимогоСимвола(ТекстБезВрег);
					//Следующий пробел или перевод строки
					МассивСимволовКонцаВТ = Новый Массив;
					МассивСимволовКонцаВТ.Добавить(" ");
					МассивСимволовКонцаВТ.Добавить("	");
					МассивСимволовКонцаВТ.Добавить(Символы.ПС);
					МассивСимволовКонцаВТ.Добавить(";");
					МассивСимволовКонцаВТ.Добавить(")");
					ТекГраницаНазвания = 99999;
					Для Каждого ПоследнийСимвол Из МассивСимволовКонцаВТ Цикл
						ОчереднойСимвол = Найти(ТекстБезВрег,ПоследнийСимвол);
						Если ОчереднойСимвол>0 Тогда
							Если ТекГраницаНазвания>ОчереднойСимвол Тогда
								ТекГраницаНазвания = ОчереднойСимвол;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

					НазваниеИсточника = Лев(ТекстБезВрег,ТекГраницаНазвания-1);
					Если НазваниеИсточника="" Тогда
						Продолжить;
					КонецЕсли;
					Если Лев(НазваниеИсточника,1)="&" или Лев(НазваниеИсточника,1)="(" Тогда
						//ЭтоВТ или вложенныйзапрос
						Продолжить;
					ИначеЕсли Найти(НазваниеИсточника,".")>0 Тогда
						// это системные таблицы
						Продолжить;
					КонецЕсли;
					Если МассивВТ.Найти(НазваниеИсточника)=Неопределено Тогда
						МассивВТ.Добавить(НазваниеИсточника);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Возврат МассивВТ;
КонецФункции // ПопытатьсяСоздатьМенеджерВТ()

&НаСервере
Процедура ВывестиРезультат(мРезЗапроса)
	Если СпособВыгрузки = 0 Тогда
		РекФормы = "РезультатТаблица"
	Иначе                   
		РекФормы = "РезультатДерево";
	КонецЕсли;
	//Очистим колонки результата в форме
	Если СпособВыгрузки = 0 Тогда
		ЭтаФорма[РекФормы].Очистить();
	Иначе
		ЭтаФорма[РекФормы].ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	КоллекцияКолонок = РеквизитФормыВЗначение(РекФормы).Колонки;
	МассивУдаляемыхКолонок = Новый Массив;
	Для Каждого Колонка Из КоллекцияКолонок Цикл
		Если Колонка.Имя = "СлужебныйРек__"  Тогда
			Продолжить;
		КонецЕсли;
		МассивУдаляемыхКолонок.Добавить(РекФормы+"."+Колонка.Имя);
		Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) и РекФормы = "РезультатТаблица" и не врег(Колонка.Имя) = "УРОВЕНЬ" Тогда
			МассивУдаляемыхКолонок.Добавить(РекФормы+"Итог"+Колонка.Имя);
		КонецЕсли;
		ЭлементФормы = Элементы.Найти(РекФормы+Колонка.Имя);
		Если ЭлементФормы<>Неопределено Тогда
			Элементы.Удалить(ЭлементФормы);
		КонецЕсли;
		
	КонецЦикла;
	ИзменитьРеквизиты(,МассивУдаляемыхКолонок);

		
	
	МассивРеквизитов = Новый Массив;
	УдаляемыеКолонкиТЗ = Новый Структура;
	ЧисловыеКолонки = Новый Массив;
	Если мРезЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого КолонкаРез из мРезЗапроса.Колонки Цикл
		ТекТип = КолонкаРез.ТипЗначения;
		Если КолонкаРез.ТипЗначения.СодержитТип(Тип("РезультатЗапроса")) Тогда
			ТекТип = Новый ОписаниеТипов("Строка"); 
			УдаляемыеКолонкиТЗ.Вставить(КолонкаРез.Имя,"РезультатЗапроса");
		ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			ТекТип = Новый ОписаниеТипов("Строка"); 
			УдаляемыеКолонкиТЗ.Вставить(КолонкаРез.Имя,"ХранилищеЗначения");
		ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("ДвоичныеДанные")) Тогда
			ТекТип = Новый ОписаниеТипов("Строка"); 
			//УдаляемыеКолонкиТЗ.Вставить(КолонкаРез.Имя,"ХранилищеЗначения");

		ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("МоментВремени")) Тогда
			ТекТип = Новый ОписаниеТипов("Строка"); 
			УдаляемыеКолонкиТЗ.Вставить(КолонкаРез.Имя, "МоментВремени");
		ИначеЕсли КолонкаРез.ТипЗначения.СодержитТип(Тип("Число")) и РекФормы = "РезультатТаблица" и не Врег(КолонкаРез.Имя) = "УРОВЕНЬ" Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы(РекФормы+"Итог"+КолонкаРез.Имя, Новый ОписаниеТипов("Число"), "")); 
			ЧисловыеКолонки.Добавить(КолонкаРез.Имя);
		КонецЕсли;
		МассивРеквизитов.Добавить(Новый РеквизитФормы(КолонкаРез.Имя, ТекТип, РекФормы)); 
	КонецЦикла;
	Если ПоказыватьСлужебныеКолонкиРезультата Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ТипЗаписи", Новый ОписаниеТипов("Строка"), РекФормы)); 
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Группировка", Новый ОписаниеТипов("Строка"), РекФормы)); 
		МассивРеквизитов.Добавить(Новый РеквизитФормы("Уровень", Новый ОписаниеТипов("Число"), РекФормы)); 
	КонецЕсли;
	Если СпособВыборки = 1 Тогда
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ИмяВыборки_", Новый ОписаниеТипов("Строка"), РекФормы)); 
	КонецЕсли;
	ИзменитьРеквизиты(МассивРеквизитов);
	Если СпособВыборки = 1 Тогда
		НовыйЭлемент = Элементы.Добавить(РекФормы + "ИмяВыборки_", Тип("ПолеФормы"), Элементы[РекФормы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.Заголовок = "Имя выборки";
		НовыйЭлемент.ПутьКДанным = РекФормы+".ИмяВыборки_";
		НовыйЭлемент.ЦветТекста = WebЦвета.Коричневый;
		НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.Коричневый;
	КонецЕсли;
	
	Если ПоказыватьСлужебныеКолонкиРезультата Тогда
		НовыйЭлемент = Элементы.Добавить(РекФормы + "ТипЗаписи", Тип("ПолеФормы"), Элементы[РекФормы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = РекФормы+".ТипЗаписи";
		НовыйЭлемент.ЦветТекста = WebЦвета.Синий;
		НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.Синий;

		НовыйЭлемент = Элементы.Добавить(РекФормы + "Группировка", Тип("ПолеФормы"), Элементы[РекФормы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = РекФормы+".Группировка";
		НовыйЭлемент.ЦветТекста = WebЦвета.Синий;
		НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.Синий;

		НовыйЭлемент = Элементы.Добавить(РекФормы + "Уровень", Тип("ПолеФормы"), Элементы[РекФормы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = РекФормы+".Уровень";
		НовыйЭлемент.ЦветТекста = WebЦвета.Синий;
		НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.Синий;

	КонецЕсли;

	Для Каждого КолонкаРез из мРезЗапроса.Колонки Цикл
		НовыйЭлемент = Элементы.Добавить(РекФормы + КолонкаРез.Имя, Тип("ПолеФормы"), Элементы[РекФормы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = РекФормы+"." + КолонкаРез.Имя;
		Если КолонкаРез.ТипЗначения.СодержитТип( Тип("Число")) и РекФормы = "РезультатТаблица" Тогда
			НовыйЭлемент.ОтображатьВПодвале = Истина;
			НовыйЭлемент.ПутьКДаннымПодвала = РекФормы+"Итог" + КолонкаРез.Имя;
		КонецЕсли;
		
	КонецЦикла;
	Если СпособВыгрузки = 0 Тогда
		Если СпособВыборки = 0 Тогда
			ТЗРезультата  = мРезЗапроса.Выгрузить();
			Для Каждого ПереоформляемаяКолонка Из УдаляемыеКолонкиТЗ Цикл
				ИмяКолонки = ПереоформляемаяКолонка.Ключ;
				ТЗРезультата.Колонки.Удалить(ТЗРезультата.Колонки.Найти(ПереоформляемаяКолонка.Ключ));
				ТЗРезультата.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов("Строка"));
				ТЗРезультата.ЗаполнитьЗначения(ПереоформляемаяКолонка.Значение,ИмяКолонки);
			КонецЦикла;
			РезультатТаблица.Загрузить(ТЗРезультата);
			//Для Каждого СтрокаРез иЗ ТЗРезультата Цикл
			//	НоваяСтрока = РезультатТаблица.Добавить();
			//	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРез);
			//КонецЦикла;
			Для Каждого ЧисловаяКолонка Из ЧисловыеКолонки Цикл
				ЭтаФорма[РекФормы+"Итог"+ЧисловаяКолонка] = ТЗРезультата.Итог(ЧисловаяКолонка);
			КонецЦикла;
			Элементы.НадписьКоличествоСтрок.Заголовок = "Всего "+ТЗРезультата.Количество()+" строк";
		Иначе
			СкопироватьТаблицуВыборокВПеременную();
			СчетчикРекурсии = 0;
			Если мТаблицаВыборок.Количество() = 0 Тогда
				Сообщить("Не описана ни одна выборка из запроса!");
				Возврат;
			КонецЕсли; 
			ТЗРезультата = РеквизитФормыВЗначение("РезультатТаблица");
			ТЗРезультата.Очистить();
			ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии,мРезЗапроса,ТЗРезультата);
			ЗначениеВРеквизитФормы(ТЗРезультата,"РезультатТаблица");
		КонецЕсли;
	Иначе
		Если СпособВыборки = 0 Тогда
			ДеревоРезультата = мРезЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			ДеревоРезультата.Колонки.Добавить("СлужебныйРек__");
			Для Каждого ПереоформляемаяКолонка Из УдаляемыеКолонкиТЗ Цикл
				ИмяКолонки = ПереоформляемаяКолонка.Ключ;
				ДеревоРезультата.Колонки.Удалить(ТЗРезультата.Колонки.Найти(ПереоформляемаяКолонка.Ключ));
				ДеревоРезультата.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов("Строка"));
				ДеревоРезультата.ЗаполнитьЗначения(ПереоформляемаяКолонка.Значение,ИмяКолонки);
			КонецЦикла;
			ЗначениеВДанныеФормы(ДеревоРезультата,РезультатДерево);
		Иначе
			СкопироватьТаблицуВыборокВПеременную();
			СчетчикРекурсии = 0;
			Если мТаблицаВыборок.Количество() = 0 Тогда
				Сообщить("Не описана ни одна выборка из запроса!");
				Возврат;
			КонецЕсли; 
			ДеревоРезультата = РеквизитФормыВЗначение("РезультатДерево");
			ДеревоРезультата.Строки.Очистить();
			ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии,мРезЗапроса,ДеревоРезультата.Строки);
			ЗначениеВРеквизитФормы(ДеревоРезультата,"РезультатДерево");
		КонецЕсли;
		Элементы.НадписьКоличествоСтрок.Заголовок = "Всего "+мРезЗапроса.выбрать().Количество()+" строк";
	КонецЕсли;
	Элементы.Результаты.ТекущаяСтраница = Элементы.Результат;

	//ЗначениеВРеквизитФормы(ТЗРезультата,"РезультатТаблица");
КонецПроцедуры // ВывестиРезультат()

Процедура ВывестиВыборкуЗапросаРекурсивно(Знач СчетчикРекурсии, Знач Выборка, ПриемникРезультата)
	
	СтрокаОписанияВыборки = мТаблицаВыборок[СчетчикРекурсии];
	
	Если СтрокаОписанияВыборки.ТипОбхода = "По группировкам" Тогда
		ТекТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкам;
	ИначеЕсли СтрокаОписанияВыборки.ТипОбхода = "По группировкам с иерархией"  Тогда
		ТекТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией
	Иначе
		ТекТипОбхода = "Прямой"
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаОписанияВыборки.Группировки) Тогда
		СтрокаГруппировки = СтрокаОписанияВыборки.Группировки;
	Иначе	
		СтрокаГруппировки = Неопределено;
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаОписанияВыборки.ГруппировкиДляЗначенийГруппировок) Тогда
		СтрокаГруппировкиДляЗначенийГруппировок = СтрокаОписанияВыборки.ГруппировкиДляЗначенийГруппировок;
	Иначе	
		СтрокаГруппировкиДляЗначенийГруппировок = Неопределено;
	КонецЕсли; 
	
	Попытка
		ТекВыборка = Выборка.Выбрать(ТекТипОбхода,СтрокаГруппировки,СтрокаГруппировкиДляЗначенийГруппировок); 
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Пока ТекВыборка.Следующий() Цикл
		
		НовСтрока = ПриемникРезультата.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,ТекВыборка);
		Если СпособВыборки = 1 Тогда
			Если Не ПустаяСтрока(СтрокаОписанияВыборки.Имя)Тогда
				НовСтрока.ИмяВыборки_ 	= СтрокаОписанияВыборки.Имя;
			Иначе	
				НовСтрока.ИмяВыборки_ 	= СтрокаОписанияВыборки.Группировки;
			КонецЕсли; 
			
		КонецЕсли; 
		Если ПоказыватьСлужебныеКолонкиРезультата Тогда
			НовСтрока.ТипЗаписи 	= ТекВыборка.ТипЗаписи();
			НовСтрока.Группировка	= ТекВыборка.Группировка();
			НовСтрока.Уровень 		= ТекВыборка.Уровень();
		КонецЕсли; 
		
		Если ТекТипОбхода = ОбходРезультатаЗапроса.ПоГруппировкамСИерархией И ОбходитьИерархическиеВыборкиРекурсивно Тогда
			//такой тип обхода может иметь иерархическую вложенность
			//проходим его до упора
			ТекВыборкаВниз = ТекВыборка.Выбрать(ТекТипОбхода,СтрокаГруппировки,СтрокаГруппировкиДляЗначенийГруппировок);
			Если ТипЗнч(ПриемникРезультата) = Тип("КоллекцияСтрокДереваЗначений") Тогда
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии, ТекВыборка, НовСтрока.Строки)
			Иначе
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии, ТекВыборка, ПриемникРезультата)
			КонецЕсли; 
		КонецЕсли; 
		
		Если СчетчикРекурсии < мТаблицаВыборок.Количество() - 1 Тогда
			
			Если ТипЗнч(ПриемникРезультата) = Тип("КоллекцияСтрокДереваЗначений") Тогда
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии + 1, ТекВыборка, НовСтрока.Строки)
			Иначе
				ВывестиВыборкуЗапросаРекурсивно(СчетчикРекурсии + 1, ТекВыборка, ПриемникРезультата)
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла;  
    	
КонецПроцедуры //ВывестиВыборкуЗапросаРекурсивно


Процедура СкопироватьТаблицуВыборокВПеременную()
	
	мТаблицаВыборок = РеквизитФормыВЗначение("ТаблицаВыборок").СкопироватьКолонки();
	
	Для каждого Строка Из ТаблицаВыборок Цикл
		Если НЕ Строка.Включена Тогда Продолжить КонецЕсли; 
		НоваяСтрока = мТаблицаВыборок.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла; 
	
КонецПроцедуры //Скоп

Процедура СократитьДоЗначимогоСимвола(ТекстЗапроса)
	Пока Истина Цикл
 		ТекСимвол = Лев(ТекстЗапроса,1);
		Если ТекСимвол="" Тогда
			Возврат;
		ИначеЕсли ТекСимвол = " " 
			Или ТекСимвол = Символы.ПС Тогда
			ТекстЗапроса = Сред(ТекстЗапроса,2,СтрДлина(ТекстЗапроса));
		Иначе
			Возврат;
		КонецЕсли;
 	КонецЦикла;
	

КонецПроцедуры // СократитьДоЗначимогоСимвола()

&НаКлиенте
Процедура ОткрытьФормуСовместимость82(ИмяОткрываемойФормы,СтруктураПараметров = Неопределено,МодульРезультата = "") Экспорт
	Если СисИнфо = Неопределено Тогда
		СисИнфо = Новый СистемнаяИнформация;
	КонецЕсли;
	
	Если Лев(СисИнфо.ВерсияПриложения,3)="8.2" Тогда
		Результат = ОткрытьФормуМодально(ИмяОткрываемойФормы,СтруктураПараметров,ЭтаФорма);
		Если МодульРезультата <> "" Тогда
			Выполнить(МодульРезультата+"(Результат,Неопределено)");
		КонецЕсли;
	Иначе
		Если МодульРезультата <> "" Тогда
			ОписаниеОповещения = Неопределено;
			Выполнить("ОписаниеОповещения = Новый ОписаниеОповещения(МодульРезультата,ЭтаФорма)");
			Выполнить("ОткрытьФорму(ИмяОткрываемойФормы,СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
		Иначе
			Выполнить("ОткрытьФорму(ИмяОткрываемойФормы,СтруктураПараметров,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)");
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры // ОткрытьФормуСовместимость82()


&НаКлиенте
Процедура КнопкаПараметры(Команда)
	// Вставить содержимое обработчика.
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ПараметрыЗапросаУпр");
КонецПроцедуры

&НаКлиенте
Процедура КнопкаВыборки(Команда)
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ФормаВыборкиУпр");
КонецПроцедуры

//удаляет из текста запроса всю шнягу которая там при переносе из модуля 
//(палки, кавычки, точки с запятой)
&НаКлиенте
Функция обПропылесоситьТекстЗапроса(ИсходныйТекст) Экспорт
	
    ИсходныйТекст = СокрЛП(ИсходныйТекст);
	
	//вертипалки
    ОбработанныйТекст	=	СтрЗаменить(ИсходныйТекст,"|","");
	
	//открывающая кавычка
	Пока Лев(ОбработанныйТекст,1) = Символ(34) Цикл
		ОбработанныйТекст = Сред(ОбработанныйТекст,2);
		//закрывающая кавычка удаляется только если была открывающая
		//иначе может быть глюк со строковым выражением в запросе
		Пока Прав(ОбработанныйТекст,1) = Символ(34) Цикл
			ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
		КонецЦикла; 
	КонецЦикла; 
	//закрывающая точка с запятой
	Если Прав(ОбработанныйТекст,1) = ";" Тогда
	    ОбработанныйТекст = Сред(ОбработанныйТекст,1,СтрДлина(ОбработанныйТекст)-1);
	КонецЕсли; 
	
	//двойные кавычки надо заменить на одинарные
	//Строка2Кавычки = Символ(34) + Символ(34);
	//Строка1Кавычка = Символ(34);
	
    //ОбработанныйТекст	=	СтрЗаменить(ОбработанныйТекст,Строка2Кавычки,Строка1Кавычка);
	
	Возврат ОбработанныйТекст;

КонецФункции //обПропылесоситьТекстЗапроса


&НаКлиенте
Процедура НадписьСкрытьПоказатьСписокЗапросовНажатие(Элемент)
	
	мПанельСписокЗапросовСвернутаВлево = НЕ мПанельСписокЗапросовСвернутаВлево;
	
	УправлениеДиалогом();


КонецПроцедуры
&НаКлиенте
Процедура УправлениеДиалогом()
	Если мПанельСписокЗапросовСвернутаВлево Тогда
		
		Элементы.ДеревоЗапросов.Видимость = Ложь;
		Элементы.НадписьКартинкаПоказатьСписокЗапросов.Видимость = Истина;
		Элементы.НадписьКартинкаСкрытьПанельЗапросов.Видимость = Ложь;
		Элементы.ИмяЗапроса.Видимость = Ложь;
		Элементы.ОписаниеЗапроса.Видимость = Ложь;
	Иначе	
		
		Элементы.ДеревоЗапросов.Видимость = Истина;
		Элементы.НадписьКартинкаПоказатьСписокЗапросов.Видимость = Ложь;
		Элементы.НадписьКартинкаСкрытьПанельЗапросов.Видимость = Истина;
 		Элементы.ИмяЗапроса.Видимость = Истина;
		Элементы.ОписаниеЗапроса.Видимость = Истина;

	КонецЕсли; 

	Если СпособВыгрузки = 0 Тогда
		//ТЗ
		Элементы.РезультатТаблица.Видимость = Истина;
		Элементы.РезультатДерево.Видимость = Ложь;
	Иначе
		//дерево
		Элементы.РезультатТаблица.Видимость = Ложь;
		Элементы.РезультатДерево.Видимость = Истина;
	КонецЕсли;
	Если ИмяФайлаЗапроса<>"" Тогда
		Заголовок = "Запросник "+Версия+": "+ИмяФайлаЗапроса;
	Иначе
		Заголовок = "Запросник "+Версия;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ИмяФайлаЗапроса<>"" Тогда
		//Попытаемся загрузить
		ЗагрузитьДеревоЗапросовИзФайла(Ложь);
	КонецЕсли;
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда
		вСоздатьНовыйФайлЗапросов();
	КонецЕсли;
	УправлениеДиалогом();
	СформироватьПодменюПоследнихФайлов();
	Если ЗначениеЗаполнено(ПутьФайлаОбработки) Тогда
		ПодключитьОбработчикОжидания("ЗакачатьОбработкуНаСервер",1,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакачатьОбработкуНаСервер()
	Если Найти(Врег(СтрокаСоединенияИнформационнойБазы()),"FILE=")>0 Тогда
		//закачивать ничего не нужно
		СтрокаОтладки = "ВнешниеОбработки.Создать("""+ПутьФайлаОбработки+""",Ложь).Дамп(Запрос)";
		Возврат;
	КонецЕсли;
	попытка
	Данные = Новый ДвоичныеДанные(ПутьФайлаОбработки);
	Адрес = ПоместитьВоВременноеХранилище(Данные);
	ПолучитьОбработкуНаСервере(Адрес);	
	исключение
	КонецПопытки;
КонецПроцедуры // ЗакачатьОбработкуНаСервер()
&НаСервереБезКонтекста
Процедура ПолучитьОбработкуНаСервере(Адрес)
	Данные = ПолучитьИзВременногоХранилища(Адрес);
	Данные.Записать(КаталогВременныхФайлов()+"zapr.epf");
КонецПроцедуры


&НаКлиенте
Процедура НовыйФайлНажатие(Элемент)
	Если вСохранитьЗапросыВФайл(Истина) Тогда
		вСоздатьНовыйФайлЗапросов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлНажатие(Элемент)
	// Вставить содержимое обработчика.
	ЗагрузитьДеревоЗапросовИзФайла(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДеревоЗапросовИзФайла(ЗапрашиватьИмяФайла = Ложь)
	Если ЗапрашиватьИмяФайла Тогда
		Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Длг.ПолноеИмяФайла = ИмяФайлаЗапроса;
		Длг.Каталог = ПутьФайлаЗапроса;
		Длг.Заголовок = "Укажите файл для списка запросов";
		Длг.Фильтр = "Файлы запросов (*.sel)|*.sel|Все файлы (*.*)|*.*";
		Длг.Расширение = "sel";
		
		Если Длг.Выбрать() Тогда
			ИмяФайлаЗапроса = Длг.ПолноеИмяФайла;
			ПутьФайлаЗапроса = Длг.Каталог;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Файл = Новый Файл(ИмяФайлаЗапроса);
	Если НЕ Файл.Существует() Тогда
		ПоказатьОповещениеПользователя("Ошибка при загрузке файла",,"Файл "+ИмяФайлаЗапроса+" не обнаружен!");
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаЗапроса),УникальныйИдентификатор);
	ЗагрузитьФайлИзЗапросаНаСервере(АдресВХранилище);	
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда
		вОчиститьЗначения();
	Иначе
		МИдентификаторТекСтроки = Неопределено;
		Элементы.ДеревоЗапросов.ТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		Если ДеревоЗапросов.ПолучитьЭлементы().Количество()>1 Тогда
			мПанельСписокЗапросовСвернутаВлево = Ложь;	
		Иначе
			мПанельСписокЗапросовСвернутаВлево = Истина;	
		КонецЕсли;
		ДеревоЗапросовПриАктивизацииСтроки(Неопределено);
		УправлениеДиалогом();
		
	КонецЕсли;
КонецПроцедуры // ЗагрузитьДеревоЗапросовИзФайла()

&НаСервере
Процедура ЗагрузитьФайлИзЗапросаНаСервере(АдресВХранилище)
	ВременныйФайл = ПолучитьИмяВременногоФайла("sel");
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	ДвоичныеДанные.Записать(ВременныйФайл);
	ДвоичныеДанные = Неопределено;
	Дерево = ЗначениеИзФайла(ВременныйФайл);
	Попытка
		ЗначениеВРеквизитФормы(Дерево,"ДеревоЗапросов");
	Исключение
		Сообщить("Формат сохраненного файла не соответствует текущей версии обработки!");
	КонецПопытки;
	
КонецПроцедуры // ЗагрузитьФайлИзЗапросаНаСервере()


&НаКлиенте
Процедура СохранитьФайлНажатие(Элемент)
	// Вставить содержимое обработчика.
	вСохранитьЗапросыВФайл(Ложь,ИмяФайлаЗапроса="");
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлКакНажатие(Элемент)
	вСохранитьЗапросыВФайл(Ложь,Истина);
КонецПроцедуры
&НаКлиенте
Процедура вСоздатьНовыйФайлЗапросов()

	мИмяФайла = "";
	мИмяПути = "";
	вОчиститьЗначения();
	мТекущаяСтрока = Новый Структура;
	мТекущаяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
    МИдентификаторТекСтроки =  мТекущаяСтрока.ПолучитьИдентификатор();
	Элементы.ДеревоЗапросов.ТекущаяСтрока = мТекущаяСтрока.ПолучитьИдентификатор();
	
	УстановитьПараметрыНовогоЗапроса(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	ДеревоЗапросовПриАктивизацииСтроки(Неопределено);
	
	Модифицированность = Ложь;
	
	//в новом файле всегда один запрос - сворачиваем панель запросов
	
	мПанельСписокЗапросовСвернутаВлево = Истина;	

	УправлениеДиалогом();
	
	УстановитьДоступностьКнопокВерсий();
	
КонецПроцедуры // СоздатьНовыйФайлЗапросов()
// Записывает в дерево запросов текст запроса из текстового поля
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьДоступностьКнопокВерсий()

	Если ВерсииЗапроса.Количество()<=1 Тогда
		Объект.ПоказатьУправлениеВерсиями = Ложь;
		//Элементы.КнопкаПредыдущаяВерсия.Видимость = Ложь;
		//Элементы.КнопкаСледующаяВерсия.Видимость = Ложь;
		//Элементы.КнопкаСписокВерсий.Видимость = Ложь;
	Иначе	
		Объект.ПоказатьУправлениеВерсиями = Истина;
		//Элементы.КнопкаПредыдущаяВерсия.Видимость = Истина;
		//Элементы.КнопкаСледующаяВерсия.Видимость = Истина;
		//Элементы.КнопкаСписокВерсий.Видимость = Истина;
	КонецЕсли;//  
	
	//находим текущую версию
	
	СтрокаТекВерсия = ВерсииЗапроса.НайтиСтроки(Новый Структура("ДатаВерсии",мДатаТекущейВерсииЗапроса));
	Если СтрокаТекВерсия.Количество() > 0 Тогда
		СтрокаТекВерсия = СтрокаТекВерсия[0];
	Иначе
		СтрокаТекВерсия = Неопределено;
	КонецЕсли;
	
	Если СтрокаТекВерсия = Неопределено ИЛИ ВерсииЗапроса.Количество() = 0 Тогда
		Элементы.КнопкаПредыдущаяВерсия.Доступность = Ложь;
		Элементы.КнопкаСледующаяВерсия.Доступность = Ложь;
		Возврат;
	КонецЕсли;//  
	
	Элементы.КнопкаПредыдущаяВерсия.Доступность = Истина;
	Элементы.КнопкаСледующаяВерсия.Доступность = Истина;
	
	ТекИндекс = ВерсииЗапроса.Индекс(СтрокаТекВерсия);
	
	Если ТекИндекс = ВерсииЗапроса.Количество()-1 Тогда
		//это последняя строка
		//следующих версий нет
		Элементы.КнопкаСледующаяВерсия.Доступность = Ложь;
	КонецЕсли;//  

	Если ТекИндекс = 0 Тогда
		//это первая строка
		//предыдущих версий нет
		Элементы.КнопкаПредыдущаяВерсия.Доступность = Ложь;
	КонецЕсли;//  
	
КонецПроцедуры //УстановитьДоступностьКнопокВерсий

&НаСервере
Процедура ВыполнитьНаСервереПолностью(Знач ТекстАлгоритма,Знач ПараметрыАлгоритма,Знач ВыполнятьВТранзакции) Экспорт
	Если ВыполнятьВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	Выполнить(ТекстАлгоритма);
	Если ВыполнятьВТранзакции Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры // ВыполнитьНаСервереПолностью()


&НаКлиенте
Процедура вСохранитьЗапросТекущейСтроки()
	Если МИдентификаторТекСтроки = Неопределено Тогда
		Возврат
	КонецЕсли;
	мТекущаяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(МИдентификаторТекСтроки);
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда
		
		Если мТекущаяСтрока.ТекстЗапроса <> вПолучитьТекстЗапроса(Ложь) Тогда
			Модифицированность = Истина;
		КонецЕсли;
		     
		мТекущаяСтрока.ТекстЗапроса 	= 	вПолучитьТекстЗапроса(Ложь);
		мТекущаяСтрока.ОписаниеЗапроса 	= 	ОписаниеЗапроса;
		ЗаполнитьКоллекциюКоллекцией(мТекущаяСтрока.ПараметрыЗапроса,ПараметрыЗапроса);
		мТекущаяСтрока.СпособВыгрузки 	= 	СпособВыгрузки;
		мТекущаяСтрока.ПоказыватьСлужебныеКолонкиРезультата = ПоказыватьСлужебныеКолонкиРезультата;
		ЗаполнитьКоллекциюКоллекцией(мТекущаяСтрока.ТаблицаВыборок,ТаблицаВыборок);
		мТекущаяСтрока.СпособВыборки 	= 	СпособВыборки;
		мТекущаяСтрока.ОбходитьИерархическиеВыборкиРекурсивно 	= 	ОбходитьИерархическиеВыборкиРекурсивно;
		ЗаполнитьКоллекциюКоллекцией(мТекущаяСтрока.ВерсииЗапроса,ВерсииЗапроса);
		мТекущаяСтрока.ДатаВерсииЗапроса =  мДатаТекущейВерсииЗапроса;

	КонецЕсли;

КонецПроцедуры // СохранитьЗапросТекущейСтроки(
&НаКлиенте
Функция ЗаполнитьКоллекциюКоллекцией(Приемник,Источник)
	
	Приемник.Очистить();
	Для Каждого СтрокаТЗ ИЗ	Источник Цикл
		НоваяСтрока = Приемник.Добавить();
		Если СтрокаТЗ.Свойство("Параметры") Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ,,"Параметры");
			ЗаполнитьКоллекциюКоллекцией(НоваяСтрока.Параметры,СтрокаТЗ.Параметры);
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаТЗ);
		КонецЕсли;
		//Если СтрокаТЗ.Свойство("ТаблицаЗначений") Тогда
		//	ЗаполнитьКоллекциюКоллекцией(НоваяСтрока.ТаблицаЗначений,СтрокаТЗ.ТаблицаЗначений);
		//КонецЕсли;
		//Если СтрокаТЗ.Свойство("ОписаниеТаблицыЗначений") Тогда
		//	ЗаполнитьКоллекциюКоллекцией(НоваяСтрока.ОписаниеТаблицыЗначений,СтрокаТЗ.ОписаниеТаблицыЗначений);
		//КонецЕсли;

	КонецЦикла;
	

КонецФункции // ЗаполнитьКоллекциюКоллекцией()

&НаКлиенте
Функция вПолучитьТекстЗапроса(Знач ТолькоВыделенныйТекст = Ложь)

	Если Не ТолькоВыделенныйТекст Тогда
		Возврат ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

    ТекстЗап = Элементы.ТекстЗапроса.ВыделенныйТекст;
	Если СтрДлина(ТекстЗап) <> 0 Тогда
		Возврат ТекстЗап;
	Иначе
		Возврат ТекстЗапроса.ПолучитьТекст();
	КонецЕсли;

КонецФункции // ПолучитьТекстЗапроса()

&НаКлиенте
// Обработчик активизации строки в дереве запросов
//
Процедура ДеревоЗапросовПриАктивизацииСтроки(Элемент)

	вСохранитьЗапросТекущейСтроки();
    МИдентификаторТекСтроки = Элементы.ДеревоЗапросов.ТекущаяСтрока;
	мТекущаяСтрока = ДеревоЗапросов.НайтиПоИдентификатору(МИдентификаторТекСтроки);

	Если мТекущаяСтрока = Неопределено И ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 Тогда
		//в дереве вообще нет запросов
		вОчиститьЗначения();
		Возврат;
	КонецЕсли; 
	
	ИмяЗапроса = мТекущаяСтрока.Запрос;
	
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() <> 0 И мТекущаяСтрока <> НеОпределено Тогда

		вЗадатьТекстЗапроса(мТекущаяСтрока.ТекстЗапроса);

		ИсходнаяТаблицаПараметров = мТекущаяСтрока.ПараметрыЗапроса;
		ПараметрыЗапроса.Очистить();
		Если Не ИсходнаяТаблицаПараметров = НеОпределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаПараметров Цикл
				
				НоваяСтрока = ПараметрыЗапроса.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИсходнойТаблицы);
				//НоваяСтрока.ТаблицаЗначений = ЗаполнитьКоллекциюКоллекцией(НоваяСтрока.ТаблицаЗначений,СтрокаИсходнойТаблицы.ТаблицаЗначений);
				//НоваяСтрока.ОписаниеТаблицыЗначений = ЗаполнитьКоллекциюКоллекцией(НоваяСтрока.ОписаниеТаблицыЗначений,СтрокаИсходнойТаблицы.ОписаниеТаблицыЗначений);
			КонецЦикла;
		КонецЕсли;

        Если мТекущаяСтрока.СпособВыгрузки = Неопределено Тогда
			мТекущаяСтрока.СпособВыгрузки = 1;
		КонецЕсли;

		ИсходнаяТаблицаВыборок = мТекущаяСтрока.ТаблицаВыборок;
		ТаблицаВыборок.Очистить();
		Если Не ИсходнаяТаблицаВыборок = НеОпределено Тогда
			Для каждого СтрокаИсходнойТаблицы из ИсходнаяТаблицаВыборок Цикл
				НоваяСтрока = ТаблицаВыборок.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИсходнойТаблицы);
			КонецЦикла;
		КонецЕсли;
		
		СпособВыгрузки = мТекущаяСтрока.СпособВыгрузки;
		СпособВыборки = мТекущаяСтрока.СпособВыборки;
		
		//в старых форматах много чего не было
		//восстанавливаем через попытку
		Попытка
			ОписаниеЗапроса = мТекущаяСтрока.ОписаниеЗапроса;
			ЗаполнитьКоллекциюКоллекцией(ВерсииЗапроса,мТекущаяСтрока.ВерсииЗапроса);
			мДатаТекущейВерсииЗапроса = мТекущаяСтрока.ДатаВерсииЗапроса;
		Исключение
		КонецПопытки; 
		
		ПоказыватьСлужебныеКолонкиРезультата = мТекущаяСтрока.ПоказыватьСлужебныеКолонкиРезультата;

	Иначе

		вЗадатьТекстЗапроса("");
		ПараметрыЗапроса.Очистить();
		ТаблицаВыборок.Очистить();
		ВерсииЗапроса.Очистить();

	КонецЕсли;

	УправлениеДиалогом();
	УстановитьДоступностьКнопокВерсий();
	
КонецПроцедуры // ДеревоЗапросовПриАктивизацииСтроки()


&НаСервере
Процедура УстановитьПараметрыНовогоЗапроса(Уид)
	СтрокаДерева = ДеревоЗапросов.НайтиПоИдентификатору(Уид);
	СтрокаДерева.Запрос = "Новый";
	СтрокаДерева.СпособВыгрузки = 0;
	СтрокаДерева.СпособВыборки = 0;     
	СтрокаДерева.ОбходитьИерархическиеВыборкиРекурсивно = Истина;     
	СтрокаДерева.ТекстЗапроса = "";
	
	ПараметрыОбъект = РеквизитФормыВЗначение("ПараметрыЗапроса").СкопироватьКолонки();
	
	ЗначениеВДанныеФормы(ПараметрыОбъект,СтрокаДерева.ПараметрыЗапроса);
	ВерсииОбъект = РеквизитФормыВЗначение("ВерсииЗапроса").СкопироватьКолонки();
    ЗначениеВДанныеФормы(ВерсииОбъект,СтрокаДерева.ВерсииЗапроса);
КонецПроцедуры //У
&НаКлиенте
Процедура ПоследниеФайлыНажатие(Элемент)
	// Вставить содержимое обработчика.
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ПоследниеФайлыЗапросов",,"ВыборФайлаИзСпискаПоследних");
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаИзСпискаПоследних(Результат,ДополнительныеПараметры)  Экспорт
	Если Результат <> Неопределено Тогда
		ИмяФайлаЗапроса = Результат.Каталог + Результат.Файл;
		ПутьФайлаЗапроса = Результат.Каталог;
		ЗагрузитьДеревоЗапросовИзФайла(Ложь);
	КонецЕсли;
	

КонецПроцедуры // ВыборФайлаИзСпискаПоследних()


&НаКлиенте
Процедура ВыполнитьАлгоритм(Команда)
// Вставить содержимое обработчика.
 ПараметрыИсх = Новый Структура;
 ПараметрыИсх.Вставить("СтруктураРезультата",ПолучитьСтруктуруРезультата());
 ОткрытьФормуСовместимость82(мПутьКОбработке+".ВыполнениеАлгоритмаУпр",ПараметрыИсх);
КонецПроцедуры

&НаСервере
Функция ПолучитьАдресРезультатаВХранилище()
	Возврат ПоместитьВоВременноеХранилище(РезультатТаблица.Выгрузить());
КонецФункции // ПолучитьАдресРезультатаВХранилище()


&НаСервере
Функция ПолучитьСтруктуруРезультата()
	Если РезультатТаблица.Количество()>0 Тогда
		МассивВыгрузки = Новый Массив;
		МассивВыгрузки.Добавить(РезультатТаблица.Получить(0));
		РезультатОбъект = РезультатТаблица.Выгрузить(МассивВыгрузки);
	Иначе
		РезультатТаблица.Выгрузить(МассивВыгрузки);
	КонецЕсли;
	СтруктураКолонок = РезультатОбъект.Колонки;
	СтруктураОписания = Новый Структура;

	Для Каждого Колонка Из СтруктураКолонок Цикл
		Если Колонка.Имя = "СлужебныйРек__" Тогда
			Продолжить;
		КонецЕсли;
		Если РезультатОбъект.Количество()>0 Тогда
			СтруктураОписания.Вставить(Колонка.Имя,РезультатОбъект[0][Колонка.Имя]);
		Иначе
			СтруктураОписания.Вставить(Колонка.Имя,Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураОписания;
КонецФункции // ПолучитьСтруктуруРезультата()


&НаКлиенте
Процедура КнопкаПредыдущаяВерсия(Команда)
	СтрокаТекВерсия = ВерсииЗапроса.НайтиСтроки(Новый Структура("ДатаВерсии",мДатаТекущейВерсииЗапроса));
	
	Если СтрокаТекВерсия.Количество()=0 Тогда
		Возврат;
	КонецЕсли;//  
	
	ТекИндекс = ВерсииЗапроса.Индекс(СтрокаТекВерсия[0]);
	
	Если ТекИндекс = 0 Тогда
		//это последняя строка
		//следующих версий нет
		Возврат;
	КонецЕсли;//  
	
	УстановитьВерсиюЗапроса(ВерсииЗапроса[ТекИндекс-1]);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСледующаяВерсия(Команда)
	//находим текущую версию
	
	СтрокаТекВерсия = ВерсииЗапроса.НайтиСтроки(Новый Структура("ДатаВерсии",мДатаТекущейВерсииЗапроса));
	
	Если СтрокаТекВерсия.Количество()=0 Тогда
		Возврат;
	КонецЕсли;//  
	
	ТекИндекс = ВерсииЗапроса.Индекс(СтрокаТекВерсия[0]);
	
	Если ТекИндекс = ВерсииЗапроса.Количество()-1 Тогда
		//это последняя строка
		//следующих версий нет
		Возврат;
	КонецЕсли;//  
	
	УстановитьВерсиюЗапроса(ВерсииЗапроса[ТекИндекс+1]);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВерсиюЗапроса(СтрокаВерсии)
	мДатаТекущейВерсииЗапроса = СтрокаВерсии.ДатаВерсии;
	
	ТекстЗапроса.УстановитьТекст(СтрокаВерсии.ТекстЗапроса);
	
	ПараметрыЗапроса.Очистить();
	
	ЗаполнитьКоллекциюКоллекцией(ПараметрыЗапроса,СтрокаВерсии.Параметры);
	ПоказатьНадписьВерсия("версия " + СокрЛП(мДатаТекущейВерсииЗапроса), 2);
	
	УстановитьДоступностьКнопокВерсий();

	

КонецПроцедуры // УстановитьВерсиюЗапроса()
&НаКлиенте
Процедура ПоказатьНадписьВерсия(ТекстСообщения, ВрямяПоказаСек)

	Элементы.НадписьВерсия.Заголовок = ТекстСообщения;
	
	Элементы.НадписьВерсия.Видимость = Истина;
	
	ПодключитьОбработчикОжидания("СпрятатьНадписьВерсия",ВрямяПоказаСек,Истина);
	                                                              
КонецПроцедуры //ПоказатьНадписьВерсия
&НаКлиенте
Процедура СпрятатьНадписьВерсия()

	Элементы.НадписьВерсия.Видимость = Ложь;

КонецПроцедуры //СпрятатьНадписьВерсия

&НаКлиенте
Процедура КнопкаСписокВерсий(Команда)
	ПараметрыИсх = Новый Структура;
	ПараметрыИсх.Вставить("Версии",ВерсииЗапроса);
	ПараметрыИсх.Вставить("ДатаТекВерсии",мДатаТекущейВерсииЗапроса);
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ВерсииЗапросаУпр",ПараметрыИсх,"ЗавершитьВыборВерсии");
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьВыборВерсии(Результат,Дополнительное) Экспорт
	Если Результат <> Неопределено Тогда
		МассивВерсий = ВерсииЗапроса.НайтиСтроки(Новый Структура("ДатаВерсии",Результат));
		Если МассивВерсий.Количество()>0 Тогда
			УстановитьВерсиюЗапроса(МассивВерсий[0]);
		КонецЕсли;
	КонецЕсли;
	

КонецПроцедуры // ЗавершитьВыборВерсии()


&НаКлиенте
Процедура ДеревоЗапросовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	вСохранитьЗапросТекущейСтроки();
	
	ТекСтрока = ДеревоЗапросов.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	
	//по умолчанию строки добавляются в тот же уровень
	
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 0 ИЛИ ТекСтрока.ПолучитьРодителя() = Неопределено Тогда
		//копируется строка в корне дерева в корень дерева
		НоваяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
		УровеньДерева = ДеревоЗапросов.ПолучитьЭлементы();
	Иначе	
		//копирование происходит под того же родителя
		НоваяСтрока = ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы().Добавить();
		УровеньДерева = ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы();
	КонецЕсли; 
	
	Если Копирование Тогда
		//копируем содержимое
		вДобавитьСтроки(ТекСтрока.ПолучитьИдентификатор(), НоваяСтрока.ПолучитьИдентификатор(), "ДеревоЗапросов");	
	Иначе
		//заполним новую строку параметрами по умолчанию
		УстановитьПараметрыНовогоЗапроса(НоваяСтрока.ПолучитьИдентификатор());
		Элементы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли; 

КонецПроцедуры
&НаСервере
Процедура вДобавитьСтроки(ТекСтрокаГуид, ДобСтрокаГуид, Дерево)
	ТекСтрока = ЭтаФорма[Дерево].НайтиПоИдентификатору(ТекСтрокаГуид);
	ДобСтрока = ЭтаФорма[Дерево].НайтиПоИдентификатору(ДобСтрокаГуид);
	ЗаполнитьЗначенияДополнительный(ДобСтрока,ТекСтрока,ЭтаФорма[Дерево]);	
	Для Каждого Строка Из ТекСтрока.ПолучитьЭлементы() Цикл
		
		НоваяСтрока = ДобСтрока.ПолучитьЭлементы().Добавить();
		вДобавитьСтроки(Строка.ПолучитьИдентификатор(), НоваяСтрока.ПолучитьИдентификатор(), Дерево);
		
	КонецЦикла;

КонецПроцедуры // ДобавитьСтроки()

&НаСервере
Процедура ЗаполнитьЗначенияДополнительный(КудаЗаполнять,ЧтоЗаполнять,Коллекция)
	Если ТипЗнч(Коллекция) = Тип("ДанныеФормыДерево") Тогда
		ТипОбъекта = "ДеревоЗначений";
	Иначе
		ТипОбъекта = "ТаблицаЗначений";
	КонецЕсли;
	Колонки = ДанныеФормыВЗначение(Коллекция,Тип(ТипОбъекта)).Колонки;
	Для Каждого Колонка Из Колонки Цикл
		Если ТипЗнч(КудаЗаполнять[Колонка.Имя]) = Тип("ДанныеФормыКоллекция") Тогда
			КудаЗаполнять[Колонка.Имя].Очистить();
			Для Каждого СтрокаКоллекцииЗаполнения Из ЧтоЗаполнять[Колонка.Имя] Цикл
				НоваяСтрока = КудаЗаполнять[Колонка.Имя].Добавить();
				ЗаполнитьЗначенияДополнительный(НоваяСтрока,СтрокаКоллекцииЗаполнения,ЧтоЗаполнять[Колонка.Имя]);
			КонецЦикла;
		Иначе
			КудаЗаполнять[Колонка.Имя] = ЧтоЗаполнять[Колонка.Имя];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьЗначенияДополнительный()


&НаКлиенте
Процедура ДеревоЗапросовПередУдалением(Элемент, Отказ)
	мТекущаяСтрока = НеОпределено;
	Модифицированность = Истина;
	Если ДеревоЗапросов.ПолучитьЭлементы().Количество() = 1 И Элементы.ДеревоЗапросов.Текущиеданные.получитьродителя() = Неопределено Тогда
		Сообщить("Нельзя удалять последний запрос в дереве!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока и Элемент.ТекущиеДанные.СпособВыгрузки = Неопределено Тогда
		Элемент.ТекущаяСтрока.СпособВыгрузки = 0;
	КонецЕсли;
	
	Если НоваяСтрока и Элемент.ТекущаяСтрока.СпособВыборки = Неопределено Тогда
		Элемент.ТекущаяСтрока.СпособВыборки = 0;
	КонецЕсли;
	
	ДеревоЗапросовПриАктивизацииСтроки(Элемент);

	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИмяВременнойТаблицыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ФормаВыбораВТУпр",,"ВыбранаВТ")
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранаВТ(Результат,ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ИмяВременнойТаблицы = Результат.Таблица;
		СтрокиВТ = ВременныеТаблицы.НайтиСтроки(Новый Структура("Таблица",Результат.Таблица));
		Если СтрокиВТ.Количество() = 0 Тогда
			Сообщить("Не найдено выбранной ВТ");
			Возврат;
		КонецЕсли;
		ИмяВременнойТаблицыПриИзменении(СтрокиВТ[0].ПолучитьИдентификатор());
		Если Результат.Отладка Тогда
			ОтладитьЗапросВременнойТаблицы(Результат.Таблица);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ВыбранаВТ()

&НаКлиенте
Процедура ИмяВременнойТаблицыПриИзменении(Элемент)
	ЗаполнитьВремТаблНаСервере(Элемент);
КонецПроцедуры
// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
&НаСервере
Процедура ЗаполнитьВремТаблНаСервере(ИдВТ)
	СтрокаВТ = ВременныеТаблицы.НайтиПоИдентификатору(ИдВТ);
	РекФормы = СтрокаВТ.Таблица;
	Если СтрокаВТ = Неопределено Тогда
		Сообщить("Не обнаружено временной таблицы в коллекции");
		Возврат;
	КонецЕсли;
	
	ТЗВременнойТ = ПолучитьИзВременногоХранилища(СтрокаВТ.Адрес);
	Если ТЗВременнойТ = Неопределено Тогда
		Сообщить("Не обнаружено сохраненного значения ВТ");
		Возврат;
	КонецЕсли;
	КоллекцияКолонок = ТЗВременнойТ.Колонки;
	МассивРеквизитов = Новый Массив;
	ОчиститьВременнуюТаблицу();
	
	Для Каждого Колонка Из КоллекцияКолонок Цикл
         МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ВременнаяТаблица"));
    КонецЦикла;
 
    ИзменитьРеквизиты(МассивРеквизитов);
	Для Каждого КолонкаРез из КоллекцияКолонок Цикл
		НовыйЭлемент = Элементы.Добавить("ВременнаяТаблица" + КолонкаРез.Имя, Тип("ПолеФормы"), Элементы["ВременнаяТаблица"]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ВременнаяТаблица." + КолонкаРез.Имя;
	КонецЦикла;
	ВременнаяТаблица.Загрузить(ТЗВременнойТ);
КонецПроцедуры // ЗаполнитьВремТаблНаСервере()

&НаСервере
Процедура ОчиститьВременнуюТаблицу()
	 Колонки = РеквизитФормыВЗначение("ВременнаяТаблица").Колонки;
	 МассивУдаляемыеРеквизитов = Новый Массив;
	 Для Каждого Колонка Из Колонки Цикл
		 Если Колонка.Имя = "СлужебныйРек__" Тогда
			 Продолжить;
		 КонецЕсли;
		 МассивУдаляемыеРеквизитов.Добавить("ВременнаяТаблица."+Колонка.Имя);
		 НайденныйЭлемент = Элементы.Найти("ВременнаяТаблица"+Колонка.Имя);
		 Если НайденныйЭлемент<>Неопределено Тогда
			 Элементы.Удалить(НайденныйЭлемент);
		 КонецЕсли;
	 КонецЦикла;
	 ИзменитьРеквизиты(,МассивУдаляемыеРеквизитов);

КонецПроцедуры // ОчиститьВременнуюТаблицу()

&НаКлиенте
Процедура РезультатТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "РезультатТаблицаСлужебныйРек" Тогда
		Возврат;
	КонецЕсли;
	Значение = РезультатТаблица.НайтиПоИдентификатору(ВыбраннаяСтрока)[СтрЗаменить(Поле.Имя,"РезультатТаблица","")];
	
	Если Это82() Тогда
		ОткрытьЗначение(Значение);
	Иначе
		Выполнить("ПоказатьЗначение(,Значение)");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция Это82() Экспорт
	Если СисИнфо = Неопределено Тогда
		СисИнфо = Новый СистемнаяИнформация;
	КонецЕсли;
	Возврат Лев(СисИнфо.ВерсияПриложения,3)="8.2";
	

КонецФункции // ВерсияПриложения()

&НаКлиенте
Процедура ДобавитьПодчиненныйЗапрос(Команда)
	
	ТекСтрока = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	НовСтрока = ТекСтрока.ПолучитьЭлементы().Добавить();
	УстановитьПараметрыНовогоЗапроса(НовСтрока.ПолучитьИдентификатор());
	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = НовСтрока.ПолучитьИдентификатор();

КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокуДерева(Команда)
	Если Элементы.ДеревоЗапросов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ВыборСтрокиДереваЗапросовУпр",,"ЗакончитьВыборСтрокаДерева");
КонецПроцедуры


&НаКлиенте
Процедура ЗакончитьВыборСтрокаДерева(Результат,ДополнительныеПараметры) Экспорт
	Если Результат<>Неопределено Тогда
		Если Результат = "ВерхнийУровень" Тогда
			НоваяСтрокаРодитель = ДеревоЗапросов
		Иначе
			НоваяСтрокаРодитель = ДеревоЗапросов.НайтиПоИдентификатору(Результат);
		КонецЕсли;
		НоваяСтрока = НоваяСтрокаРодитель.ПолучитьЭлементы().Добавить();
		ТекСтрока = Элементы.ДеревоЗапросов.ТекущиеДанные;
		вДобавитьСтроки(ТекСтрока.ПолучитьИдентификатор(), НоваяСтрока.ПолучитьИдентификатор(), "ДеревоЗапросов");		
		Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда
			РодительПрошлый = ДеревоЗапросов.ПолучитьЭлементы()
		Иначе
			РодительПрошлый = ТекСтрока.ПолучитьРодителя().ПолучитьЭлементы();
		КонецЕсли;
		РодительПрошлый.Удалить(ТекСтрока);
	КонецЕсли;
	Модифицированность = Истина;

КонецПроцедуры // ЗакончитьВыборСтрокаДерева()

&НаКлиенте
Процедура СвернутьДерево(Команда)
	Для каждого СтрокаДерева Из ДеревоЗапросов.ПолучитьЭлементы() Цикл
		
		Элементы.ДеревоЗапросов.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
		
	КонецЦикла; 

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗапросовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	// Вставить содержимое обработчика.
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультат(Команда)
	// Обработчик нажатия кнопки командной панели "Сохранить в табличный документ"
	
	//Перем ЗаголовокКолонки;

	//Если мРезЗапроса <> Неопределено Тогда
	//	
	//	ФормаТабДок = ПолучитьФорму("ТабличныйДокумент",ЭтаФорма);
	//	ТабДок = ФормаТабДок.ЭлементыФормы.ПолеТабличногоДокумента;
	//	ТабДок.Очистить();
	//	
	//	КоличествоКолонок = мРезЗапроса.Колонки.Количество();

	//	Выборка = мРезЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);

	//	ДетальнаяСтрока = ТабДок.ПолучитьОбласть(1, , 1, );
	//	ОбластьОбщихИтогов = ТабДок.ПолучитьОбласть(1, , 1, );
	//	ОбластьОбщихИтогов.Область().Шрифт = Новый Шрифт(ОбластьОбщихИтогов.Область().Шрифт, , , Истина, , ,);
	//	ОбластьИерархическихЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
	//	ОбластьИерархическихЗаписей.Область().Шрифт = Новый Шрифт(ОбластьИерархическихЗаписей.Область().Шрифт, , , Истина, , ,);
	//	ОбластьГрупповыхЗаписей = ТабДок.ПолучитьОбласть(1, , 1, );
	//	ОбластьГрупповыхЗаписей.Область().Шрифт = Новый Шрифт(ОбластьГрупповыхЗаписей.Область().Шрифт, , , Истина, , ,);
	//	ОбластьЗаголовка = ТабДок.ПолучитьОбласть(1, , 1, );
	//	
	//	Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
	//		Область = ОбластьЗаголовка.Область(1, ТекущееПоле + 1);
	//		Область.Текст = мРезЗапроса.Колонки[ТекущееПоле].Имя;
	//		Область.ШиринаКолонки = мРезЗапроса.Колонки[ТекущееПоле].Ширина;
	//	КонецЦикла;
	//	ТабДок.Вывести(ОбластьЗаголовка);
	//	ОбластьЗаголовка = ТабДок.Область(1, 1, 1, КоличествоКолонок);
	//	
	//	ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , , Истина, , ,);
	//	ОбластьЗаголовка.ЦветФона = WebЦвета.ЦветокБелый;
	//	ОбластьЗаголовка.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);

	//	ТабДок.НачатьАвтогруппировкуСтрок();
	//	Пока Выборка.Следующий() Цикл
	//		Если Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке Тогда 
	//			ИсходнаяСтрока = ОбластьГрупповыхЗаписей;
	//		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоИерархии Тогда 
	//			ИсходнаяСтрока = ОбластьИерархическихЗаписей;
	//		ИначеЕсли Выборка.ТипЗаписи() = ТипЗаписиЗапроса.ОбщийИтог Тогда 
	//			ИсходнаяСтрока = ОбластьОбщихИтогов;
	//		Иначе
	//			ИсходнаяСтрока = ДетальнаяСтрока;
	//		КонецЕсли;
	//			
	//		Для ТекущееПоле = 0 По КоличествоКолонок - 1 Цикл
	//			Область = ИсходнаяСтрока.Область(1, ТекущееПоле + 1);
	//			Область.Текст = Выборка[ТекущееПоле];
	//		КонецЦикла;
	//		ТабДок.Вывести(ИсходнаяСтрока, Выборка.Уровень());
	//	КонецЦикла;
	//	ТабДок.ЗакончитьАвтогруппировкуСтрок();

	//	ФормаТабДок.Открыть();
	//	
	//КонецЕсли;
	

КонецПроцедуры

&НаКлиенте
Процедура РаскрытьРезультат(Команда)
	// Вставить содержимое обработчика.
	ПараметрыИсх = Новый Структура;
	ПараметрыИсх.Вставить("РезультатТаблица",РезультатТаблица);
	ПараметрыИсх.Вставить("РезультатДерево",РезультатДерево);
	ПараметрыИсх.Вставить("ЭтоДерево",Элементы.РезультатДерево.Видимость);
	ОткрытьФормуСовместимость82(мПутьКОбработке+".РезультатУпр",ПараметрыИсх);
КонецПроцедуры

&НаКлиенте
Процедура Отладить(Команда)
	// Вставить содержимое обработчика.
	ОтладитьЗапросВременнойТаблицы(ИмяВременнойТаблицы);
КонецПроцедуры
&НаКлиенте
//в дереве запросов создается запрос по формированию временной таблицы 
//в него копируются параметры текущего запроса
//и он отлаживается
Процедура ОтладитьЗапросВременнойТаблицы(ИмяВТ)

	Если Не ЗначениеЗаполнено(ИмяВТ) Тогда Возврат КонецЕсли; 
	
	//попытаемся найти таблицу в списке временных таблиц
	
	СтрокаВТ = ВременныеТаблицы.НайтиСтроки(Новый Структура("Таблица",ИмяВТ));
	
	Если СтрокаВТ.Количество() = 0 Тогда Возврат Иначе СтрокаВт = СтрокаВт[0] КонецЕсли; 
	
	ТекСтрока = ДеревоЗапросов.НайтиПоИдентификатору(Элементы.ДеревоЗапросов.ТекущаяСтрока);
	
	//строка временной таблицы в дереве добавляется под родительский запрос
	
	ИмяСтрокиВДереве = "врем.табл. " + ИмяВТ;
	
	//сначала попробуем ее там найти
	
	СтрокаВтВДереве = Новый Массив;
	Для Каждого Поддерево Из ТекСтрока.ПолучитьЭлементы() Цикл
		Если Поддерево.Запрос = ИмяСтрокиВДереве Тогда
			СтрокаВТВДереве.Добавить(Поддерево);
		КонецЕсли;
	КонецЦикла;
	Если СтрокаВТВДереве.Количество()=0 Тогда
		СтрокаВТВДереве = ТекСтрока.ПолучитьЭлементы().Добавить();
	Иначе
		СтрокаВТВДереве = СтрокаВТВДереве[0];
	КонецЕсли; 
	
	УстановитьПараметрыНовогоЗапроса(СтрокаВТВДереве.ПолучитьИдентификатор());
	
	//копируем параметры запроса
	СтрокаВТВДереве.Запрос = ИмяСтрокиВДереве;
	
	//обрабатываем текст запроса
	
	ТекстЗапросаВТ = СтрокаВТ.ТекстЗапроса;
	
	//удаляем из текста запроса ПОМЕСТИТЬ и имя таблицы
	
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"ПОМЕСТИТЬ " + ИмяВТ,"");
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"поместить " + ИмяВТ,"");
	ТекстЗапросаВТ = СтрЗаменить(ТекстЗапросаВТ,"Поместить " + ИмяВТ,"");
	
	СтрокаВТВДереве.ТекстЗапроса = ТекстЗапросаВТ;
	
	Для каждого ИсхПараметр Из ТекСтрока.ПараметрыЗапроса Цикл
		
		НовПараметр = СтрокаВТВДереве.ПараметрыЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(НовПараметр,ИсхПараметр);
		
	КонецЦикла;	
	
	Элементы.ДеревоЗапросов.ТекущаяСтрока = СтрокаВТВДереве.ПолучитьИдентификатор();
	
	ВремяВыполненияВТ = СтрокаВТ.ВремяВыполнения;
	
	//чистим результат
	РезультатДерево.ПолучитьЭлементы().Очистить();
	РезультатТаблица.Очистить();
	Элементы.НадписьВыполнениеЗапроса.Заголовок = "";
	Элементы.НадписьКоличествоСтрок.Заголовок = "";
	
	////чистим данные по временным таблицам
	//ИмяВременнойТаблицы = "";
	//ВременныеТаблицы.Очистить();
	
	
	
	//ЭлементыФормы.ПанельРезультата.ТекущаяСтраница = ЭлементыФормы.ПанельРезультата.Страницы.Результат;
	//ЭлементыФормы.ПанельРезультата.Страницы.ВременныеТаблицы.Заголовок = "Временные таблицы";
	Элементы.Результаты.ТекущаяСтраница = Элементы.Результат;
	Модифицированность = Истина;

КонецПроцедуры //ОтладитьЗапросВременнойТаблицы

&НаКлиенте
Процедура КнопкаКонструктора(Команда)
	ОткрытьКонструкторЗапроса(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДамп(Команда)
	ЗагрузитьДампНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДампНаСервере()
	ФайлыДампа = НайтиФайлы(КаталогВременныхФайлов(),"*.sdmp",Ложь);	
	Для Каждого Дамп Из ФайлыДампа Цикл
		СтруктураДампа = ЗначениеИзФайла(Дамп.ПолноеИмя);
		Если СтруктураДампа.ИБ <> СтрокаСоединенияИнформационнойБазы() Тогда
			Продолжить;
		КонецЕсли;
		УдалитьФайлы(Дамп.ПолноеИмя);
		НоваяСтрокаДерева = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
		НоваяСтрокаДерева.Запрос = "Отладка";
		НоваяСтрокаДерева.ТекстЗапроса = СтруктураДампа.ТекстЗапроса;
		Для Каждого ПараметрЗапроса Из СтруктураДампа.Параметры Цикл
			НовПараметр = НоваяСтрокаДерева.ПараметрыЗапроса.Добавить();
			НовПараметр.ИмяПараметра = ПараметрЗапроса.Ключ;
			НовПараметр.ЭтоВыражение = Ложь;
			
			Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Массив") Тогда
				//массив преобразуем в список, чтобы можно было смотреть/править интерактивно
				Список = Новый СписокЗначений;
				Список.ЗагрузитьЗначения(ПараметрЗапроса.Значение);
				НовПараметр.ЗначениеПараметра = Список;
			ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("МоментВремени") Тогда	
				
				НовПараметр.МоментВремениДата = ПараметрЗапроса.Значение.Дата;
				НовПараметр.МоментВремениСсылка = ПараметрЗапроса.Значение.Ссылка;	
				
				НовПараметр.ЗначениеПараметра = "Момент времени: " + СокрЛП(НовПараметр.МоментВремениСсылка) + ", дата: " + СокрЛП(НовПараметр.МоментВремениДата);
				
			ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("Граница") Тогда	
				
				НовПараметр.ГраницаЗначение = ПараметрЗапроса.Значение.Значение;
				НовПараметр.ГраницаВид = ПараметрЗапроса.Значение.ВидГраницы;	
				
				НовПараметр.ЗначениеПараметра = "Граница: "+ СокрЛП(НовПараметр.ГраницаЗначение) + ",  " + СокрЛП(НовПараметр.ГраницаВид);
				
			ИначеЕсли ТипЗнч(ПараметрЗапроса.Значение) = Тип("ТаблицаЗначений") Тогда	
				
				НовПараметр.ЗначениеПараметра = "ТаблицаЗначений : " + СокрЛП(ПараметрЗапроса.Значение.Количество()) + " стр.";
				ОписаниеТЗ = Новый СписокЗначений;
				Для Каждого Колонка Из ПараметрЗапроса.Значение.Колонки Цикл
					СтруктураТЗ = Новый Структура;
					СтруктураТЗ.Вставить("ИмяКолонки",Колонка.Имя);
					СтруктураТЗ.Вставить("ТипЗначения",Колонка.ТипЗначения);
					ОписаниеТЗ.Добавить(СтруктураТЗ);
				КонецЦикла;
				НовПараметр.ОписаниеТаблицыЗначений = ОписаниеТЗ;
				СписокДляТЗ = Новый СписокЗначений;
				Для Каждого СтрокаТЗ Из ПараметрЗапроса.Значение Цикл
					СтруктураСтроки = Новый Структура;
					Для Каждого Колонка Из ПараметрЗапроса.Значение.Колонки Цикл
						СтруктураСтроки.Вставить(Колонка.Имя,СтрокаТЗ[Колонка.Имя]);
					КонецЦикла;
					СписокДляТЗ.Добавить(СтруктураСтроки);
				КонецЦикла;
				НовПараметр.ТаблицаЗначений = СписокДляТЗ;	
				
			Иначе
				НовПараметр.ЗначениеПараметра = ПараметрЗапроса.Значение;	
			КонецЕсли;//
			
		КонецЦикла;
		Для Каждого Вт Из СтруктураДампа.МенеджерВТ Цикл
			Найдено = Ложь;
			Для Каждого ВТФормы Из ВременныеТаблицы Цикл
				
				Если Врег(ВТФормы.Таблица)=Врег(ВТ.Ключ) Тогда
					ВТФормы.ВремяВыполнения = "???";
					ВТФормы.КоличествоСтрок = ВТ.Значение.Количество();
					ВТФормы.Адрес =  ПоместитьВоВременноеХранилище(ВТ.Значение,УникальныйИдентификатор);
					Найдено = Истина;
					ОчиститьХранилищеВТНаФорме(Вт.Ключ);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не Найдено Тогда
				НовоеОписаниеВТ = ВременныеТаблицы.Добавить();
				НовоеОписаниеВТ.Таблица = ВТ.Ключ;
				НовоеОписаниеВТ.ВремяВыполнения = "???";
				НовоеОписаниеВТ.КоличествоСтрок = ВТ.Значение.Количество();
				НовоеОписаниеВТ.Адрес = ПоместитьВоВременноеХранилище(ВТ.Значение,УникальныйИдентификатор);
				//ИмяТаблицы = Вт.Ключ;
				//ТЗ = ВТ.Значение;
				//МассивРеквизитов = Новый Массив;
				//МассивТипаВыбора = Новый Массив;
				//МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
				//ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
				//МассивРеквизитов.Добавить(Новый РеквизитФормы("ВТ_"+Врег(ИмяТаблицы), ОписаниеТипаВыбора, "","ВТ_"+Врег(ИмяТаблицы)));
				//
				//Для Каждого Колонка Из ТЗ.Колонки Цикл
				//	МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ВТ_"+Врег(ИмяТаблицы)));
				//КонецЦикла;
				//
				//ИзменитьРеквизиты(МассивРеквизитов);
				//
				//ЗначениеВРеквизитФормы(ТЗ,"ВТ_"+ИмяТаблицы);
			КонецЕсли;
			
	
		КонецЦикла;
		Если НЕ Элементы.ДеревоЗапросов.Видимость Тогда
			Элементы.ДеревоЗапросов.Видимость = Истина
		КонецЕсли;
		Элементы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрокаДерева.ПолучитьИдентификатор();
	
	КонецЦикла;
	
	
КонецПроцедуры // ЗагрузитьДампНаСервере()

&НаКлиенте
Процедура ПриЗакрытии()
	//ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере()
	//ВременныйФайлОбработки = КаталогВременныхФайлов()+"zapr.epf";
	//Найденные = НайтиФайлы(ВременныйФайлОбработки);
	//УдалитьФайлы(Найденные);
КонецПроцедуры

&НаКлиенте
Процедура ОтладкаВМодуле(Команда)
	
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ФормаОтладкиВМодулеУпр",Новый Структура("ПутьОбработки",СтрокаОтладки));
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСимволыМодуля(Команда)
	ТекстЗапроса.УстановитьТекст(обПропылесоситьТекстЗапроса(ТекстЗапроса.ПолучитьТекст()));
КонецПроцедуры

&НаКлиенте
Процедура Закомментировать(Команда)
	Перем СтрНач,СтрКон,КолНач,КолКон;
	
	Элементы.ТекстЗапроса.ПолучитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	Элементы.ТекстЗапроса.УстановитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Для сч = СтрНач по СтрКон Цикл
		НовСтрока = "//" + ТекстЗапроса.ПолучитьСтроку(сч);
		ТекстЗапроса.ЗаменитьСтроку(сч, НовСтрока);
	КонецЦикла;  
	
	Элементы.ТекстЗапроса.УстановитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СнятьКомментарий(Команда)
	Перем СтрНач,СтрКон,КолНач,КолКон;
	
	Элементы.ТекстЗапроса.ПолучитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	
	Для сч = СтрНач по СтрКон Цикл
		СтарСтрока = ТекстЗапроса.ПолучитьСтроку(сч);
		Если Не Лев(СтарСтрока,2) = "//" Тогда Продолжить КонецЕсли; 
		
		НовСтрока = Сред(СтарСтрока,3,СтрДлина(СтарСтрока));
		ТекстЗапроса.ЗаменитьСтроку(сч, НовСтрока);
	КонецЦикла;  
	
	Элементы.ТекстЗапроса.УстановитьГраницыВыделения(СтрНач,КолНач,СтрКон,КолКон);
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗапросИзСхемыКомпоновки(Команда)
	ОткрытыеОкна = получитьокна();
	Список = Новый СписокЗначений;
	ОсновнойЭлемент = Неопределено;
	Для каждого ОткрытоеОкно Из ОткрытыеОкна Цикл
		Если ОткрытоеОкно.Основное Тогда
			Продолжить;
		КонецЕсли;
		Список.Добавить(ОткрытоеОкно,ОткрытоеОкно.Заголовок);
		Если Найти(ОткрытоеОкно.Заголовок,"онсоль системы")>0 Тогда
			ОсновнойЭлемент = Список.НайтиПоЗначению(ОткрытоеОкно);
		КонецЕсли;
	КонецЦикла;
	Если СисИнфо = Неопределено Тогда
		СисИнфо = Новый СистемнаяИнформация;
	КонецЕсли;
	Если Лев(СисИнфо.ВерсияПриложения,3) = "8.2" Тогда
		Результат = Список.ВыбратьЭлемент("Выберите окно консоли компоновки данных:",ОсновнойЭлемент);
		КонецВыбораОкна(Результат,Неопределено);
	Иначе  	
		Выполнить("
	|ОписаниеОповещения = Новый ОписаниеОповещения(""КонецВыбораОкна"",ЭтаФорма);	
	|Если ОсновнойЭлемент<>Неопределено Тогда
	|		Список.ПоказатьВыборЭлемента(ОписаниеОповещения,""Выберите окно консоли компоновки данных:"",ОсновнойЭлемент);
	|	Иначе
	|		Список.ПоказатьВыборЭлемента(ОписаниеОповещения,""Выберите окно консоли компоновки данных:"");
	|	КонецЕсли;
	|");	
	КонецЕсли;
КонецПроцедуры

//
&НаКлиенте
Процедура КонецВыбораОкна(Результат,Дополнительные) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	КонтекстУФ = Результат.Значение.ПолучитьСодержимое();
	Если КонтекстУФ.Элементы.Найти("ПанельРезультатов") = Неопределено Тогда
		ПоказатьОповещениеПользователя("Окно системы компоновки",,"Выбранное окно, похоже, не является окном консоли СКД...");
		Возврат;
	КонецЕсли;
	
	ТекстСКД = КонтекстУФ.ТекстМакетаКомпоновкиДанных;
	ТекСтрокаДерева = КонтекстУФ.Элементы.ДеревоОтчетов.ТекущиеДанные;
	Если ТекСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Схема = НайтиЭлементДереваОтчет(КонтекстУФ.Элементы.ДеревоОтчетов.ТекущиеДанные).Данные;
	Если Схема = "" Тогда
		Возврат;
	КонецЕсли;
	КомпоновщикНастроек = КонтекстУФ.Отчет.КомпоновщикНастроек;
	ПрочитатьМакетСКД(Схема,КомпоновщикНастроек,ТекСтрокаДерева.ТипСтроки);
		//Схема = ПоместитьВоВременноеХранилище(

КонецПроцедуры // КонецВыбораОкна()

&НаКлиенте
Функция НайтиЭлементДереваОтчет(Знач ЭлементДерева)
	
	Пока ЭлементДерева <> Неопределено Цикл
		
		Если ЭлементДерева.ТипСтроки = 0 Тогда
			
			Возврат ЭлементДерева;
			
		Иначе
			
			ЭлементДерева = ЭлементДерева.ПолучитьРодителя();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


&НаСервере
Процедура ПрочитатьМакетСКД(Схема,КомпоновщикНастроек,ТипСтроки)
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Схема);
	СхемаКД = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

	Если ТипСтроки = 1 Тогда
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКД, КомпоновщикНастроек.Настройки);
	Иначе
		МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКД, КомпоновщикНастроек.ПолучитьНастройки());
	КонецЕсли;
	Для Каждого НаборДанных Из МакетКомпоновкиДанных.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных") Тогда
			НоваяСтрока = ДеревоЗапросов.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Запрос = "Отладка запроса СКД";
			НоваяСтрока.ТекстЗапроса = НаборДанных.Запрос;
			Для Каждого ПараметрЗапроса Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
				НовПараметр = НоваяСтрока.ПараметрыЗапроса.Добавить();
				НовПараметр.ИмяПараметра = ПараметрЗапроса.Имя;
				НовПараметр.ЭтоВыражение = Ложь;
				
				Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Массив") Тогда
					//массив преобразуем в список, чтобы можно было смотреть/править интерактивно
					Список = Новый СписокЗначений;
					Список.ЗагрузитьЗначения(ПараметрЗапроса.Значение);
					НовПараметр.ЗначениеПараметра = Список;
				Иначе
					НовПараметр.ЗначениеПараметра = ПараметрЗапроса.Значение;	
				КонецЕсли;//
			КонецЦикла;
			Элементы.ДеревоЗапросов.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // ПрочитатьМакетСКД()

&НаКлиенте
Процедура РезультатТаблицаПриАктивизацииЯчейки(Элемент)
	//Элементы.НадписьТипЗначения.Заголовок = Строка(Элементы.РезультатТаблица.ТекущиеДанные]);
	Если Элементы.РезультатТаблица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	Если ИмяЭлемента = "РезультатТаблицаСлужебныйРек" Тогда
		Возврат;
	КонецЕсли;
	ИмяЭлемента = Сред(ИмяЭлемента,СтрДлина("РезультатТаблица")+1,СтрДлина(ИмяЭлемента));
	Элементы.НадписьТипЗначения.Заголовок = ТипЗнч(Элемент.ТекущиеДанные[ИмяЭлемента]);
КонецПроцедуры

&НаКлиенте
Процедура РезультатДеревоПриАктивизацииЯчейки(Элемент)
	Если Элементы.РезультатДерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;                              
	ИмяЭлемента = Элемент.ТекущийЭлемент.Имя;
	Если ИмяЭлемента = "РезультатДеревоСлужебныйРек" Тогда
		Возврат;
	КонецЕсли;
	ИмяЭлемента = Сред(ИмяЭлемента,СтрДлина("РезультатДерево")+1,СтрДлина(ИмяЭлемента));
	Элементы.НадписьТипЗначения.Заголовок = ТипЗнч(Элемент.ТекущиеДанные[ИмяЭлемента]);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИсториюИзменений(Команда)
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ИсторияВерсий");
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеПлановЗапроса(Команда)
	ОткрытьФормуСовместимость82(мПутьКОбработке+".НастройкаТехнологическогоЖурнала");
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкиПланаНажатие(Элемент)
	ПолучениеПлановЗапроса(Неопределено);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяСУБД()
	СтрокаПодключения = СтрокаСоединенияИнформационнойБазы();
	Позиция = Найти(СтрокаПодключения, "Ref=""");
	Если Позиция > 0 Тогда 
		СтрокаПодключения = Сред(СтрокаПодключения, Позиция + 5);
		Позиция = Найти(СтрокаПодключения, """");
		Если Позиция > 0 Тогда 
			Возврат Лев(СтрокаПодключения, Позиция - 1);
		Иначе
			Возврат СтрокаПодключения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Преобразовывает объекты запроса к объектам в виде метаданных ИБ
//
&НаСервереБезКонтекста
Функция ПреобразоватьВМетаданные(Знач ТекстЗапроса, Знач ПланВыполненияЗапроса, Знач ТипСУБД, Знач АдресХранилища)
	
	ТекстЗапросаВМетаданных = ТекстЗапроса;
	ПланЗапросаВМетаданных = ПланВыполненияЗапроса;
	
	ТипСтрока = новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(150));
	ТипСтрокаЗначение = новый ОписаниеТипов("Строка", , );
	ТипЧисло = новый ОписаниеТипов("Число");
	
	СтруктураБД = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если СтруктураБД = Неопределено Тогда
		ВВидеМетаданных = новый Структура();
		ВВидеМетаданных.Вставить("ТекстЗапросаВВидеМетаданных", "");
		ВВидеМетаданных.Вставить("ПланВыполненияЗапросаВМетаданных", "");	
		Возврат ВВидеМетаданных;
	КонецЕсли;
	СтруктураБД.Сортировать("ИмяТаблицыХранения УБЫВ");
	
	СоответствиеБДИндекс = Новый Соответствие;
	
	СоответствиеБДПоля = Новый Соответствие;

	СоответствиеБД = Новый Соответствие;
	
	Для каждого Строка Из СтруктураБД Цикл
		СоответствиеБД.Вставить(Строка.ИмяТаблицыХранения,Строка.ИмяТаблицы);
	КонецЦикла;
	
	Для каждого Строка Из СтруктураБД Цикл 
		Для каждого Индекс Из Строка.Индексы цикл 
			
			Ключ = Индекс.ИмяИндексаХранения;
			СписокПоле = "";
			Разделитель = "";
			Для каждого Поле Из Индекс.Поля Цикл 
				Если ЗначениеЗаполнено(Поле.ИмяПоля) Тогда 
					СписокПоле = СписокПоле + Разделитель + Поле.ИмяПоля; // + "(" + Поле.Метаданные + ")";
					//Если ЗначениеЗаполнено(Поле.Метаданные) Тогда 
				КонецЕсли;
				Разделитель = ", ";
			КонецЦикла;
			СоответствиеБДИндекс.Вставить(Ключ,СписокПоле);
		КонецЦикла;
		
		Для каждого Поле Из Строка.Поля цикл 
			Если ЗначениеЗаполнено(Поле.ИмяПоля) Тогда 
				СоответствиеБДПоля.Вставить(Поле.ИмяПоляХранения,Поле.ИмяПоля);
			Иначе
				Позиция = Найти(Поле.ИмяПоляХранения, "_IDRRef");
				Если Позиция > 1 Тогда 
					ИмяОбъекта = Лев(Поле.ИмяПоляХранения, Позиция-1);
					ИмяТаблицы =  СоответствиеБД.Получить(ИмяОбъекта);
					СоответствиеБДПоля.Вставить(Поле.ИмяПоляХранения,"Ссылка(" + ИмяТаблицы + ")");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если ТипСУБД = "DBPOSTGRS" Тогда 
		ПланЗапросаВМетаданных = НРег(ПланЗапросаВМетаданных);
	ИначеЕсли ТипСУБД = "DBMSSQL" Тогда 
		// Очистка запроса
		ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "[" + ИмяСУБД() + "].[dbo].", "");
		ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "[tempdb].[dbo].", "");
		ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "#tt", "ВременнаяТаблица");
		ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, "dbo.", "");
		ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, "#tt", "ВременнаяТаблица");
		
	КонецЕсли;
	
	Для каждого Поле из СоответствиеБДИндекс Цикл 
		Если Найти(ПланЗапросаВМетаданных, Поле.Ключ) Тогда 
			Если ТипСУБД = "DBPOSTGRS" Тогда 
				Ключ = НРег(Поле.Ключ);
			Иначе
				Ключ = Поле.Ключ;
			КонецЕсли;
			ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, Ключ, НСтр("ru = 'Индекс по'") + " " + Поле.Значение + "");
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Поле из СоответствиеБДПоля Цикл 
		Если Найти(ТекстЗапросаВМетаданных, Поле.Ключ) Тогда 
			ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, Поле.Ключ, Поле.Значение);
			Если ТипСУБД = "DBPOSTGRS" Тогда 
				Ключ = НРег(Поле.Ключ);
			Иначе
				Ключ = Поле.Ключ;
			КонецЕсли;
			ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, Ключ, Поле.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Поле из СоответствиеБД Цикл 
		Если Найти(ТекстЗапросаВМетаданных, Поле.Ключ) Тогда 
			ТекстЗапросаВМетаданных = СтрЗаменить(ТекстЗапросаВМетаданных, Поле.Ключ, Поле.Значение);
			Если ТипСУБД = "DBPOSTGRS" Тогда 
				ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, НРег(Поле.Ключ), Поле.Значение);	
			ИначеЕсли ТипСУБД = "DBMSSQL" Тогда 
				ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, "[" + Поле.Ключ + "]", Поле.Значение);	
			Иначе
				ПланЗапросаВМетаданных = СтрЗаменить(ПланЗапросаВМетаданных, Поле.Ключ, Поле.Значение);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ВВидеМетаданных = новый Структура();
	ВВидеМетаданных.Вставить("ТекстЗапросаВВидеМетаданных", ТекстЗапросаВМетаданных);
	ВВидеМетаданных.Вставить("ПланВыполненияЗапросаВМетаданных", ПланЗапросаВМетаданных);	
	
	Возврат ВВидеМетаданных;
	
 	
КонецФункции

&НаКлиенте
Процедура ПолучитьТекстДляМодуля(Команда)

	ТекстМодуля = ТекстЗапроса.ПолучитьТекст();
	
	//одинарные кавычки надо заменить на двойные
	Строка2Кавычки = Символ(34) + Символ(34);
	Строка1Кавычка = Символ(34);
    ТекстМодуля	=	СтрЗаменить(ТекстМодуля,Строка1Кавычка,Строка2Кавычки);
	
	//открывающие и закрывающие 
	ТекстМодуля = Символ(34) + ТекстМодуля + Символ(34) + ";";
	
	
	ТекстДок = Новый ТекстовыйДокумент; 
	ТекстДок.УстановитьТекст(ТекстМодуля);
	
	Для сч = 2 по ТекстДок.КоличествоСтрок() Цикл
		Строка = ТекстДок.ПолучитьСтроку(сч);
		ТекстДок.ЗаменитьСтроку(сч,"|"+Строка);
	КонецЦикла;  
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Вариант1",Символы.ВК+ТекстДок.ПолучитьТекст());
	
	ТекстМодуля = 
	"Запрос = Новый Запрос;
	|Запрос.Текст = 
	|" 
	+ ТекстДок.ПолучитьТекст(); 
	
	Для каждого СтрокаПараметров Из ПараметрыЗапроса Цикл
		ТекстМодуля = ТекстМодуля + Символы.ПС + "Запрос.УстановитьПараметр(" + Строка1Кавычка + СокрЛП(СтрокаПараметров.ИмяПараметра) + Строка1Кавычка + ", );"
	КонецЦикла; 
	
	ТекстМодуля = ТекстМодуля + Символы.ПС + "Результат = Запрос.Выполнить();";
	СтруктураПараметров.Вставить("Вариант2",Символы.ВК + ТекстМодуля);
	ОткрытьФормуСовместимость82(мПутьКОбработке+".ВариантыЗапросаДляБуфераУпр",СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура СпособыВыводаПланаПриИзменении(Элемент)
	Если СтруктураУид = Неопределено Тогда
		возврат;
	КонецЕсли;
	Если не СтруктураУид.Свойство("ОсновнойЗапрос") Тогда
		возврат;
	КонецЕсли;
	Если СпособыВыводаПлана = 0 Тогда
		ТекстЗапросаСУБД = СтруктураУид.ОсновнойЗапрос.ЗапросМета;
		ПланЗапроса = СтруктураУид.ОсновнойЗапрос.ПланМета;
	Иначе
		ТекстЗапросаСУБД = СтруктураУид.ОсновнойЗапрос.Запрос;
		ПланЗапроса = СтруктураУид.ОсновнойЗапрос.План;
	КонецЕсли;
КонецПроцедуры

мПанельЦентральноеОкноВидимость = Ложь;

мПанельСписокЗапросовСвернутаВлево = Ложь;

мФормаОбновленаПриОткрытии = Ложь;

мФайлЗапросовСохранитьБы = Ложь;

мТекущаяСтрока = Новый Структура;

мПутьКОбработке = Лев(ИмяФормы,СтрДлина(ИмяФормы)-9);

Версия = "2.0.12";