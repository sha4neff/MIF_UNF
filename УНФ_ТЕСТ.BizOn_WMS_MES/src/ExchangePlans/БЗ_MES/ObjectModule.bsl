Функция ИмяПеречисления(Ссылка)
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда Возврат ""; КонецЕсли;
	ИмяПеречисления = Ссылка.Метаданные().Имя;
	Индекс = Перечисления[ИмяПеречисления].Индекс(Ссылка);
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;
КонецФункции

Функция ОбъектОтправлен(Ссылка) Экспорт
	Запрос=Новый Запрос(
	"ВЫБРАТЬ
	|	БЗ_ОтправленныеОбъекты.Узел,
	|	БЗ_ОтправленныеОбъекты.Объект
	|ИЗ
	|	РегистрСведений.БЗ_ОтправленныеОбъекты КАК БЗ_ОтправленныеОбъекты
	|ГДЕ
	|	БЗ_ОтправленныеОбъекты.Узел = &Узел
	|	И БЗ_ОтправленныеОбъекты.Объект = &Ссылка");
	Запрос.УстановитьПараметр("Узел",ЭтотОбъект.Ссылка);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Функция СсылкаНаОбъект(Ссылка) Экспорт	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		//Если ТипЗнч(Ссылка)=Тип("СправочникСсылка.БЗ_ВидыПартииПроизводства") Тогда
		//	Возврат Строка(Ссылка.Код);
		//ИначеЕсли ТипЗнч(Ссылка)=Тип("СправочникСсылка.БЗ_ТипыДвижений_ТСД") Тогда
		//	Возврат Строка(Ссылка.Код);
		//КонецЕсли;		
		Возврат Строка(Ссылка.УникальныйИдентификатор());
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ДобавитьОбъектВОтправленые(Ссылка) Экспорт
	Если Не ОбъектОтправлен(Ссылка) Тогда
		Попытка
			МенеджерЗаписи=РегистрыСведений.БЗ_ОтправленныеОбъекты.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Узел=ЭтотОбъект.Ссылка;
			МенеджерЗаписи.Объект=Ссылка;
			МенеджерЗаписи.Записать(Истина);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецФункции

Функция Получить_ГруппаУниверсальная(Ссылка)
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);	
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		ДобавитьОбъектВОтправленые(ТКРодитель);
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);				
		ТКРодитель=ТКРодитель.Родитель;		
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Возврат Данные;	
КонецФункции

Функция Получить_ГруппаУниверсальнаяПодчиненный(Ссылка)
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Данные.Вставить("Владелец",СсылкаНаОбъект(Ссылка.Владелец));
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		ДобавитьОбъектВОтправленые(ТКРодитель);
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);
		СТРодитель.Вставить("Владелец",СсылкаНаОбъект(ТКРодитель.Владелец));
		ТКРодитель=ТКРодитель.Родитель;		
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;	
	Возврат Данные;	
КонецФункции

Функция Получить_Свойство(Ссылка)
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Новый Структура();
	КонецЕсли;
	Значение=Ссылка;
	ТипСвойство=Ссылка.Владелец;
	Свойство = Новый Структура();
	Если ТипЗнч(Значение)=Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда				
		Свойство.Вставить("Тип","Справочник");
		Свойство.Вставить("ЗначениеGUID",СсылкаНаОбъект(Значение));
		Свойство.Вставить("ЗначениеКод",Значение.Код);
		Свойство.Вставить("ЗначениеНаименование",Значение.Наименование);
		Свойство.Вставить("ЗначениеАртикул",Значение.Артикул);
		Свойство.Вставить("ЗначениеВладелецGUID",СсылкаНаОбъект(Значение.Владелец));
	ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
		Свойство.Вставить("Тип","Число");
		Свойство.Вставить("ТипЗнч",ЗначениеВСтрокуВнутр(ТипСвойство.ТипЗначения));
		Свойство.Вставить("Значение",Значение);
	ИначеЕсли ТипЗнч(Значение)=Тип("Строка") Тогда
		Свойство.Вставить("Тип","Строка");
		Свойство.Вставить("ТипЗнч",ЗначениеВСтрокуВнутр(ТипСвойство.ТипЗначения));
		Свойство.Вставить("Значение",Значение);
	ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
		Свойство.Вставить("Тип","Дата");
		Свойство.Вставить("ТипЗнч",ЗначениеВСтрокуВнутр(ТипСвойство.ТипЗначения));
		Свойство.Вставить("Значение",Значение);
	Иначе
		Возврат Свойство;
	КонецЕсли;
	Свойство.Вставить("GUID",СсылкаНаОбъект(ТипСвойство));
	Свойство.Вставить("Код",ТипСвойство.Код);
	Свойство.Вставить("Наименование",ТипСвойство.Наименование);
	Свойство.Вставить("НазначениеСвойстваКод",ТипСвойство.НазначениеСвойства.Код);	
	Возврат Свойство;
КонецФункции

Функция Получить_КлассификаторЕдиницИзмерения(Ссылка) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Новый Структура("GUID","");
	КонецЕсли;
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Данные.Вставить("НаименованиеПолное",Ссылка.НаименованиеПолное);
	Данные.Вставить("МеждународноеСокращение",Ссылка.МеждународноеСокращение);
	Возврат Данные;
КонецФункции

Функция Получить_ВидПоддона(Ссылка) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Новый Структура("GUID","");
	КонецЕсли;
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Возврат Данные;
КонецФункции

Функция Получить_Организации(Ссылка) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Новый Структура("GUID","");
	КонецЕсли;
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Данные.Вставить("ИНН",Ссылка.ИНН);
	Данные.Вставить("КПП",Ссылка.КПП);
	Данные.Вставить("НаименованиеПолное",Ссылка.НаименованиеПолное);
	Возврат Данные;
КонецФункции

Функция Получить_Склады(Ссылка) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Новый Структура("GUID","");
	КонецЕсли;	
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	//Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Возврат Данные;
КонецФункции

Функция Получить_Подразделения(Ссылка) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Новый Структура("GUID","");
	КонецЕсли;	
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		ДобавитьОбъектВОтправленые(ТКРодитель);
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Возврат Данные;
КонецФункции

Функция Получить_Пользователи(Ссылка) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Новый Структура("GUID","");
	КонецЕсли;	
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Лев(Ссылка.Наименование,50));
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		ДобавитьОбъектВОтправленые(ТКРодитель);
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",Лев(ТКРодитель.Наименование,50));
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Возврат Данные;
КонецФункции

Функция Получить_СтатьиЗатрат(Ссылка) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Новый Структура("GUID","");
	КонецЕсли;	
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		ДобавитьОбъектВОтправленые(ТКРодитель);
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Возврат Данные;
КонецФункции

Функция Получить_ФизическиеЛица(Ссылка) Экспорт	
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		ДобавитьОбъектВОтправленые(ТКРодитель);
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("ДатаРождения",Ссылка.ДатаРождения);
	Данные.Вставить("Комментарий",Ссылка.Комментарий);
	Возврат Данные;
КонецФункции

Функция Получить_НоменклатурныеГруппы(Ссылка) Экспорт	
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		ДобавитьОбъектВОтправленые(ТКРодитель);
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("БазоваяЕдиницаИзмерения",СсылкаНаОбъект(Ссылка.БазоваяЕдиницаИзмерения));
	//Данные.Вставить("ВидФрезеровки",ИмяПеречисления(Ссылка.ВидФрезеровки));
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_Участки(Ссылка) Экспорт
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);	
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);	
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("НаименованиеТСД",Ссылка.НаименованиеТСД);
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("ОтчетПроизводстваЗаСмену_Организация",СсылкаНаОбъект(Ссылка.ОПС_Организация));
	Данные.Вставить("РазрешитьСверхЗНП",Ссылка.РазрешитьСверхЗНП);
	Данные.Вставить("РедакцияОПСДоступнаЧасов",Ссылка.РедакцияОПСДоступнаЧасов);
	МСмены=Новый Массив();
	//Для Каждого Строка Из Ссылка.Смены Цикл
	//	Смены=Новый Структура();
	//	Смены.Вставить("Начало",Строка.Начало);
	//	Смены.Вставить("Конец",Строка.Конец);
	//	Смены.Вставить("ТипСмены",Строка.ТипСмены);
	//	МСмены.Добавить(Смены);
	//КонецЦикла;
	МПринтерыТерминалов=Новый Массив();
	//Для Каждого Строка Из Ссылка.ПринтерыТерминалов Цикл
	//	ПринтерыТерминалов=Новый Структура();
	//	ПринтерыТерминалов.Вставить("Наименование",Строка.Наименование);
	//	ПринтерыТерминалов.Вставить("Принтер",Строка.Принтер);
	//	МПринтерыТерминалов.Добавить(ПринтерыТерминалов);
	//КонецЦикла;
	МСклады=Новый Массив();
	Для Каждого Строка Из Ссылка.Склады Цикл
		Склады=Новый Структура();
		Склады.Вставить("Склад",СсылкаНаОбъект(Строка.Склад));
		МСклады.Добавить(Склады);
	КонецЦикла;
	МДоступныеСтатусыОстатков=Новый Массив();
	//Для Каждого Строка Из Ссылка.ДоступныеСтатусыОстатков Цикл
	//	ДоступныеСтатусыОстатков=Новый Структура();
	//	ДоступныеСтатусыОстатков.Вставить("СтатусОстатка",ИмяПеречисления(Строка.СтатусОстатка));
	//	МДоступныеСтатусыОстатков.Добавить(ДоступныеСтатусыОстатков);
	//КонецЦикла;
	МНастройкаПорядкаФрезеровки=Новый Массив();
	//Для Каждого Строка Из Ссылка.НастройкаПорядкаФрезеровки Цикл
	//	НастройкаПорядкаФрезеровки=Новый Структура();
	//	НастройкаПорядкаФрезеровки.Вставить("ПредельныйОстаток",Строка.ПредельныйОстаток);
	//	НастройкаПорядкаФрезеровки.Вставить("ПорядокЛегкая",Строка.ПорядокЛегкая);
	//	НастройкаПорядкаФрезеровки.Вставить("ПорядокСредняя",Строка.ПорядокСредняя);
	//	НастройкаПорядкаФрезеровки.Вставить("ПорядокТяжелая",Строка.ПорядокТяжелая);
	//	МНастройкаПорядкаФрезеровки.Добавить(НастройкаПорядкаФрезеровки);
	//КонецЦикла;	
	Данные.Вставить("Смены",МСмены);
	Данные.Вставить("ПринтерыТерминалов",МПринтерыТерминалов);
	Данные.Вставить("Склады",МСклады);
	Данные.Вставить("ДоступныеСтатусыОстатков",МДоступныеСтатусыОстатков);
	Данные.Вставить("НастройкаПорядкаФрезеровки",МНастройкаПорядкаФрезеровки);	
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_РабочиеМеста(Ссылка) Экспорт
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальнаяПодчиненный(Ссылка); КонецЕсли;	
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Владелец",СсылкаНаОбъект(Ссылка.Владелец));
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		СТРодитель.Вставить("Владелец",СсылкаНаОбъект(ТКРодитель.Владелец));		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Данные.Вставить("НаименованиеТСД",Ссылка.НаименованиеТСД);
	//Данные.Вставить("ЭтоБуфер",Ссылка.ЭтоБуфер);
	//Данные.Вставить("ТипТЕБуфер",СсылкаНаОбъект(Ссылка.ТипТЕБуфер));
	//Данные.Вставить("ТипДвиженияТСДБуфер",СсылкаНаОбъект(Ссылка.ТипДвиженияТСДБуфер));
	Данные.Вставить("Архив",Ссылка.Архив);
	Данные.Вставить("ОсновнаяОперация",СсылкаНаОбъект(Ссылка.ОсновнаяОперация));
	//Данные.Вставить("ТермоПринтер",Ссылка.ТермоПринтер);
	//Данные.Вставить("ПринтерЭтикеток",Ссылка.ПринтерЭтикеток);
	//Данные.Вставить("ОтправлятьЗаданиеВПапку",Ссылка.ОтправлятьЗаданиеВПапку);
	//Данные.Вставить("ПапкаЗаданий",Ссылка.ПапкаЗаданий);
	//Данные.Вставить("ОчищатьПапкуПриВыполненииОтменеЗадания",Ссылка.ОчищатьПапкуПриВыполненииОтменеЗадания);
	//Данные.Вставить("ОчищатьПапкуПередЗаписью",Ссылка.ОчищатьПапкуПередЗаписью);
	//Данные.Вставить("ПередатьНаРабочееМесто",СсылкаНаОбъект(Ссылка.ПередатьНаРабочееМесто));	
	//Данные.Вставить("Поддонов",Ссылка.Поддонов);
	//Данные.Вставить("ПлощадьХранения",Ссылка.ПлощадьХранения);
	МОперации=Новый Массив();
	Для Каждого Строка Из Ссылка.Операции Цикл
		Операции=Новый Структура();
		Операции.Вставить("Операция",СсылкаНаОбъект(Строка.Операция));
		МОперации.Добавить(Операции);
	КонецЦикла;
	МВариантыНаладки=Новый Массив();
	//Для Каждого Строка Из Ссылка.ВариантыНаладки Цикл
	//	ВариантыНаладки=Новый Структура();
	//	ВариантыНаладки.Вставить("ВариантНаладки",СсылкаНаОбъект(Строка.ВариантНаладки));
	//	ВариантыНаладки.Вставить("Приоритет",Ссылка.Приоритет);
	//	МВариантыНаладки.Добавить(ВариантыНаладки);
	//КонецЦикла;
	Данные.Вставить("Операции",МОперации);
	Данные.Вставить("ВариантыНаладки",МВариантыНаладки);
	Возврат Данные;	
КонецФункции

Функция Получить_БЗ_ВариантыНаладки(Ссылка) Экспорт
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_ТипыТЕ(Ссылка) Экспорт
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("Префикс",Ссылка.Префикс);
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("Серия",Ссылка.Серия);	
	Данные.Вставить("Укладка",Ссылка.Укладка);
	Данные.Вставить("Комментарий",Ссылка.Комментарий);
	//Данные.Вставить("Свойство_ВидПоддона",СсылкаНаОбъект(Ссылка.Свойство_ВидПоддона));
	Данные.Вставить("Свойство_Цвет",Получить_Свойство(Ссылка.Свойство_Цвет));	
	//Данные.Вставить("Свойство_ВидФасада",ИмяПеречисления(Ссылка.Свойство_ВидФасада));
	Данные.Вставить("Свойство_НоменклатурнаяГруппа",СсылкаНаОбъект(Ссылка.Свойство_Цвет));
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_ТипыДвижений_ТСД(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Данные.Вставить("СтатусОстатка",ИмяПеречисления(Ссылка.СтатусОстатка));
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("Участок",СсылкаНаОбъект(Ссылка.Участок));
	Данные.Вставить("Комментарий",Ссылка.Комментарий);
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_ВидыПартииПроизводства(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("Приоритет",Ссылка.Приоритет);	
	Данные.Вставить("ПриоритетВОчереди",Ссылка.ПриоритетВОчереди);		
	TSDЦветВыделения=Ссылка.TSDЦветВыделения.Получить();
	Если TSDЦветВыделения=Неопределено Тогда
		Данные.Вставить("TSDЦветВыделения","");
	Иначе
		Данные.Вставить("TSDЦветВыделения",ЗначениеВСтрокуВнутр(TSDЦветВыделения));
	КонецЕсли;
	TSDЦветВыделенияВыбрано=Ссылка.TSDЦветВыделенияВыбрано.Получить();
	Если TSDЦветВыделенияВыбрано=Неопределено Тогда
		Данные.Вставить("TSDЦветВыделенияВыбрано","");
	Иначе
		Данные.Вставить("TSDЦветВыделенияВыбрано",ЗначениеВСтрокуВнутр(TSDЦветВыделенияВыбрано));
	КонецЕсли;
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_ТехнологическиеОперации(Ссылка) Экспорт
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("ВидОперации",ИмяПеречисления(Ссылка.ВидОперации));
	Данные.Вставить("НаименованиеТСД",Ссылка.НаименованиеТСД);
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_Сотрудники_ТСД(Ссылка) Экспорт
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("ПинКод",Ссылка.ПинКод);
	Данные.Вставить("СканКод",Ссылка.СканКод);
	Данные.Вставить("Доступ_РедакцияОПС",Ссылка.Доступ_РедакцияОПС);
	//Данные.Вставить("ПредупреждатьОУчетеПоСН",Ссылка.ПредупреждатьОУчетеПоСН);
	//Данные.Вставить("ПередачаТЕ",Ссылка.ПередачаТЕ);
	//МТСД_ВидыОпераций=Новый Массив();
	//Для Каждого Строка Из Ссылка.ТСД_ВидыОпераций Цикл
	//	ТСД_ВидыОпераций=Новый Структура();
	//	ТСД_ВидыОпераций.Вставить("Операция",ИмяПеречисления(Строка.Операция));
	//	МТСД_ВидыОпераций.Добавить(ТСД_ВидыОпераций);
	//КонецЦикла;
	МУчастки=Новый Массив();
	Для Каждого Строка Из Ссылка.Участки Цикл
		Участки=Новый Структура();
		Участки.Вставить("Участок",СсылкаНаОбъект(Строка.Участок));
		Участки.Вставить("РабочееМесто",СсылкаНаОбъект(Строка.РабочееМесто));
		Участки.Вставить("Ответственный",СсылкаНаОбъект(Строка.Ответственный));
		Участки.Вставить("НомерБригады",Строка.НомерБригады);
		//Участки.Вставить("РаботникБригада",СсылкаНаОбъект(Строка.РаботникБригада));
		МУчастки.Добавить(Участки);
	КонецЦикла;
	//Данные.Вставить("ТСД_ВидыОпераций",МТСД_ВидыОпераций);
	Данные.Вставить("Участки",МУчастки);
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_ТипыТрудозатрат(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_Принтеры(Ссылка) Экспорт
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Родитель=Новый Структура();
	Данные.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=Данные.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);		
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("ПутьПечати",Ссылка.ПутьПечати);
	Данные.Вставить("ТипПечати",ИмяПеречисления(Ссылка.ТипПечати));
	Данные.Вставить("Участок",СсылкаНаОбъект(Ссылка.Участок));
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_Назначения(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_ФайлыСхемРезки(Ссылка) Экспорт
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Код",Ссылка.Код);
	Данные.Вставить("Наименование",Ссылка.Наименование);                           
	Данные.Вставить("ФайлСхемыРезки",Base64Строка(Ссылка.ФайлСхемыРезки.Получить()));
	Данные.Вставить("ХешСтрока",Ссылка.ХешСтрока);
	Данные.Вставить("ХешФункция",Ссылка.ХешФункция);
	Данные.Вставить("Вариант",Ссылка.Вариант);
	Данные.Вставить("Путь",Ссылка.Путь);
	Данные.Вставить("ИмяФайла",Ссылка.ИмяФайла);
	Данные.Вставить("ДатаОбновления",Ссылка.ДатаОбновления);
	Данные.Вставить("Архив",Ссылка.Архив);
	Данные.Вставить("Стандартный",Ссылка.Стандартный);	
	Возврат Данные;
КонецФункции

Функция Получить_Номенклатура(Ссылка) Экспорт
	Если Ссылка.ЭтоГруппа Тогда Возврат Получить_ГруппаУниверсальная(Ссылка); КонецЕсли;
	ДобавитьОбъектВОтправленые(Ссылка);
	Отбор=Новый Структура();
	Единицы=Справочники.ЕдиницыИзмерения.Выбрать(,Ссылка);
	Характеристики=Справочники.ХарактеристикиНоменклатуры.Выбрать(,Ссылка);	
	//ЕдиницаХраненияОстатков=Ссылка.ЕдиницаХраненияОстатков;
	НоменклатураСтруктура=Новый Структура();
	НоменклатураСтруктура.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	НоменклатураСтруктура.Вставить("Код",Ссылка.Код);
	НоменклатураСтруктура.Вставить("Наименование",Ссылка.Наименование);
	НоменклатураСтруктура.Вставить("Артикул",Ссылка.Артикул);
	НоменклатураСтруктура.Вставить("БазоваяЕдиницаИзмерения",Получить_КлассификаторЕдиницИзмерения(Ссылка.ЕдиницаИзмерения));
	НоменклатураСтруктура.Вставить("ЕдиницаХраненияОстатков",СсылкаНаОбъект(Ссылка));
	//  НоменклатураСтруктура.Вставить("НоменклатурнаяГруппаПроизводство",Получить_НоменклатурныеГруппы(Ссылка.НоменклатурнаяГруппаПроизводство));
	//	НоменклатураСтруктура.Вставить("НоменклатурнаяГруппаТорговля",Получить_НоменклатурныеГруппы(Ссылка.НоменклатурнаяГруппаТорговля));
	//	НоменклатураСтруктура.Вставить("НоменклатурнаяГруппаСклад",Получить_НоменклатурныеГруппы(Ссылка.НоменклатурнаяГруппаСклад));
	//  НоменклатураСтруктура.Вставить("НоменклатурнаяГруппаСклад",Получить_НоменклатурныеГруппы(Ссылка.НоменклатурнаяГруппа));
	//  НоменклатураСтруктура.Вставить("Комплект",Ссылка.Комплект);
	//	НоменклатураСтруктура.Вставить("КомплектуетсяСтеклом",Ссылка.КомплектуетсяСтеклом);
	//	НоменклатураСтруктура.Вставить("ВидФрезеровки",ИмяПеречисления(Ссылка.ВидФрезеровки));
	//  НоменклатураСтруктура.Вставить("ВестиУчетПоХарактеристикам",Ссылка.ВестиУчетПоХарактеристикам);
	Родитель=Новый Структура();
	НоменклатураСтруктура.Вставить("Родитель",Родитель);
	ТКРодитель=Ссылка.Родитель;
	СТРодитель=НоменклатураСтруктура.Родитель;
	Пока ЗначениеЗаполнено(ТКРодитель) Цикл
		ДобавитьОбъектВОтправленые(ТКРодитель);
		СТРодитель.Вставить("GUID",СсылкаНаОбъект(ТКРодитель));
		СТРодитель.Вставить("Код",ТКРодитель.Код);
		СТРодитель.Вставить("Наименование",ТКРодитель.Наименование);				
		ТКРодитель=ТКРодитель.Родитель;
		Если ЗначениеЗаполнено(ТКРодитель) Тогда
			Родитель=Новый Структура();
			СТРодитель.Вставить("Родитель",Родитель);
			СТРодитель=СТРодитель.Родитель;
		КонецЕсли;
	КонецЦикла;
	МЕдиницы=Новый Массив();
	Единица=Новый Структура();
	Единица.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Единица.Вставить("Код",Ссылка.Код);
	Единица.Вставить("Наименование",Ссылка.ЕдиницаИзмерения.Наименование);
	Единица.Вставить("Коэффициент",1);
	Единица.Вставить("ЕдиницаПоКлассификатору",Получить_КлассификаторЕдиницИзмерения(Ссылка.ЕдиницаИзмерения));
	//Единица.Вставить("Объем",Единицы.Объем);
	//Единица.Вставить("Вес",Единицы.Вес);
	//Единица.Вставить("Ширина",Единицы.Ширина);
	//Единица.Вставить("Высота",Единицы.Высота);
	//Единица.Вставить("Глубина",Единицы.Глубина);	
	//Единица.Вставить("Укладка",Единицы.Укладка);
	//Единица.Вставить("ВидПоддона",Получить_ВидПоддона(Единицы.ВидПоддона));
	//Единица.Вставить("ВесНетто",Единицы.ВесНетто);
	МЕдиницы.Добавить(Единица);

	Пока Единицы.Следующий() Цикл		
		 Единица=Новый Структура();
		 Единица.Вставить("GUID",СсылкаНаОбъект(Единицы.Ссылка));
		 Единица.Вставить("Код",Единицы.Код);
		 Единица.Вставить("Наименование",Единицы.Наименование);
		 //Единица.Вставить("Объем",Единицы.Объем);
		 //Единица.Вставить("Вес",Единицы.Вес);
		 Единица.Вставить("Коэффициент",Единицы.Коэффициент);
		 Единица.Вставить("ЕдиницаПоКлассификатору",Получить_КлассификаторЕдиницИзмерения(Единицы.ЕдиницаИзмеренияПоКлассификатору));
		 //Единица.Вставить("Ширина",Единицы.Ширина);
		 //Единица.Вставить("Высота",Единицы.Высота);		 
		 //Единица.Вставить("Глубина",Единицы.Глубина);		 
		 //Единица.Вставить("Укладка",Единицы.Укладка);
		 //Единица.Вставить("ВидПоддона",Получить_ВидПоддона(Единицы.ВидПоддона));		 
		 //Единица.Вставить("ВесНетто",Единицы.ВесНетто);
		 МЕдиницы.Добавить(Единица);
	КонецЦикла;
	МХарактеристики=Новый Массив(); 
	Пока Характеристики.Следующий() Цикл
		Характеристика=Новый Структура();
		Характеристика.Вставить("GUID",СсылкаНаОбъект(Характеристики.Ссылка));
		Характеристика.Вставить("Наименование",Характеристики.Наименование);
		//Характеристика.Вставить("КИСРейтинг",Характеристики.БЗ_РейтингWMS);
		//Отбор.Вставить("Объект",Характеристики.Ссылка);
		//ВыборкаСвойств=РегистрыСведений.ЗначенияСвойствОбъектов.Выбрать(Отбор);
		МСвойства=Новый Массив();
		//Пока ВыборкаСвойств.Следующий() Цикл
		//	Свойство = Новый Структура();
		//	Если ТипЗнч(ВыборкаСвойств.Значение)=Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда				
		//		Свойство.Вставить("Тип","Справочник");
		//		Свойство.Вставить("ЗначениеGUID",СсылкаНаОбъект(ВыборкаСвойств.Значение));
		//		Свойство.Вставить("ЗначениеКод",ВыборкаСвойств.Значение.Код);
		//		Свойство.Вставить("ЗначениеНаименование",ВыборкаСвойств.Значение.Наименование);
		//		Свойство.Вставить("ЗначениеАртикул",ВыборкаСвойств.Значение.Артикул);
		//		Свойство.Вставить("ЗначениеВладелецGUID",СсылкаНаОбъект(ВыборкаСвойств.Значение.Владелец));
		//	ИначеЕсли ТипЗнч(ВыборкаСвойств.Значение)=Тип("Число") Тогда
		//		Свойство.Вставить("Тип","Число");
		//		Свойство.Вставить("ТипЗнч",ЗначениеВСтрокуВнутр(ВыборкаСвойств.Свойство.ТипЗначения));
		//		Свойство.Вставить("Значение",ВыборкаСвойств.Значение);
		//	ИначеЕсли ТипЗнч(ВыборкаСвойств.Значение)=Тип("Строка") Тогда
		//		Свойство.Вставить("Тип","Строка");
		//		Свойство.Вставить("ТипЗнч",ЗначениеВСтрокуВнутр(ВыборкаСвойств.Свойство.ТипЗначения));
		//		Свойство.Вставить("Значение",ВыборкаСвойств.Значение);
		//	ИначеЕсли ТипЗнч(ВыборкаСвойств.Значение)=Тип("Дата") Тогда
		//		Свойство.Вставить("Тип","Дата");
		//		Свойство.Вставить("ТипЗнч",ЗначениеВСтрокуВнутр(ВыборкаСвойств.Свойство.ТипЗначения));
		//		Свойство.Вставить("Значение",ВыборкаСвойств.Значение);
		//	Иначе
		//		Продолжить;
		//	КонецЕсли;
		//	Свойство.Вставить("GUID",СсылкаНаОбъект(ВыборкаСвойств.Свойство));
		//	Свойство.Вставить("Код",ВыборкаСвойств.Свойство.Код);
		//	Свойство.Вставить("Наименование",ВыборкаСвойств.Свойство.Наименование);
		//	Свойство.Вставить("НазначениеСвойстваКод",ВыборкаСвойств.Свойство.НазначениеСвойства.Код);
		//	МСвойства.Добавить(Свойство);
		//КонецЦикла;		
		Характеристика.Вставить("Свойства",МСвойства);
		МХарактеристики.Добавить(Характеристика);
	КонецЦикла;
	МШтрихкоды=Новый Массив();	
	Запрос=Новый Запрос("ВЫБРАТЬ Штрихкод,ЕдиницаИзмерения,Характеристика КАК ХарактеристикаНоменклатуры ИЗ РегистрСведений.ШтрихкодыНоменклатуры ГДЕ Номенклатура=&Владелец");
	Запрос.Параметры.Вставить("Владелец",Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		Штрихкод=Новый Структура();
		Штрихкод.Вставить("Штрихкод",СокрЛП(Выборка.Штрихкод));
		Если ЗначениеЗаполнено(Выборка.ХарактеристикаНоменклатуры) Тогда
			Штрихкод.Вставить("ХарактеристикаGUID",СсылкаНаОбъект(Выборка.ХарактеристикаНоменклатуры));
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмерения) Тогда
			Штрихкод.Вставить("ЕдиницаGUID",СсылкаНаОбъект(Выборка.ЕдиницаИзмерения));
		КонецЕсли;
		МШтрихкоды.Добавить(Штрихкод);
	КонецЦикла;
	НоменклатураСтруктура.Вставить("Характеристики",МХарактеристики);
	НоменклатураСтруктура.Вставить("Единицы",МЕдиницы);
	НоменклатураСтруктура.Вставить("Штрихкоды",МШтрихкоды);
	Возврат НоменклатураСтруктура;
КонецФункции

Функция ПолучитьJSON_Номенклатура(Ссылка) Экспорт
	JSONПакет=Новый Структура();
	Если Ссылка.ЭтоГруппа Тогда
		JSONПакет.Вставить("Тип","Номенклатура_Группа");
	Иначе
		JSONПакет.Вставить("Тип","Номенклатура");
	КонецЕсли;	
	JSONПакет.Вставить("Объект",Получить_Номенклатура(Ссылка));
	JSONЗапрос=ПланыОбмена.БЗ_MES.Записать_JSON(JSONПакет);
	JSONПакет=Неопределено;
	Возврат JSONЗапрос; 
КонецФункции

// Документы
Функция Получить_ЗаказНаПроизводство(Ссылка) Экспорт
	ДобавитьОбъектВОтправленые(Ссылка);
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Номер",Ссылка.Номер);
	Данные.Вставить("Дата",Ссылка.Дата);
	Данные.Вставить("ПометкаУдаления",Ссылка.ПометкаУдаления);
	Данные.Вставить("Проведен",Ссылка.Проведен);	
	//---
	Данные.Вставить("Организация",СсылкаНаОбъект(Ссылка.Организация));
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.СтруктурнаяЕдиница));
	Данные.Вставить("Ответственный",СсылкаНаОбъект(Ссылка.Автор));
	Данные.Вставить("Комментарий",Ссылка.Комментарий);
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_РасчетРезки(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Номер",Ссылка.Номер);
	Данные.Вставить("Дата",Ссылка.Дата);
	Данные.Вставить("ПометкаУдаления",Ссылка.ПометкаУдаления);
	Данные.Вставить("Проведен",Ссылка.Проведен);
	//---	
	Данные.Вставить("Организация",СсылкаНаОбъект(Ссылка.Организация));
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("Ответственный",СсылкаНаОбъект(Ссылка.Ответственный));
	Данные.Вставить("Материал",СсылкаНаОбъект(Ссылка.Материал));
	Данные.Вставить("ХарактеристикаМатериала",СсылкаНаОбъект(Ссылка.ХарактеристикаМатериала));
	
	Данные.Вставить("Количество",Ссылка.Количество);
	Данные.Вставить("Коэффициент",Ссылка.Коэффициент);
	Данные.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Ссылка.ЕдиницаИзмерения));
	
	Данные.Вставить("РазмерX",Ссылка.РазмерX);
	Данные.Вставить("РазмерY",Ссылка.РазмерY);
	Данные.Вставить("РазмерZ",Ссылка.РазмерZ);
	
	Данные.Вставить("ВидПартии",СсылкаНаОбъект(Ссылка.ВидПартии));
	Данные.Вставить("Участок",СсылкаНаОбъект(Ссылка.Участок));
	Данные.Вставить("Операция",СсылкаНаОбъект(Ссылка.Операция));
	Данные.Вставить("ВариантНаладки",СсылкаНаОбъект(Ссылка.ВариантНаладки));
	
	Данные.Вставить("КоличествоШтук",Ссылка.КоличествоШтук);
	Данные.Вставить("КоэффициентШтук",Ссылка.КоэффициентШтук);
	Данные.Вставить("ЕдиницаИзмеренияШтук",СсылкаНаОбъект(Ссылка.ЕдиницаИзмеренияШтук));
	
	Данные.Вставить("КодМатериала",Ссылка.КодМатериала);
	Данные.Вставить("Комментарий",Ссылка.Комментарий);
	
	Данные.Вставить("Статус",ИмяПеречисления(Ссылка.Статус));
	Данные.Вставить("ДелитьПоЗНПиВидамФрезеровки",Ссылка.ДелитьПоЗНПиВидамФрезеровки);
	
	Данные.Вставить("СкладСборки",СсылкаНаОбъект(Ссылка.СкладСборки));
	
	МВыходныеИзделия=Новый Массив();
	Для Каждого Строка Из Ссылка.ВыходныеИзделия Цикл
		ВыходныеИзделия=Новый Структура();
		ВыходныеИзделия.Вставить("КлючИзделия",Строка.КлючИзделия);
		ВыходныеИзделия.Вставить("КлючСхемы",Строка.КлючСхемы);
		ВыходныеИзделия.Вставить("ЗаказНаПроизводство",СсылкаНаОбъект(Строка.ЗаказНаПроизводство));		
		ВыходныеИзделия.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		ВыходныеИзделия.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		ВыходныеИзделия.Вставить("Количество",Строка.Количество);
		ВыходныеИзделия.Вставить("Коэффициент",Строка.Коэффициент);
		ВыходныеИзделия.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Строка.ЕдиницаИзмерения));
		МВыходныеИзделия.Добавить(ВыходныеИзделия);
	КонецЦикла;
	
	МСхемаРезкиИзделий=Новый Массив();
	Для Каждого Строка Из Ссылка.СхемаРезкиИзделий Цикл
		СхемаРезкиИзделий=Новый Структура();
		СхемаРезкиИзделий.Вставить("КлючСхемы",Строка.КлючСхемы);
		СхемаРезкиИзделий.Вставить("КлючШаблона",Строка.КлючШаблона);
		СхемаРезкиИзделий.Вставить("КлючОтчета",Строка.КлючОтчета);
		СхемаРезкиИзделий.Вставить("ПорядковыйНомерСхемы",Строка.ПорядковыйНомерСхемы);
		СхемаРезкиИзделий.Вставить("Кратность",Строка.Кратность);
		СхемаРезкиИзделий.Вставить("КоличествоШтук",Строка.КоличествоШтук);
		СхемаРезкиИзделий.Вставить("ПутьКФайлуРаскладки",Строка.ПутьКФайлуРаскладки);
		СхемаРезкиИзделий.Вставить("ПутьКШаблонуРаскладки",Строка.ПутьКШаблонуРаскладки);
		СхемаРезкиИзделий.Вставить("ФайлСхемыРезки",СсылкаНаОбъект(Строка.ФайлСхемыРезки));
		СхемаРезкиИзделий.Вставить("ИмяФайлаРаскладки",Строка.ИмяФайлаРаскладки);
		СхемаРезкиИзделий.Вставить("ИмяФайлаШаблона",Строка.ИмяФайлаШаблона);
		МСхемаРезкиИзделий.Добавить(СхемаРезкиИзделий);
	КонецЦикла;
	
	МВыходныеИзделияВБуфер=Новый Массив();
	Для Каждого Строка Из Ссылка.ВыходныеИзделияВБуфер Цикл
		ВыходныеИзделияВБуфер=Новый Структура();
		ВыходныеИзделияВБуфер.Вставить("КлючИзделия",Строка.КлючИзделия);
		ВыходныеИзделияВБуфер.Вставить("КлючСхемы",Строка.КлючСхемы);
		ВыходныеИзделияВБуфер.Вставить("ЗаказНаПроизводство",СсылкаНаОбъект(Строка.ЗаказНаПроизводство));		
		ВыходныеИзделияВБуфер.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		ВыходныеИзделияВБуфер.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		ВыходныеИзделияВБуфер.Вставить("Количество",Строка.Количество);
		ВыходныеИзделияВБуфер.Вставить("Коэффициент",Строка.Коэффициент);
		ВыходныеИзделияВБуфер.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Строка.ЕдиницаИзмерения));
		ВыходныеИзделияВБуфер.Вставить("ОперацияКонечная",СсылкаНаОбъект(Строка.ОперацияКонечная));
		ВыходныеИзделияВБуфер.Вставить("УчастокКонечный",СсылкаНаОбъект(Строка.УчастокКонечный));
		МВыходныеИзделияВБуфер.Добавить(ВыходныеИзделияВБуфер);
	КонецЦикла;

	МВыходныеИзделияИзБуфера=Новый Массив();
	Для Каждого Строка Из Ссылка.ВыходныеИзделияИзБуфера Цикл
		ВыходныеИзделияИзБуфера=Новый Структура();
		ВыходныеИзделияИзБуфера.Вставить("КлючИзделия",Строка.КлючИзделия);
		ВыходныеИзделияИзБуфера.Вставить("КлючИзделияИзБуфера",Строка.КлючИзделияИзБуфера);
		ВыходныеИзделияИзБуфера.Вставить("ЗаказНаПроизводство",СсылкаНаОбъект(Строка.ЗаказНаПроизводство));		
		ВыходныеИзделияИзБуфера.Вставить("НоменклатураИзБуфера",СсылкаНаОбъект(Строка.НоменклатураИзБуфера));
		ВыходныеИзделияИзБуфера.Вставить("ХарактеристикаНоменклатурыИзБуфера",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатурыИзБуфера));
		ВыходныеИзделияИзБуфера.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		ВыходныеИзделияИзБуфера.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		ВыходныеИзделияИзБуфера.Вставить("Количество",Строка.Количество);
		ВыходныеИзделияИзБуфера.Вставить("Коэффициент",Строка.Коэффициент);
		ВыходныеИзделияИзБуфера.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Строка.ЕдиницаИзмерения));
		ВыходныеИзделияИзБуфера.Вставить("ОперацияНачальная",СсылкаНаОбъект(Строка.ОперацияНачальная));
		ВыходныеИзделияИзБуфера.Вставить("УчастокНачальный",СсылкаНаОбъект(Строка.УчастокНачальный));
		ВыходныеИзделияИзБуфера.Вставить("РабочееМесто",СсылкаНаОбъект(Строка.РабочееМесто));
		ВыходныеИзделияИзБуфера.Вставить("ТЕ",Строка.ТЕ.GUID);
		МВыходныеИзделияИзБуфера.Добавить(ВыходныеИзделияИзБуфера);
	КонецЦикла;
	
	Данные.Вставить("ВыходныеИзделия",МВыходныеИзделия);
	Данные.Вставить("СхемаРезкиИзделий",МСхемаРезкиИзделий);
	Данные.Вставить("ВыходныеИзделияВБуфер",МВыходныеИзделияВБуфер);
	Данные.Вставить("ВыходныеИзделияИзБуфера",МВыходныеИзделияИзБуфера);
	
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_МаршрутныйЛистПроизводства(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Номер",Ссылка.Номер);
	Данные.Вставить("Дата",Ссылка.Дата);
	Данные.Вставить("ПометкаУдаления",Ссылка.ПометкаУдаления);
	Данные.Вставить("Проведен",Ссылка.Проведен);
	//---	
	Данные.Вставить("Организация",СсылкаНаОбъект(Ссылка.Организация));
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("Ответственный",СсылкаНаОбъект(Ссылка.Ответственный));
	Данные.Вставить("Комментарий",Ссылка.Комментарий);	
	Данные.Вставить("СкладСборки",СсылкаНаОбъект(Ссылка.СкладСборки));
	Данные.Вставить("ВидПартии",СсылкаНаОбъект(Ссылка.ВидПартии));
	Данные.Вставить("РасчетРезки",СсылкаНаОбъект(Ссылка.РасчетРезки));
	
	МВыходныеИзделия=Новый Массив();
	Для Каждого Строка Из Ссылка.ВыходныеИзделия Цикл
		ВыходныеИзделия=Новый Структура();
		ВыходныеИзделия.Вставить("КлючИзделия",Строка.КлючИзделия);
		ВыходныеИзделия.Вставить("ЗаказНаПроизводство",СсылкаНаОбъект(Строка.ЗаказНаПроизводство));		
		ВыходныеИзделия.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		ВыходныеИзделия.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		ВыходныеИзделия.Вставить("Количество",Строка.Количество);
		ВыходныеИзделия.Вставить("Коэффициент",Строка.Коэффициент);
		ВыходныеИзделия.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Строка.ЕдиницаИзмерения));
		ВыходныеИзделия.Вставить("Кратность",Строка.Кратность);
		ВыходныеИзделия.Вставить("ОперацияНачальная",СсылкаНаОбъект(Строка.ОперацияНачальная));
		ВыходныеИзделия.Вставить("УчастокНачальный",СсылкаНаОбъект(Строка.УчастокНачальный));
		ВыходныеИзделия.Вставить("ОперацияКонечная",СсылкаНаОбъект(Строка.ОперацияКонечная));
		ВыходныеИзделия.Вставить("УчастокКонечный",СсылкаНаОбъект(Строка.УчастокКонечный));
		МВыходныеИзделия.Добавить(ВыходныеИзделия);
	КонецЦикла;
	
	МОперации=Новый Массив();
	Для Каждого Строка Из Ссылка.Операции Цикл
		Операции=Новый Структура();
		Операции.Вставить("КлючИзделия",Строка.КлючИзделия);
		Операции.Вставить("ОперацияНомер",Строка.ОперацияНомер);
		Операции.Вставить("ОперацияНомерСледующий",Строка.ОперацияНомерСледующий);
		Операции.Вставить("Операция",СсылкаНаОбъект(Строка.Операция));
		Операции.Вставить("ОперацияСледующая",СсылкаНаОбъект(Строка.ОперацияСледующая));		
		Операции.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		Операции.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		Операции.Вставить("Количество",Строка.Количество);
		Операции.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Строка.ЕдиницаИзмерения));
		Операции.Вставить("Участок",СсылкаНаОбъект(Строка.Участок));
		Операции.Вставить("УчастокСледующий",СсылкаНаОбъект(Строка.УчастокСледующий));		
		Операции.Вставить("ВариантНаладки",СсылкаНаОбъект(Строка.ВариантНаладки));
		МОперации.Добавить(Операции);
	КонецЦикла;
	
		
	МВыходныеИзделияИзБуфера=Новый Массив();
	Для Каждого Строка Из Ссылка.ВыходныеИзделияИзБуфера Цикл
		ВыходныеИзделияИзБуфера=Новый Структура();
		ВыходныеИзделияИзБуфера.Вставить("КлючИзделия",Строка.КлючИзделия);
		ВыходныеИзделияИзБуфера.Вставить("КлючИзделияИзБуфера",Строка.КлючИзделияИзБуфера);
		ВыходныеИзделияИзБуфера.Вставить("НоменклатураИзБуфера",СсылкаНаОбъект(Строка.НоменклатураИзБуфера));
		ВыходныеИзделияИзБуфера.Вставить("ХарактеристикаНоменклатурыИзБуфера",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатурыИзБуфера));
		ВыходныеИзделияИзБуфера.Вставить("Количество",Строка.Количество);
		ВыходныеИзделияИзБуфера.Вставить("Коэффициент",Строка.Коэффициент);
		ВыходныеИзделияИзБуфера.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Строка.ЕдиницаИзмерения));
		ВыходныеИзделияИзБуфера.Вставить("ОперацияНачальная",СсылкаНаОбъект(Строка.ОперацияНачальная));
		ВыходныеИзделияИзБуфера.Вставить("УчастокНачальный",СсылкаНаОбъект(Строка.УчастокНачальный));
		ВыходныеИзделияИзБуфера.Вставить("РабочееМесто",СсылкаНаОбъект(Строка.РабочееМесто));
		ВыходныеИзделияИзБуфера.Вставить("ТЕ",Строка.ТЕ.GUID);
		МВыходныеИзделияИзБуфера.Добавить(ВыходныеИзделияИзБуфера);
	КонецЦикла;	
	
	Данные.Вставить("ВыходныеИзделия",МВыходныеИзделия);
	Данные.Вставить("Операции",МОперации);
	Данные.Вставить("ВыходныеИзделияИзБуфера",МВыходныеИзделияИзБуфера);
	
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_Резка(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Номер",Ссылка.Номер);
	Данные.Вставить("Дата",Ссылка.Дата);
	Данные.Вставить("ПометкаУдаления",Ссылка.ПометкаУдаления);
	Данные.Вставить("Проведен",Ссылка.Проведен);
	//---	
	Данные.Вставить("Организация",СсылкаНаОбъект(Ссылка.Организация));
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("Ответственный",СсылкаНаОбъект(Ссылка.Ответственный));
	Данные.Вставить("Материал",СсылкаНаОбъект(Ссылка.Материал));
	Данные.Вставить("ХарактеристикаМатериала",СсылкаНаОбъект(Ссылка.ХарактеристикаМатериала));
	
	Данные.Вставить("Количество",Ссылка.Количество);
	Данные.Вставить("Коэффициент",Ссылка.Коэффициент);
	Данные.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Ссылка.ЕдиницаИзмерения));
	
	Данные.Вставить("РазмерX",Ссылка.РазмерX);
	Данные.Вставить("РазмерY",Ссылка.РазмерY);
	Данные.Вставить("РазмерZ",Ссылка.РазмерZ);
	
	Данные.Вставить("ВидПартии",СсылкаНаОбъект(Ссылка.ВидПартии));
	Данные.Вставить("Участок",СсылкаНаОбъект(Ссылка.Участок));
	Данные.Вставить("Операция",СсылкаНаОбъект(Ссылка.Операция));
	//Данные.Вставить("ВариантНаладки",СсылкаНаОбъект(Ссылка.ВариантНаладки));
	
	Данные.Вставить("КоличествоШтук",Ссылка.КоличествоШтук);
	Данные.Вставить("КоэффициентШтук",Ссылка.КоэффициентШтук);
	Данные.Вставить("ЕдиницаИзмеренияШтук",СсылкаНаОбъект(Ссылка.ЕдиницаИзмеренияШтук));
	
	Данные.Вставить("КодМатериала",Ссылка.КодМатериала);
	Данные.Вставить("Комментарий",Ссылка.Комментарий);
	
	Данные.Вставить("МаршрутныйЛист",СсылкаНаОбъект(Ссылка.МаршрутныйЛист));
	Данные.Вставить("РасчетРезки",СсылкаНаОбъект(Ссылка.РасчетРезки));
	
	Данные.Вставить("ДелитьПоЗНПиВидамФрезеровки",Ссылка.ДелитьПоЗНПиВидамФрезеровки);	
	
	МВыходныеИзделия=Новый Массив();
	Для Каждого Строка Из Ссылка.ВыходныеИзделия Цикл
		ВыходныеИзделия=Новый Структура();
		ВыходныеИзделия.Вставить("КлючИзделия",Строка.КлючИзделия);
		ВыходныеИзделия.Вставить("КлючСхемы",Строка.КлючСхемы);
		ВыходныеИзделия.Вставить("ЗаказНаПроизводство",СсылкаНаОбъект(Строка.ЗаказНаПроизводство));		
		ВыходныеИзделия.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		ВыходныеИзделия.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		ВыходныеИзделия.Вставить("Количество",Строка.Количество);
		ВыходныеИзделия.Вставить("Коэффициент",Строка.Коэффициент);
		ВыходныеИзделия.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Строка.ЕдиницаИзмерения));
		МВыходныеИзделия.Добавить(ВыходныеИзделия);
	КонецЦикла;
	
	МРасходМатериала=Новый Массив();
	Для Каждого Строка Из Ссылка.РасходМатериала Цикл
		РасходМатериала=Новый Структура();
		РасходМатериала.Вставить("КлючИзделия",Строка.КлючИзделия);
		РасходМатериала.Вставить("КлючСхемы",Строка.КлючСхемы);
		РасходМатериала.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		РасходМатериала.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		РасходМатериала.Вставить("Количество",Строка.Количество);
		РасходМатериала.Вставить("Коэффициент",Строка.Коэффициент);
		РасходМатериала.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Строка.ЕдиницаИзмерения));
		МРасходМатериала.Добавить(РасходМатериала);
	КонецЦикла;
	
	МСхемаРезкиИзделий=Новый Массив();
	Для Каждого Строка Из Ссылка.СхемаРезкиИзделий Цикл
		СхемаРезкиИзделий=Новый Структура();
		СхемаРезкиИзделий.Вставить("КлючСхемы",Строка.КлючСхемы);
		СхемаРезкиИзделий.Вставить("КлючШаблона",Строка.КлючШаблона);
		СхемаРезкиИзделий.Вставить("ПорядковыйНомерСхемы",Строка.ПорядковыйНомерСхемы);
		СхемаРезкиИзделий.Вставить("КоличествоШтук",Строка.КоличествоШтук);
		СхемаРезкиИзделий.Вставить("Кратность",Строка.Кратность);		
		СхемаРезкиИзделий.Вставить("ПутьКФайлуРаскладки",Строка.ПутьКФайлуРаскладки);
		СхемаРезкиИзделий.Вставить("ФайлСхемыРезки",СсылкаНаОбъект(Строка.ФайлСхемыРезки));		
		СхемаРезкиИзделий.Вставить("ИмяФайлаРаскладки",Строка.ИмяФайлаРаскладки);		
		МСхемаРезкиИзделий.Добавить(СхемаРезкиИзделий);
	КонецЦикла;
	
	Данные.Вставить("ВыходныеИзделия",МВыходныеИзделия);	
	Данные.Вставить("РасходМатериала",МРасходМатериала);
	Данные.Вставить("СхемаРезкиИзделий",МСхемаРезкиИзделий);
	
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_ШаблонТехнологическогоПроцесса(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Номер",Ссылка.Номер);
	Данные.Вставить("Дата",Ссылка.Дата);
	Данные.Вставить("ПометкаУдаления",Ссылка.ПометкаУдаления);
	Данные.Вставить("Проведен",Ссылка.Проведен);
	//---	
	Данные.Вставить("ДатаВступления",Ссылка.ДатаВступления);
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("НоменклатурнаяГруппаПроизводство",СсылкаНаОбъект(Ссылка.НоменклатурнаяГруппаПроизводство));
	Данные.Вставить("Ответственный",СсылкаНаОбъект(Ссылка.Ответственный));
	Данные.Вставить("ВидПартии",СсылкаНаОбъект(Ссылка.ВидПартии));
	Данные.Вставить("Комментарий",Ссылка.Комментарий);
	
	МВыходныеИзделия=Новый Массив();
	Для Каждого Строка Из Ссылка.ВыходныеИзделия Цикл
		ВыходныеИзделия=Новый Структура();
		ВыходныеИзделия.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		ВыходныеИзделия.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		ВыходныеИзделия.Вставить("Цвет",Получить_Свойство(Строка.Цвет));
		ВыходныеИзделия.Вставить("РазмерX",Строка.РазмерX);
		ВыходныеИзделия.Вставить("РазмерY",Строка.РазмерY);
		ВыходныеИзделия.Вставить("РазмерZ",Строка.РазмерZ);
		ВыходныеИзделия.Вставить("ТипИзделия",Строка.ТипИзделия);
		ВыходныеИзделия.Вставить("ВидФасада",ИмяПеречисления(Строка.ВидФасада));
		ВыходныеИзделия.Вставить("Сборка",Строка.Сборка);
		ВыходныеИзделия.Вставить("Хрупкое",Строка.Хрупкое);
		ВыходныеИзделия.Вставить("ВидПоддона",СсылкаНаОбъект(Строка.ВидПоддона));
		ВыходныеИзделия.Вставить("НоменклатурнаяГруппаТорговля",СсылкаНаОбъект(Строка.НоменклатурнаяГруппаТорговля));
		МВыходныеИзделия.Добавить(ВыходныеИзделия);
	КонецЦикла;
	
	МОперации=Новый Массив();
	Для Каждого Строка Из Ссылка.Операции Цикл
		Операции=Новый Структура();
		Операции.Вставить("ОперацияНомер",Строка.ОперацияНомер);
		Операции.Вставить("ОперацияНомерСледующий",Строка.ОперацияНомерСледующий);
		Операции.Вставить("Операция",СсылкаНаОбъект(Строка.Операция));
		Операции.Вставить("Участок",СсылкаНаОбъект(Строка.Участок));
		Операции.Вставить("ВариантНаладки",СсылкаНаОбъект(Строка.ВариантНаладки));
		Операции.Вставить("МожноПропустить",Строка.МожноПропустить);
		Операции.Вставить("Количество",Строка.Количество);
		Операции.Вставить("БазоваяЕдиницаИзмерения",СсылкаНаОбъект(Строка.БазоваяЕдиницаИзмерения));
		МОперации.Добавить(Операции);
	КонецЦикла;
	
	Данные.Вставить("ВыходныеИзделия",МВыходныеИзделия);	
	Данные.Вставить("Операции",МОперации);
	
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_ШаблонВыходныхТиповТЕ(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Номер",Ссылка.Номер);
	Данные.Вставить("Дата",Ссылка.Дата);
	Данные.Вставить("ПометкаУдаления",Ссылка.ПометкаУдаления);
	Данные.Вставить("Проведен",Ссылка.Проведен);
	//---	
	Данные.Вставить("ДатаВступления",Ссылка.ДатаВступления);
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("НоменклатурнаяГруппаПроизводство",СсылкаНаОбъект(Ссылка.НоменклатурнаяГруппаПроизводство));
	Данные.Вставить("Ответственный",СсылкаНаОбъект(Ссылка.Ответственный));
	Данные.Вставить("ВидПартии",СсылкаНаОбъект(Ссылка.ВидПартии));
	Данные.Вставить("Комментарий",Ссылка.Комментарий);
	Данные.Вставить("ОтменитьДругиеТипыТЕ",Ссылка.ОтменитьДругиеТипыТЕ);
	Данные.Вставить("ВсеХарактеристики",Ссылка.ВсеХарактеристики);
	
	МВыходныеИзделия=Новый Массив();
	Для Каждого Строка Из Ссылка.ВыходныеИзделия Цикл
		ВыходныеИзделия=Новый Структура();
		ВыходныеИзделия.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		ВыходныеИзделия.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		ВыходныеИзделия.Вставить("Цвет",Получить_Свойство(Строка.Цвет));
		ВыходныеИзделия.Вставить("РазмерX",Строка.РазмерX);
		ВыходныеИзделия.Вставить("РазмерY",Строка.РазмерY);
		ВыходныеИзделия.Вставить("РазмерZ",Строка.РазмерZ);
		ВыходныеИзделия.Вставить("ВидФасада",ИмяПеречисления(Строка.ВидФасада));
		ВыходныеИзделия.Вставить("Сборка",Строка.Сборка);
		ВыходныеИзделия.Вставить("Хрупкое",Строка.Хрупкое);
		ВыходныеИзделия.Вставить("ВидПоддона",СсылкаНаОбъект(Строка.ВидПоддона));
		ВыходныеИзделия.Вставить("НоменклатурнаяГруппаТорговля",СсылкаНаОбъект(Строка.НоменклатурнаяГруппаТорговля));
		МВыходныеИзделия.Добавить(ВыходныеИзделия);
	КонецЦикла;
	
	МВыходныеТипыТЕ=Новый Массив();
	Для Каждого Строка Из Ссылка.ВыходныеТипыТЕ Цикл
		ВыходныеТипыТЕ=Новый Структура();
		ВыходныеТипыТЕ.Вставить("Операция",СсылкаНаОбъект(Строка.Операция));
		ВыходныеТипыТЕ.Вставить("Участок",СсылкаНаОбъект(Строка.Участок));
		ВыходныеТипыТЕ.Вставить("Приоритет",Строка.Приоритет);
		ВыходныеТипыТЕ.Вставить("ТипТЕ",СсылкаНаОбъект(Строка.ТипТЕ));
		ВыходныеТипыТЕ.Вставить("УсловиеПрименения",Строка.УсловиеПрименения);
		МВыходныеТипыТЕ.Добавить(ВыходныеТипыТЕ);
	КонецЦикла;

	Данные.Вставить("ВыходныеИзделия",МВыходныеИзделия);	
	Данные.Вставить("ВыходныеТипыТЕ",МВыходныеТипыТЕ);
	
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_ТехнологическаяОперация(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Номер",Ссылка.Номер);
	Данные.Вставить("Дата",Ссылка.Дата);
	Данные.Вставить("ПометкаУдаления",Ссылка.ПометкаУдаления);
	Данные.Вставить("Проведен",Ссылка.Проведен);
	//---	
	Данные.Вставить("Организация",СсылкаНаОбъект(Ссылка.Организация));
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("Участок",СсылкаНаОбъект(Ссылка.Участок));
	Данные.Вставить("ВидОперации",ИмяПеречисления(Ссылка.ВидОперации));
	Данные.Вставить("Статус",ИмяПеречисления(Ссылка.Статус));
	
	Данные.Вставить("ЗаказНаПроизводство",СсылкаНаОбъект(Ссылка.ЗаказНаПроизводство));
	Данные.Вставить("Комментарий",Ссылка.Комментарий);
	
	МТСД_Взять=Новый Массив();
	Для Каждого Строка Из Ссылка.ТСД_Взять Цикл
		ТСД_Взять=Новый Структура();
		Если ТипЗнч(Строка.ДокументПлан)=Тип("ДокументСсылка.БЗ_Резка") Тогда
			ТСД_Взять.Вставить("ДокументПланТип","БЗ_Резка");
		ИначеЕсли ТипЗнч(Строка.ДокументПлан)=Тип("ДокументСсылка.БЗ_МаршрутныйЛистПроизводства") Тогда
			ТСД_Взять.Вставить("ДокументПланТип","БЗ_МаршрутныйЛистПроизводства");
		Иначе
			ТСД_Взять.Вставить("ДокументПланТип","");
		КонецЕсли;
		ТСД_Взять.Вставить("ДокументПлан",СсылкаНаОбъект(Строка.ДокументПлан));
		ТСД_Взять.Вставить("КлючВзять",Строка.КлючВзять);
		ТСД_Взять.Вставить("КлючПоложить",Строка.КлючПоложить);
		ТСД_Взять.Вставить("ТЕ",Строка.ТЕ.GUID);
		ТСД_Взять.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		ТСД_Взять.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		ТСД_Взять.Вставить("Количество",Строка.Количество);
		ТСД_Взять.Вставить("Кратность",Строка.Кратность);
		ТСД_Взять.Вставить("Участок",СсылкаНаОбъект(Строка.Участок));
		ТСД_Взять.Вставить("РабочееМесто",СсылкаНаОбъект(Строка.РабочееМесто));
		ТСД_Взять.Вставить("Операция",СсылкаНаОбъект(Строка.Операция));
		ТСД_Взять.Вставить("Сотрудник",СсылкаНаОбъект(Строка.Сотрудник));
		ТСД_Взять.Вставить("ВремяОперации",Строка.ВремяОперации);
		ТСД_Взять.Вставить("ТипДвиженияТСД",СсылкаНаОбъект(Строка.ТипДвиженияТСД));
		МТСД_Взять.Добавить(ТСД_Взять);
	КонецЦикла;
	
	МТСД_Положить=Новый Массив();
	Для Каждого Строка Из Ссылка.ТСД_Положить Цикл
		ТСД_Положить=Новый Структура();
		Если ТипЗнч(Строка.ДокументПлан)=Тип("ДокументСсылка.БЗ_Резка") Тогда
			ТСД_Положить.Вставить("ДокументПланТип","БЗ_Резка");
		ИначеЕсли ТипЗнч(Строка.ДокументПлан)=Тип("ДокументСсылка.БЗ_МаршрутныйЛистПроизводства") Тогда
			ТСД_Положить.Вставить("ДокументПланТип","БЗ_МаршрутныйЛистПроизводства");
		Иначе
			ТСД_Положить.Вставить("ДокументПланТип","");
		КонецЕсли;
		ТСД_Положить.Вставить("ДокументПлан",СсылкаНаОбъект(Строка.ДокументПлан));
		ТСД_Положить.Вставить("КлючВзять",Строка.КлючВзять);
		ТСД_Положить.Вставить("КлючПоложить",Строка.КлючПоложить);
		ТСД_Положить.Вставить("ТЕ",Строка.ТЕ.GUID);
		ТСД_Положить.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		ТСД_Положить.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		ТСД_Положить.Вставить("Количество",Строка.Количество);
		ТСД_Положить.Вставить("Кратность",Строка.Кратность);
		ТСД_Положить.Вставить("Участок",СсылкаНаОбъект(Строка.Участок));
		ТСД_Положить.Вставить("РабочееМесто",СсылкаНаОбъект(Строка.РабочееМесто));
		ТСД_Положить.Вставить("Операция",СсылкаНаОбъект(Строка.Операция));
		ТСД_Положить.Вставить("Сотрудник",СсылкаНаОбъект(Строка.Сотрудник));
		ТСД_Положить.Вставить("ВремяОперации",Строка.ВремяОперации);
		ТСД_Положить.Вставить("ТипДвиженияТСД",СсылкаНаОбъект(Строка.ТипДвиженияТСД));
		МТСД_Положить.Добавить(ТСД_Положить);
	КонецЦикла;
	
	Данные.Вставить("ТСД_Взять",МТСД_Взять);
	Данные.Вставить("ТСД_Положить",МТСД_Положить);
	
	Возврат Данные;
КонецФункции

Функция Получить_БЗ_СменноеЗадание(Ссылка) Экспорт
	Данные=Новый Структура();
	Данные.Вставить("GUID",СсылкаНаОбъект(Ссылка));
	Данные.Вставить("Номер",Ссылка.Номер);
	Данные.Вставить("Дата",Ссылка.Дата);
	Данные.Вставить("ПометкаУдаления",Ссылка.ПометкаУдаления);
	Данные.Вставить("Проведен",Ссылка.Проведен);
	//---	
	Данные.Вставить("Организация",СсылкаНаОбъект(Ссылка.Организация));
	Данные.Вставить("Подразделение",СсылкаНаОбъект(Ссылка.Подразделение));
	Данные.Вставить("Ответственный",СсылкаНаОбъект(Ссылка.Ответственный));
	Данные.Вставить("Участок",СсылкаНаОбъект(Ссылка.Участок));
	Данные.Вставить("Операция",СсылкаНаОбъект(Ссылка.Операция));
	
	Данные.Вставить("Комментарий",Ссылка.Комментарий);
	
	Данные.Вставить("НачалоПериода",Ссылка.НачалоПериода);
	Данные.Вставить("КонецПериода",Ссылка.КонецПериода);
	
	Данные.Вставить("МашиночасовВСмене",Ссылка.МашиночасовВСмене);
	Данные.Вставить("ПланМашиночасовНаСмену",Ссылка.ПланМашиночасовНаСмену);
	Данные.Вставить("ПланВремяНаШлифовку",Ссылка.ПланВремяНаШлифовку);
	Данные.Вставить("ПланВремяНаЗаменуЛиста",Ссылка.ПланВремяНаЗаменуЛиста);
	
	МВыходныеИзделия=Новый Массив();
	Для Каждого Строка Из Ссылка.ВыходныеИзделия Цикл
		ВыходныеИзделия=Новый Структура();
		ВыходныеИзделия.Вставить("ВРаботу",Строка.ВРаботу);
		ВыходныеИзделия.Вставить("КлючИзделия",Строка.КлючИзделия);
		ВыходныеИзделия.Вставить("КлючСхемы",Строка.КлючСхемы);
		ВыходныеИзделия.Вставить("ЗаказНаПроизводство",СсылкаНаОбъект(Строка.ЗаказНаПроизводство));		
		ВыходныеИзделия.Вставить("Номенклатура",СсылкаНаОбъект(Строка.Номенклатура));
		ВыходныеИзделия.Вставить("ХарактеристикаНоменклатуры",СсылкаНаОбъект(Строка.ХарактеристикаНоменклатуры));
		ВыходныеИзделия.Вставить("Количество",Строка.Количество);
		ВыходныеИзделия.Вставить("Коэффициент",Строка.Коэффициент);
		ВыходныеИзделия.Вставить("ПлощадьИзделий",Строка.ПлощадьИзделий);
		ВыходныеИзделия.Вставить("ПлановоеВремяОбработки",Строка.ПлановоеВремяОбработки);
		ВыходныеИзделия.Вставить("ЕдиницаИзмерения",СсылкаНаОбъект(Строка.ЕдиницаИзмерения));
		//ВыходныеИзделия.Вставить("МаршрутнаяКарта",СсылкаНаОбъект(Строка.МаршрутнаяКарта));
		ВыходныеИзделия.Вставить("ПорядокОчереди",Строка.ПорядокОчереди);
		ВыходныеИзделия.Вставить("ПорядокПартии",Строка.ПорядокПартии);
		ВыходныеИзделия.Вставить("ПорядокВнутриПартии",Строка.ПорядокВнутриПартии);
		ВыходныеИзделия.Вставить("ДатаНачалаРабот",Строка.ДатаНачалаРабот);
		МВыходныеИзделия.Добавить(ВыходныеИзделия);
	КонецЦикла;
	
	МСхемаРезкиИзделий=Новый Массив();
	Для Каждого Строка Из Ссылка.СхемаРезкиИзделий Цикл
		СхемаРезкиИзделий=Новый Структура();
		СхемаРезкиИзделий.Вставить("ВРаботу",Строка.ВРаботу);		
		СхемаРезкиИзделий.Вставить("КлючСхемы",Строка.КлючСхемы);
		СхемаРезкиИзделий.Вставить("КоличествоЛистов",Строка.КоличествоЛистов);
		СхемаРезкиИзделий.Вставить("КоличествоИзделий",Строка.КоличествоИзделий);
		СхемаРезкиИзделий.Вставить("ФайлСхемыРезки",СсылкаНаОбъект(Строка.ФайлСхемыРезки));
		СхемаРезкиИзделий.Вставить("Стандартный",Строка.Стандартный);
		СхемаРезкиИзделий.Вставить("ПлощадьЛистов",Строка.ПлощадьЛистов);
		СхемаРезкиИзделий.Вставить("ПлощадьИзделий",Строка.ПлощадьИзделий);
		СхемаРезкиИзделий.Вставить("ПроцентОтходов",Строка.ПроцентОтходов);
		СхемаРезкиИзделий.Вставить("ПлановоеВремяОбработки",Строка.ПлановоеВремяОбработки);
		СхемаРезкиИзделий.Вставить("ВидФрезеровки",ИмяПеречисления(Строка.ВидФрезеровки));		
		СхемаРезкиИзделий.Вставить("ПорядокОчереди",Строка.ПорядокОчереди);
		СхемаРезкиИзделий.Вставить("ПорядокПартии",Строка.ПорядокПартии);
		СхемаРезкиИзделий.Вставить("ПорядокВнутриПартии",Строка.ПорядокВнутриПартии);
		СхемаРезкиИзделий.Вставить("ДатаНачалаРабот",Строка.ДатаНачалаРабот);
		МСхемаРезкиИзделий.Добавить(СхемаРезкиИзделий);
	КонецЦикла;
	
	Данные.Вставить("ВыходныеИзделия",МВыходныеИзделия);	
	Данные.Вставить("СхемаРезкиИзделий",МСхемаРезкиИзделий);
	
	Возврат Данные;
КонецФункции

// ----- Импорт данных ----

Процедура Сравнить(ВБазе,Получено,Изменения)
	СВБазе=ВБазе;
	СПолучено=Получено;
	Если НЕ ЗначениеЗаполнено(ВБазе) Тогда СВБазе=Неопределено; КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Получено) Тогда СПолучено=Неопределено КонецЕсли;
	Если СВБазе<>СПолучено Тогда
		ВБазе=Получено;
		Изменения=Истина;
	КонецЕсли;
КонецПроцедуры

Функция   СправочникСсылка(Метаданные,GUID)
	Если GUID="" Тогда
		Возврат Справочники[Метаданные].ПустаяСсылка();
	КонецЕсли;
	Если Метаданные="БЗ_ТЕ" Тогда
		Запрос=Новый Запрос("ВЫБРАТЬ "+Метаданные+".Ссылка ИЗ Справочник."+Метаданные+" КАК "+Метаданные+" ГДЕ	"+Метаданные+".УзелОбмена = &УзелОбмена И "+Метаданные+".GUID = &GUID");
		Запрос.УстановитьПараметр("УзелОбмена",Ссылка);
		Запрос.УстановитьПараметр("GUID",GUID);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Справочники[Метаданные].ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Если Метаданные="БЗ_ТипыДвижений_ТСД" Тогда
		НСсылка=Справочники.БЗ_ТипыДвижений_ТСД.НайтиПоКоду(GUID);
		Если ЗначениеЗаполнено(НСсылка) Тогда
			Возврат НСсылка;
		Иначе
			Возврат Справочники[Метаданные].ПустаяСсылка();
		КонецЕсли;
		Возврат НСсылка;
	КонецЕсли;
	Если Метаданные="БЗ_ВидыПартииПроизводства" Тогда
		НСсылка=Справочники.БЗ_ВидыПартииПроизводства.НайтиПоКоду(GUID);
		Если ЗначениеЗаполнено(НСсылка) Тогда
			Возврат НСсылка;
		Иначе
			Возврат Справочники[Метаданные].ПустаяСсылка();
		КонецЕсли;
		Возврат НСсылка;
	КонецЕсли;	
	Попытка		
		НСсылка=Справочники[Метаданные].ПолучитьСсылку(Новый УникальныйИдентификатор(GUID)).ПолучитьОбъект().Ссылка;
	Исключение
		НСсылка=Справочники[Метаданные].ПустаяСсылка();
	КонецПопытки;		
	Возврат НСсылка;
КонецФункции

Функция   ДокументСсылка(Метаданные,GUID)
	Если GUID="" Тогда
		Возврат Документы[Метаданные].ПустаяСсылка();
	КонецЕсли;
	Если Метаданные="БЗ_ТехнологическаяОперация" Тогда
		Запрос=Новый Запрос("ВЫБРАТЬ "+Метаданные+".Ссылка ИЗ Документ."+Метаданные+" КАК "+Метаданные+" ГДЕ	"+Метаданные+".УзелОбмена = &УзелОбмена И "+Метаданные+".GUID = &GUID");
		Запрос.УстановитьПараметр("УзелОбмена",Ссылка);
		Запрос.УстановитьПараметр("GUID",GUID);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Документы[Метаданные].ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;	
	Попытка
		НСсылка=Документы[Метаданные].ПолучитьСсылку(Новый УникальныйИдентификатор(GUID)).ПолучитьОбъект().Ссылка;
	Исключение
		НСсылка=Документы[Метаданные].ПустаяСсылка();
	КонецПопытки;
	Возврат НСсылка	
КонецФункции

Функция   ЗаписатьСправочник(Объект,Изменения)
	Если Изменения Тогда Объект.Записать();	КонецЕсли;
	Возврат Объект.Ссылка;	
КонецФункции

Функция   ЗаписатьДокумент(Объект,Проведен,Изменения)
	Если Изменения Тогда
		Попытка
			Если Проведен Тогда
				Объект.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
			Иначе
				Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Объект.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
		Исключение			
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
	КонецЕсли;
	Возврат Объект.Ссылка;	
КонецФункции

Функция   НайтиСоздатьБЗ_ТЕ(Данные) Экспорт
	Если ТипЗнч(Данные)<>Тип("Структура") Тогда Возврат СправочникСсылка("БЗ_ТЕ", Данные); КонецЕсли;
	Если Данные.GUID="" Тогда
		Возврат Справочники.БЗ_ТЕ.ПустаяСсылка();
	КонецЕсли;
	Изменения=Ложь;
	Запрос=Новый Запрос("ВЫБРАТЬ БЗ_ТЕ.Ссылка ИЗ Справочник.БЗ_ТЕ КАК БЗ_ТЕ ГДЕ	БЗ_ТЕ.УзелОбмена = &УзелОбмена И БЗ_ТЕ.GUID = &GUID");
	Запрос.УстановитьПараметр("УзелОбмена",Ссылка);
	Запрос.УстановитьПараметр("GUID",Данные.GUID);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект=Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Объект=Справочники.БЗ_ТЕ.СоздатьЭлемент();
		Объект.УзелОбмена=Ссылка;
		Объект.GUID=Данные.GUID;
		Изменения=Истина;
	КонецЕсли;
	
	Данные.Подразделение=СправочникСсылка("Подразделения",Данные.Подразделение);
	Данные.ТипТЕ=СправочникСсылка("БЗ_ТипыТЕ",Данные.ТипТЕ);
	
	Сравнить(Объект.Наименование,			Данные.Наименование,	Изменения);
	Сравнить(Объект.Период,					Данные.Период,			Изменения);
	Сравнить(Объект.Номер,					Данные.Номер,			Изменения);
	Сравнить(Объект.Подразделение,			Данные.Подразделение,	Изменения);
	Сравнить(Объект.ТипТЕ,					Данные.ТипТЕ,			Изменения);
	Сравнить(Объект.Использована,			Данные.Использована,	Изменения);
	Сравнить(Объект.ДатаСоздания,			Данные.ДатаСоздания,	Изменения);	
	Возврат ЗаписатьСправочник(Объект,Изменения);
КонецФункции

Функция   НайтиСоздатьБЗ_ТехнологическаяОперация(Данные) Экспорт
	Если ТипЗнч(Данные)<>Тип("Структура") Тогда Возврат ДокументСсылка("БЗ_ТехнологическаяОперация", Данные); КонецЕсли;
	Если Данные.GUID="" Тогда
		Возврат Документы.БЗ_ТехнологическаяОперация.ПустаяСсылка();
	КонецЕсли;	
	Изменения=Ложь;
	
	Если Данные.Импортирована Тогда
		Попытка
			НСсылка=Документы.БЗ_ТехнологическаяОперация.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.GUID)).ПолучитьОбъект().Ссылка;
			Объект=НСсылка.ПолучитьОбъект();
		Исключение
			Объект=Документы.БЗ_ТехнологическаяОперация.СоздатьДокумент();
			Объект.УстановитьСсылкуНового(Документы.БЗ_ТехнологическаяОперация.ПолучитьСсылку(Новый УникальныйИдентификатор(Данные.GUID)));
			Изменения=Истина;
		КонецПопытки;
	Иначе
		Запрос=Новый Запрос("ВЫБРАТЬ БЗ_ТехнологическаяОперация.Ссылка ИЗ Документ.БЗ_ТехнологическаяОперация КАК БЗ_ТехнологическаяОперация ГДЕ БЗ_ТехнологическаяОперация.УзелОбмена = &УзелОбмена И БЗ_ТехнологическаяОперация.GUID = &GUID");
		Запрос.УстановитьПараметр("УзелОбмена",Ссылка);
		Запрос.УстановитьПараметр("GUID",Данные.GUID);
		Выборка=Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Объект=Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			Объект=Документы.БЗ_ТехнологическаяОперация.СоздатьДокумент();
			Объект.УзелОбмена=Ссылка;
			Объект.GUID=Данные.GUID;
			Изменения=Истина;
		КонецЕсли;
	КонецЕсли;
	
	Данные.Организация=СправочникСсылка("Организации",Данные.Организация);
	Данные.Подразделение=СправочникСсылка("Подразделения",Данные.Подразделение);
	Данные.Участок=СправочникСсылка("БЗ_Участки",Данные.Участок);	
	Если Данные.ВидОперации="" Тогда
		Данные.ВидОперации=Перечисления.БЗ_ВидТехнологическойОперации.ПустаяСсылка();
	Иначе
		Данные.ВидОперации=Перечисления.БЗ_ВидТехнологическойОперации[Данные.ВидОперации];
	КонецЕсли;
	
	Если Данные.Статус="" Тогда
		Данные.Статус=Перечисления.БЗ_СтатусыТехнологическихОпераций.ПустаяСсылка();
	Иначе
		Данные.Статус=Перечисления.БЗ_СтатусыТехнологическихОпераций[Данные.Статус];
	КонецЕсли;
	Данные.ЗаказНаПроизводство=ДокументСсылка("ЗаказНаПроизводство",Данные.ЗаказНаПроизводство);
	
	Сравнить(Объект.Номер, 					Данные.Номер,					Изменения);
	Сравнить(Объект.Дата, 					Данные.Дата, 					Изменения);
	Сравнить(Объект.ПометкаУдаления, 		Данные.ПометкаУдаления,			Изменения);	
	Сравнить(Объект.Организация, 			Данные.Организация, 			Изменения);
	Сравнить(Объект.Подразделение, 			Данные.Подразделение, 			Изменения);
	Сравнить(Объект.Участок, 				Данные.Участок, 				Изменения);
	Сравнить(Объект.ЗаказНаПроизводство, 	Данные.ЗаказНаПроизводство, 	Изменения);
	
	Сравнить(Объект.Статус, 				Данные.Статус, 					Изменения);
	Сравнить(Объект.ВидОперации, 			Данные.ВидОперации, 			Изменения);
	
// -- ТСД_Взять
	Если Объект.ТСД_Взять.Количество()<>Данные.ТСД_Взять.Количество() Тогда
		Проверять=Ложь;
		Объект.ТСД_Взять.Очистить();
		Изменения=Истина;
	Иначе
		Проверять=Истина;
	КонецЕсли;
	НСтроки=0;
	Для Каждого ДСтрока Из Данные.ТСД_Взять Цикл
		Если ДСтрока.ДокументПланТип="БЗ_Резка" Тогда
			ДСтрока.ДокументПлан=ДокументСсылка("БЗ_Резка",ДСтрока.ДокументПлан);
		ИначеЕсли ДСтрока.ДокументПланТип="БЗ_МаршрутныйЛистПроизводства" Тогда
			ДСтрока.ДокументПлан=ДокументСсылка("БЗ_МаршрутныйЛистПроизводства",ДСтрока.ДокументПлан);
		КонецЕсли;
		ДСтрока.ТЕ=СправочникСсылка("БЗ_ТЕ",ДСтрока.ТЕ);
		ДСтрока.Номенклатура=СправочникСсылка("Номенклатура",ДСтрока.Номенклатура);
		ДСтрока.ХарактеристикаНоменклатуры=СправочникСсылка("ХарактеристикиНоменклатуры",ДСтрока.ХарактеристикаНоменклатуры);
		ДСтрока.Участок=СправочникСсылка("БЗ_Участки",ДСтрока.Участок);
		ДСтрока.РабочееМесто=СправочникСсылка("БЗ_РабочиеМеста",ДСтрока.РабочееМесто);
		ДСтрока.Операция=СправочникСсылка("БЗ_ТехнологическиеОперации",ДСтрока.Операция);
		ДСтрока.Сотрудник=СправочникСсылка("БЗ_Сотрудники_ТСД",ДСтрока.Сотрудник);
		ДСтрока.ТипДвиженияТСД=СправочникСсылка("БЗ_ТипыДвижений_ТСД",ДСтрока.ТипДвиженияТСД);
		Если Проверять Тогда			
			Строка=Объект.ТСД_Взять[НСтроки];
			Сравнить(Строка.ДокументПлан, 				ДСтрока.ДокументПлан,				Изменения);
			Сравнить(Строка.КлючВзять, 					ДСтрока.КлючВзять,					Изменения);
			Сравнить(Строка.КлючПоложить, 				ДСтрока.КлючПоложить,				Изменения);
			Сравнить(Строка.ТЕ, 						ДСтрока.ТЕ,							Изменения);
			Сравнить(Строка.Номенклатура, 				ДСтрока.Номенклатура,				Изменения);
			Сравнить(Строка.ХарактеристикаНоменклатуры, ДСтрока.ХарактеристикаНоменклатуры,	Изменения);
			Сравнить(Строка.Количество, 				ДСтрока.Количество,					Изменения);
			Сравнить(Строка.Кратность, 					ДСтрока.Кратность,					Изменения);
			Сравнить(Строка.Участок,					ДСтрока.Участок,					Изменения);
			Сравнить(Строка.РабочееМесто,				ДСтрока.РабочееМесто,				Изменения);
			Сравнить(Строка.Операция,					ДСтрока.Операция,					Изменения);
			Сравнить(Строка.Сотрудник,					ДСтрока.Сотрудник,					Изменения);
			Сравнить(Строка.ВремяОперации,				ДСтрока.ВремяОперации,				Изменения);
			Сравнить(Строка.ТипДвиженияТСД,				ДСтрока.ТипДвиженияТСД,				Изменения);
		Иначе
			Строка=Объект.ТСД_Взять.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,ДСтрока);
		КонецЕсли;
		НСтроки=НСтроки+1;
	КонецЦикла;
	
// -- ТСД_Положить
	Если Объект.ТСД_Положить.Количество()<>Данные.ТСД_Положить.Количество() Тогда
		Проверять=Ложь;
		Объект.ТСД_Положить.Очистить();
		Изменения=Истина;
	Иначе
		Проверять=Истина;
	КонецЕсли;
	НСтроки=0;
	Для Каждого ДСтрока Из Данные.ТСД_Положить Цикл
		Если ДСтрока.ДокументПланТип="БЗ_Резка" Тогда
			ДСтрока.ДокументПлан=ДокументСсылка("БЗ_Резка",ДСтрока.ДокументПлан);
		ИначеЕсли ДСтрока.ДокументПланТип="БЗ_МаршрутныйЛистПроизводства" Тогда
			ДСтрока.ДокументПлан=ДокументСсылка("БЗ_МаршрутныйЛистПроизводства",ДСтрока.ДокументПлан);
		КонецЕсли;
		ДСтрока.ТЕ=СправочникСсылка("БЗ_ТЕ",ДСтрока.ТЕ);
		ДСтрока.Номенклатура=СправочникСсылка("Номенклатура",ДСтрока.Номенклатура);
		ДСтрока.ХарактеристикаНоменклатуры=СправочникСсылка("ХарактеристикиНоменклатуры",ДСтрока.ХарактеристикаНоменклатуры);
		ДСтрока.Участок=СправочникСсылка("БЗ_Участки",ДСтрока.Участок);
		ДСтрока.РабочееМесто=СправочникСсылка("БЗ_РабочиеМеста",ДСтрока.РабочееМесто);
		ДСтрока.Операция=СправочникСсылка("БЗ_ТехнологическиеОперации",ДСтрока.Операция);
		ДСтрока.Сотрудник=СправочникСсылка("БЗ_Сотрудники_ТСД",ДСтрока.Сотрудник);
		ДСтрока.ТипДвиженияТСД=СправочникСсылка("БЗ_ТипыДвижений_ТСД",ДСтрока.ТипДвиженияТСД);
		Если Проверять Тогда			
			Строка=Объект.ТСД_Положить[НСтроки];
			Сравнить(Строка.ДокументПлан, 				ДСтрока.ДокументПлан,				Изменения);
			Сравнить(Строка.КлючВзять, 					ДСтрока.КлючВзять,					Изменения);
			Сравнить(Строка.КлючПоложить, 				ДСтрока.КлючПоложить,				Изменения);
			Сравнить(Строка.ТЕ, 						ДСтрока.ТЕ,							Изменения);
			Сравнить(Строка.Номенклатура, 				ДСтрока.Номенклатура,				Изменения);
			Сравнить(Строка.ХарактеристикаНоменклатуры, ДСтрока.ХарактеристикаНоменклатуры,	Изменения);
			Сравнить(Строка.Количество, 				ДСтрока.Количество,					Изменения);
			Сравнить(Строка.Кратность, 					ДСтрока.Кратность,					Изменения);
			Сравнить(Строка.Участок,					ДСтрока.Участок,					Изменения);
			Сравнить(Строка.РабочееМесто,				ДСтрока.РабочееМесто,				Изменения);
			Сравнить(Строка.Операция,					ДСтрока.Операция,					Изменения);
			Сравнить(Строка.Сотрудник,					ДСтрока.Сотрудник,					Изменения);
			Сравнить(Строка.ВремяОперации,				ДСтрока.ВремяОперации,				Изменения);
			Сравнить(Строка.ТипДвиженияТСД,				ДСтрока.ТипДвиженияТСД,				Изменения);
		Иначе
			Строка=Объект.ТСД_Положить.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,ДСтрока);
		КонецЕсли;
		НСтроки=НСтроки+1;
	КонецЦикла;
	
	ЗаписатьДокумент(Объект,Данные.Проведен,Изменения);
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка,Объект.Ссылка);	
	Возврат Объект.Ссылка;
КонецФункции

Функция   НайтиСоздатьБЗ_ОПС(Данные) Экспорт
	Если ТипЗнч(Данные)<>Тип("Структура") Тогда Возврат ДокументСсылка("БЗ_ОПС", Данные); КонецЕсли;
	Если Данные.GUID="" Тогда
		Возврат Документы.БЗ_ОПС.ПустаяСсылка();
	КонецЕсли;	
	Изменения=Ложь;	
	Запрос=Новый Запрос("ВЫБРАТЬ БЗ_ОПС.Ссылка ИЗ Документ.БЗ_ОПС КАК БЗ_ОПС ГДЕ БЗ_ОПС.УзелОбмена = &УзелОбмена И БЗ_ОПС.GUID = &GUID");
	Запрос.УстановитьПараметр("УзелОбмена",Ссылка);
	Запрос.УстановитьПараметр("GUID",Данные.GUID);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Объект=Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Объект=Документы.БЗ_ОПС.СоздатьДокумент();
		Объект.УзелОбмена=Ссылка;
		Объект.GUID=Данные.GUID;
		Изменения=Истина;
	КонецЕсли;
	
	Данные.Организация=СправочникСсылка("Организации",Данные.Организация);
	Данные.Подразделение=СправочникСсылка("СтруктурныеЕдиницы",Данные.Подразделение);
	Данные.Ответственный=СправочникСсылка("Пользователи",Данные.Ответственный);	
	Данные.Участок=СправочникСсылка("БЗ_Участки",Данные.Участок);	
	Данные.Исполнитель=СправочникСсылка("БЗ_Сотрудники_ТСД",Данные.Исполнитель);
	Данные.СкладПриемки=СправочникСсылка("СтруктурныеЕдиницы",Данные.СкладПриемки);
	//Данные.РаботникБригада=СправочникСсылка("ФизическиеЛица",Данные.РаботникБригада);
		
	Сравнить(Объект.Номер, 					Данные.Номер,					Изменения);
	Сравнить(Объект.Дата, 					Данные.Дата, 					Изменения);
	Сравнить(Объект.ПометкаУдаления, 		Данные.ПометкаУдаления,			Изменения);	
	Сравнить(Объект.Организация, 			Данные.Организация, 			Изменения);
	Сравнить(Объект.Подразделение, 			Данные.Подразделение, 			Изменения);
	Сравнить(Объект.Участок, 				Данные.Участок, 				Изменения);
	Сравнить(Объект.Исполнитель, 			Данные.Исполнитель,				Изменения);
	Сравнить(Объект.СкладПриемки, 			Данные.СкладПриемки,			Изменения);
	//Сравнить(Объект.РаботникБригада, 		Данные.РаботникБригада,			Изменения);
	//Сравнить(Объект.Напечатан, 			Данные.Напечатан,				Изменения);
	Сравнить(Объект.КИСBarcode, 			Данные.КИСBarcode,				Изменения);
	Сравнить(Объект.Комментарий, 			Данные.Комментарий,				Изменения);
		
// -- Товары
	Если Объект.Товары.Количество()<>Данные.Товары.Количество() Тогда
		Проверять=Ложь;
		Объект.Товары.Очистить();
		Изменения=Истина;
	Иначе
		Проверять=Истина;
	КонецЕсли;
	НСтроки=0;
	Для Каждого ДСтрока Из Данные.Товары Цикл
		ДСтрока.Номенклатура=СправочникСсылка("Номенклатура",ДСтрока.Номенклатура);
		ДСтрока.ХарактеристикаНоменклатуры=СправочникСсылка("ХарактеристикиНоменклатуры",ДСтрока.ХарактеристикаНоменклатуры);
		//ДСтрока.ЕдиницаИзмерения=СправочникСсылка("ЕдиницыИзмерения",ДСтрока.ЕдиницаИзмерения);
		ДСтрока.ЕдиницаИзмерения=ДСтрока.Номенклатура.ЕдиницаИзмерения;
		ДСтрока.ЗНП=ДокументСсылка("ЗаказНаПроизводство",ДСтрока.ЗНП);
		ДСтрока.Назначение=СправочникСсылка("БЗ_Назначения",ДСтрока.Назначение);
		Если Проверять Тогда			
			Строка=Объект.Товары[НСтроки];
			Сравнить(Строка.Номенклатура, 				ДСтрока.Номенклатура,				Изменения);
			Сравнить(Строка.ХарактеристикаНоменклатуры, ДСтрока.ХарактеристикаНоменклатуры,	Изменения);
			Сравнить(Строка.ЕдиницаИзмерения, 			ДСтрока.ЕдиницаИзмерения,			Изменения);
			Сравнить(Строка.Количество, 				ДСтрока.Количество,					Изменения);			
			Сравнить(Строка.ЗНП,						ДСтрока.ЗНП,						Изменения);
			Сравнить(Строка.Назначение,					ДСтрока.Назначение,					Изменения);
		Иначе
			Строка=Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,ДСтрока);
		КонецЕсли;
		НСтроки=НСтроки+1;
	КонецЦикла;
	
// -- ТСД_ВводДанных
	Если Объект.ТСД_ВводДанных.Количество()<>Данные.ТСД_ВводДанных.Количество() Тогда
		Проверять=Ложь;
		Объект.ТСД_ВводДанных.Очистить();
		Изменения=Истина;
	Иначе
		Проверять=Истина;
	КонецЕсли;
	НСтроки=0;
	Для Каждого ДСтрока Из Данные.ТСД_ВводДанных Цикл
		ДСтрока.Номенклатура=СправочникСсылка("Номенклатура",ДСтрока.Номенклатура);
		ДСтрока.ХарактеристикаНоменклатуры=СправочникСсылка("ХарактеристикиНоменклатуры",ДСтрока.ХарактеристикаНоменклатуры);
		ДСтрока.Сотрудник=СправочникСсылка("БЗ_Сотрудники_ТСД",ДСтрока.Сотрудник);
		ДСтрока.ЗНП=ДокументСсылка("ЗаказНаПроизводство",ДСтрока.ЗНП);
		ДСтрока.Назначение=СправочникСсылка("БЗ_Назначения",ДСтрока.Назначение);
		Если Проверять Тогда			
			Строка=Объект.ТСД_ВводДанных[НСтроки];
			Сравнить(Строка.Номенклатура, 				ДСтрока.Номенклатура,				Изменения);
			Сравнить(Строка.ХарактеристикаНоменклатуры, ДСтрока.ХарактеристикаНоменклатуры,	Изменения);
			Сравнить(Строка.Количество, 				ДСтрока.Количество,					Изменения);
			Сравнить(Строка.Сотрудник, 					ДСтрока.Сотрудник,					Изменения);
			Сравнить(Строка.СН,							ДСтрока.СН,							Изменения);
			Сравнить(Строка.Добавлено,					ДСтрока.Добавлено,					Изменения);
			Сравнить(Строка.НомерПаллеты,				ДСтрока.НомерПаллеты,				Изменения);
			Сравнить(Строка.ЗНП,						ДСтрока.ЗНП,						Изменения);
			Сравнить(Строка.Назначение,					ДСтрока.Назначение,					Изменения);
		Иначе
			Строка=Объект.ТСД_ВводДанных.Добавить();
			ЗаполнитьЗначенияСвойств(Строка,ДСтрока);
		КонецЕсли;
		НСтроки=НСтроки+1;
	КонецЦикла;
	
	ЗаписатьДокумент(Объект,Данные.Проведен,Истина);
	
	ПланыОбмена.УдалитьРегистрациюИзменений(Ссылка,Объект.Ссылка);	
	Возврат Объект.Ссылка;
КонецФункции

// -----
Процедура ЗавершитьСессию() Экспорт
	Если ПараметрыСеанса.БЗ_MES_Обмен_Сессия="" Тогда
		Возврат;
	КонецЕсли;
	Узел=ЭтотОбъект.Ссылка;
	Соединение = Новый HTTPСоединение(Узел.АдресСервера);
    HTTPЗапрос = Новый HTTPЗапрос("/"+Узел.НазваниеБД+"/hs/exchange/json_api");
    HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");
	HTTPЗапрос.Заголовки.Вставить("IBSession", "finish");
	HTTPЗапрос.Заголовки.Вставить("Cookie", ПараметрыСеанса.БЗ_MES_Обмен_Сессия);
	HTTPЗапрос.УстановитьТелоИзСтроки("",КодировкаТекста.ANSI);
	HTTPОтвет=Соединение.ОтправитьДляОбработки(HTTPЗапрос);	
	ПараметрыСеанса.БЗ_MES_Обмен_Сессия="";
КонецПроцедуры

Функция ВыполнитьОтправкуJSONПакета(JSONПакет,JSONОтвет=Неопределено) Экспорт
	Узел=ЭтотОбъект;
	Размер=СтрДлина(JSONПакет);
	ПараметрыСеанса.БЗ_MES_Обмен_Счетчик=ПараметрыСеанса.БЗ_MES_Обмен_Счетчик+Размер;
	Если ПараметрыСеанса.БЗ_MES_Обмен_Счетчик>52428800 И ПараметрыСеанса.БЗ_MES_Обмен_Счетчик<>Размер Тогда // За один запуск отправляем не более 50мб, кроме первого пакета в сеансе
		Возврат "limit_out";
	КонецЕсли;	
	Если ПараметрыСеанса.БЗ_MES_Обмен_Сессия="" Тогда
		Соединение = Новый HTTPСоединение(Узел.АдресСервера);
    	HTTPЗапрос = Новый HTTPЗапрос("/"+Узел.НазваниеБД+"/hs/exchange/json_api");
    	HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");
		HTTPЗапрос.Заголовки.Вставить("IBSession", "start");
		HTTPЗапрос.УстановитьТелоИзСтроки("",КодировкаТекста.ANSI);
		HTTPОтвет=Соединение.ОтправитьДляОбработки(HTTPЗапрос);
		Cookie=HTTPОтвет.Заголовки.Получить("Set-Cookie");
		Если Cookie=Неопределено Тогда
			Возврат "request_error";
		КонецЕсли;
		ПараметрыСеанса.БЗ_MES_Обмен_Сессия=Cookie;
	КонецЕсли;	
	Соединение = Новый HTTPСоединение(Узел.АдресСервера);
    HTTPЗапрос = Новый HTTPЗапрос("/"+Узел.НазваниеБД+"/hs/exchange/json_api");
    HTTPЗапрос.Заголовки.Вставить("Content-type", "application/json");	
	HTTPЗапрос.Заголовки.Вставить("Cookie", ПараметрыСеанса.БЗ_MES_Обмен_Сессия);	
	HTTPЗапрос.УстановитьТелоИзСтроки(JSONПакет,КодировкаТекста.ANSI);
	HTTPОтвет=Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	Ответ=HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	Попытка
		JSONОтвет=ПланыОбмена.БЗ_MES.Прочитать_JSON(Ответ);
		Если JSONОтвет.status="need_objects" И ПараметрыСеанса.БЗ_MES_Обмен_Счетчик=Размер Тогда // Если 1-й объект-документ большой - то оставить место для отправки объектов которых не хватает в лимите;
			Если ПараметрыСеанса.БЗ_MES_Обмен_Счетчик>50000000 Тогда
				ПараметрыСеанса.БЗ_MES_Обмен_Счетчик=40000000;
			КонецЕсли;
		КонецЕсли;
		Возврат JSONОтвет.status;
	Исключение
		Если Найти(Ответ,"Сеанс отсутствует")=0 Тогда		
			ЗаписьЖурналаРегистрации("Обмен_Производство",УровеньЖурналаРегистрации.Ошибка,,Ответ,"request_error",РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			Возврат "request_error";
		КонецЕсли;
	КонецПопытки;
	ПараметрыСеанса.БЗ_MES_Обмен_Сессия="";
	ВыполнитьОтправкуJSONПакета(JSONПакет,JSONОтвет); // Переинициализация мертвой сессии
КонецФункции