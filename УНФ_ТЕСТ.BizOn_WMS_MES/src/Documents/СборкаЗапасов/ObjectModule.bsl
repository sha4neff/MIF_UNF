
&ИзменениеИКонтроль("ОбработкаПроведения")
Процедура БЗ_ОбработкаПроведения(Отказ, РежимПроведения)

	// Этапы производства
	ПроверитьЗаполнениеЭтаповПроизводства(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 

	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);

	// Инициализация данных документа
	Документы.СборкаЗапасов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);

	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);

	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКПоступлениюНаСклады(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКРасходуСоСкладов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьВыпускПродукции(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыПринятые(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьПотребностьВЗапасах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗаказыНаПроизводство(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьРазмещениеЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);

	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ);

	// Этапы производства
	Если ВидОперации=Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
		УправлениеНебольшойФирмойСервер.ОтразитьЭтапыПроизводства(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;

	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	#Удаление
	Документы.СборкаЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	#КонецУдаления
	#Вставка
	Если не ПараметрыСеанса.БЗ_ПроводитьБезКонтроляОстатков тогда
		Документы.СборкаЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	#КонецВставки

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
#Удаление

#КонецУдаления
#Вставка
// Здесь можно описать новое поведение.
Если ЗаказНаПроизводство.БЗ_УчитыватьВОстаткахНазначений Тогда
движения.БЗ_ОстаткиНазначений.Записывать=Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СборкаЗапасовПродукция.Характеристика КАК Характеристика,
		|	СборкаЗапасовПродукция.Номенклатура КАК Номенклатура,
		|	СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница КАК Подразделение,
		|	СборкаЗапасовПродукция.БЗ_Назначение КАК Назначение,
		|	СУММА(СборкаЗапасовПродукция.Количество) КАК Количество,
		|	&Ссылка КАК Регистратор,
		|	СборкаЗапасовПродукция.Ссылка.Дата КАК Период,
		|	&ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	МИНИМУМ(СборкаЗапасовПродукция.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.СборкаЗапасов.Продукция КАК СборкаЗапасовПродукция
		|ГДЕ
		|	СборкаЗапасовПродукция.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СборкаЗапасовПродукция.Характеристика,
		|	СборкаЗапасовПродукция.Номенклатура,
		|	СборкаЗапасовПродукция.Ссылка.СтруктурнаяЕдиница,
		|	СборкаЗапасовПродукция.БЗ_Назначение,
		|	СборкаЗапасовПродукция.Ссылка.Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БЗ_ОстаткиНазначенийОстатки.Номенклатура КАК Номенклатура,
		|	БЗ_ОстаткиНазначенийОстатки.Характеристика КАК Характеристика,
		|	БЗ_ОстаткиНазначенийОстатки.Подразделение КАК Подразделение,
		|	БЗ_ОстаткиНазначенийОстатки.Назначение КАК Назначение,
		|	БЗ_ОстаткиНазначенийОстатки.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
		|	БЗ_ОстаткиНазначенийОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.БЗ_ОстаткиНазначений.Остатки(&ДатаОстатка, ЗаказНаПроизводство = &ЗаказНаПроизводство) КАК БЗ_ОстаткиНазначенийОстатки";
	Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗаказНаПроизводство);

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаОстатка", ?(Ссылка.Дата > ЗаказНаПроизводство.Дата, Новый Граница(Ссылка.МоментВремени(),ВидГраницы.Исключая),ТекущаяДата()));
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	ТЗДокумента = ПакетЗапросов[0].Выгрузить();
	ТЗОстатки = ПакетЗапросов[1].Выгрузить();
	
	Для Каждого СтрокаДок из ТЗДокумента Цикл   
		МассивОстаткиНоменклатуры = ТЗОстатки.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",СтрокаДок.Номенклатура, СтрокаДок.Характеристика));
		ТЗОстаткиНоменклатуры = ТЗОстатки.Скопировать(МассивОстаткиНоменклатуры);	
		Если ТЗОстаткиНоменклатуры.Количество()>0 и ТЗОстаткиНоменклатуры.Итог("КоличествоОстаток")>0 Тогда
			Для Приоритет = 1 По 4 Цикл
				Если Приоритет = 1 Тогда
					// 1- Назначение и Подразделение совпадает
					Отбор = Новый Структура("Назначение, Подразделение", СтрокаДок.Назначение, СтрокаДок.Подразделение);
				ИначеЕсли Приоритет = 2 Тогда
					// 2- Назначение совпадает, а Подразделение нет
					Отбор = Новый Структура("Назначение",СтрокаДок.Назначение);
				ИначеЕсли Приоритет = 3 и СтрокаДок.Назначение <> Справочники.БЗ_Назначения.ПустаяСсылка() Тогда
					// 3- Назначение заполнено, а Подразделение неважно, пробуем взять остатки без назначения
					Отбор = Новый Структура("Назначение",Справочники.БЗ_Назначения.ПустаяСсылка());
				КонецЕсли;
				Если Приоритет < 4 Тогда // Первые 3 приоритета - отбираем 
					ОтборОстаткиНоменклатуры = ТЗОстаткиНоменклатуры.НайтиСтроки(Отбор);
				Иначе // приоритет 4 - любые остатки
					ОтборОстаткиНоменклатуры = ТЗОстаткиНоменклатуры;
				КонецЕсли;
				Если ОтборОстаткиНоменклатуры.Количество()=0 Тогда
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрокаОстатка из ОтборОстаткиНоменклатуры Цикл
					МожноСписать = Макс(0,Мин(СтрокаДок.Количество, СтрокаОстатка.КоличествоОстаток)); 
					Если МожноСписать > 0 Тогда
						НоваяСтрока=   Движения.БЗ_ОстаткиНазначений.ДобавитьРасход();
				  		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДок,,"Назначение, Подразделение, Количество");
				  		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОстатка,"Назначение, Подразделение");
						НоваяСтрока.Количество = МожноСписать;	
						СтрокаОстатка.КоличествоОстаток = СтрокаОстатка.КоличествоОстаток - МожноСписать;
						СтрокаДок.Количество = СтрокаДок.Количество - МожноСписать;
					КонецЕсли;
					Если СтрокаДок.Количество=0 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если СтрокаДок.Количество=0 Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;      
		НеПроводитьОстаткиНазначенийВМинус = Ложь; 
		Характеристика = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("ИдентификаторДляФормул","Производство_НеПроводитьОстаткиНазначенийВМинус",);
		СтрокаДопРеквизитов = Ссылка.ДополнительныеРеквизиты.Найти(Характеристика,"Свойство");
		Если СтрокаДопРеквизитов <> Неопределено Тогда 
			НеПроводитьОстаткиНазначенийВМинус  = СтрокаДопРеквизитов.Значение;
		КонецЕсли; 
		Если НЕ НеПроводитьОстаткиНазначенийВМинус И СтрокаДок.Количество > 0 Тогда // Если не удалось распределить, то проводим что осталось.
			НоваяСтрока=   Движения.БЗ_ОстаткиНазначений.ДобавитьРасход();
	  		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДок);
		КонецЕсли;
		
 	КонецЦикла;
  КонецЕсли;
	#КонецВставки
КонецПроцедуры
