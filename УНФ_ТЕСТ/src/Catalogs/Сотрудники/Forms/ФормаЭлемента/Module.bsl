
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	Если Параметры.ОшибкиЗаполнения Тогда
		ПроверкаДанных.ВывестиСообщенияОбОшибкахЗаполнения("Объект", Параметры.ПереченьОшибок);
	КонецЕсли;
	
	ОтобразитьИзменениеФизЛица();
	ОтобразитьИзменениеКадровойИнформации();
	
	ОпределитьИмущественныйВычет();
	ОпределитьСоциальныйВычет();
	ОпределитьЛичныйВычет();
	ОпределитьВычетНаДетей();
	
	УстановитьЗаголовокКадровыхДанных(ЭтотОбъект);
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
	
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуЗарплата") Тогда
		Элементы.ГруппаРабота.Видимость = Истина;
	Иначе
		Элементы.ГруппаРабота.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтотОбъект.ТолькоПросмотр Тогда
		Элементы.ГруппаРабота.Видимость = Ложь;
		Элементы.ГруппаДокумент.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаВычетыНДФЛ.Видимость = Элементы.ГруппаРабота.Видимость;
	
	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");

	Если ЗначениеЗаполнено(Объект.Физлицо) Тогда
		ПрочитатьБанковскийСчетПоУмолчанию(Объект.Физлицо.БанковскийСчетПоУмолчанию);
	КонецЕсли;
	
	Если Параметры.Свойство("НеобходимаОтметкаФизЛицо") Тогда
		НеобходимаОтметкаФизЛицо = Параметры.НеобходимаОтметкаФизЛицо;
	КонецЕсли;
	
	ИзменитьОтображениеПодсказки(Элементы, Не ЗначениеЗаполнено(Объект.Физлицо));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	Если НеобходимаОтметкаФизЛицо Тогда
		СоздатьФизЛицоАвтоматически = Ложь;
		Элементы.Физлицо.Доступность = Истина;
		СообщениеФизЛицо = Новый СообщениеПользователю;
		СообщениеФизЛицо.Поле = "Объект.Физлицо";
		СообщениеФизЛицо.Текст = НСтр("ru = 'Выберите из списка или установите флаг ""Создать автоматически"" для создания нового элемента'");
		СообщениеФизЛицо.Сообщить();
	КонецЕсли;
	
	УстановитьМаскуНомераСчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ИзменилисьСчетаСотрудники" Тогда
		Объект.СчетРасчетовСПерсоналом = Параметр.СчетРасчетовСПерсоналом;
		Объект.СчетРасчетовСПодотчетниками = Параметр.СчетРасчетовСПодотчетниками;
		Объект.СчетРасчетовПоПерерасходу = Параметр.СчетРасчетовПоПерерасходу;
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" И Параметр = Объект.Физлицо Тогда
		ОтобразитьИзменениеФизЛица();
	ИначеЕсли ИмяСобытия = "ИзменилсяДокументФизЛиц" Тогда
		ОтобразитьИзменениеФизЛица();
	ИначеЕсли  ИмяСобытия = "ИзменениеПоКадровомуУчету" Тогда
		ОтобразитьИзменениеКадровойИнформации();
		УстановитьЗаголовокКадровыхДанных(ЭтотОбъект);
	ИначеЕсли ИмяСобытия = "УстановкаОсновногоСчета" И Параметр.Владелец = Объект.Физлицо Тогда 
		ПрочитатьБанковскийСчетПоУмолчанию(Параметр.НовыйОсновнойСчет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "Запись"+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	// СтандартныеПодсистемы.ОценкаПроизводительности

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ЗначениеЗаполнено(Объект.Физлицо) ИЛИ СоздатьФизЛицоАвтоматически Тогда
		ЗаписатьДанныеПоФизЛицу(Отказ);
		ТекущийОбъект.ФизЛицо = Объект.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОтобразитьИзменениеФизЛица();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("Запись_<ИмяСправочникаСотрудники>", Объект.Ссылка);
	УстановитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ПустаяСтрока(ОсновнойСчет_Номер) И Не ЗначениеЗаполнено(ОсновнойСчет_Банк) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Банк'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ОсновнойСчет_Банк", , Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнойСчет_Банк) И ПустаяСтрока(ОсновнойСчет_Номер) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Номер счета'"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "ОсновнойСчет_Номер", , Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ);
	// Конец УНФ.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура НедействителенПриИзменении(Элемент)
	
	Если Не Объект.Недействителен Тогда Возврат КонецЕсли;
	
	Если ЭлементОсновной() Тогда
		ПараметрыОповещения = Новый Структура();
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияПредупрежденияНедействителен", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьПредупреждение(ОповещениеОЗакрытии, НСтр("ru = 'Для установки ""Недействителен"" необходимо снять свойство ""Основной"" у данного сотрудника.'"), , НСтр("ru = 'Элемент выбран основным'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупрежденияНедействителен(Параметры) Экспорт
	Объект.Недействителен = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьПодсказкуНажатие(Элемент)
	
	ИзменитьОтображениеПодсказки(Элементы, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОтображениеПодсказки(Элементы, Показать)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПодсказкаАссистента",
		"Видимость",
		Показать);
	
	Если Показать Тогда
		НовыйШрифт = Новый Шрифт(Элементы.ФизЛицо.ШрифтЗаголовка,,, Истина);
	Иначе
		НовыйШрифт = Новый Шрифт(Элементы.ФизЛицо.ШрифтЗаголовка,,, Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ФизЛицо",
		"ШрифтЗаголовка",
		НовыйШрифт);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"СоздатьФизЛицоАвтоматически",
		"ШрифтЗаголовка",
		НовыйШрифт);
	
КонецПроцедуры

&НаСервере
Функция ЭлементОсновной()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("Настройка", ПланыВидовХарактеристик.НастройкиПользователей["ОсновнойОтветственный"]);
	Запрос.УстановитьПараметр("Значение", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователей.Пользователь КАК Пользователь,
	|	НастройкиПользователей.Настройка КАК Настройка,
	|	НастройкиПользователей.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.НастройкиПользователей КАК НастройкиПользователей
	|ГДЕ
	|	НастройкиПользователей.Пользователь = &Пользователь
	|	И НастройкиПользователей.Настройка = &Настройка
	|	И НастройкиПользователей.Значение = &Значение";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ЗаписатьДанныеПоФизЛицу(Отказ)
	
	Если Не ЗначениеЗаполнено(Объект.Физлицо) Тогда
		ФизическоеЛицо.Наименование = Объект.Наименование;
	КонецЕсли;
	
	ФизЛицо = РеквизитФормыВЗначение("ФизическоеЛицо", Тип("СправочникОбъект.ФизическиеЛица"));
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПередЗаписьюНаСервере(ЭтотОбъект, ФизЛицо);
	// Конец УНФ.КонтактнаяИнформация
	
	УстановитьБанковскийСчетПоУмолчанию(ФизЛицо);
	
	ФизЛицо.Записать();
	
	Если ИзменилиБанковскийСчет Тогда
		ЗаписатьБанковскийСчетПоУмолчанию(Физлицо);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КлючДокументФизЛица.Физлицо) Тогда
		КлючДокументФизЛица.Физлицо = ФизЛицо.Ссылка;
		КлючДокументФизЛица.Период = Дата('20000101');
		КлючДокументФизЛица.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		КлючДокументФизЛица.ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	КонецЕсли;
	
	ЗаписьДокументаФизЛиц = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(ЗаписьДокументаФизЛиц,  КлючДокументФизЛица);
	ЗаписьДокументаФизЛиц.Записать();
	
	Объект.Физлицо = ФизЛицо.Ссылка;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьАктуальныйДокументФизЛица(ФизЛицо, КлючЗаписиДокумента)
	ЗаполнитьЗначенияСвойств(КлючЗаписиДокумента, РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи());
	
	Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыФизическихЛиц.Период,
	|	ДокументыФизическихЛиц.Физлицо,
	|	ДокументыФизическихЛиц.ВидДокумента,
	|	ДокументыФизическихЛиц.Серия,
	|	ДокументыФизическихЛиц.Номер,
	|	ДокументыФизическихЛиц.ДатаВыдачи,
	|	ДокументыФизическихЛиц.СрокДействия,
	|	ДокументыФизическихЛиц.КемВыдан,
	|	ДокументыФизическихЛиц.КодПодразделения,
	|	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛиц.Представление,
	|	ДокументыФизическихЛиц.УдалитьВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МАКСИМУМ(ДокументыФизическихЛиц.Период) КАК Период,
	|			ДокументыФизическихЛиц.Физлицо КАК Физлицо
	|		ИЗ
	|			РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ГДЕ
	|			ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность
	|			И ДокументыФизическихЛиц.Физлицо = &Физлицо
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДокументыФизическихЛиц.Физлицо) КАК ДокументыСрез
	|		ПО ДокументыФизическихЛиц.Период = ДокументыСрез.Период
	|			И ДокументыФизическихЛиц.Физлицо = ДокументыСрез.Физлицо
	|			И (ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность)";
	
	Запрос.УстановитьПараметр("Физлицо", ФизЛицо);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(КлючЗаписиДокумента, Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьАктуальнуюКадровуюИнформациюОСотруднике(Сотрудник, КлючТекущаяКадроваяИнформация)
	
	ЗаполнитьЗначенияСвойств(КлючТекущаяКадроваяИнформация, РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьМенеджерЗаписи());
	Если Не ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	|	ТекущиеКадровыеДанныеСотрудников.Организация,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаПриема,
	|	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения,
	|	ТекущиеКадровыеДанныеСотрудников.СтруктурнаяЕдиница,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность,
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяТарифнаяСтавка,
	|	ТекущиеКадровыеДанныеСотрудников.ВалютаТарифнойСтавки
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник = &Сотрудник";
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(КлючТекущаяКадроваяИнформация, Выборка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьСловоПодЧисло(Число, СловоДляОдин, СловоДляДва, СловоДляПять)
	
	Если Число > 4 И Число < 21 Тогда
		
		Возврат СловоДляПять;
		
	ИначеЕсли (Число % 10) = 1 Тогда
		
		Возврат СловоДляОдин;
		
	ИначеЕсли (Число % 10) <= 5 Тогда
		
		Возврат СловоДляДва;
		
	Иначе
		
		Возврат СловоДляПять;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтобразитьИзменениеФизЛица()
	
	Если ЗначениеЗаполнено(Объект.Физлицо) Тогда
		ЗначениеВРеквизитФормы(Объект.Физлицо.ПолучитьОбъект(), "ФизическоеЛицо");
		Элементы.СоздатьФизЛицоАвтоматически.Видимость = Ложь;
		Элементы.Физлицо.Доступность = Истина;
		ПолучитьАктуальныйДокументФизЛица(Объект.Физлицо, КлючДокументФизЛица);
	ИначеЕсли Не ТолькоПросмотр Тогда
		ЗначениеВРеквизитФормы(Справочники.ФизическиеЛица.СоздатьЭлемент(), "ФизическоеЛицо");
		ЗаполнитьЗначенияСвойств(КлючДокументФизЛица, РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи());
		Элементы.СоздатьФизЛицоАвтоматически.Видимость = Истина;
		СоздатьФизЛицоАвтоматически = Истина;
		Элементы.Физлицо.Доступность = Ложь;
	КонецЕсли;
	
	// УНФ.КонтактнаяИнформация
	КонтактнаяИнформацияУНФ.ПриСозданииПриЧтенииНаСервере(ЭтотОбъект, ФизическоеЛицо);
	// Конец УНФ.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИзменениеКадровойИнформации()
	ПолучитьАктуальнуюКадровуюИнформациюОСотруднике(Объект.Ссылка, КлючТекущиеКадровыеДанныеСотрудников);
	
	Если Не ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема)
		ИЛИ (ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема) И ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения)) Тогда
		Если ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения) Тогда
			Элементы.ОформитьПриемНаРаботу.Видимость = Ложь;
		Иначе
		// Есть возможность принять сотрудника
			Элементы.ОформитьПриемНаРаботу.Видимость = Истина;
		КонецЕсли;
		Элементы.ОформитьУвольнение.Видимость = Ложь;
		Элементы.ИзменитьДолжность.Видимость = Ложь;
		Элементы.ИзменитьОклад.Видимость = Ложь;
	Иначе
		Элементы.ОформитьПриемНаРаботу.Видимость = Ложь;
		Элементы.ОформитьУвольнение.Видимость = Истина;
		Элементы.ИзменитьДолжность.Видимость = Истина;
		Элементы.ИзменитьОклад.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСотрудникаНаНовый()
	
	Если Объект.Ссылка.Пустая() И Не Записать() Тогда
		ПоказатьПредупреждение(,НСТр("ru='Доступно после записи данного сотрудника'"));
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОпределитьИмущественныйВычет()
	
	Если Объект.Ссылка.Пустая() Тогда
		ИмущественныйВычет = "<<Заполнить имущественные вычеты сотрудника>>";
		Элементы.ИмущественныйВычет.Подсказка = ИмущественныйВычет;
		Возврат;
	КонецЕсли;
	ЗапросПоИмущественномуВычету = Новый Запрос;
	ЗапросПоИмущественномуВычету.Текст =
	"ВЫБРАТЬ
	|	НДФЛИмущественныйВычетСрезПоследних.Представление
	|ИЗ
	|	РегистрСведений.НДФЛИмущественныйВычет.СрезПоследних КАК НДФЛИмущественныйВычетСрезПоследних
	|ГДЕ
	|	НДФЛИмущественныйВычетСрезПоследних.Сотрудник = &Сотрудник";
	ЗапросПоИмущественномуВычету.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Выборка = ЗапросПоИмущественномуВычету.Выполнить().Выбрать();
	Если Выборка.Следующий() И Не ПустаяСтрока(Выборка.Представление) Тогда
		ИмущественныйВычет = Выборка.Представление;
	Иначе
		ИмущественныйВычет ="<<Заполнить имущественные вычеты сотрудника>>";
	КонецЕсли;
	Элементы.ИмущественныйВычет.Подсказка = ИмущественныйВычет;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСоциальныйВычет()
	
	Если Объект.Ссылка.Пустая() Тогда
		СоциальныйВычет = "<<Заполнить социальные вычеты сотрудника>>";
		Элементы.СоциальныйВычет.Подсказка = СоциальныйВычет;
		Возврат;
	КонецЕсли;
	ЗапросПоСоциальномуВычету = Новый Запрос;
	ЗапросПоСоциальномуВычету.Текст =
	"ВЫБРАТЬ
	|	НДФЛСоциальныеВычетыСрезПоследних.Представление
	|ИЗ
	|	РегистрСведений.НДФЛСоциальныеВычеты.СрезПоследних КАК НДФЛСоциальныеВычетыСрезПоследних
	|ГДЕ
	|	НДФЛСоциальныеВычетыСрезПоследних.Сотрудник = &Сотрудник";
	ЗапросПоСоциальномуВычету.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Выборка = ЗапросПоСоциальномуВычету.Выполнить().Выбрать();
	Если Выборка.Следующий() И Не ПустаяСтрока(Выборка.Представление) Тогда
		СоциальныйВычет = Выборка.Представление;
	Иначе
		СоциальныйВычет = "<<Заполнить социальные вычеты сотрудника>>";
	КонецЕсли;
	Элементы.СоциальныйВычет.Подсказка = СоциальныйВычет;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияИмущественного(Результат,Параметры) Экспорт
	ОпределитьИмущественныйВычет();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияСоциального(Результат,Параметры) Экспорт
	ОпределитьСоциальныйВычет();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры


&НаСервере
Процедура ОпределитьЛичныйВычет()
	
	Если Объект.Ссылка.Пустая() Тогда
		СтандартныйЛичныйВычет = "<<Заполнить стандартные личные вычеты сотрудника>>";
		Элементы.СтандартныйЛичныйВычет.Подсказка = СтандартныйЛичныйВычет;
		Возврат;
	КонецЕсли;
	ЗапросПоЛичномуВычету = Новый Запрос;
	ЗапросПоЛичномуВычету.Текст =
	"ВЫБРАТЬ
	|	НДФЛСтандартныеЛичныеВычетыСрезПоследних.Представление
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеЛичныеВычеты.СрезПоследних КАК НДФЛСтандартныеЛичныеВычетыСрезПоследних
	|ГДЕ
	|	НДФЛСтандартныеЛичныеВычетыСрезПоследних.Сотрудник = &Сотрудник";
	ЗапросПоЛичномуВычету.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Выборка = ЗапросПоЛичномуВычету.Выполнить().Выбрать();
	Если Выборка.Следующий() И Не ПустаяСтрока(Выборка.Представление) Тогда
		СтандартныйЛичныйВычет = Выборка.Представление;
	Иначе
		СтандартныйЛичныйВычет = "<<Заполнить стандартные личные вычеты сотрудника>>";
	КонецЕсли;
	Элементы.СтандартныйЛичныйВычет.Подсказка = СтандартныйЛичныйВычет;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияЛичного(Результат,Параметры) Экспорт
	ОпределитьЛичныйВычет();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОпределитьВычетНаДетей()
	
	Если Объект.Ссылка.Пустая() Тогда
		ВычетыПоНДФЛНаДетей ="<<Доступно после записи>>";
		Элементы.ВычетыПоНДФЛНаДетей.Подсказка = ВычетыПоНДФЛНаДетей;
		Возврат;
	КонецЕсли;
	ЗапросПоВычетуНаДетей = Новый Запрос;
	ЗапросПоВычетуНаДетей.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(НДФЛСтандартныеВычетыНаДетейСрезПоследних.Сотрудник) КАК КоличествоДетей,
	|	СУММА(РазмерВычетов.Размер) КАК СуммаВычета
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеВычетыНаДетей.СрезПоследних КАК НДФЛСтандартныеВычетыНаДетейСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов.СрезПоследних КАК РазмерВычетов
	|		ПО (РазмерВычетов.КодВычета = НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета)
	|ГДЕ
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.Сотрудник = &Сотрудник
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛСтандартныеВычетыНаДетейСрезПоследних.Сотрудник";
	ЗапросПоВычетуНаДетей.УстановитьПараметр("Сотрудник", Объект.Ссылка);
	Выборка = ЗапросПоВычетуНаДетей.Выполнить().Выбрать();
	Если Выборка.Следующий() И Выборка.КоличествоДетей > 0 Тогда
		ВычетыПоНДФЛНаДетей = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 %2, вычетов на сумму %3 руб.'"),
			Выборка.КоличествоДетей,
			ПодобратьСловоПодЧисло(
				Выборка.КоличествоДетей,
				НСтр("ru='ребенок'"),
				НСтр("ru='ребенка'"),
				НСтр("ru='детей'")),
			Формат(Выборка.СуммаВычета,"ЧЦ=10; ЧДЦ=0; ЧРГ=' '; ЧН=0"));
	Иначе
		ВычетыПоНДФЛНаДетей ="<<Заполнить вычеты на детей>>";
	КонецЕсли;
	Элементы.ВычетыПоНДФЛНаДетей.Подсказка = ВычетыПоНДФЛНаДетей;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗаполненияВычетаНаДетей(Результат,Параметры) Экспорт
	ОпределитьВычетНаДетей();
	УстановитьЗаголовокВычетовНДФЛ(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКадровыхДанных(Форма)
	
	КлючТекущиеКадровыеДанныеСотрудников = Форма.КлючТекущиеКадровыеДанныеСотрудников;
	ДинамическиеПараметры = Новый Массив;
	Если Не ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема) Тогда
		ДинамическиеПараметры.Добавить(НСтр("ru='не трудоустроен'"));
	ИначеЕсли ЗначениеЗаполнено(КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения) Тогда
		// Уволен
		ДинамическиеПараметры.Добавить(НСтр("ru='уволен. Дата увольнения'")+ " " + Формат(КлючТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, "ДФ=dd.MM.yyyy")+ НСтр("ru=' г.'"));
	Иначе
		// Принят
		ДинамическиеПараметры.Добавить(НСтр("ru='принят на работу'")+  " " + Формат(КлючТекущиеКадровыеДанныеСотрудников.ДатаПриема, "ДФ=dd.MM.yyyy")+ НСтр("ru=' г.'"));
		ДинамическиеПараметры.Добавить(НСтр("ru='должность'")+ " " + КлючТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность);
		ДинамическиеПараметры.Добавить(НСтр("ru='оклад'")+ " " + КлючТекущиеКадровыеДанныеСотрудников.ТекущаяТарифнаяСтавка + " " + КлючТекущиеКадровыеДанныеСотрудников.ВалютаТарифнойСтавки);
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаРабота", ДинамическиеПараметры);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокВычетовНДФЛ(Форма)
	
	КлючТекущиеКадровыеДанныеСотрудников = Форма.КлючТекущиеКадровыеДанныеСотрудников;
	ДинамическиеПараметры = Новый Массив;
	Если Форма.ВычетыПоНДФЛНаДетей <> "<<Доступно после записи>>" И Форма.ВычетыПоНДФЛНаДетей <> "<<Заполнить вычеты на детей>>" Тогда
		ДинамическиеПараметры.Добавить(Форма.ВычетыПоНДФЛНаДетей + "..");
	ИначеЕсли Форма.ИмущественныйВычет <> "<<Заполнить имущественные вычеты сотрудника>>" Тогда
		ДинамическиеПараметры.Добавить(Форма.ИмущественныйВычет + "..");
	ИначеЕсли Форма.СоциальныйВычет <> "<<Заполнить социальные вычеты сотрудника>>" Тогда
		ДинамическиеПараметры.Добавить(Форма.СоциальныйВычет + "..");
	ИначеЕсли Форма.СтандартныйЛичныйВычет <> "<<Заполнить стандартные личные вычеты сотрудника>>" Тогда
		ДинамическиеПараметры.Добавить(Форма.СтандартныйЛичныйВычет + "..");
	Иначе
		ДинамическиеПараметры.Добавить(НСтр("ru='отсутствуют.'"));
	КонецЕсли;
	
	УстановитьЗаголовокСвернутогоОтображения(Форма, "ГруппаВычетыНДФЛ", ДинамическиеПараметры);
КонецПроцедуры

// Процедура устанавливает заголовок свернутого отображения для группы, по шаблону:
// <заголовок группы (как задан в конфигураторе)> : <динамический параметр 1>, <динамический параметр 2>
//
// Параметры:
//  Форма					 - Форма	 - текущая форма
//  НазваниеГруппы			 - Строка	 - имя группы формы, для которой устанавливается заголовок
//  ДинамическиеПараметры	 - Массив	 - массив частей заголовка.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокСвернутогоОтображения(Форма, НазваниеГруппы, ДинамическиеПараметры)
	
	ЗаголовокТекст = Форма.Элементы[НазваниеГруппы].Заголовок;
	Если ДинамическиеПараметры.Количество() > 0 Тогда
		ЗаголовокТекст = ЗаголовокТекст + ": ";
		Для Каждого Параметр Из ДинамическиеПараметры Цикл
			ЗаголовокТекст = ЗаголовокТекст + Параметр + ", ";
		КонецЦикла;
		СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(ЗаголовокТекст, 2);
	КонецЕсли;
	
	Форма.Элементы[НазваниеГруппы].ЗаголовокСвернутогоОтображения = ЗаголовокТекст;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	ДанныеПоФизЛицуДоступныКРедактированию = ЗначениеЗаполнено(Объект.Физлицо) Или СоздатьФизЛицоАвтоматически;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИсторияИмущественныхВычетов(Команда)
	
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		ОткрытьФорму("РегистрСведений.НДФЛИмущественныйВычет.ФормаСписка",
			Новый Структура("Отбор", Новый Структура("Сотрудник", Объект.Ссылка)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСоциальныхВычетов(Команда)
	
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		ОткрытьФорму("РегистрСведений.НДФЛСоциальныеВычеты.ФормаСписка",
			Новый Структура("Отбор", Новый Структура("Сотрудник", Объект.Ссылка)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияЛичныхВычетов(Команда)
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		ОткрытьФорму("РегистрСведений.НДФЛСтандартныеЛичныеВычеты.ФормаСписка",
			Новый Структура("Отбор", Новый Структура("Сотрудник", Объект.Ссылка)));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычетыПоНДФЛНаДетейНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияВычетаНаДетей", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛСтандартныеВычетыНаДетей.Форма.ФормаЗаполненияСтандартныхВычетовДляДетей",
			Новый Структура("Сотрудник", Объект.Ссылка), ЭтотОбъект,,,,оп,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмущественныйВычетНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияИмущественного", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛИмущественныйВычет.Форма.ФормаЗаполненияИмущественныхВычетов",Новый Структура("Сотрудник", Объект.Ссылка),,,,,оп,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоциальныйВычетНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияСоциального", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛСоциальныеВычеты.Форма.ФормаЗаполненияСоциальныхВычетов",Новый Структура("Сотрудник", Объект.Ссылка),,,,,оп,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтандартныйЛичныйВычетНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		оп = Новый ОписаниеОповещения("ОповещениеЗаполненияЛичного", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НДФЛСтандартныеЛичныеВычеты.Форма.ФормаЗаполненияСтандартныхЛичныхВычетов",Новый Структура("Сотрудник", Объект.Ссылка),,,,,оп,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПриемНаРаботу(Команда)
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность) И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",Новый Структура("Сотрудник, ПринятьНаРаботу", Объект.Ссылка, Истина),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьУвольнение(Команда)
	
	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",Новый Структура("Сотрудник, Организация, ОформитьУвольнение", Объект.Ссылка, КлючТекущиеКадровыеДанныеСотрудников.Организация,  Истина),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДолжность(Команда)
	
	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",Новый Структура("Сотрудник, Организация, ИзменитьДолжность", Объект.Ссылка, КлючТекущиеКадровыеДанныеСотрудников.Организация, Истина),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОклад(Команда)
	
	Если Модифицированность И Не Записать() Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.Сотрудники.Форма.ПомощникКадровогоПеремещенияСотрудника",Новый Структура("Сотрудник, Организация, ИзменитьОклад", Объект.Ссылка, КлючТекущиеКадровыеДанныеСотрудников.Организация, Истина),ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизлицоПриИзменении(Элемент)
	ОтобразитьИзменениеФизЛица();
	УстановитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФизЛицоАвтоматическиПриИзменении(Элемент)
	Элементы.Физлицо.Доступность = Не СоздатьФизЛицоАвтоматически;
	УстановитьВидимостьИДоступностьЭлементов();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	НаименованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура НаименованиеПриИзмененииНаСервере()
	ФизическоеЛицо.Наименование = Объект.Наименование;
КонецПроцедуры

&НаКлиенте
Процедура Справка2НДФЛ(Команда)
	
	ТекущаяОрганизация = КлючТекущиеКадровыеДанныеСотрудников.Организация;
	Если Не ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		ТекущаяОрганизация = РегламентированнаяОтчетностьУСН.ПолучитьТекущуюОрганизациюДляЦелейЗадачОтчетности();
	КонецЕсли;
	
	Если НЕ ПроверитьСотрудникаНаНовый() Тогда
		Если Модифицированность И Не Записать() Тогда
			Возврат;
		КонецЕсли;
		Если ПроверкаДанныхКлиент.ВыполнитьПроверкуДанныхДляСправки2НФДЛ(ТекущаяДата(), ТекущаяОрганизация, Объект.Ссылка) Тогда
			ОткрытьФорму("Документ.СправкаНДФЛ.Форма.ФормаДокумента",Новый Структура("Сотрудник, Организация", Объект.Ссылка, ТекущаяОрганизация),ЭтаФорма,УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Сотрудники"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Банки.ФормаВыбора",, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");
	
КонецПроцедуры

&НаКлиенте
Процедура БанкСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.Банки.ФормаОбъекта",,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = "ЗагрузитьКлассификатор" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ЗагрузкаКлассификатораБанков.Форма.Форма");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.КлассификаторБанков") Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйБанк = РаботаСБанкамиВызовСервера.СсылкаНаБанкИзКлассификатора(ВыбранноеЗначение);
	Если ЗначениеЗаполнено(НайденныйБанк) Тогда
		ВыбранноеЗначение = НайденныйБанк;
	Иначе
		Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
	ИзменилиБанковскийСчет = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = РаботаСБанкамиВызовСервера.БанкАвтоПодборДанныеВыбора(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	ИзменилиБанковскийСчет = Истина;
	ЯвляетсяБанкомРФ = ЯвляетсяБанкомРФ(ОсновнойСчет_Банк);
	УстановитьМаскуНомераСчета();
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаПриИзменении(Элемент)
	ИзменилиБанковскийСчет = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НомерСчетаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	ТекущийТекстНомераСчета = СтрЗаменить(Текст, " ", "");
	
	Если ЯвляетсяБанкомРФ И ТекущийТекстНомераСчета <> Неопределено Тогда
		
		ДлинаСчетаРФ = УправлениеНебольшойФирмойКлиентСервер.ДлинаНомераСчета();
		КоличествоЦифрВСчете = СтрДлина(ТекущийТекстНомераСчета);
		
		Если ДлинаСчетаРФ <> КоличествоЦифрВСчете Тогда
			ТекстСообщения = Нстр("ru = 'Осталось ввести %1'");
			СклоняемыйТекст = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
							Нстр("ru = ';%1 цифру;;%1 цифры;%1 цифр;%1 цифры'"), ДлинаСчетаРФ - КоличествоЦифрВСчете);
			
			Элементы.НомерСчета.Подсказка = СтрШаблон(ТекстСообщения,СклоняемыйТекст);
		Иначе
			Элементы.НомерСчета.Подсказка = "";
		КонецЕсли;
		
	Иначе
		Элементы.НомерСчета.Подсказка = "";
	КонецЕсли;
	
	ОсновнойСчет_Номер = ТекущийТекстНомераСчета;
	ИзменилиБанковскийСчет = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрихКодПриИзменении(Элемент)
	Объект.ШтрихКод = СокрЛП(Объект.ШтрихКод);
КонецПроцедуры

&НаСервере
Процедура ВыводШтрихКода(ТабДок)

	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина", 200);
	ПараметрыШтрихкода.Вставить("Высота", 100);
	ПараметрыШтрихкода.Вставить("УровеньКоррекцииQR", 0);
	ПараметрыШтрихкода.Вставить("Штрихкод", Объект.ШтрихКод);
	ПараметрыШтрихкода.Вставить("ТипКода", 99);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст", Истина);
	ПараметрыШтрихкода.Вставить("РазмерШрифта", 11);
	ПараметрыШтрихкода.Вставить("УголПоворота", 0);
	
	КартинкаШК = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
	МакетШК = Справочники.Сотрудники.ПолучитьМакет("ШтрихКодСотрудника");
	
	ОбластьМакета = МакетШК.ПолучитьОбласть("ОбластьСотрудник");
	ОбластьМакета.Параметры.Сотрудник = Объект.Наименование;
	ТабДок.Вывести(ОбластьМакета);
	
	ОбластьМакета = МакетШК.ПолучитьОбласть("ОбластьКартинка");
	НовыйРисунок = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	НовыйРисунок.Картинка = КартинкаШК;
	НовыйРисунок.Верх = 3;
	НовыйРисунок.Лево = 20;
	НовыйРисунок.Ширина = 60;
	НовыйРисунок.Высота = 30;
	ТабДок.Вывести(ОбластьМакета);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьШтрихКода(Команда)
	Если Не ЗначениеЗаполнено(Объект.ШтрихКод) Тогда
		Возврат;
	КонецЕсли;
	
	ТабДок = Новый ТабличныйДокумент;
	
	ВыводШтрихКода(ТабДок);
	
	ТабДок.Показать()
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьШтрихкодEAN13()
	Возврат РегистрыСведений.ШтрихкодыНоменклатуры.СформироватьШтрихкодEAN13Сотрудник();
КонецФункции

&НаКлиенте
Процедура СгенерироватьШтрихКод(Команда)
	Объект.ШтрихКод = СформироватьШтрихкодEAN13();
КонецПроцедуры

#КонецОбласти

#Область БанковскийСчетПоУмолчанию

&НаСервере
Процедура ПрочитатьБанковскийСчетПоУмолчанию(БанковскийСчетПоУмолчанию)
	
	Элементы.Банк.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Банки");
	
	Если ЗначениеЗаполнено(БанковскийСчетПоУмолчанию) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БанковскийСчетПоУмолчанию, "Банк, НомерСчета");
		ОсновнойСчет_Банк = ЗначенияРеквизитов.Банк;
		ОсновнойСчет_Номер = ЗначенияРеквизитов.НомерСчета;
		ЯвляетсяБанкомРФ = ЯвляетсяБанкомРФ(ОсновнойСчет_Банк);
		ИзменилиБанковскийСчет = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБанковскийСчетПоУмолчанию(ФизЛицо)
	
	Если НЕ ЗначениеЗаполнено(ОсновнойСчет_Банк)
		ИЛИ ПустаяСтрока(ОсновнойСчет_Номер) 
		ИЛИ НЕ ДанныеПоФизЛицуДоступныКРедактированию Тогда
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОсновнойСчет_Банк) = Тип("СправочникСсылка.КлассификаторБанков") Тогда
		ОсновнойСчет_Банк = РаботаСБанкамиПереопределяемый.БанкИзКлассификатора(ОсновнойСчет_Банк);
	КонецЕсли;
	
	Если ФизЛицо.ЭтоНовый() Тогда
	// Если сотрудник новый, банковский счет надо создавать новый
		НадоСоздаватьНовый = Истина;
	Иначе
	// Для существующего сотрудника, надо проверять наличие банковского счета с такими же ключевыми полями
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	БанковскиеСчета.Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец = &Владелец
		|	И БанковскиеСчета.Банк = &Банк
		|	И БанковскиеСчета.НомерСчета = &НомерСчета";
		
		Запрос.УстановитьПараметр("Владелец", Физлицо.Ссылка);
		Запрос.УстановитьПараметр("Банк", ОсновнойСчет_Банк);
		Запрос.УстановитьПараметр("НомерСчета", ОсновнойСчет_Номер);
		
		УстановитьПривилегированныйРежим(Истина);
		РезультатЗапроса = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если РезультатЗапроса.Пустой() Тогда
			// Нет банковского счета с такими ключевыми полями
			Если ЗначениеЗаполнено(Физлицо.БанковскийСчетПоУмолчанию) Тогда
				// Модифицируется существующий основной счет
				НадоСоздаватьНовый = Ложь;
			Иначе
				// Создается новый
				НадоСоздаватьНовый = Истина;
			КонецЕсли;
		Иначе
			// Банковский счет есть, устанавливаем его в качестве основного
			НадоСоздаватьНовый = Ложь;
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Физлицо.БанковскийСчетПоУмолчанию = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НадоСоздаватьНовый Тогда
		Физлицо.БанковскийСчетПоУмолчанию = Справочники.БанковскиеСчета.ПолучитьСсылку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьБанковскийСчетПоУмолчанию(Физлицо)
	
	Если НЕ ЗначениеЗаполнено(ОсновнойСчет_Банк)
		ИЛИ ПустаяСтрока(ОсновнойСчет_Номер) 
		ИЛИ НЕ ДанныеПоФизЛицуДоступныКРедактированию Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БанковскийСчетОбъект = Физлицо.БанковскийСчетПоУмолчанию.ПолучитьОбъект();
	
	Если БанковскийСчетОбъект = Неопределено Тогда
		
		// Создание
		БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
		БанковскийСчетОбъект.УстановитьСсылкуНового(Физлицо.БанковскийСчетПоУмолчанию);
		БанковскийСчетОбъект.Заполнить(Физлицо.Ссылка);
	КонецЕсли;
	
	// Внесение изменений
	БанковскийСчетОбъект.Банк = ОсновнойСчет_Банк;
	БанковскийСчетОбъект.НомерСчета = ОсновнойСчет_Номер;
	БанковскийСчетОбъект.СформироватьНаименование();
	
	// Запись объекта
	БанковскийСчетОбъект.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЯвляетсяБанкомРФ(Банк)
	
	Страна = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Банк, "Страна");
	Возврат (Страна = Справочники.СтраныМира.Россия);
	
КонецФункции

&НаКлиенте
Процедура УстановитьМаскуНомераСчета()
	
	Если ЯвляетсяБанкомРФ Тогда
		Элементы.НомерСчета.Маска = "99999999999999999999";
	Иначе
		Элементы.НомерСчета.Маска = "";
		Элементы.НомерСчета.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область КонтактнаяИнформацияУНФ

&НаСервере
Процедура ДобавитьКонтактнуюИнформациюСервер(ДобавляемыйВид, УстановитьВыводВФормеВсегда = Ложь) Экспорт
	
	КонтактнаяИнформацияУНФ.ДобавитьКонтактнуюИнформацию(ЭтотОбъект, ДобавляемыйВид, УстановитьВыводВФормеВсегда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДействиеКИНажатие(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ДействиеКИНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеКИОчистка(Элемент, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ПредставлениеКИОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомментарийКИПриИзменении(Элемент)
	
	КонтактнаяИнформацияУНФКлиент.КомментарийКИПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияУНФВыполнитьКоманду(Команда)
	
	КонтактнаяИнформацияУНФКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	КонтактнаяИнформацияУНФКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти
