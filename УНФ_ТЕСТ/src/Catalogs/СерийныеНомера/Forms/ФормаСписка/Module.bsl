
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Владелец") Тогда
		
		УстановитьДоступностьЭлементовФормы();
		
		НоменклатураВладелец = Параметры.Отбор.Владелец;
		ИспользоватьСерийныеНомера = НоменклатураВладелец.ИспользоватьСерийныеНомера;
		
		Если НЕ ЗначениеЗаполнено(НоменклатураВладелец)
			ИЛИ (НЕ НоменклатураВладелец.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас
			И НЕ НоменклатураВладелец.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат) Тогда
			
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Серийные номера хранятся только для запасов и подарочных сертификатов'");
			Элементы.Список.ТолькоПросмотр = Истина;
			
		// Наборы
		ИначеЕсли НоменклатураВладелец.ЭтоНабор Тогда
			
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Серийные номера недоступны для наборов'");
			Элементы.Список.ТолькоПросмотр = Истина;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИспользоватьСерийныеНомера", "Доступность", НЕ ЭтаФорма.ТолькоПросмотр);
			УстановитьДоступностьЭлементовФормы();
		
		КонецЕсли;
		
		Если НЕ НоменклатураВладелец.ИспользоватьСерийныеНомера Тогда
			Элементы.ФормаПоискПоШтрихкоду.Доступность = Ложь;
			Элементы.ПоказатьПроданные.Доступность = Ложь;
		КонецЕсли;
		
		Если Параметры.Свойство("ТолькоПросмотрФормы") И Параметры.ТолькоПросмотрФормы Тогда
			Элементы.ИспользоватьСерийныеНомера.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПоказатьПроданные") Тогда
	    ПоказатьПроданные = Параметры.ПоказатьПроданные;
	Иначе	
		ПоказатьПроданные = Ложь;
	КонецЕсли;
	
	Список.Параметры.УстановитьЗначениеПараметра("ПоказатьПроданные", ПоказатьПроданные);
	Элементы.Продан.Видимость = ПоказатьПроданные;
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовФормы()
	
	Если ЭтаФорма.ТолькоПросмотр Тогда Возврат КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздать", "Доступность", ИспользоватьСерийныеНомера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюИзменить", "Доступность", ИспользоватьСерийныеНомера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюКопированиеИВыделение", "Доступность", ИспользоватьСерийныеНомера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСкопировать", "Доступность", ИспользоватьСерийныеНомера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюСоздатьНаОсновании", "Доступность", ИспользоватьСерийныеНомера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюУстановитьПометкуУдаления", "Доступность", ИспользоватьСерийныеНомера);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСкопировать", "Доступность", ИспользоватьСерийныеНомера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСоздать", "Доступность", ИспользоватьСерийныеНомера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИзменить", "Доступность", ИспользоватьСерийныеНомера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаСоздатьНаОсновании", "Доступность", ИспользоватьСерийныеНомера);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаУстановитьПометкуУдаления", "Доступность", ИспользоватьСерийныеНомера);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроданныеПриИзменении(Элемент)
	
	Элементы.Продан.Видимость = ПоказатьПроданные;
	Список.Параметры.УстановитьЗначениеПараметра("ПоказатьПроданные", ПоказатьПроданные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

#Область ПодключаемоеОборудование

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт

	Если Не ИспользоватьСерийныеНомера Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для номенклатуры не ведется учет по серийным номерам.
							   |Установите флаг ""Использовать серийные номера"" в карточке номенклатуры.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	Для Каждого элОтбора Из Список.Отбор.Элементы Цикл
		Если элОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец") Тогда
			НоменклатураВладелец = элОтбора.ПравоеЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(НоменклатураВладелец) И Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		НоменклатураВладелец = Элементы.Список.ТекущиеДанные.Владелец;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НоменклатураВладелец) Тогда
		Возврат;
	КонецЕсли;

	СерийныйНомер = ПолучитьСерийныйНомерПоШтрихкоду(ДанныеШтрикодов, НоменклатураВладелец);
	Если ЗначениеЗаполнено(СерийныйНомер) Тогда

		Элементы.Список.ТекущаяСтрока = СерийныйНомер;
		ОткрытьФорму("Справочник.СерийныеНомера.ФормаОбъекта", Новый Структура("Ключ", СерийныйНомер), ЭтотОбъект);
	Иначе

		НедобавленныеШтрихкоды = ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
		НеизвестныеШтрихкоды = НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа = НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;

		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);

		Если НеизвестныеШтрихкоды.Количество() > 0 Тогда

			Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);

			ОткрытьФорму(
				"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
				Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект, , , , Оповещение);

			Возврат;

		КонецЕсли;

		ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("ОтборТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
		   
		    ТекШтрихкод.Вставить("Номенклатура", НоменклатураВладелец);
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
			
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры <> ДанныеШтрихкода.ТипНоменклатуры Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.ТипНоменклатуры));
		ИначеЕсли ДанныеШтрихкода.Номенклатура = НоменклатураВладелец Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
				НовыйСерийныйНомер = СоздатьСерйныйНомер(ТекШтрихкод.Штрихкод, НоменклатураВладелец);
				Если ЗначениеЗаполнено(НовыйСерийныйНомер) Тогда
					ОповеститьобИзменении(НовыйСерийныйНомер);
				КонецЕсли;
				
				Элементы.Список.ТекущаяСтрока = НовыйСерийныйНомер;
			Иначе
				Элементы.Список.ТекущаяСтрока = ДанныеШтрихкода.СерийныйНомер;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаСервере
Функция СоздатьСерйныйНомер(СерийныйНомерСтрока, НоменклатураВладелец)

	Об = Справочники.СерийныеНомера.СоздатьЭлемент();
	Об.Владелец = НоменклатураВладелец;
	Об.Наименование = СерийныйНомерСтрока;
	
	Попытка
		Об.Записать();
		
		СтрокаСообщения = НСтр("ru = 'Создан серийный номер: %1%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", СерийныйНомерСтрока);
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
	Исключение
	    ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Об.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			ДанныеШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
				И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				ДанныеШтрихкода.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
			Иначе
				ДанныеШтрихкода.Вставить("Коэффициент", 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

Функция ПолучитьСерийныйНомерПоШтрихкоду(ДанныеШтрихкода, НоменклатураВладелец)

	СтрокаШтрихкод = ДанныеШтрихкода[0].Штрихкод;
	ДанныеСН = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(ДанныеШтрихкода);
	
	ЗаписанныеДанныеШтрихкода = ДанныеСН[СтрокаШтрихкод];
	Если ЗаписанныеДанныеШтрихкода.Количество() = 0 Тогда
		
		Возврат Неопределено;
	ИначеЕсли ЗаписанныеДанныеШтрихкода.Номенклатура = НоменклатураВладелец Тогда
		
		Возврат ЗаписанныеДанныеШтрихкода.СерийныйНомер;
	Иначе	
		СтрокаСообщения = НСтр("ru = 'Введенный штрихкод %1% привязан к другой номенклатуре (серийному номеру): %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", СтрокаШтрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ЗаписанныеДанныеШтрихкода.Номенклатура);
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик команды командной панели табличной части.
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);
	
	Если УправлениеНебольшойФирмойСервер.ЭтоМобильныйКлиент() Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
		ПолученыШтрихкоды(МассивШтрихкодов);
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти //ПодключаемоеОборудование

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерийныеНомераПриИзменении(Элемент)
	ФормаВладельца = ЭтаФорма.ВладелецФормы;
	
	Если ФормаВладельца <> Неопределено Тогда 
		ФормаВладельца.Объект.ИспользоватьСерийныеНомера = ИспользоватьСерийныеНомера;
		ФормаВладельца.Модифицированность = Истина;
		
		УстановитьДоступностьЭлементовФормы();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
