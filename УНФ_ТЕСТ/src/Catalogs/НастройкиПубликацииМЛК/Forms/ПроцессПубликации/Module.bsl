
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПользовательСервисаЛогин  = Параметры.ПользовательСервисаЛогин;
	ПользовательСервисаПароль = Параметры.ПользовательСервисаПароль;
	КодАбонентаВладельца = Параметры.КодАбонентаВладельца;
	НастройкаПубликацииМЛК = Параметры.НастройкаПубликацииМЛК;
	
	РазделениеВключено = РаботаВМоделиСервиса.РазделениеВключено();
	ЭтоСервис1СФреш = Справочники.НастройкиПубликацииМЛК.ЭтоСервис1СФреш();
	
	НастроитьВидимостьФормыПоУмолчанию(ЭтотОбъект);
	
	ОбновитьНастройкиКабинетКлиента();
	ЗаполнитьУзелОбмена();
	ЗаполнитьВидТранспортаОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ПослеОткрытия", 0.3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЗакрытьПубликацию();
	
КонецПроцедуры

&НаКлиенте

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодсказкаПроцессВыполнениеСинхронизацииПодсказкаНажатие(Элемент)
	
	ПараметрыФормы = ДанныеОтбораЖурналаРегистрации(УзелОбмена);
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьПубликацию(Команда)
	
	ЗакрытьПубликацию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПроцессПубликации(Команда)
	
	НастроитьВидимостьФормыПоУмолчанию(ЭтотОбъект);
	НачатьПубликациюНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьФормыПоУмолчанию(Форма)
	
	Форма.Элементы.ЗавершитьПубликацию.Видимость = Ложь;
	Форма.Элементы.ПовторитьПроцессПубликации.Видимость = Ложь;
	
	ВсеПроцессыПубликации = Новый Массив;
	ВсеПроцессыПубликации.Добавить("Регистрация");
	ВсеПроцессыПубликации.Добавить("ОжиданиеНастроек");
	ВсеПроцессыПубликации.Добавить("ОтправкаНастроек");
	ВсеПроцессыПубликации.Добавить("ПодготовкаДанных");
	ВсеПроцессыПубликации.Добавить("ВыполнениеСинхронизации");
	
	Для каждого ПроцессПубликации Из ВсеПроцессыПубликации Цикл
		ДекорацияПроцессПустой          = Форма.Элементы["ПодсказкаПроцесс" + ПроцессПубликации + "Пустое"];
		ДекорацияПроцессВыполняется     = Форма.Элементы["ПодсказкаПроцесс" + ПроцессПубликации + "Выполняется"];
		ДекорацияПроцессЗавершен        = Форма.Элементы["ПодсказкаПроцесс" + ПроцессПубликации + "Успешно"];
		ДекорацияПроцессЗавершенОшибкой = Форма.Элементы["ПодсказкаПроцесс" + ПроцессПубликации + "Ошибка"];
		
		ДекорацияПроцессПустой.Видимость          = Истина;
		ДекорацияПроцессВыполняется.Видимость     = Ложь;
		ДекорацияПроцессЗавершен.Видимость        = Ложь;
		ДекорацияПроцессЗавершенОшибкой.Видимость = Ложь;
	КонецЦикла;
	
	Форма.Элементы.ПодсказкаПроцессВыполнениеСинхронизацииПодсказка.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОткрытия() Экспорт
	
	НачатьПубликациюНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПубликациюНастроек()
	
	ОчиститьСообщения();
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Шаг", 0);
	
	ПродолжитьПубликациюНастроек(Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеНачалоПроцесса()
	
	ДекорацияОтступСлева        = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Пустое"];
	ДекорацияПроцессВыполняется = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Выполняется"];
	ДекорацияПроцессЗавершен    = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Успешно"];
	ДекорацияПодсказка          = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации];
	
	ДекорацияОтступСлева.Видимость = Ложь;
	ДекорацияПроцессВыполняется.Видимость = Истина;
	ДекорацияПодсказка.ЦветТекста = Новый Цвет(51, 51, 51);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЗавершениеПроцесса()
	
	ДекорацияОтступСлева        = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Пустое"];
	ДекорацияПроцессВыполняется = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Выполняется"];
	ДекорацияПроцессЗавершен    = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Успешно"];
	
	ДекорацияПроцессВыполняется.Видимость = Ложь;
	ДекорацияПроцессЗавершен.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеЗавершениеПроцессаОшибка()
	
	ДекорацияПроцессЗавершен       = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Успешно"];
	ДекорацияПроцессВыполняется    = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Выполняется"];
	ДекорацияПроцессЗавершенОшибка = Элементы["ПодсказкаПроцесс" + ТекущийПроцессПубликации + "Ошибка"];
	
	ДекорацияПроцессЗавершен.Видимость = Ложь;
	ДекорацияПроцессВыполняется.Видимость = Ложь;
	ДекорацияПроцессЗавершенОшибка.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПубликациюНастроек(Отказ, ДополнительныеПараметры) Экспорт
	
	Если Отказ = Истина Тогда
		ОбновитьСостояниеЗавершениеПроцессаОшибка();
		Элементы.ПовторитьПроцессПубликации.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущийШаг = ДополнительныеПараметры.Шаг + 1;
	
	ДополнительныеПараметры.Шаг = ТекущийШаг;
	Продолжение = Новый ОписаниеОповещения("ПродолжитьПубликациюНастроек", ЭтотОбъект, ДополнительныеПараметры);
	
	ПубликацияЗавершена = Ложь;
	
	Если ЗначениеЗаполнено(ТекущийПроцессПубликации) Тогда
		ОбновитьСостояниеЗавершениеПроцесса();
	КонецЕсли;
	
	Если ТекущийШаг = 1 Тогда
		ТекущийПроцессПубликации = "Регистрация";
		ОбновитьСостояниеНачалоПроцесса();
		
		ОбновитьНастройкиКабинетКлиента();
		НачатьПодготовкуПриложенияКабинетКлиентаЕслиНеобходимо(Продолжение);
	ИначеЕсли ТекущийШаг = 2 Тогда
		ТекущийПроцессПубликации = "ОжиданиеНастроек";
		ОбновитьСостояниеНачалоПроцесса();
		
		ОбновитьНастройкиКабинетКлиента(Истина);
		НачатьСозданиеУзлаОбменаЕслиНеобходимо(Продолжение);
		//НачатьСозданиеУзлаОбменаЕслиНеобходимо_old(Продолжение);
	ИначеЕсли ТекущийШаг = 3 Тогда
		ТекущийПроцессПубликации = "ОтправкаНастроек";
		ОбновитьСостояниеНачалоПроцесса();
		
		ОбновитьНастройкиКабинетКлиента();
		ОтправитьНастройкиВКабинетКлиента(Продолжение);
	ИначеЕсли ТекущийШаг = 4 Тогда
		ТекущийПроцессПубликации = "ПодготовкаДанных";
		ОбновитьСостояниеНачалоПроцесса();
		
		ОбновитьНастройкиКабинетКлиента();
		НачатьОбновлениеРеквизитовУзлаОбмена(Продолжение);
	ИначеЕсли ТекущийШаг = 5 Тогда
		ТекущийПроцессПубликации = "ВыполнениеСинхронизации";
		ОбновитьСостояниеНачалоПроцесса();
		
		ОбновитьНастройкиКабинетКлиента();
		НачатьСинхронизациюУзлаОбмена(Продолжение);
	Иначе
		ПубликацияЗавершена = Истина;
	КонецЕсли;
	
	Если ПубликацияЗавершена Тогда
		Элементы.ЗавершитьПубликацию.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПубликацию()
	
	Результат = Новый Структура;
	Результат.Вставить("ПубликацияОбновлена", ПубликацияЗавершена);
	Результат.Вставить("УзелОбмена", УзелОбмена);
	
	Закрыть(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьНастройкуСинхронизацииДанных()
	
	Если НЕ ОбменДаннымиСервер.НастройкаСинхронизацииЗавершена(УзелОбмена) Тогда
		ОбменДаннымиСервер.ЗавершитьНастройкуСинхронизацииДанных(УзелОбмена);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиИнтеграцииКабинетКлиента(
		НастройкаПубликацииМЛК,
		ОписаниеПриложения = Неопределено,
		ДанныеАвторизации = Неопределено,
		УзелОбмена = Неопределено)
	
	Справочники.НастройкиПубликацииМЛК.СохранитьНастройкиИнтеграцииКабинетКлиента(
		НастройкаПубликацииМЛК, ОписаниеПриложения, ДанныеАвторизации, УзелОбмена);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиКабинетКлиента(ПолучатьПароль = Ложь)
	
	Если ПолучатьПароль Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	ТекущиеНастройкиКабинетКлиента = Справочники.НастройкиПубликацииМЛК.НастройкиИнтеграцииКабинетКлиента(НастройкаПубликацииМЛК);
	
КонецПроцедуры

#Область ПодготовкаПриложения

&НаКлиенте
Процедура НачатьПодготовкуПриложенияКабинетКлиентаЕслиНеобходимо(Продолжение)
	
	ПроверитьВключитьОбменыДанными();
	
	Если ПриложениеУжеГотово() Тогда
		ВыполнитьОбработкуОповещения(Продолжение);
		Возврат;
	КонецЕсли;
	
	Если ЭтоСервис1СФреш Тогда
		НачатьПодготовкуПриложенияКабинетКлиентаСуществующийАбонентРежимСервиса(Продолжение);
	ИначеЕсли ПользовательЗарегистрированВСервисе() Тогда
		НачатьПодготовкуПриложенияКабинетКлиентаСуществующийАбонент(Продолжение);
	Иначе
		НачатьПодготовкуПриложенияКабинетКлиентаНовыйАбонент(Продолжение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриложениеУжеГотово()
	
	ТекущиеНастройкиКабинетКлиента = Справочники.НастройкиПубликацииМЛК.НастройкиИнтеграцииКабинетКлиента(НастройкаПубликацииМЛК);
	
	ПриложениеУжеГотово = ТекущиеНастройкиКабинетКлиента <> Неопределено
		И ЗначениеЗаполнено(ТекущиеНастройкиКабинетКлиента.АдресПриложения);
	Возврат ПриложениеУжеГотово;
	
КонецФункции

&НаСервере
Функция ПользовательЗарегистрированВСервисе()
	
	Если НЕ ЗначениеЗаполнено(ПользовательСервисаЛогин) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеАвторизации = ИнтеграцияСервисФреш.НовыйДанныеАвторизации();
	ДанныеАвторизации.Логин = ПользовательСервисаЛогин;
	Возврат ИнтеграцияСервисФреш.ПользовательЗарегистрированВСервисе(ПользовательСервисаЛогин);
	
КонецФункции

&НаКлиенте
Процедура НачатьПодготовкуПриложенияКабинетКлиентаСуществующийАбонент(Продолжение)
	
	ДлительнаяОперация = ПодготовитьПриложениеКабинетКлиентаСуществующийАбонент();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьПодготовкуПриложенияКабинетКлиентаСуществующийАбонент", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПриложениеКабинетКлиентаСуществующийАбонент()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.ПодготовитьПриложениеКабинетКлиентаСуществующийАбонент";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, Метод, НастройкаПубликацииМЛК, ПользовательСервисаЛогин, ПользовательСервисаПароль, КодАбонентаВладельца);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПодготовкуПриложенияКабинетКлиентаСуществующийАбонент(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru='Не удалось зарегистрироваться по причине:
			|%1'"),
			Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодготовкуПриложенияКабинетКлиентаСуществующийАбонентРежимСервиса(Продолжение)
	
	ДлительнаяОперация = ПодготовитьПриложениеКабинетКлиентаСуществующийАбонентРежимСервиса();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьПодготовкуПриложенияКабинетКлиентаСуществующийАбонентРежимСервиса", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПриложениеКабинетКлиентаСуществующийАбонентРежимСервиса()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.ПодготовитьПриложениеКабинетКлиентаСуществующийАбонентРежимСервиса";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, Метод, НастройкаПубликацииМЛК);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПодготовкуПриложенияКабинетКлиентаСуществующийАбонентРежимСервиса(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru='Не удалось зарегистрироваться по причине:
			|%1'"),
			Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодготовкуПриложенияКабинетКлиентаНовыйАбонент(Продолжение)
	
	ДлительнаяОперация = ПодготовитьПриложениеКабинетКлиентаНовыйАбонент();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьПодготовкуПриложенияКабинетКлиентаНовыйАбонент", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПриложениеКабинетКлиентаНовыйАбонент()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.ПодготовитьПриложениеКабинетКлиентаНовыйАбонент";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, Метод, НастройкаПубликацииМЛК, ПользовательСервисаЛогин);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьПодготовкуПриложенияКабинетКлиентаНовыйАбонент(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru='Не удалось зарегистрироваться по причине:
			|%1'"),
			Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеУзлаОбменаПриложениеКабинетКлиента

&НаСервере
Функция УзелПланаОбменаПоКоду(КодУзла)
	
	Возврат ОбменДаннымиСервер.УзелПланаОбменаПоКоду(
		Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Имя,
		КодУзла);
	
КонецФункции

// new
&НаСервере
Функция НастройкиПодключенияУзлаОбмена()
	
	НастройкиПодключения = Новый Структура;
	НастройкиПодключения.Вставить("ВидТранспортаСообщенийОбмена", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	НастройкиПодключения.Вставить("WSURLВебСервиса",   ТекущиеНастройкиКабинетКлиента.АдресПриложения);
	НастройкиПодключения.Вставить("WSИмяПользователя", ТекущиеНастройкиКабинетКлиента.Пользователь);
	НастройкиПодключения.Вставить("WSПароль",          ТекущиеНастройкиКабинетКлиента.Пароль);
	НастройкиПодключения.Вставить("ИмяПланаОбмена", Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Имя);
	
	Возврат НастройкиПодключения;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруПараметровПомощникаПодключенияУзлаОбмена(СтруктураНастроекПомощника, ПараметрыКорреспондента)
	
	ИмяПланаОбмена = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	ИмяПланаОбменаКорреспондента = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	ФорматОбмена = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData";
	
	ИдентификаторНастройки = "КабинетКлиента";
	
	ИдентификаторИнформационнойБазыИсточника = ОбменДаннымиСервер.КодПредопределенногоУзлаПланаОбмена(ИмяПланаОбмена);
	ИдентификаторИнформационнойБазыПриемника = ПараметрыКорреспондента.КодЭтогоУзла;
	
	Префикс = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	Если ПустаяСтрока(Префикс) Тогда
		ДоступноИзменениеПрефикса = Истина;
		ОбменДаннымиПереопределяемый.ПриОпределенииПрефиксаИнформационнойБазыПоУмолчанию(Префикс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыКорреспондента.ПрефиксИнформационнойБазы) Тогда
		ПрефиксКорреспондента = ПараметрыКорреспондента.ПрефиксИнформационнойБазы;
		ДоступноИзменениеПрефиксаКорреспондента = Ложь;
	Иначе
		ПрефиксКорреспондента = ПараметрыКорреспондента.ПрефиксИнформационнойБазыПоУмолчанию;
		ДоступноИзменениеПрефиксаКорреспондента = Истина;
	КонецЕсли;
	
	УзелОбмена = Неопределено;
	
	ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента =
		Не ОбменДаннымиПовтИсп.ЭтоПланОбменаXDTO(ИмяПланаОбмена)
			Или СтрДлина(ИдентификаторИнформационнойБазыПриемника) <> 36
			Или СтрДлина(ИдентификаторИнформационнойБазыИсточника) <> 36;
	ИспользоватьПрефиксыДляНастройкиОбмена = Не ОбменДаннымиXDTOСервер.ПоддерживаетсяВерсияСИдентификаторомОбменаДанными(
			ПланыОбмена[ИмяПланаОбмена].ПустаяСсылка());
	
	ВерсияФорматаОбмена = "1.6";
	ПоддерживаемыеОбъектыФорматаКорреспондента = Новый ХранилищеЗначения(
			ПараметрыКорреспондента.ПоддерживаемыеОбъектыФормата, Новый СжатиеДанных(9));
	ИнтернетВебАдрес = НастройкиПодключенияУзлаОбмена().WSURLВебСервиса;
	ИнтернетЗапомнитьПароль = Истина;
	ИнтернетИмяПользователя = НастройкиПодключенияУзлаОбмена().WSИмяПользователя;
	ИнтернетПароль = НастройкиПодключенияУзлаОбмена().WSПароль;
	Наименование = ОбменДаннымиВМоделиСервиса.СформироватьНаименованиеПредопределенногоУзла();
	Если ЗначениеЗаполнено(ПараметрыКорреспондента.НаименованиеИнформационнойБазы) Тогда
		НаименованиеКорреспондента = ПараметрыКорреспондента.НаименованиеИнформационнойБазы;
	Иначе
		НаименованиеКорреспондента = ПараметрыКорреспондента.НаименованиеИнформационнойБазыПоУмолчанию;
	КонецЕсли;
	ВидПодключения = "Интернет";
	
	
	СтруктураНастроекПомощника.Вставить("ИмяПланаОбмена",               ИмяПланаОбмена);
	СтруктураНастроекПомощника.Вставить("ИмяПланаОбменаКорреспондента", ИмяПланаОбменаКорреспондента);
	
	СтруктураНастроекПомощника.Вставить("ВариантНастройкиОбмена", ИдентификаторНастройки);
	
	СтруктураНастроекПомощника.Вставить("ФорматОбмена", ФорматОбмена);
	
	СтруктураНастроекПомощника.Вставить("ВариантРаботыМастера", "НастроитьНовыйОбменДанными");
	
	СтруктураНастроекПомощника.Вставить("СсылкаНового", Неопределено);
	
	СтруктураНастроекПомощника.Вставить("КодПредопределенногоУзла", ИдентификаторИнформационнойБазыИсточника);
		
	СтруктураНастроекПомощника.Вставить("КодНовогоУзлаВторойБазы", ИдентификаторИнформационнойБазыПриемника);
	СтруктураНастроекПомощника.Вставить("КодУзлаКорреспондента",   ИдентификаторИнформационнойБазыПриемника);
	
	СтруктураНастроекПомощника.Вставить("НаименованиеЭтойБазы",   Наименование);
	СтруктураНастроекПомощника.Вставить("НаименованиеВторойБазы", НаименованиеКорреспондента);
	
	СтруктураНастроекПомощника.Вставить("ПрефиксИнформационнойБазыИсточника", Префикс);
	СтруктураНастроекПомощника.Вставить("ПрефиксИнформационнойБазыПриемника", ПрефиксКорреспондента);
	
	СтруктураНастроекПомощника.Вставить("УзелИнформационнойБазы", УзелОбмена);
	
	СтруктураНастроекПомощника.Вставить("ИспользоватьПрефиксыДляНастройкиОбмена",               ИспользоватьПрефиксыДляНастройкиОбмена);
	СтруктураНастроекПомощника.Вставить("ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента", ИспользоватьПрефиксыДляНастройкиОбменаКорреспондента);
	
	СтруктураНастроекПомощника.Вставить("ИдентификаторИнформационнойБазыИсточника", ИдентификаторИнформационнойБазыИсточника);
	СтруктураНастроекПомощника.Вставить("ИдентификаторИнформационнойБазыПриемника", ИдентификаторИнформационнойБазыПриемника);
	
	СтруктураНастроекПомощника.Вставить("ВерсияФорматаФайлаНастроекОбменаДанными",
		ОбменДаннымиСервер.МодульПомощникСозданияОбменаДанными().ВерсияФорматаНастроекОбменаДанными());
		
	СтруктураНастроекПомощника.Вставить("ВерсияФорматаОбмена", ВерсияФорматаОбмена);
	СтруктураНастроекПомощника.Вставить("ПоддерживаемыеОбъектыФормата", ПоддерживаемыеОбъектыФорматаКорреспондента);
	
	СтруктураНастроекПомощника.Вставить("WSURLВебСервиса", ИнтернетВебАдрес);
	СтруктураНастроекПомощника.Вставить("WSЗапомнитьПароль", ИнтернетЗапомнитьПароль);
	СтруктураНастроекПомощника.Вставить("WSИмяПользователя", ИнтернетИмяПользователя);
	СтруктураНастроекПомощника.Вставить("WSПароль", ИнтернетПароль);
	
	СтруктураНастроекПомощника.Вставить("ВидТранспортаСообщенийОбмена", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	
	СтруктураНастроекПомощника.Вставить("ИспользоватьПараметрыТранспортаCOM",   Ложь);
	СтруктураНастроекПомощника.Вставить("ИспользоватьПараметрыТранспортаEMAIL", Ложь);
	СтруктураНастроекПомощника.Вставить("ИспользоватьПараметрыТранспортаFILE",  Ложь);
	СтруктураНастроекПомощника.Вставить("ИспользоватьПараметрыТранспортаFTP",   Ложь);
	СтруктураНастроекПомощника.Вставить("ПарольАрхиваСообщенияОбмена", "");
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеУзлаОбменаЕслиНеобходимо(Продолжение)
	
	УзелОбмена = Неопределено;
	Если ЗначениеЗаполнено(ТекущиеНастройкиКабинетКлиента.КодУзлаОбмена) Тогда
		УзелОбмена = УзелПланаОбменаПоКоду(ТекущиеНастройкиКабинетКлиента.КодУзлаОбмена);
	КонецЕсли;
	
	УзелОбменаУжеСоздан = ЗначениеЗаполнено(УзелОбмена);
	Если УзелОбменаУжеСоздан Тогда
		//ОбновитьНастройкиТранспортаОбменаЕслиНеобходимо(Продолжение);
		ВыполнитьОбработкуОповещения(Продолжение);
		Возврат;
	КонецЕсли;
	
	ПроверитьПодключениеККорреспонденту();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ПроверитьПодключениеККорреспондентуЗавершение", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеККорреспонденту()
	
	НастройкиПодключения = НастройкиПодключенияУзлаОбмена();
	
	МетодПроверкаПодключения = "Обработки.ПомощникСозданияОбменаДанными.ПроверитьПодключениеККорреспонденту";
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкиПодключения", НастройкиПодключения);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(МетодПроверкаПодключения, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеККорреспондентуЗавершение(Результат, Продолжение) Экспорт
	Отказ = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки,,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиПодключения(Результат.АдресРезультата, Отказ);
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжилания = Новый ОписаниеОповещения("СохранитьНастройкиПодключенияЗавершение", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжилания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПодключения(АдресРезультатПроверки, Отказ)
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресРезультатПроверки);
	
	ПроверкаПодключенияВыполнена = РезультатПроверки.ПодключениеУстановлено
		И РезультатПроверки.ПодключениеРазрешено;
	
	Если Не ПроверкаПодключенияВыполнена
		И Не ПустаяСтрока(РезультатПроверки.СообщениеОбОшибке) Тогда
		ОбщегоНазначения.СообщитьПользователю(РезультатПроверки.СообщениеОбОшибке,,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыКорреспондента = РезультатПроверки.ПараметрыКорреспондента;
	НастройкиПодключения = Новый Структура;
	ЗаполнитьСтруктуруПараметровПомощникаПодключенияУзлаОбмена(НастройкиПодключения, ПараметрыКорреспондента);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	МетодСохранитьНастройкиПодключения = "Обработки.ПомощникСозданияОбменаДанными.СохранитьНастройкиПодключения";
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкиПодключения", НастройкиПодключения);
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(МетодСохранитьНастройкиПодключения, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПодключенияЗавершение(Результат, Продолжение) Экспорт
	Отказ = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки,,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиПодключенияЗавершениеСервер(Результат.АдресРезультата, Отказ);
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	ПослеПопыткиСозданияУзлаОбмена(Продолжение);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПодключенияЗавершениеСервер(АдресРезультатПодключения, Отказ)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультатПодключения);
	
	Если ЗначениеЗаполнено(Результат.СообщениеОбОшибке) Тогда
		ОбщегоНазначения.СообщитьПользователю(Результат.СообщениеОбОшибке,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	УзелОбмена = Результат.УзелОбмена;
	ВидТранспортаОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПопыткиСозданияУзлаОбмена(Продолжение) Экспорт
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		ТекстОшибки = НСтр("ru='Не удалось создать узел обмена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	ЗавершитьНастройкуСинхронизацииДанных();
	СохранитьНастройкиИнтеграцииКабинетКлиента(НастройкаПубликацииМЛК,,, УзелОбмена);
	
	Оповестить("Запись_УзелПланаОбмена");
	
	НачатьНачальнуюРегистрациюИзмененийУзлаОбмена(Продолжение);
	
КонецПроцедуры

/////////////////// old

&НаКлиенте
Процедура НачатьСозданиеУзлаОбменаЕслиНеобходимо_old(Продолжение)
	
	УзелОбмена = Неопределено;
	Если ЗначениеЗаполнено(ТекущиеНастройкиКабинетКлиента.КодУзлаОбмена) Тогда
		УзелОбмена = УзелПланаОбменаПоКоду(ТекущиеНастройкиКабинетКлиента.КодУзлаОбмена);
	КонецЕсли;
	
	УзелОбменаУжеСоздан = ЗначениеЗаполнено(УзелОбмена);
	Если УзелОбменаУжеСоздан Тогда
		ВыполнитьОбработкуОповещения(Продолжение);
		Возврат;
	КонецЕсли;
	
	НастройкаПодключения = Новый Структура;
	НастройкаПодключения.Вставить("ИмяПланаОбмена",         "СинхронизацияДанныхЧерезУниверсальныйФормат");
	НастройкаПодключения.Вставить("ИдентификаторНастройки", "КабинетКлиента");
	НастройкаПодключения.Вставить("УНФ_ИмяПользователя",    ТекущиеНастройкиКабинетКлиента.Пользователь);
	НастройкаПодключения.Вставить("УНФ_Пароль",             ТекущиеНастройкиКабинетКлиента.Пароль);
	НастройкаПодключения.Вставить("УНФ_АдресПриложения",    ТекущиеНастройкиКабинетКлиента.АдресПриложения);
	НастройкаПодключения.Вставить("УНФ_НомерОбласти",       ТекущиеНастройкиКабинетКлиента.НомерОбласти);
	
	ПослеПопыткиСозданияУзла = Новый ОписаниеОповещения("ПослеПопыткиСозданияУзлаОбмена_old", ЭтотОбъект, Продолжение);
	
	ОткрытьФорму(
		"Обработка.ПомощникСозданияОбменаДаннымиУНФ.Форма.НастройкаПодключения",
		НастройкаПодключения,,,,,
		ПослеПопыткиСозданияУзла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПопыткиСозданияУзлаОбмена_old(Результат, Продолжение) Экспорт
	Отказ = Ложь;
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("ТекстОшибки") Тогда
		
		Отказ = Истина;
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ТекстОшибки);
	КонецЕсли;
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	УзелОбмена = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Результат.Свойство("УзелОбмена", УзелОбмена)
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Отказ = Истина;
		ТекстОшибки = НСтр("ru='Не удалось создать узел обмена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиИнтеграцииКабинетКлиента(НастройкаПубликацииМЛК,,, УзелОбмена);
	
	НачатьНачальнуюРегистрациюИзмененийУзлаОбмена(Продолжение);
	
КонецПроцедуры

/////////////////// old

&НаКлиенте
Процедура НачатьНачальнуюРегистрациюИзмененийУзлаОбмена(Продолжение)
	
	ДлительнаяОперация = ВыполнитьНачальнуюРегистрациюИзмененийУзлаОбмена();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьНачальнуюРегистрациюИзмененийУзлаОбмена", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьНачальнуюРегистрациюИзмененийУзлаОбмена()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.ЗарегистрироватьДанныеДляНачальнойВыгрузки";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, Метод, НастройкаПубликацииМЛК);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьНачальнуюРегистрациюИзмененийУзлаОбмена(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru='Не удалось зарегистрировать данные к первоначальной выгрузке по причине:
			|%1'"),
			Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		НастроитьЗапускСинхронизацииПоРасписанию(УзелОбмена);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьВключитьОбменыДанными()
	
	ИспользоватьСинхронизациюДанных = ПолучитьФункциональнуюОпцию("ИспользоватьСинхронизациюДанных");
	Если НЕ ИспользоватьСинхронизациюДанных Тогда
		Константы.ИспользоватьСинхронизациюДанных.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗапускСинхронизацииПоРасписанию(Корреспондент)
	
	РасписаниеСинхронизации = РасписаниеСинхронизации();
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		КлючЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Обмен данными с внешней системой (%1)'"),
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелОбмена, "Код"));
		
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
		ПараметрыЗадания.Вставить("Использование", Истина);
		ПараметрыЗадания.Вставить("ИмяМетода",     "ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы");
		
		ПараметрыОбмена = ОбменДаннымиСервер.ПараметрыОбмена();
		ПараметрыОбмена.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.WS;
		ПараметрыОбмена.ДлительнаяОперация = Истина;
		ПараметрыОбмена.ДлительнаяОперацияРазрешена = Истина;
		ПараметрыОбмена.ВыполнятьЗагрузку = Истина;
		ПараметрыОбмена.ВыполнятьВыгрузку = Истина;
		
		ПараметрыЗадания.Вставить("Параметры", Новый Массив);
		ПараметрыЗадания.Параметры.Добавить(УзелОбмена);
		ПараметрыЗадания.Параметры.Добавить(ПараметрыОбмена);
		ПараметрыЗадания.Параметры.Добавить(Ложь);
		
		ПараметрыЗадания.Вставить("Ключ",       КлючЗадания);
		ПараметрыЗадания.Вставить("Расписание", РасписаниеСинхронизации);
		
		ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
	Иначе
		Справочники.СценарииОбменовДанными.СоздатьСценарий(УзелОбмена, РасписаниеСинхронизации, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РасписаниеСинхронизации()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	ПятьМинутВСекундах = 300;
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.ДниНедели   = ДниНедели;
	Расписание.Месяцы      = Месяцы;
	Расписание.ПериодПовтораВТечениеДня = ПятьМинутВСекундах;
	Расписание.ПериодПовтораДней        = 1; // Каждый день.
	
	Возврат Расписание;
	
КонецФункции

#КонецОбласти

#Область ОтправкаНастроекВКабинетКлиента

&НаКлиенте
Процедура ОтправитьНастройкиВКабинетКлиента(Продолжение)
	Отказ = Ложь;
	
	ОтправитьНастройкиПубликацииМЛКвПриложениеКабинетКлиента(Отказ);
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьНастройкиПубликацииМЛКвПриложениеКабинетКлиента(Отказ)
	
	Попытка
		КонструкторМобильногоПриложения.СоздатьИзменитьСлужебногоПользователяКабинетКлиента(Истина);
		
		НастройкаПубликацииМЛКОбъект = НастройкаПубликацииМЛК.ПолучитьОбъект();
		НастройкаПубликацииМЛКОбъект.ОтправитьДанныеВПриложениеКабинетКлиента();
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияУзлаОбмена

&НаКлиенте
Процедура НачатьОбновлениеРеквизитовУзлаОбмена(Продолжение)
	
	ДлительнаяОперация = ОбновитьРеквизитыУзлаОбмена();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьОбновлениеРеквизитовУзлаОбмена", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ОбновитьРеквизитыУзлаОбмена()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияПроцедуры();
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.АктуализироватьИзмененияПланаОбмена";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполнения, Метод, НастройкаПубликацииМЛК, УзелОбмена);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбновлениеРеквизитовУзлаОбмена(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru='Не удалось обновить изменения в узле обмена по причине:
			|%1'"),
			Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеСинхронизацииПриложениеКабинетКлиента

&НаКлиенте
Процедура НачатьСинхронизациюУзлаОбмена(Продолжение)
	
	КоличествоПовторовСинхронизации = КоличествоПовторовСинхронизации + 1;
	
	ДлительнаяОперация = СинхронизироватьУзелОбмена();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Ложь;
	
	ЗавершениеОжидания = Новый ОписаниеОповещения("ЗавершитьСинхронизациюУзлаОбмена", ЭтотОбъект, Продолжение);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ЗавершениеОжидания, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция СинхронизироватьУзелОбмена()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.ЗапуститьНеВФоне = Ложь;
	
	РазрешитьДлительнуюОперацию = КоличествоПовторовСинхронизации > 1;
	
	Метод = "Справочники.НастройкиПубликацииМЛК.СинхронизироватьУзелОбмена";
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения, Метод, УзелОбмена, РазрешитьДлительнуюОперацию);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьСинхронизациюУзлаОбмена(Результат, Продолжение) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОшибки = СтрШаблон(
			НСтр("ru='Не удалось запустить синхронизацию узла обмена по причине:
			|%1'"),
			Результат.ПодробноеПредставлениеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	Иначе
		ОбменЗавершенУспешно = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	
	Если ОбменЗавершенУспешно = Ложь Тогда
		Отказ = Истина;
		Элементы.ПодсказкаПроцессВыполнениеСинхронизацииПодсказка.Видимость = Истина;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОбработатьРезультатДлительнойОпераци(Результат)
	
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОтбораЖурналаРегистрации(УзелИнформационнойБазы)
	
	ОтбираемыеСобытия = Новый Массив;
	ОтбираемыеСобытия.Добавить(ОбменДаннымиСервер.КлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных));
	ОтбираемыеСобытия.Добавить(ОбменДаннымиСервер.КлючСообщенияЖурналаРегистрации(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных));
	
	СостоянияОбменовДаннымиЗагрузка = ОбменДаннымиСервер.СостоянияОбменовДанными(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
	СостоянияОбменовДаннымиВыгрузка = ОбменДаннымиСервер.СостоянияОбменовДанными(УзелИнформационнойБазы, Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
	
	Результат = Новый Структура;
	Результат.Вставить("СобытиеЖурналаРегистрации", ОтбираемыеСобытия);
	Результат.Вставить("ДатаНачала",    Мин(СостоянияОбменовДаннымиЗагрузка.ДатаНачала, СостоянияОбменовДаннымиВыгрузка.ДатаНачала));
	Результат.Вставить("ДатаОкончания", Макс(СостоянияОбменовДаннымиЗагрузка.ДатаОкончания, СостоянияОбменовДаннымиВыгрузка.ДатаОкончания));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПереводУзлаОбменаНаПодключениеWS

&НаСервере
Процедура ЗаполнитьУзелОбмена()
	
	Если ТекущиеНастройкиКабинетКлиента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеНастройкиКабинетКлиента.КодУзлаОбмена) Тогда
		УзелОбмена = УзелПланаОбменаПоКоду(ТекущиеНастройкиКабинетКлиента.КодУзлаОбмена);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидТранспортаОбмена()
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаТранспорта = РегистрыСведений.НастройкиТранспортаОбменаДанными.НастройкиТранспорта(УзелОбмена);
	ВидТранспортаОбмена = НастройкаТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию;
	
КонецПроцедуры

// В ранних версиях транспорт узла обмена работал через менеджер сервиса.
// Такие обмены нужно перевести на прямое подключение.
// 
// Возвращаемое значение:
//   - Булево
//
&НаСервере
Функция НужноПеревестиУзелОбменаНаПодключениеWS()
	
	Если НЕ РазделениеВключено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//НастройкиИнтеграции = Справочники.НастройкиПубликацииМЛК.НастройкиИнтеграцииКабинетКлиента(НастройкаПубликацииМЛК);
	//Если НЕ ЗначениеЗаполнено(НастройкиИнтеграции.КодУзлаОбмена) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	//
	//НастройкаТранспорта = РегистрыСведений.НастройкиТранспортаОбменаДанными.НастройкиТранспорта(УзелОбмена);
	//Возврат НастройкаТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию <> Перечисления.ВидыТранспортаСообщенийОбмена.WS;
	
	Возврат ВидТранспортаОбмена <> Перечисления.ВидыТранспортаСообщенийОбмена.WS;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьНастройкиТранспортаОбменаЕслиНеобходимо(Продолжение)
	
	Если НЕ НужноПеревестиУзелОбменаНаПодключениеWS() Тогда
		ВыполнитьОбработкуОповещения(Продолжение);
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	ОбновитьНастройкиТранспортаОбмена(Отказ);
	ПриНачалеУдаленияНастройкиСинхронизации(Продолжение, Отказ);
	
	Если Отказ Тогда
		ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиТранспортаОбмена(Отказ)
	
	ОбновитьНастройкиТранспортаВКорреспонденте(Отказ);
	ОбновитьНастройкиТранспортаВОсновнойБазе(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиТранспортаВКорреспонденте(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СервисУстановкаНастроек = "hs/mobclient/exchangeSettings";
	Авторизация = ОтправкаЗапросов.СтрокаBasicАутентификации(
		ТекущиеНастройкиКабинетКлиента.Пользователь,
		ТекущиеНастройкиКабинетКлиента.Пароль);
	
	ПараметрыОтправки = ОтправкаЗапросов.НовыйПараметрыОтправки();
	ПараметрыОтправки.URL = ТекущиеНастройкиКабинетКлиента.АдресПриложения + "/" + СервисУстановкаНастроек;
	ПараметрыОтправки.Заголовки.Вставить("Authorization", Авторизация);
	Ответ = ОтправкаЗапросов.ОтправитьЗапрос(ПараметрыОтправки);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ТекстОшибки = Ответ.ПолучитьТелоКакСтроку();
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиТранспортаВОсновнойБазе(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПланаОбмена = Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Имя;
	
	УстановитьПривилегированныйРежим(Истина);
	НастройкиИнтеграции = Справочники.НастройкиПубликацииМЛК.НастройкиИнтеграцииКабинетКлиента(НастройкаПубликацииМЛК);
	УстановитьПривилегированныйРежим(Ложь);
	
	УзелОбмена = ОбменДаннымиСервер.УзелПланаОбменаПоКоду(ИмяПланаОбмена, НастройкиИнтеграции.КодУзлаОбмена);
	
	НачатьТранзакцию();
	Попытка
		
		// Удалить настройку обмена через менеджер сервиса.
		СтараяНастройкаУзла = РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.СоздатьМенеджерЗаписи();
		СтараяНастройкаУзла.Корреспондент = УзелОбмена;
		СтараяНастройкаУзла.Прочитать();
		СтараяНастройкаУзла.Удалить();
		
		РегистрыСведений.НастройкиОбменаДаннымиXDTO.ОбновитьНастройкиКорреспондента(УзелОбмена, "ОбластьДанныхКорреспондента", Неопределено);
		
		// Добавить новую настройку обмена через ws.
		НовыеНастройкиУзла = Новый Структура;
		НовыеНастройкиУзла.Вставить("Корреспондент", УзелОбмена);
		НовыеНастройкиУзла.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", Перечисления.ВидыТранспортаСообщенийОбмена.WS);
		
		НовыеНастройкиУзла.Вставить("WSURLВебСервиса", НастройкиИнтеграции.АдресПриложения);
		НовыеНастройкиУзла.Вставить("WSЗапомнитьПароль", Истина);
		НовыеНастройкиУзла.Вставить("WSИмяПользователя", НастройкиИнтеграции.Пользователь);
		НовыеНастройкиУзла.Вставить("WSПароль", НастройкиИнтеграции.Пароль);
		НовыеНастройкиУзла.Вставить("WSИспользоватьПередачуБольшогоОбъемаДанных", Истина);
		
		РегистрыСведений.НастройкиТранспортаОбменаДанными.ДобавитьЗапись(НовыеНастройкиУзла);
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#Область УдалениеНастройкиСинхронизации

&НаКлиенте
Процедура ПриНачалеУдаленияНастройкиСинхронизации(Продолжение, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПродолжениеАдресВХранилище = ПоместитьВоВременноеХранилище(Продолжение, УникальныйИдентификатор);
	
	ПродолжитьОжидание = Истина;
	
	ПриНачалеУдаленияНастройкиСинхронизацииНаСервере(ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ОбменДаннымиКлиент.ИнициализироватьПараметрыОбработчикаОжидания(
			ПараметрыОбработчикаОжидания);
			
		ПодключитьОбработчикОжидания("ПриОжиданииУдаленияНастройкиСинхронизации",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	Иначе
		ПриЗавершенииУдаленияНастройкиСинхронизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОжиданииУдаленияНастройкиСинхронизации()
	
	ПродолжитьОжидание = Ложь;
	
	ЭтоОбменСПриложениемВСервисе = Истина;
	ПриОжиданииУдаленияНастройкиСинхронизацииНаСервере(ЭтоОбменСПриложениемВСервисе,
		ПараметрыОбработчика, ПродолжитьОжидание);
	
	Если ПродолжитьОжидание Тогда
		ОбменДаннымиКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		
		ПодключитьОбработчикОжидания("ПриОжиданииУдаленияНастройкиСинхронизации",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	Иначе
		ПараметрыОбработчикаОжидания = Неопределено;
		ПриЗавершенииУдаленияНастройкиСинхронизации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииУдаленияНастройкиСинхронизации()
	Отказ = Ложь;
	
	СообщениеОбОшибке = "";
	
	НастройкаУдалена = Истина;
	НастройкаУдаленаВКорреспонденте = Истина;
	
	ПриЗавершенииУдаленияНастройкиСинхронизацииНаСервере(НастройкаУдалена,
		НастройкаУдаленаВКорреспонденте, СообщениеОбОшибке);
	
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке,,,, Отказ);
	КонецЕсли;
	
	Продолжение = ПолучитьИзВременногоХранилища(ПродолжениеАдресВХранилище);
	ВыполнитьОбработкуОповещения(Продолжение, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПриНачалеУдаленияНастройкиСинхронизацииНаСервере(ПродолжитьОжидание)
	
	НастройкиУдаления = Новый Структура;
	
	НастройкиУдаления.Вставить("ИмяПланаОбмена", Метаданные.ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Имя);
	НастройкиУдаления.Вставить("ОбластьДанныхКорреспондента", ТекущиеНастройкиКабинетКлиента.НомерОбласти);
	
	МодульПомощникУдаленияНастройки = ОбменДаннымиСервер.МодульПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете();
	
	Если МодульПомощникУдаленияНастройки = Неопределено Тогда
		ПродолжитьОжидание = Ложь;
		Возврат;
	КонецЕсли;
	
	МодульПомощникУдаленияНастройки.ПриНачалеУдаленияНастройкиСинхронизации(НастройкиУдаления,
		ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриОжиданииУдаленияНастройкиСинхронизацииНаСервере(ЭтоОбменСПриложениемВСервисе, ПараметрыОбработчика, ПродолжитьОжидание)
	
	МодульПомощникУдаленияНастройки = ОбменДаннымиСервер.МодульПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете();
	
	Если МодульПомощникУдаленияНастройки = Неопределено Тогда
		ПродолжитьОжидание = Ложь;
		Возврат;
	КонецЕсли;
	
	ПродолжитьОжидание = Ложь;
	МодульПомощникУдаленияНастройки.ПриОжиданииУдаленияНастройкиСинхронизации(ПараметрыОбработчика, ПродолжитьОжидание);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииУдаленияНастройкиСинхронизацииНаСервере(НастройкаУдалена, НастройкаУдаленаВКорреспонденте, СообщениеОбОшибке)
	
	МодульПомощникУдаленияНастройки = ОбменДаннымиСервер.МодульПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете();
	
	Если МодульПомощникУдаленияНастройки = Неопределено Тогда
		НастройкаУдалена = Ложь;
		НастройкаУдаленаВКорреспонденте = Ложь;
		Возврат;
	КонецЕсли;
	
	СтатусЗавершения = Неопределено;
	
	МодульПомощникУдаленияНастройки.ПриЗавершенииУдаленияНастройкиСинхронизации(
		ПараметрыОбработчика, СтатусЗавершения);
		
	Если СтатусЗавершения.Отказ Тогда
		НастройкаУдалена = Ложь;
		
		СообщениеОбОшибке = СтатусЗавершения.СообщениеОбОшибке;
		Возврат;
	Иначе
		РезультатВыполнения = СтатусЗавершения.Результат;
		
		НастройкаУдалена                = РезультатВыполнения.НастройкаУдалена;
		НастройкаУдаленаВКорреспонденте = РезультатВыполнения.НастройкаУдаленаВКорреспонденте;
		СообщениеОбОшибке               = РезультатВыполнения.СообщениеОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
