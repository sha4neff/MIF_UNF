#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Функция возвращает список имен «ключевых» реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ЕдиницаИзмерения");
	Результат.Добавить("ТипНоменклатуры");
	
	Если Справочники.ВидыЦен.ИспользуютсяЦеновыеГруппыВДинамическихВидахЦен() Тогда
		
		Результат.Добавить("ЦеноваяГруппа");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьБлокируемыеРеквизитыОбъекта()

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("Артикул");
	РедактируемыеРеквизиты.Добавить("Вес");
	РедактируемыеРеквизиты.Добавить("Весовой");
	РедактируемыеРеквизиты.Добавить("ВыписыватьГарантийныйТалон");
	РедактируемыеРеквизиты.Добавить("Высота");
	РедактируемыеРеквизиты.Добавить("ГарантийныйСрок");
	РедактируемыеРеквизиты.Добавить("ДатаОкончанияДействия");
	РедактируемыеРеквизиты.Добавить("Длина");
	РедактируемыеРеквизиты.Добавить("ИсключитьИзПрайсЛистов");
	РедактируемыеРеквизиты.Добавить("ИспользоватьДатуПроизводстваПартии");
	РедактируемыеРеквизиты.Добавить("ИспользоватьПартии");
	РедактируемыеРеквизиты.Добавить("ИспользоватьХарактеристики");
	РедактируемыеРеквизиты.Добавить("КатегорияНоменклатуры");
	РедактируемыеРеквизиты.Добавить("Комментарий");
	РедактируемыеРеквизиты.Добавить("МетодОценки");
	РедактируемыеРеквизиты.Добавить("НаправлениеДеятельности");
	РедактируемыеРеквизиты.Добавить("Недействителен");
	РедактируемыеРеквизиты.Добавить("НижняяГраницаОстатков");
	РедактируемыеРеквизиты.Добавить("Номинал");
	РедактируемыеРеквизиты.Добавить("Объем");
	РедактируемыеРеквизиты.Добавить("Периодичность");
	РедактируемыеРеквизиты.Добавить("Поставщик");
	РедактируемыеРеквизиты.Добавить("ПроверятьЗаполнениеПартий");
	РедактируемыеРеквизиты.Добавить("ПроверятьЗаполнениеХарактеристики");
	РедактируемыеРеквизиты.Добавить("Производитель");
	РедактируемыеРеквизиты.Добавить("РеквизитДопУпорядочиванияУНФ");
	РедактируемыеРеквизиты.Добавить("Склад");
	РедактируемыеРеквизиты.Добавить("Изготовитель");
	РедактируемыеРеквизиты.Добавить("СпособПополнения");
	РедактируемыеРеквизиты.Добавить("СрокДействияФлагаНовинка");
	РедактируемыеРеквизиты.Добавить("СрокИсполненияЗаказа");
	РедактируемыеРеквизиты.Добавить("СрокПополнения");
	РедактируемыеРеквизиты.Добавить("ВидСтавкиНДС");
	РедактируемыеРеквизиты.Добавить("СтранаПроисхождения");
	РедактируемыеРеквизиты.Добавить("СчетУчетаДоходов");
	РедактируемыеРеквизиты.Добавить("СчетУчетаЗапасов");
	РедактируемыеРеквизиты.Добавить("СчетУчетаЗатрат");
	РедактируемыеРеквизиты.Добавить("Ширина");
	РедактируемыеРеквизиты.Добавить("ЭтоНовинка");
	РедактируемыеРеквизиты.Добавить("Ячейка");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	
	РедактируемыеРеквизиты.Добавить("ЕдиницаИзмерения");
	РедактируемыеРеквизиты.Добавить("ТипНоменклатуры");
	РедактируемыеРеквизиты.Добавить("ЦеноваяГруппа");
	
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

// Возвращает основную цену продажи для указанной номенклатуры, по указанному виду цен.
//
// Номенклатура (Справочник.Номенклатура) - номенклатура по которой необходимо вычислить цену (обязательна к заполнению);
// ВидЦен (Справочник.ВидыЦен или Неопределено) - если Неопределено, вычисляем основный вид цен 
//		методом Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
//
Функция ПолучитьОсновнуюЦенуПродажи(ВидЦен, Номенклатура, ЕдиницаИзмерения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) 
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатуры) Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК ОсновнаяЦенаПродажи
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ВидЦен = &ВидЦен
	|				И Номенклатура = &Номенклатура
	|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|				И Актуальность
	|				И &ПараметрЕдиницаИзмерения) КАК ЦеныНоменклатурыСрезПоследних");
	
	Запрос.УстановитьПараметр("ВидЦен", 
		?(ЗначениеЗаполнено(ВидЦен), ВидЦен, Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи())
		);
	
	Запрос.УстановитьПараметр("Номенклатура", 
		Номенклатура
		);
		
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПараметрЕдиницаИзмерения", "ЕдиницаИзмерения = &ЕдиницаИзмерения");
		Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПараметрЕдиницаИзмерения", "ИСТИНА");
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат ?(Выборка.Следующий(), Выборка.ОсновнаяЦенаПродажи, 0);
	
КонецФункции //ПолучитьОсновнуюЦенуПродажи()

Функция ЕстьХарактеристики(Номенклатура) Экспорт
	
	Характеристики = Справочники.ХарактеристикиНоменклатуры.Выбрать(, Номенклатура);
	Если Характеристики.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если Параметры.ВыборГруппИЭлементов <> ИспользованиеГруппИЭлементов.Группы
		И Не Параметры.Отбор.Свойство("Недействителен") Тогда
		
		Параметры.Отбор.Вставить("Недействителен", Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВерсионированиеОбъектов

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#Область ЗагрузкаДанныхИзВнешнегоИсточника

Процедура ПриОпределенииЗначенияПоУмолчанию(СправочникСсылка, ИмяРеквизита, ВходящиеДанные, СтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию)
	
	Если СтрокаСопоставлена 
		И НЕ ЗначениеЗаполнено(ВходящиеДанные) Тогда
		
		ЗначениеПоУмолчанию = СправочникСсылка[ИмяРеквизита];
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОпределенииОбразцовЗагрузкиДанных(НастройкиЗагрузкиДанных, УникальныйИдентификатор) Экспорт
	
	Образец_xlsx = ПолучитьМакет("ОбразецЗагрузкиДанных_xlsx");
	ОбразецЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Образец_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_xlsx", ОбразецЗагрузкиДанных_xlsx);
	
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_mxl", "ОбразецЗагрузкиДанных_mxl");
	
	Образец_csv = ПолучитьМакет("ОбразецЗагрузкиДанных_csv");
	ОбразецЗагрузкиДанных_csv = ПоместитьВоВременноеХранилище(Образец_csv, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ОбразецЗагрузкиДанных_csv", ОбразецЗагрузкиДанных_csv);
	
	Шаблон_xlsx = ПолучитьМакет("ШаблонЗагрузкиДанных_xlsx");
	ШаблонЗагрузкиДанных_xlsx = ПоместитьВоВременноеХранилище(Шаблон_xlsx, УникальныйИдентификатор);
	НастройкиЗагрузкиДанных.Вставить("ШаблонЗагрузкиДанных_xlsx", ШаблонЗагрузкиДанных_xlsx);
	
КонецПроцедуры

Процедура ПоляЗагрузкиДанныхИзВнешнегоИсточника(ТаблицаПолейЗагрузки, НастройкиЗагрузкиДанных) Экспорт
	
	//
	// Для группы полей действует правило: хотя бы одно поле в группе должно быть выбрано в колонках
	//
	
	ОписаниеТиповСтрока10 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(10));
	ОписаниеТиповСтрока11 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(11));
	ОписаниеТиповСтрока19 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(19));
	ОписаниеТиповСтрока25 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(25));
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока100 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(100));
	ОписаниеТиповСтрока150 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(150));
	ОписаниеТиповСтрока200 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(200));
	ОписаниеТиповСтрока1000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(1000));
	ОписаниеТиповСтрока0000 = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0));
	ОписаниеТиповЧисло10_0 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло10_3 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(10, 3, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповЧисло15_2 = Новый ОписаниеТипов("Число", , , , Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный));
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", , , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	
	ЭтоФиксированныйШаблон = НастройкиЗагрузкиДанных.Свойство("ФиксированныйШаблон") И НастройкиЗагрузкиДанных.ФиксированныйШаблон;
	
	Если ЭтоФиксированныйШаблон Тогда
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "УИД", "УИД", ОписаниеТиповСтрока50, ОписаниеТиповСтрока50);
	КонецЕсли; 
		
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительКод","Код", 			ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Родитель", 1);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "РодительНаименование", "Группа (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Родитель", 2);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоГруппа", "Это группа", ОписаниеТиповБулево, ОписаниеТиповБулево);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Код", 		"Код", 			ОписаниеТиповСтрока11, ОписаниеТиповКолонка, "Номенклатура", 1, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Штрихкод", 	"Штрихкод", 	ОписаниеТиповСтрока200, ОписаниеТиповКолонка, "Номенклатура", 2, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Артикул", 	"Артикул", 		ОписаниеТиповСтрока25, ОписаниеТиповКолонка, "Номенклатура", 3, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименование","Номенклатура (наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка, "Номенклатура", 4, , Истина);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НоменклатураНаименованиеПолное","Номенклатура (полное наименование)", ОписаниеТиповСтрока1000, ОписаниеТиповКолонка, "Номенклатура", 5, , Истина);
	
	Если ЭтоФиксированныйШаблон Тогда
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоУслуга", "Это услуга", ОписаниеТиповБулево, ОписаниеТиповБулево);
	КонецЕсли; 
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ТипНоменклатуры", "Тип номенклатуры", ОписаниеТиповСтрока11, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЕдиницаИзмерения", "Ед. изм.", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.МетодОценкиЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "МетодОценки", "Способ списания", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НаправлениеДеятельности", "Направление бизнеса", ОписаниеТиповСтрока50, ОписаниеТиповКолонка, , , , , ПолучитьФункциональнуюОпцию("УчетПоНесколькимНаправлениямДеятельности"));
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КатегорииНоменклатуры");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "КатегорияНоменклатуры", "Категория номенклатуры", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Цена", "Цена", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	Если ЭтоФиксированныйШаблон Тогда
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Количество", "Количество", ОписаниеТиповСтрока25, ОписаниеТиповЧисло10_0);
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Картинка", "Картинка", ОписаниеТиповСтрока1000, ОписаниеТиповСтрока1000);
		
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ПродукцияЕГАИС", "Код по ЕГАИС", ОписаниеТиповСтрока19, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.КлассификаторТНВЭД");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ТоварнаяНоменклатураВЭД", "ТН ВЭД", ОписаниеТиповСтрока10, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Поставщик", "Поставщик (ИНН или наименование)", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИспользоватьСерийныеНомера", "Использовать серийные номера", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СерийныеНомера");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СерийныйНомер", "Серийный номер", ОписаниеТиповСтрока150, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Склад", "Склад (наименование)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтруктурныеЕдиницы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Изготовитель", "Изготовитель (наименование)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПеречислениеСсылка.СпособыПополненияЗапасов");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СпособПополнения", "Способ пополнения", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СрокПополнения", "Срок пополнения", ОписаниеТиповСтрока25, ОписаниеТиповЧисло10_0);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтавкаНДС", "Ставка НДС", ОписаниеТиповСтрока11, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоНовинка", "Флаг ""Новинка""", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СрокДействияФлагаНовинка", "Дата (срок ""Новинки"")", ОписаниеТиповСтрока25, ОписаниеТиповДата);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИсключитьИзПрайсЛистов", "Флаг ""Исключить из прайс-листов""", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НижняяГраницаОстатков", "Нижняя граница остатков", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ВерхняяГраницаОстатков", "Верхняя граница остатков", ОписаниеТиповСтрока25, ОписаниеТиповЧисло15_2);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаДоходов", "Счет учета доходов", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗапасов", "Счет учета запасов", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("ПланСчетовСсылка.Управленческий");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СчетУчетаЗатрат", "Счет учета затрат", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
	
	Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
		
		ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.Ячейки");
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Ячейка", "Ячейка (наименование)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЦеноваяГруппа", "Ценовая группа (наименование)", ОписаниеТиповСтрока50, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИспользоватьХарактеристики", "Использовать характеристики", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ПроверятьЗаполнениеХарактеристики", "Обязательное заполнение характеристики", ОписаниеТиповСтрока100, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ИспользоватьПартии", "Использовать партии", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ЭтоНабор", "Флаг ""Набор""", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Комментарий", "Описание", ОписаниеТиповСтрока0000, ОписаниеТиповСтрока0000);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СрокИсполненияЗаказа", "Срок исполнения заказа", ОписаниеТиповСтрока11, ОписаниеТиповЧисло10_0);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "НормаВремени", "Норма времени", ОписаниеТиповСтрока25, ОписаниеТиповЧисло10_3);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Вес", "Вес брутто, кг", ОписаниеТиповСтрока25, Метаданные.ОпределяемыеТипы.Вес.Тип);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "Объем", "Объем, м³", ОписаниеТиповСтрока25, Метаданные.ОпределяемыеТипы.Объем.Тип);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("Булево");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ФиксированнаяСтоимость", "Фикс. стоимость (для работ)", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	ОписаниеТиповКолонка = Новый ОписаниеТипов("СправочникСсылка.СтраныМира");
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "СтранаПроисхождения", "Страна происхождения (код или наименование)", ОписаниеТиповСтрока25, ОписаниеТиповКолонка);
	
	// ДополнительныеРеквизиты
	ЗагрузкаДанныхИзВнешнегоИсточника.ПодготовитьСоответствиеПоДополнительнымРеквизитам(НастройкиЗагрузкиДанных, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
	Если НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Количество() > 0 Тогда
		
		ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();
		ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, ИмяПоля, "Дополнительные реквизиты", ОписаниеТиповСтрока150, ОписаниеТиповСтрока11, , , , , , Истина, Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура);
		
	КонецЕсли;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьПолеОписанияЗагрузки(ТаблицаПолейЗагрузки, "ДопРеквизитыШаблона", "ДопРеквизитыШаблона", ОписаниеТиповСтрока0000, ОписаниеТиповСтрока0000,,,,,Ложь);
		
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника(ПараметрыСопоставления, АдресРезультата = "") Экспорт
	
	ТаблицаСопоставленияДанных	= ПараметрыСопоставления.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных			= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных		= ПараметрыСопоставления.НастройкиЗагрузкиДанных;
	ОбновлятьДанные				= НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	ФиксированныйШаблон			= НастройкиЗагрузкиДанных.ФиксированныйШаблон;
	НастройкиПоиска				= НастройкиЗагрузкиДанных.НастройкиПоиска;
	
	СоответствиеИерархииКэш = Новый Соответствие;
	ДеревоИерархии = Новый ДеревоЗначений;
	ДеревоИерархии.Колонки.Добавить("Каталог", Новый ОписаниеТипов("Строка", ,
											   Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));
	ДеревоИерархии.Колонки.Добавить("ГруппаСсылка", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДеревоИерархии.Колонки.Добавить("УИД", Новый ОписаниеТипов("Строка", ,
											   Новый КвалификаторыСтроки(40, ДопустимаяДлина.Переменная)));
	
	// ТаблицаСопоставленияДанных - Тип ДанныеФормыКоллекция
	Для каждого СтрокаТаблицыФормы Из ТаблицаСопоставленияДанных Цикл
		
		ЭтоГруппа_ВходящиеДанные = СокрЛП(НРег(СтрокаТаблицыФормы.ЭтоГруппа_ВходящиеДанные));
		СтрокаТаблицыФормы.ЭтоГруппа = ЭтоГруппа_ВходящиеДанные = "да" ИЛИ ЭтоГруппа_ВходящиеДанные = "true" ИЛИ ЭтоГруппа_ВходящиеДанные = "1";
		
		// Номенклатура по ШтрихКоду, Артикулу, Наименованию, НаименованиеПолное
		Если СтрокаТаблицыФормы.ЭтоГруппа Тогда
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуруГруппу(СтрокаТаблицыФормы, НастройкиПоиска);
			
		Иначе
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНоменклатуру(СтрокаТаблицыФормы, НастройкиПоиска);	
			
		КонецЕсли; 
		
		ЭтаСтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
		
		// Родитель может быть задан как строка иерархии с разделителями
		МассивИерархии = Новый Массив;
		СтрокаИерархии = СокрЛП(СтрокаТаблицыФормы.РодительНаименование);
		
		Если НЕ ПустаяСтрока(СтрокаИерархии) Тогда
			// поиск по иерархии
			МассивИерархии = СтрРазделить(СтрокаИерархии, СимволыИерархии(), Ложь);
			
			ПервыйСимволЭтоСимволИерархии = (СтрНайти(СимволыИерархии(), Лев(СтрокаИерархии, 1)) > 0);
			Если ПервыйСимволЭтоСимволИерархии ИЛИ МассивИерархии.Количество() > 1 Тогда
				
				// сначала ищем по закэшированным значениям в СоответствиеИерархииКэш
				ГруппаРодитель = СоответствиеИерархииКэш.Получить(СтрокаИерархии);
				Если ГруппаРодитель = Неопределено Тогда
					
					ПоследнийРодитель = ЗаполнитьИерархию(МассивИерархии, ДеревоИерархии);
					СоответствиеИерархииКэш.Вставить(СтрокаИерархии, ПоследнийРодитель);
					
					Если ЗначениеЗаполнено(ПоследнийРодитель) Тогда
						СтрокаТаблицыФормы.Родитель = ПоследнийРодитель;	
					КонецЕсли;
				Иначе
					// Родитель существует, подставляем из кэша
					СтрокаТаблицыФормы.Родитель = ГруппаРодитель;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыФормы.Родитель) Тогда
		
			// Родитель по наименованию или коду
			ЗначениеПоУмолчанию = Справочники.Номенклатура.ПустаяСсылка();
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Родитель", СтрокаТаблицыФормы.РодительНаименование, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьРодителяНоменклатуры(СтрокаТаблицыФормы.Родитель, СтрокаТаблицыФормы.РодительКод, СтрокаТаблицыФормы.РодительНаименование, ЗначениеПоУмолчанию);
		
		КонецЕсли;
		
		Если НЕ СтрокаТаблицыФормы.ЭтоГруппа Тогда
			
			Если ФиксированныйШаблон Тогда
				СтрокаТаблицыФормы.ЭтоУслуга = ?(СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга, Истина, Ложь);
			КонецЕсли;
			
			// Тип номенклатуры (реквизиты, закрытые для редактирования не правим)
			Если ЭтаСтрокаСопоставлена Тогда
				СтрокаТаблицыФормы.ТипНоменклатуры = СтрокаТаблицыФормы.Номенклатура.ТипНоменклатуры;
			Иначе
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьТипНоменклатуры(СтрокаТаблицыФормы.ТипНоменклатуры, СтрокаТаблицыФормы.ТипНоменклатуры_ВходящиеДанные, Перечисления.ТипыНоменклатуры.Запас);
			КонецЕсли;
			
			// ЕдиницыИзмерения по Наименованию (так же рассмотреть возможность прикрутить пользовательские ЕИ)
			ЗначениеПоУмолчанию = Справочники.КлассификаторЕдиницИзмерения.шт;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "ЕдиницаИзмерения", СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЕдиницыИзмерения(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.ЕдиницаИзмерения, СтрокаТаблицыФормы.ЕдиницаИзмерения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			
			// МетодОценки
			ЗначениеПоУмолчанию = Перечисления.МетодОценкиЗапасов.ПоСредней;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "МетодОценки", СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьМетодОценки(СтрокаТаблицыФормы.МетодОценки, СтрокаТаблицыФормы.МетодОценки_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// НаправлениеДеятельности по наименованию
			ЗначениеПоУмолчанию = Справочники.НаправленияДеятельности.ОсновноеНаправление;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "НаправлениеДеятельности", СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьНаправлениеДеятельности(СтрокаТаблицыФормы.НаправлениеДеятельности, СтрокаТаблицыФормы.НаправлениеДеятельности_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// КатегорияНоменклатуры по наименованию
			Если ФиксированныйШаблон Тогда
				ЗначениеПоУмолчанию = Справочники.КатегорииНоменклатуры.ПустаяСсылка();
			Иначе
				ЗначениеПоУмолчанию = Справочники.КатегорииНоменклатуры.БезКатегории;
			КонецЕсли;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "КатегорияНоменклатуры", СтрокаТаблицыФормы.КатегорияНоменклатуры_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьКатегориюНоменклатуры(СтрокаТаблицыФормы.КатегорияНоменклатуры, СтрокаТаблицыФормы.КатегорияНоменклатуры_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// ПродукцияЕГАИС по коду
			Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПродукциюПоЕГАИС(СтрокаТаблицыФормы.ПродукцияЕГАИС, СтрокаТаблицыФормы.ПродукцияЕГАИС_ВходящиеДанные);
				
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("УчетГТД") Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьТоварнуюНоменклатуруВЭД(СтрокаТаблицыФормы.ТоварнаяНоменклатураВЭД, СтрокаТаблицыФормы.ТоварнаяНоменклатураВЭД_ВходящиеДанные);
				
			КонецЕсли;
			
			// Поставщик по ИНН, Наименованию
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьПоставщика(СтрокаТаблицыФормы.Поставщик, СтрокаТаблицыФормы.Поставщик_ВходящиеДанные);
			
			// Серийные номера
			Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ИспользоватьСерийныеНомера, СтрокаТаблицыФормы.ИспользоватьСерийныеНомера_ВходящиеДанные);
				Если ЭтаСтрокаСопоставлена
					И СтрокаТаблицыФормы.ИспользоватьСерийныеНомера Тогда
					
					ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСерийныйНомер(СтрокаТаблицыФормы.Номенклатура, СтрокаТаблицыФормы.СерийныйНомер, СтрокаТаблицыФормы.СерийныйНомер_ВходящиеДанные);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Склад по наименованию
			ЗначениеПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Склад", СтрокаТаблицыФормы.Склад_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.Склад, СтрокаТаблицыФормы.Склад_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// Изготовитель по наименованию
			ЗначениеПоУмолчанию = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Изготовитель", СтрокаТаблицыФормы.Изготовитель_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтруктурнуюЕдиницу(СтрокаТаблицыФормы.Изготовитель, СтрокаТаблицыФормы.Изготовитель_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// СпособПополнения по наименованию
			ЗначениеПоУмолчанию = Перечисления.СпособыПополненияЗапасов.Закупка;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СпособПополнения", СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСпособПополнения(СтрокаТаблицыФормы.СпособПополнения, СтрокаТаблицыФормы.СпособПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// СрокПополнения
			ЗначениеПоУмолчанию = 1;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СрокПополнения", СтрокаТаблицыФормы.СрокПополнения_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СрокПополнения, СтрокаТаблицыФормы.СрокПополнения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// СтавкаНДС по наименованию
			ЗначениеПоУмолчанию = ?(СтрокаТаблицыФормы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"),
			УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС(),
			Справочники.СтавкиНДС.СтавкаНДС(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Организации.ОрганизацияПоУмолчанию(),"ВидСтавкиНДСПоУмолчанию")));
			
			Если Не ЭтаСтрокаСопоставлена Или СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные <> "" Тогда
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтавкуНДС(СтрокаТаблицыФормы.СтавкаНДС, СтрокаТаблицыФормы.СтавкаНДС_ВходящиеДанные, ЗначениеПоУмолчанию);
			КонецЕсли;
			
			//Прайс-лист
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ЭтоНовинка, СтрокаТаблицыФормы.ЭтоНовинка_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ИсключитьИзПрайсЛистов, СтрокаТаблицыФормы.ИсключитьИзПрайсЛистов_ВходящиеДанные);
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВДату(СтрокаТаблицыФормы.СрокДействияФлагаНовинка, СтрокаТаблицыФормы.СрокДействияФлагаНовинка_ВходящиеДанные);
			
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.НижняяГраницаОстатков, СтрокаТаблицыФормы.НижняяГраницаОстатков_ВходящиеДанные);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.ВерхняяГраницаОстатков, СтрокаТаблицыФормы.ВерхняяГраницаОстатков_ВходящиеДанные);
			
			// СчетУчетаЗапасов по коду, наименованию
			ЗначениеПоУмолчанию = ПланыСчетов.Управленческий.СырьеИМатериалы;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СчетУчетаЗапасов", СтрокаТаблицыФормы.СчетУчетаЗапасов_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаЗапасов(СтрокаТаблицыФормы.СчетУчетаЗапасов, СтрокаТаблицыФормы.СчетУчетаЗапасов_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// СчетУчетаЗатрат по коду, наименованию
			ЗначениеПоУмолчанию = ?(ПолучитьФункциональнуюОпцию("ИспользоватьПодсистемуПроизводство"), ПланыСчетов.Управленческий.НезавершенноеПроизводство, ПланыСчетов.Управленческий.КоммерческиеРасходы);
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СчетУчетаЗатрат", СтрокаТаблицыФормы.СчетУчетаЗатрат_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаЗатрат(СтрокаТаблицыФормы.СчетУчетаЗатрат, СтрокаТаблицыФормы.СчетУчетаЗатрат_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// СчетУчетаДоходов по коду, наименованию
			ЗначениеПоУмолчанию = ?(СтрокаТаблицыФормы.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат"), ПланыСчетов.Управленческий.ПрочиеДоходы, ПланыСчетов.Управленческий.ПустаяСсылка());
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СчетУчетаДоходов", СтрокаТаблицыФормы.СчетУчетаДоходов_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСчетУчетаДоходов(СтрокаТаблицыФормы.СчетУчетаДоходов, СтрокаТаблицыФормы.СчетУчетаДоходов_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			Если ПолучитьФункциональнуюОпцию("УчетПоЯчейкам") Тогда
				
				// Ячейка по наименованию
				ЗначениеПоУмолчанию = Справочники.Ячейки.ПустаяСсылка();
				ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "Ячейка", СтрокаТаблицыФормы.Ячейка_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЯчейку(СтрокаТаблицыФормы.Ячейка, СтрокаТаблицыФормы.Ячейка_ВходящиеДанные, ЗначениеПоУмолчанию);
				
			КонецЕсли;
			
			// ЦеноваяГруппа по наименованию
			ЗначениеПоУмолчанию = Справочники.ЦеновыеГруппы.ПустаяСсылка();
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "ЦеноваяГруппа", СтрокаТаблицыФормы.ЦеноваяГруппа_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьЦеновуюГруппу(СтрокаТаблицыФормы.ЦеноваяГруппа, СтрокаТаблицыФормы.ЦеноваяГруппа_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// ИспользоватьХарактеристики
			Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ИспользоватьХарактеристики, СтрокаТаблицыФормы.ИспользоватьХарактеристики_ВходящиеДанные);
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ПроверятьЗаполнениеХарактеристики, СтрокаТаблицыФормы.ПроверятьЗаполнениеХарактеристики_ВходящиеДанные);
				
			КонецЕсли;
			
			// ИспользоватьПартии
			Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ИспользоватьПартии, СтрокаТаблицыФормы.ИспользоватьПартии_ВходящиеДанные);
				
			КонецЕсли;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьНаборы") Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ЭтоНабор, СтрокаТаблицыФормы.ЭтоНабор_ВходящиеДанные);
				
			КонецЕсли;
			
			// Комментарий как строка
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СкопироватьСтрокуВЗначениеСтроковогоТипа(СтрокаТаблицыФормы.Комментарий, СтрокаТаблицыФормы.Комментарий_ВходящиеДанные);
			
			// СрокИсполненияЗаказа
			ЗначениеПоУмолчанию = 1;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СрокИсполненияЗаказа", СтрокаТаблицыФормы.СрокИсполненияЗаказа_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.СрокИсполненияЗаказа, СтрокаТаблицыФормы.СрокИсполненияЗаказа_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// НормаВремени
			ЗначениеПоУмолчанию = 0;
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "НормаВремени", СтрокаТаблицыФормы.НормаВремени_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.НормаВремени, СтрокаТаблицыФормы.НормаВремени_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			//Вес
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Вес, СтрокаТаблицыФормы.Вес_ВходящиеДанные, 0);
			
			//Объем
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Объем, СтрокаТаблицыФормы.Объем_ВходящиеДанные, 0);
			
			// ФиксированнаяСтоимость
			Если ПустаяСтрока(СтрокаТаблицыФормы.ФиксированнаяСтоимость_ВходящиеДанные) Тогда
				
				СтрокаТаблицыФормы.ФиксированнаяСтоимость = Истина;
				
			Иначе
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВБулево(СтрокаТаблицыФормы.ФиксированнаяСтоимость, СтрокаТаблицыФормы.ФиксированнаяСтоимость_ВходящиеДанные);
				
			КонецЕсли;
			
			// СтранаПроисхождения по коду
			ЗначениеПоУмолчанию = Справочники.СтраныМира.ПустаяСсылка();
			ПриОпределенииЗначенияПоУмолчанию(СтрокаТаблицыФормы.Номенклатура, "СтранаПроисхождения", СтрокаТаблицыФормы.СтранаПроисхождения_ВходящиеДанные, ЭтаСтрокаСопоставлена, ОбновлятьДанные, ЗначениеПоУмолчанию);
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьСтрануПроисхождения(СтрокаТаблицыФормы.СтранаПроисхождения, СтрокаТаблицыФормы.СтранаПроисхождения_ВходящиеДанные, ЗначениеПоУмолчанию);
			
			// Цена
			ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Цена, СтрокаТаблицыФормы.Цена_ВходящиеДанные);
			
			// Количество
			Если НастройкиЗагрузкиДанных.ФиксированныйШаблон Тогда
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПреобразоватьСтрокуВЧисло(СтрокаТаблицыФормы.Количество, СтрокаТаблицыФормы.Количество_ВходящиеДанные);
			КонецЕсли;
			
			// Дополнительные реквизиты
			Если НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
				
				ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СопоставитьДополнительныеРеквизиты(СтрокаТаблицыФормы, НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
				
			КонецЕсли;
			
		КонецЕсли; 
		
		ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы);
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ПрогрессСопоставленияДанных(ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицыФормы), РазмерТаблицыДанных);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаСопоставленияДанных, АдресРезультата);
	
	Если ДеревоИерархии.Строки.Количество() > 0 Тогда
		НастройкиЗагрузкиДанных.Вставить("АдресДеревоИерархии", ПоместитьВоВременноеХранилище(ДеревоИерархии, Новый УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, ПолноеИмяОбъектаЗаполнения = "") Экспорт
	
	СтрокаТаблицыФормы._СтрокаСопоставлена = ЗначениеЗаполнено(СтрокаТаблицыФормы.Номенклатура);
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	НаименованиеЗаполнено = НЕ ПустаяСтрока(СтрокаТаблицыФормы.НоменклатураНаименование) ИЛИ НЕ ПустаяСтрока(СтрокаТаблицыФормы.НоменклатураНаименованиеПолное);
	
	СтрокаТаблицыФормы[ИмяСлужебногоПоля] = СтрокаТаблицыФормы._СтрокаСопоставлена
											ИЛИ (НЕ СтрокаТаблицыФормы._СтрокаСопоставлена И НаименованиеЗаполнено);
	
КонецПроцедуры

Процедура ОбработатьПодготовленныеДанные(СтруктураДанных, ФоновоеЗаданиеАдресХранилища = "") Экспорт
	
	ФОУчетГТД						= ПолучитьФункциональнуюОпцию("УчетГТД");
	НастройкиОбновленияСвойств		= СтруктураДанных.НастройкиЗагрузкиДанных.НастройкиОбновленияСвойств;
	ОбновлятьСуществующие			= СтруктураДанных.НастройкиЗагрузкиДанных.ОбновлятьСуществующие;
	СоздаватьЕслиНеСопоставлено		= СтруктураДанных.НастройкиЗагрузкиДанных.СоздаватьЕслиНеСопоставлено;
	ФиксированныйШаблон				= СтруктураДанных.НастройкиЗагрузкиДанных.ФиксированныйШаблон;
	ТаблицаСопоставленияДанных		= СтруктураДанных.ТаблицаСопоставленияДанных;
	РазмерТаблицыДанных				= ТаблицаСопоставленияДанных.Количество();
	НастройкиЗагрузкиДанных			= СтруктураДанных.НастройкиЗагрузкиДанных;
	КоличествоЗаписейТранзакции		= 0;
	ТранзакцияОткрыта				= Ложь;

	ВременныеДанныеЗагрузки = Новый Структура;
	ВременныеДанныеЗагрузки.Вставить("СозданныеГруппы", Новый Соответствие);
	
	Если НастройкиЗагрузкиДанных.Свойство("АдресДеревоИерархии") Тогда
		ДеревоИерархии = ПолучитьИзВременногоХранилища(НастройкиЗагрузкиДанных.АдресДеревоИерархии);
		ВременныеДанныеЗагрузки.Вставить("ДеревоИерархии", ДеревоИерархии);
	КонецЕсли;
	
	Если ФОУчетГТД Тогда
		ТаблицаКлассификатораТНВЭД = Справочники.КлассификаторТНВЭД.ТаблицаКлассификатораТНВЭД();
		ВременныеДанныеЗагрузки.Вставить("ТаблицаКлассификатораТНВЭД", ТаблицаКлассификатораТНВЭД);
	КонецЕсли;
	
	Если ФиксированныйШаблон Тогда
		
		ВводНачальныхОстатков = Документы.ВводНачальныхОстатков.СоздатьДокумент();
		ВводНачальныхОстатков.Дата = НачалоДня(ТекущаяДата());
		ВводНачальныхОстатков.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		ВводНачальныхОстатков.РазделУчета = "Запасы";
		
		ВременныеДанныеЗагрузки.Вставить("ВводНачальныхОстатков", ВводНачальныхОстатков);
		
	КонецЕсли;
	
	НастройкиОбновленияСвойств.ИменаПолейОбновляемые = ЗагрузкаДанныхИзВнешнегоИсточника.УдалитьНесуществующиеСвойства(
		СтрРазделить(НастройкиОбновленияСвойств.ИменаПолейОбновляемые, ", "), 
		Метаданные.Справочники.Номенклатура.Реквизиты);
	
	Попытка
		
		Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
			
			Если НЕ ТранзакцияОткрыта 
				И КоличествоЗаписейТранзакции = 0 Тогда
				
				НачатьТранзакцию();
				ТранзакцияОткрыта = Истина;
				
			КонецЕсли;
			
			ЗагрузкаВПриложениеВозможна = СтрокаТаблицы[ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна()];
			
			МожноЗагрузитьИлиОбновить = (СтрокаТаблицы._СтрокаСопоставлена И ОбновлятьСуществующие) 
				ИЛИ (НЕ СтрокаТаблицы._СтрокаСопоставлена И СоздаватьЕслиНеСопоставлено)
				ИЛИ ФиксированныйШаблон;
				
				Если ЗагрузкаВПриложениеВозможна И МожноЗагрузитьИлиОбновить Тогда
					
					ВременныеДанныеЗагрузки.Вставить("СоздатьСоответствиеЕГАИС", Ложь);
					КоличествоЗаписейТранзакции = КоличествоЗаписейТранзакции + 1;
					
					Если СтрокаТаблицы.ЭтоГруппа Тогда
						
						ЗагрузитьГруппу(СтрокаТаблицы, ВременныеДанныеЗагрузки);
						
					Иначе	
						
						ЭлементСправочника = ЗагрузитьЭлемент(СтрокаТаблицы, СтруктураДанных, ВременныеДанныеЗагрузки);
						
						ЗагрузитьСвязанныеДанные(ЭлементСправочника, СтрокаТаблицы, НастройкиЗагрузкиДанных, ВременныеДанныеЗагрузки);
						
					КонецЕсли;
					
				КонецЕсли;
				
				ИндексТекущейстроки	= ТаблицаСопоставленияДанных.Индекс(СтрокаТаблицы);
				ТекстПрогресса		= СтрШаблон(НСтр("ru ='Обработано %1 из %2 строк...'"), ИндексТекущейстроки, РазмерТаблицыДанных);
				
				ДлительныеОперации.СообщитьПрогресс(Цел(ИндексТекущейстроки * 100 / РазмерТаблицыДанных), ТекстПрогресса);
				
				Если ТранзакцияОткрыта
					И КоличествоЗаписейТранзакции > ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумЗаписейВОднойТранзакции() Тогда
					
					ЗафиксироватьТранзакцию();
					ТранзакцияОткрыта = Ложь;
					КоличествоЗаписейТранзакции = 0;
					
				КонецЕсли;
			
		КонецЦикла;
		
		Если ФиксированныйШаблон И ВводНачальныхОстатков.Запасы.Количество() > 0 Тогда
			ВводНачальныхОстатков.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли; 
		
		Если ТранзакцияОткрыта 
			И КоличествоЗаписейТранзакции > 0 Тогда
			
			ЗафиксироватьТранзакцию();
			ТранзакцияОткрыта = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		НастройкиЗагрузкиДанных.Вставить("ТекстОшибки", ТекстОшибки);
		
		ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка данных'", "ru"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ТекстОшибки);
		ОтменитьТранзакцию();
		Возврат;
		
	КонецПопытки;
	
	Если ТранзакцияОткрыта Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	// Картинки загружаем без транзакции
	ЗагрузитьКартинкиИзExcel(ТаблицаСопоставленияДанных);
	
КонецПроцедуры

Процедура ЗагрузитьГруппу(СтрокаТаблицы, ВременныеДанныеЗагрузки)
	
	НаименованиеИзВходящихДанных = ?(ПустаяСтрока(СтрокаТаблицы.НоменклатураНаименование), СтрокаТаблицы.НоменклатураНаименованиеПолное, СтрокаТаблицы.НоменклатураНаименование);	
	
	Если ПустаяСтрока(НаименованиеИзВходящихДанных) Тогда
		Возврат;
	КонецЕсли;
		
	Если СтрокаТаблицы._СтрокаСопоставлена Тогда
		ЭлементСправочника = СтрокаТаблицы.Номенклатура.ПолучитьОбъект();
		ЭлементСправочника.Заблокировать();
	Иначе
		ЭлементСправочника = Справочники.Номенклатура.СоздатьГруппу();
		УстановитьУИДНового(СтрокаТаблицы, ЭлементСправочника);
		// Код не обновляем, можно установить только при создании
	КонецЕсли;
	
	ЭлементСправочника.Наименование = НаименованиеИзВходящихДанных;
	Если ЗначениеЗаполнено(СтрокаТаблицы.Родитель) Тогда
		ЭлементСправочника.Родитель = СтрокаТаблицы.Родитель;
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.РодительНаименование) Тогда
		ЭлементСправочника.Родитель = ВременныеДанныеЗагрузки.СозданныеГруппы.Получить(СтрокаТаблицы.РодительНаименование);
	КонецЕсли;
	
	ЭлементСправочника.Записать();
	
	ВременныеДанныеЗагрузки.СозданныеГруппы.Вставить(СтрокаТаблицы.НоменклатураНаименование, ЭлементСправочника.Ссылка);
	
КонецПроцедуры

Функция ЗагрузитьЭлемент(СтрокаТаблицы, СтруктураДанных, ВременныеДанныеЗагрузки)

	ФОУчетГТД						= ПолучитьФункциональнуюОпцию("УчетГТД");
	НастройкиОбновленияСвойств		= СтруктураДанных.НастройкиЗагрузкиДанных.НастройкиОбновленияСвойств;
	ФиксированныйШаблон				= СтруктураДанных.НастройкиЗагрузкиДанных.ФиксированныйШаблон;
	НастройкиЗагрузкиДанных			= СтруктураДанных.НастройкиЗагрузкиДанных;

	Если СтрокаТаблицы._СтрокаСопоставлена Тогда
		
		ЭлементСправочника = СтрокаТаблицы.Номенклатура.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы, НастройкиОбновленияСвойств.ИменаПолейОбновляемые);
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			ЭлементСправочника.ВидСтавкиНДС = СтрокаТаблицы.СтавкаНДС.ВидСтавкиНДС;
		ИначеЕсли Не ЗначениеЗаполнено(ЭлементСправочника.ВидСтавкиНДС) Тогда
			ЭлементСправочника.ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Организации.ОрганизацияПоУмолчанию(),"ВидСтавкиНДСПоУмолчанию", Истина);
		КонецЕсли;
		
	Иначе
		
		ЭлементСправочника = Справочники.Номенклатура.СоздатьЭлемент();
		
		УстановитьУИДНового(СтрокаТаблицы, ЭлементСправочника, НастройкиЗагрузкиДанных);
		
		ИменаПолейНеподлежащихОбновлению = ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.СтандартныеИменаПолейНеподлежащихОбновлению(НастройкиЗагрузкиДанных);
		ЗаполнитьЗначенияСвойств(ЭлементСправочника, СтрокаТаблицы, , ИменаПолейНеподлежащихОбновлению);
			
		Если ЗначениеЗаполнено(СтрокаТаблицы.СтавкаНДС) Тогда
			ЭлементСправочника.ВидСтавкиНДС = СтрокаТаблицы.СтавкаНДС.ВидСтавкиНДС;
		Иначе
			ЭлементСправочника.ВидСтавкиНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Справочники.Организации.ОрганизацияПоУмолчанию(),"ВидСтавкиНДСПоУмолчанию", Истина);
		КонецЕсли;
		
	КонецЕсли;
		
	// Родитель, если он заполнен	
	Если ЗначениеЗаполнено(СтрокаТаблицы.Родитель) Тогда
		
		ЭлементСправочника.Родитель = СтрокаТаблицы.Родитель;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.РодительНаименование) Тогда
		СтрокаИерархии = СтрокаТаблицы.РодительНаименование;
		
		МассивИерархии = СтрРазделить(СтрокаИерархии, СимволыИерархии(), Ложь);
		ПервыйСимволЭтоСимволИерархии = (СтрНайти(СимволыИерархии(), Лев(СтрокаИерархии, 1)) > 0);
		
		Если (ПервыйСимволЭтоСимволИерархии ИЛИ МассивИерархии.Количество() > 1)
			И ВременныеДанныеЗагрузки.Свойство("ДеревоИерархии") Тогда
			
			ЭлементСправочника.Родитель = ЗагрузитьИерархиюРодителей(МассивИерархии, ВременныеДанныеЗагрузки.ДеревоИерархии);
			
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ЭлементСправочника.Родитель) Тогда
			
			ЭлементСправочника.Родитель = ВременныеДанныеЗагрузки.СозданныеГруппы.Получить(СтрокаИерархии);
			
		КонецЕсли;
		
		НастройкиЗагрузкиДанных.Вставить("ОповеститьОСозданииГруппы", Истина);
		
	КонецЕсли;
		
	// Наименование
	Если НЕ ПустаяСтрока(СтрокаТаблицы.НоменклатураНаименование) Тогда
		ЭлементСправочника.Наименование = СтрокаТаблицы.НоменклатураНаименование;
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаТаблицы.НоменклатураНаименованиеПолное) Тогда
		ЭлементСправочника.НаименованиеПолное = СтрокаТаблицы.НоменклатураНаименованиеПолное;
	КонецЕсли;
	
	НаименованиеИзВходящихДанных = ?(ПустаяСтрока(СтрокаТаблицы.НоменклатураНаименование), СтрокаТаблицы.НоменклатураНаименованиеПолное, СтрокаТаблицы.НоменклатураНаименование);
	Если ПустаяСтрока(ЭлементСправочника.Наименование) Тогда
		ЭлементСправочника.Наименование = НаименованиеИзВходящихДанных;
	КонецЕсли;
	Если ПустаяСтрока(ЭлементСправочника.НаименованиеПолное) Тогда
		ЭлементСправочника.НаименованиеПолное = НаименованиеИзВходящихДанных;
	КонецЕсли;
	
	// Тип номенклатуры при начальной загрузке
	Если ФиксированныйШаблон И ЗначениеЗаполнено(СтрокаТаблицы.ЭтоУслуга_ВходящиеДанные) Тогда
		ЭлементСправочника.ТипНоменклатуры = ?(СтрокаТаблицы.ЭтоУслуга_ВходящиеДанные, Перечисления.ТипыНоменклатуры.Услуга, Перечисления.ТипыНоменклатуры.Запас);
	КонецЕсли;
	
	Если НЕ ЭлементСправочника.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		
		ЭлементСправочника.НижняяГраницаОстатков = 0;
		ЭлементСправочника.ВерхняяГраницаОстатков = 0;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции")
		И ЗначениеЗаполнено(СтрокаТаблицы.ПродукцияЕГАИС) Тогда
		
		ПродукцияЕГАИС = СтрокаТаблицы.ПродукцияЕГАИС;
		
		ЭлементСправочника.ОбъемДАЛ = ПродукцияЕГАИС.Объем/100;
		ЭлементСправочника.Крепость = ПродукцияЕГАИС.Крепость;
		ЭлементСправочника.ВидАлкогольнойПродукции = ПродукцияЕГАИС.ВидПродукции;
		
		ЭлементСправочника.ИмпортнаяАлкогольнаяПродукция = ЗначениеЗаполнено(ПродукцияЕГАИС.Производитель) И ЗначениеЗаполнено(ПродукцияЕГАИС.Импортер);
		
		СопоставленныеДанные = ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПолучитьКонтрагентовПоСоответствиюЕГАИС(ПродукцияЕГАИС.Производитель, ПродукцияЕГАИС.Импортер);
		Если ЭлементСправочника.ИмпортнаяАлкогольнаяПродукция Тогда
			
			ЭлементСправочника.Производитель = СопоставленныеДанные.Производитель;
			ЭлементСправочника.ПроизводительИмпортерАлкогольнойПродукции = СопоставленныеДанные.Импортер;
			
		Иначе
			
			ЭлементСправочника.ПроизводительИмпортерАлкогольнойПродукции = СопоставленныеДанные.Производитель;
			
		КонецЕсли;
		
		ВременныеДанныеЗагрузки.Вставить("СоздатьСоответствиеЕГАИС", Истина);
		
	КонецЕсли;
	
	Если ФОУчетГТД
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ТоварнаяНоменклатураВЭД_ВходящиеДанные")
		И НЕ ПустаяСтрока(СтрокаТаблицы.ТоварнаяНоменклатураВЭД_ВходящиеДанные)
		И НЕ ЗначениеЗаполнено(ЭлементСправочника.ТоварнаяНоменклатураВЭД) Тогда
		
		КодТНВЭД = СокрЛП(СтрокаТаблицы.ТоварнаяНоменклатураВЭД_ВходящиеДанные);
		
		ЭлементКлассификатора = Справочники.КлассификаторТНВЭД.НайтиПоКоду(КодТНВЭД, Ложь);
		Если ЗначениеЗаполнено(ЭлементКлассификатора) Тогда
			
			ЭлементСправочника.ТоварнаяНоменклатураВЭД = ЭлементКлассификатора;
			
		Иначе
			
			ОтборПоКоду = Новый Структура("Код", КодТНВЭД);
			МассивСтрок = ВременныеДанныеЗагрузки.ТаблицаКлассификатораТНВЭД.НайтиСтроки(ОтборПоКоду);
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				ЭлементКлассификатора = Справочники.КлассификаторТНВЭД.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ЭлементКлассификатора, МассивСтрок[0]);
				ЭлементКлассификатора.НаименованиеПолное = МассивСтрок[0].Наименование;
				ЭлементКлассификатора.Записать();
				
				ЭлементСправочника.ТоварнаяНоменклатураВЭД = ЭлементКлассификатора.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// доп. реквизиты
	Если ФиксированныйШаблон Тогда
		
		ЗагрузитьДопРеквизитыИзExcel(СтрокаТаблицы, ЭлементСправочника);
		
	ИначеЕсли НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ОбработатьВыбранныеДополнительныеРеквизиты(ЭлементСправочника, СтрокаТаблицы._СтрокаСопоставлена, СтрокаТаблицы, НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
		
	КонецЕсли;
	
	ЭлементСправочника.Записать();
	
	СтрокаТаблицы.Номенклатура = ЭлементСправочника.Ссылка;
	
	Возврат ЭлементСправочника.Ссылка;
	
КонецФункции

Функция ПреобразоватьСтрокуШтрихкодовВМассив(Знач Штрихкод)
	
	СтрокаШтрихкодов = Штрихкод;
	МассивШтрихкодов = Новый Массив;
	Пока Истина Цикл
		ПозицияРазделителя = СтрНайти(СтрокаШтрихкодов, Символы.ПС);
		Если ПозицияРазделителя = 0 Тогда
			МассивШтрихкодов.Добавить(СокрЛП(СтрокаШтрихкодов));
			Прервать;
		Иначе
			МассивШтрихкодов.Добавить(СокрЛП(Лев(СтрокаШтрихкодов, ПозицияРазделителя - 1)));
			СтрокаШтрихкодов = Сред(СтрокаШтрихкодов, ПозицияРазделителя + 1);
		КонецЕсли;
		Если ПустаяСтрока(СтрокаШтрихкодов) Тогда // Для случая, когда разделитель есть в конце строки.
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивШтрихкодов;
	
КонецФункции

Процедура ЗагрузитьСвязанныеДанные(ЭлементСправочника, СтрокаТаблицы, НастройкиЗагрузкиДанных, ВременныеДанныеЗагрузки)
	
	ВидЦен = НастройкиЗагрузкиДанных.ВидЦен;
	СкладОстатков = НастройкиЗагрузкиДанных.СкладОстатков;
	ФОИспользоватьСерийныеНомера	= ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера");	
	
	ФиксированныйШаблон = НастройкиЗагрузкиДанных.ФиксированныйШаблон;
	
	Если НЕ ПустаяСтрока(СтрокаТаблицы.ШтрихКод) Тогда
		
		МассивШтрихкодов = ПреобразоватьСтрокуШтрихкодовВМассив(СтрокаТаблицы.ШтрихКод);
		
		Для Каждого ЗначениеМассиваШтрихкодов Из МассивШтрихкодов Цикл
			
			Если НЕ ПустаяСтрока(ЗначениеМассиваШтрихкодов) Тогда
				ШК = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
				ШК.Период = ТекущаяДата();
				ШК.Штрихкод = ЗначениеМассиваШтрихкодов;
				ШК.Номенклатура = ЭлементСправочника.Ссылка;
				ШК.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения), СтрокаТаблицы.ЕдиницаИзмерения, ЭлементСправочника.ЕдиницаИзмерения);
				
				ШК.Записать(Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТаблицы.Цена) Тогда
		
		Цены = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
		Цены.Период = ТекущаяДата();
		Цены.ВидЦен = ВидЦен;
		Цены.Цена	= СтрокаТаблицы.Цена;
		Цены.Номенклатура = ЭлементСправочника.Ссылка;
		Цены.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения), СтрокаТаблицы.ЕдиницаИзмерения, ЭлементСправочника.ЕдиницаИзмерения);
		
		Цены.Записать(Истина);
		
	КонецЕсли;
	
	Если ФиксированныйШаблон 
		И ЗначениеЗаполнено(СтрокаТаблицы.Количество) 
		И ЭлементСправочника.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
		
		ЗапасыСтрока = ВременныеДанныеЗагрузки.ВводНачальныхОстатков.Запасы.Добавить();
		ЗапасыСтрока.Номенклатура 		= ЭлементСправочника.Ссылка;
		ЗапасыСтрока.СтруктурнаяЕдиница = СкладОстатков;
		ЗапасыСтрока.Цена 				= СтрокаТаблицы.Цена;
		ЗапасыСтрока.Количество 		= СтрокаТаблицы.Количество;
		ЗапасыСтрока.Сумма				= ЗапасыСтрока.Цена * ЗапасыСтрока.Количество;
		ЗапасыСтрока.ЕдиницаИзмерения	= ?(ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения), СтрокаТаблицы.ЕдиницаИзмерения, ЭлементСправочника.ЕдиницаИзмерения);
		
	КонецЕсли;				
	
	Если ВременныеДанныеЗагрузки.СоздатьСоответствиеЕГАИС Тогда
		
		СоответствиеНоменклатурыЕГАИС = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
		СоответствиеНоменклатурыЕГАИС.АлкогольнаяПродукция = СтрокаТаблицы.ПродукцияЕГАИС;
		СоответствиеНоменклатурыЕГАИС.Номенклатура = ЭлементСправочника.Ссылка;
		
		СоответствиеНоменклатурыЕГАИС.Записать(Истина);
		
	КонецЕсли;
	
	Если ФОИспользоватьСерийныеНомера Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "СерийныйНомер")
			И НЕ ЗначениеЗаполнено(СтрокаТаблицы.СерийныйНомер)
			И НЕ ПустаяСтрока(СтрокаТаблицы.СерийныйНомер_ВходящиеДанные) Тогда
			
			СерийныйНомерСправочник = Справочники.СерийныеНомера.СоздатьЭлемент();
			СерийныйНомерСправочник.Владелец = ЭлементСправочника.Ссылка;
			СерийныйНомерСправочник.Наименование = СтрокаТаблицы.СерийныйНомер_ВходящиеДанные;
			
			СерийныйНомерСправочник.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗагрузкаДанныхИзВнешнегоИсточникаСлужебные

Функция СимволыИерархии()
	
	Возврат ";>/\";	
	
КонецФункции

Процедура УстановитьУИДНового(СтрокаТаблицы, ЭлементСправочника, НастройкиЗагрузкиДанных=Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "УИД") И ЗначениеЗаполнено(СтрокаТаблицы.УИД) Тогда
		НовыйУИД = Новый УникальныйИдентификатор(СтрокаТаблицы.УИД);
		ЭлементСправочника.УстановитьСсылкуНового(Справочники.Номенклатура.ПолучитьСсылку(НовыйУИД));
	КонецЕсли; 
	
КонецПроцедуры

Функция ЗаполнитьИерархию(МассивИерархии, ДеревоИерархии)
	
	таблицаИерархии = Новый ТаблицаЗначений;
	таблицаИерархии.Колонки.Добавить("Каталог", Новый ОписаниеТипов("Строка", ,
											   Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная)));
	таблицаИерархии.Колонки.Добавить("ГруппаСсылка", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	
	Для каждого каталог Из МассивИерархии Цикл
		НовСтр = таблицаИерархии.Добавить();
		НовСтр.Каталог = СокрЛП(каталог);
	КонецЦикла;
	
	Индекс = 0;
	ТекущийРодительНаименование = "";
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =  
		"ВЫБРАТЬ
		|	таблицаИерархии.Каталог КАК Каталог,
		|	таблицаИерархии.ГруппаСсылка КАК ГруппаСсылка
		|ПОМЕСТИТЬ ВТИерархия
		|ИЗ
		|	&таблицаИерархии КАК таблицаИерархии";
		Запрос.УстановитьПараметр("таблицаИерархии", таблицаИерархии);
		Запрос.Выполнить();
		
	Запрос.Текст = "";
	Для каждого строкаТаблицы Из таблицаИерархии Цикл
		
		// проверяется имя Номенклатуры и имя Родителя на два уровня вверх
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК ГруппаСсылка,
		|	таблицаИерархии.Каталог КАК Каталог
		|ИЗ
		|	ВТИерархия КАК таблицаИерархии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
		|		ПО (таблицаИерархии.Каталог = Номенклатура.Наименование
		|    		И Номенклатура.ЭтоГруппа 
		|			И НЕ Номенклатура.ПометкаУдаления
		|			И ЕстьNull(Номенклатура.Родитель.Наименование, """") = &РодительНаименование" + Индекс;
		Если Индекс > 1 Тогда
		    Запрос.Текст = Запрос.Текст + "
			|			И ЕстьNull(Номенклатура.Родитель.Родитель.Наименование, """") = &РодительНаименование" + (Индекс-1);
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + " )  
		|ГДЕ
		|	таблицаИерархии.Каталог = &Наименование" + Индекс;
		
		Запрос.УстановитьПараметр("Наименование" + Индекс, строкаТаблицы.Каталог);
		Запрос.УстановитьПараметр("РодительНаименование" + Индекс, ТекущийРодительНаименование);
		
		Индекс = Индекс + 1;
		ТекущийРодительНаименование = строкаТаблицы.Каталог;
		
		Если Индекс < таблицаИерархии.Количество() Тогда
			Запрос.Текст = Запрос.Текст + " 
			|
			| ОБЪЕДИНИТЬ ВСЕ 
			|
			|";
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаИерархии = Запрос.Выполнить().Выгрузить();
	
	ПоследняяСтрокаДерева = ДеревоИерархии;
	ПоследнийРодитель = "";
	Для каждого строкаИерархии Из ТаблицаИерархии Цикл
		
		Если ПоследняяСтрокаДерева.Строки.Количество() > 0 Тогда
			
			НайденныеСтроки = ПоследняяСтрокаДерева.Строки.НайтиСтроки(Новый Структура("Каталог", строкаИерархии.Каталог));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НовСтр = ПоследняяСтрокаДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, строкаИерархии);
				Если ЗначениеЗаполнено(строкаИерархии.ГруппаСсылка) Тогда
					НовСтр.УИД = строкаИерархии.ГруппаСсылка.УникальныйИдентификатор();
				КонецЕсли; 
				
				ПоследняяСтрокаДерева = НовСтр;
			Иначе
				ПоследняяСтрокаДерева = НайденныеСтроки[0];
			КонецЕсли;
		Иначе
			НовСтр = ПоследняяСтрокаДерева.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, строкаИерархии);
			Если ЗначениеЗаполнено(строкаИерархии.ГруппаСсылка) Тогда
				НовСтр.УИД = строкаИерархии.ГруппаСсылка.УникальныйИдентификатор();
			КонецЕсли; 
			
			ПоследняяСтрокаДерева = НовСтр;
		КонецЕсли;
		
		ПоследнийРодитель = строкаИерархии.ГруппаСсылка;
		
	КонецЦикла;
	
	Возврат ПоследнийРодитель;
	
КонецФункции

Процедура ЗагрузитьДопРеквизитыИзExcel(СтрокаТаблицы, ЭлементСправочника)
	
	// Категория и набор свойств
	Если ПустаяСтрока(СтрокаТаблицы.КатегорияНоменклатуры_ВходящиеДанные) Тогда
		
		ЭлементСправочника.КатегорияНоменклатуры = Справочники.КатегорииНоменклатуры.БезКатегории;
		Возврат;
		
	Иначе
		
		НаборСвойствРодитель = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура;
		
		СтруктураОтбора = Новый Структура("Наименование", СтрокаТаблицы.КатегорияНоменклатуры_ВходящиеДанные);
		СтруктураОтбора.Вставить("Родитель", НаборСвойствРодитель);
		ДопРеквизиты = Новый Структура;
		ДопРеквизиты.Вставить("Используется", Истина);
		СсылкаНаборСвойств = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка(), ДопРеквизиты);
		
		// Создание/поиск Категории
		СтруктураОтбора = Новый Структура("Наименование", СтрокаТаблицы.КатегорияНоменклатуры_ВходящиеДанные);
		СтруктураОтбора.Вставить("НаборСвойств", СсылкаНаборСвойств);
		ДопРеквизиты = Новый Структура;
		ДопРеквизиты.Вставить("ТипНоменклатурыПоУмолчанию", ЭлементСправочника.ТипНоменклатуры);
		ДопРеквизиты.Вставить("ЕдиницаИзмерения", ?(ЗначениеЗаполнено(СтрокаТаблицы.ЕдиницаИзмерения), СтрокаТаблицы.ЕдиницаИзмерения, ЭлементСправочника.ЕдиницаИзмерения));
		СсылкаКатегория = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.КатегорииНоменклатуры.ПустаяСсылка(), ДопРеквизиты);
		
		ЭлементСправочника.КатегорияНоменклатуры = СсылкаКатегория;
		
	КонецЕсли; 
	
	Если НЕ ПустаяСтрока(СтрокаТаблицы.ДопРеквизитыШаблона_ВходящиеДанные) Тогда
		
		// Свойство и значение свойства
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрокаТаблицы.ДопРеквизитыШаблона_ВходящиеДанные);
		СоответствиеСвойства = ПрочитатьJSON(ЧтениеJSON, Истина);
		
		РазрешенныеСимволыИмениРеквизита = Новый Соответствие;
		СтрСимволы = "йцукенгшщзхъфывапролджэячсмитьбю_qwertyuiopasdfghjklzxcvbnm01234567890";
		Для н=1 По СтрДлина(СтрСимволы) Цикл
			РазрешенныеСимволыИмениРеквизита.Вставить(Сред(СтрСимволы, н, 1), Истина);
		КонецЦикла;	
		
		Для каждого ДанныеСвойства Из СоответствиеСвойства Цикл
			
			Если ЗначениеЗаполнено(ДанныеСвойства.Значение) Тогда
				
				СвойствоНаименование = ДанныеСвойства.Ключ;
				СвойствоПВХ = НайтиСоздатьПВХ(СвойствоНаименование, СсылкаКатегория, РазрешенныеСимволыИмениРеквизита);
				ЗначениеСвойства = НайтиСоздатьЗначениеСвойства(СвойствоПВХ, СсылкаНаборСвойств, ДанныеСвойства.Значение);
				
				СтруктураОтбора = Новый Структура("Свойство,Значение", СвойствоПВХ, ЗначениеСвойства);
				СтрокиСвойства = ЭлементСправочника.ДополнительныеРеквизиты.НайтиСтроки(СтруктураОтбора);
				Если СтрокиСвойства.Количество()=0 Тогда
					НовСтр = ЭлементСправочника.ДополнительныеРеквизиты.Добавить();
					НовСтр.Свойство = СвойствоПВХ;
					НовСтр.Значение = ЗначениеСвойства;
				КонецЕсли;
			КонецЕсли;						
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗагрузитьССайта(АдресКартинки)
	
	ОписаниеОшибки = "";
	НастройкиПодключения = Новый Структура("АдресСайта", АдресКартинки);
	ОбменССайтом.ПолучитьНастройкиПодключения(НастройкиПодключения, ОписаниеОшибки);
	
	Если НРег(Лев(АдресКартинки, 7)) = "http://" Тогда
		Соединение = Новый HTTPСоединение(НастройкиПодключения.Сервер);
	Иначе
		Соединение = Новый HTTPСоединение(НастройкиПодключения.Сервер,,,,,, Новый ЗащищенноеСоединениеOpenSSL);
	КонецЕсли;
	
	Ответ = Соединение.Получить(Новый HTTPЗапрос(НастройкиПодключения.АдресСкрипта));
	
	Если Ответ.КодСостояния <> 200 Тогда
		Возврат Неопределено;		                          	
	КонецЕсли;

	Возврат Ответ.ПолучитьТелоКакДвоичныеДанные();
	
КонецФункции

Процедура ЗагрузитьКартинкиИзExcel(ТаблицаСопоставленияДанных)
	
	Для каждого СтрокаТаблицы Из ТаблицаСопоставленияДанных Цикл
		
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Картинка_ВходящиеДанные) Тогда
			
			ЗагрузкаССайта = Ложь;
			
			Попытка
				// если путь неправильный, пропускаем
				Если СтрНайти(СтрокаТаблицы.Картинка_ВходящиеДанные, "http") > 0 Тогда
					ДвоичныеДанныеКартинки = ЗагрузитьССайта(СтрокаТаблицы.Картинка_ВходящиеДанные);	
					ЗагрузкаССайта = Истина;
				Иначе
					ДвоичныеДанныеКартинки = Новый ДвоичныеДанные(СтрокаТаблицы.Картинка_ВходящиеДанные);
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка картинок'", "ru"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
			Если ДвоичныеДанныеКартинки = Неопределено Тогда
				ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка картинок'", "ru"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , 
					СтрШаблон(Нстр("ru='Не удалось загрузить картинку с адресом %1'", "ru"), СтрокаТаблицы.Картинка_ВходящиеДанные));
				Продолжить;
			КонецЕсли;
			
			РасширениеБезТочки = "";
			ИмяБезРасширения = "";
			
			Если ЗагрузкаССайта Тогда
				СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(СтрокаТаблицы.Картинка_ВходящиеДанные);
				ЧастиКаталогов = СтрРазделить(СтруктураURI.ПутьНаСервере, "/", Ложь);
				ИмяФайла = ЧастиКаталогов[ЧастиКаталогов.Количество()-1];
				
				ЧастиФайла = СтрРазделить(ИмяФайла, ".", Ложь);
				Если ЧастиФайла.Количество() > 0 Тогда
					РасширениеБезТочки = ЧастиФайла[1];
					ИмяБезРасширения = ЧастиФайла[0];
				Иначе
					// не удалось распарсить путь к файлу
					ЗаписьЖурналаРегистрации(Нстр("ru='Загрузка картинок'", "ru"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , 
						СтрШаблон(Нстр("ru='Не удалось загрузить картинку с адресом %1'", "ru"), СтрокаТаблицы.Картинка_ВходящиеДанные));
					Продолжить;
				КонецЕсли; 
			Иначе
				ЧастиИмениФайла = СтрРазделить(СтрокаТаблицы.Картинка_ВходящиеДанные, ".", Ложь);
				Если ЧастиИмениФайла.Количество() > 1 Тогда
					РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
					ЧастиКаталогов = СтрРазделить(ЧастиИмениФайла[0], "\", Ложь);
					ИмяБезРасширения = ЧастиКаталогов[ЧастиКаталогов.Количество()-1];
				КонецЕсли;
			КонецЕсли; 
			
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", СтрокаТаблицы.Номенклатура);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
			
			//ищем сначала по имени картинки
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	НоменклатураПрисоединенныеФайлы.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.НоменклатураПрисоединенныеФайлы КАК НоменклатураПрисоединенныеФайлы
			|ГДЕ
			|	НоменклатураПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
			|	И НоменклатураПрисоединенныеФайлы.Наименование = &Наименование";
			Запрос.УстановитьПараметр("ВладелецФайла", СтрокаТаблицы.Номенклатура);
			Запрос.УстановитьПараметр("Наименование", ИмяБезРасширения);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			СохраненнаяКартинка = Неопределено;
			Пока Выборка.Следующий() Цикл
				СохраненнаяКартинка = Выборка.Ссылка;
			КонецЦикла;
			
			//затем по значению
			ХешСохраненного = Неопределено;
			Если ЗначениеЗаполнено(СохраненнаяКартинка) Тогда
				ДвоичныеДанныеСохраненногоФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СохраненнаяКартинка);
				
				ХешЗагруженного = ХешФайла(ДвоичныеДанныеКартинки);
				ХешСохраненного = ХешФайла(ДвоичныеДанныеСохраненногоФайла);
				
				Если ХешСохраненного <> ХешЗагруженного Тогда
					АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки);
					ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", АдресФайлаВоВременномХранилище);
					ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", Неопределено);
					
					РаботаСФайлами.ОбновитьФайл(СохраненнаяКартинка, ПараметрыФайла);
				КонецЕсли;
			Иначе
				АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки);
				
				ЭлементСправочника = СтрокаТаблицы.Номенклатура.ПолучитьОбъект();
				ЭлементСправочника.ФайлКартинки = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
				ЭлементСправочника.Записать();
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗагрузитьИерархиюРодителей(МассивИерархии, ДеревоИерархии)
	
	ПоследнийРодитель = Справочники.Номенклатура.ПустаяСсылка();
	ПоследняяСтрокаДерева = ДеревоИерархии; // Корневой элемент
	 
	Для каждого строкаКаталог Из МассивИерархии Цикл
	
		НайденныеСтроки = ПоследняяСтрокаДерева.Строки.НайтиСтроки(Новый Структура("Каталог", СокрЛП(строкаКаталог)));
		
		Для каждого строкаДерева Из НайденныеСтроки Цикл
			Если НЕ ЗначениеЗаполнено(строкаДерева.ГруппаСсылка) Тогда
				РодительГруппа = Справочники.Номенклатура.СоздатьГруппу();
				
				УстановитьУИДНового(строкаДерева, РодительГруппа);
				
				РодительГруппа.Наименование = СокрЛП(строкаКаталог);
				РодительГруппа.Родитель = ПоследнийРодитель;
				
				РодительГруппа.Записать();
				
				строкаДерева.ГруппаСсылка = РодительГруппа.Ссылка;
			КонецЕсли; 
			
			ПоследнийРодитель = строкаДерева.ГруппаСсылка;
			ПоследняяСтрокаДерева = НайденныеСтроки[0];
			Прервать;
		КонецЦикла;
				
	КонецЦикла; 
	
	Возврат ПоследнийРодитель;
	
КонецФункции

Функция ХешФайла(ДвоичныеДанныеФайла)
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(ДвоичныеДанныеФайла);
	Возврат ХешированиеДанных.ХешСумма;
	
КонецФункции

Функция НайтиСоздатьПВХ(СвойствоНаименование, Категория, РазрешенныеСимволыИмениРеквизита)
	
	СсылкаНаборСвойств = Категория.НаборСвойств;
	
	ДопРеквизиты = Новый Структура;
	СтруктураОтбора = Новый Структура("Наименование", СвойствоНаименование);
	
	// Создать/найти Набор свойств
	СтруктураОтбора.Вставить("НаборСвойств", СсылкаНаборСвойств);
	
	ДопРеквизиты.Вставить("Заголовок", СвойствоНаименование);
	ДопРеквизиты.Вставить("Представление", СвойствоНаименование);
	ДопРеквизиты.Вставить("ТипЗначения", Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов"));
	
	
	УИД = Новый УникальныйИдентификатор();
	СтрокаУИД = СтрЗаменить(Строка(УИД), "-", "");
	
	ИмяРеквизита = "";
	номерСимвола = 1;
	
	Пока номерСимвола <= СтрДлина(СвойствоНаименование) Цикл
		ПроверСимвол = Сред(СвойствоНаименование, номерСимвола, 1);
		Если РазрешенныеСимволыИмениРеквизита.Получить(НРег(ПроверСимвол)) <> Неопределено Тогда
			ИмяРеквизита = ИмяРеквизита + ПроверСимвол;
		КонецЕсли;
		номерСимвола = номерСимвола + 1;
	КонецЦикла;
	ДопРеквизиты.Вставить("Имя", ИмяРеквизита + СтрокаУИД);
	
	ДопРеквизиты.Вставить("Доступен", Истина);
	ДопРеквизиты.Вставить("Виден", Истина);
	ДопРеквизиты.Вставить("ДополнительныеЗначенияИспользуются", Истина);
	
	СсылкаПВХ = СоздатьИлиНайтиСуществующий(СтруктураОтбора, ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка(), ДопРеквизиты);
	
	Возврат СсылкаПВХ;
	
КонецФункции

Функция НайтиСоздатьЗначениеСвойства(СсылкаПВХ, СсылкаНаборСвойств, СвойствоНаименование)
		
	// Заполнить ПВХ в наборе свойств
	обНаборСвойств = СсылкаНаборСвойств.ПолучитьОбъект();
	НайденнаяСтрока = обНаборСвойств.ДополнительныеРеквизиты.Найти(СсылкаПВХ, "Свойство");
	Если НайденнаяСтрока = Неопределено Тогда
		НовСтр = обНаборСвойств.ДополнительныеРеквизиты.Добавить();
		НовСтр.Свойство = СсылкаПВХ;
		
		Попытка
			обНаборСвойств.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	// Создать/найти значения свойства
	СтруктураОтбора = Новый Структура("Наименование, Владелец", СвойствоНаименование, СсылкаПВХ);
	ДопРеквизиты = Новый Структура;	
	СсылкаЗначениеСвойства = СоздатьИлиНайтиСуществующий(СтруктураОтбора, Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка(), ДопРеквизиты);
	
	Возврат СсылкаЗначениеСвойства;
	
КонецФункции

Функция СоздатьИлиНайтиСуществующий(СтруктураОтбора, СсылкаТип, ДопРеквизиты=Неопределено)
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаТип);
	ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(СсылкаТип);
	
	Если ДопРеквизиты = Неопределено Тогда
		ДопРеквизиты = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИмяСпр.Ссылка
	|ИЗ
	|	&ИмяТаблицы КАК ИмяСпр
	|ГДЕ
	|	&УсловияЗапроса");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТаблицы", ИмяТаблицы);
	
	УсловияЗапроса = Новый Массив;
	Для каждого ТекОтбор Из СтруктураОтбора Цикл
		
		УсловияЗапроса.Добавить(СтрШаблон("ИмяСпр.%1 = &%1", ТекОтбор.Ключ));
		Запрос.УстановитьПараметр(ТекОтбор.Ключ, ТекОтбор.Значение);
		
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловияЗапроса", СтрСоединить(УсловияЗапроса, " И "));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если СтруктураОтбора.Свойство("ЭтоГруппа") Тогда
			Об = МенеджерОбъекта.СоздатьГруппу();
		Иначе
			Об = МенеджерОбъекта.СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Об, СтруктураОтбора);
		ЗаполнитьЗначенияСвойств(Об, ДопРеквизиты);
		
		Попытка
			Об.Записать();
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		Возврат Об.Ссылка;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ИнтерфейсПечати

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПечатьЭтикетокИЦенников)
		И ПолучитьФункциональнуюОпцию("ПечатьЭтикетокИЦенников")
		И НЕ УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.ЕстьПрофильРабочееМестоКассира()
		И ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры)   Тогда
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЭтикетокИзПриходнойНакладной";
		КомандаПечати.Представление = НСтр("ru = 'Печать этикеток'");
		КомандаПечати.Порядок = 14;
		
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "УправлениеНебольшойФирмойКлиент.ПечатьЭтикетокИЦенниковИзДокументов";
		КомандаПечати.Идентификатор = "ПечатьЦенниковИзПриходнойНакладной";
		КомандаПечати.Представление = НСтр("ru = 'Печать ценников'");
		КомандаПечати.Порядок = 17;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ЗаполнитьВидыСтавокНДС(Параметры = Неопределено, ТолькоНезаполненные = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтавкиНДС.Ссылка КАК Ссылка,
	|	СтавкиНДС.ВидСтавкиНДС КАК ВидСтавкиНДС
	|ПОМЕСТИТЬ ВТСТАВКИ
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	Номенклатура.Ссылка КАК Ссылка,
	|	СправочникСтавки.ВидСтавкиНДС
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСТАВКИ КАК СправочникСтавки
	|		ПО (СправочникСтавки.Ссылка = Номенклатура.УдалитьСтавкаНДС)
	|ГДЕ
	|	Номенклатура.УдалитьСтавкаНДС <> ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)
	|	И Номенклатура.ВидСтавкиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.ПустаяСсылка)
	|	И НЕ Номенклатура.ЭтоГруппа";
	
	Если Параметры = Неопределено Тогда
		Запрос.Текст =СтрЗаменить(Запрос.Текст, "ПЕРВЫЕ 1000", "");
		Если Не ТолькоНезаполненные Тогда
			Запрос.Текст =СтрЗаменить(Запрос.Текст, "И Номенклатура.ВидСтавкиНДС = ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.ПустаяСсылка)", "");
		КонецЕсли;
		
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьОшибки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		НоменклатураОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НоменклатураОбъект.ВидСтавкиНДС = Выборка.ВидСтавкиНДС;
		НоменклатураОбъект.ДополнительныеСвойства.Вставить("ОбновлениеВидовСтавокНДС");
		
		Попытка
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НоменклатураОбъект);
		Исключение
			ЕстьОшибки = Истина;
			ТекстСообщения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(
				Нстр("ru='Ошибка заполнения вида ставки НДС'", "ru"),
				УровеньЖурналаРегистрации.Ошибка,,
				НоменклатураОбъект.Ссылка,
				ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если Параметры <> Неопределено Тогда
		Параметры.ОбработкаЗавершена = НЕ ЕстьОшибки И Выборка.Количество() < 1000;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДанныхФоновогоЗадания

Процедура ДанныеДиаграмм(Параметры, ВременноеХранилищеРезультата) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Параметры.ТекстЗапроса;
	Для каждого парамЗапроса Из Параметры.ПараметрыЗапроса Цикл
		Запрос.Параметры.Вставить(парамЗапроса.Ключ, парамЗапроса.Значение);
	КонецЦикла;
	Результат = Запрос.ВыполнитьПакет();
	
	ПоместитьВоВременноеХранилище(Новый Структура("РезультатЗапроса, ПараметрыВывода", Результат, Параметры.ПараметрыВывода), ВременноеХранилищеРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли