
#Область СлужебныеОбработчики

&НаКлиенте
Процедура УстановитьВидимостьЭлементов()
	
	ЭтоСтатический = (Объект.ТипВидаЦен = КэшЗначений.Статический);
	ЭтоДинамическийПроцент = (Объект.ТипВидаЦен = КэшЗначений.ДинамическийПроцент);
	ЭтоДинамическийФормула = (Объект.ТипВидаЦен = КэшЗначений.ДинамическийФормула);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РассчитыватьАвтоматически", "Видимость", НЕ ЭтоСтатический);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УточнитьРасчетПоЦеновымГруппам", "Видимость", НЕ ЭтоСтатический);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДинамическийПроцент", "Видимость", ЭтоДинамическийПроцент);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВалютаЦены", 				"Видимость", НЕ ЭтоДинамическийПроцент);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДинамическийФормула", "Видимость", ЭтоДинамическийФормула);
	
	УстановитьЗаголовокКомандыЗаписатьИЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКомандыЗаписатьИЗакрыть()
	
	Если Объект.ТипВидаЦен = ПредопределенноеЗначение("Перечисление.ТипыВидовЦен.Статический")
		ИЛИ ПропуститьРегистрациюОчередиЦен Тогда
		
		ТекстЗаголовка = НСтр("ru =''");
		
	Иначе
		
		ТекстЗаголовка = НСтр("ru ='Регистрировать новые цены и закрыть'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаЗаписатьИЗакрыть", "Заголовок", ТекстЗаголовка);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Получает детальные данные из базовой цены
// используется только если текущий элемент имеет 
// динамический вид
//
Функция ПолучитьДанныеБазовойЦены(БазовыйВидЦен)
	
	Возврат Новый Структура("ВалютаЦены, ЦенаВключаетНДС", 
			?(ЗначениеЗаполнено(БазовыйВидЦен), БазовыйВидЦен.ВалютаЦены, Справочники.Валюты.ПустаяСсылка()), 
			?(ЗначениеЗаполнено(БазовыйВидЦен), БазовыйВидЦен.ЦенаВключаетНДС, Ложь));
	
КонецФункции // ПолучитьДанныеБазовойЦены()

&НаСервереБезКонтекста
Функция ОбновитьДанныеОчередиРасчетаЦенНаСервере(ВидЦенСсылка)
	
	ДанныеОчередиЦен = Новый Структура("КоличествоЗаписейВОчередиЦен, ВакантныйНомерОчередиРасчетаЦен", 0, 0);
	
	Если ЗначениеЗаполнено(ВидЦенСсылка) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ Сумма(1) КАК КоличествоЗаписейВОчередиЦен ИЗ РегистрСведений.ОчередьРасчетаЦен ГДЕ ВидЦенРасчетный = &ВидЦенРасчетный");
		Запрос.УстановитьПараметр("ВидЦенРасчетный", ВидЦенСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен = Выборка.КоличествоЗаписейВОчередиЦен;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен = Константы.ВакантныйНомерОчередиРасчетаЦен.Получить();
	
	Возврат ДанныеОчередиЦен;
	
КонецФункции

&НаСервере
// Процедура создает новый идентификатор вида цены.
// В последствии данный идентификатор может использоваться в формулах.
//
Процедура СформироватьНовыйИдентификатор(СообщениеПользователю)
	
	Если НЕ ПустаяСтрока(Объект.Ссылка) Тогда
		
		ОписаниеИспользования = ПроверитьВидЦенНаИспользованиеВФормулах(Объект.Ссылка);
		Если ОписаниеИспользования <> Неопределено Тогда
			
			ШаблонСообщения = НСтр("ru ='Необходимо проверить формулы динамических видов цен:%1'");
			
			ВидыЦенСтрокой = "";
			Для каждого СтруктураОписания Из ОписаниеИспользования Цикл
				
				ВидыЦенСтрокой = ВидыЦенСтрокой + Символы.ПС + СтруктураОписания.Наименование;
				
			КонецЦикла;
			
			СообщениеПользователю = СтрШаблон(ШаблонСообщения, ВидыЦенСтрокой);
			
			ЗаписьЖурналаРегистрации(ЦенообразованиеСервер.ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Предупреждение, Метаданные.Справочники.ВидыЦен, Объект.Ссылка, СообщениеПользователю);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЦенообразованиеФормулыСервер.СформироватьНовыйИдентификаторВидаЦен(Объект.ИдентификаторФормул, Объект.Наименование);
	
КонецПроцедуры // СформироватьНовыйИдентификатор()

&НаКлиенте
// Процедура открывает конструктор формулы
//
Процедура ОткрытьКонструкторФормулы()
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормулы = Новый Структура("Ссылка, Формула", Объект.Ссылка, Объект.Формула);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КонструкторФормулЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.ВидыЦен.Форма.КонструкторФормул", ПараметрыФормулы, Элементы.Формула,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОткрытьКонструкторФормулы()

&НаСервере
Процедура УдалитьЗаписиРегистраЦенПоТекущемуЭлементу(ВидЦен)
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ВызватьИсключение НСтр("ru ='Действие доступно только администратору.'");
		
	КонецЕсли;
	
	Справочники.ВидыЦен.УдалитьВсеЦеныПоВидуЦен(ВидЦен);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчетЦенНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		
		ПараметрыОткрытия = Новый Структура("ВидЦен", Объект.Ссылка);
		
		ОткрытьФорму("Обработка.ФормированиеЦенНоменклатуры.Форма.РасчетныеЦены", ПараметрыОткрытия, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФорматаЦен()
	
	ОбновитьГруппуФорматЦен();
	
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГруппуФорматЦен()
	
	ЗаголовокСвернутого = СтрШаблон(НСтр("ru ='Формат цен (''%1, %2'')'"), СокрЛП(Объект.ПорядокОкругления), ?(Объект.ОкруглятьВБольшуюСторону, НСтр("ru ='ОКР(вверх)'"), НСтр("ru ='ОКР(матем.)'")));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаФорматЦен", "ЗаголовокСвернутогоОтображения", ЗаголовокСвернутого);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьПример(ЧисловоеЗначение, ПорядокОкругления, ОкруглятьВБольшуюСторону, ФорматнаяСтрока)
	
	Возврат Формат(УправлениеНебольшойФирмойСервер.ОкруглитьЦену(ЧисловоеЗначение, ПорядокОкругления, ОкруглятьВБольшуюСторону), ФорматнаяСтрока);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтсутствуютЗаписиЦен(ТекущаяСсылка)
	
	Если НЕ ЗначениеЗаполнено(ТекущаяСсылка) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 РегистрСведений.ЦеныНоменклатуры.Номенклатура ГДЕ РегистрСведений.ЦеныНоменклатуры.ВидЦен = &Сcылка");
	Запрос.УстановитьПараметр("Сcылка", ТекущаяСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВидЦенНаИспользованиеВФормулах(ВидЦен)
	
	Возврат ЦенообразованиеФормулыСервер.ПроверитьВидЦенНаИспользованиеВФормулах(ВидЦен);
	
КонецФункции

&НаСервере
Процедура ПроверитьЗначениеВалюты(Ошибки)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ Склады.Ссылка КАК Склад ИЗ Справочник.СтруктурныеЕдиницы КАК Склады ГДЕ Склады.РозничныйВидЦен = &РозничныйВидЦен");
	Запрос.УстановитьПараметр("РозничныйВидЦен", Объект.Ссылка);
	
	РезультатВыполненияЗапроса = Запрос.Выполнить();
	Если РезультатВыполненияЗапроса.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ВалютаЦены <> КэшЗначений.НациональнаяВалюта Тогда
		
		ТекстСообщения = НСтр("ru = 'Текущий вид цен используется в розничных структурных единицах, по этому для него можно использовать только национальную валюту.'");
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, "Объект.ВалютаЦены", ТекстСообщения, "");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьОчередьРасчетаЦенНаСервере()
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ВызватьИсключение НСтр("ru ='Действие доступно только администратору.'");
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидЦенРасчетный.Установить(Объект.Ссылка, Истина);
	НаборЗаписей.Записать(Истина);
	
	ДанныеОчередиЦен = ОбновитьДанныеОчередиРасчетаЦенНаСервере(Объект.Ссылка);
	КоличествоЗаписейВОчередиЦен = ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен;
	ВакантныйНомерОчередиРасчетаЦен = ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен;
	
КонецПроцедуры

#Область ДлительныеОперации

&НаКлиенте
Процедура ОбработатьРезультатВыполненияФоновогоЗадания(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗагрузки = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки = РезультатЗагрузки;
	
	Заголовок = НСтр("ru ='Загрузка цен'");
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки.Статус = "Выполнено" Тогда 
		
		ТекстОповещения = НСтр("ru ='Цены номенклатуры.
			|Загрузка данных завершена.'");
		
		ПоказатьОповещениеПользователя(ТекстОповещения, , Заголовок);
		
	ИначеЕсли КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки.Статус = "Ошибка" Тогда
		
		ПоказатьОповещениеПользователя(РезультатЗагрузки.КраткоеПредставлениеОшибки, , Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиПодготовленныхДанных()
	
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки.Статус <> "Выполняется" Тогда 
		
		ОбработатьРезультатВыполненияФоновогоЗадания(КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатВыполненияФоновогоЗадания", ЭтотОбъект, Неопределено);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения		= НСтр("ru ='Загрузка цен из внешнего источника'");
	ПараметрыОжидания.ВыводитьОкноОжидания	= Истина;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(Метаданные.РегистрыСведений.ЦеныНоменклатуры, НастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияПредупреждение", "Видимость", НЕ Объект.ЦеныАктуальны И ЗначениеЗаполнено(Объект.Ссылка));
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ИзмененаВалюта", Ложь);
	КэшЗначений.Вставить("Статический", Перечисления.ТипыВидовЦен.Статический);
	КэшЗначений.Вставить("ДинамическийПроцент", Перечисления.ТипыВидовЦен.ДинамическийПроцент);
	КэшЗначений.Вставить("ДинамическийФормула", Перечисления.ТипыВидовЦен.ДинамическийФормула);
	КэшЗначений.Вставить("РучнаяКорректировкаФлага", Ложь);
	КэшЗначений.Вставить("НациональнаяВалюта", Константы.НациональнаяВалюта.Получить());
	КэшЗначений.Вставить("ПараметрыДлительнойОперации", Новый Структура);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("РезультатЗагрузки",	Неопределено);
	КэшЗначений.ПараметрыДлительнойОперации.Вставить("ИдентификаторЗадания","");
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаЦены) Тогда
		
		Объект.ВалютаЦены = КэшЗначений.НациональнаяВалюта;
		
	КонецЕсли;
	
	ДанныеОчередиЦен = ОбновитьДанныеОчередиРасчетаЦенНаСервере(Объект.Ссылка);
	КоличествоЗаписейВОчередиЦен = ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен;
	ВакантныйНомерОчередиРасчетаЦен = ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен;
	
	Пример = 987654.321;
	Если ПустаяСтрока(Объект.ФорматЦены) Тогда
		
		Объект.ФорматЦены = "ЧЦ='15'; ЧДЦ='2'";
		
	КонецЕсли;
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаВидимостьИдентификатора",	"Пометка",		Объект.КоличествоПопытокСлужебный > 1);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлужебныеРеквизиты",		"Видимость",	Объект.КоличествоПопытокСлужебный > 1);
	
	ВидимостьКнопкиРасчетаЦен = НЕ Объект.РассчитыватьАвтоматически И (Объект.ТипВидаЦен = КэшЗначений.ДинамическийПроцент ИЛИ Объект.ТипВидаЦен = КэшЗначений.ДинамическийФормула);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРассчитатьЦены",			"Видимость",	ВидимостьКнопкиРасчетаЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТипВидаЦен",					"Доступность",	ОтсутствуютЗаписиЦен(Объект.Ссылка));
	
	// Установка доступности цен для редактирования.
	РазрешеноРедактированиеЦенДокументов = УправлениеНебольшойФирмойУправлениеДоступомПовтИсп.РазрешеноРедактированиеЦенДокументов();
	
	ЭтаФорма.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр ИЛИ НЕ РазрешеноРедактированиеЦенДокументов;
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		Элементы.ЦенаВключаетНДС.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.ЦенаВключаетНДС.Заголовок = ?(Объект.ЦенаВключаетНДС, НСтр("ru ='Цена включает НДС'"), НСтр("ru ='НДС сверху'"));
		Элементы.ФорматЦены.Доступность = Ложь;
		
	Иначе
		
		Элементы.ФорматЦены.Доступность = ПравоДоступа("Изменение", Метаданные.Справочники.ВидыЦен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьЭлементов();
	ОбновитьГруппуФорматЦен();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Перем Ошибки;
	
	Если Объект.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
		
		ЦенообразованиеФормулыСервер.ПроверитьФормулу(Ошибки, Объект.Формула);
		Для каждого СтрокаЦеновойГруппы Из Объект.ЦеновыеГруппы Цикл
			
			ЦенообразованиеФормулыСервер.ПроверитьФормулу(Ошибки, СтрокаЦеновойГруппы.Формула);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический Тогда
		
		ПроверитьЗначениеВалюты(Ошибки);
		
	Иначе
		
		Справочники.ВидыЦен.ПроверитьДублированиеЦеновыхГрупп(Ошибки, Объект.ЦеновыеГруппы.Выгрузить());
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ПередЗаписью.
//
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СправочникВидЦенЗапись");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Объект.ЦеныАктуальны = (Объект.ТипВидаЦен = КэшЗначений.Статический);
	
КонецПроцедуры //ПередЗаписью()

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("УдалитьВсеТекущиеЦены", КэшЗначений.ИзмененаВалюта);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПропуститьРегистрациюОчередиЦен", ПропуститьРегистрациюОчередиЦен);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура РедактироватьФормулу(Команда)
	
	ОткрытьКонструкторФормулы();
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьРасчетПоЦеновымГруппам(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ТипВидаЦен",		Объект.ТипВидаЦен);
	ПараметрыОткрытия.Вставить("Формула",			Объект.Формула);
	ПараметрыОткрытия.Вставить("БазовыйВидЦен",		Объект.БазовыйВидЦен);
	ПараметрыОткрытия.Вставить("Процент",			Объект.Процент);
	ПараметрыОткрытия.Вставить("ЦеновыеГруппы",		Объект.ЦеновыеГруппы);
	ПараметрыОткрытия.Вставить("Наименование",		Объект.Наименование);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УточнитьРасчетПоЦеновымГруппамЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.ВидыЦен.Форма.ФормаЭлементаЦеновыеГруппы", ПараметрыОткрытия, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УточнитьРасчетПоЦеновымГруппамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		
		Объект.ЦеновыеГруппы.Очистить();
		Для каждого СтрокаТаблицы Из Результат.ЦеновыеГруппы Цикл
			
			НоваяСтрока = Объект.ЦеновыеГруппы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СлужебныеРеквизиты(Команда)
	
	Элементы.ФормаВидимостьИдентификатора.Пометка = НЕ Элементы.ФормаВидимостьИдентификатора.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСлужебныеРеквизиты", "Видимость", Элементы.ФормаВидимостьИдентификатора.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЦены(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru ='Внимание!
		|Все цены по этой колонке прайс-листа будут удалены. 
		|Продолжить?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветВопросаПроУдалениеЦен", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекстСообщения = НСтр("ru ='Операция имеет смыл только для записанных объектов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветВопросаПроУдалениеЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		УдалитьЗаписиРегистраЦенПоТекущемуЭлементу(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОчередьРасчетаЦен(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru ='Внимание!
		|Очередь расчета цен будет очищена.
		|Продолжить?'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветВопросаОчисткиОчередиЦен", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекстСообщения = НСтр("ru ='Операция имеет смыл только для записанных объектов'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветВопросаОчисткиОчередиЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОчиститьОчередьРасчетаЦенНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЦены(Команда)
	Перем ОписаниеОшибки;
	
	Если Модифицированность = Истина Тогда
		
		ТекстВопроса = НСтр("ru ='Для расчета цен необходимо записать текущий объект.
		|Записать и продолжить?'");
		
		ДополнительныеПараметры = Новый Структура("ОписаниеОшибки", ОписаниеОшибки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаОЗаписиВидаЦен", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьРасчетЦенНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаОЗаписиВидаЦен(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьРасчетЦенНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаголовокСлужебныйНажатие(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСервисныеВозможности", "Видимость", (ВРЕГ(Лев(Объект.ОписаниеОшибки, 5)) = "IDDQD"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматЦеныНажатие(Элемент, СтандартнаяОбработка)
	
#Если НЕ МобильныйКлиент Тогда
	
	СтандартнаяОбработка = Ложь;
	
	Конструктор = Новый КонструкторФорматнойСтроки(Объект.ФорматЦены);
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов("Число");
	Конструктор.Показать(Новый ОписаниеОповещения("ФорматированиеЦеныЗавершение",ЭтаФорма));
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматированиеЦеныЗавершение(Результат, Параметры) Экспорт

	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ФорматЦены = ?(ПустаяСтрока(Результат), "ЧЦ='15'; ЧДЦ='2'", Результат);
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРегламентныеИФоновыеЗаданияНажатие(Элемент)
	
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентныеИФоновыеЗадания");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСвязиВидовЦенНажатие(Элемент)
	
	ОткрытьФорму("РегистрСведений.СвязиВидовЦенСлужебный.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезРегистрацииНовыхЦен(Команда)
	
	ПропуститьРегистрациюОчередиЦен = Истина;
	
	Записать();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеОчередиРасчетаЦен(Команда)
	
	ДанныеОчередиЦен = ОбновитьДанныеОчередиРасчетаЦенНаСервере(Объект.Ссылка);
	КоличествоЗаписейВОчередиЦен = ДанныеОчередиЦен.КоличествоЗаписейВОчередиЦен;
	ВакантныйНомерОчередиРасчетаЦен = ДанныеОчередиЦен.ВакантныйНомерОчередиРасчетаЦен;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭлементовФормы

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	#Если МобильныйКлиент Тогда
		
		Элементы.ЦенаВключаетНДС.Заголовок = ?(Объект.ЦенаВключаетНДС, НСтр("ru ='Цена включает НДС'"), НСтр("ru ='НДС сверху'"));
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ТипВидаЦен.
//
Процедура ТипВидаЦенПриИзменении(Элемент)
	
	Объект.РассчитыватьАвтоматически = (Объект.ТипВидаЦен <> КэшЗначений.Статический);
	Объект.ЦеныАктуальны = (Объект.ТипВидаЦен = КэшЗначений.Статический);
	
	УстановитьВидимостьЭлементов();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Пример.
//
Процедура ПримерПриИзменении(Элемент)
	
	ОтформатированныйПример = РассчитатьПример(Пример, Объект.ПорядокОкругления, Объект.ОкруглятьВБольшуюСторону, Объект.ФорматЦены);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокОкругленияПриИзменении(Элемент)
	
	ПриИзмененииФорматаЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкруглятьВБольшуюСторонуПриИзменении(Элемент)
	
	ПриИзмененииФорматаЦен();
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик события ПриИзменении элемента формы "БазовыйВидЦен"
//
// Имеет смысл только для динамических типов цен, т.к. из базовых берется валюта и 
// значение параметра ЦенаВключаетНДС
//
Процедура БазовыйВидЦенПриИзменении(Элемент)
	
	ДанныеБазовойЦены 		= ПолучитьДанныеБазовойЦены(Объект.БазовыйВидЦен);
	
	Объект.ВалютаЦены 		= ДанныеБазовойЦены.ВалютаЦены;
	Объект.ЦенаВключаетНДС 	= ДанныеБазовойЦены.ЦенаВключаетНДС;
	
КонецПроцедуры // БазовыйВидЦенПриИзменении()

&НаКлиенте
Процедура ФормулаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКонструкторФормулы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонструкторФормулЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Результат = КодВозвратаДиалога.Да Тогда
		
		Результат.Свойство("Формула", Объект.Формула);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	СообщениеПользователю = "";
	СформироватьНовыйИдентификатор(СообщениеПользователю);
	
	Если НЕ ПустаяСтрока(СообщениеПользователю) Тогда
		
		ПоказатьПредупреждение(, СообщениеПользователю, , НСтр("ru ='Внимание!'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьАвтоматическиПриИзменении(Элемент)
	
	ВидимостьКнопкиРасчетаЦен = НЕ Объект.РассчитыватьАвтоматически И (Объект.ТипВидаЦен <> КэшЗначений.Статический);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаРассчитатьЦены", "Видимость", ВидимостьКнопкиРасчетаЦен);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныАктуальныПриИзменении(Элемент)
	
	КэшЗначений.РучнаяКорректировкаФлага = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьРегистрациюПриЗаписиПриИзменении(Элемент)
	
	УстановитьЗаголовокКомандыЗаписатьИЗакрыть()
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаЦеныПриИзменении(Элемент)
	
	ВариантыОтветов = Новый СписокЗначений;
	ВариантыОтветов.Добавить(КодВозвратаДиалога.Да, НСтр("ru ='Удалить текущие цены'"));
	ВариантыОтветов.Добавить(КодВозвратаДиалога.Нет, НСтр("ru ='Сохранить текущие цены'"));
	
	ТекстВопроса = НСтр("ru ='Текущие цены были рассчитаны по предыдущей валюте и, возможно, 
		|они могут быть не актуальны для новой валюты. 
		|Рекомендуем удалить текущие значения и рассчитать новые цены.'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОбИзмененииВалюты", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, ВариантыОтветов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОбИзмененииВалюты(ОтветПользователя, ДополнительныеПараметры) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		
		КэшЗначений.ИзмененаВалюта = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьЦеныИзВнешнегоИсточника(Команда)
	
	Если Объект.ТипВидаЦен <> КэшЗначений.Статический Тогда
		
		ТекстСообщения = НСтр("ru ='Загрузка предназначена только для статических видов цен.'");
		ПоказатьПредупреждение(Неопределено, ТекстСообщения, 15, НСтр("ru ='Загрузить цены из внешнего источника'"));
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		НастройкиЗагрузкиДанных.Вставить("ОбщееЗначение", Объект.Ссылка);
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата(РезультатЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗагрузки) = Тип("Структура") Тогда
		
		Если РезультатЗагрузки.ОписаниеДействия = "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника" Тогда
		
			ЗагрузкаДанныхИзВнешнегоИсточника.ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных.ИмяФормыЗагрузкиДанныхИзВнешнихИсточников);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузкаДанныхИзВнешнегоИсточникаОбработкаРезультата", ЭтотОбъект, НастройкиЗагрузкиДанных);
			ЗагрузкаДанныхИзВнешнегоИсточникаКлиент.ПоказатьФормуЗагрузкиДанныхИзВнешнегоИсточника(НастройкиЗагрузкиДанных, ОписаниеОповещения, ЭтотОбъект);
			
		ИначеЕсли РезультатЗагрузки.ОписаниеДействия = "ОбработатьПодготовленныеДанные" Тогда
			
			ОбработатьПодготовленныеДанные(РезультатЗагрузки);
			ПослеОбработкиПодготовленныхДанных();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	Если ЗначениеЗаполнено(КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания);
		КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания = Неопределено;
		
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыПроцедуры.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка цен из внешнего источника'");
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;
	
	ИмяМетода = "РегистрыСведений.ЦеныНоменклатуры.ОбработатьПодготовленныеДанные";
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	КэшЗначений.ПараметрыДлительнойОперации.РезультатЗагрузки		= РезультатФоновогоЗадания;
	КэшЗначений.ПараметрыДлительнойОперации.ИдентификаторЗадания	= РезультатФоновогоЗадания.ИдентификаторЗадания;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Наименование");
	Реквизиты.Добавить("ИдентификаторФормул");
	
	ЗапретРедактированияРеквизитовОбъектовКлиент.УстановитьДоступностьЭлементовФормы(ЭтотОбъект, Реквизиты);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти
