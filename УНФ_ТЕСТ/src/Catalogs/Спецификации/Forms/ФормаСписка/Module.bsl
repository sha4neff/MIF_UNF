
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Владелец") Тогда
		
		Номенклатура = Параметры.Отбор.Владелец;
		
		ИспользоватьПодсистемуПроизводство = Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить();
		ИспользоватьПодсистемуРаботы = Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы.Получить();
		
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ТипНоменклатуры, ЭтоНабор");
	
		Если НЕ ЗначениеЗаполнено(Номенклатура)
			ИЛИ ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ВидРабот
			ИЛИ ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
			ИЛИ ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Операция Тогда
			
			АвтоЗаголовок = Ложь;
			Если ИспользоватьПодсистемуПроизводство И ИспользоватьПодсистемуРаботы Тогда
				Заголовок = НСтр("ru = 'Спецификации хранятся только для запасов и работ'");
			ИначеЕсли ИспользоватьПодсистемуПроизводство Тогда
				Заголовок = НСтр("ru = 'Спецификации хранятся только для запасов'");
			Иначе
				Заголовок = НСтр("ru = 'Спецификации хранятся только для работ'");
			КонецЕсли;
			Элементы.Список.ТолькоПросмотр = Истина;
			
		// Наборы
		ИначеЕсли ЗначенияРеквизитов.ЭтоНабор Тогда
			
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Спецификации недоступны для наборов'");
			Элементы.Список.ТолькоПросмотр = Истина;
		
		// Конец Наборы
		ИначеЕсли ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас И НЕ ИспользоватьПодсистемуПроизводство Тогда
			
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Спецификации хранятся только для работ'");
			Элементы.Список.ТолькоПросмотр = Истина;
			
		ИначеЕсли ЗначенияРеквизитов.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа И НЕ ИспользоватьПодсистемуРаботы Тогда
			
			АвтоЗаголовок = Ложь;
			Заголовок = НСтр("ru = 'Спецификации хранятся только для запасов'");
			Элементы.Список.ТолькоПросмотр = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//УНФ.ОтборыСписка
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, Список, , , , , Ложь);
	ВыполнитьЗагрузкуНестандартныхОтборов();
	//Конец УНФ.ОтборыСписка
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьТехоперации") Тогда
		Элементы.ОтборМатериалОперация.ПодсказкаВвода = НСтр("ru = 'Материал'");
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЭтапыПроизводства") Тогда
		Элементы.ОтборЭтап.Видимость = Ложь;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтборПродукция", 	"Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Владелец", 				"Видимость", Ложь);
	КонецЕсли; 
	
	Если НЕ ОтображатьСпецификацииЗаказов Тогда
		СписокПустыхЗначений = Новый СписокЗначений;
		СписокПустыхЗначений.Добавить(Неопределено);
		СписокПустыхЗначений.Добавить(Документы.ЗаказПокупателя.ПустаяСсылка());
		СписокПустыхЗначений.Добавить(Документы.ЗаказНаПроизводство.ПустаяСсылка());
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Заказ", СписокПустыхЗначений, 
			Истина, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли; 
	
	// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	Если Элементы.Найти("СписокГрупповоеИзменениеОбъектов") <> Неопределено Тогда
		
		МожноРедактировать = ПравоДоступа("Редактирование", Метаданные.Справочники.Номенклатура);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокГрупповоеИзменениеОбъектов", "Видимость", МожноРедактировать);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов
	
	УправлениеФормой(ЭтотОбъект);
	УстановитьОтборНедействительная(ЭтотОбъект);
	
	// МобильныйКлиент
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ЭтоМобильныйКлиент = Истина;
	КонецЕсли;
	// Конец МобильныйКлиент
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		//УНФ.ОтборыСписка
		СохранитьНастройкиОтборов();
		//Конец УНФ.ОтборыСписка
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СпецификацияЗаписана" Тогда
		
		СтрокаСписка = Элементы.Список.ТекущиеДанные;
		Если СтрокаСписка <> Неопределено И Параметр.Ссылка = СтрокаСписка.Ссылка Тогда
			ОтразитьВозможностьУстановкиСпецификацииКакОсновной(Параметр.Недействителен, Параметр.Заказ);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если НЕ ЭтоМобильныйКлиент Тогда
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	КонецЕсли;
	
	ОтразитьВозможностьУстановкиСпецификацииКакОсновной();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСпецификацииЗаказовПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяПоляОтбора", "Заказ");
	Строки = ДанныеМеток.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаМетки Из Строки Цикл
		УдалитьМеткуОтбора(ДанныеМеток.Индекс(СтрокаМетки));
	КонецЦикла;
	
	Если НЕ ОтображатьСпецификацииЗаказов Тогда
		СписокПустыхЗначений = Новый СписокЗначений;
		СписокПустыхЗначений.Добавить(Неопределено);
		СписокПустыхЗначений.Добавить(ПредопределенноеЗначение("Документ.ЗаказПокупателя.ПустаяСсылка"));
		СписокПустыхЗначений.Добавить(ПредопределенноеЗначение("Документ.ЗаказНаПроизводство.ПустаяСсылка"));
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Список, "Заказ", СписокПустыхЗначений, 
			Истина, ВидСравненияКомпоновкиДанных.ВСписке);
	Иначе
		УправлениеНебольшойФирмойКлиентСервер.УдалитьЭлементОтбораСписка(Список, "Заказ");	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВладелецОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Владелец", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтборКатегорияПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Владелец.КатегорияНоменклатуры", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборЗаказОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("Заказ", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ОтборМатериалОперацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНестандартныеОтборы("Состав.Материал", ВыбранноеЗначение, Элемент.Родитель.Имя);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЭтапОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВидПроизводства.Этапы.Этап", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидПроизводстваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьМеткуИОтборСписка("ВидПроизводства", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИспользоватьКакОсновную(Команда)
	
	СтрокаСписка = Элементы.Список.ТекущиеДанные;
	Если СтрокаСписка=Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ИспользоватьКакОсновнуюСервер(СтрокаСписка.Владелец, СтрокаСписка.ХарактеристикаПродукции, СтрокаСписка.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьКакОсновнуюСервер(Номенклатура, Характеристика, Спецификация)
	
	Справочники.Спецификации.ИзменитьПризнакОсновнаяСпецификация(Номенклатура, Характеристика, Спецификация); 
	
	Элементы.Список.Обновить();
	Элементы.Список.ТекущаяСтрока = Спецификация;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНедействительную(Команда)
	
	Элементы.ФормаПоказыватьНедействительную.Пометка = Не Элементы.ФормаПоказыватьНедействительную.Пометка;
	
	УстановитьОтборНедействительная(ЭтотОбъект)
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	НовоеУсловноеОформление = Список.УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Недействителен", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекстаТабличнойЧасти); 

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаОтборЗаказ", 	"Видимость", Форма.ОтображатьСпецификацииЗаказов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Заказ", 			"Видимость", Форма.ОтображатьСпецификацииЗаказов);
	
	ДанныеМеток = Форма.ДанныеМеток;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ИмяПоляОтбора", "Владелец");
	Форма.МенятьОсновнуюСпецификацию = (ДанныеМеток.НайтиСтроки(СтруктураОтбора).Количество()>0);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИспользоватьКакОсновную", 					"Видимость", Форма.МенятьОсновнуюСпецификацию);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокКонтекстноеМенюИспользоватьКакОсновную", 	"Видимость", Форма.МенятьОсновнуюСпецификацию);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Основная", 										"Видимость", Форма.МенятьОсновнуюСпецификацию);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВозможностьУстановкиСпецификацииКакОсновной(Недействителен = Неопределено, Заказ = Неопределено)
	
	Если Недействителен = Неопределено Тогда
		СтрокаСписка = Элементы.Список.ТекущиеДанные;
		Если СтрокаСписка = Неопределено 
			ИЛИ НЕ СтрокаСписка.Свойство("Недействителен") 
			ИЛИ НЕ СтрокаСписка.Свойство("Заказ") Тогда
			Недействителен = Ложь;
			Заказ = Неопределено;
		Иначе
			Недействителен = СтрокаСписка.Недействителен;
			Заказ = СтрокаСписка.Заказ;
		КонецЕсли; 
	КонецЕсли;
	ДоступностьКнопки = НЕ Недействителен И НЕ ЗначениеЗаполнено(Заказ);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ФормаИспользоватьКакОсновную", "Доступность", ДоступностьКнопки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборНедействительная(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Недействителен",
		Ложь,
		,
		,
		Не Форма.Элементы.ФормаПоказыватьНедействительную.Пометка);
	
КонецПроцедуры

#КонецОбласти

#Область ЗамерыПроизводительности

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "СозданиеФормыСпецификации");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ОткрытиеФормыСпецификации");
	
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли; 
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, Список, ИмяПоляОтбораСписка);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуНестандартныхОтборов()
	
	ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы,".","");
	ОтображатьСпецификацииЗаказов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, "ОтображатьСпецификацииЗаказов", Ложь);
	
	ИменаНестандартныхПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Состав.Материал");
	Для каждого ИмяПоляКД Из ИменаНестандартныхПолей Цикл
		УправлениеНебольшойФирмойКлиентСервер.УдалитьЭлементОтбораСписка(Список, ИмяПоляКД);
		ОбновитьНестандартныеОтборы(ИмяПоляКД);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНестандартныеОтборы(ИмяПоляОтбора, ВыбранноеЗначение = Неопределено, ИмяГруппы = "")
	
	Если ВыбранноеЗначение<>Неопределено Тогда
		ПредставлениеЗначения = Строка(ВыбранноеЗначение);
		РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбора, ИмяГруппы, ВыбранноеЗначение, ПредставлениеЗначения);
	КонецЕсли; 
	
	Значения = Новый СписокЗначений;
	Для каждого стр Из ДанныеМеток Цикл
		Если стр.ИмяПоляОтбора = ИмяПоляОтбора Тогда
			Если ТипЗнч(стр.Метка)=Тип("СписокЗначений") Тогда
				Для каждого значениеСписка Из стр.Метка Цикл
				    Значения.Добавить(значениеСписка.Значение);
				КонецЦикла; 
			Иначе	
				Значения.Добавить(стр.Метка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ИспользованиеОтбора = Значения.Количество()>0;
	
	ГруппаОтборов = Неопределено; 
	Для каждого ЭлементОтбора Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора)=Тип("ГруппаЭлементовОтбораКомпоновкиДанных") И ЭлементОтбора.Представление=ИмяПоляОтбора Тогда
			ГруппаОтборов = ЭлементОтбора;
			Прервать;
		КонецЕсли; 
	КонецЦикла;
	Если ГруппаОтборов=Неопределено Тогда
		ГруппаОтборов = Список.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ГруппаОтборов.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаОтборов.Представление = ИмяПоляОтбора;
		Если ИмяПоляОтбора="Состав.Материал" Тогда
			ИменаПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Состав.Номенклатура,Операции.Операция");
			Для каждого ИмяПоля Из ИменаПолей Цикл
				ЭлементОтбора = ГруппаОтборов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				ЭлементОтбора.Использование = Истина;
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	ГруппаОтборов.Использование = ИспользованиеОтбора;
	Для каждого ЭлементОтбора Из ГруппаОтборов.Элементы Цикл
		ЭлементОтбора.ПравоеЗначение = Значения;
	КонецЦикла; 
	
	// МобильныйКлиент
	Если ВыбранноеЗначение=Неопределено Тогда
		РаботаСОтборами.УстановитьЗаголовокПравойПанелиМобильныйКлиент(ЭтотОбъект);
	КонецЕсли; 
	// Конец МобильныйКлиент
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
	Если ИмяПоляОтбора="Состав.Материал" Тогда
		СписокГруппФормыДляУдаленияДобавленныхЭлементов = РаботаСОтборами.ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
		ДанныеМеток.Удалить(СтрокаМеток);
		РаботаСОтборами.ОбновитьЭлементыМеток(ЭтотОбъект, СписокГруппФормыДляУдаленияДобавленныхЭлементов);
		ОбновитьНестандартныеОтборы(ИмяПоляОтбора);
	Иначе
		РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, Список, МеткаИД);
	КонецЕсли;
	
	Если ИмяПоляОтбора="Владелец" Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект, , , , Ложь);
	
	ИмяКлючаОбъекта = СтрЗаменить(ИмяФормы,".","");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, "ОтображатьСпецификацииЗаказов", ОтображатьСпецификацииЗаказов);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанельОтборов(Элемент)
	
	НовоеЗначениеВидимость = НЕ Элементы.ФильтрыНастройкиИДопИнфо.Видимость;
	РаботаСОтборамиКлиент.СвернутьРазвернутьПанельОтборов(ЭтотОбъект, НовоеЗначениеВидимость);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 


