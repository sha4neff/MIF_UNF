#Область СлужебныеПроцедурыИФункции

// Процедура производит обновление (заполнение) списка метаданных
// для последующего использования в качестве типов реквизитов бизнес-процессов
&НаСервере
Процедура ОбновитьСоставМетаданных() Экспорт
	
	СтрокаИменИсключений="";
	РодительСправочник=Справочники.КП_СписокМетаданных.МетаданныеСправочники;
	РодительДокумент=Справочники.КП_СписокМетаданных.МетаданныеДокументы;
	РодительПроцессЗадача=Справочники.КП_СписокМетаданных.МетаданныеПроцессыИЗадачи;
	
	//сначала пометим на удаление все элементы, кроме групп
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_СписокМетаданных.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Справочник.КП_СписокМетаданных КАК КП_СписокМетаданных
	                    |ГДЕ
	                    |	КП_СписокМетаданных.ЭтоГруппа = ЛОЖЬ
	                    |	И КП_СписокМетаданных.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_СписокМетаданных.Предопределенный = ЛОЖЬ");
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		СпрОбъект=Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			СпрОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;		
	
	Для Каждого ЭлементМетаданных ИЗ Метаданные.Справочники Цикл
		ИмяМетаданных=ЭлементМетаданных.Имя;
		Если Найти(СтрокаИменИсключений, ИмяМетаданных)>0 Тогда
			Продолжить;
		КонецЕсли;
		
		СинонимМетаданных=ЭлементМетаданных.Синоним;
		
		Если Найти(НРег(СинонимМетаданных),"(не используется)")>0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(НРег(СинонимМетаданных),"(к удалению)")>0 Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим есть ли элемент в справочнике
		ИмяМетаданных="Справочник."+ИмяМетаданных;
		НайденныйЭлемент=Справочники.КП_СписокМетаданных.НайтиПоРеквизиту("ПолноеНаименование", ИмяМетаданных, РодительСправочник); 
		Если НЕ НайденныйЭлемент.Пустая() Тогда
			//элемент найден
			СпрОбъект=НайденныйЭлемент.ПолучитьОбъект();
			Попытка
				СпрОбъект.УстановитьПометкуУдаления(Ложь);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			Продолжить;
			
		КонецЕсли;
		
		//создадим новый элемент
		
		НовыйЭлемент=Справочники.КП_СписокМетаданных.СоздатьЭлемент();
		НовыйЭлемент.Наименование=СинонимМетаданных;
		НовыйЭлемент.ПолноеНаименование=ИмяМетаданных;
		НовыйЭлемент.Родитель=РодительСправочник;
		
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;

	
	Для Каждого ЭлементМетаданных ИЗ Метаданные.Документы Цикл
		ИмяМетаданных=ЭлементМетаданных.Имя;
		Если Найти(СтрокаИменИсключений, ИмяМетаданных)>0 Тогда
			Продолжить;
		КонецЕсли;
		
		СинонимМетаданных=ЭлементМетаданных.Синоним;

		Если Найти(НРег(СинонимМетаданных),"(не используется)")>0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(НРег(СинонимМетаданных),"(к удалению)")>0 Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим есть ли элемент в справочнике
		ИмяМетаданных="Документ."+ИмяМетаданных;
		НайденныйЭлемент=Справочники.КП_СписокМетаданных.НайтиПоРеквизиту("ПолноеНаименование", ИмяМетаданных, РодительДокумент); 
		Если НЕ НайденныйЭлемент.Пустая() Тогда
			//элемент найден
			СпрОбъект=НайденныйЭлемент.ПолучитьОбъект();
			Попытка
				СпрОбъект.УстановитьПометкуУдаления(Ложь);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			Продолжить;
			
		КонецЕсли;
		
		//создадим новый элемент
		
		НовыйЭлемент=Справочники.КП_СписокМетаданных.СоздатьЭлемент();
		НовыйЭлемент.Наименование=СинонимМетаданных;
		НовыйЭлемент.ПолноеНаименование=ИмяМетаданных;
		НовыйЭлемент.Родитель=РодительДокумент;
		
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	//процессы и задачи
	
	Для Каждого ЭлементМетаданных ИЗ Метаданные.БизнесПроцессы Цикл
		ИмяМетаданных=ЭлементМетаданных.Имя;
		Если Найти(СтрокаИменИсключений, ИмяМетаданных)>0 Тогда
			Продолжить;
		КонецЕсли;
		
		СинонимМетаданных=ЭлементМетаданных.Синоним;

		Если Найти(НРег(СинонимМетаданных),"(не используется)")>0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(НРег(СинонимМетаданных),"(к удалению)")>0 Тогда
			Продолжить;
		КонецЕсли;
	
		//проверим есть ли элемент в справочнике
		ИмяМетаданных="БизнесПроцесс."+ИмяМетаданных;
		НайденныйЭлемент=Справочники.КП_СписокМетаданных.НайтиПоРеквизиту("ПолноеНаименование", ИмяМетаданных, РодительПроцессЗадача); 
		Если НЕ НайденныйЭлемент.Пустая() Тогда
			//элемент найден
			СпрОбъект=НайденныйЭлемент.ПолучитьОбъект();
			Попытка
				СпрОбъект.УстановитьПометкуУдаления(Ложь);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			Продолжить;
			
		КонецЕсли;
		
		//создадим новый элемент
		
		НовыйЭлемент=Справочники.КП_СписокМетаданных.СоздатьЭлемент();
		НовыйЭлемент.Наименование=СинонимМетаданных;
		НовыйЭлемент.ПолноеНаименование=ИмяМетаданных;
		НовыйЭлемент.Родитель=РодительПроцессЗадача;
		
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого ЭлементМетаданных ИЗ Метаданные.Задачи Цикл
		ИмяМетаданных=ЭлементМетаданных.Имя;
		Если Найти(СтрокаИменИсключений, ИмяМетаданных)>0 Тогда
			Продолжить;
		КонецЕсли;
		
		СинонимМетаданных=ЭлементМетаданных.Синоним;

		Если Найти(НРег(СинонимМетаданных),"(не используется)")>0 Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим есть ли элемент в справочнике
		ИмяМетаданных="Задача."+ИмяМетаданных;
		НайденныйЭлемент=Справочники.КП_СписокМетаданных.НайтиПоРеквизиту("ПолноеНаименование", ИмяМетаданных, РодительПроцессЗадача); 
		Если НЕ НайденныйЭлемент.Пустая() Тогда
			//элемент найден
			СпрОбъект=НайденныйЭлемент.ПолучитьОбъект();
			Попытка
				СпрОбъект.УстановитьПометкуУдаления(Ложь);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
			Продолжить;
			
		КонецЕсли;
		
		//создадим новый элемент
		
		НовыйЭлемент=Справочники.КП_СписокМетаданных.СоздатьЭлемент();
		НовыйЭлемент.Наименование=СинонимМетаданных;
		НовыйЭлемент.ПолноеНаименование=ИмяМетаданных;
		НовыйЭлемент.Родитель=РодительПроцессЗадача;
		
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	//обновим значения
	
	ОбъектСправочника=Справочники.КП_СписокМетаданных.Число15_2.ПолучитьОбъект();
	ОбъектСправочника.РеквизитДлина=15;
	ОбъектСправочника.РеквизитТочность=2;
	ОбъектСправочника.ПолноеНаименование="Число";
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
		
	ОбъектСправочника=Справочники.КП_СписокМетаданных.Строка100.ПолучитьОбъект();
	ОбъектСправочника.РеквизитДлина=100;
	ОбъектСправочника.РеквизитТочность=0;
	ОбъектСправочника.ПолноеНаименование="Строка100";
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	ОбъектСправочника=Справочники.КП_СписокМетаданных.СоздатьЭлемент();
	ОбъектСправочника.Наименование="Строка (999)";
	ОбъектСправочника.Родитель=Справочники.КП_СписокМетаданных.Строки;
	ОбъектСправочника.РеквизитДлина=999;
	ОбъектСправочника.РеквизитТочность=0;
	ОбъектСправочника.ПолноеНаименование="Строка999";
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	ОбъектСправочника=Справочники.КП_СписокМетаданных.Гиперссылка.ПолучитьОбъект();
	ОбъектСправочника.Родитель=Справочники.КП_СписокМетаданных.Строки;
	ОбъектСправочника.РеквизитДлина=999;
	ОбъектСправочника.РеквизитТочность=0;
	ОбъектСправочника.ПолноеНаименование="Гиперссылка";
	ОбъектСправочника.Примечание="При выводе на форму задачи/процесса в режим только для чтения показывается как гиперссылка, иначе как обычная строка";
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	ОбъектСправочника=Справочники.КП_СписокМетаданных.Булево.ПолучитьОбъект();
	ОбъектСправочника.ПолноеНаименование="Булево";
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	ОбъектСправочника=Справочники.КП_СписокМетаданных.Дата.ПолучитьОбъект();
	ОбъектСправочника.ПолноеНаименование="Дата";
	Попытка
		ОбъектСправочника.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти