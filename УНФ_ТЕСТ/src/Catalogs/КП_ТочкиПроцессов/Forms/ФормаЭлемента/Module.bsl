#Область ПеременныеМодуля

&НаКлиенте
Перем СрокПоУмолчаниюЧасов;

&НаКлиенте
Перем СрокПоУмолчаниюДата;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ВладелецТочки) Тогда
		Отказ=Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='The points of the business process are created automatically when editing business process scheme.';ru='Внимание! Точки бизнес-процесса создаются автоматически при редактировании схемы бизнес-процесса.'"));
		Возврат;
		
	КонецЕсли;
		
	ЭтоТочкаЭкземпляраКБП=КП_ОбщееСерверПС.ЭтоЭкземплярБизнесПроцесса(Объект.ВладелецТочки);
	
	Если ЭтоТочкаЭкземпляраКБП Тогда
		ВидПроцесса=Объект.ВладелецТочки.ВидПроцесса;
	Иначе
		ВидПроцесса=Объект.ВладелецТочки;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		//новый элемент точки
		ФлагМожноМенятьНаименование=Истина;

		//ДЕЙСТВИЕ
		Если Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Действие Тогда

			Объект.ТекстФункции=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПередСозданием();
			Объект.ДействиеТекстФункцииПриСоздании=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПриСоздании();			
			Объект.ДействиеТекстФункцииПередВыполнением=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПередВыполнением();			
			Объект.ДействиеТекстФункцииПослеВыполнения=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПослеВыполнения();
			Объект.ДействиеТекстФункцииПослеЗаписи=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПослеЗаписи();			
			Объект.ДействиеОсновнойОтчетИсполнителей=Справочники.КП_ТребуемыеРезультатыИсполнителей.Основной;
			Объект.ДействиеИсполнительМожетПереадресоватьЗадачу=Истина;
			Объект.ДействиеУведомлятьИсполнителейПриСозданииЗадач=Истина;
			Объект.ДействиеУведомлятьИсполнителейПриНаступленииСрокаВыполнения=Ложь;
			Объект.ДействиеИсточникТекстаЗаданийЧисло=1; //определяется в данной точке действия
		
		//ОБРАБОТКА
		ИначеЕсли Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка Тогда

			УстановитьОтображениеОбработки();
			Объект.ТекстФункции=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииОбработки();
			
			Элементы.ГруппаСписокКорпоративныхДокументов.Видимость=КП_ОбщееСерверПС.ЭтоЭкземплярБизнесПроцесса(Объект.ВладелецТочки);
			
			Если НЕ Параметры.ЗначенияЗаполнения.Свойство("ДействиеПараллельное") Тогда
				Объект.ДействиеПараллельное=Истина;
			Иначе
				Объект.ДействиеПараллельное=Параметры.ЗначенияЗаполнения.ДействиеПараллельное;
			КонецЕсли;
			
			Если Объект.ТипОбработки=4 Тогда
				//значения по-умолчанию для таймера
				Объект.ОбработкаТипДаты=3; //относительная дата
				ТаймерЧасов=1;
				ТаймерМинут=0;
				
			ИначеЕсли Объект.ТипОбработки=5 Тогда
				//инициализация сообщения
				
			ИначеЕсли Объект.ТипОбработки=6 Тогда
				//отправка сообщения
				ОбновитьСписокОсновныхИсполнителей();
				
			КонецЕсли;
			
		//УСЛОВИЕ
		ИначеЕсли Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие Тогда

			Объект.ТекстФункции=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииУсловия();
			
		//ВЫБОР ВАРИАНТА
		ИначеЕсли Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта Тогда

			Объект.ТекстФункции=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииВыбораВарианта();
			
		//ПОДПРОЦЕСС
		ИначеЕсли Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Подпроцесс Тогда
			Объект.ПодпроцессЖдатьОкончания=Истина;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данный элемент не имеет параметров");
			Отказ=Истина;
			Возврат;
		КонецЕсли;
		
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			КопируемаяТочка=Параметры.ЗначениеКопирования;
		Иначе
			КопируемаяТочка=Неопределено;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(КопируемаяТочка) Тогда
			//не копирование
			Справочники.КП_ТочкиПроцессов.ЗаполнитьСписокНаименованийЭлементовФормыЗадач(Объект, ВидПроцесса, Объект.ДействиеТипФормыЗадач);
			//ИнициализироватьФорматированныеПоля();
			
		КонецЕсли;
				
	Иначе
		//это не новый элемент точки
		ФлагМожноМенятьНаименование=Ложь;
		
		ЭтаФорма.АвтоЗаголовок=Ложь;
		ЭтаФорма.Заголовок=Объект.Наименование;
		//ОбновитьСписокОсновныхИсполнителей();
		
		Если Объект.ИсточникИсполнителей<2 Тогда
			//0 - основной список, 1 - фиксированный список задачи
			ИсточникИсполнителейЧисло=Объект.ИсточникИсполнителей;
			ИсполнительПеременнаяПроцессаЧисло=0;
			
		ИначеЕсли Объект.ИсточникИсполнителей=2 Тогда
			//автор процесса
			ИсточникИсполнителейЧисло=2;
			ИсполнительПеременнаяПроцессаЧисло=0;
			
		ИначеЕсли Объект.ИсточникИсполнителей=3 Тогда
			//контролер процесса
			ИсточникИсполнителейЧисло=2;
			ИсполнительПеременнаяПроцессаЧисло=1;
			
		ИначеЕсли Объект.ИсточникИсполнителей=4 Тогда
			//переменная в реквизите процесса
			ИсточникИсполнителейЧисло=2;
			ИсполнительПеременнаяПроцессаЧисло=2;
			
		ИначеЕсли Объект.ИсточникИсполнителей=5 Тогда
			//рабочая группа
			ИсточникИсполнителейЧисло=Объект.ИсточникИсполнителей;
			ИсполнительПеременнаяПроцессаЧисло=0;
			
		КонецЕсли;
		
		//ОБРАБОТКА
		Если Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка И Объект.ОбработкаТипДаты=3 Тогда
			ТаймерСекунд=Объект.ОбработкаДата-Дата("00010101");
			ТаймерЧасов=Цел(ТаймерСекунд/(60*60));
			ТаймерМинут=(ТаймерСекунд-ТаймерЧасов*60*60)/60;
		КонецЕсли;
		
		Если Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Подпроцесс Тогда
			ФлагПодпроцессПереопределитьРабочуюГруппу=ЗначениеЗаполнено(Объект.РабочаяГруппа);
			
		ИначеЕсли Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка Тогда
			Если Объект.ТипОбработки=6 Тогда
				//отправка сообщения
				ОтправкаСообщенияРегламентнымЗаданиемЧисло=?(Объект.ОтправкаСообщенияРегламентнымЗаданием, 1, 0);
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЕсли;
	
	Если ЭтоТочкаЭкземпляраКБП Тогда
		ВладелецРеквизитов=Объект.ВладелецТочки.ВидПроцесса;
	Иначе
		ВладелецРеквизитов=Объект.ВладелецТочки;		
	КонецЕсли;
	
	Контролер=Объект.ВладелецТочки.Контролер;
		
	Если ЭтоТочкаЭкземпляраКБП Тогда
		Автор=Объект.ВладелецТочки.Автор;		
	Иначе
		//вид КБП
		Автор=Неопределено;	
	КонецЕсли;

	Если ИсточникИсполнителейЧисло=0 Тогда
		//динамический список
		ДействиеПараллельноеЧисло=?(Объект.ВладелецТочки.ДействиеПараллельное, 1, 0);		
	Иначе
		ДействиеПараллельноеЧисло=?(Объект.ДействиеПараллельное, 1, 0);		
	КонецЕсли;
	
	ДействиеЗавершениеСпискаПослеОдногоЧисло=?(Объект.ДействиеЗавершениеСпискаПослеОдного, 1, 0);
	
	ТекущийПользователь=Пользователи.ТекущийПользователь();
	
	//ДЕЙСТВИЕ
	Если Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Действие Тогда
		Элементы.СтраницыВидовТочек.ТекущаяСтраница=Элементы.СтраницаТочкаДействия;
		
		УстановитьОформлениеТочкиДействия();
		УстановитьПоляТекстаЗаданий();
		УстановитьЭлементыИсполнителя();
		ОбновитьСписокОсновныхИсполнителей();
		УстановитьОтображениеПеременныхИсполнителя();
		Элементы.ГруппаНаименование.Видимость=Истина;
		
		Если НЕ ЗначениеЗаполнено(Контролер) Тогда
			Если ЭтоТочкаЭкземпляраКБП Тогда
				Элементы.НадписьКонтролерБизнесПроцесса.Заголовок=НСтр("ru='<не указан>'; en='<n/a>';");
			Иначе
				Элементы.НадписьКонтролерБизнесПроцесса.Заголовок=НСтр("ru='<может быть указан в экземпляре процесса>'; en='<can be specified in process>';");
			КонецЕсли;
			
		Иначе
			Элементы.НадписьКонтролерБизнесПроцесса.Заголовок=Контролер;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Автор) Тогда
			Если ЭтоТочкаЭкземпляраКБП Тогда
				Элементы.НадписьАвторБизнесПроцесса.Заголовок=НСтр("ru='<не указан>'; en='<n/a>';");
			Иначе
				Элементы.НадписьАвторБизнесПроцесса.Заголовок=НСтр("ru='<указывается в экземпляре процесса>'; en='<will be specified in process>';");
			КонецЕсли;
				
		Иначе
			Элементы.НадписьАвторБизнесПроцесса.Заголовок=Автор;
		КонецЕсли;
		
	//ПОДПРОЦЕСС
	ИначеЕсли Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Подпроцесс Тогда
		Элементы.СтраницыВидовТочек.ТекущаяСтраница=Элементы.СтраницаТочкаПодпроцесс;
		УстановитьОформлениеПодпроцесса();
		
	//УСЛОВИЕ
	ИначеЕсли Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие Тогда
	Элементы.СтраницыВидовТочек.ТекущаяСтраница=Элементы.СтраницаТочкаУсловие;
		УстановитьОтображениеУсловия();
	
	//ВЫБОР ВАРИАНТА
	ИначеЕсли Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта Тогда		
		Элементы.СтраницыВидовТочек.ТекущаяСтраница=Элементы.СтраницаТочкаВыборВарианта;
		//заполним список вариантов точки выбора
		
		Если Параметры.Свойство("СписокВариантовВыбора") Тогда
			СписокВариантовВыбора=Параметры.СписокВариантовВыбора;
			
			Для Каждого ЭлементСписка Из СписокВариантовВыбора Цикл
				//проверим, есть ли такая строка в таблице, если строки нет, добавим
				ИмяВарианта=ЭлементСписка.Значение;
				МассивСтрок=Объект.ВыборВарианта.НайтиСтроки(Новый Структура("ВариантПерехода", ИмяВарианта));
				
				Если МассивСтрок.Количество()=0 Тогда
					//добавим новую строку
					НоваяСтрока=Объект.ВыборВарианта.Добавить();
					НоваяСтрока.ВариантПерехода=ИмяВарианта;
					НоваяСтрока.ВидСравнения=Перечисления.КП_ВидыСравнения.БольшеИлиРавно;
					
				КонецЕсли;
								
			КонецЦикла;

			//удалим строки, которые отсутствуют в списке
			Для НомерСтроки=0 По Объект.ВыборВарианта.Количество()-1 Цикл
				Если НомерСтроки=Объект.ВыборВарианта.Количество()-1 Тогда
					Прервать;
				КонецЕсли;
				
				СтрокаВарианта=Объект.ВыборВарианта[НомерСтроки];
				ВариантПерехода=СтрокаВарианта.ВариантПерехода;
				Если СписокВариантовВыбора.НайтиПоЗначению(ВариантПерехода)=Неопределено Тогда
					//такой строки в новом списке нет, удалим
					Объект.ВыборВарианта.Удалить(НомерСтроки);
					//нечнем цикл снова
					НомерСтроки=-1;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ТекстОшибки="Внимание! В точке выбора вариантов """+СокрЛП(Объект)+""" не найдены варианты!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ЗаписьЖурналаРегистрации(ТекстОшибки, Объект.ВладелецТочки, Объект.Ссылка);
			
		КонецЕсли;
		
		//удалим лишние строки из таблицы
		Для Каждого СтрокаТЧ Из Объект.ВыборВарианта Цикл
			
			Если СписокВариантовВыбора.НайтиПоЗначению(СтрокаТЧ.ВариантПерехода)=Неопределено Тогда
				//удалим данную строку
				Объект.ВыборВарианта.Удалить(СтрокаТЧ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	//ОБРАБОТКА	
	ИначеЕсли Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка Тогда
		Элементы.СтраницыВидовТочек.ТекущаяСтраница=Элементы.СтраницаТочкаОбработка;
		Элементы.СписокДокументовПроцесса.Видимость=КП_ОбщееСерверПС.ЭтоЭкземплярБизнесПроцесса(Объект.ВладелецТочки);
	
		Если Элементы.СписокДокументовПроцесса.Видимость Тогда
			ОбновитьСписокДокументов();
			
		КонецЕсли;
		
		УстановитьОтображениеОбработки();
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Данный элемент не имеет параметров");
		Отказ=Истина;
		Возврат;		
	КонецЕсли;
	
	Если Объект.ТипУсловиеФункция=0 ИЛИ Объект.ТипУсловиеФункция=1 Тогда
		ТипУсловиеФункцияЧислом=0;
		ТипОбъединенияСтрок=Объект.ТипУсловиеФункция;
		
	Иначе
		ТипУсловиеФункцияЧислом=Объект.ТипУсловиеФункция;
		
	КонецЕсли;
	
	УстановитьОтображениеЭлементов();

	Если Параметры.Свойство("НаименованиеТочки") Тогда
		Объект.Наименование=Параметры.НаименованиеТочки;
	КонецЕсли;
	
	ШрифтПользователя=КП_ОбщееСервер.ПолучитьШрифтПользователя();
	Элементы.ТекстЗаданийТочкиФорматированный.Шрифт=ШрифтПользователя;
	Элементы.ПодпроцессТекстПроцессаФорматируемый.Шрифт=ШрифтПользователя;
	Элементы.ОбработкаТекстТочкиФорматированный.Шрифт=ШрифтПользователя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	//ДЕЙСТВИЯ
	Если Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Действие") Тогда

		Если ИсточникИсполнителейЧисло=2 И ИсполнительПеременнаяПроцессаЧисло=2 И НЕ ЗначениеЗаполнено(Объект.РеквизитСИсполнителем) Тогда
			Отказ=Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("en='Unknown varialbe for a user.';ru='Не указан реквизит для определения исполнителя.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
			Возврат;
			
		КонецЕсли;
		
		Если Объект.ДействиеТипФормыЗадач=1 Тогда
			//для контролеров проверим, что исполнитель один в точке
			КоличествоИсполнителей=ПолучитьКоличествоИсполнителейТочкиАдресации();
			Если КоличествоИсполнителей>1 Тогда
				Отказ=Истина;				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Only one user allowed in control point.';ru='Внимание! В точке контроля может быть только один исполнитель.'"));
				Возврат;
			КонецЕсли;
			
		КонецЕсли;		
	
	//ОБРАБОТКА
	ИначеЕсли Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Обработка") Тогда

		Если Объект.ТипОбработки=4 Тогда
			Если Объект.ОбработкаТипДаты=0 Тогда
				Отказ=Истина;
				ПоказатьПредупреждение(Неопределено, НСтр("en='Select the type of date in the timer.';ru='Выберите тип даты в настройках таймера.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
				Возврат;
			ИначеЕсли Объект.ОбработкаТипДаты=1 Тогда				
				//фиксированная дата
				Если Объект.ОбработкаДата<=ТекущаяДата() Тогда
					ПоказатьПредупреждение(Неопределено, "В таймере установлена прошедшая дата", 60, КП_ОбщееКлиент.ЗаголовокДиалога());	
					Отказ=Истина;					
				КонецЕсли;
			ИначеЕсли Объект.ОбработкаТипДаты=3 Тогда
				//относительное время, запишем часы и минуты как дату в реквизит
				Если ТаймерЧасов=0 И ТаймерМинут=0 Тогда
					ПоказатьПредупреждение(Неопределено, "Не заданы часы и минуты в таймере", 60, КП_ОбщееКлиент.ЗаголовокДиалога());	
					Отказ=Истина;
					Возврат;
				КонецЕсли;
				Объект.ОбработкаДата=Дата("00010101")+(ТаймерЧасов*60*60+ТаймерМинут*60);
			КонецЕсли;
			
		ИначеЕсли Объект.ТипОбработки=6 Тогда
			//проверка корректности настройки сообщения
			Если НЕ Объект.ОтправкаСообщенияВСистему И НЕ Объект.ОтправкаСообщенияПоЭлПочте И НЕ Объект.ОтправкаСообщенияВJabber Тогда
				Отказ=Истина;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Select the type of message transport (System, E-mail or Jabber).';ru='Выберите вид транспорта сообщения (Система, Эл. почта или Jabber).'"));
			КонецЕсли;
			
			Объект.ОтправкаСообщенияРегламентнымЗаданием=(ОтправкаСообщенияРегламентнымЗаданиемЧисло=1);
			
		ИначеЕсли Объект.ТипОбработки=9 Тогда
			//проверка корректности настройки передачи данных в документ
			Для Каждого СтрокаТЧ Из Объект.ОбработкаУстановкаРеквизитов Цикл
				Если ПустаяСтрока(СтрокаТЧ.ДополнениеОбъекта) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для установки реквизита """+СокрЛП(СтрокаТЧ.РеквизитПроцесса)+""" не указан реквизит документа");
					Отказ=Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	//ПОДПРОЦЕСС
	ИначеЕсли Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Подпроцесс") Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ПодпроцессВид) Тогда
			Отказ=Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("en='Specify the subprocess template.';ru='Укажите шаблон подпроцесса.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
			Возврат;
		КонецЕсли;
		
		Если Объект.ПодпроцессВид=Объект.ВладелецТочки Тогда
			Отказ=Истина;			
			ПоказатьПредупреждение(Неопределено, НСтр("en='Sub-looping! Please select another sub-template.';ru='Зацикливание подпроцессов! Выберите другой шаблон подпроцесса.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
			Возврат;
		КонецЕсли;
		
		Если ФлагПодпроцессПереопределитьРабочуюГруппу И НЕ ЗначениеЗаполнено(Объект.РабочаяГруппа) Тогда
			Отказ=Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("en='Please specify a workgroup for the subprocess.';ru='Внимание! Не указана рабочая группа для подпроцесса.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
			Возврат;
			
		КонецЕсли;
		
	//ВЫБОР ВАРИАНТА
	ИначеЕсли Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.ВыборВарианта") Тогда
		Элементы.СтраницыВидовТочек.ТекущаяСтраница=Элементы.СтраницаТочкаВыборВарианта;
		Отказ=НЕ ПроверитьЗаполнениеВыбораВарианта(Объект);
				
	//УСЛОВИЕ
	ИначеЕсли Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Условие") Тогда
		
		Если ТипУсловиеФункцияЧислом=0 ИЛИ ТипУсловиеФункцияЧислом=1 Тогда
			//простые условия
			Объект.ТипУсловиеФункция=ТипОбъединенияСтрок;
			Если НЕ СписокУсловийЗаполненКорректно() Тогда
				Отказ=Истина;
				Возврат;
			КонецЕсли;
			
		Иначе
			//функция
			Объект.ТипУсловиеФункция=ТипУсловиеФункцияЧислом;			
		КонецЕсли;
	
	КонецЕсли;
		
	Если ИсточникИсполнителейЧисло=1 ИЛИ ИсточникИсполнителейЧисло=5 ИЛИ ИсточникИсполнителейЧисло=2 Тогда
		//фиксированный список или рабочая группа
		Объект.ДействиеПараллельное=(ДействиеПараллельноеЧисло=1);		
	КонецЕсли;
	
	Объект.ДействиеЗавершениеСпискаПослеОдного=(ДействиеЗавершениеСпискаПослеОдногоЧисло=1);
	
	Если ИсточникИсполнителейЧисло=5 Тогда
		//рабочая группа
		Объект.ИсточникИсполнителей=5;		
	ИначеЕсли ИсточникИсполнителейЧисло<2 Тогда
		Объект.ИсточникИсполнителей=ИсточникИсполнителейЧисло;
	Иначе
		Объект.ИсточникИсполнителей=ИсполнительПеременнаяПроцессаЧисло+2;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ТочкаКорпоративногоПроцесса", "Записана", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьСписокОсновныхИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПустаяСтрока(ЭтаФорма.Заголовок) И НЕ Параметры.Ключ.Пустая() Тогда
		ЭтаФорма.Заголовок=НСтр("ru='<наименование не указано>'; en='<name not set>';");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИсточникИсполнителейПриИзменении(Элемент)
	
	Если ИсточникИсполнителейЧисло=0 Тогда
		//переключились на основной список
		Объект.ИсполнителиТочки.Очистить();
		
	ИначеЕсли ИсточникИсполнителейЧисло=1 Тогда
		//переключились на фиксированный список
		Объект.ИсполнителиТочки.Очистить();
		
	ИначеЕсли ИсточникИсполнителейЧисло=2 Тогда
		//переключились на переменные
		Если НЕ ЗначениеЗаполнено(Контролер) Тогда
			ИсполнительПеременнаяПроцессаЧисло=1;
		КонецЕсли;
		
		ИсполнительПеременнаяПроцессаЧислоПриИзменении(Неопределено);
		
	КонецЕсли;
	
	УстановитьОтображениеИсточникаИсполнителей();
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодпроцессВидПриИзменении(Элемент)
	Если Объект.Наименование="" Тогда
		Объект.Наименование=Объект.ПодпроцессВид;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаРеквизитПроцессаПриИзменении(Элемент)
	
	СтрокаТЧ=Элементы.ВыборВарианта.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидСравнения) Тогда
		СтрокаТЧ.ВидСравнения=ПредопределенноеЗначение("Перечисление.КП_ВидыСравнения.Равно");
	КонецЕсли;
	
	СтрокаТЧ.ЗначениеРеквизита=ПолучитьНачальноеЗначениеУсловия(СтрокаТЧ.РеквизитПроцесса, ВладелецРеквизитов);

КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаПередУдалением(Элемент, Отказ)
	Отказ=Истина;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеВыбораВарианта(Знач ТочкаКБП)
	
	Если ТочкаКБП.ВыборВарианта.Количество()=0 Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТочкаКБП.ТипУсловиеФункция=2 Тогда
		//программная функция
		Если Найти(НРег(Объект.ТекстФункции), "возврат")=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Program function contains no operator ""Return"" with the version numbers?';ru='Программная функция не содержит оператора ""Возврат"" с номером варианта.'"));
			Возврат Ложь;
			
		Иначе
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	РеквизитСравненияПервойСтроки=ТочкаКБП.ВыборВарианта[0].РеквизитПроцесса;
	
	Для Каждого СтрокаТЧ Из ТочкаКБП.ВыборВарианта Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.РеквизитПроцесса)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидСравнения)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ВариантПерехода)
		Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Error in terms of filling in ""';ru='Ошибка в заполнении условий в строке ""'")+СокрЛП(СтрокаТЧ.ВариантПерехода)+""".");
			Возврат Ложь;
		
		КонецЕсли;
		
		Если РеквизитСравненияПервойСтроки<>СтрокаТЧ.РеквизитПроцесса Тогда
			//просто предупредим
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='In option ""';ru='Внимание! В варианте ""'")+СокрЛП(СтрокаТЧ.ВариантПерехода)+НСтр("ru='"" отличается реквизит для сравнения.';")+Символы.ПС+НСтр("en='Problems with the implementation process.';ru='Возможны проблемы при выполнении процесса.'"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	//Если Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.ВыборВарианта") Тогда
	//	
	//	ЗаполненноКорректно=ПроверитьЗаполнениеВыбораВарианта(Объект);
	//	
	//	Если НЕ ЗаполненноКорректно Тогда
	//		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ПередЗакрытиемЗавершение", ЭтотОбъект, Новый Структура("Отказ", Отказ)), НСтр("en='Selection point options are not filled correctly. Do you want to continue closing?';ru='Точка выбора варианта заполнена не корректно! Продолжить закрытие?'"), РежимДиалогаВопрос.ДаНет,,,КП_ОбщееКлиент.ЗаголовокДиалога());
	//		
	//	КонецЕсли;
	//	
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Отказ = ДополнительныеПараметры.Отказ;
    
    
    Если РезультатВопроса=КодВозвратаДиалога.Да Тогда
        Возврат;
        
    Иначе
        Отказ=Истина;
        Возврат;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УсловиеРесурсыТипДатыПриИзменении(Элемент)
	ОбработкаУсловиеУстановитьОтображениеДаты();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОформлениеТочкиДействия()
	
	Элементы.ДекорацияДействиеТеги.Видимость=НЕ ЭтоТочкаЭкземпляраКБП;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокРеквизитовФормыЗадач()
	
	Если ЭтоТочкаЭкземпляраКБП Тогда
		//заполнять будем по регистру сведений
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	КП_РеквизитыЭкземпляраПроцесса.РеквизитПроцесса,
		                    |	КП_РеквизитыЭкземпляраПроцесса.ЗначениеРеквизита,
		                    |	КП_РеквизитыЭкземпляраПроцесса.РеквизитПроцесса.Обязательный КАК Обязательный
		                    |ИЗ
		                    |	РегистрСведений.КП_РеквизитыЭкземпляраПроцесса КАК КП_РеквизитыЭкземпляраПроцесса
		                    |ГДЕ
		                    |	КП_РеквизитыЭкземпляраПроцесса.БизнесПроцесс = &БизнесПроцесс
		                    |	И КП_РеквизитыЭкземпляраПроцесса.РеквизитПроцесса.Системный = Ложь");
							
		Запрос.УстановитьПараметр("БизнесПроцесс", Объект.ВладелецТочки);
		
	Иначе
		//точка вида КБП, заполнять будем по владельцу точки (виду КБП)
	
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	КП_ДополнительныеРеквизиты.Ссылка КАК РеквизитПроцесса,
		                    |	КП_ДополнительныеРеквизиты.Обязательный
		                    |ИЗ
		                    |	Справочник.КП_ДополнительныеРеквизиты КАК КП_ДополнительныеРеквизиты
		                    |ГДЕ
		                    |	КП_ДополнительныеРеквизиты.ПометкаУдаления = ЛОЖЬ
		                    |	И КП_ДополнительныеРеквизиты.Владелец = &Владелец
		                    |	И КП_ДополнительныеРеквизиты.Системный = Ложь");
							
		Запрос.УстановитьПараметр("Владелец", Объект.ВладелецТочки);
		
	КонецЕсли;
	
	
	Объект.РеквизитыПроцесса.Очистить();
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		РеквизитПроцесса=Выборка.РеквизитПроцесса;
		
		НоваяСтрока=Объект.РеквизитыПроцесса.Добавить();
		НоваяСтрока.РеквизитПроцесса=РеквизитПроцесса;
		НоваяСтрока.Обязательный=Выборка.Обязательный;
		НоваяСтрока.НаименованиеВФорме=РеквизитПроцесса.НаименованиеВФорме;
		НоваяСтрока.НаименованиеВФормеИностранное=РеквизитПроцесса.НаименованиеВФормеИностранное;
		НоваяСтрока.ТолькоПросмотр=Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтображениеЗакладкиСобытия()
		
	КоличествоСимволовПриСозданииЭталон=СтрДлина(КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПриСоздании());
	КоличествоСимволовПередВыполнениемЭталон=СтрДлина(КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПередВыполнением());
	КоличествоСимволовПослеВыполненияЭталон=СтрДлина(КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПослеВыполнения());
		
	ПередСозданиемИзменено=НЕ КП_ЗадачиПроцессов.ТекстФункцииСобытияПустой(Объект.ТекстФункции);	
	ПриСозданииИзменено=НЕ КП_ЗадачиПроцессов.ТекстФункцииСобытияПустой(Объект.ДействиеТекстФункцииПриСоздании);	
	ПередВыполнениемИзменено=НЕ КП_ЗадачиПроцессов.ТекстФункцииСобытияПустой(Объект.ДействиеТекстФункцииПередВыполнением);	
	ПослеВыполненияИзменено=НЕ КП_ЗадачиПроцессов.ТекстФункцииСобытияПустой(Объект.ДействиеТекстФункцииПослеВыполнения);	
	ПослеЗаписиИзменено=НЕ КП_ЗадачиПроцессов.ТекстФункцииСобытияПустой(Объект.ДействиеТекстФункцииПослеЗаписи);	
	
	Элементы.ГруппаСобытиеПередСозданием.Заголовок=НСтр("ru='Перед созданием'; en='Before creation'")+?(ПередСозданиемИзменено, " (!)", "")+" →";
	Элементы.ГруппаСобытиеПриСоздании.Заголовок=НСтр("ru='При создании'; en='When you create';")+?(ПриСозданииИзменено, " (!)", "")+" →";
	Элементы.ГруппаСобытиеПередВыполнением.Заголовок=НСтр("ru='Перед выполнением'; en='Before completing';")+?(ПередВыполнениемИзменено, " (!)", "")+" →";
	Элементы.ГруппаСобытиеПослеЗаписи.Заголовок=НСтр("ru='После записи'; en='After write';")+?(ПослеЗаписиИзменено, " (!)", "")+" →";
	Элементы.ГруппаСобытиеПослеВыполнения.Заголовок=НСтр("ru='После выполнения'; en='After completing';")+?(ПослеВыполненияИзменено, " (!)", "");
	
	Элементы.СтраницаПрограммнаяОбработка.Заголовок=НСтр("ru='События'; en='Events';")+?(ПередСозданиемИзменено ИЛИ ПриСозданииИзменено ИЛИ ПослеЗаписиИзменено ИЛИ ПередВыполнениемИзменено ИЛИ ПослеВыполненияИзменено, " (!)", "");

КонецПроцедуры

Процедура УстановитьОтображениеЭлементов()
	
	Если Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Действие Тогда
		УстановитьОтображениеЭлементовДействия();
		УстановитьОтображениеИсточникаИсполнителей();
		УстановитьВидимостьТочкиКонтроля();		
		УстановитьОтображениеЗакладкиСобытия();		
	КонецЕсли;
	
	Если Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Декорация Тогда
		Элементы.Наименование.МногострочныйРежим=Истина;
		Элементы.Наименование.Заголовок=НСтр("ru='Описание'; en='Description';");
		Элементы.Наименование.Высота=5;
		
	Иначе
		Элементы.Наименование.МногострочныйРежим=Ложь;
		Элементы.Наименование.Заголовок=НСтр("ru='Наименование'; en='Name';");
		Элементы.Наименование.Высота=1;
		
	КонецЕсли;
	
	Если Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие Тогда
		УстановитьВидимостьПоТипуУсловия();
	КонецЕсли;
			
	Если Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта Тогда
		УстановитьВидимостьПоТипуВыбораВарианта();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТипУсловиеФункцияЧисломПриИзменении(Элемент)
	УстановитьВидимостьПоТипуУсловия();
	
КонецПроцедуры

Функция УстановитьВидимостьПоТипуУсловия()
	
	// 0 - Простое И, 1 - простое ИЛИ, 2 - Программная функция, 3 - Результат контроля
	// 4 - Доступность ресурсов, 5 - автоматический контроль исполнителей
	
	Если ТипУсловиеФункцияЧислом=0 ИЛИ ТипУсловиеФункцияЧислом=1 Тогда
		//простое
		Элементы.ГруппаТочкаУсловиеДоступностьРесурсов.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеПростое.Видимость=Истина;
		Элементы.ГруппаТочкаУсловиеФункция.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеРезультатКонтроля.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеКонтрольРезультатов.Видимость=Ложь;
		
	ИначеЕсли ТипУсловиеФункцияЧислом=2 Тогда
		//простое
		Элементы.ГруппаТочкаУсловиеДоступностьРесурсов.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеПростое.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеФункция.Видимость=Истина;
		Элементы.ГруппаТочкаУсловиеРезультатКонтроля.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеКонтрольРезультатов.Видимость=Ложь;
		
	ИначеЕсли ТипУсловиеФункцияЧислом=3 Тогда
		//результат контроля
		Элементы.ГруппаТочкаУсловиеДоступностьРесурсов.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеПростое.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеФункция.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеРезультатКонтроля.Видимость=Истина;
		Элементы.ГруппаТочкаУсловиеКонтрольРезультатов.Видимость=Ложь;
		
	ИначеЕсли ТипУсловиеФункцияЧислом=4 Тогда
		//доступность ресурсов
		Элементы.ГруппаТочкаУсловиеДоступностьРесурсов.Видимость=Истина;
		Элементы.ГруппаТочкаУсловиеПростое.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеФункция.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеРезультатКонтроля.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеКонтрольРезультатов.Видимость=Ложь;
		
	ИначеЕсли ТипУсловиеФункцияЧислом=5 Тогда
		//доступность ресурсов
		Элементы.ГруппаТочкаУсловиеДоступностьРесурсов.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеПростое.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеФункция.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеРезультатКонтроля.Видимость=Ложь;
		Элементы.ГруппаТочкаУсловиеКонтрольРезультатов.Видимость=Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УсловияВыбораРеквизитПроцессаПриИзменении(Элемент)
	СтрокаТЧ=Элементы.УсловияВыбора.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидСравнения) Тогда
		СтрокаТЧ.ВидСравнения=ПредопределенноеЗначение("Перечисление.КП_ВидыСравнения.Равно");
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаТЧ.ДополнениеРеквизита) Тогда
		СтрокаТЧ.ЗначениеРеквизита=ПолучитьНачальноеЗначениеУсловия(СтрокаТЧ.РеквизитПроцесса, ВладелецРеквизитов);
		Элементы.УсловияВыбораЗначениеРеквизита.ВыбиратьТип=Ложь;
	Иначе
		Элементы.УсловияВыбораЗначениеРеквизита.ВыбиратьТип=Истина;
		СтрокаТЧ.ЗначениеРеквизита=Неопределено; //могут быть все типы в дополнении
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНачальноеЗначениеУсловия(РеквизитПроцесса, ВидПроцесса)
	//найдем наш реквизит
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ДополнительныеРеквизиты.Ссылка,
	                    |	КП_ДополнительныеРеквизиты.ЗначениеПоУмолчанию
	                    |ИЗ
	                    |	Справочник.КП_ДополнительныеРеквизиты КАК КП_ДополнительныеРеквизиты
	                    |ГДЕ
	                    |	КП_ДополнительныеРеквизиты.Владелец = &Владелец
	                    |	И КП_ДополнительныеРеквизиты.Ссылка = &РеквизитПроцесса");
						
	Запрос.УстановитьПараметр("Владелец", ВидПроцесса);
	Запрос.УстановитьПараметр("РеквизитПроцесса", РеквизитПроцесса);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		НачальноеЗначение=Выборка.ЗначениеПоУмолчанию;
		ТипРеквизита=РеквизитПроцесса.ТипРеквизита;
		Если НЕ ЗначениеЗаполнено(НачальноеЗначение) Тогда
			
			Если ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Числа Тогда
				НачальноеЗначение=0;
				
			ИначеЕсли ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Строки Тогда
				НачальноеЗначение="";
				
			ИначеЕсли ТипРеквизита=Справочники.КП_СписокМетаданных.Булево Тогда
				НачальноеЗначение=Ложь;
				
			ИначеЕсли ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеСправочники Тогда
				ПолноеНаименованиеМетаданных=РеквизитПроцесса.ТипРеквизита.ПолноеНаименование;
				ПолноеНаименованиеМетаданных=СтрЗаменить(ПолноеНаименованиеМетаданных, "Справочник.", "");
				НачальноеЗначение=Справочники[ПолноеНаименованиеМетаданных].ПустаяСсылка()
				
			ИначеЕсли ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеДокументы Тогда
				ПолноеНаименованиеМетаданных=РеквизитПроцесса.ТипРеквизита.ПолноеНаименование;
				ПолноеНаименованиеМетаданных=СтрЗаменить(ПолноеНаименованиеМетаданных, "Документ.", "");
				НачальноеЗначение=Документы[ПолноеНаименованиеМетаданных].ПустаяСсылка()
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат НачальноеЗначение;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	
КонецФункции

Процедура УстановитьЭлементыИсполнителя()
	
	УстановитьОтображениеИсточникаИсполнителей();
	УстановитьОтображениеПараметровИсполнителей();
		
КонецПроцедуры

Процедура УстановитьОтображениеИсточникаИсполнителей()
	
	//установим видимость страниц
	Элементы.СтраницаОсновныеИсполнители.Видимость=(ИсточникИсполнителейЧисло=0);
	Элементы.СтраницаСписокИсполнителейТочки.Видимость=(ИсточникИсполнителейЧисло=1);
	Элементы.СтраницаРабочаяГруппа.Видимость=(ИсточникИсполнителейЧисло=5);
	
	Если ИсточникИсполнителейЧисло=2 ИЛИ ИсточникИсполнителейЧисло=3 ИЛИ ИсточникИсполнителейЧисло=4 Тогда
		Элементы.СтраницаИсполнительИзРеквизита.Видимость=Истина;
	Иначе
		Элементы.СтраницаИсполнительИзРеквизита.Видимость=Ложь;
	КонецЕсли;
	
	Если ИсточникИсполнителейЧисло=0 Тогда
		//динамический список
		КоличествоИсполнителей=КП_Процессы.ПолучитьКоличествоОсновныхИсполнителей(Объект.ВладелецТочки);
		Элементы.ДействиеПараллельноеЧисло.Видимость=(КоличествоИсполнителей>1);
		Элементы.ДействиеПараллельноеЧисло.ТолькоПросмотр=Истина;
		
		ДействиеПараллельноеЧислоСтарое=ДействиеПараллельноеЧисло;
		ДействиеПараллельноеЧисло=?(Объект.ВладелецТочки.ДействиеПараллельное, 1, 0);
		Если ДействиеПараллельноеЧисло<>ДействиеПараллельноеЧислоСтарое Тогда
			ОбновитьСписокОсновныхИсполнителей();
		КонецЕсли;
		
		Если КоличествоИсполнителей>1 Тогда
			Элементы.ДействиеПараллельноеЧисло.Видимость=Истина;
			Элементы.СписокОсновныхИсполнителейПроцессаВидНаправленияПараллельное.Видимость=Элементы.ДействиеПараллельноеЧисло.Видимость;
			Элементы.ИсполнителиТочкиВидНаправленияКартинка.Видимость=Элементы.ДействиеПараллельноеЧисло.Видимость;
			
		КонецЕсли;
		
		Элементы.ДействиеНеУчитыватьЗаместителей.Заголовок=НСтр("ru='Не учитывать заместителей исполнителей'; en='Do not use deputy users';");
		
	ИначеЕсли ИсточникИсполнителейЧисло=1 Тогда
		//фиксированный список
		Элементы.ДействиеПараллельноеЧисло.Видимость=(Объект.ИсполнителиТочки.Количество()>1);
		Элементы.СписокОсновныхИсполнителейПроцессаВидНаправленияПараллельное.Видимость=Элементы.ДействиеПараллельноеЧисло.Видимость;
		Элементы.ИсполнителиТочкиВидНаправленияКартинка.Видимость=Элементы.ДействиеПараллельноеЧисло.Видимость;
		Элементы.ДействиеНеУчитыватьЗаместителей.Заголовок=НСтр("ru='Не учитывать заместителей исполнителей'; en='Do not use deputy users';");
		Элементы.ДействиеПараллельноеЧисло.ТолькоПросмотр=Ложь;
		
	ИначеЕсли ИсточникИсполнителейЧисло=5 Тогда		
		//рабочая группа
		ОбновитьСписокРабочейГруппы();
		Элементы.ДействиеПараллельноеЧисло.Видимость=Истина;
		Элементы.ДействиеПараллельноеЧисло.ТолькоПросмотр=Ложь;
		
	ИначеЕсли ИсточникИсполнителейЧисло=2 Тогда
		УстановитьОтображениеПеременныхИсполнителя();
		
	Иначе
		Элементы.ДействиеПараллельноеЧисло.Видимость=Ложь;
		УстановитьОтображениеПеременныхИсполнителя();
		
	КонецЕсли;
	
	УстановитьОтображениеПараметровИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОсновныхИсполнителей(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_СкопироватьОсновныхИсполнителейЗавершение", ЭтотОбъект), НСтр("en='Do you want to copy a general list of users?';ru='Заполнить список исполнителей по основному списку бизнес-процесса?'"), РежимДиалогаВопрос.ДаНет, 60,, КП_ОбщееКлиент.ЗаголовокДиалога());
		
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СкопироватьОсновныхИсполнителейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьСписокИсполнителейСервером();
    
    КоличествоИсполнителей=КП_Процессы.ПолучитьКоличествоОсновныхИсполнителей(Объект.ВладелецТочки);
    Если КоличествоИсполнителей>1 Тогда
        Элементы.ДействиеПараллельноеЧисло.Видимость=Истина;
        Элементы.СписокОсновныхИсполнителейПроцессаВидНаправленияПараллельное.Видимость=Элементы.ДействиеПараллельноеЧисло.Видимость;
        Элементы.ИсполнителиТочкиВидНаправленияКартинка.Видимость=Элементы.ДействиеПараллельноеЧисло.Видимость;
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокИсполнителейСервером()
	
	Объект.ИсполнителиТочки.Загрузить(Объект.ВладелецТочки.ОсновныеИсполнители.Выгрузить());
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАдресации(ВыбраннаяСтрока, ТолькоПросмотр=Ложь)
	
	ПараметрыФормы=Новый Структура;
	ПараметрыЗаполнения=Новый Структура;
	
	СтрокаТЧ = Объект.ИсполнителиТочки.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТЧ=Неопределено Тогда
		СтрокаТЧ=Объект.ИсполнителиТочки[ВыбраннаяСтрока];
	КонецЕсли;
	Если СтрокаТЧ=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Error in determining the current line.';ru='Ошибка определения текущей строки.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ТочкаАдресации", СтрокаТЧ.ТочкаАдресации);
	ПараметрыЗаполнения.Вставить("ОтчетИсполнителя", СтрокаТЧ.ОтчетИсполнителя);
	ПараметрыЗаполнения.Вставить("СрокВыполненияЧасов", СтрокаТЧ.СрокВыполненияЧасов);
	ПараметрыЗаполнения.Вставить("СрокВыполненияДатаВремя", СтрокаТЧ.СрокВыполненияДатаВремя);
	ПараметрыЗаполнения.Вставить("ИндивидуальныйТекстЗадания", СтрокаТЧ.ИндивидуальныйТекстЗадания);
	ПараметрыЗаполнения.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаТЧ.ИндивидуальноеНаименованиеЗадания);
	ПараметрыЗаполнения.Вставить("НеИспользоватьГрафикРаботы", СтрокаТЧ.НеИспользоватьГрафикРаботы);
	ПараметрыЗаполнения.Вставить("ИднИсполнителя", СтрокаТЧ.ИднИсполнителя);
	
	ПараметрыЗаполнения.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("ПоказыватьПараметрыЗадачи", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Элемент адресации'; en='Addressing element';"));
	
	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ОткрытьФормуАдресацииЗавершение", ЭтотОбъект, Новый Структура("СтрокаТЧ, ТолькоПросмотр", СтрокаТЧ, ТолькоПросмотр)));
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытьФормуАдресацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтрокаТЧ = ДополнительныеПараметры.СтрокаТЧ;
    ТолькоПросмотр = ДополнительныеПараметры.ТолькоПросмотр;
    
    СтруктураРезультата=Результат;
    
    Если ТолькоПросмотр Тогда
        Возврат;
        
    КонецЕсли;
    
    Если СтруктураРезультата=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    //обновим данные
    СтрокаТЧ.ТочкаАдресации=СтруктураРезультата.ТочкаАдресации;
    СтрокаТЧ.ОтчетИсполнителя=СтруктураРезультата.ОтчетИсполнителя;	
    СтрокаТЧ.СрокВыполненияЧасов=СтруктураРезультата.СрокВыполненияЧасов;	
    СтрокаТЧ.СрокВыполненияДатаВремя=СтруктураРезультата.СрокВыполненияДатаВремя;	
    СтрокаТЧ.ИндивидуальныйТекстЗадания=СтруктураРезультата.ИндивидуальныйТекстЗадания;	
    СтрокаТЧ.ИндивидуальноеНаименованиеЗадания=СтруктураРезультата.ИндивидуальноеНаименованиеЗадания;	
    СтрокаТЧ.НеИспользоватьГрафикРаботы=СтруктураРезультата.НеИспользоватьГрафикРаботы;	
    СтрокаТЧ.ИднИсполнителя=СтруктураРезультата.ИднИсполнителя;	
    
    СтрокаТЧ.СрокВыполненияТекст=КП_ОбщееКлиент.ПолучитьПредставлениеСрокаВыполнения(СтрокаТЧ.СрокВыполненияЧасов, СтрокаТЧ.СрокВыполненияДатаВремя, СтруктураРезультата.НеИспользоватьГрафикРаботы);

	ИсполнителиТочкиПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиТочкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	//откроем форму адресации
	Отказ=Истина;
	
	ПараметрыФормы=Новый Структура;
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("СрокВыполненияЧасов", СрокПоУмолчаниюЧасов);
	ПараметрыЗаполнения.Вставить("СрокВыполненияДатаВремя", СрокПоУмолчаниюДата);
	ПараметрыЗаполнения.Вставить("НеИспользоватьГрафикРаботы", Ложь);
	
	ПараметрыЗаполнения.Вставить("ИднИсполнителя", "");
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("ПоказыватьПараметрыЗадачи", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Новый элемент адресации'; en='New addressing element';"));

	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ИсполнителиТочкиПередНачаломДобавленияЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ИсполнителиТочкиПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураРезультата=Результат;
	
	Если СтруктураРезультата=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ДобавитьНовуюСтрокуАдресации(СтруктураРезультата);
	
    Элементы.ДействиеПараллельноеЧисло.Видимость=(Объект.ИсполнителиТочки.Количество()>1);
    УстановитьОтображениеПараметровИсполнителей();
    
    Элементы.СписокОсновныхИсполнителейПроцессаВидНаправленияПараллельное.Видимость=Элементы.ДействиеПараллельноеЧисло.Видимость;
    Элементы.ИсполнителиТочкиВидНаправленияКартинка.Видимость=Элементы.ДействиеПараллельноеЧисло.Видимость;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюСтрокуАдресации(СтруктураРезультата)
	
	НоваяСтрока=Объект.ИсполнителиТочки.Добавить();
	
	НоваяСтрока.ТочкаАдресации=СтруктураРезультата.ТочкаАдресации;
	НоваяСтрока.ОтчетИсполнителя=СтруктураРезультата.ОтчетИсполнителя;	
	НоваяСтрока.СрокВыполненияЧасов=СтруктураРезультата.СрокВыполненияЧасов;	
	НоваяСтрока.СрокВыполненияДатаВремя=СтруктураРезультата.СрокВыполненияДатаВремя;	
	НоваяСтрока.ИндивидуальныйТекстЗадания=СтруктураРезультата.ИндивидуальныйТекстЗадания;	
	НоваяСтрока.ИднИсполнителя=СтруктураРезультата.ИднИсполнителя;	
	НоваяСтрока.ВидНаправленияПараллельное=Объект.ДействиеПараллельное;
	НоваяСтрока.НеИспользоватьГрафикРаботы=СтруктураРезультата.НеИспользоватьГрафикРаботы;
	
	НоваяСтрока.СрокВыполненияТекст=КП_ОбщееКлиент.ПолучитьПредставлениеСрокаВыполнения(НоваяСтрока.СрокВыполненияЧасов,,СтруктураРезультата.НеИспользоватьГрафикРаботы);
	
	СрокПоУмолчаниюЧасов=СтруктураРезультата.СрокВыполненияЧасов;
	СрокПоУмолчаниюДата=СтруктураРезультата.СрокВыполненияДатаВремя;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодходящиеРеквизитыПодпроцесса(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ПодпроцессВид) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Please specify the type of sub-.';ru='Сначала укажите вид подпроцесса.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ЗаполнитьПодходящиеРеквизитыПодпроцессаЗавершение", ЭтотОбъект), 
		НСтр("en='Do you want to find and fill out the appropriate params?';ru='Найти и заполнить подходящие по типам реквизиты?'"), 
		КП_ОбщееКлиент.КнопкиВопроса("Да, заполнить"),,,КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗаполнитьПодходящиеРеквизитыПодпроцессаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьРеквизитыПодпроцессаПоТипам();
    
    Если Объект.ПередачаРеквизитовВПодпроцесс.Количество()=0 Тогда
        Состояние(НСтр("en='Relevant details found ...';ru='Подходящие реквизиты не найдены...'"));
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПодпроцессаПоТипам()
	Объект.ПередачаРеквизитовВПодпроцесс.Очистить();
	
	ЗапросРеквизиты=Новый Запрос("ВЫБРАТЬ
	                             |	КП_ДополнительныеРеквизиты.Ссылка КАК Реквизит,
	                             |	КП_ДополнительныеРеквизиты.ТипРеквизита
	                             |ИЗ
	                             |	Справочник.КП_ДополнительныеРеквизиты КАК КП_ДополнительныеРеквизиты
	                             |ГДЕ
	                             |	КП_ДополнительныеРеквизиты.Владелец = &ВидПроцесса
	                             |	И КП_ДополнительныеРеквизиты.ПометкаУдаления = ЛОЖЬ");
						
	ЗапросРеквизиты.УстановитьПараметр("ВидПроцесса", Объект.ПодпроцессВид);
	
	ВыборкаРеквизитовПодпроцесса=ЗапросРеквизиты.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	ЗапросРеквизиты.УстановитьПараметр("ВидПроцесса", ВладелецРеквизитов);
	ТаблицаРеквизитовПроцесса=ЗапросРеквизиты.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		
	Пока ВыборкаРеквизитовПодпроцесса.Следующий() Цикл
		//проверим есть ли такой тип в нашем шаблоне
		РеквизитПодпроцесса=ВыборкаРеквизитовПодпроцесса.Реквизит;
		ТипРеквизитаПодпроцесса=ВыборкаРеквизитовПодпроцесса.ТипРеквизита;
		
		МассивСтрок=ТаблицаРеквизитовПроцесса.НайтиСтроки(Новый Структура("ТипРеквизита", ТипРеквизитаПодпроцесса)); 
		Если МассивСтрок.Количество()=0 Тогда
			//реквизит не найден
			Продолжить;
		КонецЕсли;
		
		РеквизитПроцесса=МассивСтрок[0].Реквизит;
		
		//добавим строку
		НоваяСтрока=Объект.ПередачаРеквизитовВПодпроцесс.Добавить();
		НоваяСтрока.РеквизитПроцесса=РеквизитПроцесса;
		НоваяСтрока.РеквизитПодпроцесса=РеквизитПодпроцесса;
		НоваяСтрока.ПередаватьВПодпроцесс=Истина;
		НоваяСтрока.ВозвращатьВПроцесс=Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияВыбораРеквизитПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	//откроем список выбора реквизитов с установленным отбором
	ПараметрыФормы=Новый Структура;
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Владелец", ВладелецРеквизитов);
	ПараметрыФормы.Вставить("Отбор",  СтруктураОтбора);
	
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	
	СтрокаТЧ=Элементы.УсловияВыбора.ТекущиеДанные;
	
	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый
				ОписаниеОповещения("Оповещение_ЗакрытиеФормыВыборРеквизита", ЭтотОбъект, СтрокаТЧ));	
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыВыборРеквизита(РезультатЗакрытия, СтрокаТЧ) Экспорт
	СтрокаТЧ.РеквизитПроцесса=РезультатЗакрытия;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидСравнения) Тогда
		СтрокаТЧ.ВидСравнения=ПредопределенноеЗначение("Перечисление.КП_ВидыСравнения.Равно");
	КонецЕсли;
	
	СтрокаТЧ.ЗначениеРеквизита=ПолучитьНачальноеЗначениеУсловия(СтрокаТЧ.РеквизитПроцесса, ВладелецРеквизитов);
		
КонецПроцедуры

&НаКлиенте
Процедура РеквизитСИсполнителемНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	//откроем список выбора реквизитов с установленным отбором
	ПараметрыФормы=Новый Структура;
	
	СтруктураОтбора=Новый Структура;
	//СтруктураОтбора.Вставить("Владелец", Объект.ВладелецТочки);
	СтруктураОтбора.Вставить("Владелец", ВидПроцесса);
	ПараметрыФормы.Вставить("Отбор",  СтруктураОтбора);
	
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	
	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_РеквизитСИсполнителемНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_РеквизитСИсполнителемНачалоВыбораЗавершение(РезультатОткрытия, ДополнительныеПараметры) Экспорт
    
    Если РезультатОткрытия=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ПолноеНаименованиеТипаМетаданных=ПолучитьПолноеНаименованиеМетаданныхРеквизита(РезультатОткрытия);
    
    //проверим допустимость выбранного реквизита
    Если (Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Действие"))
        ИЛИ (Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Обработка") И Объект.ТипОбработки=5) //изменение точки
        Тогда
        Если НЕ (ПолноеНаименованиеТипаМетаданных="Справочник.Пользователи" ИЛИ
            ПолноеНаименованиеТипаМетаданных="Справочник.КП_РабочиеГруппы" )
            Тогда
            ТекстСообщения="Можно выбрать переменную с типом ""Справочники\Пользователи"" или ""Справочники\Рабочие группы"".";
            ПоказатьПредупреждение(Неопределено, ТекстСообщения, 60, КП_ОбщееКлиент.ЗаголовокДиалога());
            Возврат;
            
        КонецЕсли;
        
    ИначеЕсли Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Обработка") Тогда
        Если Объект.ТипОбработки=6 Тогда //отправка сообщения
            
            Если НЕ (ПолноеНаименованиеТипаМетаданных="Справочник.Пользователи" ИЛИ
                ПолноеНаименованиеТипаМетаданных="Строка" )
                Тогда
                ТекстСообщения="Можно выбрать переменную с типом ""Справочники\Пользователи"" или ""Справочники\Рабочие группы"".";
                ПоказатьПредупреждение(Неопределено, ТекстСообщения, 60, КП_ОбщееКлиент.ЗаголовокДиалога());
                Возврат;
                
            КонецЕсли;
            
        КонецЕсли;
        
    КонецЕсли;
    
    Объект.РеквизитСИсполнителем=РезультатОткрытия;

КонецПроцедуры

&НаСервере
Функция ПолучитьПолноеНаименованиеМетаданныхРеквизита(ДополнительныйРеквизит)
	Если ЗначениеЗаполнено(ДополнительныйРеквизит) Тогда
		Возврат ДополнительныйРеквизит.ТипРеквизита.ПолноеНаименование;
		
	Иначе
		Возврат "";
		
	КонецЕсли;
		
	
КонецФункции

&НаКлиенте
Процедура ДействиеПараллельноеЧислоПриИзменении(Элемент)
	
	УстановитьКартинкуВидаНаправленияДействия(ДействиеПараллельноеЧисло);
	
	УстановитьОтображениеПараметровИсполнителей();
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКартинкуВидаНаправленияДействия(ВидНаправленияПараллельное)
	
	Если ИсточникИсполнителейЧисло=0 Тогда
		//основные исполнители
		СписокОсновныхИсполнителейПроцесса.Параметры.УстановитьЗначениеПараметра("ВидНаправленияПараллельное", ВидНаправленияПараллельное);		

	ИначеЕсли ИсточникИсполнителейЧисло=1 Тогда
		//список исполнителей
		Для Каждого СтрокаТЧ Из Объект.ИсполнителиТочки Цикл
			СтрокаТЧ.ВидНаправленияПараллельное=ВидНаправленияПараллельное;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПеременнаяПроцессаЧислоПриИзменении(Элемент)
		
	Если ИсполнительПеременнаяПроцессаЧисло=0 И ЭтоТочкаЭкземпляраКБП И НЕ ЗначениеЗаполнено(Автор) Тогда
		ИсполнительПеременнаяПроцессаЧисло=1;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Business process initiator is not specified.';ru='Инициатор бизнес-процесса не указан.'"));
		
	ИначеЕсли ИсполнительПеременнаяПроцессаЧисло=1 И ЭтоТочкаЭкземпляраКБП И НЕ ЗначениеЗаполнено(Контролер) Тогда
		Если ЭтоТочкаЭкземпляраКБП Тогда
			ТекстПредупреждения=НСтр("ru='Контролер бизнес-процесса не указан.'; en='Process controller is not set';");
		Иначе
			ТекстПредупреждения=НСтр("ru='Контролер бизнес-процесса не указан в настройке вида.';'en='Process controller is not set in process kind';");
		КонецЕсли;
		
		ИсполнительПеременнаяПроцессаЧисло=2;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		
	КонецЕсли;
	
	Если ИсполнительПеременнаяПроцессаЧисло=1 Тогда
		Если Объект.ДействиеТипФормыЗадач<>1 Тогда
			Состояние(НСтр("en='Type the task form is switched to the shape of the controller.';ru='Тип формы задач переключен на форму контролера.'"));
			Объект.ДействиеТипФормыЗадач=1;
			ДействиеТипФормыЗадачПриИзменении(Неопределено);
			
		КонецЕсли;
				
	Иначе
		Если Объект.ДействиеТипФормыЗадач<>0 Тогда
			Состояние(НСтр("en='Type the task form is switched to the shape of the user.';ru='Тип формы задач переключен на форму исполнителя.'"));
			Объект.ДействиеТипФормыЗадач=0;
			ДействиеТипФормыЗадачПриИзменении(Неопределено);
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтображениеПеременныхИсполнителя();
	
КонецПроцедуры

Процедура УстановитьОтображениеПеременныхИсполнителя()
	
	//установим доступность элементов
	
	Элементы.НадписьАвторБизнесПроцесса.Доступность=(ИсполнительПеременнаяПроцессаЧисло=0);
	Элементы.НадписьКонтролерБизнесПроцесса.Доступность=(ИсполнительПеременнаяПроцессаЧисло=1);
	Элементы.РеквизитСИсполнителем.Доступность=(ИсполнительПеременнаяПроцессаЧисло=2);
	
	//установим картинки
	
	Если ИсполнительПеременнаяПроцессаЧисло=0 Тогда
		//автор
		Элементы.КартинкаПеременнойПроцесса.Картинка=БиблиотекаКартинок.КП_АвторПроцесса;
		Элементы.ДействиеНеУчитыватьЗаместителей.Заголовок=НСтр("ru='Не учитывать заместителей инициатора процесса'; en='Do not use deputy initiator';");
        Элементы.ДействиеПараллельноеЧисло.Видимость=Ложь;
		
	ИначеЕсли ИсполнительПеременнаяПроцессаЧисло=1 Тогда
		//контролер
		Элементы.КартинкаПеременнойПроцесса.Картинка=БиблиотекаКартинок.КП_КонтролерПроцесса;
		Элементы.ДействиеНеУчитыватьЗаместителей.Заголовок=НСтр("ru='Не учитывать заместителей контролера'; en='Do not use deputy controller';");
		Элементы.ДействиеПараллельноеЧисло.Видимость=Ложь;
		
	ИначеЕсли ИсполнительПеременнаяПроцессаЧисло=2 Тогда
		//реквизит (переменная)
		Элементы.КартинкаПеременнойПроцесса.Картинка=БиблиотекаКартинок.КП_ПеременнаяПроцесса;
		Элементы.ДействиеНеУчитыватьЗаместителей.Заголовок=НСтр("ru='Не учитывать заместителей исполнителя'; en='Do not use deputy user';");
		
		//переменные процесса (реквизит процесса)
		НаименованиеТипаРеквизита=ПолучитьПолноеНаименованиеМетаданныхРеквизита(Объект.РеквизитСИсполнителем);
		Если ЗначениеЗаполнено(Объект.РеквизитСИсполнителем) И НаименованиеТипаРеквизита="Справочник.КП_РабочиеГруппы" Тогда
			//покажем возможность выбора параллельности исполнения для реквизита типа рабочая группа
			Элементы.ДействиеПараллельноеЧисло.Видимость=Истина;
		КонецЕсли;
		
	Иначе
		Элементы.КартинкаПеременнойПроцесса.Картинка=Новый Картинка;
		Элементы.ДействиеПараллельноеЧисло.Видимость=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтображениеПараметровИсполнителей()
	
	Если ДействиеПараллельноеЧисло=1 И Элементы.ДействиеПараллельноеЧисло.Видимость Тогда
		Элементы.ДействиеЗавершениеСпискаПослеОдногоЧисло.Видимость=Истина;
		
	Иначе
		Элементы.ДействиеЗавершениеСпискаПослеОдногоЧисло.Видимость=Ложь;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокОсновныхИсполнителей()
	Если ЭтоТочкаЭкземпляраКБП Тогда
		//данные берем из списка основных исполнителей экземпляра бизнес-процесса
		СписокОсновныхИсполнителейПроцесса.ТекстЗапроса="ВЫБРАТЬ
		                                                |	КП_БизнесПроцессОсновныеИсполнители.Ссылка КАК ВидКБП,
		                                                |	КП_БизнесПроцессОсновныеИсполнители.НомерСтроки,
		                                                |	ВЫРАЗИТЬ(&ВидНаправленияПараллельное КАК ЧИСЛО(1, 0)) КАК ВидНаправленияПараллельное,
		                                                |	КП_БизнесПроцессОсновныеИсполнители.ТочкаАдресации,
		                                                |	КП_БизнесПроцессОсновныеИсполнители.ОтчетИсполнителя,
		                                                |	КП_БизнесПроцессОсновныеИсполнители.СрокВыполненияЧасов,
														|	КП_БизнесПроцессОсновныеИсполнители.СрокВыполненияДатаВремя,
		                                                |	КП_БизнесПроцессОсновныеИсполнители.СрокВыполненияТекст,
		                                                |	КП_БизнесПроцессОсновныеИсполнители.ИндивидуальныйТекстЗадания,
		                                                |	КП_БизнесПроцессОсновныеИсполнители.ИндивидуальноеНаименованиеЗадания,
		                                                |	КП_БизнесПроцессОсновныеИсполнители.НеИспользоватьГрафикРаботы,
		                                                |	КП_БизнесПроцессОсновныеИсполнители.ИднИсполнителя
		                                                |ИЗ
		                                                |	БизнесПроцесс.КП_БизнесПроцесс.ОсновныеИсполнители КАК КП_БизнесПроцессОсновныеИсполнители
		                                                |ГДЕ
		                                                |	КП_БизнесПроцессОсновныеИсполнители.Ссылка = &ВладелецОсновныхИсполнителей
														|И  КП_БизнесПроцессОсновныеИсполнители.ТочкаАдресации<>&ПустаяТочка
														|";

		СписокОсновныхИсполнителейПроцесса.Параметры.УстановитьЗначениеПараметра("ВладелецОсновныхИсполнителей", Объект.ВладелецТочки);
		СписокОсновныхИсполнителейПроцесса.Параметры.УстановитьЗначениеПараметра("ВидНаправленияПараллельное", ДействиеПараллельноеЧисло);		
        СписокОсновныхИсполнителейПроцесса.Параметры.УстановитьЗначениеПараметра("ПустаяТочка", Неопределено);		
		
	Иначе
		//данные берем из списка основных исполнителей вида КБП
		СписокОсновныхИсполнителейПроцесса.ТекстЗапроса="
				|ВЫБРАТЬ
				|	КП_ВидыПроцессовОсновныеИсполнители.Ссылка КАК ВидКБП,
				|	КП_ВидыПроцессовОсновныеИсполнители.НомерСтроки,
				|	ВЫРАЗИТЬ(&ВидНаправленияПараллельное КАК ЧИСЛО(1, 0)) КАК ВидНаправленияПараллельное,
				|	КП_ВидыПроцессовОсновныеИсполнители.ТочкаАдресации,
				|	КП_ВидыПроцессовОсновныеИсполнители.ОтчетИсполнителя,
				|	КП_ВидыПроцессовОсновныеИсполнители.СрокВыполненияЧасов,
				|	КП_ВидыПроцессовОсновныеИсполнители.СрокВыполненияДатаВремя,
				|	КП_ВидыПроцессовОсновныеИсполнители.СрокВыполненияТекст,
				|	КП_ВидыПроцессовОсновныеИсполнители.ИндивидуальныйТекстЗадания,
				|	КП_ВидыПроцессовОсновныеИсполнители.ИндивидуальноеНаименованиеЗадания,
				|	КП_ВидыПроцессовОсновныеИсполнители.НеИспользоватьГрафикРаботы
				|ИЗ
				|	Справочник.КП_ВидыПроцессов.ОсновныеИсполнители КАК КП_ВидыПроцессовОсновныеИсполнители
				|ГДЕ
				|	КП_ВидыПроцессовОсновныеИсполнители.Ссылка = &ВладелецОсновныхИсполнителей
				|И  КП_ВидыПроцессовОсновныеИсполнители.ТочкаАдресации<>&ПустаяТочка
				|";

		СписокОсновныхИсполнителейПроцесса.Параметры.УстановитьЗначениеПараметра("ВладелецОсновныхИсполнителей", Объект.ВладелецТочки);
		СписокОсновныхИсполнителейПроцесса.Параметры.УстановитьЗначениеПараметра("ВидНаправленияПараллельное", ДействиеПараллельноеЧисло);		
		СписокОсновныхИсполнителейПроцесса.Параметры.УстановитьЗначениеПараметра("ПустаяТочка", Неопределено);		
		
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ПодпроцессЖдатьОкончанияПриИзменении(Элемент)
	УстановитьОформлениеПодпроцесса();
	
КонецПроцедуры

Процедура УстановитьОформлениеПодпроцесса()
	Элементы.ПередачаРеквизитовВПодпроцессВозвращатьВПроцесс.Видимость=Объект.ПодпроцессЖдатьОкончания;
	Элементы.ГруппаТекстПодпроцесса.Видимость=Объект.ПодпроцессПереопределитьТекст;	
	Элементы.ПодпроцессРабочаяГруппа.Видимость=ФлагПодпроцессПереопределитьРабочуюГруппу;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередачаРеквизитовВПодпроцессРеквизитПодпроцессаПриИзменении(Элемент)
	
	СтрокаТЧ=Элементы.ПередачаРеквизитовВПодпроцесс.ТекущиеДанные;
	СтрокаТЧ.ВозвращатьВПроцесс=Объект.ПодпроцессЖдатьОкончания;

КонецПроцедуры

&НаКлиенте
Процедура ПередачаРеквизитовВПодпроцессРеквизитПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	//откроем список выбора реквизитов с установленным отбором
	ПараметрыФормы=Новый Структура;
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Владелец", ВладелецРеквизитов);
	ПараметрыФормы.Вставить("Отбор",  СтруктураОтбора);
	
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	
	СтрокаТЧ=Элементы.ПередачаРеквизитовВПодпроцесс.ТекущиеДанные;
	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый
			ОписаниеОповещения("Оповещение_ОткрытьФормуПередачаРеквизитовВПодпроцесс", ЭтотОбъект, СтрокаТЧ));	

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытьФормуПередачаРеквизитовВПодпроцесс(РезультатОткрытия, СтрокаТЧ) Экспорт
	
	СтрокаТЧ.РеквизитПроцесса=РезультатОткрытия;
	СтрокаТЧ.ПередаватьВПодпроцесс=Истина;
		
КонецПроцедуры

Процедура УстановитьОтображениеОбработки()
	
	Если Объект.ТипОбработки=0 Тогда
		//установка реквизитов документов
		Элементы.СтраницыТочкаОбработка.ТекущаяСтраница=Элементы.СтраницаУстановкаРеквизитов;		
		
		Элементы.ОбработкаВидЗаполненияРеквизитов.Видимость=Истина;
		УстановитьОтображениеЗакладкиУстановкиРеквизитов();
		
	ИначеЕсли Объект.ТипОбработки=1 Тогда
		//обработка документов
		ЭтаФорма.СписокДокументовПроцесса.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);			
		Элементы.ОбработкаПодписьТочкаАдресации.Видимость=Объект.ОбработкаОтправитьНаПодпись;
		Элементы.ОбработкаАвтоматическиПровестиДокументПодписи.Видимость=Объект.ОбработкаОтправитьНаПодпись;
		
		Элементы.СтраницыТочкаОбработка.ТекущаяСтраница=Элементы.СтраницаОбработкаДокументов;
		
	ИначеЕсли Объект.ТипОбработки=2 Тогда
		//программная обработка
		Элементы.СтраницыТочкаОбработка.ТекущаяСтраница=Элементы.СтраницаКодФункции;
		
	ИначеЕсли Объект.ТипОбработки=3 Тогда
		//использование ресурсов
		Элементы.СтраницыТочкаОбработка.ТекущаяСтраница=Элементы.СтраницаИспользованиеРесурсов;
		ОбработкаРесурсовУстановитьОтображениеДаты();
		УстановитьИсточникРесурсов();
		
	ИначеЕсли Объект.ТипОбработки=4 Тогда
		//таймер
		Элементы.СтраницыТочкаОбработка.ТекущаяСтраница=Элементы.СтраницаТаймер;		
		Элементы.ОбработкаВидЗаполненияРеквизитов.Видимость=Ложь;
		ОбработкаТаймераУстановитьОтображениеДаты();
		
	ИначеЕсли Объект.ТипОбработки=5 Тогда
		//изменение точки
		Элементы.СтраницыТочкаОбработка.ТекущаяСтраница=Элементы.СтраницаИзменениеТочки;
		
		Элементы.ГруппаТекстИзменениеТочкиФорматированныйТекст.Видимость=(Объект.ОбработкаИзменитьТочкуДействия=0); //установить новые данные
		Элементы.ОбработкаГруппаУстановитьИсполнителя.Видимость=(Объект.ОбработкаИзменитьТочкуДействия=3); //установить исполнителя
		
	ИначеЕсли Объект.ТипОбработки=6 Тогда
		//отправка сообщения
		Элементы.СтраницыТочкаОбработка.ТекущаяСтраница=Элементы.СтраницаОтправкаСообщения;
		
		Элементы.ОбработкаТекстТочкиФорматированный.ТолькоПросмотр=(Объект.ОбработкаИзменитьТочкуДействия=1);
		УстановитьОтображениеИсточникаПолучателей();
		УстановитьВидимостьОтправкиСообщений();
		
	ИначеЕсли Объект.ТипОбработки=7 Тогда
		//установка KPI
		Элементы.СтраницыТочкаОбработка.ТекущаяСтраница=Элементы.СтраницаУстановкаKPI;
		
	ИначеЕсли Объект.ТипОбработки=9 Тогда
		//изменение документов
		Элементы.СтраницыТочкаОбработка.ТекущаяСтраница=Элементы.СтраницаИзменениеДокументов;
		Элементы.ОбработкаВидЗаполненияРеквизитов.Видимость=Ложь;
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокРеквизитовОбработки(Команда)
		
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ЗаполнитьСписокРеквизитовОбработкиЗавершение", ЭтотОбъект), 
		НСтр("en='Do you want to fill list details?';ru='Заполнить список реквизитов?'"), РежимДиалогаВопрос.ДаНет, 60, ,КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗаполнитьСписокРеквизитовОбработкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
    ЗаполнитьРеквизитыОбработки();
    
    Если Объект.ОбработкаУстановкаРеквизитов.Количество()=0 Тогда
        Состояние(НСтр("en='Variables was not found ...';ru='Реквизиты не найдены...'"));
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОбработки()
	
	Объект.ОбработкаУстановкаРеквизитов.Очистить();
	
	ЗапросРеквизиты=Новый Запрос;
	
	ТекстЗапроса="ВЫБРАТЬ
                 |	КП_ДополнительныеРеквизиты.Ссылка КАК Реквизит
                 |ИЗ
                 |	Справочник.КП_ДополнительныеРеквизиты КАК КП_ДополнительныеРеквизиты
                 |ГДЕ
                 |	КП_ДополнительныеРеквизиты.Владелец = &ВидПроцесса
                 |	И КП_ДополнительныеРеквизиты.ПометкаУдаления = ЛОЖЬ";
	
						
	ЗапросРеквизиты.УстановитьПараметр("ВидПроцесса", ВладелецРеквизитов);
	
	ЗапросРеквизиты.Текст=ТекстЗапроса;
	
	Выборка=ЗапросРеквизиты.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	РеквизитыЗаполнены=Ложь;
	
	Пока Выборка.Следующий() Цикл
		РеквизитПроцесса=Выборка.Реквизит;
		
		//добавим строку
		НоваяСтрока=Объект.ОбработкаУстановкаРеквизитов.Добавить();
		НоваяСтрока.РеквизитПроцесса=РеквизитПроцесса;
		НоваяСтрока.ЗначениеРеквизита=КП_Процессы.ПолучитьНачальноеЗначениеРеквизита(РеквизитПроцесса);
		
		Если Объект.ОбработкаВидЗаполненияРеквизитов=1 Тогда
			НоваяСтрока.НомерПрилагаемогоОбъекта=1;
		КонецЕсли;
		
		Если Объект.ТипОбработки=9 Тогда
			НоваяСтрока.НомерПрилагаемогоОбъекта=1;
			НоваяСтрока.ДополнениеОбъекта=СокрЛП(РеквизитПроцесса.ИмяРеквизитаДляФункций);
		КонецЕсли;
		
		РеквизитыЗаполнены=Истина;
		
	КонецЦикла;
	
	Если НЕ РеквизитыЗаполнены Тогда
		Если Объект.ОбработкаВидЗаполненияРеквизитов=1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("У процесса нет ссылочных реквизитов");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("В процессе нет реквизитов (переменных)");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУстановкаРеквизитовРеквизитПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	//откроем список выбора реквизитов с установленным отбором
	ПараметрыФормы=Новый Структура;
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Владелец", ВладелецРеквизитов);
	ПараметрыФормы.Вставить("Отбор",  СтруктураОтбора);
	
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	
	СтрокаТЧ=Элементы.ОбработкаУстановкаРеквизитов.ТекущиеДанные;
	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый
			ОписаниеОповещения("Оповещение_ОткрытьФормуУстановкаРеквизитовПроцесс", ЭтотОбъект, СтрокаТЧ));		
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытьФормуУстановкаРеквизитовПроцесс(РезультатОткрытия, СтрокаТЧ) Экспорт
	
	СтрокаТЧ.РеквизитПроцесса=РезультатОткрытия;
	СтрокаТЧ.ЗначениеРеквизита=КП_Процессы.ПолучитьНачальноеЗначениеРеквизита(СтрокаТЧ.РеквизитПроцесса);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыФормыЗадач(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ЗаполнитьРеквизитыФормыЗадачЗавершение", ЭтотОбъект), 
		НСтр("en='Do you want to fill the variable list?';ru='Заполнить список реквизитами процесса?'"), 
		КП_ОбщееКлиент.КнопкиВопроса("Да, заполнить"),,,КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗаполнитьРеквизитыФормыЗадачЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьСписокРеквизитовФормыЗадач();

КонецПроцедуры

Процедура УстановитьОтображениеЭлементовДействия()
	
	Если ЭтоТочкаЭкземпляраКБП Тогда
		Элементы.СписокОсновныхИсполнителейПроцесса.ТолькоПросмотр=Объект.ВладелецТочки.Стартован;
		
	КонецЕсли;
	
	Элементы.ДействиеПодпроцессЖдатьОкончания.Видимость=Объект.ДействиеИсполнительМожетСоздатьПодпроцесс;
	ОбновитьОписаниеОсновногоОтчета();
	УстановитьОтображениеНаименованияЗадач();
		
КонецПроцедуры

&НаКлиенте
Процедура ДействиеЗавершениеСпискаПослеОдногоЧислоПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаРеквизитПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	//откроем список выбора реквизитов с установленным отбором
	ПараметрыФормы=Новый Структура;
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Владелец", ВладелецРеквизитов);
	ПараметрыФормы.Вставить("Отбор",  СтруктураОтбора);
	
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	
	СтрокаТЧ=Элементы.ВыборВарианта.ТекущиеДанные;
	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый
			ОписаниеОповещения("Оповещение_ОткрытьФормуВыборВарианта", ЭтотОбъект, СтрокаТЧ));	
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытьФормуВыборВарианта(РезультатОткрытия, СтрокаТЧ) Экспорт
	
	СтрокаТЧ=Элементы.ВыборВарианта.ТекущиеДанные;
	СтрокаТЧ.РеквизитПроцесса=РезультатОткрытия;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидСравнения) Тогда
		СтрокаТЧ.ВидСравнения=ПредопределенноеЗначение("Перечисление.КП_ВидыСравнения.Равно");
	КонецЕсли;
	
	СтрокаТЧ.ЗначениеРеквизита=КП_Процессы.ПолучитьНачальноеЗначениеРеквизита(СтрокаТЧ.РеквизитПроцесса);
		
КонецПроцедуры

&НаКлиенте
Процедура ТипВыборВариантаФункцияЧисломПриИзменении(Элемент)
	УстановитьВидимостьПоТипуВыбораВарианта()
КонецПроцедуры

Функция УстановитьВидимостьПоТипуВыбораВарианта()
	
	//Элементы.ГруппаТочкаВыборВариантаПростоеУсловие.Видимость=(ТипУсловиеФункцияЧислом=0);
	Элементы.ГруппаТочкаВыборВариантаПростоеУсловие.Видимость=(Объект.ТипУсловиеФункция=0);
	Элементы.ГруппаТочкаВыборВариантаПрограммнаяФукнкция.Видимость=НЕ Элементы.ГруппаТочкаВыборВариантаПростоеУсловие.Видимость;
	
КонецФункции

&НаКлиенте
Процедура ДействиеИсточникТекстаЗаданийЧислоПриИзменении(Элемент)
	УстановитьПоляТекстаЗаданий();
	
КонецПроцедуры

Процедура УстановитьПоляТекстаЗаданий()
	
	Если Объект.ДействиеИсточникТекстаЗаданийЧисло=0 Тогда
		//текст заданий из процесса
		Элементы.ГруппаТекстЗаданийИзПроцесса.Видимость=Истина;
		Элементы.ГруппаТекстЗаданийТочкиДействия.Видимость=Ложь;
		//прочитаем текст процесса
		ТекстПроцессаФорматированный=Объект.ВладелецТочки.ХранилищеТекстаПроцесса.Получить();
		
	Иначе
		//текст заданий из точки действия
		Элементы.ГруппаТекстЗаданийИзПроцесса.Видимость=Ложь;
		Элементы.ГруппаТекстЗаданийТочкиДействия.Видимость=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеИсполнительМожетСоздатьПодпроцессПриИзменении(Элемент)
	Элементы.ДействиеПодпроцессЖдатьОкончания.Видимость=Объект.ДействиеИсполнительМожетСоздатьПодпроцесс;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеОсновнойОтчетИсполнителейПриИзменении(Элемент)
	ОбновитьОписаниеОсновногоОтчета();
	
КонецПроцедуры

Процедура ОбновитьОписаниеОсновногоОтчета()
	
	Если ЗначениеЗаполнено(Объект.ДействиеОсновнойОтчетИсполнителей) Тогда
		Элементы.ДекорацияОсновнойОтчетИсполнителей.Видимость=Истина;
		Элементы.ДекорацияОсновнойОтчетИсполнителей.Заголовок=КП_ЗадачиПроцессов.ПолучитьОписаниеТребуемогоРезультата(Объект.ДействиеОсновнойОтчетИсполнителей);
		Если ЕстьТребуемыйРезультатФайл() Тогда
			Элементы.ШаблоныДокументовДляНовыхФайлов.Видимость=Истина;
		Иначе
			Элементы.ШаблоныДокументовДляНовыхФайлов.Видимость=Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.ДекорацияОсновнойОтчетИсполнителей.Видимость=Ложь;
		Элементы.ШаблоныДокументовДляНовыхФайлов.Видимость=Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеТипФормыЗадачПриИзменении(Элемент)
	
	УстановитьВидимостьТочкиКонтроля();
	
	ЗаполнитьСписокЭлементовФормыЗадач();
		
КонецПроцедуры

Процедура УстановитьВидимостьТочкиКонтроля()
	
	Элементы.ДекорацияКонтрольТочки.Видимость=(Объект.ДействиеТипФормыЗадач=1);
	Элементы.ДействиеКонтрольТочки.Видимость=(Объект.ДействиеТипФормыЗадач=1);
	
	Элементы.ГруппаОсновнойОтчетИсполнителей.Видимость=(Объект.ДействиеТипФормыЗадач=0);
	Элементы.ДекорацияОсновнойОтчетИсполнителей.Видимость=Элементы.ГруппаОсновнойОтчетИсполнителей.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиТочкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуАдресации(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЭлементовЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Состояние(НСтр("en='Modifying list of items is not possible.';ru='Изменение списка элементов невозможно.'"));
	Отказ=Истина;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеЭлементовЗадачПередУдалением(Элемент, Отказ)
	Состояние(НСтр("en='Modifying list of items is not possible.';ru='Изменение списка элементов невозможно.'"));
	Отказ=Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокЭлементовФормыЗадач()
	Справочники.КП_ТочкиПроцессов.ЗаполнитьСписокНаименованийЭлементовФормыЗадач(Объект, ВидПроцесса, Объект.ДействиеТипФормыЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеТочкаКонтроляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	ПараметрыОтбора=Новый Структура("ВладелецТочки", Объект.ВладелецТочки);
	ПараметрыОтбора.Вставить("ДействиеТипФормыЗадач", 1); //точка контроля
	ПараметрыОтбора.Вставить("ТипТочки", ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Действие"));
	ПараметрыОтбора.Вставить("СсылкаИсключение", Объект.Ссылка);
	
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Выберите точку контроля'; en='Select control point';"));
	
	ОткрытьФорму("Справочник.КП_ТочкиПроцессов.ФормаВыбора", ПараметрыФормы,,,,, Новый
			ОписаниеОповещения("Оповещение_ОткрытьФормуТочкаКонтроля", ЭтотОбъект, Объект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытьФормуТочкаКонтроля(РезультатВыбора, Объект) Экспорт
	
	Если РезультатВыбора=Неопределено Тогда
		Возврат;
		
	КонецЕсли;

	Объект.УсловиеТочкаКонтроля=РезультатВыбора;

КонецПроцедуры

&НаКлиенте
Процедура ДействиеКонтрольТочкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ПараметрыОтбора=Новый Структура("ВладелецТочки", Объект.ВладелецТочки);
	ПараметрыОтбора.Вставить("ТипФормыЗадачи", 0); //точка с формой исполнителя
	ПараметрыОтбора.Вставить("ТипТочки", ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Действие"));
	ПараметрыОтбора.Вставить("СсылкаИсключение", Объект.Ссылка);
	
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Выберите точку действия'; en='Please select action point;")); 
	ОткрытьФорму("Справочник.КП_ТочкиПроцессов.ФормаВыбора", ПараметрыФормы,,,,, 
		Новый ОписаниеОповещения("Подключаемый_ВыборТочкиЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), 
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборТочкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
	Объект.ДействиеКонтрольТочки=Результат;

КонецПроцедуры

&НаКлиенте
Процедура СписокОсновныхИсполнителейПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТЧ=Элемент.ТекущиеДанные;
	
	ОткрытьФормуАдресацииДляДинамическогоСписка(СтрокаТЧ);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАдресацииДляДинамическогоСписка(СтрокаТЧ)
	
	ПараметрыФормы=Новый Структура;
	ПараметрыЗаполнения=Новый Структура;
	
	ПараметрыЗаполнения.Вставить("ТочкаАдресации", СтрокаТЧ.ТочкаАдресации);
	ПараметрыЗаполнения.Вставить("ОтчетИсполнителя", СтрокаТЧ.ОтчетИсполнителя);
	ПараметрыЗаполнения.Вставить("СрокВыполненияЧасов", СтрокаТЧ.СрокВыполненияЧасов);
	ПараметрыЗаполнения.Вставить("ИндивидуальныйТекстЗадания", СтрокаТЧ.ИндивидуальныйТекстЗадания);
	ПараметрыЗаполнения.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаТЧ.ИндивидуальноеНаименованиеЗадания);
	ПараметрыЗаполнения.Вставить("НеИспользоватьГрафикРаботы", СтрокаТЧ.НеИспользоватьГрафикРаботы);
	ПараметрыЗаполнения.Вставить("ТолькоПросмотр", Истина);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Элемент адресации'; en='Addressing element';"));
	
	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	ФлагМожноМенятьНаименование=Ложь;
	Если ЭтаФорма.Заголовок=НСтр("ru='<наименование не указано>'; en='<name is not set>';") Тогда
		ЭтаФорма.Заголовок=Объект.Наименование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРесурсовРесурсПриИзменении(Элемент)
	СтрокаТЧ=Элементы.РесурсыПредприятия.ТекущиеДанные;
	Если СтрокаТЧ.Количество=0 Тогда
		СтрокаТЧ.Количество=1;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеРесурсовТипДействияПриИзменении(Элемент)
	Если ФлагМожноМенятьНаименование Тогда
		Если Объект.ИспользованиеРесурсовТипДействия=0 Тогда
			Объект.Наименование="Захват ресурсов 1";
		Иначе
			Объект.Наименование="Освобождение ресурсов 1";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаДокументСостояниеПриИзменении(Элемент)
	Если Объект.Наименование="Обработка документов 1" Тогда
		Объект.Наименование=СокрЛП(Объект.ОбработкаДокументСостояние);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокНаименованийФормы(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ЗаполнитьСписокНаименованийФормыЗавершение", ЭтотОбъект), НСтр("en='Do you want to refill elements names?';ru='Перезаполнить список наименований формы?'"), РежимДиалогаВопрос.ДаНет,,,КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗаполнитьСписокНаименованийФормыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    ЗаполнитьСписокЭлементовФормыЗадач();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеРеквизиты(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ЗаполнитьВсеРеквизитыЗавершение", ЭтотОбъект), НСтр("en='Do you want to refill line details of the process?';ru='Перезаполнить строки реквизитами процесса?'"), РежимДиалогаВопрос.ДаНет,,,КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗаполнитьВсеРеквизитыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если Объект.УсловияВыбора.Количество()>0 И РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    ЗаполнитьПростыеУсловияСервером();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПростыеУсловияСервером()

	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ДополнительныеРеквизиты.Ссылка КАК РеквизитПроцесса
	                    |ИЗ
	                    |	Справочник.КП_ДополнительныеРеквизиты КАК КП_ДополнительныеРеквизиты
	                    |ГДЕ
	                    |	КП_ДополнительныеРеквизиты.Владелец = &ВидПроцесса
	                    |	И КП_ДополнительныеРеквизиты.ПометкаУдаления = ЛОЖЬ");
						
	Запрос.УстановитьПараметр("ВидПроцесса", ВладелецРеквизитов);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Объект.УсловияВыбора.Очистить();
	
	Пока Выборка.Следующий() Цикл
		РеквизитПроцесса=Выборка.РеквизитПроцесса;
		НоваяСтрока=Объект.УсловияВыбора.Добавить();	
		НоваяСтрока.РеквизитПроцесса=РеквизитПроцесса;
		
		Если РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Булево 
			 ИЛИ
			 РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Дата 
		Тогда
			НоваяСтрока.ВидСравнения=Перечисления.КП_ВидыСравнения.Равно;
		Иначе
			НоваяСтрока.ВидСравнения=Перечисления.КП_ВидыСравнения.БольшеИлиРавно;
		КонецЕсли;
		
		НоваяСтрока.ЗначениеРеквизита=ПолучитьНачальноеЗначениеУсловия(Выборка.РеквизитПроцесса, ВладелецРеквизитов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка Тогда
		ОбновитьСписокДокументов();
		ОбновитьСписокОсновныхИсполнителей();
		
	ИначеЕсли Объект.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Действие Тогда
		ОбновитьСписокОсновныхИсполнителей();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокДокументов();
	
    Если Элементы.СписокДокументовПроцесса.Видимость Тогда
		СписокДокументовПроцесса.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", ВладелецРеквизитов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтправитьНаПодписьПриИзменении(Элемент)
	УстановитьОтображениеОбработки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодписьТочкаАдресацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("ТочкаАдресации", Объект.ОбработкаПодписьТочкаАдресации);
	
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Подпись документов'; en='Document sign';"));
	
	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ОбработкаПодписьТочкаАдресацииНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОбработкаПодписьТочкаАдресацииНачалоВыбораЗавершение(СтруктураРезультата, ДополнительныеПараметры) Экспорт
    
    Если СтруктураРезультата=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    //обновим данные
    Объект.ОбработкаПодписьТочкаАдресации=СтруктураРезультата.ТочкаАдресации;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРесурсыРеквизитСДатойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	//откроем список выбора реквизитов с установленным отбором
	ПараметрыФормы=Новый Структура;
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Объект.ВладелецТочки);
	ПараметрыФормы.Вставить("Отбор",  СтруктураОтбора);
	
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	
	ФормаВыбора=ПолучитьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы);
	
	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый
				ОписаниеОповещения("Оповещение_ЗакрытиеФормыДополнительныеРеквизиты", ЭтотОбъект));			
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыДополнительныеРеквизиты(РезультатЗакрытия, ДополнительныеПараметры) Экспорт	
	
	Объект.ОбработкаРеквизитСДатой=РезультатЗакрытия;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаРесурсыТипДатыПриИзменении(Элемент)
	ОбработкаРесурсовУстановитьОтображениеДаты();
	
КонецПроцедуры

Процедура ОбработкаРесурсовУстановитьОтображениеДаты()
	Элементы.ОбработкаРесурсыРеквизитСДатой.Видимость=(Объект.ОбработкаТипДаты=2);
	Элементы.ОбработкаРесурсыДата.Видимость=(Объект.ОбработкаТипДаты=1);
	
КонецПроцедуры

Процедура ОбработкаТаймераУстановитьОтображениеДаты()
	
	Если Объект.ОбработкаТипДаты=1 Тогда
		//точная дата и время
		Элементы.ОбработкаТаймерДата.Видимость=Истина;
		Элементы.ОбработкаТаймерРеквизитСДатой.Видимость=Ложь;
		Элементы.ГруппаТаймерОтносительный.Видимость=Ложь;
		
	ИначеЕсли Объект.ОбработкаТипДаты=2 Тогда
		//реквизит с датой
		Элементы.ОбработкаТаймерДата.Видимость=Ложь;
		Элементы.ОбработкаТаймерРеквизитСДатой.Видимость=Истина;
		Элементы.ГруппаТаймерОтносительный.Видимость=Ложь;
		
	ИначеЕсли Объект.ОбработкаТипДаты=3 Тогда
		//относительное время
		Элементы.ОбработкаТаймерДата.Видимость=Ложь;
		Элементы.ОбработкаТаймерРеквизитСДатой.Видимость=Ложь;
		Элементы.ГруппаТаймерОтносительный.Видимость=Истина;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаТаймерТипДатыПриИзменении(Элемент)
	ОбработкаТаймераУстановитьОтображениеДаты();
	
	Если Объект.ОбработкаТипДаты=1 Тогда
		Объект.ОбработкаДата=ТекущаяДата();		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУсловиеУстановитьОтображениеДаты()
	Элементы.УсловиеРесурсыРеквизитСДатой.Видимость=(Объект.ОбработкаТипДаты=2);
	Элементы.УсловиеРесурсыДата.Видимость=(Объект.ОбработкаТипДаты=1);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеРесурсыРеквизитСДатойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	//откроем список выбора реквизитов с установленным отбором
	ПараметрыФормы=Новый Структура;
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Объект.ВладелецТочки);
	ПараметрыФормы.Вставить("Отбор",  СтруктураОтбора);
	
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	

	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый
				ОписаниеОповещения("Оповещение_ЗакрытиеФормыДатыРеквизита", ЭтотОбъект));		
				
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыДатыРеквизита(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Объект.ОбработкаРеквизитСДатой=РезультатЗакрытия;

КонецПроцедуры
	
&НаКлиенте
Процедура ОбработкаТаймерРеквизитСДатойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	//откроем список выбора реквизитов с установленным отбором
	ПараметрыФормы=Новый Структура;
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Объект.ВладелецТочки);
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("ТолькоТипДата", Истина);	
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	ПараметрыФормы.Вставить("Заголовок", "Выберите реквизит с типом дата");
	
	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ОбработкаТаймерРеквизитСДатойНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОбработкаТаймерРеквизитСДатойНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Объект.ОбработкаРеквизитСДатой=Результат;

КонецПроцедуры

Процедура УстановитьОтображениеУсловия()
	Если Объект.ТипУсловиеФункция=4 Тогда
		//доступность ресурсов
		ОбработкаУсловиеУстановитьОтображениеДаты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВариантаЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТЧ=Элементы.ВыборВарианта.ТекущиеДанные;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	РеквизитПроцесса=СтрокаТЧ.РеквизитПроцесса;
	Если НЕ ЭтоРеквизитСвойства(РеквизитПроцесса) Тогда
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
	
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	//откроем форму с установленным отбором
	ПараметрыОтбора=Новый Структура("Владелец", КП_Процессы.ПолучитьСвязьРеквизитаСПВХ(РеквизитПроцесса));
	ПараметрыФормы=Новый Структура("Отбор, РежимВыбора", ПараметрыОтбора, Истина);
	
	ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора", ПараметрыФормы,,,,, Новый
				ОписаниеОповещения("Оповещение_ЗакрытиеФормыЗначенияСвойствОбъектов", ЭтотОбъект, СтрокаТЧ), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);			
				
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыЗначенияСвойствОбъектов(РезультатЗакрытия, СтрокаТЧ) Экспорт
				
	Если РезультатЗакрытия=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ.ЗначениеРеквизита=РезультатЗакрытия;

КонецПроцедуры

&НаСервере
Функция ЭтоРеквизитСвойства(РеквизитПроцесса)
	Если РеквизитПроцесса.ТипРеквизита.ПринадлежитЭлементу(Справочники.КП_СписокМетаданных.Свойства) Тогда
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РеквизитыПроцессаТолькоПросмотрПриИзменении(Элемент)
	СтрокаТЧ=Элементы.РеквизитыПроцесса.ТекущиеДанные;
	Если СтрокаТЧ.ТолькоПросмотр Тогда
		СтрокаТЧ.Обязательный=Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПроцессаОбязательныйПриИзменении(Элемент)
	СтрокаТЧ=Элементы.РеквизитыПроцесса.ТекущиеДанные;
	Если СтрокаТЧ.Обязательный Тогда
		СтрокаТЧ.ТолькоПросмотр=Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
		
	ТекущийОбъект.ХранилищеТекстаТочки=Новый ХранилищеЗначения(ТекстТочкиФорматированный);
	ТекущийОбъект.ХранилищеТекстаТочкиДополнительное=Новый ХранилищеЗначения(ПодпроцессТекстПроцессаФорматируемый);
          
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ТекстТочкиФорматированный=ТекущийОбъект.ХранилищеТекстаТочки.Получить();
	ПодпроцессТекстПроцессаФорматируемый=ТекущийОбъект.ХранилищеТекстаТочкиДополнительное.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРезультатыИсполнителей(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.УсловиеТочкаКонтроля) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Please select a control point.';ru='Сначала выберите точку контроля.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ЗаполнитьРезультатыИсполнителейЗавершение", ЭтотОбъект), НСтр("en='Do you want to refill point results?';ru='Перезаполнить результаты по выбранной точке?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, КП_ОбщееКлиент.ЗаголовокДиалога(), КодВозвратаДиалога.ОК);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗаполнитьРезультатыИсполнителейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если Объект.УсловиеВыбораПоРезультатам.Количество()>0 И РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    ЗаполнитьРезультатыИсполнителейСервером();

КонецПроцедуры

Процедура ЗаполнитьРезультатыИсполнителейСервером()
	
	Если НЕ ЗначениеЗаполнено(Объект.УсловиеТочкаКонтроля.ДействиеОсновнойОтчетИсполнителей) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='At the point ""';ru='В точке ""'")+СокрЛП(Объект.УсловиеТочкаКонтроля)+НСтр("ru='"" не указан основной отчет исполнителя! Список результатов не заполнен';"));
		Возврат;
		
	КонецЕсли;
	
	ОтчетИсполнителя=Объект.УсловиеТочкаКонтроля.ДействиеОсновнойОтчетИсполнителей;
	Объект.УсловиеВыбораПоРезультатам.Очистить();
	
	Для Каждого СтрокаВида Из ОтчетИсполнителя.ВидыОтчетов Цикл
		Если НЕ СтрокаВида.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=Объект.УсловиеВыбораПоРезультатам.Добавить();	
		НоваяСтрока.ВидРезультатаИсполнителя=СтрокаВида.ВидОтчета;
		НаименованиеВида=СтрокаВида.НаименованиеРеквизитаВида;
		НоваяСтрока.НаименованиеРезультатаИсполнителя=?(ПустаяСтрока(НаименованиеВида), СокрЛП(СтрокаВида.ВидОтчета), НаименованиеВида);
		НоваяСтрока.ВидСравнения=Перечисления.КП_ВидыСравнения.Равно;
		НоваяСтрока.ТребуемоеЗначение=КП_ЗадачиПроцессов.ПолучитьНачальноеЗначениеТребуемогоЗначения(СтрокаВида.ВидОтчета);
		
		Если СтрокаВида.ВидОтчета=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ТекстовоеСообщение Тогда
			НоваяСтрока.Проверять=Ложь;
		Иначе
			НоваяСтрока.Проверять=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеТочкаАвтоматическогоКонтроляПриИзменении(Элемент)
	ЗаполнитьРезультатыИсполнителейСервером();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеВыбораПоРезультатамПередУдалением(Элемент, Отказ)
	Отказ=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеВыбораПоРезультатамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеТочкаАвтоматическогоКонтроляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	ПараметрыОтбора=Новый Структура("ВладелецТочки", Объект.ВладелецТочки);
	ПараметрыОтбора.Вставить("ДействиеТипФормыЗадач", 0); //точка действия
	ПараметрыОтбора.Вставить("ТипТочки", ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Действие"));
	ПараметрыОтбора.Вставить("СсылкаИсключение", Объект.Ссылка);
	
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Выберите точку действия'; en='Select action point;'"));
	
	ОткрытьФорму("Справочник.КП_ТочкиПроцессов.ФормаВыбора", ПараметрыФормы,,,,, Новый
			ОписаниеОповещения("Оповещение_ОткрытьФормуАвтоматическийКонтроль", ЭтотОбъект, Объект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытьФормуАвтоматическийКонтроль(РезультатВыбора, Объект) Экспорт
	
	Если РезультатВыбора=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Объект.УсловиеТочкаКонтроля=РезультатВыбора;
	
	ЗаполнитьРезультатыИсполнителейСервером();

		
КонецПроцедуры

&НаСервере
Функция СписокУсловийЗаполненКорректно()
	Для Каждого СтрокаТаблицы Из Объект.УсловияВыбора Цикл
		Если ТипУсловиеФункцияЧислом=0 Тогда
			//простое условие по реквизитам процесса
			Если НЕ ПустаяСтрока(СтрокаТаблицы.ДополнениеРеквизита) Тогда
				Если НЕ КП_ОбщееСервер.ЭтоТипДополнительныйРеквизитСсылочный(СтрокаТаблицы.РеквизитПроцесса) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для реквизита """+СокрЛП(СтрокаТаблицы.РеквизитПроцесса)+""" указано дополнение """+СокрЛП(СтрокаТаблицы.ДополнениеРеквизита)+""", хотя он не является ссылочным!");
					Возврат Ложь;
				КонецЕсли;
				//пропустим проверку по типу дополнения, т.к. мы не знаем реальный тип дополнения объекта
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ТипРеквизитаСтроки=СтрокаТаблицы.РеквизитПроцесса.ТипРеквизита;
		
		Если ТипРеквизитаСтроки=Справочники.КП_СписокМетаданных.Булево Тогда
			Если СтрокаТаблицы.ВидСравнения=Перечисления.КП_ВидыСравнения.НеРавно 
				ИЛИ СтрокаТаблицы.ВидСравнения=Перечисления.КП_ВидыСравнения.Равно 
			Тогда
				Возврат Истина;
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='For props ""';ru='Для реквизита ""'")+СокрЛП(СтрокаТаблицы.РеквизитПроцесса)+НСтр("ru='"" указан не верный тип сравнения.';"));
				Возврат Ложь;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ТипРеквизитаСтроки.Родитель<>Справочники.КП_СписокМетаданных.Числа Тогда
			Если СтрокаТаблицы.ВидСравнения=Перечисления.КП_ВидыСравнения.Больше
				ИЛИ СтрокаТаблицы.ВидСравнения=Перечисления.КП_ВидыСравнения.БольшеИлиРавно
				ИЛИ СтрокаТаблицы.ВидСравнения=Перечисления.КП_ВидыСравнения.Меньше
				ИЛИ СтрокаТаблицы.ВидСравнения=Перечисления.КП_ВидыСравнения.МеньшеИлиРавно
			Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='For props ""';ru='Для реквизита ""'")+СокрЛП(СтрокаТаблицы.РеквизитПроцесса)+НСтр("ru='"" указан не верный тип сравнения.';"));
				Возврат Ложь;
			Иначе
				Возврат Истина;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПодпроцессПереопределитьТекстПриИзменении(Элемент)
	Элементы.ГруппаТекстПодпроцесса.Видимость=Объект.ПодпроцессПереопределитьТекст;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагПодпроцессПереопределитьРабочуюГруппуПриИзменении(Элемент)
	
	Элементы.ПодпроцессРабочаяГруппа.Видимость=ФлагПодпроцессПереопределитьРабочуюГруппу;	
	
	Если НЕ ФлагПодпроцессПереопределитьРабочуюГруппу Тогда
		Объект.РабочаяГруппа=Неопределено;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТипОбработкиСпискомПриИзменении(Элемент)
	
	Если ФлагМожноМенятьНаименование Тогда
		//изменим наименование обработки
		Если Объект.ТипОбработки=0 Тогда
			Объект.Наименование="Установка реквизитов 1";
			
		ИначеЕсли Объект.ТипОбработки=1 Тогда
			Объект.Наименование="Обработка документов 1";
			
		ИначеЕсли Объект.ТипОбработки=3 Тогда
			Объект.Наименование="Использование ресурсов 1";	
			
		ИначеЕсли Объект.ТипОбработки=2 Тогда
			Объект.Наименование="Программная обработка 1";	
			
		ИначеЕсли Объект.ТипОбработки=4 Тогда
			Объект.Наименование="Таймер 1";
			Объект.ОбработкаТипДаты=3;
			
		ИначеЕсли Объект.ТипОбработки=5 Тогда
			Объект.Наименование="Изменение точки 1";			
			
		ИначеЕсли Объект.ТипОбработки=6 Тогда
			Объект.Наименование="Отправка сообщения 1";			
			ОбновитьСписокОсновныхИсполнителей();
			УстановитьВидимостьОтправкиСообщений();
			
		ИначеЕсли Объект.ТипОбработки=7 Тогда
			Объект.Наименование="Установка показателя KPI 1";			
			
		ИначеЕсли Объект.ТипОбработки=9 Тогда
			Объект.Наименование="Изменение документов 1";						
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() И Объект.ТипОбработки=6 Тогда
		ОбновитьСписокОсновныхИсполнителей();
		УстановитьВидимостьОтправкиСообщений();
		Объект.ОтправкаСообщенияВСистему=Истина;		
	КонецЕсли;
	
	УстановитьОтображениеОбработки();
	
	Модифицированность=Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТочкаИзмененияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка=Ложь;

	ПараметрыОтбора=Новый Структура("ВладелецТочки", Объект.ВладелецТочки);
	ПараметрыОтбора.Вставить("ДействиеТипФормыЗадач", 0); //точка действия
	ПараметрыОтбора.Вставить("ТипТочки", ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Действие"));
	ПараметрыОтбора.Вставить("СсылкаИсключение", Объект.Ссылка);
	
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru='Выберите изменяемую точку'; en='Select modifing point;'"));
	
	ОткрытьФорму("Справочник.КП_ТочкиПроцессов.ФормаВыбора", ПараметрыФормы,,,,, Новый
			ОписаниеОповещения("Оповещение_ОткрытьФормуИзменения", ЭтотОбъект, Объект));		

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытьФормуИзменения(РезультатВыбора, Объект) Экспорт
	Если РезультатВыбора=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Объект.УсловиеТочкаКонтроля=РезультатВыбора;
		
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаИсполнителейПриИзменении(Элемент)
	ОбновитьСписокРабочейГруппы();
КонецПроцедуры

Процедура ОбновитьСписокРабочейГруппы()
	СписокРабочаяГруппа.Параметры.УстановитьЗначениеПараметра("РабочаяГруппа", Объект.РабочаяГруппа);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия="ТребуемыйРезультат" И Параметр="Записан" И  Объект.ДействиеОсновнойОтчетИсполнителей=Источник Тогда
		ОбновитьОписаниеОсновногоОтчета();
		
	ИначеЕсли ИмяСобытия="КП_РабочаяГруппаИзменена" И Параметр=Объект.РабочаяГруппа Тогда
		ОбновитьСписокРабочейГруппы();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДействиеИспользоватьНаименованиеПроцессаПриИзменении(Элемент)
	УстановитьОтображениеНаименованияЗадач();
	
КонецПроцедуры

Процедура УстановитьОтображениеНаименованияЗадач()
	ИспользуетсяНаименованиеПроцесса=(Объект.ДействиеИспользоватьНаименованиеПроцесса=1);
	
	Элементы.НаименованиеПроцесса.Видимость=ИспользуетсяНаименованиеПроцесса;
	
	Если ИспользуетсяНаименованиеПроцесса Тогда
		НаименованиеПроцесса=СокрЛП(Объект.ВладелецТочки.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОсновныхИсполнителейПроцессаПриАктивизацииСтроки(Элемент)
	
	СтрокаИсполнителя=Элементы.СписокОсновныхИсполнителейПроцесса.ТекущиеДанные;
	
	Если СтрокаИсполнителя=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	УстановитьДанныеПользователя(СтрокаИсполнителя, Ложь);
	

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеПользователя(СтрокаИсполнителя, ЭтоСписокИсполнителейТочки)
		
	ТочкаАдресации=СтрокаИсполнителя.ТочкаАдресации;
	
	СтрокаКонтактныхДанных=КП_ОбщееСервер.ПолучитьСтрокуКонтактныхДанныхПользователя(ТочкаАдресации);
	
	Если НЕ КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ТочкаАдресации) Тогда
		//это ролевая адресация
		ДвоичныеДанныеФотографии=БиблиотекаКартинок.КП_РолеваяАдресация.ПолучитьДвоичныеДанные();
		ИсполнительАдресФотографии=ПоместитьВоВременноеХранилище(ДвоичныеДанныеФотографии, УникальныйИдентификатор);
		ИсполнительТекущиеДанные=СтрокаКонтактныхДанных;
		
		Возврат;
		
	КонецЕсли;
		
	ДвоичныеДанныеФотографии=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ТочкаАдресации);
	
	Если НЕ ДвоичныеДанныеФотографии=Неопределено Тогда
		ИсполнительАдресФотографии=ПоместитьВоВременноеХранилище(ДвоичныеДанныеФотографии, УникальныйИдентификатор);
		
	Иначе
		ИсполнительАдресФотографии="";
		
	КонецЕсли;
	
	Если ЭтоТочкаЭкземпляраКБП Тогда
		ИднИсполнителя=СтрокаИсполнителя.ИднИсполнителя;
		СтрокаТекущихРезультатовИсполнителя=""; //аДОЗадачиПроцессов.ПолучитьСтрокуТекущихРезультатовИсполнителя(Объект.ВладелецТочки, ИднИсполнителя);

	Иначе
		СтрокаТекущихРезультатовИсполнителя="";
	КонецЕсли;
	
	ИсполнительТекущиеДанные=СтрокаКонтактныхДанных+?(ПустаяСтрока(СтрокаКонтактныхДанных), Символы.ПС, "")+СтрокаТекущихРезультатовИсполнителя;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиТочкиПриАктивизацииСтроки(Элемент)
	
	СтрокаИсполнителя=Элементы.ИсполнителиТочки.ТекущиеДанные;
	
	Если СтрокаИсполнителя=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	УстановитьДанныеПользователя(СтрокаИсполнителя, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзменитьТочкуДействияПриИзменении(Элемент)
	Если Объект.ОбработкаИзменитьТочкуДействия=1 Тогда
		ПодпроцессТекстПроцессаФорматируемый=Новый ФорматированныйДокумент;
	КонецЕсли;
	
	УстановитьОтображениеОбработки();
	
КонецПроцедуры

&НаКлиенте
Процедура РесурсыИсточникПриИзменении(Элемент)
	УстановитьИсточникРесурсов();
	
КонецПроцедуры

Процедура УстановитьИсточникРесурсов()
	Элементы.РесурсыПредприятия.Видимость=(Объект.ОбработкаРесурсыИсточник=0);
	Элементы.РесурсыИспользоватьРеквизит.Видимость=(Объект.ОбработкаРесурсыИсточник=1);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоИсполнителейТочкиАдресации()
	
	ТочкаАдресации=Объект;
	ИсточникИсполнителей=ИсточникИсполнителейЧисло;
	
	Если ИсточникИсполнителей=0 Тогда
		//определяется в бизнес-процессе
		Если ВидПроцесса.ИсточникОсновныхИсполнителей=0 Тогда
			//список бизнес-процесса
			КоличествоИсполнителей=ВидПроцесса.ОсновныеИсполнители.Количество();
			//список может быть сейчас пустым, поэтому вернем 1, дальнейшая проверка будет непосредственно
			//в момент выполнения процесса
			КоличествоИсполнителей=Макс(КоличествоИсполнителей, 1);
			
		Иначе
			//рабочая группа
			КоличествоИсполнителей=ВидПроцесса.РабочаяГруппаОсновныхИсполнителей.Сотрудники.Количество();
			
		КонецЕсли;
		
	ИначеЕсли ИсточникИсполнителей=1 Тогда
		//фиксированный список
		КоличествоИсполнителей=ТочкаАдресации.ИсполнителиТочки.Количество();
		
	ИначеЕсли ИсточникИсполнителей=5 Тогда
		//рабочая группа
		КоличествоИсполнителей=ТочкаАдресации.РабочаяГруппа.Сотрудники.Количество();
		
	Иначе
		//2 - автор процесса, 3 - контролер, 4- исполнитель в реквизите
		КоличествоИсполнителей=1;
		
	КонецЕсли;
	
	Возврат КоличествоИсполнителей;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьСрокВыполнения(Команда)
	
	Если Объект.ИсполнителиТочки.Количество()=0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Please fill out the list of users.';ru='Сначала заполните список исполнителей.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_СкопироватьСрокВыполненияЗавершение", ЭтотОбъект), НСтр("ru='Установить всем исполнителям срок выполнения как у '; en='Do you want to set due date as ")+СокрЛП(Объект.ИсполнителиТочки[0].ТочкаАдресации)+"?", РежимДиалогаВопрос.ДаНет, , ,КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СкопироватьСрокВыполненияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    УстановитьСрокИсполненияКакУПервогоИсполнителя();
    
    Состояние(НСтр("en='Period of performance set.';ru='Срок исполнения установлен.'"));

КонецПроцедуры

Процедура УстановитьСрокИсполненияКакУПервогоИсполнителя()
	
	Если Объект.ИсполнителиТочки.Количество()=0 Тогда
		Возврат;
		
	КонецЕсли;
	
	СтрокаПервогоИсполнителя=Объект.ИсполнителиТочки[0];
	
	Для НомерСтроки=1 По Объект.ИсполнителиТочки.Количество()-1 Цикл
		СтрокаТЧ=Объект.ИсполнителиТочки[НомерСтроки];
		СтрокаТЧ.СрокВыполненияЧасов=СтрокаПервогоИсполнителя.СрокВыполненияЧасов;
		СтрокаТЧ.НеИспользоватьГрафикРаботы=СтрокаПервогоИсполнителя.НеИспользоватьГрафикРаботы;
		СтрокаТЧ.СрокВыполненияДатаВремя=СтрокаПервогоИсполнителя.СрокВыполненияДатаВремя;
		СтрокаТЧ.СрокВыполненияТекст=СтрокаПервогоИсполнителя.СрокВыполненияТекст;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьТребуемыйРезультатФайл()
	
	//сначала просмотрим общий отчет точки действия
	ПроверяемыйТипОтчета=Объект.ДействиеОсновнойОтчетИсполнителей;
	Если КП_ЗадачиПроцессов.ТребуемыйРезультатФайл(ПроверяемыйТипОтчета) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ИсточникИсполнителейЧисло=0 Тогда
		//просмотрим список исполнителей всего владельца
		Для Каждого СтрокаИсполнителей Из Объект.ВладелецТочки.ОсновныеИсполнители Цикл
			ПроверяемыйТипОтчета=СтрокаИсполнителей.ОтчетИсполнителя;
			Если ЗначениеЗаполнено(ПроверяемыйТипОтчета) Тогда
				Если КП_ЗадачиПроцессов.ТребуемыйРезультатФайл(ПроверяемыйТипОтчета) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИсточникИсполнителейЧисло=1 Тогда
		//просмотрим список исполнителей точки действия	
		Для Каждого СтрокаИсполнителей Из Объект.ИсполнителиТочки Цикл
			ПроверяемыйТипОтчета=СтрокаИсполнителей.ОтчетИсполнителя;
			Если ЗначениеЗаполнено(ПроверяемыйТипОтчета) Тогда
				Если КП_ЗадачиПроцессов.ТребуемыйРезультатФайл(ПроверяемыйТипОтчета) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//файл не требуется
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ИсточникПолучателейСообщенияПриИзменении(Элемент)
	
	Если ИсточникИсполнителейЧисло=1 Тогда
		//переключились на фиксированный список
		Объект.ИсполнителиТочки.Очистить();
		
	ИначеЕсли ИсточникИсполнителейЧисло=2 Тогда
		//переключились на переменные
		Если НЕ ЗначениеЗаполнено(Контролер) Тогда
			ИсполнительПеременнаяПроцессаЧисло=1;
		КонецЕсли;
		
		//ИсполнительПеременнаяПроцессаЧислоПриИзменении(Неопределено);
		
	КонецЕсли;
	
	УстановитьОтображениеИсточникаПолучателей();
	
	Модифицированность=Истина;

КонецПроцедуры

Процедура УстановитьОтображениеИсточникаПолучателей()
	
	//установим видимость страниц
	Элементы.СтраницаОсновныеПолучатели.Видимость=(ИсточникИсполнителейЧисло=0);
	Элементы.СтраницаСписокПолучателейТочки.Видимость=(ИсточникИсполнителейЧисло=1);
	Элементы.СтраницаРабочаяГруппаПолучателей.Видимость=(ИсточникИсполнителейЧисло=5);
	
	Если ИсточникИсполнителейЧисло=2 ИЛИ ИсточникИсполнителейЧисло=3 ИЛИ ИсточникИсполнителейЧисло=4 Тогда
		Элементы.СтраницаПолучательИзРеквизита.Видимость=Истина;
	Иначе
		Элементы.СтраницаПолучательИзРеквизита.Видимость=Ложь;
	КонецЕсли;
	
	Если ИсточникИсполнителейЧисло=0 Тогда
		//динамический список
		
		Элементы.ДействиеНеУчитыватьЗаместителейПолучателей.Заголовок=НСтр("ru='Не учитывать заместителей получателей'; en='Do not use deputy recipients';");
		
	ИначеЕсли ИсточникИсполнителейЧисло=1 Тогда
		//фиксированный список
		Элементы.ДействиеНеУчитыватьЗаместителейПолучателей.Заголовок=НСтр("ru='Не учитывать заместителей получателей'; en='Do not use deputy recipients';");
		
	ИначеЕсли ИсточникИсполнителейЧисло=5 Тогда		
		//рабочая группа
		ОбновитьСписокРабочейГруппы();
		
	Иначе //2, 3, 4
		//переменные процесса
		УстановитьОтображениеПеременныхПолучателя();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтображениеПеременныхПолучателя()
	
	//установим доступность элементов
	
	Элементы.НадписьАвторБизнесПроцесса.Доступность=(ИсполнительПеременнаяПроцессаЧисло=0);
	Элементы.НадписьКонтролерБизнесПроцесса.Доступность=(ИсполнительПеременнаяПроцессаЧисло=1);
	Элементы.РеквизитСПолучателем.Доступность=(ИсполнительПеременнаяПроцессаЧисло=2);
	
	//установим картинки
	
	Если ИсполнительПеременнаяПроцессаЧисло=0 Тогда
		//автор
		Элементы.КартинкаПеременнойПроцесса.Картинка=БиблиотекаКартинок.КП_АвторПроцесса;
		Элементы.ДействиеНеУчитыватьЗаместителейПолучателей.Заголовок=НСтр("ru='Не учитывать заместителей инициатора процесса'; en='Do not use deputy initiator';");

	ИначеЕсли ИсполнительПеременнаяПроцессаЧисло=1 Тогда
		//контролер
		Элементы.КартинкаПеременнойПроцесса.Картинка=БиблиотекаКартинок.КП_КонтролерПроцесса;
		Элементы.ДействиеНеУчитыватьЗаместителейПолучателей.Заголовок=НСтр("ru='Не учитывать заместителей контролера'; en='Do not use deputy initiator';");
		
	ИначеЕсли ИсполнительПеременнаяПроцессаЧисло=2 Тогда
		//реквизит
		Элементы.КартинкаПеременнойПроцесса.Картинка=БиблиотекаКартинок.КП_ПеременнаяПроцесса;
		Элементы.ДействиеНеУчитыватьЗаместителейПолучателей.Заголовок=НСтр("ru='Не учитывать заместителей получателя'; en='Do not use deputy initiator';");
		
	Иначе
		Элементы.КартинкаПеременнойПроцесса.Картинка=Новый Картинка;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контролер) Тогда
		Если ЭтоТочкаЭкземпляраКБП Тогда
			Элементы.НадписьКонтролерБизнесПроцессаСообщение.Заголовок=НСтр("ru='<не указан>'; en='<n/a>';");
		Иначе
			Элементы.НадписьКонтролерБизнесПроцессаСообщение.Заголовок=НСтр("ru='<может быть указан в экземпляре процесса>'; en='<can be specified in process>';");
		КонецЕсли;
		
	Иначе
		Элементы.НадписьКонтролерБизнесПроцессаСообщение.Заголовок=Контролер;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Автор) Тогда
		Если ЭтоТочкаЭкземпляраКБП Тогда
			Элементы.НадписьАвторБизнесПроцессаСообщение.Заголовок=НСтр("ru='<не указан>'; en='<n/a>';");
		Иначе
			Элементы.НадписьАвторБизнесПроцессаСообщение.Заголовок=НСтр("ru='<указывается в экземпляре процесса>'; en='<will be specified in process>';");
		КонецЕсли;
			
	Иначе
		Элементы.НадписьАвторБизнесПроцессаСообщение.Заголовок=Автор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзменении(Элемент)
		
	Если ИсполнительПеременнаяПроцессаЧисло=0 И ЭтоТочкаЭкземпляраКБП И НЕ ЗначениеЗаполнено(Автор) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("Оповещение_ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзмененииЗавершениеПродолжение", ЭтотОбъект), НСтр("en='Business process initiator is not specified.';ru='Инициатор бизнес-процесса не указан.'"));
        Возврат;
		
	ИначеЕсли ИсполнительПеременнаяПроцессаЧисло=1 И ЭтоТочкаЭкземпляраКБП И НЕ ЗначениеЗаполнено(Контролер) Тогда
		Если ЭтоТочкаЭкземпляраКБП Тогда
			ТекстПредупреждения="Контролер бизнес-процесса не указан!";
		Иначе
			ТекстПредупреждения="Контролер бизнес-процесса не указан в настройке вида!";
		КонецЕсли;
		
		ПоказатьПредупреждение(Новый ОписаниеОповещения("Оповещение_ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзмененииЗавершение", ЭтотОбъект), ТекстПредупреждения);
        Возврат;
		
	КонецЕсли;
	
	ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзмененииФрагмент1();
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзмененииЗавершениеПродолжение(ДополнительныеПараметры) Экспорт
    
    ИсполнительПеременнаяПроцессаЧисло=1;
    
    
    ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзмененииФрагмент1();

КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзмененииФрагмент1()
    
    ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
    
    ИсполнительПеременнаяПроцессаЧисло=2;
    
    
    ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПеременнаяПроцессаЧислоСообщениеПриИзмененииФрагмент()
    
    УстановитьОтображениеПеременныхПолучателя();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТекстСообщенияПодробнееНажатие(Элемент)
	ПоказатьПредупреждение(Неопределено, НСтр("en='In the subject and body of the message, you can use the following tags:';ru='В теме и тексте сообщения можно использовать следующие теги:'")+Символы.ПС+ПолучитьТекстОписанияТегов(), 60, КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

Функция ПолучитьТекстОписанияТегов()
	ТекстТегов=
		"   <БизнесПроцесс> - описание ссылки на бизнес-процесс (с номером и датой)
		|   <БизнесПроцесс.Наименование> - наименование бизнес-процесса
		|   <БизнесПроцесс.Автор> - инициатор бизнес-процесса
		|   <БизнесПроцесс.Контролер> - контролер бизнес-процесса
		|   <БизнесПроцесс.Номер> - дата бизнес-процесса и аналогичные теги
		|    Также можно использовать <Реквизит.ИмяРеквизита> для получения переменных
		|	экземпляра бизнес-процесса, где ИмяРеквизита это имя
		|	реквизита бизнес-процесса
		|	Для доступа к данным прилагаемых документов и прочих объектов используйте
		|	теги вида <Приложение[N]> где N порядковый номер объекта/документа 
		|	бизнес-процесса начиная с ""0"".";
		
	Возврат ТекстТегов;
		
КонецФункции

&НаКлиенте
Процедура ОтправкаСообщенияВСистемуПриИзменении(Элемент)
	УстановитьВидимостьОтправкиСообщений();
	
КонецПроцедуры

Процедура УстановитьВидимостьОтправкиСообщений()

	Элементы.ОтправкаСообщенияРегламентнымЗаданиемЧисло.Видимость=(Объект.ОтправкаСообщенияПоЭлПочте ИЛИ Объект.ОтправкаСообщенияВJabber) 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаСообщенияПоЭлПочтеПриИзменении(Элемент)
	УстановитьВидимостьОтправкиСообщений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаСообщенияВJabberПриИзменении(Элемент)
	УстановитьВидимостьОтправкиСообщений();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОсновныхПолучателейПроцессаПриАктивизацииСтроки(Элемент)
	
	СтрокаИсполнителя=Элементы.СписокОсновныхПолучателейПроцесса.ТекущиеДанные;
	
	Если СтрокаИсполнителя=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	УстановитьДанныеПолучателя(СтрокаИсполнителя, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СписокОсновныхПолучателейПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	СтрокаТЧ=Элемент.ТекущиеДанные;
	
	ОткрытьФормуАдресацииДляДинамическогоСписка(СтрокаТЧ);

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиТочкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуАдресации(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиТочкиПриАктивизацииСтроки(Элемент)
		
	СтрокаИсполнителя=Элементы.ПолучателиТочки.ТекущиеДанные;
	
	Если СтрокаИсполнителя=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	УстановитьДанныеПолучателя(СтрокаИсполнителя, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеПолучателя(СтрокаИсполнителя, ЭтоСписокИсполнителейТочки)
		
	ТочкаАдресации=СтрокаИсполнителя.ТочкаАдресации;
	
	СтрокаКонтактныхДанных=КП_ОбщееСервер.ПолучитьСтрокуКонтактныхДанныхПользователя(ТочкаАдресации);
	
	Если НЕ КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ТочкаАдресации) Тогда
		//это ролевая адресация
		ДвоичныеДанныеФотографии=БиблиотекаКартинок.КП_РолеваяАдресация.ПолучитьДвоичныеДанные();
		ИсполнительАдресФотографии=ПоместитьВоВременноеХранилище(ДвоичныеДанныеФотографии, УникальныйИдентификатор);
		ИсполнительТекущиеДанные=СтрокаКонтактныхДанных;
		
		Возврат;
		
	КонецЕсли;
		
	ДвоичныеДанныеФотографии=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ТочкаАдресации);
	
	Если НЕ ДвоичныеДанныеФотографии=Неопределено Тогда
		ИсполнительАдресФотографии=ПоместитьВоВременноеХранилище(ДвоичныеДанныеФотографии, УникальныйИдентификатор);
		
	Иначе
		ИсполнительАдресФотографии="";
		
	КонецЕсли;
	
	Если ЭтоТочкаЭкземпляраКБП Тогда
		ИднИсполнителя=СтрокаИсполнителя.ИднИсполнителя;
		СтрокаТекущихРезультатовИсполнителя=""; //аДОЗадачиПроцессов.ПолучитьСтрокуТекущихРезультатовИсполнителя(Объект.ВладелецТочки, ИднИсполнителя);

	Иначе
		СтрокаТекущихРезультатовИсполнителя="";
	КонецЕсли;
	
	ИсполнительТекущиеДанные=СтрокаКонтактныхДанных+?(ПустаяСтрока(СтрокаКонтактныхДанных), Символы.ПС, "")+СтрокаТекущихРезультатовИсполнителя;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПроцессаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	////отменим стандартную функцию открытия
	//Отказ=Истина;
	//
	////откроем форму выбора реквизита
	//ПараметрыФормы=Новый Структура("Владелец, РежимВыбора, МножественныйВыбор", ВидПроцесса, Истина, Ложь);
	//
	//ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_РеквизитыПроцессаПередНачаломДобавленияЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	//
	//
	//
	//
	//
	//
	Если Параметры.Ключ.Пустая() Тогда
		СтандартнаяОбработка=Ложь;	
		ПоказатьПредупреждение(Неопределено, НСтр("en='Please write down the item first.';ru='Сначала запишите элемент.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Отказ=Истина; //обычный режим добавления строкой отключаем
	
	//откроем форму нового реквизита
	ПараметрыФормы=Новый Структура("Владелец, РежимВыбора, МножественныйВыбор", ВидПроцесса, Истина, Ложь);
	ПараметрыЗаполнения=Новый Структура("Владелец", Объект.Ссылка);

	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);

	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_РеквизитыПроцессаПередНачаломДобавленияЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_РеквизитыПроцессаПередНачаломДобавленияЗавершение(РезультатОткрытия, ДополнительныеПараметры) Экспорт
    
    Если НЕ ЗначениеЗаполнено(РезультатОткрытия) Тогда
        Возврат;
        
    КонецЕсли;
    
    МассивСтрок=Объект.РеквизитыПроцесса.НайтиСтроки(Новый Структура("РеквизитПроцесса", РезультатОткрытия));
    
    Если МассивСтрок.Количество()>0 Тогда
        Состояние(НСтр("en='Variable ""';ru='Реквизит ""'")+СокрЛП(РезультатОткрытия)+НСтр("ru='"" уже присутствует в списке.'; en='"" is already in list.';"));
        Возврат;
        
    КонецЕсли;
    
    ДобавитьРеквизитПроцесса(РезультатОткрытия);

КонецПроцедуры

&НаСервере
Процедура ДобавитьРеквизитПроцесса(РеквизитПроцесса)
	
	СтрокаТЧ=Объект.РеквизитыПроцесса.Добавить();
	СтрокаТЧ.РеквизитПроцесса=РеквизитПроцесса;
	СтрокаТЧ.НаименованиеВФорме=РеквизитПроцесса.НаименованиеВФорме;
	СтрокаТЧ.НаименованиеВФормеИностранное=РеквизитПроцесса.НаименованиеВФормеИностранное;
	СтрокаТЧ.Обязательный=РеквизитПроцесса.Обязательный;
	СтрокаТЧ.ТолькоПросмотр=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСрокИсполненияДляРабочейГруппы(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.РабочаяГруппа) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Please set a Workgroup.';ru='Сначала укажите рабочую группу.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	СтрокаРГ=Неопределено;
	
	Если Объект.ИсполнителиТочки.Количество()=1 Тогда
		СтрокаРГ=Объект.ИсполнителиТочки[0];
		Если СтрокаРГ.ТочкаАдресации=Неопределено Тогда
			//это специальный режим хранения данных рабочей группы в первой строке
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаРГ=Неопределено ИЛИ ЗначениеЗаполнено(СтрокаРГ.ТочкаАдресации) Тогда
		//создадим специальную строку для хранения данных рабочей группы
		Объект.ИсполнителиТочки.Очистить();
		СтрокаРГ=Объект.ИсполнителиТочки.Добавить();
		СтрокаРГ.ТочкаАдресации=Неопределено;
			
	КонецЕсли;
		
	СтрокаТЧ=Объект.ИсполнителиТочки[0];
	//установим параметры срока исплонения для рабочей группы
	
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("РабочаяГруппа", Объект.РабочаяГруппа);
	
	ПараметрыЗаполнения.Вставить("ТочкаАдресации", Неопределено);
	ПараметрыЗаполнения.Вставить("ОтчетИсполнителя", СтрокаРГ.ОтчетИсполнителя);
	ПараметрыЗаполнения.Вставить("СрокВыполненияЧасов", СтрокаРГ.СрокВыполненияЧасов);
	ПараметрыЗаполнения.Вставить("СрокВыполненияДатаВремя", СтрокаРГ.СрокВыполненияДатаВремя);
	ПараметрыЗаполнения.Вставить("ИндивидуальныйТекстЗадания", СтрокаРГ.ИндивидуальныйТекстЗадания);
	ПараметрыЗаполнения.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаРГ.ИндивидуальноеНаименованиеЗадания);
	ПараметрыЗаполнения.Вставить("НеИспользоватьГрафикРаботы", СтрокаРГ.НеИспользоватьГрафикРаботы);
	ПараметрыЗаполнения.Вставить("ИднИсполнителя", СтрокаРГ.ИднИсполнителя);
	
	ПараметрыЗаполнения.Вставить("ТолькоПросмотр", Ложь);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("ПоказыватьПараметрыЗадачи", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Параметры рабочей группы'; en='Workgroup parameters';"));

	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_УстановитьСрокИсполненияДляРабочейГруппыЗавершение", ЭтотОбъект, Новый Структура("СтрокаРГ, СтрокаТЧ", СтрокаРГ, СтрокаТЧ)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_УстановитьСрокИсполненияДляРабочейГруппыЗавершение(СтруктураРезультата, ДополнительныеПараметры) Экспорт
    
    СтрокаРГ = ДополнительныеПараметры.СтрокаРГ;
    СтрокаТЧ = ДополнительныеПараметры.СтрокаТЧ;
    
    Если ТолькоПросмотр Тогда
        Возврат;
        
    КонецЕсли;
    
    Если СтруктураРезультата=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    //обновим данные
    СтрокаРГ.ТочкаАдресации=Неопределено;
    СтрокаРГ.ОтчетИсполнителя=СтруктураРезультата.ОтчетИсполнителя;	
    СтрокаРГ.СрокВыполненияЧасов=СтруктураРезультата.СрокВыполненияЧасов;	
    СтрокаРГ.СрокВыполненияДатаВремя=СтруктураРезультата.СрокВыполненияДатаВремя;	
    СтрокаРГ.ИндивидуальныйТекстЗадания=СтруктураРезультата.ИндивидуальныйТекстЗадания;	
    СтрокаРГ.ИндивидуальноеНаименованиеЗадания=СтруктураРезультата.ИндивидуальноеНаименованиеЗадания;	
    СтрокаРГ.НеИспользоватьГрафикРаботы=СтруктураРезультата.НеИспользоватьГрафикРаботы;	
    СтрокаРГ.ИднИсполнителя=СтруктураРезультата.ИднИсполнителя;	
    
    СтрокаРГ.СрокВыполненияТекст=КП_ОбщееКлиент.ПолучитьПредставлениеСрокаВыполнения(СтрокаТЧ.СрокВыполненияЧасов, СтрокаТЧ.СрокВыполненияДатаВремя, СтруктураРезультата.НеИспользоватьГрафикРаботы);

КонецПроцедуры

&НаКлиенте
Процедура СписокШаблоновПечатиЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
   	Отказ=Истина;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СписокШаблоновПечатиЗадачиПередНачаломДобавленияЗавершение", ЭтотОбъект), НСтр("en='Please write down the type of process. Do you want to save it now?';ru='Сначала запишите вид процесса. Записать сейчас?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	СписокШаблоновПечатиЗадачиПередНачаломДобавленияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СписокШаблоновПечатиЗадачиПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    Иначе
        Попытка
            Записать();
        Исключение
            КП_ОбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
            Возврат;
        КонецПопытки;
        
    КонецЕсли;
    
    
    СписокШаблоновПечатиЗадачиПередНачаломДобавленияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СписокШаблоновПечатиЗадачиПередНачаломДобавленияФрагмент()
    
    Перем ПараметрыФормы, Результат, Форма;
    
    ПараметрыФормы = Новый Структура("ВыборШаблона", Истина);
    ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_СписокШаблоновПечатиЗадачиПередНачаломДобавленияФрагментЗавершение", ЭтотОбъект, Новый Структура("Результат", Результат)));

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СписокШаблоновПечатиЗадачиПередНачаломДобавленияФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат=Неопределено Тогда
        Возврат;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРеквизитСИсполнителемИнформацияНажатие(Элемент)
	ТекстСообщения="Переменная процесса может быть с типом ""Справочники\Пользователь"" или ""Справочники\Рабочая группа""
				|Задачи будут сформированы указанным в переменной сотрудникам.";
				
	//проверим допустимость выбранного реквизита
	Если (Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Действие")) 
		ИЛИ (Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Обработка") И Объект.ТипОбработки=5) //изменение точки
		Тогда
			ТекстСообщения="Переменная процесса может быть с типом ""Справочники\Пользователь"" или ""Справочники\Рабочая группа""
					|Задачи будут сформированы указанным в переменной сотрудникам.";
		
	ИначеЕсли Объект.ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Обработка") Тогда
		Если Объект.ТипОбработки=6 Тогда //отправка сообщения
			ТекстСообщения="Переменная процесса может быть с типом ""Справочники\Пользователь"" или ""Строка"" (содержащая эл. адрес)";
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказатьПредупреждение(Неопределено, ТекстСообщения, 60, КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДействиеТегиНажатие(Элемент)
	ПоказатьПредупреждение(Неопределено, НСтр("en='The name of the text and the tasks you can use the following tags:';ru='В наименовании и тексте задач можно использовать следующие теги:'")+Символы.ПС+ПолучитьТекстОписанияТегов(), 60, КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

&НаКлиенте
Процедура ПоказателиKPIПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		//Элемент.ТекущиеДанные.Сценарий=ПредопределенноеЗначение("Справочник.аKPIСценарии.Факт");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловияВыбораЗначениеРеквизитаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаТЧ=Элементы.УсловияВыбора.ТекущиеДанные;
	РеквизитПроцесса=СтрокаТЧ.РеквизитПроцесса;
	
	Если НЕ КП_ОбщееСервер.ЭтоРеквизитДополнительныхСвойств(РеквизитПроцесса) Тогда
		//обычное открытие значения
		Возврат;
	Иначе
		//если реквизит имеет тип свойства, то будем открывать отдельную форму
		СтандартнаяОбработка=Ложь;
		
		ПараметрыОтбора=Новый Структура("Владелец", КП_ОбщееСервер.ПолучитьСвязьРеквизитаСПВХ(РеквизитПроцесса));
		ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
		
		ФормаСвойств=ПолучитьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора", ПараметрыФормы);
		
		ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора", ПараметрыФормы,,,,, Новый
			ОписаниеОповещения("Оповещение_ЗакрытиеФормыЗначениеСвойствоДопРеквизита", ЭтотОбъект, СтрокаТЧ));		
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыЗначениеСвойствоДопРеквизита(РезультатЗакрытия, СтрокаТЧ) Экспорт
		
	Если РезультатЗакрытия=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ.ЗначениеРеквизита=РезультатЗакрытия;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСрокИсполненияДляПеременнойПроцесса(Команда)
	
	СтрокаПеременной=Неопределено;
	
	Если Объект.ИсполнителиТочки.Количество()=1 Тогда
		СтрокаПеременной=Объект.ИсполнителиТочки[0];
		Если СтрокаПеременной.ТочкаАдресации=Неопределено Тогда
			//это специальный режим хранения данных переменной первой строке
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаПеременной=Неопределено ИЛИ ЗначениеЗаполнено(СтрокаПеременной.ТочкаАдресации) Тогда
		//создадим специальную строку для хранения данных переменной исполнителя
		Объект.ИсполнителиТочки.Очистить();
		СтрокаПеременной=Объект.ИсполнителиТочки.Добавить();
		СтрокаПеременной.ТочкаАдресации=Неопределено;
			
	КонецЕсли;
		
	СтрокаТЧ=Объект.ИсполнителиТочки[0];
	//установим параметры срока исплонения для переменной
	
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыФормы=Новый Структура;
	Если ИсполнительПеременнаяПроцессаЧисло=0 Тогда
		ИсполнительПеременнаяПроцессаТекст="Инициатор бизнес-процесса";
	ИначеЕсли ИсполнительПеременнаяПроцессаЧисло=1 Тогда
		ИсполнительПеременнаяПроцессаТекст="Контролер бизнес-процесса";
	Иначе
		ИсполнительПеременнаяПроцессаТекст=СокрЛП(Объект.РеквизитСИсполнителем);
		Если ПустаяСтрока(ИсполнительПеременнаяПроцессаТекст) Тогда
			ИсполнительПеременнаяПроцессаТекст="<Переменная процесса>";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ИсполнительПеременная", ИсполнительПеременнаяПроцессаТекст);
	
	ПараметрыЗаполнения.Вставить("ТочкаАдресации", Неопределено);
	ПараметрыЗаполнения.Вставить("ОтчетИсполнителя", СтрокаПеременной.ОтчетИсполнителя);
	ПараметрыЗаполнения.Вставить("СрокВыполненияЧасов", СтрокаПеременной.СрокВыполненияЧасов);
	ПараметрыЗаполнения.Вставить("СрокВыполненияДатаВремя", СтрокаПеременной.СрокВыполненияДатаВремя);
	ПараметрыЗаполнения.Вставить("ИндивидуальныйТекстЗадания", СтрокаПеременной.ИндивидуальныйТекстЗадания);
	ПараметрыЗаполнения.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаПеременной.ИндивидуальноеНаименованиеЗадания);
	ПараметрыЗаполнения.Вставить("НеИспользоватьГрафикРаботы", СтрокаПеременной.НеИспользоватьГрафикРаботы);
	ПараметрыЗаполнения.Вставить("ИднИсполнителя", СтрокаПеременной.ИднИсполнителя);
	
	ПараметрыЗаполнения.Вставить("ТолькоПросмотр", Ложь);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("ПоказыватьПараметрыЗадачи", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Параметры исполнителя'; en='Parameters';"));
	
	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_УстановитьСрокИсполненияДляПеременнойПроцессаЗавершение", ЭтотОбъект, Новый Структура("СтрокаПеременной, СтрокаТЧ", СтрокаПеременной, СтрокаТЧ)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_УстановитьСрокИсполненияДляПеременнойПроцессаЗавершение(СтруктураРезультата, ДополнительныеПараметры) Экспорт
    
    СтрокаПеременной = ДополнительныеПараметры.СтрокаПеременной;
    СтрокаТЧ = ДополнительныеПараметры.СтрокаТЧ;
        
    Если ТолькоПросмотр Тогда
        Возврат;
        
    КонецЕсли;
    
    Если СтруктураРезультата=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    //обновим данные
    СтрокаПеременной.ТочкаАдресации=Неопределено;
    СтрокаПеременной.ОтчетИсполнителя=СтруктураРезультата.ОтчетИсполнителя;	
    СтрокаПеременной.СрокВыполненияЧасов=СтруктураРезультата.СрокВыполненияЧасов;	
    СтрокаПеременной.СрокВыполненияДатаВремя=СтруктураРезультата.СрокВыполненияДатаВремя;	
    СтрокаПеременной.ИндивидуальныйТекстЗадания=СтруктураРезультата.ИндивидуальныйТекстЗадания;	
    СтрокаПеременной.ИндивидуальноеНаименованиеЗадания=СтруктураРезультата.ИндивидуальноеНаименованиеЗадания;	
    СтрокаПеременной.НеИспользоватьГрафикРаботы=СтруктураРезультата.НеИспользоватьГрафикРаботы;	
    СтрокаПеременной.ИднИсполнителя=СтруктураРезультата.ИднИсполнителя;	
    
    СтрокаПеременной.СрокВыполненияТекст=КП_ОбщееКлиент.ПолучитьПредставлениеСрокаВыполнения(СтрокаТЧ.СрокВыполненияЧасов, СтрокаТЧ.СрокВыполненияДатаВремя, СтруктураРезультата.НеИспользоватьГрафикРаботы);

КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиТочкиПередНачаломИзменения(Элемент, Отказ)
	Отказ=Истина;
	
	СтрокаТЧ=Элементы.ИсполнителиТочки.ТекущаяСтрока;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуАдресации(СтрокаТЧ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВидЗаполненияРеквизитовПриИзменении(Элемент)
	УстановитьОтображениеЗакладкиУстановкиРеквизитов();
КонецПроцедуры

Процедура УстановитьОтображениеЗакладкиУстановкиРеквизитов()
	Если Объект.ОбработкаВидЗаполненияРеквизитов=0 Тогда
		Элементы.ДекорацияОбработкаРеквизитовПримечаниеЗаполнениеПоОбъектам.Видимость=Ложь;
		Элементы.ОбработкаУстановкаРеквизитовНомерПрилагаемогоОбъекта.Видимость=Ложь;
		Элементы.ОбработкаУстановкаРеквизитовДополнениеОбъекта.Видимость=Ложь;
		Элементы.ОбработкаУстановкаРеквизитовЗначениеРеквизита.Видимость=Истина;
		Элементы.ДекорацияОбработкаРеквизитовПримечаниеПростоеЗаполнение.Видимость=Истина;
	Иначе
		Элементы.ДекорацияОбработкаРеквизитовПримечаниеЗаполнениеПоОбъектам.Видимость=Истина;
		Элементы.ОбработкаУстановкаРеквизитовНомерПрилагаемогоОбъекта.Видимость=Истина;
		Элементы.ОбработкаУстановкаРеквизитовДополнениеОбъекта.Видимость=Истина;
		Элементы.ОбработкаУстановкаРеквизитовЗначениеРеквизита.Видимость=Ложь;
		Элементы.ДекорацияОбработкаРеквизитовПримечаниеПростоеЗаполнение.Видимость=Ложь;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУстановкаРеквизитовНомерПрилагаемогоОбъектаПриИзменении(Элемент)
	СтрокаТЧ=Элементы.ОбработкаУстановкаРеквизитов.ТекущиеДанные;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ.НомерПрилагаемогоОбъекта<1 Тогда
		СтрокаТЧ.НомерПрилагаемогоОбъекта=1;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаУстановкаРеквизитовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Объект.ОбработкаВидЗаполненияРеквизитов=1 Тогда
		//заполнение по списку документов, справочников
		
		СтрокаТЧ=Элементы.ОбработкаУстановкаРеквизитов.ТекущиеДанные;
		Если СтрокаТЧ=Неопределено Тогда
			Возврат;
		КонецЕсли;
	
		СтрокаТЧ.НомерПрилагаемогоОбъекта=1;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УсловияВыбораДополнениеРеквизитаПриИзменении(Элемент)
		
	СтрокаТЧ=Элементы.УсловияВыбора.ТекущиеДанные;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.РеквизитПроцесса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сначала укажите реквизит");
		Возврат;
	КонецЕсли;
	
	Если НЕ КП_ОбщееСервер.ЭтоТипДополнительныйРеквизитСсылочный(СтрокаТЧ.РеквизитПроцесса) Тогда
		ПоказатьПредупреждение(Неопределено, "Выберите ссылочный реквизит (документ, справочник)");
		СтрокаТЧ.ДополнениеРеквизита="";
		Возврат;
	КонецЕсли;
	
	УсловияВыбораРеквизитПроцессаПриИзменении(Неопределено);	

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзменениеДокументовРеквизитПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	//откроем список выбора реквизитов с установленным отбором
	ПараметрыФормы=Новый Структура;
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("Владелец", ВладелецРеквизитов);
	ПараметрыФормы.Вставить("Отбор",  СтруктураОтбора);
	
	ПараметрыФормы.Вставить("РежимВыбора",  Истина);
	
	СтрокаТЧ=Элементы.ОбработкаИзменениеДокументов.ТекущиеДанные;
	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаВыбора", ПараметрыФормы,,,,, Новый
			ОписаниеОповещения("Оповещение_ОткрытьФормуУстановкаРеквизитовПроцесс", ЭтотОбъект, СтрокаТЧ));		
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзменениеДокументовНомерПрилагаемогоОбъектаПриИзменении(Элемент)
	СтрокаТЧ=Элементы.ОбработкаИзменениеДокументов.ТекущиеДанные;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ.НомерПрилагаемогоОбъекта<1 Тогда
		СтрокаТЧ.НомерПрилагаемогоОбъекта=1;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТаймерМинутПриИзменении(Элемент)
	Если ТаймерМинут>=60 Тогда
		ТаймерЧасов=ТаймерЧасов+1;
		ТаймерМинут=0;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Инициализация

СрокПоУмолчаниюЧасов=8;
СрокПоУмолчаниюДата=Неопределено;

#КонецОбласти
