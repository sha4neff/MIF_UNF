#Область ПеременныеМодуля

&НаКлиенте
Перем СостояниеОбъекта; 

&НаКлиенте
Перем СрокПоУмолчаниюЧасов;

&НаКлиенте
Перем СрокПоУмолчаниюДата;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//{Режим открытия окна
	#Если ВебКлиент Тогда
		ЭтоВебКлиент=Истина;
	#Иначе
		ЭтоВебКлиент=Ложь;
	#КонецЕсли
	//}	
	
	ФлагИспользованиеПроектов=ПолучитьФункциональнуюОпцию("УчетПоПроектам");
    	
	Если Параметры.Ключ.Пустая() Тогда

		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			КопируемыйВид=Параметры.ЗначениеКопирования;
		Иначе
			КопируемыйВид=Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КопируемыйВид) Тогда
			//копируется
			Объект.Наименование=КопируемыйВид.Наименование+"1";
			
		Иначе
			//не копируется
			Объект.Наименование="Вид бизнес-процесса 1";
			Объект.КопироватьСотрудниковИзДокумента=Истина;	
			Объект.КопироватьПолучателейИзДокумента=Истина;
			Объект.КопироватьОставлятьИсполнителейЗаданныхВНастройкеВида=Истина;	
			ЗаполнитьСписокНаименованийЭлементовФормы();
			
		КонецЕсли;
		
		Объект.ФорматШаблонаНаименований="{НаименованиеВида}";
							
	Иначе
		УстановитьЗаголовокФормы();
		ОсновнойСписокПараллельноеДействиеЧисло=?(Объект.ДействиеПараллельное, 1, 0);
		
		Если Объект.ПроектыБизнесПроцесса.Количество()>0 Тогда
			ФлагПроектыБизнесПроцессаОткрыты=Истина;
		КонецЕсли;
		
		Если ЕстьОформленныеПодписки(Объект.Ссылка) Тогда
			ФлагОформленныеПодпискиОткрыты=Истина;
			
		КонецЕсли;
				
	КонецЕсли;
	
	Если Параметры.Свойство("УстановитьМодифицированность") И Параметры.УстановитьМодифицированность Тогда
		Модифицированность=Истина;
		
	КонецЕсли;
	
	ТекущийПользователь=Пользователи.ТекущийПользователь();
	
	УстановитьОформлениеОсновныхЭлементовФормы();
	УстановитьОформлениеОсновныхИсполнителей();
	
	КП_ОбщееСервер.УстановитьОтбор(РеквизитыПроцесса, "Владелец", Объект.Ссылка, Истина);
	
	ФлагПоказыватьТолькоНеЗавершенныеЭкземпляры=Истина;
	ОбновитьСписокЭкземпляровПроцесса();
	
	СформироватьСписокФотографий();
	МодифицированСписокИсполнителей=Ложь;
	
	ШрифтПользователя=КП_ОбщееСервер.ПолучитьШрифтПользователя();
	Элементы.ОписаниеПроцессаФорматированное.Шрифт=ШрифтПользователя;
	Элементы.ТекстПроцессаФорматированный.Шрифт=ШрифтПользователя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.ФормаИнициализироватьСхемуБП.Доступность=НЕ ЭтаФорма.ТолькоПросмотр;
	Элементы.ФормаДобавитьТочкуМаршрута.Доступность=НЕ ЭтаФорма.ТолькоПросмотр;
	Элементы.ФормаВыгрузитьВФайлBPL.Доступность=НЕ ЭтаФорма.ТолькоПросмотр;

	Если Параметры.Ключ.Пустая() Тогда		
		УстановитьНачальнуюСхемуБП();
		
	КонецЕсли;
	
	#Если ВебКлиент Тогда
	Элементы.ГруппаВебКлиентПредупреждение.Видимость=Истина;
	Элементы.ФормаДобавитьТочкуМаршрута.Видимость=Ложь;
	#Иначе
	Элементы.ГруппаВебКлиентПредупреждение.Видимость=Ложь;
	Элементы.ФормаДобавитьТочкуМаршрута.Видимость=Истина;
	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ФлагИдетПредварительнаяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоГруппа Тогда
		Возврат;
		
	КонецЕсли;
	
	Объект.ДействиеПараллельное=(ОсновнойСписокПараллельноеДействиеЧисло=1);

	Если ИзменилсяСписокОсновныхИсполнителей Тогда
		ОбновитьКартинкиИсполнителейВСхеме();
		
	КонецЕсли;
	
	ФлагИдетПредварительнаяЗапись=Истина;
	Записать();
	ФлагИдетПредварительнаяЗапись=Ложь;

	Если НЕ ПараметрыЗаписи.Свойство("НеЗаполнятьСхемуМаршрута") ИЛИ НЕ ПараметрыЗаписи.НеЗаполнятьСхемуМаршрута Тогда
		Отказ=НЕ ЗаполнитьСетьМаршрутныхТочек();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	Если НЕ Параметры.Ключ.Пустая() Тогда
		Элементы.ПодпискиНаСобытия.Заголовок=НСтр("ru='Подписки на события ""'; en='Subscription ""';")+СокрЛП(Объект.Наименование)+"""";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ИзменилсяСписокОсновныхИсполнителей=Ложь;
	
	УстановитьОформлениеОсновныхЭлементовФормы();
	
	Оповестить("ВидБизнесПроцесса", "Записан", Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СхемаБизнесПроцессаВыбор(Элемент)
	
	#Если ВебКлиент Тогда
	ПоказатьПредупреждение(Неопределено, НСтр("en='The action is not available in the web client.';ru='Действие не доступно в веб-клиенте.'"));
	Возврат;
	#КонецЕсли
	
	ЭлементСхемы=Элемент.ТекущийЭлемент;
	
	Если ИзменилсяСписокОсновныхИсполнителей Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_СхемаБизнесПроцессаВыборЗавершениеВопросОПродолжении", ЭтотОбъект, Новый Структура("ЭлементСхемы", ЭлементСхемы)), НСтр("en='Change the list of users, type of process will be saved. Do you want to continue?';ru='Изменился список исполнителей, вид процесса будет записан. Продолжить?'"), РежимДиалогаВопрос.ДаНет, , ,КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	СхемаБизнесПроцессаВыборФрагмент(ЭлементСхемы);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СхемаБизнесПроцессаВыборЗавершениеВопросОПродолжении(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ЭлементСхемы = ДополнительныеПараметры.ЭлементСхемы;
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    Если Параметры.Ключ.Пустая() Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_СхемаБизнесПроцессаВыборЗавершениеВопросОСохранении", ЭтотОбъект, Новый Структура("ЭлементСхемы", ЭлементСхемы)), НСтр("en='System needs to save data. Do you want to continue?';ru='Потребуется запись элемента. Продолжить?'"), РежимДиалогаВопрос.ДаНет, , , КП_ОбщееКлиент.ЗаголовокДиалога());
        
    КонецЕсли;
	
	СхемаБизнесПроцессаВыборФрагмент(ЭлементСхемы);
    
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СхемаБизнесПроцессаВыборЗавершениеВопросОСохранении(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ЭлементСхемы = ДополнительныеПараметры.ЭлементСхемы;
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    СхемаБизнесПроцессаВыборФрагмент(ЭлементСхемы);

КонецПроцедуры

&НаКлиенте
Процедура СхемаБизнесПроцессаВыборФрагмент(Знач ЭлементСхемы)
    
    Попытка
        //Записать(Новый Структура("НеЗаполнятьСхемуМаршрута", Истина));
		Записать();
        
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        Возврат;
        
    КонецПопытки;
    
    Если ЭлементСхемы=Неопределено Тогда
        ПоказатьПредупреждение(Неопределено, НСтр("en='Please click the flowchart for edit.';ru='Для редактирования процесса выберите элемент схемы.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
        
    КонецЕсли;
    
    Если НЕ КП_СхемаКБПКлиент.ЭтоНастраиваемыйВидЭлементаСхемы(ЭлементСхемы) Тогда
        Возврат;
        
    КонецЕсли;
    
    Попытка
        ОбработатьОткрытиеТочки(ЭлементСхемы);
        
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        
    КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеТочки(ЭлементСхемы)
	
	ИмяТочки=ЭлементСхемы.Имя;
	НаименованиеТочки=ЭлементСхемы.Наименование;
		
	ТочкаБП=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ИмяТочки, Объект.Ссылка);
	
	//откроем точку
		
	Если ТочкаБП=Неопределено Тогда
		//создадим новую точку
		ТипТочки=КП_СхемаКБПКлиент.ПолучитьТипТочкиСхемы(ЭлементСхемы);
		ПараметрыФормы=Новый Структура;
		ПараметрыЗаполнения=Новый Структура;
		
		ПараметрыЗаполнения.Вставить("Наименование", НаименованиеТочки);
		ПараметрыЗаполнения.Вставить("ТипТочки", ТипТочки);
		ПараметрыЗаполнения.Вставить("ИмяВСхеме", ИмяТочки);
		ПараметрыЗаполнения.Вставить("ВладелецТочки", Объект.Ссылка);
		ПараметрыЗаполнения.Вставить("ДействиеПараллельное", Объект.ДействиеПараллельное);
		ПараметрыЗаполнения.Вставить("ДействиеРеквизитыРасполагатьВДваСтолбца", Объект.ДействиеРеквизитыРасполагатьВДваСтолбца);
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
		ЭтоНоваяТочка=Истина;
		
	Иначе
		//точка существует
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТочкаБП);
		ПараметрыФормы.Вставить("НаименованиеТочки", НаименованиеТочки);
		
		ПараметрыЗаполнения=Новый Структура("ДействиеПараллельное", Объект.ДействиеПараллельное);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
		
		ЭтоНоваяТочка=Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
		СписокВариантовВыбора=Новый СписокЗначений;
		Для Каждого ЭлементВыбора Из ЭлементСхемы.Элементы Цикл
			ПредставлениеВарианта=СтрЗаменить(ЭлементВыбора.Наименование, "Вариант", "Вариант ");
			СписокВариантовВыбора.Добавить(ЭлементВыбора.Наименование, ПредставлениеВарианта);
		КонецЦикла;
		
		ПараметрыФормы.Вставить("СписокВариантовВыбора", СписокВариантовВыбора);
		
	КонецЕсли;
	
	Если ТребуетсяЗаписьОбъекта() Тогда
		//требуется запись элемента
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ОбработатьОткрытиеТочкиЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормы, ТочкаБП", ПараметрыФормы, ТочкаБП)), НСтр("en='Process template will be saved. Do you want to continue?';ru='Вид процесса будет записан. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 60, , КП_ОбщееКлиент.ЗаголовокДиалога());
		
	Иначе
		ОбработатьОткрытиеТочкиФрагмент(ПараметрыФормы, ТочкаБП);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОбработатьОткрытиеТочкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
    ТочкаБП = ДополнительныеПараметры.ТочкаБП;
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        Возврат;
    КонецПопытки;
    
    ОбработатьОткрытиеТочкиФрагмент(ПараметрыФормы, ТочкаБП);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеТочкиФрагмент(Знач ПараметрыФормы, Знач ТочкаБП)
    
    Перем СтруктураТочкиНачальная;
	
	Если ТочкаБП<>Неопределено Тогда
    	СтруктураТочкиНачальная=КП_СхемаКБПСервер.ПолучитьСтруктуруТочки(ТочкаБП);
    	СостояниеОбъекта=Новый Структура;
    	СостояниеОбъекта.Вставить("СтруктураТочкиНачальная", СтруктураТочкиНачальная);
	КонецЕсли;
    
    //откроем форму, а обработку результатов её действия будем вести в обработке оповещения
    ОткрытьФорму("Справочник.КП_ТочкиПроцессов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,, Истина, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПриЗаписиТочки(СсылкаНаТочку)
	
	Если СостояниеОбъекта=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка сохранения значения точки");
		Возврат;
	КонецЕсли;
	
	СтруктураТочкиНачальная=СостояниеОбъекта.СтруктураТочкиНачальная;
	Если НЕ СтруктураТочкиНачальная.Свойство("СсылкаНаТочку") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка сохранения значения точки");
		Возврат;
	КонецЕсли;
	
	Если СтруктураТочкиНачальная.СсылкаНаТочку<>СсылкаНаТочку Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Одновременное редактирование двух разных точек невозможно");
		Возврат;
	КонецЕсли;
	
	СтруктураТочкиПослеОткрытия=КП_СхемаКБПСервер.ПолучитьСтруктуруТочки(СсылкаНаТочку);
	
	ИмяТочки=СокрЛП(СсылкаНаТочку);
	
	ТочкаИзменилась=Ложь;
	Если СтруктураТочкиНачальная.Количество()=0 Тогда
		ТочкаИзменилась=Истина;
		
	Иначе
		Для Каждого ЭлементСтруктуры Из СтруктураТочкиНачальная Цикл
			НовоеЗначениеСтруктуры=Неопределено;
			
			СтруктураТочкиПослеОткрытия.Свойство(ЭлементСтруктуры.Ключ, НовоеЗначениеСтруктуры);
			
			Если ЭлементСтруктуры.Значение<>НовоеЗначениеСтруктуры Тогда
				ТочкаИзменилась=Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦИкла;
		
	КонецЕсли;
		
	Если ТочкаИзменилась Тогда
		ИмяОбновляемойТочки=?(СтруктураТочкиНачальная.Свойство("ИмяВСхеме"), СтруктураТочкиНачальная.ИмяВСхеме, СтруктураТочкиПослеОткрытия.ИмяВСхеме);
		КП_СхемаКБПКлиент.ОбновитьДанныеТочкиСхемы(СхемаБизнесПроцесса, ИмяОбновляемойТочки, СсылкаНаТочку, Объект.Ссылка);
		Модифицированность=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНачальнуюСхемуБП(НомерСхемы=1)
	
	Если ЗначениеЗаполнено(КопируемыйВид) Тогда
		//скопируем схему из вида основания
		СхемаБизнесПроцесса=КопируемыйВид.ХранилищеКартыПроцесса.Получить();
		Возврат;
		
	КонецЕсли;
	                     	
	МакетСхемы=Справочники.КП_ВидыПроцессов.ПолучитьМакет("СхемаНовый");
	ИмяВременногоФайла=ПолучитьИмяВременногоФайла(".grp");
	МакетСхемы.Записать(ИмяВременногоФайла);
	
	СхемаБизнесПроцесса.Прочитать(ИмяВременногоФайла);
	
	ХранилищеКартыПроцесса=Новый ХранилищеЗначения(СхемаБизнесПроцесса);
	СхемаБизнесПроцесса=ХранилищеКартыПроцесса.Получить();
		
	Попытка
	    УдалитьФайлы(ИмяВременногоФайла);  
	Исключение
	    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТекущийОбъект.ХранилищеКартыПроцесса=Новый ХранилищеЗначения(СхемаБизнесПроцесса);
	
	ТекущийОбъект.ХранилищеОписанияПроцесса=Новый ХранилищеЗначения(ОписаниеПроцессаФорматированное);
	ТекущийОбъект.ХранилищеТекстаПроцесса=Новый ХранилищеЗначения(ТекстПроцессаФорматированный);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ХранилищеКарты=ТекущийОбъект.ХранилищеКартыПроцесса.Получить();
	
	Если НЕ ХранилищеКарты=Неопределено Тогда
		СхемаБизнесПроцесса=ХранилищеКарты;
	КонецЕсли;
	
	ОписаниеПроцессаФорматированное=ТекущийОбъект.ХранилищеОписанияПроцесса.Получить();
	ТекстПроцессаФорматированный=ТекущийОбъект.ХранилищеТекстаПроцесса.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьСхемуБП(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ИнициализироватьСхемуБПЗавершение", ЭтотОбъект), НСтр("en='The current flowchart will be replaced by the initial. Do you want to continue?';ru='Текущая схема будет заменена начальной! Продолжить?'"), РежимДиалогаВопрос.ДаНет, 60, , КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ИнициализироватьСхемуБПЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    УстановитьНачальнуюСхемуБП();
    Прочитать();
    Модифицированность=Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТочкуМаршрута(Команда)
	
	ОткрытьФорму("Справочник.КП_ВидыПроцессов.Форма.ФормаБиблиотекиЭлементов");
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСетьМаршрутныхТочек()
	// пройдем по схеме бизнес-процесса и заполним сеть маршрутных точек
	// для последующего использования
	
	ОбъектНовый=Параметры.Ключ.Пустая();
	Объект.СетьМаршрутныхТочек.Очистить();
	
	КоличествоЭлементов=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы.Количество();
	
	//создадим точки
	Для НомерЭлемента=0 По КоличествоЭлементов-1 Цикл
		
		ЭлементСхемы=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы[НомерЭлемента];
		
		Если НЕ КП_СхемаКБПСервер.ЭтоНастраиваемыйВидЭлементаСхемы(ЭлементСхемы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбъектНовый И ЭлементРаспложенВНачальнойБиблиотеке(ЭлементСхемы) Тогда
			Продолжить;
		КонецЕсли;
	
		ТочкаБП=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ЭлементСхемы.Имя, Объект.Ссылка);
		
		Если ТочкаБП=Неопределено Тогда
			ТочкаБП=КП_СхемаКБПСервер.СоздатьТочкуКБППоЭлементу(ЭлементСхемы, Объект.Ссылка);
		КонецЕсли;
	
		//обновим наименование элементов точек процесса при необходимости
		Если ТочкаБП<>Неопределено И ТочкаБП.Наименование<>ЭлементСхемы.Наименование Тогда
			ТочкаБПОбъект=ТочкаБП.ПолучитьОбъект();
			ТочкаБПОбъект.Наименование=ЭлементСхемы.Наименование;
			Попытка
				ТочкаБПОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;				
		
	КонецЦикла;
	
	Для НомерЭлемента=0 По КоличествоЭлементов-1 Цикл
		
		ЭлементСхемы=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы[НомерЭлемента];
		
		ЭтоЛинияСхемы=КП_СхемаКБПСервер.ЭтоЛинияСхемы(ЭлементСхемы);
		
		Если НЕ ЭтоЛинияСхемы Тогда
			Продолжить;
		КонецЕсли;
		
		//далее работаем с линией схемы
		
		ЭлементНаКонцеЛинии=ЭлементСхемы.КонецЭлемент;
		ЭлементВНачалеЛинии=ЭлементСхемы.НачалоЭлемент;
		
		//пропустим линии с элементами из начальной библиотеки
		Если ОбъектНовый Тогда
			Если ЭлементРаспложенВНачальнойБиблиотеке(ЭлементВНачалеЛинии)
				ИЛИ ЭлементРаспложенВНачальнойБиблиотеке(ЭлементНаКонцеЛинии) 
			Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//проверим, есть ли у линий начальный и конечные элементы
		Если ЭлементНаКонцеЛинии=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Line ""';ru='Внимание! Линия ""'")+ЭлементСхемы.Имя+НСтр("ru='"" не имеет окончания.';"));
			Возврат Ложь;
		КонецЕсли;
		
		Если ЭлементВНачалеЛинии=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Line ""';ru='Внимание! Линия ""'")+ЭлементСхемы.Имя+НСтр("ru='"" не имеет начала.';"));
			Возврат Ложь;
		КонецЕсли;
		
		ТочкаНачало=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ЭлементВНачалеЛинии.Имя, Объект.Ссылка);
		ТочкаКонец=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ЭлементНаКонцеЛинии.Имя, Объект.Ссылка);
		
		//добавим в сеть маршрута
		Если ТочкаНачало.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие Тогда
			ТипПерехода=1; //условный
			
		ИначеЕсли ТочкаНачало.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта Тогда
			ТипПерехода=2; //выбор варианта
			
		Иначе
			ТипПерехода=0; //обычный переход
			
		КонецЕсли;
		
		Если ТипПерехода=1 Тогда
			//условный переход
			НоваяСтрока=Объект.СетьМаршрутныхТочек.Добавить();
			НоваяСтрока.ТочкаВыход=ТочкаНачало;
			НоваяСтрока.ТочкаВход=ТочкаКонец;
			НоваяСтрока.ИмяЛинииНаСхеме=ЭлементСхемы.Имя;
			НоваяСтрока.УсловныйПереход=Истина;
			
			//получим количество уже созданных строк для этой точки условия в табличной части
			МассивСтрокТочкиВыбораВарианта=Объект.СетьМаршрутныхТочек.НайтиСтроки(Новый Структура("ТочкаВыход", ТочкаНачало));
			ИндексВарианта=МассивСтрокТочкиВыбораВарианта.Количество()-1;
			КоличествоСтрокВВыбореВарианта=ИндексВарианта; //0 - нет, 1 - да
			НоваяСтрока.УсловиеПерехода=КоличествоСтрокВВыбореВарианта;
			НоваяСтрока.УсловиеПереходаНаименование=?(ИндексВарианта=0, "Нет", "Да");

		ИначеЕсли ТипПерехода=2 Тогда
			//точка выбора варианта
			
			НоваяСтрока=Объект.СетьМаршрутныхТочек.Добавить();
			НоваяСтрока.ТочкаВыход=ТочкаНачало;
			НоваяСтрока.ТочкаВход=ТочкаКонец;
			НоваяСтрока.ИмяЛинииНаСхеме=ЭлементСхемы.Имя;
			НоваяСтрока.УсловныйПереход=Истина;
			
			//получим количество уже созданных строк для этой точки выбора варианта в табличной части
			МассивСтрокТочкиВыбораВарианта=Объект.СетьМаршрутныхТочек.НайтиСтроки(Новый Структура("ТочкаВыход", ТочкаНачало));
			КоличествоСтрокВВыбореВарианта=МассивСтрокТочкиВыбораВарианта.Количество();
			ИндексВарианта=КоличествоСтрокВВыбореВарианта;
			НоваяСтрока.УсловиеПерехода=КоличествоСтрокВВыбореВарианта;
			
			Если ТочкаНачало.ВыборВарианта.Количество()=0 Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='No variants in the point of choose';ru='В точке выбора варианта ""'")+СокрЛП(ТочкаНачало)+НСтр("ru='"" не указаны условия вариантов перехода.';"));
				Возврат Ложь;
			КонецЕсли;
			
			НаименованиеВарианта=ТочкаНачало.ВыборВарианта[ИндексВарианта-1].ВариантПерехода;
			НоваяСтрока.УсловиеПереходаНаименование=НаименованиеВарианта;
			
		Иначе
			//обычная точка
			НоваяСтрока=Объект.СетьМаршрутныхТочек.Добавить();
			НоваяСтрока.ТочкаВыход=ТочкаНачало;
			НоваяСтрока.ТочкаВход=ТочкаКонец;
			НоваяСтрока.ИмяЛинииНаСхеме=ЭлементСхемы.Имя;

		КонецЕсли;
		
	КонецЦикла; //по элементам схемы
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОсновныеИсполнителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ОткрытьФормуАдресации(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАдресации(ВыбраннаяСтрока)
	ПараметрыФормы=Новый Структура;
	ПараметрыЗаполнения=Новый Структура;
	
	СтрокаТЧ = Объект.ОсновныеИсполнители.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТЧ=Неопределено Тогда
		СтрокаТЧ=Объект.ОсновныеИсполнители[ВыбраннаяСтрока];
	КонецЕсли;
	Если СтрокаТЧ=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Error in determining the current line.';ru='Ошибка определения текущей строки.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ТочкаАдресации", СтрокаТЧ.ТочкаАдресации);
	ПараметрыЗаполнения.Вставить("ОтчетИсполнителя", СтрокаТЧ.ОтчетИсполнителя);
	ПараметрыЗаполнения.Вставить("СрокВыполненияЧасов", СтрокаТЧ.СрокВыполненияЧасов);
	ПараметрыЗаполнения.Вставить("СрокВыполненияДатаВремя", СтрокаТЧ.СрокВыполненияДатаВремя);
	ПараметрыЗаполнения.Вставить("ИндивидуальныйТекстЗадания", СтрокаТЧ.ИндивидуальныйТекстЗадания);
	ПараметрыЗаполнения.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаТЧ.ИндивидуальноеНаименованиеЗадания);
	ПараметрыЗаполнения.Вставить("НеИспользоватьГрафикРаботы", СтрокаТЧ.НеИспользоватьГрафикРаботы);
	ПараметрыЗаполнения.Вставить("ИднИсполнителя", СтрокаТЧ.ИднИсполнителя);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("ПоказыватьПараметрыЗадачи", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Элемент адресации'; en='Addressing element';"));
	
	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ОткрытьФормуАдресацииЗавершение", ЭтотОбъект, Новый Структура("СтрокаТЧ", СтрокаТЧ)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытьФормуАдресацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтрокаТЧ = ДополнительныеПараметры.СтрокаТЧ;
	СтруктураРезультата=Результат;
	
	Если СтруктураРезультата=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    //обновим данные
    СтрокаТЧ.ТочкаАдресации=СтруктураРезультата.ТочкаАдресации;
    СтрокаТЧ.ОтчетИсполнителя=СтруктураРезультата.ОтчетИсполнителя;
    СтрокаТЧ.СрокВыполненияЧасов=СтруктураРезультата.СрокВыполненияЧасов;
    СтрокаТЧ.СрокВыполненияДатаВремя=СтруктураРезультата.СрокВыполненияДатаВремя;
    СтрокаТЧ.ИндивидуальныйТекстЗадания=СтруктураРезультата.ИндивидуальныйТекстЗадания;
    СтрокаТЧ.ИндивидуальноеНаименованиеЗадания=СтруктураРезультата.ИндивидуальноеНаименованиеЗадания;
    СтрокаТЧ.НеИспользоватьГрафикРаботы=СтруктураРезультата.НеИспользоватьГрафикРаботы;
    СтрокаТЧ.ИднИсполнителя=СтруктураРезультата.ИднИсполнителя;
    
    СтрокаТЧ.СрокВыполненияТекст=КП_ОбщееКлиент.ПолучитьПредставлениеСрокаВыполнения(СтрокаТЧ.СрокВыполненияЧасов, СтрокаТЧ.СрокВыполненияДатаВремя, СтруктураРезультата.НеИспользоватьГрафикРаботы);
    
    МодифицированСписокИсполнителей=Истина;
    
    КП_СхемаКБПСервер.ОбновитьВсехОсновныхИсполнителейСхемы(СхемаБизнесПроцесса, Объект);
	
	ОсновныеИсполнителиПриАктивизацииСтроки(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	//откроем форму адресации
	Отказ=Истина;
	
	ПараметрыФормы=Новый Структура;
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("СрокВыполненияЧасов", СрокПоУмолчаниюЧасов);
	ПараметрыЗаполнения.Вставить("СрокВыполненияДатаВремя", СрокПоУмолчаниюДата);
	ПараметрыЗаполнения.Вставить("ИднИсполнителя", "");
	ПараметрыЗаполнения.Вставить("НеИспользоватьГрафикРаботы", Ложь);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
    ПараметрыФормы.Вставить("ПоказыватьПараметрыЗадачи", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Новый элемент адресации'; en='New addressing element';"));
	
	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ОсновныеИсполнителиПередНачаломДобавленияЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОсновныеИсполнителиПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ДобавитьНовуюСтрокуАдресации(Результат);
    
    ИзменилсяСписокОсновныхИсполнителей=Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюСтрокуАдресации(СтруктураРезультата)
	
	НоваяСтрока=Объект.ОсновныеИсполнители.Добавить();
	
	НоваяСтрока.ТочкаАдресации=СтруктураРезультата.ТочкаАдресации;
	НоваяСтрока.ОтчетИсполнителя=СтруктураРезультата.ОтчетИсполнителя;
	НоваяСтрока.СрокВыполненияЧасов=СтруктураРезультата.СрокВыполненияЧасов;
	НоваяСтрока.СрокВыполненияДатаВремя=СтруктураРезультата.СрокВыполненияДатаВремя;
	НоваяСтрока.ИндивидуальныйТекстЗадания=СтруктураРезультата.ИндивидуальныйТекстЗадания;
	НоваяСтрока.ИднИсполнителя=СтруктураРезультата.ИднИсполнителя;
	НоваяСтрока.НеИспользоватьГрафикРаботы=СтруктураРезультата.НеИспользоватьГрафикРаботы;
	НоваяСтрока.СрокВыполненияТекст=КП_ОбщееКлиент.ПолучитьПредставлениеСрокаВыполнения(НоваяСтрока.СрокВыполненияЧасов, НоваяСтрока.СрокВыполненияДатаВремя, СтруктураРезультата.НеИспользоватьГрафикРаботы);
	НоваяСтрока.ВидНаправленияПараллельное=ОсновнойСписокПараллельноеДействиеЧисло; //Объект.ДействиеПараллельное;
	
	СрокПоУмолчаниюЧасов=СтруктураРезультата.СрокВыполненияЧасов;
	СрокПоУмолчаниюДата=СтруктураРезультата.СрокВыполненияДатаВремя;
	
	МодифицированСписокИсполнителей=Истина;
	
	ДобавитьВСписокФотографию(СтруктураРезультата.ТочкаАдресации);
	
КонецПроцедуры

&НаСервере
Функция ЭлементРаспложенВНачальнойБиблиотеке(ЭлементСхемы)
	Если ЭлементСхемы=Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (ЭлементСхемы.Лево=300 И ЭлементСхемы.Верх=20 И ЭлементСхемы.Имя="Действие2")
		ИЛИ (ЭлементСхемы.Лево=300 И ЭлементСхемы.Верх=140 И ЭлементСхемы.Имя="Условие1")
		ИЛИ (ЭлементСхемы.Лево=300 И ЭлементСхемы.Верх=220 И ЭлементСхемы.Имя="Обработка1")
		ИЛИ (ЭлементСхемы.Лево=300 И ЭлементСхемы.Верх=340 И ЭлементСхемы.Имя="Разделение1")
		ИЛИ (ЭлементСхемы.Лево=360 И ЭлементСхемы.Верх=340 И ЭлементСхемы.Имя="Слияние1")
	Тогда
	
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
		
КонецФункции

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ФлагИдетПредварительнаяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	КП_ОбщееСервер.УстановитьОтбор(РеквизитыПроцесса, "Владелец", Объект.Ссылка, Истина);
	СписокЭкземпляровПроцесса.Параметры.УстановитьЗначениеПараметра("ВидПроцесса", Объект.Ссылка);	
	//СписокПодписок.Параметры.УстановитьЗначениеПараметра("ВидПроцесса", Объект.Ссылка);	
	
	Если НЕ ПараметрыЗаписи.Свойство("НеЗаполнятьСхемуМаршрута ") ИЛИ НЕ ПараметрыЗаписи.НеЗаполнятьСхемуМаршрута Тогда
		//если это не автоматическая запись при открытии точки в схеме
		УдалитьНеиспользуемыеТочки();
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы();
	
	МодифицированСписокИсполнителей=Ложь;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьНеиспользуемыеТочки()
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &ВидПроцесса");
						
	Запрос.УстановитьПараметр("ВидПроцесса", Объект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ТочкаПроцесса=Выборка.Ссылка;
		
		СтрокаТочки=Объект.Ссылка.СетьМаршрутныхТочек.Найти(ТочкаПроцесса, "ТочкаВход, ТочкаВыход");
		Если НЕ СтрокаТочки=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//точка не используется
		ТочкаОбъект=ТочкаПроцесса.ПолучитьОбъект();
		Попытка
			ТочкаОбъект.ПометкаУдаления=Истина;
			ТочкаОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
			
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьСетьТочек(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ПерезаполнитьСетьТочекЗавершение", ЭтотОбъект), НСтр("en='Do you want to refill network points of the flowchart?';ru='Перезаполнить сеть точек схемы?'"), РежимДиалогаВопрос.ДаНет);	
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ПерезаполнитьСетьТочекЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    ЗаполнитьСетьМаршрутныхТочек();

КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСписокПараллельноеДействиеЧислоПриИзменении(Элемент)
	УстановитьКартинкуВидаНаправленияДействияОсновногоСписка(ОсновнойСписокПараллельноеДействиеЧисло);
	
КонецПроцедуры

Процедура УстановитьКартинкуВидаНаправленияДействияОсновногоСписка(ВидНаправленияПараллельное)
	
	Для Каждого СтрокаТЧ Из Объект.ОсновныеИсполнители Цикл
		СтрокаТЧ.ВидНаправленияПараллельное=ВидНаправленияПараллельное;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлXML(Команда)
	
	Если Модифицированность Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ВыгрузитьВФайлXMLЗавершение", ЭтотОбъект), НСтр("en='The item will be saved. Do you want to continue?';ru='Элемент будет сохранен! Продолжить?'"), РежимДиалогаВопрос.ДаНет,,,КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
		
	КонецЕсли;
	
	//выберем файл для записи
	ВыгрузитьВФайлXMLФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ВыгрузитьВФайлXMLЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
    КонецПопытки;
    
    
    ВыгрузитьВФайлXMLФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлXMLФрагмент()
    
    Перем ЗаписанУспешно, ИмяФайла, ПутьКФайлу, РазмерФайлаКБ, ФайлВидаПроцесса, ФильтрРасширений;
    
    ФильтрРасширений=НСтр("en='bpl-files (*.bpl) | *.bpl';ru='bpl-файлы(*.bpl)|*.bpl'");
    ИмяФайла=СокрЛП(Объект.Наименование);
    ИмяФайла=СтрЗаменить(ИмяФайла, """", "");
    ИмяФайла=СтрЗаменить(ИмяФайла, ":", " ");
    
    ПутьКФайлу=КП_РаботаСФайламиКлиент.ВыбратьФайлСДиска(РежимДиалогаВыбораФайла.Сохранение, ФильтрРасширений,,ИмяФайла);
    
    Если ПустаяСтрока(ПутьКФайлу) Тогда
        Состояние(НСтр("en='The file was not saved ...';ru='Файл не сохранен...'"));
        Возврат;
        
    КонецЕсли;
    
    ЗаписанУспешно=КП_СхемаКБПКлиент.ЗаписатьВидКорпоративногоПроцессаXML(Объект.Ссылка, ПутьКФайлу);
    
    //получим размер файла
    ФайлВидаПроцесса=Новый Файл(ПутьКФайлу);
    РазмерФайлаКБ=Формат(ФайлВидаПроцесса.Размер()/1024, "ЧЦ=20; ЧДЦ=2");
    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Размер файла: ';")+СокрЛП(РазмерФайлаКБ)+НСтр("ru=' КБ.';"));
    
    Если ЗаписанУспешно Тогда
        Состояние(НСтр("en='Stored in the file ""';ru='Сохранен в файл ""'")+ПутьКФайлу+НСтр("ru='""';"));
        
    КонецЕсли;

КонецПроцедуры

&НаСервере 
Процедура УстановитьЗаголовокФормы()
	
	Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
		ЭтаФорма.АвтоЗаголовок=Ложь;
		ЭтаФорма.Заголовок=Объект.Наименование;
		
	Иначе
		ЭтаФорма.АвтоЗаголовок=Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьНаСервереXML(Команда)
	ПоказатьПредупреждение(Неопределено, НСтр("en='This version is not available.';ru='В данной версии не доступно.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭкземплярПроцесса(Команда)

	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Вид процесса помечен на удаление. Экземпляр не может быть создан.';en='Process template is marked for deletion.';"),,КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_СоздатьЭкземплярПроцессаЗавершение", ЭтотОбъект), НСтр("en='Process template will be saved. Do you want to continue?';ru='Вид будет записан. Продолжить?'"), 
		КП_ОбщееКлиент.КнопкиВопроса("Да, продолжить"), 60, , КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СоздатьЭкземплярПроцессаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    Попытка
        Записать();
        
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        Возврат;
        
    КонецПопытки;
    
    ЗначенияЗаполнения=Новый Структура();
    ЗначенияЗаполнения.Вставить("ВидПроцесса", Объект.Ссылка);
    
    ПараметрыФормы=Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
    
    ОткрытьФорму("БизнесПроцесс.КП_БизнесПроцесс.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

Процедура УстановитьОформлениеОсновныхЭлементовФормы()
		
	НовыйЭлемент=Параметры.Ключ.Пустая();
	
	Элементы.ФормаСоздатьЭкземплярПроцесса.Видимость=НЕ НовыйЭлемент;
	
	Если НЕ НовыйЭлемент Тогда
		Элементы.ПодпискиНаСобытия.Заголовок=НСтр("ru='Подписки на события ""'; en='Subscription ""';")+СокрЛП(Объект.Наименование)+"""";
	КонецЕсли;
	
	УстановитьОформлениеГруппыПроцессов();
	
	УстановитьОтображениеПодписок();
	
	Элементы.ФормаДобавитьТочкуМаршрута.Видимость=(Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.СтраницаСхемаБизнесПроцесса)	
	
КонецПроцедуры

Процедура УстановитьОформлениеГруппыПроцессов()
	Элементы.ГруппаПроектыБизнесПроцесса.Видимость=ФлагИспользованиеПроектов;
	
	Если ФлагИспользованиеПроектов Тогда
		КоличествоПроектов=Объект.ПроектыБизнесПроцесса.Количество();
		Если КоличествоПроектов=0 Тогда 
			Элементы.ГруппаПроектыБизнесПроцесса.Заголовок="Проекты бизнес-процесса";
		Иначе
			Элементы.ГруппаПроектыБизнесПроцесса.Заголовок="Проекты бизнес-процесса ("+Формат(КоличествоПроектов, "ЧДЦ=; ЧГ=")+")";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСетьМаршрутныхТочек(Команда)
	СетьВидна=Элементы.СтраницаСетьМаршрутныхТочек.Видимость;
	
	Элементы.СтраницаСетьМаршрутныхТочек.Видимость=НЕ СетьВидна;
	
	Если СетьВидна Тогда
		Элементы.ФормаПоказатьСетьМаршрутныхТочек.Заголовок=НСтр("ru='Показать сеть точек'; en='Show points';");
		
	Иначе
		Элементы.ФормаПоказатьСетьМаршрутныхТочек.Заголовок=НСтр("ru='Скрыть сеть точек; en='Hide points';");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТребуетсяЗаписьОбъекта()
	
	Если Параметры.Ключ.Пустая() ИЛИ МодифицированСписокИсполнителей Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.СтраницаСхемаБизнесПроцесса Тогда
		Если ИзменилсяСписокОсновныхИсполнителей Тогда
			ОбновитьКартинкиИсполнителейВСхеме();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ФормаДобавитьТочкуМаршрута.Видимость=(Элементы.ГруппаСтраницы.ТекущаяСтраница=Элементы.СтраницаСхемаБизнесПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеИсполнителиПриИзменении(Элемент)
	ИзменилсяСписокОсновныхИсполнителей=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартинкиИсполнителейВСхеме()
	
	#Если ВебКлиент Тогда
	Возврат;
	#КонецЕсли
	
	//пройдем по всем точкам действия испонителей
	//в точках где используется основной список исполнителей, обновим картинку
	
	КоличествоЭлементов=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы.Количество();
	
	//создадим точки
	Для НомерЭлемента=0 По КоличествоЭлементов-1 Цикл
		
		ЭлементСхемы=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы[НомерЭлемента];
		
		Если НЕ ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыДействие") Тогда
			Продолжить;
			
		КонецЕсли;
		
		ТочкаКБП=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ЭлементСхемы.Имя, Объект.Ссылка);
		
		Если ТочкаКБП=Неопределено Тогда
			Продолжить;
			
		КонецЕсли;
		
		Если ПолучитьИсточникИспонителейТочки(ТочкаКБП)<>0 Тогда
			Продолжить;
			
		КонецЕсли;
		
		//используется динамический список
		
		ЭлементСхемы.Пояснение="<Нет>";
		//обновим картинку
		Если Объект.ОсновныеИсполнители.Количество()=0 Тогда
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_Исполнитель;
		Иначе
			
			ПервыйИсполнитель=Объект.ОсновныеИсполнители[0].ТочкаАдресации;
			
			Если ТипЗнч(ПервыйИсполнитель)=Тип("СправочникСсылка.Пользователи") Тогда
				//фотография пользователя
				Если ЗначениеЗаполнено(ПервыйИсполнитель) Тогда
					ДвоичныеДанные=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ПервыйИсполнитель);

				КонецЕсли;			
				
				Если ДвоичныеДанные=Неопределено Тогда
					ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_Исполнитель;
				Иначе
					ЭлементСхемы.Картинка=Новый Картинка(ДвоичныеДанные, Истина);
					НаименованиеИсполнителя=ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СокрЛП(ПервыйИсполнитель));
					Если НЕ ПустаяСтрока(НаименованиеИсполнителя) Тогда
						ЭлементСхемы.Пояснение=НаименованиеИсполнителя;
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				//картинка ролевой адресации
				ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_РолеваяАдресация;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменилсяСписокОсновныхИсполнителей=Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсточникИспонителейТочки(ТочкаКБП)
	
	Возврат ТочкаКБП.ИсточникИсполнителей;
	
КонецФункции

Функция ЗаполнитьСписокНаименованийЭлементовФормы()
	
	//реквизиты формы процесса
	ТаблицаНаименованийЭлементовВидаПроцесса=КП_Процессы.ПолучитьТаблицуНаименованийЭлементовВидаПроцесса(); //Элемент | Наименование | Иностраное наименование
	
	Объект.НаименованияЭлементовПроцесса.Очистить();
	
	НоваяСтрока=Объект.НаименованияЭлементовПроцесса.Добавить();
	НоваяСтрока.ЭлементФормы="Основная кнопка запуска";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовВидаПроцесса.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовПроцесса.Добавить();
	НоваяСтрока.ЭлементФормы="Кнопка ""Старт""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовВидаПроцесса.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовПроцесса.Добавить();
	НоваяСтрока.ЭлементФормы="Кнопка ""Обсудить процесс""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовВидаПроцесса.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;		
	
	НоваяСтрока=Объект.НаименованияЭлементовПроцесса.Добавить();
	НоваяСтрока.ЭлементФормы="Текст процесса";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовВидаПроцесса.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовПроцесса.Добавить();
	НоваяСтрока.ЭлементФормы="Страница ""Схема бизнес-процесса""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовВидаПроцесса.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовПроцесса.Добавить();
	НоваяСтрока.ЭлементФормы="Страница ""Параметры процесса""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовВидаПроцесса.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовПроцесса.Добавить();
	НоваяСтрока.ЭлементФормы="Страница ""Основные исполнители""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовВидаПроцесса.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
    НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовПроцесса.Добавить();
	НоваяСтрока.ЭлементФормы="Страница ""Реквизиты процесса""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовВидаПроцесса.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	//реквизиты формы задачи
	ТаблицаНаименованийЭлементовЗадач=КП_Процессы.ПолучитьТаблицуНаименованийЭлементовЗадачПроцессов(); //Элемент | Наименование | Иностраное наименование

	Объект.НаименованияЭлементовЗадач.Очистить();
	
	НоваяСтрока=Объект.НаименованияЭлементовЗадач.Добавить();
	НоваяСтрока.ЭлементФормы="Исполнение: Кнопка ""Выполнить""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовЗадач.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовЗадач.Добавить();
	НоваяСтрока.ЭлементФормы="Исполнение: Кнопка ""Переадресовать""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовЗадач.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовЗадач.Добавить();
	НоваяСтрока.ЭлементФормы="Исполнение: Кнопка ""Шаблон""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовЗадач.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовЗадач.Добавить();
	НоваяСтрока.ЭлементФормы="Исполнение: Поле ""Исполнитель""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовЗадач.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовЗадач.Добавить();
	НоваяСтрока.ЭлементФормы="Исполнение: Раздел ""Реквизиты процесса""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовЗадач.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовЗадач.Добавить();
	НоваяСтрока.ЭлементФормы="Контроль: Кнопка ""Выполнить""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовЗадач.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовЗадач.Добавить();
	НоваяСтрока.ЭлементФормы="Контроль: Поле ""Контролер""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовЗадач.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;

	НоваяСтрока=Объект.НаименованияЭлементовЗадач.Добавить();
	НоваяСтрока.ЭлементФормы="Все: Гиперссылка ""Объекты""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовЗадач.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;
	
	НоваяСтрока=Объект.НаименованияЭлементовЗадач.Добавить();
	НоваяСтрока.ЭлементФормы="Все: Гиперссылка ""Список объектов""";
	СтрокаТаблицы=ТаблицаНаименованийЭлементовЗадач.Найти(НоваяСтрока.ЭлементФормы, "ЭлементФормы");
	НоваяСтрока.НаименованиеЭлемента=СтрокаТаблицы.НаименованиеЭлемента;
	НоваяСтрока.НаименованиеЭлементаИностранное=СтрокаТаблицы.НаименованиеЭлементаИностранное;
	НоваяСтрока.Видимость=СтрокаТаблицы.Видимость;

	Модифицированность=Истина;
	
КонецФункции

&НаКлиенте
Процедура НаименованиеРеквизитовПроцессаПередУдалением(Элемент, Отказ)
	Состояние(НСтр("en='Modifying list of items is not possible.';ru='Изменение списка элементов невозможно.'"));
	Отказ=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеРеквизитовЗадачПередУдалением(Элемент, Отказ)
	Состояние(НСтр("en='Modifying list of items is not possible.';ru='Изменение списка элементов невозможно.'"));
	Отказ=Истина;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеРеквизитовЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Состояние(НСтр("en='Modifying list of items is not possible.';ru='Изменение списка элементов невозможно.'"));
	Отказ=Истина;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеРеквизитовПроцессаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Состояние(НСтр("en='Modifying list of items is not possible.';ru='Изменение списка элементов невозможно.'"));
	Отказ=Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНаименованияЭлементов(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ПерезаполнитьНаименованияЭлементовЗавершение", ЭтотОбъект), НСтр("en='Do you want to set default form values?';ru='Перезаполнить настройки форм значениями по-умолчанию?'"), 
		КП_ОбщееКлиент.КнопкиВопроса("Да, перезаполнить"), , , КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ПерезаполнитьНаименованияЭлементовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    ЗаполнитьСписокНаименованийЭлементовФормы();

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПроцессовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
			
	//Если Параметры.Ключ.Пустая() Тогда
	//	СтандартнаяОбработка=Ложь;	
	//	ПоказатьПредупреждение(Неопределено, НСтр("en='Please write down the item first.';ru='Сначала запишите элемент.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
	//	Отказ=Истина;
	//	Возврат;
	//КонецЕсли;
	//
	//Отказ=Истина; //обычный режим добавления строкой отключаем
	//
	////откроем форму нового реквизита
	//ПараметрыЗаполнения=Новый Структура("Владелец", Объект.Ссылка);
	//ПараметрыФормы=Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);

	//ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаОбъекта", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_РеквизитыПроцессовПередНачаломДобавленияЗавершение", ЭтотОбъект));
	
	СтандартнаяОбработка=Ложь;
	Отказ=Истина;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ОтветНаВопросОЗаписиПередДобавлением", ЭтаФорма, Новый Структура),"Потребуется запись элемента. Продолжить?", РежимДиалогаВопрос.ДаНет,,,КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;

	НачатьДобавлениеРеквизитаПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОтветНаВопросОЗаписиПередДобавлением(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭтаФорма.Записать()
	Исключение
		КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	НачатьДобавлениеРеквизитаПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьДобавлениеРеквизитаПроцесса()
	//откроем форму нового реквизита
	ПараметрыЗаполнения=Новый Структура("Владелец", Объект.Ссылка);
	ПараметрыФормы=Новый Структура("ЗначенияЗаполнения", ПараметрыЗаполнения);

	ОткрытьФорму("Справочник.КП_ДополнительныеРеквизиты.ФормаОбъекта", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_РеквизитыПроцессовПередНачаломДобавленияЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_РеквизитыПроцессовПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат=Неопределено Тогда
        Возврат;
        
    КонецЕсли;
    
    НоваяСтрока=Объект.РеквизитыПроцессов.Добавить();
    НоваяСтрока.РеквизитПроцесса=Результат;
    
    ОбновитьСписокРеквизитовСервером();

КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПроцессовПередУдалением(Элемент, Отказ)
	//установим отметку на удаление подчиненного реквизита
	СтрокаТЧ=Элемент.ТекущиеДанные;
	
	РеквизитСсылка=СтрокаТЧ.РеквизитПроцесса;
	Если НЕ ЗначениеЗаполнено(РеквизитСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ=НЕ УстановитьПометкуУдаленияРеквизитаСервером(РеквизитСсылка);
	
КонецПроцедуры

&НаСервере
Функция УстановитьПометкуУдаленияРеквизитаСервером(РеквизитСсылка)
	РеквизитОбъект=РеквизитСсылка.ПолучитьОбъект();
	
	Если РеквизитОбъект=Неопределено Тогда 
		//удалять не чего
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		РеквизитОбъект.УстановитьПометкуУдаления(Истина);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура РеквизитыПроцессовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.РеквизитПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыПроцесса(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ОбновитьРеквизитыПроцессаЗавершение", ЭтотОбъект), НСтр("en='Do you want refill the process variables?';ru='Перезаполнить реквизиты процесса?'"), РежимДиалогаВопрос.ДаНет,,,КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОбновитьРеквизитыПроцессаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если Объект.РеквизитыПроцессов.Количество()>0 И РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    //обновим список реквизитов
    ОбновитьСписокРеквизитовСервером();

КонецПроцедуры

&НаСервере
Функция ОбновитьСписокРеквизитовСервером()

	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ДополнительныеРеквизиты.Ссылка КАК РеквизитПроцесса
	                    |ИЗ
	                    |	Справочник.КП_ДополнительныеРеквизиты КАК КП_ДополнительныеРеквизиты
	                    |ГДЕ
	                    |	КП_ДополнительныеРеквизиты.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ДополнительныеРеквизиты.Владелец = &ВидПроцесса");
						
	Запрос.УстановитьПараметр("ВидПроцесса", Объект.Ссылка);
	
	Объект.РеквизитыПроцессов.Загрузить(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой));
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ИсточникОсновныхИсполнителейПриИзменении(Элемент)
	Если Объект.ИсточникОсновныхИсполнителей=0 Тогда
		//переключились на основной список
		Объект.ОсновныеИсполнители.Очистить();
	КонецЕсли;
	
	УстановитьОформлениеОсновныхИсполнителей();
	ОсновныеИсполнителиПриАктивизацииСтроки(Неопределено);
	СписокРабочаяГруппаПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

Процедура УстановитьОформлениеОсновныхИсполнителей()
	Элементы.РабочаяГруппаОсновныхИсполнителей.Видимость=(Объект.ИсточникОсновныхИсполнителей=1);	
	УстановитьОтображениеСпискаИсполнителей();
	
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаОсновныхИсполнителейПриИзменении(Элемент)
	
	УстановитьОтображениеСпискаИсполнителей();
	ОчиститьДанныеПользователя();
	
	СписокРабочаяГруппаПриАктивизацииСтроки(Неопределено);
	СформироватьСписокФотографий();
	
КонецПроцедуры

Процедура УстановитьОтображениеСпискаИсполнителей()
	
	Если Объект.ИсточникОсновныхИсполнителей=0 Тогда
		//список основных исполнителей
		Элементы.СписокРабочаяГруппа.Видимость=Ложь;
		Элементы.ОсновныеИсполнители.Видимость=Истина;
		Элементы.УстановитьСрокИсполненияДляРабочейГруппы.Видимость=Ложь;
				
	ИначеЕсли Объект.ИсточникОсновныхИсполнителей=1 Тогда
		//рабочая группа
		Элементы.ОсновныеИсполнители.Видимость=Ложь;
		Элементы.СписокРабочаяГруппа.Видимость=Истина;
		Элементы.УстановитьСрокИсполненияДляРабочейГруппы.Видимость=Истина;
		ОбновитьСписокРабочейГруппы();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСписокРабочейГруппы()
	СписокРабочаяГруппа.Параметры.УстановитьЗначениеПараметра("РабочаяГруппа", Объект.РабочаяГруппаОсновныхИсполнителей);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="РеквизитПроцесса" И Параметр="Записан" И ПолучитьВладельца(Источник)=Объект.Ссылка Тогда
		ОбновитьСписокРеквизитовСервером();
		
	ИначеЕсли ИмяСобытия="ТочкаКорпоративногоПроцесса" И Параметр="Записана" Тогда
		ОбновитьДанныеПриЗаписиТочки(Источник);
		
	ИначеЕсли ИмяСобытия="КП_РабочаяГруппаИзменена" И Источник=Объект.РабочаяГруппаОсновныхИсполнителей Тогда
		ОбновитьСписокРабочейГруппы();

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВладельца(СсылкаНаОбъект)
	Возврат СсылкаНаОбъект.Владелец;
	
КонецФункции

&НаКлиенте
Процедура ОсновныеИсполнителиПриАктивизацииСтроки(Элемент)
	СтрокаИсполнителя=Элементы.ОсновныеИсполнители.ТекущиеДанные;
	
	Если СтрокаИсполнителя=Неопределено Тогда
		ОчиститьДанныеПользователя();
		Возврат;
		
	КонецЕсли;
	
	УстановитьДанныеПользователя(СтрокаИсполнителя);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеПользователя(СтрокаИсполнителя)
		
	ТочкаАдресации=СтрокаИсполнителя.ТочкаАдресации;
	
	//обновим текстовые данные
	ИсполнительТекущиеДанные=КП_ОбщееСервер.ПолучитьСтрокуКонтактныхДанныхПользователя(ТочкаАдресации);
	
	//найдем в списке
	НайденныйЭлемент=СписокФотографий.НайтиПоЗначению(ТочкаАдресации);
	Если НайденныйЭлемент=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	ИсполнительАдресФотографии=НайденныйЭлемент.Представление;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокРабочаяГруппаПриАктивизацииСтроки(Элемент)
	
	СтрокаИсполнителя=Элементы.СписокРабочаяГруппа.ТекущиеДанные;
	
	Если СтрокаИсполнителя=Неопределено Тогда
		ОчиститьДанныеПользователя();
		Возврат;
		
	КонецЕсли;
	
	УстановитьДанныеПользователя(СтрокаИсполнителя);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокФотографий()
	
	Для Каждого СтрокаТаблицы Из Объект.ОсновныеИсполнители Цикл
		ТочкаАдресации=СтрокаТаблицы.ТочкаАдресации;
		Если СписокФотографий.НайтиПоЗначению(ТочкаАдресации)<>Неопределено  Тогда
			Продолжить;
		КонецЕсли;
		
		Если КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ТочкаАдресации) Тогда
			//это пользователь
			ДвоичныеДанныеФотографии=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ТочкаАдресации);
		Иначе			
			//это ролевая адресация
			ДвоичныеДанныеФотографии=БиблиотекаКартинок.КП_РолеваяАдресация.ПолучитьДвоичныеДанные();
		КонецЕсли;
	
		Если НЕ ДвоичныеДанныеФотографии=Неопределено Тогда
			ПутьКФотографии=ПоместитьВоВременноеХранилище(ДвоичныеДанныеФотографии, УникальныйИдентификатор);
			СписокФотографий.Добавить(ТочкаАдресации, ПутьКФотографии);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//добавим по рабочей группе
	Запрос=Новый Запрос;
	Запрос.Текст=СписокРабочаяГруппа.ТекстЗапроса;
	Запрос.УстановитьПараметр("РабочаяГруппа", Объект.РабочаяГруппаОсновныхИсполнителей);
	ТаблицаРабочейГруппы=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Для Каждого СтрокаТаблицы Из ТаблицаРабочейГруппы Цикл
		ТочкаАдресации=СтрокаТаблицы.ТочкаАдресации;
		Если СписокФотографий.НайтиПоЗначению(ТочкаАдресации)<>Неопределено  Тогда
			Продолжить;
		КонецЕсли;
		
		Если КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ТочкаАдресации) Тогда
			//это пользователь
			ДвоичныеДанныеФотографии=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ТочкаАдресации);
		Иначе			
			//это ролевая адресация
			ДвоичныеДанныеФотографии=БиблиотекаКартинок.КП_РолеваяАдресация.ПолучитьДвоичныеДанные();
		КонецЕсли;
	
		Если ДвоичныеДанныеФотографии<>Неопределено Тогда
			ПутьКФотографии=ПоместитьВоВременноеХранилище(ДвоичныеДанныеФотографии, УникальныйИдентификатор);
			СписокФотографий.Добавить(ТочкаАдресации, ПутьКФотографии);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВСписокФотографию(ТочкаАдресации)
	Если СписокФотографий.НайтиПоЗначению(ТочкаАдресации)<>Неопределено Тогда
		//фотография уже есть в списке
		Возврат;
	КонецЕсли;
	
	Если КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ТочкаАдресации) Тогда
		//это пользователь
		ДвоичныеДанныеФотографии=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ТочкаАдресации);
	Иначе			
		//это ролевая адресация
		ДвоичныеДанныеФотографии=БиблиотекаКартинок.КП_РолеваяАдресацияБольшая.ПолучитьДвоичныеДанные();
	КонецЕсли;

	Если ДвоичныеДанныеФотографии<>Неопределено Тогда
		ПутьКФотографии=ПоместитьВоВременноеХранилище(ДвоичныеДанныеФотографии, УникальныйИдентификатор);
		СписокФотографий.Добавить(ТочкаАдресации, ПутьКФотографии);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДанныеПользователя()
	ИсполнительАдресФотографии="";
	ИсполнительТекущиеДанные="";

КонецПроцедуры

&НаКлиенте
Процедура ФлагПоказыватьТолькоНеЗавершенныеЭкземплярыПриИзменении(Элемент)
	ОбновитьСписокЭкземпляровПроцесса();
	
КонецПроцедуры

Процедура ОбновитьСписокЭкземпляровПроцесса()
	СписокЭкземпляровПроцесса.Параметры.УстановитьЗначениеПараметра("ВидПроцесса", Объект.Ссылка);
	СписокЭкземпляровПроцесса.Параметры.УстановитьЗначениеПараметра("Завершен", ?(ФлагПоказыватьТолькоНеЗавершенныеЭкземпляры, Ложь, NULL));

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытиеФормыВидовПодписокНаСобытия(РезультатИзмененияТипа, ДополнительныеПараметры) Экспорт
	Элементы.СписокПодписок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСрокВыполнения(Команда)
	
	Если Объект.ОсновныеИсполнители.Количество()=0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Please fill out the list of users.';ru='Сначала заполните список исполнителей.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_СкопироватьСрокВыполненияЗавершение", ЭтотОбъект), НСтр("ru='Установить всем исполнителям срок выполнения как у '; en='Do you want to set due date as ';")+СокрЛП(Объект.ОсновныеИсполнители[0].ТочкаАдресации)+"?", РежимДиалогаВопрос.ДаНет, , ,КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СкопироватьСрокВыполненияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    УстановитьСрокИсполненияКакУПервогоИсполнителя();
    
    Состояние(НСтр("en='Period of performance set.';ru='Срок исполнения установлен.'"));

КонецПроцедуры

Процедура УстановитьСрокИсполненияКакУПервогоИсполнителя()
	
	Если Объект.ОсновныеИсполнители.Количество()=0 Тогда
		Возврат;
		
	КонецЕсли;
	
	СтрокаПервогоИсполнителя=Объект.ОсновныеИсполнители[0];
	
	Для НомерСтроки=1 По Объект.ОсновныеИсполнители.Количество()-1 Цикл
		СтрокаТЧ=Объект.ОсновныеИсполнители[НомерСтроки];
		СтрокаТЧ.СрокВыполненияЧасов=СтрокаПервогоИсполнителя.СрокВыполненияЧасов;
		СтрокаТЧ.НеИспользоватьГрафикРаботы=СтрокаПервогоИсполнителя.НеИспользоватьГрафикРаботы;
		СтрокаТЧ.СрокВыполненияДатаВремя=СтрокаПервогоИсполнителя.СрокВыполненияДатаВремя;
		СтрокаТЧ.СрокВыполненияТекст=СтрокаПервогоИсполнителя.СрокВыполненияТекст;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонФормированияНаименований(Команда)
	
	ПараметрыФормы=Новый Структура("ФорматШаблонаНаименований", Объект.ФорматШаблонаНаименований);
	ПараметрыФормы.Вставить("ВидПроцесса", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.КП_ВидыПроцессов.Форма.ФормаНастройкаФорматаНаименования", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ШаблонФормированияНаименованийЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ШаблонФормированияНаименованийЗавершение(РезультатОткрытия, ДополнительныеПараметры) Экспорт
    
    Если НЕ ПустаяСтрока(РезультатОткрытия) Тогда
        Объект.ФорматШаблонаНаименований=РезультатОткрытия;
        Модифицированность=Истина;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьКОтладкеИТестированию(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Please write down the item.';ru='Сначала запишите элемент.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы=Новый Структура("ВидПроцесса", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.КП_ВидыПроцессов.Форма.ФормаПодготовкиКОтладкеИТестированию", ПараметрыФормы,,,,, Новый
				ОписаниеОповещения("Оповещение_ЗакрытиеФормыПодготовкиКТестирванию", ЭтотОбъект));		

	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗакрытиеФормыПодготовкиКТестирванию(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПроекты(Команда)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыФормы, Элементы.ПроектыБизнесПроцесса); 


КонецПроцедуры

&НаКлиенте
Процедура ПроектыБизнесПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если Объект.ПроектыБизнесПроцесса.НайтиСтроки(Новый Структура("Проект", ЭлементМассива)).Количество()>0 Тогда
			Продолжить; //проект уже есть в списке
		КонецЕсли;
		
		НоваяСтрока=Объект.ПроектыБизнесПроцесса.Добавить();
		НоваяСтрока.Проект=ЭлементМассива;
		Состояние(НСтр("en='Added to the project ""';ru='Добавлен проект ""'")+СокрЛП(ЭлементМассива)+НСтр("ru='""';"));
		
	КонецЦикла;
	
	Модифицированность=Истина;
	
	УстановитьОформлениеГруппыПроцессов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьСкрытьОформленныеПодпискиНажатие(Элемент)
	ФлагОформленныеПодпискиОткрыты=НЕ ФлагОформленныеПодпискиОткрыты;
	
	УстановитьОтображениеПодписок();
	
КонецПроцедуры

Процедура УстановитьОтображениеПодписок()
	
	Если ФлагОформленныеПодпискиОткрыты Тогда
		Элементы.ДекорацияПоказатьСкрытьОформленныеПодписки.Заголовок=НСтр("ru='↑ Скрыть оформленные подписки'; en='↑ Hide subscriptions';");
	Иначе
		Элементы.ДекорацияПоказатьСкрытьОформленныеПодписки.Заголовок=НСтр("ru='↓ Показать оформленные подписки'; en='↓ Show subscriptions';");
	КонецЕсли;
	
	Элементы.ГруппаОформленныеПодпискиНаСобытия.Видимость=ФлагОформленныеПодпискиОткрыты;
		
КонецПроцедуры

Функция ЕстьОформленныеПодписки(ВидПроцесса)
	
	Возврат Ложь;
	//
	//Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	//                    |	КП_ВидыПодписокНаСобытия.Ссылка
	//                    |ИЗ
	//                    |	Справочник.КП_ВидыПодписокНаСобытия КАК КП_ВидыПодписокНаСобытия
	//                    |ГДЕ
	//                    |	КП_ВидыПодписокНаСобытия.ПометкаУдаления = ЛОЖЬ
	//                    |	И КП_ВидыПодписокНаСобытия.ЭтоГруппа = ЛОЖЬ
	//                    |	И КП_ВидыПодписокНаСобытия.ФильтрБизнесПроцессВид = &ВидПроцесса");
	//
	//Запрос.УстановитьПараметр("ВидПроцесса", ВидПроцесса);
	//Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	//
	//Если Выборка.Следующий() Тогда
	//	Возврат Истина;
	//	
	//Иначе
	//	Возврат Ложь;
	//	
	//КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьСрокИсполненияДляРабочейГруппы(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.РабочаяГруппаОсновныхИсполнителей) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Please set a Workgroup.';ru='Сначала укажите рабочую группу.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	СтрокаРГ=Неопределено;
	
	Если Объект.ОсновныеИсполнители.Количество()=1 Тогда
		СтрокаРГ=Объект.ОсновныеИсполнители[0];
		Если СтрокаРГ.ТочкаАдресации=Неопределено Тогда
			//это специальный режим хранения данных рабочей группы в первой строке
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаРГ=Неопределено ИЛИ ЗначениеЗаполнено(СтрокаРГ.ТочкаАдресации) Тогда
		//создадим специальную строку для хранения данных рабочей группы
		Объект.ОсновныеИсполнители.Очистить();
		СтрокаРГ=Объект.ОсновныеИсполнители.Добавить();
		СтрокаРГ.ТочкаАдресации=Неопределено;
			
	КонецЕсли;
		
	СтрокаТЧ=Объект.ОсновныеИсполнители[0];
	//установим параметры срока исплонения для рабочей группы
	
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("РабочаяГруппа", Объект.РабочаяГруппаОсновныхИсполнителей);
	
	ПараметрыЗаполнения.Вставить("ТочкаАдресации", Неопределено);
	ПараметрыЗаполнения.Вставить("ОтчетИсполнителя", СтрокаРГ.ОтчетИсполнителя);
	ПараметрыЗаполнения.Вставить("СрокВыполненияЧасов", СтрокаРГ.СрокВыполненияЧасов);
	ПараметрыЗаполнения.Вставить("СрокВыполненияДатаВремя", СтрокаРГ.СрокВыполненияДатаВремя);
	ПараметрыЗаполнения.Вставить("ИндивидуальныйТекстЗадания", СтрокаРГ.ИндивидуальныйТекстЗадания);
	ПараметрыЗаполнения.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаРГ.ИндивидуальноеНаименованиеЗадания);
	ПараметрыЗаполнения.Вставить("НеИспользоватьГрафикРаботы", СтрокаРГ.НеИспользоватьГрафикРаботы);
	ПараметрыЗаполнения.Вставить("ИднИсполнителя", СтрокаРГ.ИднИсполнителя);
	
	ПараметрыЗаполнения.Вставить("ТолькоПросмотр", Ложь);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("ПоказыватьПараметрыЗадачи", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Параметры рабочей группы'; en='Workgroup parameters';"));
	
	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_УстановитьСрокИсполненияДляРабочейГруппыЗавершение", ЭтотОбъект, Новый Структура("СтрокаРГ, СтрокаТЧ", СтрокаРГ, СтрокаТЧ)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_УстановитьСрокИсполненияДляРабочейГруппыЗавершение(СтруктураРезультата, ДополнительныеПараметры) Экспорт
    
    СтрокаРГ = ДополнительныеПараметры.СтрокаРГ;
    СтрокаТЧ = ДополнительныеПараметры.СтрокаТЧ;
    
    Если ТолькоПросмотр Тогда
        Возврат;
        
    КонецЕсли;
    
    Если СтруктураРезультата=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    //обновим данные
    СтрокаРГ.ТочкаАдресации=Неопределено;
    СтрокаРГ.ОтчетИсполнителя=СтруктураРезультата.ОтчетИсполнителя;	
    СтрокаРГ.СрокВыполненияЧасов=СтруктураРезультата.СрокВыполненияЧасов;	
    СтрокаРГ.СрокВыполненияДатаВремя=СтруктураРезультата.СрокВыполненияДатаВремя;	
    СтрокаРГ.ИндивидуальныйТекстЗадания=СтруктураРезультата.ИндивидуальныйТекстЗадания;	
    СтрокаРГ.ИндивидуальноеНаименованиеЗадания=СтруктураРезультата.ИндивидуальноеНаименованиеЗадания;	
    СтрокаРГ.НеИспользоватьГрафикРаботы=СтруктураРезультата.НеИспользоватьГрафикРаботы;	
    СтрокаРГ.ИднИсполнителя=СтруктураРезультата.ИднИсполнителя;	
    
    СтрокаРГ.СрокВыполненияТекст=КП_ОбщееКлиент.ПолучитьПредставлениеСрокаВыполнения(СтрокаТЧ.СрокВыполненияЧасов, СтрокаТЧ.СрокВыполненияДатаВремя, СтруктураРезультата.НеИспользоватьГрафикРаботы);

КонецПроцедуры

&НаКлиенте
Процедура СписокШаблоновПечатиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ=Истина;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_СписокШаблоновПечатиПередНачаломДобавленияЗавершение", ЭтотОбъект), НСтр("en='Please write down the type of process. Do you want to save now?';ru='Сначала запишите вид процесса. Записать сейчас?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	СписокШаблоновПечатиПередНачаломДобавленияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СписокШаблоновПечатиПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    Иначе
        Попытка
            Записать();
        Исключение
            КП_ОбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
            Возврат;
        КонецПопытки;
        
    КонецЕсли;
    
    
    СписокШаблоновПечатиПередНачаломДобавленияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СписокШаблоновПечатиПередНачаломДобавленияФрагмент()
    
    Перем ПараметрыФормы, Результат, Форма;
    
    ПараметрыФормы = Новый Структура("ВыборШаблона", Истина);
    ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_СписокШаблоновПечатиПередНачаломДобавленияФрагментЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СписокШаблоновПечатиПередНачаломДобавленияФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат=Неопределено Тогда
        Возврат;
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	СхемаБизнесПроцесса.Записать("C:\1.grs");
		
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеИсполнителиПередНачаломИзменения(Элемент, Отказ)
	Отказ=Истина;
	
	СтрокаТЧ=Элементы.ОсновныеИсполнители.ТекущаяСтрока;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуАдресации(СтрокаТЧ);
	
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТонкийКлиентИнструкцияПодключенияСсылкаНажатие(Элемент)
	ОткрытьФорму("Обработка.КП_Информация.Форма.ФормаРедактированиеПроцессаВебКлиент",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПроектыБизнесПроцессаПриИзменении(Элемент)
	УстановитьОформлениеГруппыПроцессов();
КонецПроцедуры

#КонецОбласти

#Область Инициализация

СрокПоУмолчаниюЧасов=8;
СрокПоУмолчаниюДата=Неопределено;

#КонецОбласти
