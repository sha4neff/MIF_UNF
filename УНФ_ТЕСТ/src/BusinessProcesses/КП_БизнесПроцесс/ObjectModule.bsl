#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ)
	
	Если ПометкаУдаления Тогда
		КП_СхемаКБПСервер.ПометитьНаУдалениеТочки(Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если НЕ ПометкаУдаления Тогда
		//сформируем дайджест ссылок
		
		СтрокаДайджестаСсылок="";
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	КП_СсылкиПроцессов.Объект КАК СсылкаНаПрикрепленныйОбъект
		                    |ИЗ
		                    |	РегистрСведений.КП_СсылкиПроцессов КАК КП_СсылкиПроцессов
		                    |ГДЕ
		                    |	КП_СсылкиПроцессов.БизнесПроцесс = &БизнесПроцесс");
							
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			СсылкаНаПрикрепленныйОбъект=Выборка.СсылкаНаПрикрепленныйОбъект;
			
			ПредставлениеОбъекта=КП_ОбщееСервер.ПолучитьПредставлениеОбъекта(СсылкаНаПрикрепленныйОбъект);

			СтрокаДайджестаСсылок=СтрокаДайджестаСсылок+?(СтрокаДайджестаСсылок="", "", ", ")+ПредставлениеОбъекта;
			Если СтрДлина(СтрокаДайджестаСсылок)>512 Тогда
				СтрокаДайджестаСсылок=Лев(СтрокаДайджестаСсылок, 509)+"...";
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		ДайджестСсылокНаОбъекты=СтрокаДайджестаСсылок;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения)=Тип("Структура") Тогда
		ДанныеЗаполнения.Свойство("ВидПроцесса", ВидПроцесса);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СхемаКБПВыполненаПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	//проверим, выполнена ли схема КБП, схема может быть выполнена сразу после запуска (если в ней нет задач)
	
	//Если Ссылка.Завершен Тогда
	//	Результат=Истина;
	//Иначе
		Результат=КП_Процессы.СхемаКБПЗавершена(Ссылка);
	//КонецЕсли;
	
КонецПроцедуры

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  Вызывается из процедуры УправлениеДоступом.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений, возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ТестовыйРежим=Истина;
	
	// Логика ограничения прав
	//     Чтения, Добавления, Изменения, Удаления:
	//         (Автор ИЛИ КонтролерКБП) И Контакт
	
	// Чтение, Добавление, Изменение: 
	//		набор №0.
	
	НомерНабора=0;
	
	Строка=Таблица.Добавить();
	Строка.ВидДоступа=ПланыВидовХарактеристик.ВидыДоступа.КП_ВидыПроцессов;
	Строка.НомерНабора=НомерНабора;
	Строка.ЗначениеДоступа=Ссылка.ВидПроцесса;
	Строка.Чтение=Истина;
	Строка.Добавление=Истина;
	Строка.Изменение=Истина;
	Строка.Удаление=Истина;
	
	НомерНабора=НомерНабора+1;
	Строка=Таблица.Добавить();
	Строка.ВидДоступа=ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	Строка.НомерНабора=НомерНабора;
	Строка.ЗначениеДоступа=Ссылка.Автор;
	Строка.Чтение=Истина;
	Строка.Добавление=Истина;
	Строка.Изменение=Истина;
	Строка.Удаление=Истина;
	
	КонтролерПроцесса=Ссылка.Контролер;
	Если ЗначениеЗаполнено(КонтролерПроцесса) И КонтролерПроцесса<>Ссылка.Автор Тогда
		НомерНабора=НомерНабора+1;
		Строка=Таблица.Добавить();
		Строка.ВидДоступа=ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
		Строка.НомерНабора=НомерНабора;
		Строка.ЗначениеДоступа=КонтролерПроцесса;
		Строка.Чтение=Истина;
		Строка.Добавление=Истина;
		Строка.Изменение=Истина;
		Строка.Удаление=Ложь;		
	КонецЕсли;
	
	//добавим исполнителей
	
	СписокИсполнителей=КП_Процессы.ПолучитьСписокВсехИсполнителейПроцесса(Ссылка);
	
	Для Каждого ЭлементИсполнитель Из СписокИсполнителей Цикл
		
		ТекущийИсполнитель=ЭлементИсполнитель.Значение;
		//добавляем новую строку в таблицу
		НомерНабора=НомерНабора+1;
		
		Строка=Таблица.Добавить();
		Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
		Строка.НомерНабора     = НомерНабора;
		Строка.ЗначениеДоступа = ТекущийИсполнитель;
		Строка.Чтение=Истина;
		Строка.Добавление=Ложь;
		Строка.Изменение=Истина;
		Строка.Удаление=Ложь;

	КонецЦикла;
	
	//Если НаборыУчастников.Количество() > 0 Тогда
	//	// добавление в таблицу Таблица таблицы НаборУчастников
	//	// с умножение наборов таблицы на наборы участников по всем правам.
	//	
	//	УправлениеДоступом.ДобавитьНаборыЗначенийДоступа(Таблица, НаборыУчастников, Истина);
	//	
	//КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНаборыЗначенийДоступа()

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	ДатаЗавершения=ТекущаяДата();
	
КонецПроцедуры

Процедура ВыполнениеКорпоративногоПроцессаПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	КП_Процессы.ОбработатьМаршрутКБП(Ссылка, Ссылка);

КонецПроцедуры

#КонецОбласти

