#Область ПеременныеМодуля

&НаКлиенте
Перем ИдетПроцессОформленияСхемыКБП;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
	ЭтоВебКлиент=Истина;
	#Иначе
	ЭтоВебКлиент=Ложь;
	#КонецЕсли
	
	ТекущийПользователь=Пользователи.ТекущийПользователь();
	Элементы.Список.РежимВыбора=ЭтаФорма.Параметры.РежимВыбора;
		
	ПрочитатьНастройкиСервером();	
	
	УстановитьОформлениеСтраницГрафика();
	
	ОбновитьСписок();
	
	Элементы.ВыбранныйПроект.Видимость=ПолучитьФункциональнуюОпцию("УчетПоПроектам");
	
	КП_ОформлениеСтрокСервер.УстановитьОформлениеСписка(Список, "Наименование");
	
КонецПроцедуры

&НаКлиенте
Процедура ТипГрафикаПриИзменении(Элемент)
	УстановитьОформлениеСтраницГрафика();
	ЗаписатьНастройкиСервером();
	СписокПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура АвторПроцессаПриИзменении(Элемент)
	ОбновитьСписок();	
	ЗаписатьНастройкиСервером();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПроцессаПриИзменении(Элемент)
	
	ОбновитьСписок();
	ЗаписатьНастройкиСервером();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если НЕ ФлагПоказыватьДиаграммы Тогда
		Возврат;
	КонецЕсли;
	
	//ВыбраннаяСтрока=Элементы.Список.ТекущиеДанные;
	ВыбраннаяСтрока=Элементы.Список.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ИдетПроцессОформленияСхемыКБП Тогда
		ИдетПроцессОформленияСхемыКБП=Истина;
		
		Если ТипГрафика=0 Тогда
			ПоказатьСхемуБизнесПроцесса(ВыбраннаяСтрока);
		Иначе
			ПоказатьДиаграммуБизнесПроцесса(ВыбраннаяСтрока);
		КонецЕсли;
		
		ИдетПроцессОформленияСхемыКБП=Ложь;
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура СхемаКБПВыбор(Элемент)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СхемаКБПВыборЗавершение", ЭтотОбъект), НСтр("ru='Открыть корпоративный бизнес-процесс?';en='Do you want to open business process?'"), РежимДиалогаВопрос.ДаНет, 60, ,КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

&НаКлиенте
Процедура СхемаКБПВыборЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ВыбраннаяСтрока=Элементы.Список.ТекущаяСтрока;
    Если ВыбраннаяСтрока=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ПоказатьЗначение(Неопределено, ВыбраннаяСтрока);

КонецПроцедуры

&НаСервере
Процедура ПоказатьСхемуБизнесПроцесса(СсылкаНаСтрокуПроцесса)
	
	Если СсылкаНаСтрокуПроцесса=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаБизнесПроцесс=СсылкаНаСтрокуПроцесса.Ссылка;
	
	Если СсылкаНаБизнесПроцесс.ВизуальнаяСхемаСкопирована Тогда
		ХранилищеКарты=СсылкаНаБизнесПроцесс.ХранилищеКартыПроцесса.Получить();
	Иначе
		//возмем карту из вида процесса
		ХранилищеКарты=СсылкаНаБизнесПроцесс.ВидПроцесса.ХранилищеКартыПроцесса.Получить();	
	КонецЕсли;
	
	Если ХранилищеКарты=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	СхемаКБП=ХранилищеКарты;
	
	//оформим схему КБП
	КП_СхемаКБПСервер.ОформитьСхемуЭкземпляраПроцесса(СхемаКБП, СсылкаНаБизнесПроцесс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="КП_КорпоративныйБизнесПроцесс" И (Параметр="Записан" ИЛИ Параметр="Завершен" ИЛИ Параметр="Перезапущен") Тогда
		Элементы.Список.Обновить();
		СписокПриАктивизацииСтроки(Неопределено);

		
	ИначеЕсли ИмяСобытия="КП_Задача" Тогда
		Если Параметр="Выполнена" Тогда
			БизнесПроцессЗаписаннойЗадачи=ПолучитьБизнесПроцессЗадачи(Источник);
			СтрокаКБП=Элементы.Список.ТекущаяСтрока;
			Если БизнесПроцессЗаписаннойЗадачи<>СтрокаКБП Тогда
				Возврат;
				
			КонецЕсли;
			
			СписокПриАктивизацииСтроки(Неопределено);
			
		ИначеЕсли ТипГрафика=1 Тогда
			БизнесПроцессЗаписаннойЗадачи=ПолучитьБизнесПроцессЗадачи(Источник);
			СтрокаКБП=Элементы.Список.ТекущаяСтрока;
			
			Если БизнесПроцессЗаписаннойЗадачи<>СтрокаКБП Тогда
            	Возврат;
				
			КонецЕсли;
			
			//обновим диаграмму после любой записи задачи
			СписокПриАктивизацииСтроки(Неопределено);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия="КП_ИзменениеНастройкиЦвета" Тогда
		 ОбновитьОформлениеСписка();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьБизнесПроцессЗадачи(ЗадачаКБП)
	Возврат ЗадачаКБП.БизнесПроцесс;
	
КонецФункции

Процедура ОбновитьСписок()
	
	Список.Параметры.УстановитьЗначениеПараметра("ВидПроцесса", ?(ЗначениеЗаполнено(ВидПроцесса), ВидПроцесса, NULL));
	Список.Параметры.УстановитьЗначениеПараметра("Автор", ?(ЗначениеЗаполнено(АвторПроцесса), АвторПроцесса, NULL));
	Список.Параметры.УстановитьЗначениеПараметра("Проект", ?(ЗначениеЗаполнено(ВыбранныйПроект), ВыбранныйПроект, NULL));
	Список.Параметры.УстановитьЗначениеПараметра("ПоказыватьЗавершенные", ?(ФлагПоказыватьЗавершенные, NULL, Ложь));	
	Список.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
		
	Элементы.СписокВидПроцесса.Видимость=НЕ ЗначениеЗаполнено(ВидПроцесса);
    Элементы.Автор.Видимость=НЕ ЗначениеЗаполнено(АвторПроцесса);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПроцесса(Команда)
	
	ВыбраннаяСтрока=Элементы.Список.ТекущаяСтрока;
	
	Если ВыбраннаяСтрока=Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Сначала выберите строку с бизнес-процессом.';en='Please select the line with the business process.'"));
		Возврат;
		
	КонецЕсли;

	ПараметрыЗаполнения=Новый Структура("БизнесПроцесс", ВыбраннаяСтрока);
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыЗаполнения);
	
	ФормаСписка=ПолучитьФорму("Задача.КП_Задача.Форма.ФормаСпискаПоПроцессу", ПараметрыФормы);
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура УстановитьОформлениеСтраницГрафика()
	
	Если НЕ ФлагПоказыватьДиаграммы Тогда
		Элементы.ГруппаПраво.Видимость=Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаПраво.Видимость=Истина;
	КонецЕсли;
	
	Если ТипГрафика=0 Тогда
		Элементы.ГруппаДиаграмма.Видимость=Ложь;
		Элементы.ГруппаСхема.Видимость=Истина;	
	ИначеЕсли ТипГрафика=1 Тогда 
		Элементы.ГруппаСхема.Видимость=Ложь;
		Элементы.ГруппаДиаграмма.Видимость=Истина;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьДиаграммуБизнесПроцесса(СсылкаНаБизнесПроцесс)
	
	СсылкаНаБизнесПроцесс=СсылкаНаБизнесПроцесс.Ссылка; 
	
	// Формируем запрос для заполнения диаграммы Ганта.
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	КП_Задача.Ссылка КАК Задача,
	              |	КП_Задача.Исполнитель,
	              |	КП_Задача.Выполнена КАК Выполнена,
	              |	ЕСТЬNULL(КП_Задача.ДатаВыполненияФакт, &ДатаКон) КАК ДатаОкончанияФакт,
				  |	ЕСТЬNULL(КП_Задача.ДатаВыполненияПлан, &ДатаКон) КАК ДатаОкончанияПлан,
	              //|	ПараметрДатаВыполненияПлан.ЗначениеПараметра КАК ДатаОкончанияПлан,
	              |	ПараметрДатаНачалаВыполненияСрезПоследних.ЗначениеПараметра КАК ДатаНачалаФакт
	              |ИЗ
	              |	Задача.КП_Задача КАК КП_Задача
				  //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ПараметрыЗадач.СрезПоследних(&ДатаКон, ПараметрЗадачи = &ПараметрДатаВыполненияПлан) КАК ПараметрДатаВыполненияПлан
				  //|		ПО (ПараметрДатаВыполненияПлан.Задача = КП_Задача.Ссылка)
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ПараметрыЗадач.СрезПоследних(&ДатаКон, ПараметрЗадачи = &ПараметрДатаНачалаВыполнения) КАК ПараметрДатаНачалаВыполненияСрезПоследних
	              |		ПО ПараметрДатаНачалаВыполненияСрезПоследних.Задача = КП_Задача.Ссылка
	              |ГДЕ
	              |	КП_Задача.ПометкаУдаления = ЛОЖЬ
	              |	И КП_Задача.БизнесПроцесс = &БизнесПроцесс
	              |	И ПараметрДатаНачалаВыполненияСрезПоследних.ЗначениеПараметра <> &ПустаяДата";

	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("БизнесПроцесс", СсылкаНаБизнесПроцесс);
	Запрос.УстановитьПараметр("ПараметрДатаНачалаВыполнения", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ДатаНачалаВыполнения);
	//Запрос.УстановитьПараметр("ПараметрДатаВыполненияПлан", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ДатаВыполненияПлан);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	

	// Получаем диаграмму и запрещаем на время заполнения ее обновление.
	// В случае большого объема данных это существенно ускорит выполнение.
	ДиаграммаПроцесса.Обновление = Ложь;
	ДиаграммаПроцесса.Очистить();
	
	// Создаем таблицу значений, в которую, по мере обхода запроса, будем заносить связи.
	Связи = Новый ТаблицаЗначений;
	Связи.Колонки.Добавить("Конец");
	Связи.Колонки.Добавить("Начало");
	
	// Серия будет одна.
	Серия = ДиаграммаПроцесса.Серии.Добавить();
	ДиаграммаПроцесса.ОтображатьЛегенду=Ложь;
	
	// Заводим переменные для определения максимальной и минимальной дат работ.
	МаксимальнаяДата = NULL;
	МинимальнаяДата = NULL;
	
	ЦветВыполненого = WebЦвета.ТемноЗеленый;
	ЦветНевыполненого = WebЦвета.ТемноГрифельноСерый;
	ЦветПросроченного = WebЦвета.ТемноКрасный;
	
	Пока Выборка.Следующий() = Истина Цикл
		// Поскольку серия одна, каждой работе соответствует одна точка и одно значение.
		
		// Инициализируем точку.
		Точка = ДиаграммаПроцесса.УстановитьТочку(Выборка.Задача, Неопределено);
		Точка.Текст = СокрЛП(Выборка.Исполнитель);
		
		ДвоичныеДанные= КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(Выборка.Исполнитель);
		Если ДвоичныеДанные=Неопределено Тогда
			Точка.Картинка=Новый Картинка;
		Иначе
			Точка.Картинка=Новый Картинка(ДвоичныеДанные, Истина);
		КонецЕсли;
		
		// Инициализиреум значение.
		Значение = ДиаграммаПроцесса.ПолучитьЗначение(Точка, Серия);
		ДатаОкончанияФакт=Выборка.ДатаОкончанияФакт;
		ДатаНачалаФакт=Выборка.ДатаНачалаФакт;
		ДатаОкончанияПлан=Выборка.ДатаОкончанияПлан;
		
		//установим минимальную длительность вполнения задачи 15 минут, иначе её не видно на экране
		МинимальныйИнтервал=15*60; //15 минут
		ДлительностьВыполненияЗадачи=ДатаОкончанияФакт-ДатаНачалаФакт;
		Если ДлительностьВыполненияЗадачи<МинимальныйИнтервал Тогда
			ДатаОкончанияФакт=ДатаНачалаФакт+МинимальныйИнтервал;
			
		КонецЕсли;
		
		Если ДатаНачалаФакт <> NULL И 
			 ДатаОкончанияФакт <> NULL И
			 ДатаОкончанияФакт > ДатаНачалаФакт Тогда	
			 			
			// Добавляем интервал. В данном примере у каждой работы единственный интервал.
			Интервал = Значение.Добавить();
			Интервал.Начало = ДатаНачалаФакт;
			Интервал.Конец = ДатаОкончанияФакт;
			
			// Формируем подпись.
			//УстановитьТекстЗначенияДиаграммы(Интервал);
			
			// Определеям статус задачи.
			Если Выборка.Выполнена = Истина Тогда							 
				Значение.Цвет = ЦветВыполненого;
				
			Иначе 
				//не выполнена
				Если ЗначениеЗаполнено(ДатаОкончанияПлан) И ДатаОкончанияПлан < ТекущаяДата() Тогда
					Значение.Цвет = ЦветПросроченного;
				Иначе
					Значение.Цвет = ЦветНевыполненого;
				КонецЕсли;
				
			КонецЕсли;				
			
			// Если надо, корректируем максимальную и минимальную даты.
			Если МаксимальнаяДата = NULL Или МаксимальнаяДата < ДатаОкончанияФакт Тогда
				МаксимальнаяДата = ДатаОкончанияФакт;
			КонецЕсли;				
			
			Если МинимальнаяДата = NULL Или МинимальнаяДата > ДатаНачалаФакт Тогда
				МинимальнаяДата = ДатаНачалаФакт;
			КонецЕсли;	
			
		КонецЕсли;		
		
	КонецЦикла;
	
	//создадим интервалы в часах	
	Если МинимальнаяДата <> NULL Тогда
		Час = 60*60; //секунд
		МаксимальнаяДата = МаксимальнаяДата+Час*8;
		ТекДата = МинимальнаяДата;
		Пока ТекДата <= МаксимальнаяДата Цикл;
			
			КонецИнтервала= ТекДата+Час;
			
			ДиаграммаПроцесса.ИнтервалыФона.Добавить(ТекДата, КонецИнтервала);
			
			ТекДата = КонецИнтервала;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	ДиаграммаПроцесса.АвтоОпределениеПолногоИнтервала=Ложь;
	ДиаграммаПроцесса.ЕдиницаПериодическогоВарианта=ТипЕдиницыШкалыВремени.Час;
	Если ЗначениеЗаполнено(МинимальнаяДата) И ЗначениеЗаполнено(МаксимальнаяДата) Тогда
		ДиаграммаПроцесса.УстановитьПолныйИнтервал(МинимальнаяДата, МаксимальнаяДата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФлагПоказыватьЗавершенныеПриИзменении(Элемент)

	ОбновитьСписок();
	ЗаписатьНастройкиСервером();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСистемыеПроцессыПриИзменении(Элемент)
	ОбновитьСписок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСервером()
	
	Пользователь=СокрЛП(ТекущийПользователь);

	КП_ОбщееСервер.СохранитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ПоказыватьСистемыеПроцессы", ПоказыватьСистемыеПроцессы, , Пользователь);
	КП_ОбщееСервер.СохранитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ФлагПоказыватьЗавершенные", ФлагПоказыватьЗавершенные, , Пользователь);
	КП_ОбщееСервер.СохранитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ФлагПоказыватьДиаграммы", ФлагПоказыватьДиаграммы, , Пользователь);
	
	КП_ОбщееСервер.СохранитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ВидПроцесса", ВидПроцесса, , Пользователь);
	КП_ОбщееСервер.СохранитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "АвторПроцесса", АвторПроцесса, , Пользователь);
	КП_ОбщееСервер.СохранитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ВыбранныйПроект", ВыбранныйПроект, , Пользователь);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиСервером()
	
	Пользователь=СокрЛП(ТекущийПользователь);
		
	//ПоказыватьСистемыеПроцессы=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ПоказыватьСистемыеПроцессы", , Пользователь);
	
	ФлагПоказыватьЗавершенныеЗначение=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ФлагПоказыватьЗавершенные", , Пользователь);
	Если ФлагПоказыватьЗавершенныеЗначение=Неопределено Тогда
		ФлагПоказыватьЗавершенные=Истина;
	Иначе
		ФлагПоказыватьЗавершенные=ФлагПоказыватьЗавершенныеЗначение;
	КонецЕсли;
	
	ФлагПоказыватьДиаграммыЗначение=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ФлагПоказыватьДиаграммы", , Пользователь);
	Если ФлагПоказыватьДиаграммыЗначение=Неопределено Тогда
		ФлагПоказыватьДиаграммы=Истина;
	Иначе
		ФлагПоказыватьДиаграммы=ФлагПоказыватьДиаграммыЗначение;
	КонецЕсли;	
	
	ВидПроцесса=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ВидПроцесса", , Пользователь);
	АвторПроцесса=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "АвторПроцесса", , Пользователь);
	ВыбранныйПроект=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ВыбранныйПроект", , Пользователь);
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") Тогда
		//фунциальная опция включена
		ВыбранныйПроект=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныеПроцессы.ФормаСписка", "ВыбранныйПроект", , Пользователь);
	Иначе
		//фунциальная опция выключена
		ВыбранныйПроект=Неопределено;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйПроектПриИзменении(Элемент)
	ОбновитьСписок();
	ЗаписатьНастройкиСервером();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокРеквизитов()
	СписокРеквизитов=КП_ОбщееСервер.ПолучитьСписокРеквизитов(ЭтаФорма);	
	Возврат СписокРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ФлагПоказыватьДиаграммыПриИзменении(Элемент)
	УстановитьОформлениеСтраницГрафика();
	ЗаписатьНастройкиСервером();
КонецПроцедуры

&НаСервере
Процедура ОбновитьОформлениеСписка()
	КП_ОформлениеСтрокСервер.УстановитьОформлениеСписка(Список, "Наименование");
	ОбновитьСписок();
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ИдетПроцессОформленияСхемыКБП=Ложь;

#КонецОбласти
