#Область ПеременныеМодуля

&НаКлиенте
Перем СостояниеОбъекта; 

&НаКлиенте
Перем СхемаПроцессаИзменена; 

&НаКлиенте
Перем ВсегоШаговИнициализации; 

&НаКлиенте
Перем ИнициализацияПроцент;

&НаКлиенте
Перем ВеличинаШагаИнициализации;

&НаКлиенте
Перем СтрокаИнициализацииПроцесса;

&НаКлиенте
Перем СрокПоУмолчаниюЧасов;

&НаКлиенте
Перем СрокПоУмолчаниюДата;

&НаКлиенте
Перем ИдетСменаСтраницы;

&НаКлиенте
Перем ОтменитьЗапускПроцесса;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Если ВебКлиент Тогда
	ЭтоВебКлиент=Истина;
	#Иначе
	ЭтоВебКлиент=Ложь;
	#КонецЕсли
	
	ТекущийПользователь=Пользователи.ТекущийПользователь();
	
	ФлагИспользованиеПроектов=ПолучитьФункциональнуюОпцию("УчетПоПроектам");
	
	Если (НЕ Параметры.Ключ.Пустая()) И (НЕ ОткрытиеВозможно()) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нет прав на открытие объекта.';en='No permission to open the object.'"));
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	СписокРеквизитовПроцесса=Новый СписокЗначений;
	
	Если Параметры.Свойство("ВидПроцесса") Тогда
		Объект.ВидПроцесса=Параметры.ВидПроцесса;
	КонецЕсли;		
	
	ПрочитатьНастройкиСервером();
    		
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Дата=ТекущаяДата();
				
		Если Параметры.Свойство("ЗначениеКопирования") Тогда
			КопируемыйПроцесс=Параметры.ЗначениеКопирования;
		Иначе
			КопируемыйПроцесс=Неопределено;
		КонецЕсли;
		
		Если Объект.ВидПроцесса.ЭтоГруппа Тогда
			Объект.ВидПроцесса=Неопределено;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(КопируемыйПроцесс) Тогда
			//скопируем реквизиты, остальные данные должны быть скопированы автоматически
			ТаблицаРеквизитов=КП_Процессы.ПолучитьТаблицуРеквизитовПроцесса(КопируемыйПроцесс.Ссылка);  //ЗначениеРеквизита | РеквизитПроцесса
			Если ТаблицаРеквизитов.Количество()>0 Тогда
				Объект.Наименование=СокрЛП(КопируемыйПроцесс.Наименование)+" Копия";
			
				Если Параметры.Ключ.Пустая() Тогда
					Попытка
						Записать();
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
					КонецПопытки;
					
				КонецЕсли;
				
				//установим значения реквизитов по полученному списку
				Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
					ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
					РеквизитПроцесса=СтрокаТаблицы.РеквизитПроцесса;
					
					Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
						Примечание="Установлено при копировании из """+СокрЛП(КопируемыйПроцесс)+"""";
						КП_Процессы.УстановитьЗначениеРеквизита(Объект.Ссылка, РеквизитПроцесса, ЗначениеРеквизита, ,Примечание);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Параметры.Свойство("СписокСотрудников") Тогда
			//если передан список сотрудников, то рабочая группа будет игнорироваться
			РабочаяГруппаИсполнителей=Неопределено;
			
		Иначе
			Если Параметры.Свойство("РабочаяГруппа") И ЗначениеЗаполнено(Параметры.РабочаяГруппа) Тогда
			    РабочаяГруппаИсполнителей=Параметры.РабочаяГруппа;

			ИначеЕсли Объект.ВидПроцесса.ИсточникОсновныхИсполнителей=1 И ЗначениеЗаполнено(Объект.ВидПроцесса.РабочаяГруппаОсновныхИсполнителей) Тогда
				РабочаяГруппаИсполнителей=Объект.ВидПроцесса.РабочаяГруппаОсновныхИсполнителей;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
			Объект.Автор=Пользователи.ТекущийПользователь();			
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(Объект.Контролер) Тогда
			Объект.Контролер=Объект.Автор;			
		КонецЕсли;
	
		ЗаполнитьПоВидуБизнесПроцесса();
		
		Если ЗначениеЗаполнено(ВидПроцесса) Тогда
			//для нового экземпляра показывать схему процесса не очень нужно, лучше сразу параметры
			Элементы.СтраницыФормыБизнесПроцесса.ТекущаяСтраница=Элементы.СтраницаПараметрыБизнесПроцесса;
		КонецЕсли;

		Если ЗначениеЗаполнено(РабочаяГруппаИсполнителей) Тогда
			//в качестве основного списка в параметрах передана рабочая группа
			Объект.ОсновныеИсполнители.Очистить();
			
			Если ВидПроцесса.ОсновныеИсполнители.Количество()=1 Тогда
				//строка для копирования информации о сроках исполнения для рабочей группы
				СтрокаРГ=ВидПроцесса.ОсновныеИсполнители[0];
			Иначе
				СтрокаРГ=Неопределено;
			КонецЕсли;
			
			Для Каждого СотрудникГруппы Из РабочаяГруппаИсполнителей.Сотрудники Цикл
				НоваяСтрока=Объект.ОсновныеИсполнители.Добавить();	
				НоваяСтрока.ТочкаАдресации=СотрудникГруппы.ТочкаАдресации;
				НоваяСтрока.ИднИсполнителя=КП_ОбщееСервер.СформироватьИднИсполнителя(СотрудникГруппы.ТочкаАдресации);
				
				Если СтрокаРГ=Неопределено Тогда
					НоваяСтрока.ОтчетИсполнителя=Неопределено;
					НоваяСтрока.СрокВыполненияТекст="";
					НоваяСтрока.ИндивидуальныйТекстЗадания="";
					НоваяСтрока.ИндивидуальноеНаименованиеЗадания="";
					НоваяСтрока.СрокВыполненияЧасов=-1;
					НоваяСтрока.ВидНаправленияПараллельное=?(Объект.ДействиеПараллельное, 1, 0);
					НоваяСтрока.НеИспользоватьГрафикРаботы=Ложь;
					
				Иначе
					//скопируем данные строки настройки рабочей группы в строку исполнителя
					НоваяСтрока.ОтчетИсполнителя=СтрокаРГ.ОтчетИсполнителя;
					НоваяСтрока.СрокВыполненияТекст=СтрокаРГ.СрокВыполненияТекст;
					НоваяСтрока.ИндивидуальныйТекстЗадания=СтрокаРГ.ИндивидуальныйТекстЗадания;
					НоваяСтрока.ИндивидуальноеНаименованиеЗадания=СтрокаРГ.ИндивидуальноеНаименованиеЗадания;
					НоваяСтрока.СрокВыполненияЧасов=СтрокаРГ.СрокВыполненияЧасов;
					НоваяСтрока.ВидНаправленияПараллельное=СтрокаРГ.ВидНаправленияПараллельное;
					НоваяСтрока.НеИспользоватьГрафикРаботы=СтрокаРГ.НеИспользоватьГрафикРаботы;
					НоваяСтрока.ВидНаправленияПараллельное=СтрокаРГ.ВидНаправленияПараллельное;
					НоваяСтрока.СрокВыполненияДатаВремя=СтрокаРГ.СрокВыполненияДатаВремя;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Параметры.Свойство("СписокСотрудников") Тогда
			
			//при создании процесса был передан список исполнителей
			СписокСотрудников=Параметры.СписокСотрудников;
			ОставлятьСуществующихВВидеПроцесса=Объект.ВидПроцесса.КопироватьОставлятьИсполнителейЗаданныхВНастройкеВида;
			ЗаполнитьСписокОсновныхИсполнителейПоСписку(СписокСотрудников, ОставлятьСуществующихВВидеПроцесса);
			
		КонецЕсли;
				
		ЭтаФорма.Модифицированность=Истина;
						
		БылНовым=Истина;
			
		Если Параметры.Свойство("СсылкаПроцесса") И ЗначениеЗаполнено(Объект.ВидПроцесса) Тогда
			Объект.Наименование=Объект.Наименование+" ("+СокрЛП(Параметры.СсылкаПроцесса)+")";
			Попытка
				ЭтаФорма.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;			
			КП_Процессы.ДобавитьОбъектВСписокСсылок(Объект.Ссылка, Параметры.СсылкаПроцесса);
		КонецЕсли;	
						
	Иначе //не новая форма
		ВидПроцесса=Объект.ВидПроцесса;
		
		ПрочитатьПараметрыБизнесПроцесса();
		
		УстановитьЗаголовокФормыСервером();
				
		Если ЗначениеЗаполнено(Объект.ТочкаВозвратаВВышестоящийПроцесс) Тогда
			ВышестоящийБизнесПроцесс=Объект.ТочкаВозвратаВВышестоящийПроцесс.ВладелецТочки;
			Элементы.ГруппаВышестоящийПроцесс.Видимость=Истина;
		КонецЕсли;
		
		УстановитьНаименованияПоВидуПроцесса(Объект.ВидПроцесса);
			
		БылНовым=Ложь;
		
	КонецЕсли;
	
	ЭтоПроцессТехПоддержки=Ложь;
	
	УстановитьОтображениеВидаРеквизитов();
	
	ОбновитьСпискиРеквизитов();
	
	ОсновнойСписокПараллельноеДействиеЧисло=?(Объект.ДействиеПараллельное, 1, 0);	
	
	ОбновитьСписокСсылок();	
	
	УстановитьОсновноеОформлениеФормы();
	
	ОбновитьСписокЖурналаПроцесса();
	
	ОсновныеИсполнителиДинамическийСписок.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);
	
	МодифицированСписокИсполнителей=Ложь;
	
	Если НЕ БылНовым И Параметры.Свойство("ОткрытьСхемуПроцесса") И Параметры.ОткрытьСхемуПроцесса=Истина Тогда
		Элементы.СтраницаСхемаБизнесПроцесса.Видимость=Истина;
				
	ИначеЕсли НЕ БылНовым И Параметры.Свойство("ОткрытьОсновныхИсполнителей") И Параметры.ОткрытьОсновныхИсполнителей=Истина Тогда
		Элементы.СтраницаОсновныеИсполнители.Видимость=Истина;
				
	КонецЕсли;
	
	УстановитьОтображениеИсторииИзмененияРеквизитов();	
	
	ШрифтПользователя=КП_ОбщееСервер.ПолучитьШрифтПользователя();
	Элементы.ТекстПроцессаФорматированный.Шрифт=ШрифтПользователя;
	
	УстановитьОформлениеЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если БылНовым Тогда
		Модифицированность=Истина;
		
		Если НЕ Параметры.Ключ.Пустая() Тогда
			Состояние(НСтр("ru='Процесс был записан при заполнении...';en='Process was recorded...'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		
		Если Параметры.ключ.Пустая() Тогда
			Попытка
				Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
		КП_Процессы.ДобавитьОбъектВСписокСсылок(Объект.Ссылка, ДокументОснование);
		ОбновитьСписокСсылок();
				
		Состояние(СокрЛП(ДокументОснование)+НСтр("ru=' добавлен в список ссылок.';"));
		
		Объект.Наименование=КП_Процессы.ПолучитьНаименованиеПоШаблону(Объект.Ссылка, ВидПроцесса);
		
	КонецЕсли;
	
	Если БылНовым И ЗначениеЗаполнено(Объект.ВидПроцесса) Тогда
		УстановитьЗаголовокФормыКлиентом();
	КонецЕсли;
		
	#Если ВебКлиент Тогда
	Элементы.СтраницыФормыБизнесПроцесса.ТекущаяСтраница=Элементы.СтраницаСхемаБизнесПроцесса;
	ОбновитьДанныеОткрытойСтраницы();
	#КонецЕсли
	
	УстановитьОформлениеЗаголовка();

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	Если БылНовым И Объект.СетьМаршрутныхТочек.Количество()=0 Тогда
		ЗаполненоУспешно=ЗаполнитьСетьМаршрутныхТочек();
		Если НЕ ЗаполненоУспешно Тогда
			ОтменитьЗапускПроцесса=Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПредварительнаяЗапись Тогда
		Возврат;
	КонецЕсли;
			
	ОбновитьСписокЖурналаПроцесса();
	
	ОсновныеИсполнителиДинамическийСписок.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);
		
	ОбновитьСписокСсылок();
	
	УстановитьОсновноеОформлениеФормы();
	
	ЗаписатьНастроенныеЦвета();
	
	Оповестить("КП_КорпоративныйБизнесПроцесс", "Записан", Объект.Ссылка);
	
	ОповеститьОбИзменении(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ХранилищеТекстаПроцесса=Новый ХранилищеЗначения(ТекстПроцессаФорматированный);		 
	
	Если Объект.ВизуальнаяСхемаСкопирована Тогда
		ТекущийОбъект.ХранилищеКартыПроцесса=Новый ХранилищеЗначения(СхемаБизнесПроцесса);
		
	Иначе		
		ТекущийОбъект.ХранилищеКартыПроцесса=Неопределено;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ТекущийОбъект.ВизуальнаяСхемаСкопирована Тогда
		ХранилищеКарты=ТекущийОбъект.ХранилищеКартыПроцесса.Получить();
	Иначе
		//загрузим схему из вида процесса
		ХранилищеКарты=ТекущийОбъект.ВидПроцесса.ХранилищеКартыПроцесса.Получить();
	КонецЕсли;
	
	Если НЕ ХранилищеКарты=Неопределено Тогда
		СхемаБизнесПроцесса=ХранилищеКарты;
	КонецЕсли;
	
	ТекстПроцессаФорматированный=ТекущийОбъект.ХранилищеТекстаПроцесса.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаБизнесПроцессаВыбор(Элемент)
	
	#Если ВебКлиент Тогда
	ПоказатьПредупреждение(Неопределено, НСтр("ru='Действие не доступно в веб-клиенте.';en='The action is not available in the web client.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
	Возврат;
	#КонецЕсли
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПроцесса) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не указан вид процесса. Редактирование не возможно.';en='Type of corporate process is not fill. Editing is not possible.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
		
	ЭлементСхемы=Элемент.ТекущийЭлемент;
	
	Если ИзменилсяСписокОсновныхИсполнителей Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_СхемаБизнесПроцессаВыборЗавершениеВопросОПродолжении", ЭтотОбъект, Новый Структура("ЭлементСхемы", ЭлементСхемы)), 
			НСтр("ru='Изменился список исполнителей, вид процесса будет записан. Продолжить?';en='Element will be saved. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет, , ,КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ОткрытьТочкуПроцесса(ЭлементСхемы);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПредварительнаяЗапись И ПустаяСтрока(Объект.Наименование) Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не указано наименование бизнес-процесса.';en='There is no name for bbusiness process.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога()); 
		Возврат;
		
	КонецЕсли;
	
	Объект.ДействиеПараллельное=(ОсновнойСписокПараллельноеДействиеЧисло=1);

	Если ИзменилсяСписокОсновныхИсполнителей Тогда
		ОбновитьКартинкиИсполнителейВСхеме();		
	КонецЕсли;
	
	//Если СхемаПроцессаИзменена Тогда
	//	//обновим список маршрутных точек
	//	УспешноЗаполнено=ЗаполнитьСетьМаршрутныхТочек();
	//	СхемаПроцессаИзменена=Ложь;
	//	КП_СхемаКБПСервер.ОформитьСхемуЭкземпляраПроцесса(СхемаБизнесПроцесса, Объект.Ссылка);
	//КонецЕсли;
	
	ЭтоНовый=Параметры.Ключ.Пустая();
	
	Если (СхемаПроцессаИзменена ИЛИ ПредварительнаяЗапись) И НЕ ЭтоНовый Тогда
		Отказ=НЕ ЗаполнитьСетьМаршрутныхТочек();
		Если Отказ Тогда
			ОтменитьЗапускПроцесса=Истина;
		Иначе
			СхемаПроцессаИзменена=Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ ПараметрыЗаписи.Свойство("Старт") Тогда
		//для записи вида "Старт" не записываем, т.к. к этому моменту процесс уже может быть выполнен и параметры изменены
		СохранитьПараметрыБизнесПроцесса();
		
	КонецЕсли;
	
	УстановитьЗаголовокФормыСервером();
	
	СохранитьРеквизитыФормы();
	
	ОбновитьСпискиРеквизитов();
	
	ОбновитьСпискиТекущихПараметровПроцесса();
	
	МодифицированСписокИсполнителей=Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыБизнесПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		Если Объект.ПроектыБизнесПроцесса.НайтиСтроки(Новый Структура("Проект", ЭлементМассива)).Количество()>0 Тогда
			Продолжить; //проект уже есть в списке
		КонецЕсли;
		
		НоваяСтрока=Объект.ПроектыБизнесПроцесса.Добавить();
		НоваяСтрока.Проект=ЭлементМассива;
		Состояние(НСтр("ru='Добавлен проект ""';en='Added to the project ""'")+СокрЛП(ЭлементМассива)+НСтр("ru='""';"));
		
	КонецЦикла;
	
	Модифицированность=Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьСкрытьПроектыНажатие(Элемент)
	ФлагПроектыБизнесПроцессаОткрыты=НЕ ФлагПроектыБизнесПроцессаОткрыты;
	
	УстановитьОтображениеПроектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКорпоративногоПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Объект.ВидПроцесса) Тогда
		//зададим вопрос об изменении
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ВидКорпоративногоПроцессаОбработкаВыбораЗавершение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение)), 
			НСтр("ru='Внимание! Данные бизнес-процесса будут перезаполнены по виду ""';en='The business process will refill by ""'")+СокрЛП(ВыбранноеЗначение)+НСтр("ru='"". Продолжить?'; en='"". Do you want to continue?';"), РежимДиалогаВопрос.ДаНет, 60,, КП_ОбщееКлиент.ЗаголовокДиалога());
	
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОформлениеЭлементов()
	
	Элементы.ГруппаПроектыБизнесПроцесса.Видимость=ПолучитьФункциональнуюОпцию("УчетПоПроектам");	
	
	Если Объект.Стартован Тогда
		КП_СхемаКБПСервер.ОформитьСхемуЭкземпляраПроцесса(СхемаБизнесПроцесса, Объект.Ссылка);
	КонецЕсли;
	
	Элементы.ДекорацияНаименование.Видимость=НЕ Объект.Стартован;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СхемаБизнесПроцессаВыборЗавершениеВопросОПродолжении(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ЭлементСхемы = ДополнительныеПараметры.ЭлементСхемы;
    
    Если ИзменилсяСписокОсновныхИсполнителей И РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    Иначе
        Попытка
            Записать();
            
        Исключение
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
            Возврат;
            
        КонецПопытки;
        
    КонецЕсли;
    
    Если ЭлементСхемы=Неопределено Тогда
        ПоказатьПредупреждение(Неопределено, НСтр("ru='Для редактирования процесса выберите элемент схемы.';en='Please click the element to edit.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
        
    КонецЕсли;
    
    Если НЕ КП_СхемаКБПКлиент.ЭтоНастраиваемыйВидЭлементаСхемы(ЭлементСхемы) Тогда
        Возврат;
        
	КонецЕсли;
	
	ОткрытьТочкуПроцесса(ЭлементСхемы);
   
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТочкуПроцесса(ЭлементСхемы)
    Попытка
        ОбработатьОткрытиеТочки(ЭлементСхемы);
        
	Исключение
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Открытие точки из схемы бизнес-процесса", "Ошибка", ОписаниеОшибки(),,Истина); 
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        
    КонецПопытки;
	
КонецПроцедуры

Процедура ПрочитатьПараметрыБизнесПроцесса()    
	
	СтруктураПараметровКБП=КП_Процессы.ПолучитьСтруктуруПараметровКБП(Объект.Ссылка);
	
	ДатаСтарта=СтруктураПараметровКБП.ДатаСтарта;
	ДатаЗавершения=СтруктураПараметровКБП.ДатаЗавершения;

КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыБизнесПроцесса()
	
	СтруктураПараметровКБП=Новый Структура;
	СтруктураПараметровКБП.Вставить("ДатаСтарта", ДатаСтарта);
	СтруктураПараметровКБП.Вставить("ДатаЗавершения", ДатаЗавершения);
	
	КП_Процессы.СохранитьСтруктуруПараметровКБП(СтруктураПараметровКБП, Объект.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПроцессаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ=Истина;
	ПоказатьПредупреждение(Неопределено, НСтр("ru='Реквизиты бизнес-процесса создаются только в настройках его вида.';en='Please create a new variable in business-process template.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога()); 

КонецПроцедуры

&НаКлиенте
Процедура ВидКорпоративногоПроцессаПриИзменении(Элемент)
	
	Если ПредыдущийВидКБП<>Объект.ВидПроцесса Тогда
		
		Если НЕ Параметры.Ключ.Пустая() Тогда
			ОчиститьТочкиПроцесса();
			
		КонецЕсли;
		
		ЗаполнитьПоВидуБизнесПроцесса();
		
		УстановитьОтображениеВидаРеквизитов();
		
		УстановитьЗаголовокФормыКлиентом();
				
		Если БылНовым И НЕ Параметры.Ключ.Пустая() Тогда
			Состояние(НСтр("ru='Процесс был записан при заполнении...';en='Process was saved...'"));
			
		КонецЕсли;
		
		Объект.ВизуальнаяСхемаСкопирована=Ложь;
		ОформлениеНадписиСхемы();
		
	КонецЕсли;
	
	Объект.ВизуальнаяСхемаСкопирована=Ложь;
	Элементы.СхемаБизнесПроцесса.ТолькоПросмотр=Истина;
	//Элементы.СхемаБизнесПроцесса.Доступность=Ложь;
	ОформлениеНадписиСхемы();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВидуБизнесПроцесса()
	
	ВидПроцесса=Объект.ВидПроцесса;
	
	Если НЕ ЗначениеЗаполнено(ВидПроцесса) Тогда
		Возврат;
		
	КонецЕсли;
	
	//запишем объект
	Если Параметры.Ключ.Пустая() Тогда
		Попытка
			Записать();
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;	
			
	//скопируем точки из вида в подпроцесса
	КП_СхемаКБПСервер.СкопироватьТочкиВидаВЭкземплярБП(ВидПроцесса, Объект.Ссылка);
	
	//заполним подпроцесс по выбранному виду (в том числе скопируем реквизиты)
	
	КП_Процессы.ЗаполнитьПроцессПоВиду(Объект, ВидПроцесса);	
	
	ОсновнойСписокПараллельноеДействиеЧисло=?(Объект.ДействиеПараллельное, 1, 0);
	
	//установим форматированный текст процесса
	ТекстПроцессаФорматированный=ВидПроцесса.ХранилищеТекстаПроцесса.Получить();
	
	СхемаБизнесПроцесса=ВидПроцесса.ХранилищеКартыПроцесса.Получить();		
	
	УстановитьНаименованияПоВидуПроцесса(ВидПроцесса);

	Пользователь=СокрЛП(ТекущийПользователь);
	
	Элементы.ТекстПроцессаФорматированный.Шрифт=ШрифтПользователя;
	
	Объект.Наименование=КП_Процессы.ПолучитьНаименованиеПоШаблону(Объект, ВидПроцесса);
	
	ВидОтображенияРеквизитов=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныйПроцесс.ОтображениеРеквизитов", СокрЛП(Объект.ВидПроцесса), , Пользователь);
		
КонецПроцедуры

&НаКлиенте
Процедура ВидКорпоративногоПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПредыдущийВидКБП=Объект.ВидПроцесса;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеТочки(ЭлементСхемы)
	
	Попытка
		ИмяТочки=ЭлементСхемы.Имя;
	Исключение
		Возврат;
	КонецПопытки;
	
	НаименованиеТочки=ЭлементСхемы.Наименование;
		
	ТочкаБП=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ИмяТочки, Объект.Ссылка);
	
	//откроем точку
		
	Если ТочкаБП=Неопределено Тогда
		//создадим новую точку
		ТипТочки=КП_СхемаКБПКлиент.ПолучитьТипТочкиСхемы(ЭлементСхемы);
		ПараметрыФормы=Новый Структура;
		ПараметрыЗаполнения=Новый Структура;
		
		ПараметрыЗаполнения.Вставить("Наименование", НаименованиеТочки);
		ПараметрыЗаполнения.Вставить("ТипТочки", ТипТочки);
		ПараметрыЗаполнения.Вставить("ИмяВСхеме", ИмяТочки);
		ПараметрыЗаполнения.Вставить("ВладелецТочки", Объект.Ссылка);
		ПараметрыЗаполнения.Вставить("ДействиеПараллельное", Объект.ДействиеПараллельное);
		
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
		ЭтоНоваяТочка=Истина;
		
	Иначе
		//точка существует
		ПараметрыФормы=Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ТочкаБП);
		ПараметрыФормы.Вставить("НаименованиеТочки", НаименованиеТочки);
		
		ПараметрыЗаполнения=Новый Структура("ДействиеПараллельное", Объект.ДействиеПараллельное);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
		
		ЭтоНоваяТочка=Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
		СписокВариантовВыбора=Новый СписокЗначений;
		Для Каждого ЭлементВыбора Из ЭлементСхемы.Элементы Цикл
			ПредставлениеВарианта=СтрЗаменить(ЭлементВыбора.Наименование, "Вариант", "Вариант ");
			СписокВариантовВыбора.Добавить(ЭлементВыбора.Наименование, ПредставлениеВарианта);
		КонецЦикла;
		
		ПараметрыФормы.Вставить("СписокВариантовВыбора", СписокВариантовВыбора);
		
	КонецЕсли;
	
	Если ТребуетсяЗаписьОбъекта() Тогда
		//требуется запись элемента
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ОбработатьОткрытиеТочкиЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормы, ТочкаБП", ПараметрыФормы, ТочкаБП)), 
			НСтр("en='Process template will be saved. Do you want to continue?';ru='Вид процесса будет записан. Продолжить?'"), РежимДиалогаВопрос.ДаНет, 60, , КП_ОбщееКлиент.ЗаголовокДиалога());
		
	Иначе
		ОбработатьОткрытиеТочкиФрагмент(ПараметрыФормы, ТочкаБП);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОткрытиеТочкиФрагмент(Знач ПараметрыФормы, Знач ТочкаБП)
    
    Перем СтруктураТочкиНачальная;
    
    СтруктураТочкиНачальная=КП_СхемаКБПСервер.ПолучитьСтруктуруТочки(ТочкаБП);
    СостояниеОбъекта=Новый Структура;
    СостояниеОбъекта.Вставить("СтруктураТочкиНачальная", СтруктураТочкиНачальная);
    
    //откроем форму, а обработку результатов её действия будем вести в обработке оповещения
    ОткрытьФорму("Справочник.КП_ТочкиПроцессов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма,,, Истина, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОбработатьОткрытиеТочкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
    ТочкаБП = ДополнительныеПараметры.ТочкаБП;
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        Возврат;
    КонецПопытки;
    
    ОбработатьОткрытиеТочкиФрагмент(ПараметрыФормы, ТочкаБП);

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ВидКорпоративногоПроцессаОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        ВыбранноеЗначение=ПредыдущийВидКБП;
        Возврат;
        
	КонецЕсли;
	
	Объект.ВидПроцесса=ВыбранноеЗначение;
	ВидКорпоративногоПроцессаПриИзменении(Неопределено);

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруИменТочек(ВладелецТочек)
	СтруктураИменТочек=Новый Структура;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка,
	                    |	КП_ТочкиПроцессов.ИмяВСхеме
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки");
						
	Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочек);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		ИмяВСхеме=Выборка.ИмяВСхеме;
		СтруктураИменТочек.Вставить(ИмяВСхеме, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат СтруктураИменТочек;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСетьМаршрутныхТочек()
	// пройдем по схеме бизнес-процесса и заполним сеть маршрутных точек
	// для последующего использования
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидПроцесса) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект.СетьМаршрутныхТочек.Очистить();
	
	Если Объект.ВизуальнаяСхемаСкопирована Тогда
		//берем из экземпляра процесса
		СхемаДляМаршрута=СхемаБизнесПроцесса;
	Иначе
		//берем схему из вида процесса
		СхемаДляМаршрута=Объект.ВидПроцесса.ХранилищеКартыПроцесса.Получить();
	КонецЕсли;
	
	СтруктураИменТочек=ПолучитьСтруктуруИменТочек(Объект.Ссылка);
	Если СтруктураИменТочек.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Внимание! В """+СокрЛП(Объект.Ссылка)+""" не заполнена структура точек марщрута.");
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоЭлементов=СхемаДляМаршрута.ЭлементыГрафическойСхемы.Количество();
	
	Для НомерЭлемента=0 По КоличествоЭлементов-1 Цикл
		
		ЭлементСхемы=СхемаДляМаршрута.ЭлементыГрафическойСхемы[НомерЭлемента];
		
		Если НЕ КП_СхемаКБПСервер.ЭтоНастраиваемыйВидЭлементаСхемы(ЭлементСхемы) Тогда			
			Продолжить;
		КонецЕсли;
		
		ТипЭлемента=ТипЗнч(ЭлементСхемы);
		Если (НЕ СтруктураИменТочек.Свойство(ЭлементСхемы.Имя)) И НЕ (ТипЭлемента=Тип("ЭлементГрафическойСхемыРазделение")
			ИЛИ ТипЭлемента=Тип("ЭлементГрафическойСхемыСлияние")
			ИЛИ ТипЭлемента=Тип("ЭлементГрафическойСхемыСтарт")
			ИЛИ ТипЭлемента=Тип("ЭлементГрафическойСхемыЗавершение")) 
		Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Элемент схемы """+СокрЛП(ЭлементСхемы.Имя)+""" не был настроен (откройте, настройте и запишите его). Операция не выполнена.");
			Возврат Ложь;
		КонецЕсли;

		Если СтруктураИменТочек.Свойство(ЭлементСхемы.Имя) Тогда
			ТочкаБП=СтруктураИменТочек[ЭлементСхемы.Имя];
		Иначе
			ТочкаБП=КП_СхемаКБПСервер.СоздатьТочкуКБППоЭлементу(ЭлементСхемы, Объект.Ссылка);
			ИмяТочки=ЭлементСхемы.Имя;
			Если НЕ СтруктураИменТочек.Свойство(ИмяТочки) Тогда
				СтруктураИменТочек.Вставить(ИмяТочки, ТочкаБП);
			КонецЕсли;
		КонецЕсли;			
	
		//обновим наименование элементов точек процесса при необходимости
		Если ТочкаБП<>Неопределено И ТочкаБП.Наименование<>ЭлементСхемы.Наименование Тогда
			ТочкаБПОбъект=ТочкаБП.ПолучитьОбъект();
			ТочкаБПОбъект.Наименование=ЭлементСхемы.Наименование;
			Попытка
				ТочкаБПОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;				
	КонецЦикла;
	
	Для НомерЭлемента=0 По КоличествоЭлементов-1 Цикл
		
		ЭлементСхемы=СхемаДляМаршрута.ЭлементыГрафическойСхемы[НомерЭлемента];
		
		ЭтоЛинияСхемы=КП_СхемаКБПСервер.ЭтоЛинияСхемы(ЭлементСхемы);
		Если НЕ ЭтоЛинияСхемы Тогда
			//это не линия, а мы ищем только линии
			Продолжить;
		КонецЕсли;
		
		//далее работаем с линией схемы
		
		ЭлементНаКонцеЛинии=ЭлементСхемы.КонецЭлемент;
		ЭлементВНачалеЛинии=ЭлементСхемы.НачалоЭлемент;
		
		//проверим, есть ли у линий начальный и конечные элементы
		Если ЭлементНаКонцеЛинии=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Линия ""';en='Line ""'")+ЭлементСхемы.Имя+НСтр("ru='"" не имеет окончания.';"));
			Возврат Ложь;
		КонецЕсли;
		
		Если ЭлементВНачалеЛинии=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Линия ""';en='Line ""'")+ЭлементСхемы.Имя+НСтр("ru='"" не имеет начала.';"));
			Возврат Ложь;
		КонецЕсли;
				
		ТочкаНачало=СтруктураИменТочек[ЭлементВНачалеЛинии.Имя];
		ТочкаКонец=СтруктураИменТочек[ЭлементНаКонцеЛинии.Имя];
	
		//добавим в сеть маршрута
		Если ТочкаНачало.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие Тогда
			ТипПерехода=1; //условный
			
		ИначеЕсли ТочкаНачало.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта Тогда
			ТипПерехода=2; //выбор варианта
			
		Иначе
			ТипПерехода=0; //обычный переход
			
		КонецЕсли;
		
		Если ТипПерехода=1 Тогда
			//условный переход
			НоваяСтрока=Объект.СетьМаршрутныхТочек.Добавить();
			НоваяСтрока.ТочкаВыход=ТочкаНачало;
			НоваяСтрока.ТочкаВход=ТочкаКонец;
			НоваяСтрока.ИмяЛинииНаСхеме=ЭлементСхемы.Имя;
			НоваяСтрока.УсловныйПереход=Истина;
			
			//получим количество уже созданных строк для этой точки условия в табличной части
			МассивСтрокТочкиВыбораВарианта=Объект.СетьМаршрутныхТочек.НайтиСтроки(Новый Структура("ТочкаВыход", ТочкаНачало));
			ИндексВарианта=МассивСтрокТочкиВыбораВарианта.Количество()-1;
			КоличествоСтрокВВыбореВарианта=ИндексВарианта; //0 - нет, 1 - да
			НоваяСтрока.УсловиеПерехода=КоличествоСтрокВВыбореВарианта;
			НоваяСтрока.УсловиеПереходаНаименование=?(ИндексВарианта=0, "Нет", "Да");

		ИначеЕсли ТипПерехода=2 Тогда
			//точка выбора варианта
			
			НоваяСтрока=Объект.СетьМаршрутныхТочек.Добавить();
			НоваяСтрока.ТочкаВыход=ТочкаНачало;
			НоваяСтрока.ТочкаВход=ТочкаКонец;
			НоваяСтрока.ИмяЛинииНаСхеме=ЭлементСхемы.Имя;
			НоваяСтрока.УсловныйПереход=Истина;
			
			//получим количество уже созданных строк для этой точки выбора варианта в табличной части
			МассивСтрокТочкиВыбораВарианта=Объект.СетьМаршрутныхТочек.НайтиСтроки(Новый Структура("ТочкаВыход", ТочкаНачало));
			КоличествоСтрокВВыбореВарианта=МассивСтрокТочкиВыбораВарианта.Количество();
			ИндексВарианта=КоличествоСтрокВВыбореВарианта;
			НоваяСтрока.УсловиеПерехода=КоличествоСтрокВВыбореВарианта;
			
			НаименованиеВарианта=ТочкаНачало.ВыборВарианта[ИндексВарианта-1].ВариантПерехода;
			НоваяСтрока.УсловиеПереходаНаименование=НаименованиеВарианта;
			
		Иначе
			//обычная точка
			НоваяСтрока=Объект.СетьМаршрутныхТочек.Добавить();
			НоваяСтрока.ТочкаВыход=ТочкаНачало;
			НоваяСтрока.ТочкаВход=ТочкаКонец;
			НоваяСтрока.ИмяЛинииНаСхеме=ЭлементСхемы.Имя;

		КонецЕсли;
		
	КонецЦикла; //по элементам схемы
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОсновныеИсполнителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	
	Если Элемент.ТекущиеДанные=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуАдресации(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАдресации(ВыбраннаяСтрока)
		
	СтрокаТЧ = Объект.ОсновныеИсполнители.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТЧ=Неопределено Тогда
		СтрокаТЧ=Объект.ОсновныеИсполнители[ВыбраннаяСтрока];
	КонецЕсли;

	Если СтрокаТЧ=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка определения текущей строки.';en='Error in determining the current line.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы=Новый Структура;
	ПараметрыЗаполнения=Новый Структура;

	ПараметрыЗаполнения.Вставить("ТочкаАдресации", СтрокаТЧ.ТочкаАдресации);
	ПараметрыЗаполнения.Вставить("ОтчетИсполнителя", СтрокаТЧ.ОтчетИсполнителя);
	ПараметрыЗаполнения.Вставить("СрокВыполненияЧасов", СтрокаТЧ.СрокВыполненияЧасов);
	ПараметрыЗаполнения.Вставить("СрокВыполненияДатаВремя", СтрокаТЧ.СрокВыполненияДатаВремя);
	ПараметрыЗаполнения.Вставить("ИндивидуальныйТекстЗадания", СтрокаТЧ.ИндивидуальныйТекстЗадания);
	ПараметрыЗаполнения.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаТЧ.ИндивидуальноеНаименованиеЗадания);
	ПараметрыЗаполнения.Вставить("НеИспользоватьГрафикРаботы", СтрокаТЧ.НеИспользоватьГрафикРаботы);
	ПараметрыЗаполнения.Вставить("ИднИсполнителя", СтрокаТЧ.ИднИсполнителя);
	
	Если Объект.Стартован Тогда
		ПараметрыЗаполнения.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	ПараметрыФормы.Вставить("ПоказыватьПараметрыЗадачи", Истина);
	
	ФормаАдресации=ПолучитьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы);
	ФормаАдресации.Заголовок=НСтр("ru='Элемент адресации'; en='Addressing element';");;

	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ОткрытьФормуАдресацииЗавершение", ЭтотОбъект, Новый Структура("СтрокаТЧ, ТолькоПросмотр", СтрокаТЧ, ТолькоПросмотр)));
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытьФормуАдресацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    СтрокаТЧ = ДополнительныеПараметры.СтрокаТЧ;
    ТолькоПросмотр = ДополнительныеПараметры.ТолькоПросмотр;
    
    СтруктураРезультата=Результат;
    
    Если ТолькоПросмотр Тогда
        Возврат;
        
    КонецЕсли;
    
    Если СтруктураРезультата=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    //обновим данные
	СтрокаТЧ.ТочкаАдресации=СтруктураРезультата.ТочкаАдресации;
	СтрокаТЧ.ОтчетИсполнителя=СтруктураРезультата.ОтчетИсполнителя;	
	СтрокаТЧ.СрокВыполненияЧасов=СтруктураРезультата.СрокВыполненияЧасов;	
	СтрокаТЧ.СрокВыполненияДатаВремя=СтруктураРезультата.СрокВыполненияДатаВремя;	
	СтрокаТЧ.ИндивидуальныйТекстЗадания=СтруктураРезультата.ИндивидуальныйТекстЗадания;	
	СтрокаТЧ.ИндивидуальноеНаименованиеЗадания=СтруктураРезультата.ИндивидуальноеНаименованиеЗадания;	
	СтрокаТЧ.НеИспользоватьГрафикРаботы=СтруктураРезультата.НеИспользоватьГрафикРаботы;	
	СтрокаТЧ.ИднИсполнителя=СтруктураРезультата.ИднИсполнителя;	
	
	СтрокаТЧ.СрокВыполненияТекст=КП_ОбщееКлиент.ПолучитьПредставлениеСрокаВыполнения(СтрокаТЧ.СрокВыполненияЧасов, СтрокаТЧ.СрокВыполненияДатаВремя, СтруктураРезультата.НеИспользоватьГрафикРаботы);
	
	МодифицированСписокИсполнителей=Истина;
	
	КП_СхемаКБПСервер.ОбновитьВсехОсновныхИсполнителейСхемы(СхемаБизнесПроцесса, Объект);

	ОсновныеИсполнителиПриАктивизацииСтроки(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновныеИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	//откроем форму адресации
	Отказ=Истина;
	
	ПараметрыФормы=Новый Структура;
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("СрокВыполненияЧасов", СрокПоУмолчаниюЧасов);
	ПараметрыЗаполнения.Вставить("СрокВыполненияДатаВремя", СрокПоУмолчаниюДата);
	ПараметрыЗаполнения.Вставить("ИднИсполнителя", "");
	ПараметрыЗаполнения.Вставить("НеИспользоватьГрафикРаботы", Ложь);
	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
    ПараметрыФормы.Вставить("ПоказыватьПараметрыЗадачи", Истина);
	ПараметрыФормы.Вставить("ЗаголовокФормы", НСтр("ru='Новый элемент адресации'; en='New addressing element';"));
	
	ОткрытьФорму("ОбщаяФорма.КП_ФормаАдресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ОсновныеИсполнителиПередНачаломДобавленияЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОсновныеИсполнителиПередНачаломДобавленияЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ДобавитьНовуюСтрокуАдресации(Результат);
    
    ИзменилсяСписокОсновныхИсполнителей=Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюСтрокуАдресации(СтруктураРезультата)
	
	НоваяСтрока=Объект.ОсновныеИсполнители.Добавить();
	
	НоваяСтрока.ТочкаАдресации=СтруктураРезультата.ТочкаАдресации;
	НоваяСтрока.ОтчетИсполнителя=СтруктураРезультата.ОтчетИсполнителя;
	НоваяСтрока.СрокВыполненияЧасов=СтруктураРезультата.СрокВыполненияЧасов;
	НоваяСтрока.СрокВыполненияДатаВремя=СтруктураРезультата.СрокВыполненияДатаВремя;
	НоваяСтрока.ИндивидуальныйТекстЗадания=СтруктураРезультата.ИндивидуальныйТекстЗадания;
	НоваяСтрока.ИднИсполнителя=СтруктураРезультата.ИднИсполнителя;
	НоваяСтрока.НеИспользоватьГрафикРаботы=СтруктураРезультата.НеИспользоватьГрафикРаботы;
	НоваяСтрока.СрокВыполненияТекст=КП_ОбщееКлиент.ПолучитьПредставлениеСрокаВыполнения(НоваяСтрока.СрокВыполненияЧасов, НоваяСтрока.СрокВыполненияДатаВремя, НоваяСтрока.НеИспользоватьГрафикРаботы);
	НоваяСтрока.ВидНаправленияПараллельное=ОсновнойСписокПараллельноеДействиеЧисло;
	
	СрокПоУмолчаниюЧасов=НоваяСтрока.СрокВыполненияЧасов;
	СрокПоУмолчаниюДата=СтруктураРезультата.СрокВыполненияДатаВремя;

	МодифицированСписокИсполнителей=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСхемуБП(Команда)
	Если Параметры.Ключ.Пустая() Тогда
		Состояние(НСтр("ru='Сначала запишите бизнес-процесс.';en='Please save the business process.'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы=Новый Структура("БизнесПроцесс", Объект.Ссылка);
	ФормаКарты=ПолучитьФорму("Обработка.КартаМаршрутаБизнесПроцесса.Форма.Форма", ПараметрыФормы);
	ФормаКарты.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	ОтменитьЗапускПроцесса=Ложь;
	
	Если НЕ Объект.Стартован Тогда
		//процесс еще не запущен, зададим вопрос о записи
		ЗакрытьПослеСтарта=Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ЗаписатьИОтправитьНаИсполнение", ЭтотОбъект, ЗакрытьПослеСтарта), НСтр("ru='Отправить бизнес-процесс на выполнение?';en='Do you want to send a business process execution?'"), 
			КП_ОбщееКлиент.КнопкиВопроса("Да, отправить"), 60, ,КП_ОбщееКлиент.ЗаголовокДиалога());
	
	Иначе
		//просто запишем
		Попытка
			ЭтаФорма.Записать();
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
		ЭтаФорма.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗаписатьИОтправитьНаИсполнение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
	КонецЕсли;
	
	ЗакрытьПослеСтарта=ДополнительныеПараметры;
        
    Попытка
		Если НЕ ЭтаФорма.Записать() Тогда
			Возврат;
		КонецЕсли;
        
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        Возврат;
        
    КонецПопытки;
	
	Если ОтменитьЗапускПроцесса Тогда
		Возврат;
	КонецЕсли;
	
    БизнесПроцессГотов=ПолучитьГотовностьБизнесПроцесса();
	
	Если НЕ БизнесПроцессГотов Тогда
		Возврат;
        
    КонецЕсли;
    
    СтартоватьКорпоративныйПроцесс(ЗакрытьПослеСтарта);
		
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеСтартаПроцесса(УспешноСтартован, ЗакрыватьФорму)
	
	Если ЗакрыватьФорму Тогда
		Если УспешноСтартован Тогда
			ЭтаФорма.Закрыть();
		КонецЕсли;
		
	ИначеЕсли УспешноСтартован Тогда
		//не закрывать форму
		ЭтаФорма.Прочитать();
		ОбновитьДанныеОткрытойСтраницы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗаписатьИЗакрытьЗавершениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    УспешноСтартован=Результат;
    
    Если УспешноСтартован Тогда
        ЭтаФорма.Закрыть();
        
    КонецЕсли;
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура СтартПроцесса(Команда)
	ОтменитьЗапускПроцесса=Ложь;

	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_СтартПроцессаОтветНаВопрос", ЭтотОбъект), НСтр("ru='Отправить бизнес-процесс на выполнение?';en='Do you want to start this business process?'"), 
		КП_ОбщееКлиент.КнопкиВопроса("Да, отправить"), 60, , КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СтартПроцессаОтветНаВопрос(РезультатВопроса, ДопПараметр) Экспорт
    
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
		
	КонецЕсли;
    
    ИнициализацияПроцент=ВеличинаШагаИнициализации;
    
    Состояние(СтрокаИнициализацииПроцесса, ИнициализацияПроцент); 
    ИнициализацияПроцент=ИнициализацияПроцент+ВеличинаШагаИнициализации;
	
	СохранитьРеквизитыФормы();
	
    БизнесПроцессГотов=ПолучитьГотовностьБизнесПроцесса();
    
    Если НЕ БизнесПроцессГотов Тогда
        Возврат;
        
    КонецЕсли;
	
	ПрерватьСтартПроцесса=Ложь;
	
    Попытка
        ПредварительнаяЗапись=Истина;
		Если ЭтаФорма.Записать() Тогда
			ПредварительнаяЗапись=Ложь;
		Иначе
        	ПредварительнаяЗапись=Ложь;
			Возврат;
		КонецЕсли;
        
    Исключение
        ПредварительнаяЗапись=Ложь;
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        Возврат;
        
    КонецПопытки;
	
	Если НЕ ПрерватьСтартПроцесса Тогда
    	СтартоватьКорпоративныйПроцесс();
	КонецЕсли;
			
КонецПроцедуры

Функция ПолучитьГотовностьБизнесПроцесса()
	
	//проверим корректность точек контроля
	Если НЕ ЗначениеЗаполнено(Объект.Контролер) Тогда
		СписокТочекКонтроля=КП_СхемаКБПСервер.ПолучитьСписокТочекКонтроля(Объект.Ссылка);
		
		Для Каждого ЭлементСписка Из СписокТочекКонтроля Цикл
			ТочкаКонтроля=ЭлементСписка.Значение;
			Если ТочкаКонтроля.ИсточникИсполнителей=3 Тогда
				//используется контролер
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! В точке контроля ""';en='At the point of control ""'")+СокрЛП(ТочкаКонтроля)+НСтр("ru='"" проводится контроль, но контролер в бизнес-процессе не назначен. Запуск не возможен.'; en='"" control has been planned, but controller was not set. Process can''t start.';"));	
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//проверим заполнение обязательных реквизитов
	СписокОбязательныхРеквизитовВидаПроцесса=КП_Процессы.ПолучитьСписокРеквизитовВида(Объект.ВидПроцесса, Ложь, Истина);
	
	СтруктураРеквизитов=КП_Процессы.ПолучитьСтруктуруРеквизитовПроцесса(Объект.Ссылка);
	Для Каждого ЭлементСписка Из СписокОбязательныхРеквизитовВидаПроцесса Цикл
		ИмяРеквизита=ЭлементСписка.Представление;
		ЗначениеРеквизита=Неопределено;
		СтруктураРеквизитов.Свойство(ИмяРеквизита, ЗначениеРеквизита);
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не заполнен обязательный реквизит ""';en='A mandatory variable ""'")+СокрЛП(ЭлементСписка.Значение)+НСтр("ru='"". Запуск не возможен.'; en='"" is not set. Process can''t start.';"));	
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СтартоватьКорпоративныйПроцесс(ЗакрытьПослеСтарта=Ложь)
	
	Если Объект.Стартован Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Бизнес-процесс уже запущен.';en='Business process is already running.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	Состояние(СтрокаИнициализацииПроцесса, ИнициализацияПроцент); ИнициализацияПроцент=ИнициализацияПроцент+ВеличинаШагаИнициализации;

	СписокТочекЗавершения=КП_СхемаКБПСервер.ПолучитьСписокТочекПоТипу(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Завершение"));
	
	Состояние(СтрокаИнициализацииПроцесса, ИнициализацияПроцент); ИнициализацияПроцент=ИнициализацияПроцент+ВеличинаШагаИнициализации;
	
	Если СписокТочекЗавершения.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найдена точка звершения. Бизнес-процесс не может быть запущен.';en='Found point zversheniya. A business process can not be started.'"));
		Возврат;
		
	КонецЕсли;
	
	СписокТочекСтарта=КП_СхемаКБПСервер.ПолучитьСписокТочекПоТипу(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Старт"));
	
	Состояние(СтрокаИнициализацииПроцесса, ИнициализацияПроцент); ИнициализацияПроцент=ИнициализацияПроцент+ВеличинаШагаИнициализации;
	
	Если СписокТочекСтарта.Количество()=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найдена точка старта. Бизнес-процесс не может быть запущен.';en='Unable to find a starting point. A business process can not be started.'"));
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		//предварительно запишем, что бы заполнилась сеть точек
		
		Попытка
			Записать();
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	КоличествоИсполнителей=КП_Процессы.ОбщееКоличествоИсполнителей(Объект.Ссылка);
	
	Состояние(СтрокаИнициализацииПроцесса, ИнициализацияПроцент); ИнициализацияПроцент=ИнициализацияПроцент+ВеличинаШагаИнициализации;
	
	Если КоличествоИсполнителей=0 Тогда
		
		НазваниеЗакладки=СокрЛП(Элементы.СтраницаОсновныеИсполнители.Заголовок);
		
		СтрокаВопроса=НСтр("ru='На закладке ""';en='Tab ""'")+НазваниеЗакладки+НСтр("ru='"" и в точках процесса нет исполнителей.'; en='"" and process points does not contain users.';")+Символы.ПС+Символы.ПС+НСтр("ru='Добавить исполнителя в список ""';en='Do you want to add user to the list ""';")+НазваниеЗакладки+"""?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_СтартоватьКорпоративныйПроцессОтветНаВопросОПустомСпискеИсполнителей", ЭтотОбъект, ЗакрытьПослеСтарта), СтрокаВопроса, 
			КП_ОбщееКлиент.КнопкиВопроса("Да, добавить"),,,КП_ОбщееКлиент.ЗаголовокДиалога());
		
		Возврат;
		
	КонецЕсли;
	
	ПродолжениеСтартаПроцесса(ЗакрытьПослеСтарта);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СтартоватьКорпоративныйПроцессОтветНаВопросОПустомСпискеИсполнителей(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		//запустим процесс как есть
		ЗакрытьПослеСтарта=ДополнительныеПараметры;
	    ПродолжениеСтартаПроцесса(ЗакрытьПослеСтарта);
		Возврат;
		
	Иначе
		//выберем и добавим исполнителя
		ПараметрыФормы=Новый Структура("РежимВыбора", Истина);
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("СтартоватьКорпоративныйПроцессОтветНаВопросОПустомСпискеИсполнителейЗавершение", ЭтотОбъект, Новый Структура("ДополнительныеПараметры", ДополнительныеПараметры)));
        Возврат;
		
	КонецЕсли;	
	
	СтартоватьКорпоративныйПроцессОтветНаВопросОПустомСпискеИсполнителейИсполнителейФрагмент(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СтартоватьКорпоративныйПроцессОтветНаВопросОПустомСпискеИсполнителейЗавершение(Результат, ДополнительныеПараметрыВопроса) Экспорт
    
    ДополнительныеПараметры = ДополнительныеПараметрыВопроса.ДополнительныеПараметры;
    
    Если Результат=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    //добавим исполнителя
    НоваяСтрока=Объект.ОсновныеИсполнители.Добавить();
    НоваяСтрока.ТочкаАдресации=Результат;
    НоваяСтрока.ИднИсполнителя=КП_ОбщееСервер.СформироватьИднИсполнителя(Результат);
	НоваяСтрока.СрокВыполненияЧасов=1; //1 час
	НоваяСтрока.НеИспользоватьГрафикРаботы=Истина;

    Состояние(НСтр("ru='В список исполнителей добавлен '; en='New user added to general list ';")+СокрЛП(Результат));
    
    СтартоватьКорпоративныйПроцессОтветНаВопросОПустомСпискеИсполнителейИсполнителейФрагмент(ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура СтартоватьКорпоративныйПроцессОтветНаВопросОПустомСпискеИсполнителейИсполнителейФрагмент(Знач ДополнительныеПараметры)
    
    Перем ЗакрытьПослеСтарта;
    
    ЗакрытьПослеСтарта=ДополнительныеПараметры;
    ПродолжениеСтартаПроцесса(ЗакрытьПослеСтарта);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжениеСтартаПроцесса(ЗакрытьПослеСтарта)
	
	СписокИницализирован=КП_Процессы.СоздатьДинамическийСписокИсполнителей(Объект);
	
	Состояние(СтрокаИнициализацииПроцесса, ИнициализацияПроцент); ИнициализацияПроцент=ИнициализацияПроцент+ВеличинаШагаИнициализации;
	
	Если НЕ СписокИницализирован Тогда
		Возврат;
	КонецЕсли;
	
	//создадим уникальные идентификаторы для автора и контролера
	Объект.ИднАвтора=КП_ОбщееСервер.СформироватьИднИсполнителя(Объект.Автор);
	Объект.ИднКонтролера=КП_ОбщееСервер.СформироватьИднИсполнителя(Объект.Контролер);

	СтрокаИнициализацииПроцесса=НСтр("ru='Запись и старт процесса...'; en='Save and start the process';");
	Состояние(СтрокаИнициализацииПроцесса, ИнициализацияПроцент); ИнициализацияПроцент=ИнициализацияПроцент+ВеличинаШагаИнициализации;

	//наиболее длинная процедура по времени
	Попытка
		УспешноЗаписан = Записать(Новый Структура("Старт", Истина));
		Если ОтменитьЗапускПроцесса Тогда
			УспешноЗаписан=Ложь;
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
		
	СтрокаИнициализацииПроцесса=НСтр("ru='Обновление данных...'; en='Data update...';");
	Состояние(СтрокаИнициализацииПроцесса, ИнициализацияПроцент); ИнициализацияПроцент=ИнициализацияПроцент+ВеличинаШагаИнициализации;
		
	Если УспешноЗаписан Тогда
		
		Если НЕ ЗначениеЗаполнено(ДатаСтарта) Тогда
			ДатаСтарта=ТекущаяДата();
			КП_Процессы.СохранитьСтруктуруПараметровКБП(Новый Структура("ДатаСтарта", ДатаСтарта), Объект.Ссылка);
			
		КонецЕсли;
		
		ОсновныеИсполнителиДинамическийСписок.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);
				
	КонецЕсли;
	
	Состояние(СтрокаИнициализацииПроцесса, ИнициализацияПроцент); 
	ИнициализацияПроцент=ИнициализацияПроцент+ВеличинаШагаИнициализации;
	
	Оповестить("КП_КорпоративныйБизнесПроцесс", "Запущен", Объект.Ссылка);
	
	Состояние(НСтр("ru='Процесс запущен.';uk='Процес успішно запущений.';en='Process was succesfully started.'"), 100);
	
	ОкончаниеСтартаПроцесса(Истина, ЗакрытьПослеСтарта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезапуститьПроцесс(Команда)
	
	Если Объект.Завершен Тогда
		ТекстПредупреждения=НСтр("ru='Внимание! Процесс уже был завершен! '; en='Process already completed. ';");
		
	Иначе
		ТекстПредупреждения="";
		
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ПерезапуститьПроцессОтветНаВопрос", ЭтотОбъект), ТекстПредупреждения+НСтр("ru='Перезапуск приведет к удалению всех';en='Restarting will delete all';")+?(ПустаяСтрока(ТекстПредупреждения), " ", Символы.ПС)+НСтр("ru='существующих задач и результатов процесса.';en='existing tasks and results of this process.'")+Символы.ПС+НСтр("ru='Продолжить перезапуск?';en='Continue to restart?'"), РежимДиалогаВопрос.ДаНет, , , КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ПерезапуститьПроцессОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    БизнесПроцессГотов=ПолучитьГотовностьБизнесПроцесса();
    
    Если НЕ БизнесПроцессГотов Тогда
        Возврат;
        
    ИначеЕсли Объект.Завершен Тогда
        Объект.Завершен=Ложь;
        Попытка
            Записать();
        Исключение
            ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
            Возврат;
        КонецПопытки;
        
    КонецЕсли;
    
    УстановитьЗаголовокФормыКлиентом();
    
    ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ПерезапуститьПроцессЗавершение", ЭтотОбъект), 
		НСтр("ru='Инициализировать значения реквизитов?';en='Do you want to initialize process variables?'"), 
		РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ПерезапуститьПроцессЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        ИнициализироватьРеквизиты=Ложь;
    Иначе
        ИнициализироватьРеквизиты=Истина;
    КонецЕсли;;
    
    ПодготовленоУспешно=ПодготовитьПроцессКПерезапуску(Объект.Ссылка, ИнициализироватьРеквизиты);
    Если НЕ ПодготовленоУспешно Тогда
        Возврат;
        
    КонецЕсли;
    
    УстановитьОтображениеВидаРеквизитов();
    
    СохранитьРеквизитыФормы();
    
    КП_Процессы.ЗаписатьВЖурналПроцесса(">>>Выполнен перезапуск процесса<<<", Объект.Ссылка,,,2);
    КП_Процессы.ОбработатьМаршрутКБП(Объект.Ссылка, Объект.Ссылка);
    
    ОбновитьДанныеОткрытойСтраницы();
    
    Оповестить("КП_КорпоративныйБизнесПроцесс", "Запущен", Объект.Ссылка);
    
    Состояние(НСтр("ru='Процесс перезапущен.';en='The process was restarted.'"));
    
    УстановитьОтображениеИсторииИзмененияРеквизитов();

	Оповестить("КП_КорпоративныйБизнесПроцесс", "Перезапущен", Объект.Ссылка);

КонецПроцедуры

Функция ПодготовитьПроцессКПерезапуску(БизнесПроцесс, ИнициализироватьРеквизиты=Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидПроцесса=Объект.ВидПроцесса;

	//удалим задачи
	УдалятьТолькоНеВыполненные=Ложь; //удалять будем все задачи
	КП_ЗадачиПроцессов.УдалитьЗадачиПроцесса(Объект.Ссылка, УдалятьТолькоНеВыполненные);
	
	//очистим регистр обработки точек маршрута
	РегСведений=РегистрыСведений.КП_ОбработкаТочек.СоздатьНаборЗаписей();
	РегСведений.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегСведений.Прочитать();
	Попытка
		РегСведений.Очистить();
		РегСведений.Записать(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	//очистим регистр задач точек
	СписокТочекПроцесса=КП_Процессы.ПолучитьСписокТочекВладельца(БизнесПроцесс);
	Для Каждого ЭлементСписка Из СписокТочекПроцесса Цикл
		ТочкаПроцесса=ЭлементСписка.Значение;
		
		РегСведений=РегистрыСведений.КП_ЗадачиТочек.СоздатьНаборЗаписей();
		РегСведений.Отбор.ТочкаКБП.Установить(ТочкаПроцесса);
		РегСведений.Прочитать();
		Попытка
			РегСведений.Очистить();
			РегСведений.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	//очистим регистр журнала выполнения
	РегСведений=РегистрыСведений.КП_ЖурналВыполненияПроцесса.СоздатьНаборЗаписей();
	РегСведений.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегСведений.Прочитать();
	Попытка
		РегСведений.Очистить();
		РегСведений.Записать(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	//очистим регистр рецензий контролеров
	РегСведений=РегистрыСведений.КП_РецензииКонтролеров.СоздатьНаборЗаписей();
	РегСведений.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегСведений.Прочитать();
	Попытка
		РегСведений.Очистить();
		РегСведений.Записать(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	//очистим регистр результатов исполнителей
	РегСведений=РегистрыСведений.КП_РезультатыИсполнителейЗадач.СоздатьНаборЗаписей();
	РегСведений.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегСведений.Прочитать();
	Попытка
		РегСведений.Очистить();
		РегСведений.Записать(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	//очистим регистр состояний задач
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_Задача.Ссылка
	                    |ИЗ
	                    |	Задача.КП_Задача КАК КП_Задача
	                    |ГДЕ
	                    |	КП_Задача.БизнесПроцесс = &БизнесПроцесс");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		ТекущаяЗадача=Выборка.Ссылка;
		РегСведений=РегистрыСведений.КП_СостоянияЗадач.СоздатьНаборЗаписей();
		РегСведений.Отбор.Задача.Установить(ТекущаяЗадача);
		РегСведений.Прочитать();
		Попытка
			РегСведений.Очистить();
			РегСведений.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;	
	
	Если ИнициализироватьРеквизиты Тогда
		//инициализируем переменные процесса
		//сначала очистим переменные
		РегСведений=РегистрыСведений.КП_РеквизитыЭкземпляраПроцесса.СоздатьНаборЗаписей();
		РегСведений.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		РегСведений.Прочитать();
		
		Попытка
			РегСведений.Очистить();
			РегСведений.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;

		//установим начальные значения
		КП_Процессы.ИнициализироватьРеквизитыПроцессаПоВиду(БизнесПроцесс, ВидПроцесса);
		
	КонецЕсли;
	
	//очистим регистр замены исполнителей точек маршрута
	РегСведений=РегистрыСведений.КП_ЗаменыИсполнителейВТочекПроцесса.СоздатьНаборЗаписей();
	РегСведений.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегСведений.Прочитать();
	Попытка
		РегСведений.Очистить();
		РегСведений.Записать(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	//восстановим заполненные по рабочим группам списки исполнителей
	ОчисткаИсполнителейТочек=ВосстановитьСпискиИсполнителейТочекКБП(БизнесПроцесс);
	Если НЕ ОчисткаИсполнителейТочек Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокИницализирован=КП_Процессы.СоздатьДинамическийСписокИсполнителей(БизнесПроцесс);
	Если НЕ СписокИницализирован Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВосстановитьСпискиИсполнителейТочекКБП(БизнесПроцесс)
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки
	                    |	И КП_ТочкиПроцессов.ТипТочки = &ТипТочки
	                    |	И КП_ТочкиПроцессов.ИсточникИсполнителей <> &ИсточникИсполнителейИсключение");
						
	Запрос.УстановитьПараметр("ВладелецТочки", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТипТочки", Перечисления.КП_ВидыТочекБизнесПроцесса.Действие);
	Запрос.УстановитьПараметр("ИсточникИсполнителейИсключение", 1); //0 - основной список, 1 - фиксированный список задачи, 2 - автор процесса, 3 - контролер, 4- исполнитель в реквизите, 5 - рабочая группа
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		ТочкаОбъект=Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ТочкаОбъект.ТочкаОснование) Тогда
			ТаблицаТочкиОснования=ТочкаОбъект.ТочкаОснование.ИсполнителиТочки.Выгрузить();
			ТочкаОбъект.ИсполнителиТочки.Загрузить(ТаблицаТочкиОснования);
		Иначе
			ТочкаОбъект.ИсполнителиТочки.Очистить();
		КонецЕсли;
		
		Попытка
			ТочкаОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
		
КонецФункции
	
&НаКлиенте
Процедура ОбновитьДанныеОткрытойСтраницы(ТекущаяСтраница=Неопределено)
	
	Если ТекущаяСтраница=Неопределено Тогда
		ТекущаяСтраница=Элементы.СтраницыФормыБизнесПроцесса.ТекущаяСтраница;
		
	КонецЕсли;
	
	Если Элементы.СтраницаСхемаБизнесПроцесса=ТекущаяСтраница Тогда
		
		Если ИзменилсяСписокОсновныхИсполнителей Тогда
			ОбновитьКартинкиИсполнителейВСхеме();
		КонецЕсли;
		
		Если Объект.Стартован Тогда
			КП_СхемаКБПСервер.ОформитьСхемуЭкземпляраПроцесса(СхемаБизнесПроцесса, Объект.Ссылка);		
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницаСтатистикаИЖурнал=ТекущаяСтраница Тогда
		ОбновитьСтатистикуЭкземпляра();
		
	ИначеЕсли Элементы.СтраницаПараметрыБизнесПроцесса=ТекущаяСтраница Тогда
		ПрочитатьПараметрыБизнесПроцесса();
		
	ИначеЕсли Элементы.СтраницаРеквизитыПроцесса=ТекущаяСтраница Тогда
		Элементы.РеквизитыПроцесса.Обновить();			
		
	ИначеЕсли Элементы.СтраницаОсновныеИсполнители=ТекущаяСтраница Тогда
		ОбновитьСписокЗадач();
		
	ИначеЕсли Элементы.СтраницаТекущиеПараметры=ТекущаяСтраница Тогда
		ОбновитьСпискиТекущихПараметровПроцесса();
	
	КонецЕсли;
	
	УстановитьЗаголовокФормыКлиентом();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпискиТекущихПараметровПроцесса()
	Элементы.ГруппаОбработанныеТочки.Видимость=(НЕ Параметры.Ключ.Пустая());
	Элементы.ГруппаРезультатыИсполнителей.Видимость=(НЕ Параметры.Ключ.Пустая());
	
	СписокПараметровРезультатыИсполнителей.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);
	СписокПараметровОбработанныеТочки.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПроцесс(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьПроцессЗавершение", ЭтотОбъект), НСтр("ru='Выполнить процедуру обработки маршрута бизнес-процесса?';en='Do you want to perform routine business process route?'"), РежимДиалогаВопрос.ДаНет, , ,КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПроцессЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ Объект.Стартован Тогда
        ПоказатьПредупреждение(Неопределено, НСтр("ru='Бизнес-процесс еще не стартовал.';en='Business process has not started.'")+Символы.ПС+НСтр("ru='Для обработки отправьте процесс на исполнение';en='To process the send process for execution'"));
        Возврат;
    КонецЕсли;
    
    Если Объект.Завершен Тогда
        ПоказатьПредупреждение(Неопределено, НСтр("ru='Бизнес-процесс уже завершен. Обработка не возможна.';en='Business process has been completed. data processor is not possible.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
    КонецЕсли;
    
    КП_Процессы.ОбработатьМаршрутКБП(Объект.Ссылка, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура СтраницыФормыБизнесПроцессаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если НЕ ИдетСменаСтраницы Тогда
		ИдетСменаСтраницы=Истина;
		ОбновитьДанныеОткрытойСтраницы(ТекущаяСтраница);
		ИдетСменаСтраницы=Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОсновноеОформлениеФормы()
	
	Стартован=Объект.Стартован;
	Завершен=Объект.Завершен;
	НовыйЭкземпляр=Параметры.Ключ.Пустая();
	
	Элементы.ГруппаПроектыБизнесПроцесса.Видимость=ФлагИспользованиеПроектов;
	
	ОформлениеНадписиСхемы();
		
	Элементы.ОсновныеИсполнители.ТолькоПросмотр=Стартован;
	Элементы.ОсновнойСписокПараллельноеДействиеЧисло.ТолькоПросмотр=Элементы.ОсновныеИсполнители.ТолькоПросмотр;
		
	Если НЕ Стартован Тогда
		Элементы.УчастникиПроцесса.ЦветФона=ЦветаСтиля.ЦветФонаФормы;
		
	Иначе
		Элементы.ОсновныеИсполнители.ЦветФона=ЦветаСтиля.ЦветФонаФормы;
		
	КонецЕсли;
	
	//страница "Параметры"
	Для Каждого ЭлементСтраницы из Элементы.СтраницаПараметрыБизнесПроцесса.ПодчиненныеЭлементы Цикл
		Если ЭлементСтраницы=Элементы.СписокСсылокПроцесса Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяЭлементаСтраницы=ЭлементСтраницы.Имя;
		
		Если ИмяЭлементаСтраницы="ГруппаАвторИКонтролер" Тогда
			//устанавливается через другие параметры
			Продолжить;
		КонецЕсли;
		
		Если ИмяЭлементаСтраницы="ДекорацияПоказатьСкрытьПроекты" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяЭлементаСтраницы="ГруппаТекстПроцесса"
			ИЛИ ИмяЭлементаСтраницы="ТекстПроцессаФорматированный"
			ИЛИ ИмяЭлементаСтраницы="ГруппаКоманднаяПанельТекстПроцесса"
		Тогда
			ЭлементСтраницы.ТолькоПросмотр=Стартован И НЕ Объект.ВидПроцесса.ИзменениеТекстаПроцессаПослеСтартаРазрешено;
			
		Иначе
			ЭлементСтраницы.ТолькоПросмотр=Стартован;

		КонецЕсли;
		
		Если Объект.ПроектыБизнесПроцесса.Количество()>0 Тогда
			//в бизнес-процессе есть проекты, покажем их
			ФлагПроектыБизнесПроцессаОткрыты=Истина;
		КонецЕсли;
		
		Если НЕ Параметры.Ключ.Пустая() И ВПроцессеЕстьСсылки(Объект.Ссылка) Тогда
			ФлагСсылкиБизнесПроцессаОткрыты=Истина;
		КонецЕсли;
		
		Элементы.ПроектыБизнесПроцессаПодборПроекты.Доступность=НЕ Элементы.ПроектыБизнесПроцесса.ТолькоПросмотр;
		
		УстановитьОтображениеПроектов();
		УстановитьОтображениеСсылокПроцесса();
		
	КонецЦикла;
	
	Элементы.СписокЖурналПроцессаГруппаКнопок.Доступность=НЕ НовыйЭкземпляр;
	
	Элементы.ФормаПерезапуститьПроцесс.Видимость=Стартован И НЕ ЭтоПроцессТехПоддержки;
	Элементы.ФормаСтартПроцесса.Видимость=НЕ Стартован;
	
	Элементы.ФормаЗавершитьПроцессПринудительно.Видимость=НЕ НовыйЭкземпляр И Стартован И НЕ Завершен;
	
	Если Стартован Тогда
		Элементы.ФормаЗаписатьИЗакрыть.Заголовок=НСтр("ru='Записать и закрыть'; en='Save && close';");
		
	КонецЕсли;
	
	Элементы.ГруппаВыданныеЗадачиДанные.Видимость=Стартован;
	Элементы.ГруппаОсновныеИсполнителиСписок.Видимость=НЕ Стартован;
	Элементы.ГруппаВыданныеЗадачи.Видимость=Стартован;
	Элементы.ВидПроцесса.ТолькоПросмотр=Стартован;
	
	Если ЭтоПроцессТехПоддержки Тогда
		Элементы.ГруппаРеквизиты.ТолькоПросмотр=Истина;
		Элементы.РеквизитыПроцесса.ТолькоПросмотр=Истина;
	КонецЕсли;		
	
	Если Стартован Тогда
		ОбновитьСписокЗадач();
		
	КонецЕсли;
	
	Если ФлагИспользованиеПроектов Тогда
		Элементы.ГруппаПроектыБизнесПроцесса.ТолькоПросмотр=(Завершен И НЕ КП_ОбщееСерверПС.ЭтоРольПолныеПрава());
		Элементы.ПроектыБизнесПроцессаПодборПроекты.Доступность=НЕ Элементы.ГруппаПроектыБизнесПроцесса.ТолькоПросмотр;
	КонецЕсли;
	
	Элементы.ДекорацияСкопироватьВизуальнуюСхему.Видимость=НЕ Завершен;
	
	УстановитьДоступностьИзмененияИнициатораИКонтролера();
	
КонецПроцедуры

Процедура УстановитьДоступностьИзмененияИнициатораИКонтролера()
	
	Стартован=Объект.Стартован;
	Элементы.ГруппаДействиеИнициатор.ТолькоПросмотр=Стартован;

	ИзменениеКонтролераРазрешено=ВидПроцесса.ИзменениеКонтролераПроцессаПослеСтартаРазрешено;
	
	Если Стартован Тогда
		Элементы.ДекорацияДействиеКонтролер.Гиперссылка=ИзменениеКонтролераРазрешено;
		Элементы.Контролер.ТолькоПросмотр=НЕ ИзменениеКонтролераРазрешено;
		
		Если Элементы.ДекорацияДействиеКонтролер.Гиперссылка Тогда
			Элементы.Контролер.Заголовок=НСтр("ru='Контролер'; en='Controller';");
		Иначе
			Элементы.Контролер.Заголовок=НСтр("ru='Контролер:'; en='Controller:';");
		КонецЕсли;

	КонецЕсли;		
		
КонецПроцедуры

Процедура ОбновитьСтатистикуЭкземпляра()
	
	БизнесПроцесс=Объект.Ссылка;
	СтатистикаКоличествоВыданныхЗадач=КП_Процессы.КоличествоВыданныхЗадач(БизнесПроцесс);	
	СтатистикаКоличествоВыполненныхЗадач=КП_Процессы.КоличествоВыполненныхЗадач(БизнесПроцесс);
	
	ДатаОкончания=?(ЗначениеЗаполнено(ДатаЗавершения), ДатаЗавершения, ТекущаяДата());
	
	Если НЕ Объект.Стартован Тогда
		ДатаСтартаПроцесса=ДатаОкончания;
		
	Иначе
		ДатаСтартаПроцесса=ДатаСтарта;
		
	КонецЕсли;
	
	СтатистикаДлительностьПроцесса=КП_ОбщееСервер.ПолучитьСтрокуДлительности(ДатаСтартаПроцесса, ДатаОкончания, Объект.Ссылка);
	
	СписокЖурналПроцесса.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", БизнесПроцесс);
		
КонецПроцедуры

&НаКлиенте
Процедура ЖурналВыполненияОчистить(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("ЖурналВыполненияОчиститьЗавершение", ЭтотОбъект), НСтр("ru='Очистить журнал выполнения процесса?';en='Do you want to clear log of a process?'"), РежимДиалогаВопрос.ДаНет, , , КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналВыполненияОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    КП_Процессы.ОчиститьЖурналВыполнения(Объект.Ссылка);
    Элементы.СписокЖурналПроцесса.Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ЖурналВыполненияСохранить(Команда)
	
	//сформируем текстовый документ с журналом выполнения процесса
	ЖурналВыполнения=КП_Процессы.ПолучитьТабличныйДокументЖурналаВыполнения(Объект.Ссылка);
	
	Диалог=Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	Диалог.Фильтр="MS Excel (*.xls)|*.xls";
	Диалог.Расширение="xls";
	ПолноеИмяФайла="BP-"+СокрЛП(Объект.Номер)+Формат(Объект.Дата, "ДФ=dd-MM-yyyy-hh_mm_ss")+".xls";
	Диалог.ПолноеИмяФайла=ПолноеИмяФайла;

	Если Диалог.Выбрать() Тогда
		ИмяФайла=Диалог.ПолноеИмяФайла;
		ЖурналВыполнения.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
		Состояние(НСтр("ru='Файл ';")+ИмяФайла+НСтр("ru=' сохранен.';"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЖурналВыполненияПечать(Команда)
	
	//сформируем текстовый документ со журналом выполнения процесса
	ЖурналВыполнения=КП_Процессы.ПолучитьТабличныйДокументЖурналаВыполнения(Объект.Ссылка);
	ЖурналВыполнения.ФиксацияСверху=4;
	ЖурналВыполнения.ОтображатьСетку=Ложь;
	ЖурналВыполнения.ОтображатьЗаголовки=Ложь;
	
	ПолноеИмяФайла="BP-"+СокрЛП(Объект.Номер)+Формат(Объект.Дата, "ДФ=dd-MM-yyyy-hh_mm_ss")+".xls";
	ЖурналВыполнения.Показать("Журнал выполнения "+Строка(Объект.Ссылка), ПолноеИмяФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатистику(Команда)
	
	ОбновитьСтатистикуЭкземпляра();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормыСервером()
	ЭтаФорма.Заголовок=КП_Процессы.ПолучитьЗаголовокЭкземпляраПроцесса(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормыКлиентом()
	
	Если Объект.Завершен Тогда
		СтатусПроцесса="Завершен";
		
	ИначеЕсли Объект.Стартован Тогда
		СтатусПроцесса="В работе";
			
	Иначе
		СтатусПроцесса="";
		
	КонецЕсли;
	
	СтрокаЗаголовка=Объект.Наименование+" №"+СокрЛП(Объект.Номер)+" от "+Формат(Объект.Дата, "ДФ='dd.MM.yy HH:mm'")+?(ПустаяСтрока(СтатусПроцесса), "", " ("+СтатусПроцесса+")");
	
	ЭтаФорма.Заголовок=СтрокаЗаголовка;
	
КонецПроцедуры

Функция ТребуетсяЗаписьОбъекта()
	
	Если Параметры.Ключ.Пустая() ИЛИ МодифицированСписокИсполнителей Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура СтатистикаПоИсполнителям(Команда)
	ПоказатьПредупреждение(Неопределено, НСтр("ru='В данной версии не доступно.';en='This version is not available.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СтатистикаПоТочкамДействия(Команда)
	ПоказатьПредупреждение(Неопределено, НСтр("ru='В данной версии не доступно.';en='This version is not available.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроцессПринудительно(Команда)

	Если Объект.ПометкаУдаления Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Бизнес-процесс помечен на удаление. Завершение его в таком состоянии не возможно.';en='The process is marked for deletion. Continue is not possible.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗавершитьПроцессПринудительноЗавершениеОтвет", ЭтотОбъект), НСтр("ru='Все выданные и не выполненные задачи будут удалены. Процесс будет завершен принудительно. Продолжить?';en='All issued and completed tasks will be deleted. The process will be completed by force. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет, , , КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроцессПринудительноЗавершениеОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    Если Модифицированность Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("ЗавершитьПроцессПринудительноЗавершение", ЭтотОбъект), НСтр("ru='Потребуется запись бизнес-процесса. Продолжить?';en='System needs to save a business process. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет, 60, ,КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
        
    КонецЕсли;
    
    //найдем точку завершения в сети точек
    ЗавершитьПроцессПринудительноФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроцессПринудительноЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Отказ=Истина;
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        Отказ=Истина;
        Возврат;
    КонецПопытки;
    
    
    ЗавершитьПроцессПринудительноФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроцессПринудительноФрагмент()
    
    Перем СписокТочекЗавершения, ТочкаЗавершения;
    
    СписокТочекЗавершения=КП_СхемаКБПСервер.ПолучитьСписокТочекПоТипу(Объект.Ссылка, ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Завершение"));
    ТочкаЗавершения=СписокТочекЗавершения[0].Значение;
    
    //выполним процесс в точке завершения
    КП_Процессы.ОбработатьМаршрутКБП(Объект.Ссылка, ТочкаЗавершения);
    КП_Процессы.ОтменитьВыполнениеВсемНевыпоненнымТочкам(Объект.Ссылка);
    
    УстановитьЗаголовокФормыКлиентом();
    
    ЭтаФорма.Прочитать();
    
    //удалим выданные и не выполненные задачи
    КП_Процессы.УдалитьНеВыполненныеЗадачиПроцесса(Объект.Ссылка);
    
    //обновим элементы формы
    ОбновитьДанныеОткрытойСтраницы();
    УстановитьОсновноеОформлениеФормы();
    
    Состояние(НСтр("ru='Бизнес-процесс завершен...';en='A business process is completed ...'"));   
    
    Оповестить("КП_КорпоративныйБизнесПроцесс", "Завершен");

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия="КП_Задача" Тогда
		Если Параметр="Записана" Тогда
			ОбновитьСписокЗадач();
			
		ИначеЕсли Параметр="Выполнена" Тогда
		
			БизнесПроцессЗаписаннойТочки=ПолучитьБизнесПроцессЗадачи(Источник);
			
			Если БизнесПроцессЗаписаннойТочки<>Объект.Ссылка Тогда
				Возврат;
			КонецЕсли;
			
			ЭтаФорма.Прочитать();
			
			Элементы.СхемаБизнесПроцесса.Видимость=Ложь;
			
			ОбновитьДанныеОткрытойСтраницы();
			
			Элементы.СхемаБизнесПроцесса.Видимость=Истина;
			
			УстановитьЗаголовокФормыКлиентом();
			
			Если Объект.Завершен Тогда
				Элементы.ФормаЗавершитьПроцессПринудительно.Видимость=Ложь;
			КонецЕсли;
			
		КонецЕсли;	
		
	ИначеЕсли ИмяСобытия="БизнесПроцесс" И Параметр="Обновить" И Источник=Объект.Ссылка Тогда
		ОбновитьДанныеОткрытойСтраницы();
		
	ИначеЕсли ИмяСобытия="ВидБизнесПроцесса" И Параметр="Записан" И Источник=ВидПроцесса Тогда
		УстановитьДоступностьИзмененияИнициатораИКонтролера();
		
	ИначеЕсли ИмяСобытия="Запись_Файл" Тогда //И Параметр.Событие="СозданФайл" И Параметр.Владелец=ВладелецСоздаваемогоФайла Тогда
		
		//обнулим параметр, что бы исключить повторные срабатывания
		ВладелецСоздаваемогоФайла=Неопределено;
		
		СозданныйФайл=Параметр.Файл;

		Если НЕ ЗначениеЗаполнено(СозданныйФайл) Тогда
			Возврат;
			
		КонецЕсли;
		
		ВладелецФайла=КП_ОбщееСервер.ПолучитьРеквизитОбъекта(СозданныйФайл, "ВладелецФайла");
		
		ДобавитьОбъектВСписокОбъектов(СозданныйФайл);
		
	ИначеЕсли ИмяСобытия="ЭлементСпискаВыбран" Тогда
		ДобавитьЭлементВСписокОбъектов(Параметр);
		
	ИначеЕсли ИмяСобытия="ТочкаКорпоративногоПроцесса" И Параметр="Записана" Тогда
		ОбновитьДанныеПриЗаписиТочки(Источник);
		СхемаПроцессаИзменена=Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТочкеПроцесса(Команда)
	ПараметрыФормы=Новый Структура("БизнесПроцесс", Объект.Ссылка);
	ОткрытьФорму("Обработка.КП_ПереходКТочкеПроцесса.Форма.Форма", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПараметрыПроцесса(Команда)
	Элементы.СтраницаТекущиеПараметры.Видимость=НЕ Элементы.СтраницаТекущиеПараметры.Видимость;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПриЗаписиТочки(СсылкаНаТочку)
	
	Если СостояниеОбъекта=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка сохранения значения точки");
		Возврат;
	КонецЕсли;
	
	СтруктураТочкиНачальная=СостояниеОбъекта.СтруктураТочкиНачальная;
	
	Если СтруктураТочкиНачальная.Свойство("СсылкаНаТочку") И СтруктураТочкиНачальная.СсылкаНаТочку<>СсылкаНаТочку Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Одновременное редактирование двух разных точек невозможно");
		Возврат;
	КонецЕсли;

	СтруктураТочкиПослеОткрытия=КП_СхемаКБПСервер.ПолучитьСтруктуруТочки(СсылкаНаТочку);
	//СтруктураТочкиНачальная=СостояниеОбъекта.СтруктураТочкиНачальная;
	
	ИмяТочки=СокрЛП(СсылкаНаТочку);
	
	ТочкаИзменилась=Ложь;
	Если СтруктураТочкиНачальная.Количество()=0 Тогда
		ТочкаИзменилась=Истина;
		
	Иначе
		Для Каждого ЭлементСтруктуры Из СтруктураТочкиНачальная Цикл
			НовоеЗначениеСтруктуры=Неопределено;
			
			СтруктураТочкиПослеОткрытия.Свойство(ЭлементСтруктуры.Ключ, НовоеЗначениеСтруктуры);
			
			Если ЭлементСтруктуры.Значение<>НовоеЗначениеСтруктуры Тогда
				ТочкаИзменилась=Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦИкла;
		
	КонецЕсли;
		
	Если ТочкаИзменилась Тогда
		ИмяОбновляемойТочки=?(СтруктураТочкиНачальная.Свойство("ИмяВСхеме"), СтруктураТочкиНачальная.ИмяВСхеме, СтруктураТочкиПослеОткрытия.ИмяВСхеме);
		КП_СхемаКБПКлиент.ОбновитьДанныеТочкиСхемы(СхемаБизнесПроцесса, ИмяОбновляемойТочки, СсылкаНаТочку, Объект.Ссылка);
		Модифицированность=Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБизнесПроцессЗадачи(ЗадачаКБП)
	Возврат ЗадачаКБП.БизнесПроцесс;
	
КонецФункции

Процедура ОбновитьСписокСсылок()
	УстановитьПривилегированныйРежим(Истина);
	ЭтаФорма.СписокСсылок.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);	
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиПроцессовПодборВнешнихОбъектовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Отказ=Истина;
        Возврат;
        
    КонецЕсли;
    
    Попытка
        Записать();
        
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());  
        Возврат;
        
    КонецПопытки;
    
    Если Параметры.Ключ.Пустая() Тогда
        Возврат;
        
    КонецЕсли;
    
    
    СсылкиПроцессовПодборВнешнихОбъектовФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СсылкиПроцессовПодборВнешнихОбъектовФрагмент()
    
	//Перем ПараметрыФормы;
	//
	//ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	//ОткрытьФорму("Справочник.КП_СсылкиНаВнешниеОбъекты.ФормаВыбора", ПараметрыФормы, Элементы.СписокСсылок);

КонецПроцедуры

&НаКлиенте
Процедура СписокСсылокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаДобавленныхОбъектов=ЗапонитьСписокСсылокПоМассиву(ВыбранноеЗначение);
	
	ОбновитьСписокСсылок();
	
	Состояние(СтрокаДобавленныхОбъектов);

КонецПроцедуры

&НаСервере
Функция ЗапонитьСписокСсылокПоМассиву(ВыбранноеЗначение)
	
	СтрокаДобавленныхОбъектов="";
	
	Если ТипЗнч(ВыбранноеЗначение)<>Тип("Массив") Тогда
		МассивЭлементов=Новый Массив;
		МассивЭлементов.Добавить(ВыбранноеЗначение);
	Иначе
		МассивЭлементов=ВыбранноеЗначение;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивЭлементов Цикл
		
		РегистрСсылок=РегистрыСведений.КП_СсылкиПроцессов.СоздатьНаборЗаписей();
		РегистрСсылок.Отбор.БизнесПроцесс.Установить(Объект.Ссылка);
		РегистрСсылок.Отбор.Объект.Установить(ЭлементМассива);
		
		РегистрСсылок.Прочитать();
		
		Если РегистрСсылок.Количество()>0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данный объект уже присутствует в списке.';en='The object already exists in the list.'"));
			Продолжить;
			
		КонецЕсли;
		
		НоваяЗапись=РегистрСсылок.Добавить();
		НоваяЗапись.БизнесПроцесс=Объект.Ссылка;
		НоваяЗапись.Объект=ЭлементМассива;
	
		Попытка
			РегистрСсылок.Записать(Истина);
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат "";
			
		КонецПопытки;
		
		СтрокаДобавленныхОбъектов=СтрокаДобавленныхОбъектов+?(СтрокаДобавленныхОбъектов="", "", "; ")+СокрЛП(ЭлементМассива);
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаДобавленныхОбъектов)>100 Тогда
		СтрокаДобавленныхОбъектов=Лев(СтрокаДобавленныхОбъектов, 100-3)+"...";
		
	КонецЕсли;
	
	Возврат СтрокаДобавленныхОбъектов;

КонецФункции

&НаКлиенте
Процедура ОсновныеИсполнителиПриИзменении(Элемент)
	ИзменилсяСписокОсновныхИсполнителей=Истина;
	ОбновитьОсновныхИсполнителейВТаблицеУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКартинкиИсполнителейВСхеме()
	
	#Если ВебКлиент Тогда
	Возврат;
	#КонецЕсли
	
	//пройдем по всем точкам действия испонителей
	//в точках где используется основной список исполнителей, обновим картинку
	
	КоличествоЭлементов=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы.Количество();
	
	СтруктураИменТочек=ПолучитьСтруктуруИменТочек(Объект.Ссылка);
	
	//создадим точки
	Для НомерЭлемента=0 По КоличествоЭлементов-1 Цикл
		
		ЭлементСхемы=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы[НомерЭлемента];
		
		Если НЕ ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыДействие") Тогда
			Продолжить;
			
		КонецЕсли;
		
		ТочкаКБП=СтруктураИменТочек[ЭлементСхемы.Имя];
		
		Если ТочкаКБП=Неопределено Тогда
			Продолжить;
			
		КонецЕсли;
		
		Если ПолучитьИсточникИспонителейТочки(ТочкаКБП)<>0 Тогда
			Продолжить;
			
		КонецЕсли;
		
		//используется динамический список
		
		//обновим картинку
		Если Объект.ОсновныеИсполнители.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		
		ПервыйИсполнитель=Объект.ОсновныеИсполнители[0].ТочкаАдресации;
		ЭлементСхемы.Пояснение="<Нет>";
		Если ТипЗнч(ПервыйИсполнитель)=Тип("СправочникСсылка.Пользователи") Тогда
			//фотография пользователя
			Если ЗначениеЗаполнено(ПервыйИсполнитель) Тогда
				ДвоичныеДанные=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ПервыйИсполнитель);
			КонецЕсли;
			
			Если ДвоичныеДанные=Неопределено Тогда
				ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_Исполнитель;
			Иначе
				ЭлементСхемы.Картинка=Новый Картинка(ДвоичныеДанные, Истина);
				НаименованиеИсполнителя=СокрЛП(ПервыйИсполнитель);
				НаименованиеИсполнителя=ФизическиеЛицаКлиентСервер.ФамилияИнициалы(НаименованиеИсполнителя);
				Если НЕ ПустаяСтрока(НаименованиеИсполнителя) Тогда
					ЭлементСхемы.Пояснение=НаименованиеИсполнителя;
				КонецЕсли;
				
			КонецЕсли;
		
		Иначе
			//картинка ролевой адресации
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_РолеваяАдресация;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИзменилсяСписокОсновныхИсполнителей=Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсточникИспонителейТочки(ТочкаКБП)
	
	Возврат ТочкаКБП.ИсточникИсполнителей;
	
КонецФункции

&НаКлиенте
Процедура ЗадачиПроцесса(Команда)
	
	Если НЕ Объект.Стартован Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Корпоративный процесс не запущен. Задачи ещё не созданы.';en='Corporate process is not running. The task has not yet been created.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗаполнения=Новый Структура("БизнесПроцесс", Объект.Ссылка);
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыЗаполнения);
	
	ФормаСписка=ПолучитьФорму("Задача.КП_Задача.Форма.ФормаСпискаПоПроцессу", ПараметрыФормы);
	ФормаСписка.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ОсновнойСписокПараллельноеДействиеЧислоПриИзменении(Элемент)
	УстановитьКартинкуВидаНаправленияДействияОсновногоСписка(ОсновнойСписокПараллельноеДействиеЧисло);

КонецПроцедуры

Процедура УстановитьКартинкуВидаНаправленияДействияОсновногоСписка(ВидНаправленияПараллельное)
	
	Для Каждого СтрокаТЧ Из Объект.ОсновныеИсполнители Цикл
		СтрокаТЧ.ВидНаправленияПараллельное=ВидНаправленияПараллельное;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаПроцессовДобавитьДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
    КонецПопытки;
    
    СсылкаПроцессовДобавитьДокументВыполнение();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТекущуюСтроку()
	
	СтрокаТЧ=Элементы.СписокСсылок.ТекущиеДанные;
	
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	ВыбранныйЭлемент=СтрокаТЧ.Объект;

	Если КП_ОбщееСерверПС.ЭтоФайл(ВыбранныйЭлемент) Тогда
		
		ДанныеФайла = КП_ОбщееСервер.ПолучитьДанныеФайлаДляОткрытия(ВыбранныйЭлемент, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		РаботаСФайламиКлиент.Открыть(ДанныеФайла);
		
	Иначе
		ПоказатьЗначение(Неопределено, ВыбранныйЭлемент);
					
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СсылкаПроцессовДобавитьДокументВыполнение()
        
    ШаблонДляНовогоФайла=ПолучитьШаблонДляНовогоФайла();
    
    Если НЕ ЗначениеЗаполнено(ШаблонДляНовогоФайла) Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! В виде процесса ""';en='New file template is not selected in the process kind ""';")+СокрЛП(Объект.ВидПроцесса)+НСтр("ru='"" на странице ""Параметры процесса"" не указан шаблон для новых файлов.'; en='"".';"));
        Возврат;
        
    КонецЕсли;
	
	//сначала создадим новый корпоративный документ в который будет добавлен файл с диска
    НаименованиеДокумента="Новый";
    КорпоративныйДокументСсылка=Неопределено; //аДОРаботаСДокументами.СоздатьНовыйДокумент(НаименованиеДокумента, ШаблонДляНовогоФайла, "Создано при добавлении файла в процесс """+СокрЛП(Объект.Ссылка));
    
    Если НЕ ЗначениеЗаполнено(КорпоративныйДокументСсылка) Тогда
        Возврат;
        
    КонецЕсли;
	
	//добавление файла с диска
	ПараметрыВыполнения=Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", КорпоративныйДокументСсылка);
	ПараметрыВыполнения.Вставить("ФормаВладелец", ЭтаФорма);
	ПараметрыВыполнения.Вставить("РежимСоздания", 2); //из файла (1 - по шаблону, 3 - со сканера)
	ПараметрыВыполнения.Вставить("ОткрыватьКарточкуПослеСоздания", Ложь);
	
	ВладелецСоздаваемогоФайла=КорпоративныйДокументСсылка;	
	РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ПараметрыВыполнения.ВладелецФайла, ПараметрыВыполнения.ФормаВладелец, ПараметрыВыполнения.РежимСоздания, НЕ ПараметрыВыполнения.ОткрыватьКарточкуПослеСоздания);
  
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОбъектВСписокОбъектов(ФайлСсылка) 
	
	МассивДобавленныхЭлементов=Новый Массив;
	МассивДобавленныхЭлементов.Добавить(ФайлСсылка);
	
	СтрокаДобавленныхОбъектов=ЗапонитьСписокСсылокПоМассиву(МассивДобавленныхЭлементов);
	
	ОбновитьСписокСсылок();
	
	Состояние(СтрокаДобавленныхОбъектов);

КонецПроцедуры

&НаСервере
Функция ПолучитьШаблонДляНовогоФайла()
	
	ШаблонНовогоФайла=Объект.ВидПроцесса.ШаблоныДокументовДляНовыхФайлов;
	
	Если НЕ ЗначениеЗаполнено(ШаблонНовогоФайла) Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ШаблонНовогоФайла;
	
КонецФункции
	
&НаКлиенте
Процедура ДекорацияДействиеКонтролерНажатие(Элемент)
	ПоказатьВопрос(Новый ОписаниеОповещения("ДекорацияДействиеКонтролерНажатиеЗавершение", ЭтотОбъект), НСтр("ru='Установить контролером ""';en='Do you want to set the controller ""'")+СокрЛП(Объект.Автор)+"""?", РежимДиалогаВопрос.ДаНет, , , КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДействиеКонтролерНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если ЗначениеЗаполнено(Объект.Контролер) И РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    Объект.Контролер=Объект.Автор;

КонецПроцедуры

Процедура УстановитьНаименованияПоВидуПроцесса(ВидПроцесса)
	
	ИспользоватьИностранныеНаименования=КП_ОбщееСервер.ИспользоватьИностранныеНаименованияВФормахПроцессов();

	Попытка
		СтруктураОтбора=Новый Структура("ЭлементФормы");

		СтруктураОтбора.ЭлементФормы="Основная кнопка запуска";
		НайденныеСтроки=ВидПроцесса.НаименованияЭлементовПроцесса.НайтиСтроки(СтруктураОтбора);
		Элементы.ФормаЗаписатьИЗакрыть.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		Элементы.ФормаЗаписатьИЗакрыть.Видимость=НайденныеСтроки[0].Видимость;
		
		СтруктураОтбора.ЭлементФормы="Кнопка ""Старт""";
		НайденныеСтроки=ВидПроцесса.НаименованияЭлементовПроцесса.НайтиСтроки(СтруктураОтбора);
		Элементы.ФормаСтартПроцесса.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		Элементы.ФормаСтартПроцесса.Видимость=НайденныеСтроки[0].Видимость;
		
		СтруктураОтбора.ЭлементФормы="Страница ""Основные исполнители""";
		НайденныеСтроки=ВидПроцесса.НаименованияЭлементовПроцесса.НайтиСтроки(СтруктураОтбора);
		Элементы.СтраницаОсновныеИсполнители.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		Элементы.СтраницаОсновныеИсполнители.Видимость=НайденныеСтроки[0].Видимость;
		
		СтруктураОтбора.ЭлементФормы="Текст процесса";
		НайденныеСтроки=ВидПроцесса.НаименованияЭлементовПроцесса.НайтиСтроки(СтруктураОтбора);
		Элементы.ГруппаТекстПроцесса.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		Элементы.ГруппаТекстПроцесса.Видимость=НайденныеСтроки[0].Видимость;

		СтруктураОтбора.ЭлементФормы="Страница ""Реквизиты процесса""";
		НайденныеСтроки=ВидПроцесса.НаименованияЭлементовПроцесса.НайтиСтроки(СтруктураОтбора);
		Элементы.СтраницаРеквизитыПроцесса.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		Элементы.СтраницаРеквизитыПроцесса.Видимость=НайденныеСтроки[0].Видимость;		
		Элементы.ГруппаРеквизиты.Заголовок=Элементы.СтраницаРеквизитыПроцесса.Заголовок;

		СтруктураОтбора.ЭлементФормы="Страница ""Параметры процесса""";
		НайденныеСтроки=ВидПроцесса.НаименованияЭлементовПроцесса.НайтиСтроки(СтруктураОтбора);
		Элементы.СтраницаПараметрыБизнесПроцесса.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		Элементы.СтраницаПараметрыБизнесПроцесса.Видимость=НайденныеСтроки[0].Видимость;

		СтруктураОтбора.ЭлементФормы="Страница ""Схема бизнес-процесса""";
		НайденныеСтроки=ВидПроцесса.НаименованияЭлементовПроцесса.НайтиСтроки(СтруктураОтбора);
		Элементы.СтраницаСхемаБизнесПроцесса.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		Элементы.СтраницаСхемаБизнесПроцесса.Видимость=НайденныеСтроки[0].Видимость;
		
		СтруктураОтбора.ЭлементФормы="Текст процесса";
		НайденныеСтроки=ВидПроцесса.НаименованияЭлементовПроцесса.НайтиСтроки(СтруктураОтбора);
		Элементы.ТекстПроцессаФорматированный.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		Элементы.ТекстПроцессаФорматированный.Видимость=НайденныеСтроки[0].Видимость;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;

КонецПроцедуры

// Процедура выполняет очистку маршрутной сети и помечает на удаление все точки процесса
// Используется при перевыборе вида процесса в форме
&НаСервере
Процедура ОчиститьТочкиПроцесса()
	
	Объект.СетьМаршрутныхТочек.Очистить();
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                     |	КП_ТочкиПроцессов.Ссылка
	                     |ИЗ
	                     |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                     |ГДЕ
	                     |	КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки
	                     |	И КП_ТочкиПроцессов.ПометкаУдаления = Ложь");
						 
	Запрос.УстановитьПараметр("ВладелецТочки", Объект.Ссылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ТочкаПроцесса=Выборка.Ссылка;
		ТочкаПроцессаОбъект=ТочкаПроцесса.ПолучитьОбъект();
		
		Попытка
			ТочкаПроцессаОбъект.УстановитьПометкуУдаления(Истина);
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивЭлементовРеквизитов()
	
	//удалим существующие реквизиты
	МассивУдаляемыхРеквизитов=Новый Массив;

	Для Каждого ЭлементРеквизита Из СписокРеквизитовПроцесса Цикл
		МассивУдаляемыхРеквизитов.Добавить(ЭлементРеквизита.Представление);
		
	КонецЦикла;
	
	//СписокРеквизитовПроцесса.Очистить();
	
	
	Возврат МассивУдаляемыхРеквизитов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыПроцесса()
	
	//получим текущие значения
	ТаблицаРеквизитов=КП_Процессы.ПолучитьТаблицуРеквизитовПроцессаДляФормы(Объект.Ссылка);
	
	РеквизитовНет=(ТаблицаРеквизитов.Количество()=0);
	Элементы.ДекорацияРеквизитовПроцессаНет.Видимость=РеквизитовНет;
	
	Элементы.ОбновитьЗначенияРеквизитов.Видимость=НЕ РеквизитовНет;
	Элементы.ГруппаФлажкиРеквизитов.Видимость=НЕ РеквизитовНет;
	Элементы.ВидОтображенияРеквизитов.Видимость=НЕ РеквизитовНет;
	
	//удалим существующие реквизиты
	МассивУдаляемыхРеквизитов=ПолучитьМассивЭлементовРеквизитов();
	
	//удалим реквизиты из формы
	Если МассивУдаляемыхРеквизитов.Количество()>0 Тогда
		Попытка
			ЭтаФорма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
			СписокРеквизитовПроцесса.Очистить();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
		//удалим соответствующие элементы, т.к. иначе рушится и не восстанавливается 
		//привязка элементов и пути к данным
		Для НомерЭлемента=0 По МассивУдаляемыхРеквизитов.Количество()-1 Цикл
			Попытка
				ЭлементФормы=Элементы.Найти(МассивУдаляемыхРеквизитов[НомерЭлемента]);
				Элементы.Удалить(ЭлементФормы);
			Исключение
				
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;	
		
	//добавим реквизиты в структуру формы
	МассивДобавляемыхРеквизитов=Новый Массив;

	ИспользоватьИностранныеНаименования=КП_ОбщееСервер.ИспользоватьИностранныеНаименованияВФормахПроцессов();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
			
		РеквизитПроцесса=СтрокаТаблицы.РеквизитПроцесса;
		Если НЕ ПоказыватьСистемныеРеквизиты И РеквизитПроцесса.Системный Тогда
			Продолжить;
			
		КонецЕсли;
		
		ИмяРеквизита="РеквизитПроцесса_"+РеквизитПроцесса.ИмяРеквизитаДляФункций;	
		ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ЗначениеРеквизита=КП_Процессы.ПолучитьНачальноеЗначениеРеквизита(РеквизитПроцесса);
			
		КонецЕсли;

		НайденныйЭлемент=Элементы.Найти(ИмяРеквизита);
		РеквизитУжеЕсть=НЕ (НайденныйЭлемент=Неопределено);
		
		Если НЕ РеквизитУжеЕсть Тогда
			//реквизита еще нет
			
			НаименованиеРеквизита=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(РеквизитПроцесса.НаименованиеВФормеИностранное), РеквизитПроцесса.НаименованиеВФормеИностранное, РеквизитПроцесса.НаименованиеВФорме);
			
			ТипРеквизита=КП_Процессы.ПолучитьОписаниеТипаРеквизитаПроцесса(РеквизитПроцесса);
			Если ТипРеквизита<>Неопределено Тогда
				Попытка
					НовыйРеквизитФормы=Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , НаименованиеРеквизита, Истина);
					МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизитФормы);
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
					
				КонецПопытки;
			КонецЕсли;
			
		ИначеЕсли (НЕ НайденныйЭлемент.Видимость) Тогда
			НайденныйЭлемент.Видимость=Истина;
			
		КонецЕсли;
		
	КонецЦикла; //по реквизитам процесса
	
	//добавим реквизиты в список реквизитов	
	Если МассивДобавляемыхРеквизитов.Количество()>0 Тогда
		Попытка
			ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	    	
	//создадим элементы в форме задачи	
	РазмещаемСлева=Истина;
	
	РазмещатьВДваСтолбца=Объект.ВидПроцесса.ДействиеРеквизитыРасполагатьВДваСтолбца;
	
	Если НЕ РазмещатьВДваСтолбца Тогда
		Элементы.ГруппаРеквизитыПраво.Видимость=Ложь;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		
		РеквизитПроцесса=СтрокаТаблицы.РеквизитПроцесса;
		Если НЕ ПоказыватьСистемныеРеквизиты И РеквизитПроцесса.Системный Тогда
			Продолжить;
			
		КонецЕсли;
		
		ИмяРеквизита="РеквизитПроцесса_"+РеквизитПроцесса.ИмяРеквизитаДляФункций;	
		
		ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
		
		Если (Параметры.Ключ.Пустая() ИЛИ НЕ Объект.Стартован) И НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ЗначениеРеквизита=КП_Процессы.ПолучитьНачальноеЗначениеРеквизита(РеквизитПроцесса);
			
		КонецЕсли;
		
		//создадим новые элементы в форме задачи
		ЭлементФормы=Элементы.Найти(ИмяРеквизита);
		Если НЕ ЭлементФормы=Неопределено Тогда
			//такой элемент уже существует
			ЭлементФормы.Видимость=Истина;
			ЭлементФормы.ПутьКДанным=ИмяРеквизита;
			Продолжить;
			
		КонецЕсли;
		
		НаименованиеТипаРеквизита=КП_Процессы.ПолучитьНаименованиеТипаРеквизита(РеквизитПроцесса);
		Если ПустаяСтрока(НаименованиеТипаРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если РазмещаемСлева ИЛИ НЕ РазмещатьВДваСтолбца Тогда
			РодительскийЭлемент=Элементы.ГруппаРеквизитыЛево;
			
		Иначе
			РодительскийЭлемент = Элементы.ГруппаРеквизитыПраво;
			
		КонецЕсли;
		
		Элемент=Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), РодительскийЭлемент);
		
		Если РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Булево Тогда
			//флажок
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			Элемент.ВыбиратьТип=Ложь;
						
		Иначе	
			//поле ввода
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			Элемент.ВыбиратьТип=Ложь;
			Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;	
			
			УстановитьПривилегированныйРежим(Истина);

			Если РеквизитПроцесса.ТипРеквизита.РеквизитДлина>80
				И РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Строки 
			Тогда
				Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Верх;
				Элемент.МногострочныйРежим=Истина;
				
			Иначе
				Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;	
				
			КонецЕсли;
			
			УстановитьПривилегированныйРежим(Ложь);
						
		КонецЕсли;
		
		Элемент.ПутьКДанным=ИмяРеквизита; //привяжем в реквизиту
		Элемент.Подсказка=РеквизитПроцесса.Примечание;
		
		Если СписокРеквизитовПроцесса.НайтиПоЗначению(РеквизитПроцесса)=Неопределено Тогда
			СписокРеквизитовПроцесса.Добавить(РеквизитПроцесса, ИмяРеквизита);
			
		КонецЕсли;
		
		//подключим необходимые обработчики
		Если НаименованиеТипаРеквизита="СправочникСсылка.ЗначенияСвойствОбъектов" Тогда
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ОткрытьНачалоВыбора");
			Элемент.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодбор");
			Элемент.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_ОкончаниеВводаТекста");

		ИначеЕсли НаименованиеТипаРеквизита="СправочникСсылка.Файлы" Тогда
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораФайлы");
			Элемент.УстановитьДействие("Открытие", "Подключаемый_ОткрытиеФайла");
			Элемент.КнопкаСоздания=Ложь;
			Элемент.ИсторияВыбораПриВводе=ИсторияВыбораПриВводе.НеИспользовать;
		КонецЕсли;
		
		//добвим обработчик ПриИзменении
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_РеквизитПриИзменении");
		
		Если РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Числа 
			ИЛИ РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Дата 
		Тогда
			Элемент.КнопкаРегулирования=Истина;
			Элемент.РастягиватьПоГоризонтали=Ложь;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);

		Если РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Строки И РеквизитПроцесса.ТипРеквизита<>Справочники.КП_СписокМетаданных.Гиперссылка Тогда
			Если РеквизитПроцесса.ТипРеквизита.РеквизитДлина<=100  Тогда
				Элемент.МногострочныйРежим=Ложь;
				Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;
			Иначе
				Элемент.МногострочныйРежим=Истина;
			КонецЕсли;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если НаименованиеТипаРеквизита="Дата" Тогда
			Элемент.КнопкаВыбора=Истина;
			Элемент.РастягиватьПоГоризонтали=Ложь;
			
		КонецЕсли;
		
		Если РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Числа Тогда
			Элемент.Ширина=16;
		ИначеЕсли РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Дата Тогда
			Элемент.Ширина=16;
		КонецЕсли;
		
		//установим значение реквизиту
		Если РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Гиперссылка Тогда
			ЗначениеРеквизита=Строка(ЗначениеРеквизита);
			СтрокаHtml=Новый ФорматированнаяСтрока(ЗначениеРеквизита,,,,ЗначениеРеквизита);
			ЭтаФорма[ИмяРеквизита]=СтрокаHtml;
		Иначе
			ЭтаФорма[ИмяРеквизита]=ЗначениеРеквизита;
		КонецЕсли;
		
		РазмещаемСлева=НЕ РазмещаемСлева; //переключим на другую часть формы
		
	КонецЦикла; //по реквизитам процесса
		
КонецПроцедуры

// Процедура является динамически подключаемой и подключается к элементу 
// реквизита процесса на событие "ПриИзменении"
&НаКлиенте
Процедура Подключаемый_РеквизитПриИзменении(Элемент, СтандартнаяОбработка) ////Процедура Подключаемый_ПриИзменении(Элемент, СтандартнаяОбработка)

	РеквизитыРедактировалиВФорме=Истина;
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьИсториюРеквизитовНажатие(Элемент)
	ФлагПоказыватьИсториюРеквизитов=НЕ ФлагПоказыватьИсториюРеквизитов;
	УстановитьОтображениеИсторииИзмененияРеквизитов();
	
КонецПроцедуры

Процедура УстановитьОтображениеИсторииИзмененияРеквизитов()
	
	Элементы.РеквизитыПроцессаИстория.Видимость=ФлагПоказыватьИсториюРеквизитов;
	
	Если ФлагПоказыватьИсториюРеквизитов Тогда
		Элементы.ДекорацияПоказатьИсториюРеквизитов.Заголовок=НСтр("ru='Скрыть историю изменения'; en='Hide the history of changes';");
		
	Иначе
		Элементы.ДекорацияПоказатьИсториюРеквизитов.Заголовок=НСтр("ru='Показать историю изменения'; en='Show the history of changes';");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОтображенияРеквизитовПриИзменении(Элемент)
	
	УстановитьОтображениеВидаРеквизитов();
	
	ЗаписатьНастройкиСервером();

КонецПроцедуры

Процедура УстановитьОтображениеВидаРеквизитов()
	
	Элементы.РеквизитыПроцесса.Видимость=(ВидОтображенияРеквизитов=1);
	Элементы.ГруппаРеквизиты.Видимость=(ВидОтображенияРеквизитов=0);
	
	Если ВидОтображенияРеквизитов=0 Тогда
		//отображение элементами на форме
		Элементы.ОбновитьЗначенияРеквизитов.Видимость=Истина;
		ЗаполнитьРеквизитыПроцесса();
		
	Иначе
		ОбновитьСпискиРеквизитов();
		Элементы.ОбновитьЗначенияРеквизитов.Видимость=Ложь;
		
		//отображение в виде списка
		//удалим существующие реквизиты
		МассивУдаляемыхРеквизитов=ПолучитьМассивЭлементовРеквизитов();
	
		Попытка
			ЭтаФорма.ИзменитьРеквизиты( , МассивУдаляемыхРеквизитов);
			СписокРеквизитовПроцесса.Очистить();
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		
		КонецПопытки;
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСервером()
	Пользователь=СокрЛП(ТекущийПользователь);
	
	КП_ОбщееСервер.СохранитьНастройкуПользователя("КорпоративныйПроцесс.ОтображениеРеквизитов", СокрЛП(Объект.ВидПроцесса), ВидОтображенияРеквизитов, , Пользователь);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиСервером()
	
	Пользователь=СокрЛП(ТекущийПользователь);
	
	ВидОтображенияРеквизитов=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("КорпоративныйПроцесс.ОтображениеРеквизитов", СокрЛП(Объект.ВидПроцесса), , Пользователь);
	
КонецПроцедуры

Процедура СохранитьРеквизитыФормы()
	
	Если НЕ РеквизитыРедактировалиВФорме Тогда
		Возврат;
	КонецЕсли;
										   
	СтруктураЗначенийРеквизитов=КП_Процессы.ПолучитьСтруктуруРеквизитовПроцесса(Объект.Ссылка);
	
	СтруктураИзмененныхРеквизитов=Новый Структура;
	
	//сохраним изменившиеся реквизиты
	
	Для Каждого ЭлементСписка Из СписокРеквизитовПроцесса Цикл
		
		ИмяРеквизитаВФорме=ЭлементСписка.Представление;
		ИмяРеквизита=СтрЗаменить(ИмяРеквизитаВФорме, "РеквизитПроцесса_", "");
		
		Попытка
			ЗначениеРеквизита=ЭтаФорма[ИмяРеквизитаВФорме];
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
		//получим текущее значение реквизита
		Попытка
			ТекущееЗначение=СтруктураЗначенийРеквизитов[ИмяРеквизита];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если ТекущееЗначение<>ЗначениеРеквизита Тогда
			СтруктураИзмененныхРеквизитов.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураИзмененныхРеквизитов.Количество()>0 Тогда
		Примечание="Установка в форме процесса "+СокрЛП(Объект.Ссылка);
		КП_Процессы.СохранитьСтруктуруРеквизитов(Объект.Ссылка, СтруктураИзмененныхРеквизитов, , Примечание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСсылокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;
	ВыбраннаяСтрока=Элементы.СписокСсылок.ТекущиеДанные;
	
	Если ВыбраннаяСтрока<>Неопределено Тогда
		ОткрытьТекущуюСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокОсновныхИсполнителейПоСписку(СписокСотрудников, ОставлятьСуществующихВВидеПроцесса)
	
	Если НЕ ОставлятьСуществующихВВидеПроцесса Тогда
		Объект.ОсновныеИсполнители.Очистить();
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокСотрудников Цикл
		СотрудникСписка=ЭлементСписка.Значение;
		
		НоваяСтрока=Объект.ОсновныеИсполнители.Добавить();
		НоваяСтрока.ТочкаАдресации=СотрудникСписка;
		НоваяСтрока.ВидНаправленияПараллельное=?(Объект.ДействиеПараллельное, 1, 0);
		НоваяСтрока.ИднИсполнителя=КП_ОбщееСервер.СформироватьИднИсполнителя(СотрудникСписка);
		НоваяСтрока.СрокВыполненияЧасов=8;
		НоваяСтрока.СрокВыполненияТекст=КП_ОбщееСервер.ПолучитьПредставлениеСрокаВыполнения(НоваяСтрока.СрокВыполненияЧасов, НоваяСтрока.СрокВыполненияДатаВремя, НоваяСтрока.НеИспользоватьГрафикРаботы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка=Ложь;
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, "РеквизитПроцесса_", "");
	
	РеквизитПроцесса=КП_Процессы.НайтиРеквизитПроцессаПоИмени(Объект.Ссылка, ИмяРеквизита);
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	РеквизитыРедактировалиВФорме=Истина;
	Модифицированность=Истина;
	
	//откроем форму с установленным отбором
	ПараметрыОтбора=Новый Структура("Владелец", КП_ОбщееСервер.ПолучитьСвязьРеквизитаСПВХ(РеквизитПроцесса));
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_ОткрытьНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
    
    Если ВыбранноеЗначение=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ЭтаФорма[Элемент.Имя]=ВыбранноеЗначение;

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеИсполнителиПриАктивизацииСтроки(Элемент)
		
	СтрокаИсполнителя=Элементы.ОсновныеИсполнители.ТекущиеДанные;
	
	Если СтрокаИсполнителя=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	УстановитьДанныеПользователя(СтрокаИсполнителя);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеПользователяВыполенныеЗадачи(СтрокаИсполнителя)
		
	ТочкаАдресации=СтрокаИсполнителя.Исполнитель;
	
	СтрокаКонтактныхДанных=КП_ОбщееСервер.ПолучитьСтрокуКонтактныхДанныхПользователя(ТочкаАдресации);
	
	ДвоичныеДанныеФотографии=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ТочкаАдресации);
	
	Если НЕ ДвоичныеДанныеФотографии=Неопределено Тогда
		ИсполнительАдресФотографииВыполненыеЗадачи=ПоместитьВоВременноеХранилище(ДвоичныеДанныеФотографии, УникальныйИдентификатор);
	
	Иначе
		ИсполнительАдресФотографииВыполненыеЗадачи="";
		
	КонецЕсли;
	
	Если Объект.Стартован Тогда
		ИднИсполнителя=СтрокаИсполнителя.ИднИсполнителя;
		СтрокаТекущихРезультатовИсполнителя=КП_ЗадачиПроцессов.ПолучитьСтрокуТекущихРезультатовИсполнителя(Объект.Ссылка, ИднИсполнителя);
				
	Иначе
		СтрокаТекущихРезультатовИсполнителя="";
		
	КонецЕсли;
	
	ИсполнительТекущиеДанныеВыполненыеЗадачи=СтрокаКонтактныхДанных+?(ПустаяСтрока(СтрокаКонтактныхДанных), "", Символы.ПС)+СтрокаТекущихРезультатовИсполнителя;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДвоичныеДанныеКартинкиРолеваяАдресацияСервером()
	Возврат БиблиотекаКартинок.КП_РолеваяАдресация.ПолучитьДвоичныеДанные();
КонецФункции

&НаКлиенте
Процедура УстановитьДанныеПользователя(СтрокаИсполнителя)
		
	ТочкаАдресации=СтрокаИсполнителя.ТочкаАдресации;
	
	СтрокаКонтактныхДанных=КП_ОбщееСервер.ПолучитьСтрокуКонтактныхДанныхПользователя(ТочкаАдресации);
	
	Если НЕ КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ТочкаАдресации) Тогда
		//это ролевая адресация
		#Если ВебКлиент Тогда
		ДвоичныеДанныеФотографии=ПолучитьДвоичныеДанныеКартинкиРолеваяАдресацияСервером();
		#Иначе
		ДвоичныеДанныеФотографии=БиблиотекаКартинок.КП_РолеваяАдресация.ПолучитьДвоичныеДанные();
		#КонецЕсли
		
		ИсполнительАдресФотографии=ПоместитьВоВременноеХранилище(ДвоичныеДанныеФотографии, УникальныйИдентификатор);
		ИсполнительТекущиеДанные=СтрокаКонтактныхДанных;
		
		Возврат;
		
	КонецЕсли;
		
	ДвоичныеДанныеФотографии=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ТочкаАдресации);
	
	Если НЕ ДвоичныеДанныеФотографии=Неопределено Тогда
		ИсполнительАдресФотографии=ПоместитьВоВременноеХранилище(ДвоичныеДанныеФотографии, УникальныйИдентификатор);
	
	Иначе
		ИсполнительАдресФотографии="";
		
	КонецЕсли;
	
	ИсполнительТекущиеДанные=СтрокаКонтактныхДанных;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадач()
	
	Если ТекущийЯзыкСистемы()<>"ru" Тогда
		СписокЗадач.ТекстЗапроса=СтрЗаменить(СписокЗадач.ТекстЗапроса, "Выполненные задачи", "Completed tasks");
		СписокЗадач.ТекстЗапроса=СтрЗаменить(СписокЗадач.ТекстЗапроса, "> Переадресовано", "> Forwarded");
		СписокЗадач.ТекстЗапроса=СтрЗаменить(СписокЗадач.ТекстЗапроса, "Находятся в работе", "In process");
		СписокЗадач.ТекстЗапроса=СтрЗаменить(СписокЗадач.ТекстЗапроса, "Ожидают выполнения", "Waiting for start");
		
	КонецЕсли;
	
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ДатаКон", ДобавитьМесяц(ТекущаяДата(), 1));
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("ПараметрВыполнениеПроцент", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ВыполнениеПроцент);
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("СлужебнаяТочкаМаршрута", БизнесПроцессы.КП_БизнесПроцесс.ТочкиМаршрута.ВыполнениеКорпоративногоПроцесса);		
	
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("Выполнена", ?(ФлагТолькоНеВыполненныеЗадачи, Ложь, NULL));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	СтрокаТЧ=Элемент.ТекущиеДанные;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ.Свойство("ГруппировкаСтроки") Тогда
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагТолькоНеВыполненныеЗадачиПриИзменении(Элемент)
	ОбновитьСписокЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПриАктивизацииСтроки(Элемент)
	
	СтрокаИсполнителя=Элементы.СписокЗадач.ТекущиеДанные;
	
	Если НЕ Объект.Стартован ИЛИ СтрокаИсполнителя=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	Если СтрокаИсполнителя.Свойство("ГруппировкаСтроки") Тогда
		//это группировка данных строки
		ИсполнительТекущиеДанныеВыполненыеЗадачи="";
		ИсполнительАдресФотографииВыполненыеЗадачи="";
		Возврат;
		
	КонецЕсли;
	
	УстановитьДанныеПользователяВыполенныеЗадачи(СтрокаИсполнителя);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьСистемныеРеквизитыНажатие(Элемент)
	
	ПоказыватьСистемныеРеквизиты=НЕ ПоказыватьСистемныеРеквизиты;
	
	ИзменитьОтображениеСистемныхРеквизитов();
	
	Если ПоказыватьСистемныеРеквизиты Тогда
		Состояние("Включен показ системных реквизитов");
	Иначе
		Состояние("Показ системных реквизитов отключен");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтображениеСистемныхРеквизитов()
	
	Элементы.ДекорацияПоказатьСистемныеРеквизиты.Заголовок=?(ПоказыватьСистемныеРеквизиты, НСтр("ru='Скрыть системные реквизиты'; en='Hide system variables';"), НСтр("ru='Показать системные реквизиты'; en='Show system variables';"));
		
	Если ВидОтображенияРеквизитов=1 Тогда
		//список
		РеквизитыПроцесса.Параметры.УстановитьЗначениеПараметра("РеквизитСистемный", ?(ПоказыватьСистемныеРеквизиты, NULL, Ложь));		
	Иначе
		//форма
		ЗаполнитьРеквизитыПроцесса();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпискиРеквизитов()
	
	РеквизитыПроцессаИстория.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);
	РеквизитыПроцессаИстория.Параметры.УстановитьЗначениеПараметра("РеквизитСистемный", ?(ПоказыватьСистемныеРеквизиты, NULL, Ложь));
	
	РеквизитыПроцесса.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);
    РеквизитыПроцесса.Параметры.УстановитьЗначениеПараметра("РеквизитСистемный", ?(ПоказыватьСистемныеРеквизиты, NULL, Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИсполнителейИзРабочихГрупп(Команда)
	//откроем форму подбора рабочих групп
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.КП_РабочиеГруппы.ФормаВыбора", ПараметрыФормы, Элементы.ОсновныеИсполнители); 

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого РабочаяГруппа Из ВыбранноеЗначение Цикл
		Состояние(СокрЛП(РабочаяГруппа));
		
		ЗаполнитьПоРабочейГруппе(РабочаяГруппа);
		
	КонецЦикла;
	
	ОбновитьОсновныхИсполнителейВТаблицеУчастников();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРабочейГруппе(РабочаяГруппа)
	
	Для Каждого СтрокаТЧ Из РабочаяГруппа.Сотрудники Цикл
		ТочкаАдресации=СтрокаТЧ.ТочкаАдресации;
		Если Объект.ОсновныеИсполнители.НайтиСтроки(Новый Структура("ТочкаАдресации", ТочкаАдресации)).Количество()>0 Тогда
			Продолжить; //сотрудник уже в списке
		
		КонецЕсли;
		
		НоваяСтрока=Объект.ОсновныеИсполнители.Добавить();
		НоваяСтрока.ТочкаАдресации=ТочкаАдресации;
		НоваяСтрока.ВидНаправленияПараллельное=ОсновнойСписокПараллельноеДействиеЧисло;
		НоваяСтрока.ИднИсполнителя=КП_ОбщееСервер.СформироватьИднИсполнителя(ТочкаАдресации);
		НоваяСтрока.НеИспользоватьГрафикРаботы=Истина;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиПроцессовДобавитьВнешнийФайл(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СсылкиПроцессовДобавитьВнешнийФайлЗавершение", ЭтотОбъект), НСтр("ru='Бизнес-процесс будет записан. Продолжить?';en='Business process will be saved. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
		
	СсылкиПроцессовДобавитьВнешнийФайлФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкиПроцессовДобавитьВнешнийФайлЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Отказ=Истина;
        Возврат;
        
    КонецЕсли;
    
    Попытка
        Записать();
        
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());  
        Возврат;
        
    КонецПопытки;
    
    Если Параметры.Ключ.Пустая() Тогда
        Возврат;
        
    КонецЕсли;
    
    СсылкиПроцессовДобавитьВнешнийФайлФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СсылкиПроцессовДобавитьВнешнийФайлФрагмент()

	//добавление обычного файла
	ПараметрыВыполнения=Новый Структура;
	ПараметрыВыполнения.Вставить("ВладелецФайла", Объект.Ссылка);
	ПараметрыВыполнения.Вставить("ФормаВладелец", ЭтаФорма);
	ПараметрыВыполнения.Вставить("РежимСоздания", 2); //из файла (1 - по шаблону, 3 - со сканера)
	ПараметрыВыполнения.Вставить("ОткрыватьКарточкуПослеСоздания", Ложь);
	
	ВладелецСоздаваемогоФайла=Объект.Ссылка;
	РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ПараметрыВыполнения.ВладелецФайла, ПараметрыВыполнения.ФормаВладелец, ПараметрыВыполнения.РежимСоздания, НЕ ПараметрыВыполнения.ОткрыватьКарточкуПослеСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлДобавитьПослеВыбораРежимаСоздания(Результат, ПараметрыВыполнения) Экспорт 
	
	Если Результат<>КодВозвратаДиалога.Отмена Тогда
		Модифицированность=Истина;
		
	Иначе
		//добавление обычного файла
		ОбработчикРезультатаДобавленияСДиска=Новый ОписаниеОповещения("ФайлДобавитьПослеДобавленияФайлаСДиска", ЭтотОбъект, ПараметрыВыполнения);
		ФлагНеОткрыватьКарточкуПослеСозданияФайла=Истина;
		РежимСоздания=2;
		РаботаСФайламиКлиент.ДобавитьФайл(ОбработчикРезультатаДобавленияСДиска, ПараметрыВыполнения.ВладелецФайла, ПараметрыВыполнения.ФормаВладелец, РежимСоздания, ФлагНеОткрыватьКарточкуПослеСозданияФайла);
				
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОткрытиеВозможно()
	
	Если 
		Пользователи.РолиДоступны("ПолныеПрава, КП_ПроцессыАдминистрирование, КП_ПроцессыИзменениеСвоих, КП_ПроцессыЧтениеВсех")
	Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	//СписокПользователейПроцесса=КП_Процессы.ПолучитьСписокВсехИсполнителейПроцесса(Объект.Ссылка);

	//Если (РольПользователяДоступна("КП_ПроцессыЧтениеАдресованных") И СписокПользователейПроцесса.НайтиПоЗначению(ТекущийПользователь)<>Неопределено) Тогда
	//	Возврат Истина;
	//	
	//Иначе
	//	Возврат Ложь;
	//	
	//КонецЕсли;
	
КонецФункции

// Функция проверят доступность роли по её наименованию
&НаСервере
Функция РольПользователяДоступна(НаименованиеРоли) Экспорт
	Если КП_ОбщееСерверПС.ЭтоРольПолныеПрава()  или РольДоступна("КП_Администратор") Тогда
		Возврат Истина;
	Иначе
		Возврат РольДоступна(НаименованиеРоли);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СкопироватьСрокВыполнения(Команда)
	
	Если Объект.ОсновныеИсполнители.Количество()=0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Сначала заполните список исполнителей.';en='Please fill out the list of users.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СкопироватьСрокВыполненияЗавершение", ЭтотОбъект), НСтр("ru='Установить всем исполнителям срок выполнения как у '; en='Set all users due date as ';")+СокрЛП(Объект.ОсновныеИсполнители[0].ТочкаАдресации)+"?", РежимДиалогаВопрос.ДаНет, , ,КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСрокВыполненияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    УстановитьСрокИсполненияКакУПервогоИсполнителя();
    
    Состояние(НСтр("ru='Срок исполнения установлен.';en='Period of performance set.'"));

КонецПроцедуры

Процедура УстановитьСрокИсполненияКакУПервогоИсполнителя()
	
	Если Объект.ОсновныеИсполнители.Количество()=0 Тогда
		Возврат;
		
	КонецЕсли;
	
	СтрокаПервогоИсполнителя=Объект.ОсновныеИсполнители[0];
	
	Для НомерСтроки=1 По Объект.ОсновныеИсполнители.Количество()-1 Цикл
		СтрокаТЧ=Объект.ОсновныеИсполнители[НомерСтроки];
		СтрокаТЧ.СрокВыполненияЧасов=СтрокаПервогоИсполнителя.СрокВыполненияЧасов;
		СтрокаТЧ.НеИспользоватьГрафикРаботы=СтрокаПервогоИсполнителя.НеИспользоватьГрафикРаботы;
		СтрокаТЧ.СрокВыполненияДатаВремя=СтрокаПервогоИсполнителя.СрокВыполненияДатаВремя;
		СтрокаТЧ.СрокВыполненияТекст=СтрокаПервогоИсполнителя.СрокВыполненияТекст;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНаименованиеНажатие(Элемент)
	
 	Перем СтрокаШаблона;
   	
	Если НЕ ЗначениеЗаполнено(ВидПроцесса) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не указан вид процесса. Заполнение наименования по шаблону не возможно.';en='Unknown type of process. Filling in the name of the template is not possible.'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
	КонецЕсли;
	 
    СтрокаШаблона=КП_ОбщееСервер.ПолучитьЗначениеРеквизитаОбъекта(ВидПроцесса, "ФорматШаблонаНаименований");
    Если СтрДлина(СтрокаШаблона)>75 Тогда
        СтрокаШаблона=Лев(СтрокаШаблона, 75)+Символы.ПС+Сред(СтрокаШаблона, 76);
    КонецЕсли;
    
    Если СтрДлина(СтрокаШаблона)>=150 Тогда
        СтрокаШаблона=Лев(СтрокаШаблона, 150)+"...";
    КонецЕсли;		
    
    Если НЕ ПустаяСтрока(Объект.Наименование) Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ДекорацияНаименованиеНажатиеЗавершениеОтветаНаВопрос", ЭтотОбъект), 
			"Наименование будет сформировано по заданному в виде процесса шаблону"+Символы.ПС+СтрокаШаблона+". Продолжить?", 
			КП_ОбщееКлиент.КнопкиВопроса("Да, сформировать"),,,КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
    КонецЕсли;
    
    ДекорацияНаименованиеНажатиеФрагментПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ДекорацияНаименованиеНажатиеЗавершениеОтветаНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ДекорацияНаименованиеНажатиеФрагментПродолжение();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНаименованиеНажатиеФрагментПродолжение()
    
    Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
        ПоказатьВопрос(Новый ОписаниеОповещения("ДекорацияНаименованиеНажатиеЗавершение", ЭтотОбъект), НСтр("ru='Потребуется запись бизнес-процесса. Продолжить?';en='System needs to save a business process. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет, 60, ,КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
        
    КонецЕсли;
    
    ДекорацияНаименованиеНажатиеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНаименованиеНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Отказ=Истина;
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        Отказ=Истина;
        Возврат;
    КонецПопытки;
    
    ДекорацияНаименованиеНажатиеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНаименованиеНажатиеФрагмент()
    
    Объект.Наименование=КП_Процессы.ПолучитьНаименованиеПоШаблону(Объект.Ссылка, ВидПроцесса);

КонецПроцедуры

&НаКлиенте
Процедура ПечатьТекущихПараметров(Команда)
	ПараметрыФормы=Новый Структура;
	ПараметрыФормы.Вставить("БизнесПроцесс", Объект.Ссылка);
	
	ФормаПечати=ПолучитьФорму("Обработка.КП_ПараметрыПроцесса.Форма.Форма", ПараметрыФормы);
	ФормаПечати.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПроекты(Команда)
	ПараметрыФормы=Новый Структура("ЗакрыватьПриВыборе, МножественныйВыбор, РежимВыбора", Ложь, Истина, Истина);
	ОткрытьФорму("Справочник.Проекты.ФормаВыбора", ПараметрыФормы, Элементы.ПроектыБизнесПроцесса); 

КонецПроцедуры

Процедура УстановитьОтображениеПроектов()
	
	Если НЕ ФлагИспользованиеПроектов Тогда
		Возврат;
	КонецЕсли;
	
	Если ФлагПроектыБизнесПроцессаОткрыты Тогда
		Элементы.ДекорацияПоказатьСкрытьПроекты.Заголовок=НСтр("ru='↑ Скрыть проекты бизнес-процесса';en='↑ Hide related projects';");
	Иначе
		Элементы.ДекорацияПоказатьСкрытьПроекты.Заголовок=НСтр("ru='↓ Показать проекты бизнес-процесса';en='↓ Show related projects';");
	КонецЕсли;                                                                     
	
	Элементы.ГруппаПроектыБизнесПроцессаСписок.Видимость=ФлагПроектыБизнесПроцессаОткрыты;
		
КонецПроцедуры

Функция ВПроцессеЕстьСсылки(БизнесПроцесс)
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                    |	КП_СсылкиПроцессов.Объект
	                    |ИЗ
	                    |	РегистрСведений.КП_СсылкиПроцессов КАК КП_СсылкиПроцессов
	                    |ГДЕ
	                    |	КП_СсылкиПроцессов.БизнесПроцесс = &БизнесПроцесс");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияПоказатьСкрытьСсылкиНажатие(Элемент)
	
	ФлагСсылкиБизнесПроцессаОткрыты=НЕ ФлагСсылкиБизнесПроцессаОткрыты;
	
	УстановитьОтображениеСсылокПроцесса();
	
КонецПроцедуры

Процедура УстановитьОтображениеСсылокПроцесса()
	
	Если ФлагСсылкиБизнесПроцессаОткрыты Тогда
		Элементы.ДекорацияПоказатьСкрытьСсылки.Заголовок=НСтр("ru='↑ Скрыть документы и прочие объекты'; en='↑ Hide documents and other objects';");
	Иначе
		Элементы.ДекорацияПоказатьСкрытьСсылки.Заголовок=НСтр("ru='↓ Показать документы и прочие объекты'; en='↓ Show documents and other objects';");
	КонецЕсли;
	
	Элементы.СписокСсылок.Видимость=ФлагСсылкиБизнесПроцессаОткрыты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКорпоративныхПроцессов(ФайлСсылка)
	
	ТекстСообщения = НСтр("ru='Выполняется формирование печатной формы...';en='Performed forming the printed form ...'");
	Состояние(ТекстСообщения);
	
	ОбъектСсылка=Объект.Ссылка;
	
	//получим данные
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Формирование печатной формы начато. Получение данных макета.", ОбъектСсылка, ФайлСсылка);
	
	МакетИДанныеОбъекта=ПолучитьМакетИДанныеБизнесПроцесса(ФайлСсылка);
	
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Вывод макета.", ОбъектСсылка, ФайлСсылка);

	КП_РаботаСФайламиКлиент.НапечататьКорпоративныйБизнесПроцесс(ОбъектСсылка, ФайлСсылка, МакетИДанныеОбъекта, МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
	
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Формирование закончено.", ОбъектСсылка, ФайлСсылка);

	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетИДанныеБизнесПроцесса(ФайлСсылка)
	ПроцессСсылка=ЭтаФорма.РеквизитФормыВЗначение("Объект");
	МакетИДанныеОбъекта=БизнесПроцессы.КП_БизнесПроцесс.ПолучитьДанныеПечати(ПроцессСсылка, ФайлСсылка);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", УправлениеПечатью.ПолучитьЛокальныйКаталогФайловПечати());
	Возврат МакетИДанныеОбъекта;
	
КонецФункции

&НаКлиенте
Процедура ПечатьПроцессаПоШаблону(Команда)
	
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПечатьПроцессаПоШаблонуЗавершение", ЭтотОбъект, Новый Структура("Команда", Команда)), НСтр("ru='Экземпляр процесса будет записан. Продолжить?';en='Instance of the process will be saved. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет,,, КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
		
	КонецЕсли;
	
	ПечатьПроцессаПоШаблонуФрагмент(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьПроцессаПоШаблонуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Команда = ДополнительныеПараметры.Команда;
    
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        КП_ОбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
        Возврат;
    КонецПопытки;
    
    
    ПечатьПроцессаПоШаблонуФрагмент(Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПечатьПроцессаПоШаблонуФрагмент(Знач Команда)
    
    Перем ИмяКоманды, КодШаблона, ШаблонФайла;
    
    ИмяКоманды=Команда.Имя;
    КодШаблона=СтрЗаменить(ИмяКоманды, "КомандаПечати_", "");
    
    ШаблонФайла=КП_РаботаСФайлами.ПолучитьШаблонКомандыПечатьПоКоду(КодШаблона, Объект.ВидПроцесса);
    
    Если НЕ ЗначениеЗаполнено(ШаблонФайла) Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найден шаблон файла по коду ';")+КодШаблона);
        Возврат;
    КонецЕсли;
    
    //напечатаем ШаблонФайла
    
    ПечатьКорпоративныхПроцессов(ШаблонФайла);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьВЖурналСобытийФормированиеПечатнойФормы(ТекстСообщения, ДокументСсылка, ФайлСсылка)
	
	ЗаписьЖурналаРегистрации("Формирование бизнес-процесса по шаблону.", УровеньЖурналаРегистрации.Информация, ДокументСсылка, ФайлСсылка, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
	
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, "РеквизитПроцесса_", "");
	
	РеквизитПроцесса=КП_Процессы.НайтиРеквизитПроцессаПоИмени(Объект.Ссылка, ИмяРеквизита);
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	         	
	НайденноеЗначение=КП_ОбщееСервер.ПолучитьЗначениеРеквизитаСвойствПоНаименованию(РеквизитПроцесса, Текст); 
	
	Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
		ДанныеВыбора=НайденноеЗначение;
		ЭтаФорма[Элемент.Имя]=НайденноеЗначение;     

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, "РеквизитПроцесса_", "");
	
	РеквизитПроцесса=КП_Процессы.НайтиРеквизитПроцессаПоИмени(Объект.Ссылка, ИмяРеквизита);
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	         	
	НайденноеЗначение=КП_ОбщееСервер.ПолучитьЗначениеРеквизитаСвойствПоНаименованию(РеквизитПроцесса, Текст); 
	
	Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
		ДанныеВыбора=НайденноеЗначение;
		ЭтаФорма[Элемент.Имя]=НайденноеЗначение;
		
	Иначе
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУчастниковПроцесса()
	
	ТаблицаУчастников=КП_ОбщееСерверПС.ПолучитьТаблицуВсехУчастниковПроцесса(Объект.Ссылка, Объект.ВидПроцесса);
	
	//заменим данные в таблице на значения из экземпляра процесса
	Для Каждого СтрокаТЧ Из ТаблицаУчастников Цикл
		Если СтрокаТЧ.ВидУчастника="ИнициаторПроцесса" Тогда
			СтрокаТЧ.Исполнитель=Объект.Автор;
		ИначеЕсли СтрокаТЧ.ВидУчастника="КонтролерПроцесса" Тогда
			СтрокаТЧ.Исполнитель=Объект.Контролер;			
		КонецЕсли;
	КонецЦикла;
	
	УчастникиПроцесса.Загрузить(ТаблицаУчастников);

	//дополним таблицу текущими список основных исполнителей
	ОбновитьОсновныхИсполнителейВТаблицеУчастников();
	
КонецПроцедуры

Процедура ОбновитьОсновныхИсполнителейВТаблицеУчастников()
	
	//удалим из таблицы участников всех где используется данный элемент
	
	ВладелецОсновныхУчастников=НСтр("ru='Основной список'; en='Main list';");
	
	СтрокиСОсновнымиУчастниками = УчастникиПроцесса.НайтиСтроки(Новый Структура("Владелец", ВладелецОсновныхУчастников));
	Для Каждого СтрокаТЧ Из СтрокиСОсновнымиУчастниками Цикл
		УчастникиПроцесса.Удалить(СтрокаТЧ);
	КонецЦикла;

	//добавим строки 
	Для Каждого СтрокаТЧ Из Объект.ОсновныеИсполнители Цикл
		НоваяСтрока=УчастникиПроцесса.Добавить();
		ТочкаАдресации=СтрокаТЧ.ТочкаАдресации;
		НоваяСтрока.Исполнитель=ТочкаАдресации;
		НоваяСтрока.ДатаВыполненияПланСтрока=СтрокаТЧ.СрокВыполненияТекст;
		Если КП_Процессы.ЭтоТочкаРолевойАдресации(ТочкаАдресации) Тогда
			НоваяСтрока.ВидУчастникаПредставление=НСтр("ru='Исполнитель роли'; en='Role user';");
			НоваяСтрока.ВидУчастника="Роль";
		Иначе
			НоваяСтрока.ВидУчастникаПредставление=НСтр("ru='Исполнитель'; en='Employee';");
			НоваяСтрока.ВидУчастника="Исполнитель";
		КонецЕсли;
		
		НоваяСтрока.Владелец=ВладелецОсновныхУчастников;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВсеУчастникиОбновитьНажатие(Элемент)
	
	ОбновитьПовторноИспользуемыеЗначения();
	ОбновитьУчастниковПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьСкрытьУчастниковПроцессаНажатие(Элемент)
	
	ФлагСписокУчастниковПроцессаОткрыт=НЕ ФлагСписокУчастниковПроцессаОткрыт;
	
	Если ФлагСписокУчастниковПроцессаОткрыт Тогда
		Элементы.ДекорацияПоказатьСкрытьУчастниковПроцесса.Заголовок=НСтр("ru='↑ Скрыть участников процесса';en='↑ Hide process users';");
		ДекорацияВсеУчастникиОбновитьНажатие(Неопределено);
	Иначе
		Элементы.ДекорацияПоказатьСкрытьУчастниковПроцесса.Заголовок=НСтр("ru='↓ Показать всех участников процесса';en='↓ Show process users';");
	КонецЕсли;                                                                     
	
	Элементы.ГруппаСписокУчастниковПроцесса.Видимость=ФлагСписокУчастниковПроцессаОткрыт;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДекорацияСкопироватьВизуальнуюСхемуНажатие(Элемент)
	
	#Если ВебКлиент Тогда
	ПоказатьПредупреждение(Неопределено, "Редактирование схемы процесса в веб-клиенте невозможно.");
	Возврат;
	#КонецЕсли
	Если Объект.ВизуальнаяСхемаСкопирована Тогда
		ТекстВопроса="Скопировать схему из вида процесса?";
	Иначе
		ТекстВопроса="Включить возможность редактирования схемы?";
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ДекорацияВизуальнаяСхемаСкопированатВопросОКопированииЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,КП_ОбщееКлиент.ЗаголовокДиалога());  
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ДекорацияВизуальнаяСхемаСкопированатВопросОКопированииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    СкопироватьСхемуИзВидаПроцесса();
	
    Состояние(НСтр("ru='Визуальная схема скопирована';en='Flowchart has copied';"));
	
	КП_Процессы.ЗаписатьВЖурналПроцесса(">>>Визуальная схема скопирована из вида процесса<<<", Объект.Ссылка,,,2);
    
    ОформлениеНадписиСхемы();
	
	Модифицированность=Истина;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСхемуИзВидаПроцесса()
	
	СхемаБизнесПроцесса=ВидПроцесса.ХранилищеКартыПроцесса.Получить();	
	Объект.ВизуальнаяСхемаСкопирована=Истина;

КонецПроцедуры

Процедура ОформлениеНадписиСхемы()
	
	Если Объект.ВизуальнаяСхемаСкопирована Тогда
		Элементы.ДекорацияСкопироватьВизуальнуюСхему.Заголовок="Обновить схему";
		Элементы.ДекорацияВизуальнаяСхемаСкопирована.Видимость=Истина;
		Элементы.ГруппаВизуальныеОбъекты.Видимость=Истина;
	Иначе
		Элементы.ДекорацияСкопироватьВизуальнуюСхему.Заголовок="Включить редактирование схемы экземпляра процесса";
		Элементы.ДекорацияВизуальнаяСхемаСкопирована.Видимость=Ложь;
		Элементы.ГруппаВизуальныеОбъекты.Видимость=Ложь;
	КонецЕсли;
	
	Элементы.СхемаБизнесПроцесса.ТолькоПросмотр=Объект.Завершен ИЛИ НЕ Объект.ВизуальнаяСхемаСкопирована;
	//Элементы.СхемаБизнесПроцесса.Доступность=Объект.ВизуальнаяСхемаСкопирована;

КонецПроцедуры

#Область КомандаТребуемыеРоли

&НаСервере
Функция ПолучитьСписокРеквизитов()
	СписокРеквизитов=КП_ОбщееСервер.ПолучитьСписокРеквизитов(ЭтаФорма);	
	Возврат СписокРеквизитов;
	
КонецФункции

&НаКлиенте
Процедура ОсновныеИсполнителиПередНачаломИзменения(Элемент, Отказ)
	Отказ=Истина;
	
	СтрокаТЧ=Элементы.ОсновныеИсполнители.ТекущаяСтрока;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуАдресации(СтрокаТЧ);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_НачалоВыбораВнешнейСсылкиДополнительногоРеквизита(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ИмяРеквизита=СтрЗаменить(Элемент.Имя, "РеквизитПроцесса_", "");
	
	РеквизитПроцесса=КП_Процессы.НайтиРеквизитПроцессаПоИмени(Объект.Ссылка, ИмяРеквизита);
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	ТипРеквизита=КП_ОбщееСервер.ПолучитьРеквизитОбъекта(РеквизитПроцесса, "ТипРеквизита");
		
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ВыборТипаВнешнегоОбъектаЗавершение(Результат, ИмяЭлемента) Экспорт
    
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[ИмяЭлемента]=Результат;

КонецПроцедуры

&НаКлиенте
Процедура СсылкиДобавитьДокумент(Команда)
		
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Вопрос(НСтр("ru='Бизнес-процесс будет записан. Продолжить?';en='Business process will be saved. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, НСтр("ru='СЭД ""Корпоративный документооборот""';en='EDS ""Corporate Workflow""'"), КодВозвратаДиалога.Нет)=КодВозвратаДиалога.Нет Тогда
			Отказ=Истина;
			Возврат;
		КонецЕсли;
		
		Попытка
			Записать();			
		Исключение
			Сообщить(ОписаниеОшибки());  
			Возврат;			
		КонецПопытки;
		
		Если Параметры.Ключ.Пустая() Тогда
			Возврат;			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокЭлементов=ПолучитьСписокИменДокументовСистемы();
	
	ПараметрыФормы = Новый Структура("СписокЭлементов", СписокЭлементов);
	ПараметрыФормы.Вставить("ИмяКнопкиВыбора", "Выбрать тип документа");
	ПараметрыФормы.Вставить("РезультатТип", "Документ");
	ОткрытьФорму("ОбщаяФорма.КП_ВыборИзСписка", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура СсылкиДобавитьСправочник(Команда)
	Если Параметры.Ключ.Пустая() Тогда
		
		Если Вопрос(НСтр("ru='Бизнес-процесс будет записан. Продолжить?';en='Business process will be saved. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да, НСтр("ru='СЭД ""Корпоративный документооборот""';en='EDS ""Corporate Workflow""'"), КодВозвратаДиалога.Нет)=КодВозвратаДиалога.Нет Тогда
			Отказ=Истина;
			Возврат;			
		КонецЕсли;
		
		Попытка
			Записать();			
		Исключение
			Сообщить(ОписаниеОшибки());  
			Возврат;			
		КонецПопытки;
		
		Если Параметры.Ключ.Пустая() Тогда
			Возврат;			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокЭлементов=ПолучитьСписокИменСправочниковСистемы();
	
	ПараметрыФормы = Новый Структура("СписокЭлементов", СписокЭлементов);
	ПараметрыФормы.Вставить("ИмяКнопкиВыбора", "Выбрать тип справочника");
	ПараметрыФормы.Вставить("РезультатТип", "Справочник");
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("ОбщаяФорма.КП_ВыборИзСписка", ПараметрыФормы);

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокИменСправочниковСистемы()
	СписокИмен=Новый СписокЗначений;
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	КП_СписокМетаданных.Ссылка,
	                    |	КП_СписокМетаданных.Наименование,
	                    |	КП_СписокМетаданных.ПолноеНаименование
	                    |ИЗ
	                    |	Справочник.КП_СписокМетаданных КАК КП_СписокМетаданных
	                    |ГДЕ
	                    |	КП_СписокМетаданных.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_СписокМетаданных.Родитель = &Родитель");
						
	Запрос.УстановитьПараметр("Родитель", Справочники.КП_СписокМетаданных.МетаданныеСправочники);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		ИмяМетаданных=СтрЗаменить(Выборка.ПолноеНаименование, "Справочник.", "");
		Синоним=Метаданные.Справочники[ИмяМетаданных].Синоним;
		Если Найти(НРег(Синоним), "(не используется")>0 Тогда
			Продолжить;
		КонецЕсли;		
		СписокИмен.Добавить(ИмяМетаданных, Синоним);
	КонецЦикла;
	
	Возврат СписокИмен;
	
КонецФункции

&НаСервере
Функция ПолучитьСписокИменДокументовСистемы()
	СписокИмен=Новый СписокЗначений;
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	КП_СписокМетаданных.Ссылка,
	                    |	КП_СписокМетаданных.Наименование,
	                    |	КП_СписокМетаданных.ПолноеНаименование
	                    |ИЗ
	                    |	Справочник.КП_СписокМетаданных КАК КП_СписокМетаданных
	                    |ГДЕ
	                    |	КП_СписокМетаданных.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_СписокМетаданных.Родитель = &Родитель");
						
	Запрос.УстановитьПараметр("Родитель", Справочники.КП_СписокМетаданных.МетаданныеДокументы);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		ИмяМетаданных=СтрЗаменить(Выборка.ПолноеНаименование, "Документ.", "");
		Попытка
			Синоним=Метаданные.Документы[ИмяМетаданных].Синоним;
		Исключение
			Продолжить;
		КонецПопытки;
		Если Найти(НРег(Синоним), "(не используется")>0 Тогда
			Продолжить;
		КонецЕсли;
		СписокИмен.Добавить(ИмяМетаданных, Синоним);
	КонецЦикла;
	
	Возврат СписокИмен;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлементВСписокОбъектов(ВыбранныйЭлемент)
	Если ВыбранныйЭлемент=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЭлемент=ВыбранныйЭлемент["ВыбранныйЭлемент"];
	РезультатТип=ВыбранныйЭлемент["РезультатТип"];
	ИмяЭлемента=СокрЛП(РезультатЭлемент);
	ИмяФормыДляВыбора=РезультатТип+"."+ИмяЭлемента+".ФормаВыбора";
	ПараметрыФормы=Новый Структура("РежимВыбора", Истина);
	
	ОткрытьФорму(ИмяФормыДляВыбора, ПараметрыФормы, Элементы.СписокСсылок,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

&НаКлиенте
Процедура ОтборВидСобытийПриИзменении(Элемент)
	ОбновитьСписокЖурналаПроцесса();
КонецПроцедуры

Процедура ОбновитьСписокЖурналаПроцесса()	
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	РегистрСведенийаДокументооборотЖурналВыполненияПроцесса.ДатаЗаписи КАК ДатаЗаписи,
	             |	РегистрСведенийаДокументооборотЖурналВыполненияПроцесса.ТочкаКБП КАК ТочкаКБП,
	             |	РегистрСведенийаДокументооборотЖурналВыполненияПроцесса.ТекстЗаписи КАК ТекстЗаписи,
	             |	РегистрСведенийаДокументооборотЖурналВыполненияПроцесса.УникальныйИдентификаторЗаписи КАК УникальныйИдентификаторЗаписи,
	             |	РегистрСведенийаДокументооборотЖурналВыполненияПроцесса.НомерЗаписи КАК НомерЗаписи,
	             |	РегистрСведенийаДокументооборотЖурналВыполненияПроцесса.ВидСобытияЧисло КАК ВидСобытияЧисло
	             |ИЗ
	             |	РегистрСведений.КП_ЖурналВыполненияПроцесса КАК РегистрСведенийаДокументооборотЖурналВыполненияПроцесса
	             |ГДЕ
	             |	РегистрСведенийаДокументооборотЖурналВыполненияПроцесса.БизнесПроцесс = &БизнесПроцесс";
		
	Если ОтборВидСобытий>0 Тогда
		ТекстЗапроса=ТекстЗапроса+" И РегистрСведенийаДокументооборотЖурналВыполненияПроцесса.ВидСобытияЧисло = &ВидСобытия";
	КонецЕсли;
	
	СписокЖурналПроцесса.ТекстЗапроса=ТекстЗапроса;
	
	СписокЖурналПроцесса.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", Объект.Ссылка);
	
	Если ОтборВидСобытий>0 Тогда
		СписокЖурналПроцесса.Параметры.УстановитьЗначениеПараметра("ВидСобытия", ОтборВидСобытий);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗначенияРеквизитов(Команда)
	
	Если Параметры.Ключ.Пустая() ИЛИ НЕ Объект.Стартован Тогда
		ПоказатьПредупреждение(Неопределено, "Обновление возможно только для запущенного на исполнение процесса");
		Возврат;
	КонецЕсли;
	
	ОбновитьЗначенияРеквизитовСервером();
	
	Состояние("Значения реквизитов обновлены");
	
КонецПроцедуры

Процедура ОбновитьЗначенияРеквизитовСервером()
	
	ТаблицаРеквизитов=КП_Процессы.ПолучитьТаблицуРеквизитовПроцесса(Объект.Ссылка);  //ЗначениеРеквизита | РеквизитПроцесса
	
	//перезаполним элементы формы
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		
		РеквизитПроцесса=СтрокаТаблицы.РеквизитПроцесса;
		Если НЕ ПоказыватьСистемныеРеквизиты И РеквизитПроцесса.Системный Тогда
			Продолжить;			
		КонецЕсли;
		
		ИмяРеквизита="РеквизитПроцесса_"+РеквизитПроцесса.ИмяРеквизитаДляФункций;	
		
		ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
		
		//установим значение реквизиту
		Если РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Гиперссылка Тогда
			ЗначениеРеквизита=Строка(ЗначениеРеквизита);
			СтрокаHtml=Новый ФорматированнаяСтрока(ЗначениеРеквизита,,,,ЗначениеРеквизита);
			ЭтаФорма[ИмяРеквизита]=СтрокаHtml;
		Иначе
			ЭтаФорма[ИмяРеквизита]=ЗначениеРеквизита;
		КонецЕсли;
		
	КонецЦикла; //по таблице реквизитов		
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаБизнесПроцессаПриИзменении(Элемент)
	СхемаПроцессаИзменена=Истина;
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура СетьМаршрутныхТочекОбновить(Команда)
	Элементы.СетьМаршрутныхТочек.Обновить();
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	РаботаСФайлами.ПриЗаписиНаСервере(Отказ,ТекущийОбъект,ПараметрыЗаписи,Параметры);
КонецПроцедуры

#КонецОбласти

#Область НастройкаЦветовОформления

&НаКлиенте
Процедура ЗаписатьНастроенныеЦвета()
	
	Если НЕ ПустаяСтрока(АдресХраненияНастройкиЦветов) Тогда
		МассивНастройкиЦветов=ПолучитьИзВременногоХранилища(АдресХраненияНастройкиЦветов);
		Если ЗначениеЗаполнено(МассивНастройкиЦветов) Тогда
			СтруктураЦвета=Новый Структура;
			СтруктураЦвета.Вставить("ЦветТекста", МассивНастройкиЦветов[0]);
			СтруктураЦвета.Вставить("ЦветФона", МассивНастройкиЦветов[1]);
			СтруктураЦвета.Вставить("ШрифтЖирный", МассивНастройкиЦветов[2]);
			СтруктураЦвета.Вставить("ШрифтНаклонный", МассивНастройкиЦветов[3]);
			КП_ОформлениеСтрокСервер.ЗаписатьСтруктуруЦветаОбъекта(Объект.Ссылка, СтруктураЦвета, ТекущийПользователь);
		Иначе
			//адрес хранения был заполнен, но массив настройки теперь пустой
			СписокОбъектов=Новый СписокЗначений;
			СписокОбъектов.Добавить(Объект.Ссылка);
			КП_ОформлениеСтрокСервер.УдалитьОформлениеСпискаОбъектов(СписокОбъектов, ТекущийПользователь);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЗаголовка()
			
	Если НЕ Параметры.Ключ.Пустая() Тогда		
		
		ИмяРеквизита="Наименование";
		
		СтруктураЦвета=КП_ОформлениеСтрокСервер.ПолучитьСтруктуруЦветаОбъекта(Объект.Ссылка, ТекущийПользователь);
		
		Если СтруктураЦвета<>Неопределено Тогда
			МассивНастройкиЦветов=Новый Массив;
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ЦветТекста);
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ЦветФона);
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ШрифтЖирный);
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ШрифтНаклонный);
			
			АдресХраненияНастройкиЦветов=ПоместитьВоВременноеХранилище(МассивНастройкиЦветов, ЭтаФорма.УникальныйИдентификатор);
			
			КП_ОформлениеСтрокКлиент.УстановитьОформлениеНаименования(Элементы[ИмяРеквизита], МассивНастройкиЦветов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //НастройкаЦветовОформления

#Область Инициализация

//инициализация переменных индикатора процесса старта
ВсегоШаговИнициализации=10; 
ИнициализацияПроцент=0;
ВеличинаШагаИнициализации=100/ВсегоШаговИнициализации;
СтрокаИнициализацииПроцесса=НСтр("ru='Инициализация процесса...'; en='Initializing...';");
СрокПоУмолчаниюЧасов=8;
СрокПоУмолчаниюДата=Неопределено;
ИдетСменаСтраницы=Ложь;
ОтменитьЗапускПроцесса=Ложь;
СхемаПроцессаИзменена=Ложь;
#КонецОбласти
