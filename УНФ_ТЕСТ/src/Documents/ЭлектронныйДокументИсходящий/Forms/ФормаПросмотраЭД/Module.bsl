////////////////////////////////////////////////////////////////////////////////
// Модуль формы Документ.ЭлектронныйДокументИсходящий.ФормаПросмотраЭД
//
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебный.НовыйКонтекстОперации();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбменСКонтрагентамиСлужебный.СкрытьВсеЭлементы(Элементы);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	СформированныеЭД = Неопределено;
	АдресФайловЭД    = Неопределено;
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	ЕстьПравоНастройкиОбмена = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
	
	Если Не ИспользуетсяНесколькоОрганизацийЭД И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЭлектронноеВзаимодействиеСлужебный.ОрганизацияПоУмолчанию();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
																		Элементы.ПанельКонтекстныхНовостей, 
																		Элементы.ГруппаКонтекстныхПодсказок);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
	Если ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		ЗаполнитьПоСозданномуЭД();
		
	ИначеЕсли Параметры.Свойство("АдресФайловЭД", АдресФайловЭД)
			И ЭтоАдресВременногоХранилища(АдресФайловЭД) Тогда
		
		НастройкиОбмена = Неопределено;
		Если Не Параметры.Свойство("НастройкиОбмена", НастройкиОбмена) Тогда
			Возврат;
		КонецЕсли;

		НастройкиОбмена.Свойство("ВерсияФормата", ВерсияФормата);
		
		ЗаполнитьЗначенияСвойств(Объект, НастройкиОбмена);
		ФайлыЭД = ПолучитьИзВременногоХранилища(АдресФайловЭД);
		
		ДополнительныеДанные = Неопределено;
		Параметры.Свойство("ДополнительныеДанные", ДополнительныеДанные);
		
		СформированныеЭД = Новый ФиксированноеСоответствие(ФайлыЭД);
		
		Для Каждого Файл Из СформированныеЭД Цикл
			Объект.ВидЭД = Файл.Ключ;
			
			Если ЗначениеЗаполнено(Файл.Значение.СтруктураЭД) Тогда
				ЗаполнитьЗначенияСвойств(Объект, Файл.Значение.СтруктураЭД,,"ДокументыОснования");
				
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Объект.ДокументыОснования,
					Файл.Значение.СтруктураЭД.ДокументыОснования, "ДокументОснование");
				
				Подписанты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Файл.Значение.СтруктураЭД, "Подписанты");
				Если ЗначениеЗаполнено(Подписанты) Тогда
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(Объект.СписокПодписантов, Подписанты, "Подписант");
				КонецЕсли;
				
			КонецЕсли;
			
			// Формирование маршрута подписания
			РеквизитыФормы = Новый Структура("ВладелецФайла, ТипЭлементаВерсииЭД, НаправлениеЭД");
			РеквизитыФормы.Вставить("ВладелецФайла"      , Объект.Ссылка);
			РеквизитыФормы.Вставить("ТипЭлементаВерсииЭД", Объект.ТипЭлементаВерсииЭД);
			РеквизитыФормы.Вставить("НаправлениеЭД"      , НастройкиОбмена.НаправлениеЭД);
			
			РеквизитыВладельцаФайла = Новый Структура;
			РеквизитыВладельцаФайла.Вставить("МаршрутПодписания", Объект.МаршрутПодписания);
			РеквизитыВладельцаФайла.Вставить("СписокПодписантов", Объект.СписокПодписантов);
			
			ПараметрыМаршрута = ОбменСКонтрагентамиСлужебный.ПараметрыМаршрутаПодписанияДокумента(
				Неопределено, РеквизитыФормы, НастройкиОбмена, РеквизитыВладельцаФайла);
			
			ВесМаршрута = 0;
			ТаблицаПодписания = ЭлектронноеВзаимодействиеСлужебный.ТаблицаМаршрутаПоПараметрам(Объект.Ссылка, ПараметрыМаршрута.МаршрутПодписания,
				ПараметрыМаршрута.УсловиеПодписания, ПараметрыМаршрута.СписокПодписантов, ВесМаршрута);
			
			СвойстваФайлаЭД  = Новый Структура("НаправлениеЭД", НастройкиОбмена.НаправлениеЭД);
			
			ОписаниеМаршрутаПодписания = Новый Структура("СвойстваФайлаЭД, ТаблицаМаршрутов", СвойстваФайлаЭД, ТаблицаПодписания);
		КонецЦикла;
		
		ЗаполнитьДеревоПодчиненныеЭДНаСервере();
		ЗаполнитьИнформациюОДокументе();
	
		Заголовок = СтрШаблон(НСтр("ru = '%1 (Создание)'"), ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(Объект));
		Модифицированность = Истина;
		
	Иначе
		
		Заголовок = НСтр("ru = 'Произвольный документ (создание)'");
		
		Объект.ТипДокумента = Перечисления.ТипыЭД.Прочее;
		Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД;
		Если Не ОбменСКонтрагентамиСлужебный.ВидЭДИспользуетсяПоНаправлению(Объект.ВидЭД,
			Перечисления.НаправленияЭД.Исходящий) Тогда
			ОбщегоНазначения.СообщитьПользователю(ОбменСКонтрагентамиСлужебныйКлиентСервер.ТекстСообщенияВидЭДНеПоддерживается(Объект.ВидЭД,
				НСтр("ru = 'Создание документа невозможно.'")));
				Отказ = Истина;
				Возврат; 
		КонецЕсли;
		Объект.ВерсияРегламентаЭДО = Перечисления.ВерсииРегламентаОбмена1С.Версия10;
		Объект.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД;
		Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НеСформирован;
		Объект.ДатаИзмененияСостоянияЭДО = ТекущаяДатаСеанса();
		Объект.УникальныйИД = Новый УникальныйИдентификатор;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
			Объект.Контрагент = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
		КонецЕсли;
		
		ДокументОснование = Неопределено;
		Если Параметры.Свойство("ДокументОснование", ДокументОснование) И ЗначениеЗаполнено(ДокументОснование) Тогда
			МассивОснований = Новый Массив;
			МассивОснований.Добавить(ДокументОснование);
			ЗаполнитьДокументыОснования(МассивОснований);
		КонецЕсли;
		
		Если Параметры.Свойство("ТабличныйДокумент") Тогда
			ДобавитьВложениеИзТабличногоДокумента(Параметры.ТабличныйДокумент);
		КонецЕсли;
		
		ЗаполнитьДеревоПодчиненныеЭДНаСервере();
		
		ПриИзмененииКлючевыхРеквизитов(Истина);
		
	КонецЕсли;
	
	ЗагрузитьДанныеИзНастроекНаСервере();
	
	Если Параметры.ТолькоПросмотр Тогда
		Элементы.ГруппаКомандЕще.Видимость = Ложь;
		Элементы.ОсновныеКоманды.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьПредставлениеЭД();
	
	ПроверитьПредупрежденияДокумента();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОформитьИнтерфейсДляМобильногоКлиентаНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если МодифицированностьПриОткрытии Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ПредставлениеСформировано = Ложь;
	ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента(ПредставлениеСформировано);
	
	Если ПредставлениеСформировано Тогда
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		
		ОбработатьОповещение = Истина;
		
		ОбменСКонтрагентамиСлужебныйКлиент.ПриОбработкеОповещенияФормыПросмотраЭД(ЭтотОбъект, Параметр, ОбработатьОповещение);
		
		Если Не ОбработатьОповещение Тогда
			Возврат;
		КонецЕсли;
		
		ИзменитьДоступностьКнопокПодписания(Истина);
		
		ОбработатьОбновлениеСостоянияЭД();
		
	ИначеЕсли ИмяСобытия = "ОповеститьОСозданииУведомления" И Параметр = ПрисоединенныйФайлСсылка Тогда
		ПоместитьТекстУточненияВОбъект(ТекстУточнения);
		ИзменитьСтатусОтклонить();
		
		ОбработатьОбновлениеСостоянияЭД();
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйДокументИсходящий_ПодборДокументаУчета" И Параметр = Объект.Ссылка Тогда
		
		ОбработатьОбновлениеСостоянияЭД();
		
	ИначеЕсли ИмяСобытия = "ПроведенаПроверкаЭП" Тогда
		Для Каждого ЭД Из Параметр.МассивЭД Цикл
			Если ЭД = ПрисоединенныйФайлСсылка Тогда
				ОбновитьОтображениеДанных();
				ТекущаяСтрока = Элементы.ТаблицаЭП.ТекущиеДанные;
				ДоступныеОтпечатки = Неопределено;
				ЗаполнитьТаблицуЭП(Параметр.Отпечатки, ДоступныеОтпечатки);
				Если ТекущаяСтрока <> Неопределено Тогда
					Элементы.ТаблицаЭП.ТекущаяСтрока = ТаблицаЭП[ТекущаяСтрока.НомерСтроки-1].ПолучитьИдентификатор();
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Параметр.КонтекстОперации <> Неопределено
			И Параметр.КонтекстОперации.Диагностика.Ошибки.Количество() > 0
			И ДоступныеОтпечатки <> Неопределено Тогда
			ПоказыватьОшибку = Ложь;
			Для каждого Отпечаток Из Параметр.Отпечатки Цикл
				ПоказыватьОшибку = ПоказыватьОшибку Или ДоступныеОтпечатки.Найти(Отпечаток) <> Неопределено;
			КонецЦикла;
			Если ПоказыватьОшибку Тогда
				КонтекстОперации = Параметр.КонтекстОперации;
				ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.НовыеПараметрыОбработкиОшибок();
				ПараметрыОбработкиОшибок.КонтекстныйРежимОбработки = Истина;
				ПараметрыОбработкиОшибок.НадписьПредупреждение = Элементы.ПредупреждениеНадпись;
				ПараметрыОбработкиОшибок.ГруппаПредупреждения = Элементы.ГруппаПредупрежденияЭлектронныеПодписи;
				ПараметрыОбработкиОшибок.ТекстПредупреждения = ОбменСКонтрагентамиДиагностикаКлиент.ТекстПредупреждения(КонтекстОперации.Диагностика.Ошибки);
				ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации, ПараметрыОбработкиОшибок);
			Иначе 
				ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.СообщитьОшибкиПользователю(Параметр.КонтекстОперации);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ИДПараметра = "ЭлектронноеВзаимодействие." + УникальныйИдентификатор;
	ПараметрыФормы = ПараметрыПриложения[ИДПараметра];
	Если ПараметрыФормы <> Неопределено Тогда
		ПараметрыПриложения.Удалить(ИДПараметра);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		ШаблонСообщенияОНезаполненности = НСтр("ru = 'Поле ""%1"" не заполнено. Документ не записан.
			|Заполните его и повторите запись.'");
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ШаблонСообщенияОНезаполненности, "Организация"),
				Объект.Ссылка, "Организация", "Объект", Отказ);
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(ШаблонСообщенияОНезаполненности, "Контрагент"),
				Объект.Ссылка, "Контрагент", "Объект", Отказ);
			Возврат;
		КонецЕсли;
		
		СостояниеНастройкиОтправкиПроизвольногоЭД = СостояниеНастройкиОтправкиПроизвольногоЭД();
		ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
		Если ДанныеФайла = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо выбрать файл'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПрисоединенныйФайлИмяФайла",, Отказ);
		ИначеЕсли ДанныеФайла.ФайлРедактируется Тогда
			Отказ = Истина;
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗаписьюПродолжитьПослеОсвобожденияВложения", ЭтотОбъект);
			ПроверитьЗахватНаРедактирование(ОписаниеОповещения, ДанныеФайла);
		ИначеЕсли Не СостояниеНастройкиОтправкиПроизвольногоЭД.ЕстьНастройка Тогда
			Если ЕстьПравоНастройкиОбмена Тогда
				Отказ = Истина;
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("Получатель"              , Объект.Контрагент);
				ПараметрыФормы.Вставить("Отправитель"             , Объект.Организация);
				ПараметрыФормы.Вставить("Действие"                , "Сформировать");
				ПараметрыФормы.Вставить("ПредварительнаяНастройка", Истина);
				
				Оповещение = Новый ОписаниеОповещения("ПослеСозданияНастроекОбмена", ЭтотОбъект);
				
				ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаОбменаСКонтрагентом",
					ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе 
				ТекстСообщения = НСтр("ru = 'Не создано настроек отправки электронных документов между:
					|Организация - %1.
					|Контрагент - %2.
					|Обратитесь к администратору, так как у Вас недостаточно прав для выполнения операции.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрШаблон(ТекстСообщения, Объект.Организация, Объект.Контрагент),,,, Отказ);	
			КонецЕсли;
		ИначеЕсли Не СостояниеНастройкиОтправкиПроизвольногоЭД.МожноФормировать Тогда
			Если ЕстьПравоНастройкиОбмена Тогда
				Отказ = Истина;
				
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
				ПараметрыОткрытия.Вставить("Контрагент" , Объект.Контрагент);
				ПараметрыОткрытия.Вставить("Договор"    , Объект.ДоговорКонтрагента);
		
				ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуНастройкиОтправкиЭДО(ПараметрыОткрытия, ЭтотОбъект);
	
				ТекстСообщения = НСтр("ru = 'Запрещена отправка произвольных документов между:
					|Организация - %1.
					|Контрагент - %2.
					|Включите возможность формирования произвольных документов в настройке отправки и повторите попытку.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрШаблон(ТекстСообщения, Объект.Организация, Объект.Контрагент),,,, Отказ);	
			Иначе 
				ТекстСообщения = НСтр("ru = 'Запрещена отправка произвольных документов между:
					|Организация - %1.
					|Контрагент - %2.
					|Обратитесь к администратору, так как у Вас недостаточно прав для выполнения операции.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(
					СтрШаблон(ТекстСообщения, Объект.Организация, Объект.Контрагент),,,, Отказ);	
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЕстьБлокирующиеОшибки Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'В документе имеются блокирующие отправку предупреждения. Сохранение документа отменено.'"),,,, Отказ);
				
			Возврат;
			
		КонецЕсли;
		
		Отказ = Истина;
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИспользоватьПомощникУстраненияОшибок", Истина);
		ДополнительныеПараметры.Вставить("ДополнительныеДанные", ДополнительныеДанные);
		
		МассивДокументовУчета = МассивДокументовУчета(Объект);
		
		Если ЗначениеЗаполнено(Объект.ВидВнутреннегоДокумента) Тогда
			КлючНастройки = Новый Структура;
			КлючНастройки.Вставить("Организация", Объект.Организация);
			КлючНастройки.Вставить("ВидВнутреннегоДокумента", Объект.ВидВнутреннегоДокумента);
			
			КлючиНастроек = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючНастройки);
			
			КлючиНастроекОбъектов = Новый Соответствие;
			
			Для Каждого ДокументУчета Из МассивДокументовУчета Цикл
				КлючиНастроекОбъектов.Вставить(ДокументУчета, КлючиНастроек);
			КонецЦикла;
			
			ДополнительныеПараметры.Вставить("КлючиНастроекОбъектов", КлючиНастроекОбъектов);
			
			Если ЗначениеЗаполнено(Объект.СписокПодписантов) Тогда
				Подписанты = Новый Массив;
				Для Каждого СтрокаТаблицы Из Объект.СписокПодписантов Цикл
					Подписанты.Добавить(СтрокаТаблицы.Подписант);
				КонецЦикла;
				ПодписантыОбъектов = Новый Соответствие;
				ПодписантыПоВидам = Новый Соответствие;
				ПодписантыПоВидам.Вставить(Объект.ВидВнутреннегоДокумента, Подписанты);
				
				Для Каждого ДокументУчета Из МассивДокументовУчета Цикл
					ПодписантыОбъектов.Вставить(ДокументУчета, ПодписантыПоВидам);
				КонецЦикла;
				
				ДополнительныеПараметры.Вставить("ПодписантыОбъектов", ПодписантыОбъектов);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.МаршрутПодписания) Тогда
				МаршрутыПодписанияОбъектов = Новый Соответствие;
				МаршрутыПоВидам = Новый Соответствие;
				МаршрутыПоВидам.Вставить(Объект.ВидВнутреннегоДокумента, Объект.МаршрутПодписания);
				Для Каждого ДокументУчета Из МассивДокументовУчета Цикл
					МаршрутыПодписанияОбъектов.Вставить(ДокументУчета, МаршрутыПоВидам);
				КонецЦикла;
				ДополнительныеПараметры.Вставить("МаршрутыПодписанияОбъектов", МаршрутыПодписанияОбъектов);
			КонецЕсли;
			
		КонецЕсли;
		
		Описание = Новый ОписаниеОповещения("ПослеЗаписиНовогоЭД", ЭтотОбъект);
		
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивДокументовУчета,
			"Сформировать", ДополнительныеПараметры,, Описание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			// Если вложение записано, то при изменении перечисленных ниже реквизитов
			// надо принудительно перезаполнить их во вложении.
			ОбновитьРеквизитыВложения = (ТекущийОбъект.Контрагент <> Объект.Ссылка.Контрагент
				ИЛИ ТекущийОбъект.Организация <> Объект.Ссылка.Организация
				ИЛИ ТекущийОбъект.Номер <> Объект.Ссылка.Номер
				ИЛИ ТекущийОбъект.Дата <> Объект.Ссылка.Дата
				ИЛИ ТекущийОбъект.Текст <> Объект.Ссылка.Текст);
				
			ОбновитьМаршрутПодписания = ТекущийОбъект.МаршрутПодписания <> Объект.Ссылка.МаршрутПодписания;
			
			Если ОбновитьМаршрутПодписания Тогда
				ПараметрыЗаписи.Вставить("ОбновитьМаршрутПодписания", Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		// До записи документа вложение хранится во временном хранилище, после записи документа
		// создается новый элемент справочника ЭДПрисоединенныеФайлы, в который записывается данные из временного хранилища.
		РазблокироватьДанныеДляРедактирования(ТекущийОбъект.Ссылка, ЭтотОбъект.УникальныйИдентификатор);
		ДанныеВложенияОбновлены = ДобавитьВложениеИзВременногоХранилищаПослеЗаписиДокумента();
		
		Если ОбновитьРеквизитыВложения И НЕ ДанныеВложенияОбновлены Тогда
			ДобавитьОбновитьПрисоединенныеФайлыКСообщению();
		КонецЕсли;
		Заголовок = ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
		
		ОбновитьМаршрутПодписания = Неопределено;
		Если ПараметрыЗаписи.Свойство("ОбновитьМаршрутПодписания", ОбновитьМаршрутПодписания)
			И ЗначениеЗаполнено(ОбновитьМаршрутПодписания) Тогда
			ОбновитьМаршрутыНаСервере(ПрисоединенныйФайлСсылка, Объект.МаршрутПодписания);
		КонецЕсли;
		ВыполнитьОбработкуОповещенияНаСервере();
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", СопроводительнаяЗаписка);
		ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
	КонецЕсли;
	
	ЗаполнитьИнформациюОДокументе();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД")
			И МаршрутПодписанияУказываетсяВДокументе И Не ЗначениеЗаполнено(Объект.МаршрутПодписания) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать маршрут подписания'"), Объект.Ссылка,
			"ПредставлениеНастроекВыбораМаршрута",, Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		ОбменСКонтрагентамиКлиент.ОповеститьОбИзмененииТекущихДелПоЭДО();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПричиныОтклоненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.ПричинаОтклонения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектДополнительнаяИнформацияПриИзменении(Элемент)
	
	СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", СопроводительнаяЗаписка);
	ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ТекущаяСтрокаДерева.ДополнительнаяИнформация = СопроводительнаяЗаписка;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументИБОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ТекстДокументИБНажатие" Тогда
		СтандартнаяОбработка = Ложь;
		ТекстДокументИБНажатие();
	ИначеЕсли НавигационнаяСсылка = "ОткрытьФормуПодбора" Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Описание = Новый ОписаниеОповещения("ОткрытьФормуПодбора", ЭтотОбъект);
			
			Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
			ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;

		ОткрытьФормуПодбора(Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТекстВложениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Если ПрисоединенныйФайлСсылка.Пустая() Тогда
		
		ОткрытьВложениеЗавершение = Новый ОписаниеОповещения("ТекстВложениеЗавершение", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
		|Открытие файла возможно только после записи данных.
		|Данные будут записаны'");
		ПоказатьВопрос(ОткрытьВложениеЗавершение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);

	Иначе
		
		ОткрытьФайлВложения();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МаршрутПодписанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
	АдресХраненияНастроек = ПолучитьАдресХраненияНастроекВыбораМаршрута();
	
	Если АдресХраненияНастроек <> Неопределено Тогда
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборМаршрутаПодписания", ЭтотОбъект);
		ЭлектронноеВзаимодействиеСлужебныйКлиент.ОткрытьВыборМаршрутаПодписания(ЭтотОбъект, АдресХраненияНастроек, 
			Объект.Организация, ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОшибкаФормированияПредставленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтборЖурналаРегистрации = Новый Структура;
		ОтборЖурналаРегистрации.Вставить("Данные", ПрисоединенныйФайлСсылка);
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуПредупреждений(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОбновитьНажатие(Элемент)
	Элементы.КартинкаОбновить.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьИПолучитьЭДЗавершение", ЭтотОбъект);
	ОбменСКонтрагентамиСлужебныйКлиент.НачатьОтправкуПолучениеЭлектронныхДокументов(Оповещение,,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ИдентификаторОрганизации));
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПрекращениеПоддержкиПрямогоОбменаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	Если НавигационнаяСсылка = "ЭДО" Тогда
		СтандартнаяОбработка = Ложь;
		СсылкаНаОписание1СЭДО = ОбменСКонтрагентамиСлужебныйКлиент.СсылкаНаОписание1СЭДО();
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаОписание1СЭДО);
		
	ИначеЕсли НавигационнаяСсылка = "БизнесСеть" Тогда
		СтандартнаяОбработка = Ложь;
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьПромоСайтЭДО();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупреждениеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Сертификаты = Новый Массив;
	Для каждого СтрокаТаблицы Из ТаблицаЭП Цикл
		Сертификаты.Добавить(СтрокаТаблицы.Отпечаток);
	КонецЦикла;
	
	КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'При проверке подписей'");
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.НовыеПараметрыОбработкиОшибок();
	ПараметрыОбработкиОшибок.ГруппаПредупреждения = Элементы.ГруппаПредупрежденияЭлектронныеПодписи;
	ПараметрыОбработкиОшибок.Отбор.Вставить("Сертификат", Сертификаты);
	КонтекстОперации.ОшибкиОбработаны = Ложь;
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура("Организация, Контрагент", Объект.Организация, Объект.Контрагент);
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуВыбораДоговора(
		ПараметрыФормы, Элемент, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаЭП

&НаКлиенте
Процедура ЭПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьСертификат(Элемент.ТекущиеДанные.НомерСтроки, Элемент.ТекущиеДанные.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭППриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаЭП.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьСертификат = ТекущиеДанные.Сертификат <> Неопределено;
	Элементы.ПроверитьПодписи.Видимость = ЕстьСертификат;
	Элементы.ОткрытьСертификат.Видимость = ЕстьСертификат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерезаполнитьДокумент(Команда)
	
	ОбменСКонтрагентамиКлиент.ПерезаполнитьДокумент(Объект.Ссылка, ПрисоединенныйФайлСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	Отклонить = Истина;
	СделатьВсеКомандыНедоступнымиНаМобильномКлиенте();
	ПодключитьОбработчикОжидания("ОтклонитьАннулироватьЭД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Модифицированность = Ложь;
	ТекстВопроса = НСтр("ru = 'Не рекомендуется выбирать документ отражения в учете вручную. Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДокументПродолжить", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЭДНаДиск(Команда)
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		РаботаСФайламиКлиент.СохранитьВместеСЭП(ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	Иначе
		СообщитьОбОтсутствииЭД();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналСобытийЭДО(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПрисоединенныйФайл", ПрисоединенныйФайлСсылка);
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОткрытьФорму("РегистрСведений.ЖурналСобытийЭД.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	Если ТаблицаЭП.Количество() > 0 Тогда
		Если Элементы.ТаблицаЭП.ТекущиеДанные <> Неопределено Тогда
			ПоказатьСертификат(Элементы.ТаблицаЭП.ТекущиеДанные.НомерСтроки, Элементы.ТаблицаЭП.ТекущиеДанные.Отпечаток);
		Иначе
			ОчиститьСообщения();
			ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ОчиститьСообщения();
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаПодписиИСтатусы;
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
		КонтекстОперации.ТекущаяУчетнаяЗапись = Объект.ИдентификаторОрганизации;
		ВторойТитул = ВторойТитулДокумента(ПрисоединенныйФайлСсылка);
		Если ЗначениеЗаполнено(ВторойТитул) Тогда
			ОбменСКонтрагентамиСлужебныйКлиент.ОпределитьСтатусыПодписей(ВторойТитул,, КонтекстОперации, Ложь);
		КонецЕсли;
		ОбменСКонтрагентамиСлужебныйКлиент.ОпределитьСтатусыПодписей(ПрисоединенныйФайлСсылка,, КонтекстОперации, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	СделатьВсеКомандыНедоступнымиНаМобильномКлиенте();
	
	ПодключитьОбработчикОжидания("СформироватьОтправитьЭД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправитьЭД(Команда)
	
	СделатьВсеКомандыНедоступнымиНаМобильномКлиенте();
	ПодключитьОбработчикОжидания("СформироватьПодписатьОтправитьЭД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ОбменСКонтрагентамиКлиент.ОтправитьПовторноЭД(Объект.Ссылка, ПрисоединенныйФайлСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЭД(Команда)
	
	СделатьВсеКомандыНедоступнымиНаМобильномКлиенте();
	ПодключитьОбработчикОжидания("СформироватьПодписатьОтправитьЭД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЭД(Команда)
	
	СделатьВсеКомандыНедоступнымиНаМобильномКлиенте();
	ПодключитьОбработчикОжидания("ОтправитьПакетыЭД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьЭД(Команда)
	
	Отклонить = Ложь;
	СделатьВсеКомандыНедоступнымиНаМобильномКлиенте();
	ПодключитьОбработчикОжидания("ОтклонитьАннулироватьЭД", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	ОтклонитьАннулирование = Ложь;
	СделатьВсеКомандыНедоступнымиНаМобильномКлиенте();
	ОбработатьПредложениеОбАннулировании();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОтклонитьАннулирование = Истина;
	СделатьВсеКомандыНедоступнымиНаМобильномКлиенте();
	ОбработатьПредложениеОбАннулировании();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКомментарий(Команда)
	
	Если ПустаяСтрока(Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Описание", Комментарий);
	ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
	Комментарий = "";
	
	ПерезаполнитьКомментарии();
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ОбработатьПеренаправлениеЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	ОчиститьЗапискуСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЗапискуСервер()
	
	Если ЗначениеЗаполнено(СопроводительнаяЗаписка) Тогда
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", "");
		ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
		
		СопроводительнаяЗаписка = "";
		
		ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		ТекущаяСтрокаДерева.ДополнительнаяИнформация = СопроводительнаяЗаписка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	ОбновитьВидимостьДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДерево(Команда)
	
	ОтключитьВыводДерева = Не ОтключитьВыводДерева;
	Элементы.КомандаОтображатьДерево.Пометка = Не ОтключитьВыводДерева;
	Элементы.ДеревоПодчиненныеЭД.Видимость = Не ОтключитьВыводДерева;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	Элементы.КомандаОтображатьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;
	ОбновитьВидимостьДополнительнойИнформации();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.СоздатьПроизвольныйЭДНаОсновании(Объект.Ссылка, Новый Структура("Источник", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьЭДОПродолжить", ЭтотОбъект);
	ВводСтрокиЗаголовок = НСтр("ru = 'Укажите причины завершения документооборота'");
	ПоказатьВводСтроки(Оповещение, , ВводСтрокиЗаголовок, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Для продолжения операции необходимо записать документ.
			|Записать документ?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("РедактироватьПродолжить", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе
		РедактироватьЗавершить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			РедактироватьЗавершить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЗавершить()

	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ДанныеФайла.ФайлРедактируется И НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь)
		ИЛИ ДанныеФайла.Зашифрован ИЛИ ДанныеФайла.ПодписанЭП Тогда
		// Файл может быть изменен в другом сеансе.
		Если ДанныеФайла.Ссылка <> Неопределено Тогда
			ОповеститьОбИзменении(ДанныеФайла.Ссылка);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеФайла.ФайлРедактируется Тогда
		ЗанятьФайлДляРедактированияСервер(ДанныеФайла);
		
		Если ДанныеФайла.Ссылка = Неопределено Тогда
			АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
		Иначе
			ОповеститьОбИзменении(ДанныеФайла.Ссылка);
		КонецЕсли;
		ИзменитьВидимостьДоступностьНаСервере();
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Истина);
	ВложениеРедактируется = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПоместитьПрисоединенныйФайлЗавершение", ЭтотОбъект);
	РаботаСФайламиКлиент.ПоместитьПрисоединенныйФайл(Оповещение, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	ОсвободитьФайл();
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаНаДиске(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВложениеИзФайлаНаДискеЗавершить", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения,,,,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзПрисоединенныхФайлов(Команда)
	
	РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(Объект.ДокументыОснования[0].ДокументОснование, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранслитироватьИмяФайла(Команда)
	
	ОтключитьТранслитерацию = Не ОтключитьТранслитерацию;
	ОбновитьВидимостьТранслитерации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьБанковскиеРеквизиты(Команда)
	
	ВыводитьБанковскиеРеквизиты = Не ВыводитьБанковскиеРеквизиты;
	ОбновитьВидимостьДополнительнойИнформации();
	ОбновитьОтображениеДанных();
	Элементы.КомандаОтображатьБанковскиеРеквизиты.Пометка = ВыводитьБанковскиеРеквизиты;
	ИзменитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПакетДокумента(Команда)
	
	Пакет = ОбменСКонтрагентамиСлужебныйВызовСервера.ПакетЭДПоПрисоединенномуФайлу(ПрисоединенныйФайлСсылка);
	Если ЗначениеЗаполнено(Пакет) Тогда
		ПоказатьЗначение(, Пакет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтправки(Команда)
	
	Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Описание = Новый ОписаниеОповещения("НастройкиОтправкиДокументаПослеВопросаСохранить", ЭтотОбъект);
		
		Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
		ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактированияНастроекОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПосмотретьЭДМК(Команда)
	
	#Если МобильныйКлиент Тогда
		Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД")
			И Объект.ТипДокумента <> ПредопределенноеЗначение("Перечисление.ТипыЭД.СчетНаОплату") Тогда
			ДанныеФайла = ДвоичныеДанныеФайла(ПрисоединенныйФайлСсылка);
			ИмяФайла = ПолучитьИмяВременногоФайла(ПрисоединенныйФайлРасширение);
			ДанныеФайла.Записать(ИмяФайла);
		Иначе
			ИмяФайла = ПолучитьИмяВременногоФайла("pdf");
			ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
			ЭтотОбъект[ТекущаяСтрокаДерева.ИмяРеквизита].Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		КонецЕсли;
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФайл(ИмяФайла);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Основное

&НаКлиенте
Процедура ОткрытьФайлВложения()
	
	
	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлРедактируется = ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь;
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, ФайлРедактируется);

	
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтправитьЭД()
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьОтправитьЭДПослеВопроса", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Для продолжения операции необходимо записать документ.
								|Записать документ?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Документ не записан'"));
	Иначе
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Записать();
		КонецЕсли;
		СформироватьОтправитьЭДПослеЗаписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтправитьЭДПослеВопроса(Ответ, Контекст) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Записать();
		СформироватьОтправитьЭДПослеЗаписи();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтправитьЭДПослеЗаписи()
	
	ОчиститьСообщения();
	
	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ПрисоединенныйФайлСсылка);
	
	МассивДокументов = ДокументыОснования(Объект.Ссылка);
	
	ОбменСКонтрагентамиСлужебныйКлиент.УтвердитьЭД(МассивДокументов, МассивЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьОтправитьЭД()
	
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СформироватьПодписатьОтправитьЭДПродолжить", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Для продолжения операции необходимо записать документ.
								|Записать документ?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Документ не записан'"));
	Иначе
		СформироватьПодписатьОтправитьЭДПродолжить(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьОтправитьЭДПродолжить(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да
		Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Записать();
	КонецЕсли;
	
	Если Не Модифицированность И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ИзменитьДоступностьКнопокПодписания(Ложь);
		
		ОчиститьСообщения();
		
		Если Элементы.ГруппаПредупреждения.Видимость Тогда
			
			ОткрытьФормуПредупреждений(Не ЕстьБлокирующиеОшибки);
		Иначе
			
			ВыполнитьПодписатьОтправитьЭД();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДоступностьКнопокПодписания(ДоступностьКоманд)

	Элементы.КомандаПодписать.Доступность          = ДоступностьКоманд;
	Элементы.КомандаПодписатьОтправить.Доступность = ДоступностьКоманд;

КонецПроцедуры

&НаСервереБезКонтекста
Функция РазрешеноПодписыватьФайлЭлектронногоДокумента(ФайлЭлектронногоДокумента, ОписаниеМаршрутаПодписания)
	
	Если Не ЗначениеЗаполнено(ФайлЭлектронногоДокумента)
		И ЗначениеЗаполнено(ОписаниеМаршрутаПодписания) Тогда
		НайденныеСтроки = ОписаниеМаршрутаПодписания.ТаблицаМаршрутов.НайтиСтроки(Новый Структура("Текущий", Истина));
		Если НайденныеСтроки.Количество() > 0 Тогда 
			
			Разрешено = Ложь;
			
			Для Каждого СтрокаМаршрута Из НайденныеСтроки Цикл
				
				Разрешено = СтрокаМаршрута.Подписант = Пользователи.АвторизованныйПользователь()
					Или СтрокаМаршрута.Подписант = Справочники.Пользователи.ПустаяСсылка();
					
				Если Разрешено Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Возврат Разрешено;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	СостояниеПодписанияЭД.Объект
	|ИЗ
	|	РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
	|ГДЕ
	|	СостояниеПодписанияЭД.Объект = &Ссылка
	|	И СостояниеПодписанияЭД.Текущий
	|	И СостояниеПодписанияЭД.Подписант В (&ТекущийПользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Ссылка",					ФайлЭлектронногоДокумента);
	Запрос.УстановитьПараметр("ТекущийПользователь",	Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПользовательНеУказан",	Пользователи.СсылкаНеуказанногоПользователя());

	УстановитьПривилегированныйРежим(Истина);
	Разрешено = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Разрешено;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПакетыЭД()
	
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	КонтекстОперации.ТекущаяУчетнаяЗапись = Объект.ИдентификаторОрганизации;
	ПакетыЭД = НайтиСоздатьПакетыЭлектронныхДокументов(ДеревоПодчиненныеЭД, ПрисоединенныйФайлСсылка,
		ТребуетсяПодпись, Объект.СостояниеЭДО, КонтекстОперации);
	
	Если ЗначениеЗаполнено(ПакетыЭД) Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОтправитьМассивПакетовЭД(ПакетыЭД);
	КонецЕсли;
	
	Если КонтекстОперации.Диагностика.Ошибки.Количество() > 0 Тогда
		КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'При отправке документа'");
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
		Элементы.КомандаОтправить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСоздатьПакетыЭлектронныхДокументов(Знач ДеревоПодчиненныеЭД, Знач ПрисоединенныйФайлСсылка, Знач ПризнакПодписи, Знач СостояниеЭДО, КонтекстОперации)
	
	Если СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка Тогда
		ДокументыКОтправке = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПрисоединенныйФайлСсылка);
	Иначе
		ДокументыКОтправке = ДокументыКОтправке(ДеревоПодчиненныеЭД, ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент КАК ЭлектронныйДокумент,
		|	ПакетЭДЭлектронныеДокументы.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПакетЭД КАК ПакетЭД
		|		ПО ПакетЭДЭлектронныеДокументы.Ссылка = ПакетЭД.Ссылка
		|ГДЕ
		|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент В(&ЭлектронныйДокумент)
		|	И НЕ ПакетЭД.ПометкаУдаления
		|	И ПакетЭД.СтатусПакета <> ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.Отменен)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПакетЭД.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ДокументыКОтправке);
	
	ПакетыЭД = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	Пока Выборка.СледующийПоЗначениюПоля("ЭлектронныйДокумент") Цикл 
		Индекс = ДокументыКОтправке.Найти(Выборка.ЭлектронныйДокумент);
		Если Индекс <> Неопределено Тогда
			ДокументыКОтправке.Удалить(Индекс);
		КонецЕсли;
		
		ПакетыЭД.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ДокументыКОтправке) Тогда
		ДанныеПакетовЭД = ОбменСКонтрагентамиСлужебный.СоздатьДокументыПакетовЭД(ДокументыКОтправке, ПризнакПодписи, КонтекстОперации);
		Для Каждого ДанныеПакетаЭД Из ДанныеПакетовЭД Цикл
			ПакетыЭД.Добавить(ДанныеПакетаЭД.ПЭД);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПакетыЭД;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументыКОтправке(ДеревоПодчиненныеЭД, ТекущийЭД)
	
	МассивДокументов = Новый Массив;
	СтекЭД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДеревоПодчиненныеЭД);
	НайденТекущийЭД = Ложь;
	
	Пока СтекЭД.Количество() Цикл
		
		Индекс = СтекЭД.Количество() - 1;
		КоллекцияЭД = СтекЭД[Индекс].ПолучитьЭлементы();
		СтекЭД.Удалить(Индекс);
		
		Если НЕ ЗначениеЗаполнено(КоллекцияЭД) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПодчиненныйЭД Из КоллекцияЭД Цикл
			
			Если ПодчиненныйЭД.Ссылка = ТекущийЭД Тогда
				
				НайденТекущийЭД = Истина;
				
				СтекЭД.Очистить();
				СтекЭД.Добавить(ПодчиненныйЭД);
				
				Если ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
					ИЛИ ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
					ИЛИ ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение Тогда
					МассивДокументов.Добавить(ПодчиненныйЭД.Ссылка);
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
			
			СтекЭД.Добавить(ПодчиненныйЭД);
			
			Если НайденТекущийЭД
				И  (ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан
				ИЛИ ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленКОтправке
				ИЛИ ПодчиненныйЭД.СтатусЭД = Перечисления.СтатусыЭД.ПодготовленоПодтверждение) Тогда
				МассивДокументов.Добавить(ПодчиненныйЭД.Ссылка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСостояниеЭД()
	
	ДокументыУчета = Новый Массив;
	ДокументыУчета.Добавить(Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыУчета, ДокументыОснования(Объект.Ссылка));
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ДокументыУчета", ДокументыУчета);
	
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОбновлениеСостоянияЭД()
	
	ВыполнитьОбработкуОповещенияНаСервере();
	ОбновитьОтображениеДанных();
	ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	ОбновляемыеКатегории = Новый Массив;	
	ОбновляемыеКатегории.Добавить(КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусЭлектронногоДокумента());
	ОбновляемыеКатегории.Добавить(КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусДокументооборота());

	СформироватьКонтекст(ОбновляемыеКатегории);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументИБНажатие()
	
	ЭлектронныйДокумент = Объект;
	МассивДокументов = МассивДокументовУчета(ЭлектронныйДокумент);
	
	КоличествоДокументов = МассивДокументов.Количество();
	
	Если КоличествоДокументов = 1 Тогда
		ПоказатьЗначение(, МассивДокументов[0]);
	Иначе
		
		Если Модифицированность Или Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Описание = Новый ОписаниеОповещения("ОткрытьФормуПодбора", ЭтотОбъект);
			
			Текст = НСтр("ru = 'Для выполнения операции необходимо сохранить документ. Продолжить?'");
			ПоказатьВопрос(Описание, Текст, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ОткрытьФормуПодбора(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодбора(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет
			Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлектронныйДокумент"  , Объект.Ссылка);
	ПараметрыФормы.Вставить("СписокТиповДокументов", МассивДокументовУчета(Объект));
	
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ПодборДокументовУчета",
		ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивДокументовУчета(Знач ЭлектронныйДокумент)
	
	Возврат ЭлектронныйДокумент.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	
КонецФункции

&НаСервере
Процедура ВывестиДокументыУчета()
	
	МассивДокументов = МассивДокументовУчета(Объект);
	КоличествоДокументов = МассивДокументов.Количество();
	
	ОтображатьПодбор = Ложь;
	Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Документ учета'");
	
	Если КоличествоДокументов = 0 Тогда
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
			ПредставлениеДокументов = НСтр("ru = 'Сопоставить номенклатуру'");
			Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Настройка ЭДО'");
		ИначеЕсли Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ПредставлениеДокументов = НСтр("ru = '<Подбор>'");
		Иначе
			ПредставлениеДокументов = НСтр("ru = 'Отразить в учете'");
		КонецЕсли;
		
	ИначеЕсли КоличествоДокументов = 1 Тогда
		
		Если ТипЗнч(МассивДокументов[0]) = Тип("СправочникСсылка.НастройкиЭДО") Тогда
			Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Настройка ЭДО'");  
		КонецЕсли;
		
		ПредставлениеДокументов = Строка(МассивДокументов[0]);
		
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
			ОтображатьПодбор = Истина;
		КонецЕсли;
	Иначе
		
		Элементы.ТекстДокументИБ.Заголовок = НСтр("ru = 'Документы учета'");
		ШаблонТекста = НСтр("ru = 'Список документов (%1)'");  
		ПредставлениеДокументов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,КоличествоДокументов);
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		ПредставлениеДокументов, , , , "ТекстДокументИБНажатие"));
		
	// Подбор отображаем только для записанного документа, так как механизм работает через работу с объектом документа.
	Если ОтображатьПодбор И Не Объект.Ссылка.Пустая() Тогда
		МассивСтрок.Добавить("   ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = '<Подбор>'"), ,
			, ,
			"ОткрытьФормуПодбора"));
	КонецЕсли;
	
	ТекстДокументИБ = Новый ФорматированнаяСтрока(МассивСтрок);
	
	Элементы.ТекстДокументИБ.Видимость = КоличествоДокументов > 0 ИЛИ Не Объект.Ссылка.Пустая();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВторойТитулДокумента(ПервыйТитул)
	
	Возврат ОбменСКонтрагентамиСлужебный.ВторойТитулДокумента(ПервыйТитул);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьЗначенияРеквизитовНаСервере(Знач Ссылка, Знач СтруктураПараметров)
	
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(Ссылка, СтруктураПараметров, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПеренаправлениеЭД()
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		МассивЭД = Новый Массив;
		МассивЭД.Добавить(ПрисоединенныйФайлСсылка);
		ОбменСКонтрагентамиСлужебныйКлиент.ИзменитьОтветственного(МассивЭД, Неопределено);
	Иначе
		СообщитьОбОтсутствииЭД();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьКомментарии()
	
	ВсеКомментарии = "";
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЖурналСобытийЭД.Пользователь.Представление КАК Пользователь,
		|	ЖурналСобытийЭД.Дата КАК Дата,
		|	ЖурналСобытийЭД.СтатусЭД,
		|	ЖурналСобытийЭД.Ответственный.Представление КАК Ответственный,
		|	ЖурналСобытийЭД.Комментарий
		|ИЗ
		|	РегистрСведений.ЖурналСобытийЭД КАК ЖурналСобытийЭД
		|ГДЕ
		|	ЖурналСобытийЭД.ПрисоединенныйФайл = &Ссылка
		|	И ЖурналСобытийЭД.Комментарий <> &ПустаяСтрока
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
	Запрос.УстановитьПараметр("Ссылка", ПрисоединенныйФайлСсылка);
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Выборка = Результат.Выбрать();
	ШаблонКомментария = НСтр("ru = '%1, %2 (статус - %3, ответственный - %4):
		|%5'");
	ПредыдущийКомментарий = "";
	ПервыйКомментарий = Истина;
	Массив = Новый Массив;
	Пока Выборка.Следующий() Цикл
		ТекущийКомментарий = СокрЛП(Выборка.Комментарий);
		Если ПредыдущийКомментарий = ТекущийКомментарий Тогда
			Продолжить;
		КонецЕсли;
		ПредыдущийКомментарий = ТекущийКомментарий;
		СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонКомментария,
				Выборка.Дата, Выборка.Пользователь, Выборка.СтатусЭД, Выборка.Ответственный, ТекущийКомментарий);
		Массив.Добавить(СтрокаКомментария);
		ПервыйКомментарий = Ложь;
	КонецЦикла;
	Если Массив.Количество() > 0 Тогда
		ПервыйКомментарий = Истина;
		Для Сч = -Массив.Количество() + 1 По 0 Цикл
			СтрокаКомментария = Массив[-Сч];
			ВсеКомментарии = ВсеКомментарии
				+ СтрокаКомментария
				+ ?(ПервыйКомментарий, Символы.ПС + "------------------------------------", "")
				+ Символы.ПС
				+ Символы.ПС;
			ПервыйКомментарий = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УникальныйИДВнешний(ЭД)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭД, "УникальныйИДВнешний");
	
КонецФункции

&НаСервере
Процедура ИзменитьСтатусОтклонить()
	
	ОбъектДокумент = РеквизитФормыВЗначение("Объект");
	СтруктураПараметров = Новый Структура("СтатусЭД", Перечисления.СтатусыЭД.Отклонен);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайлСсылка, СтруктураПараметров, Ложь);
	ЗначениеВРеквизитФормы(ОбъектДокумент, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимостьДоступность()
	
	ИзменитьВидимостьДоступностьНаСервере();
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	
	Если СтрокиДерева.Количество() > 0 Тогда
		Элементы.ДеревоПодчиненныеЭД.Развернуть(СтрокиДерева[0].ПолучитьИдентификатор(),Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДоступностьНаСервере()
	
	СвойстваФайлаЭД = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	Если ЗначениеЗаполнено(СвойстваФайлаЭД.ЭлектронныйДокументВладелец) Тогда
		СсылкаНаЭД = СвойстваФайлаЭД.ЭлектронныйДокументВладелец;
	Иначе
		СсылкаНаЭД = ПрисоединенныйФайлСсылка;
	КонецЕсли;
	
	ТребуетсяПодпись = НеобходимоПодписать(СвойстваФайлаЭД);
	
	ЭтоСлужебный = ОбменСКонтрагентамиСлужебный.ЭтоСлужебныйДокумент(СвойстваФайлаЭД.ТипЭД);
	
	ЕстьПравоОбработки = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоВыполненияОбмена();
	ЕстьВозможностьПодписания = ЕстьПравоОбработки И ТребуетсяПодпись
		И ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")
		И РазрешеноПодписыватьФайлЭлектронногоДокумента(ПрисоединенныйФайлСсылка, ОписаниеМаршрутаПодписания);
	МожноОтклонитьЭтотЭД = ЕстьПравоОбработки И НЕ ЭтоСлужебный И ОбменСКонтрагентамиСлужебный.МожноОтклонитьЭтотЭД(СсылкаНаЭД);
	МожноАннулироватьЭтотЭД = ЕстьПравоОбработки И НЕ ЭтоСлужебный И ОбменСКонтрагентамиСлужебный.МожноАннулироватьЭтотЭД(СсылкаНаЭД);
	
	ОжидаетсяСогласиеКонтрагента = Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента;
	
	ЭДОЗакрыт       = ОбменСКонтрагентамиСлужебный.ДОЗакрытПринудительноИлиПолученОтказОтКонтрагента(Объект.Ссылка);
	СтатусОтклонен  = ОбменСКонтрагентамиСлужебный.ЭДОтклонен(СвойстваФайлаЭД.СтатусЭД);
	
	РеквизитыЭД = Новый Структура("ВидЭД, ТипЭлементаВерсииЭД", Объект.ВидЭД, Объект.ТипЭлементаВерсииЭД);
	ЭДТитулПродавца = НЕ ЭтоСлужебный И ОбменСКонтрагентамиСлужебный.ЭтоТитулФНС(РеквизитыЭД);
	
	ЭДСчетФактура   = НЕ ЭтоСлужебный И ОбменСКонтрагентамиСлужебный.ЭтоСчетФактура(ПрисоединенныйФайлСсылка);
	ДОСФЗавершен    = ЭДСчетФактура И ОбменСКонтрагентамиСлужебный.ДОСФЗавершен(ПрисоединенныйФайлСсылка, СвойстваФайлаЭД.НаправлениеЭД);
	
	ЭтоИзвещениеОПолучении    = ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(СвойстваФайлаЭД.ТипЭД);
	ЭтоПодтверждение          = ОбменСКонтрагентамиСлужебный.ЭтоПодтверждение(СвойстваФайлаЭД.ТипЭД);
	ЭтоУведомлениеОбУточнении = ОбменСКонтрагентамиСлужебный.ЭтоУведомлениеОбУточнении(СвойстваФайлаЭД.ТипЭД);
	ЭтоОтветныйТитул          = ОбменСКонтрагентамиСлужебный.ЭтоОтветныйТитул(СвойстваФайлаЭД.ТипЭД);
	
	ДОЗавершен = Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОбменЗавершен
		ИЛИ Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОбменЗавершенСИсправлением;
	
	Если (Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД")
			ИЛИ Не ТребуетсяПодпись)
		И ОбменСКонтрагентамиСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаУтвердить.Заголовок = НСтр("ru = 'Утвердить и отправить'");
	КонецЕсли;
	
	Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
	Элементы.КомандаПодписать.Видимость = Ложь;
	
	КомандаПодписиОтправки = Элементы.КомандаПодписать;
	Если ОбменСКонтрагентамиСлужебный.НемедленнаяОтправкаЭД()
			И Не СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
			И Не СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Внутренний
			И ВесМаршрута < 2 Тогда
		КомандаПодписиОтправки = Элементы.КомандаПодписатьОтправить;
	КонецЕсли;
	
	Элементы.ГруппаМаршрутПодписания.Видимость = Ложь;
	
	// Произвольный ЭД новый.
	КомандаПодписиОтправки.Видимость = Истина;
	Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = Ложь;
	
	ОпределенаДоступностьКнопкиОтклонить = Ложь;
	Если СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = Истина;
		
		Элементы.КомандаОтправитьПовторно.Видимость = Ложь;
		
		ЭтоПолученныйКаталогТоваров = НЕ ЭтоСлужебный И Объект.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров
			И СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен;
		
		ЭтоСчетВерсии30 = НЕ ЭтоСлужебный И (Объект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату)
			И (ОбменЧерезОператора ИЛИ ОбменСКонтрагентамиСлужебный.ВерсияПакетаЭД(ПрисоединенныйФайлСсылка)
				= Перечисления.ВерсииФорматаПакетаЭД.Версия30);
		
		ПредложениеОбАннулировании = (СвойстваФайлаЭД.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА);
		
		ЭтоСлужебныйДокумент = ЭтоИзвещениеОПолучении
				ИЛИ ЭтоПодтверждение
				ИЛИ ПредложениеОбАннулировании
				ИЛИ ЭтоУведомлениеОбУточнении
				ИЛИ ЭтоОтветныйТитул;
		
		Элементы.КомандаУтвердить.Видимость = (Не ЕстьВозможностьПодписания
				ИЛИ ЭДСчетФактура
				ИЛИ ЭтоСчетВерсии30)
			И Не ЭтоСлужебныйДокумент
			И ЕстьПравоОбработки
			И СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен;
		
		КомандаПодписиОтправки.Видимость   = (ТребуетсяПодпись И СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден)
			И Не ЭтоУведомлениеОбУточнении
			И НЕ ЭДСчетФактура
			И Не ЭтоСчетВерсии30
			И НЕ ЭтоПодтверждение;
			
		Если НЕ ЭДОЗакрыт И Не ОжидаетсяСогласиеКонтрагента И НЕ Элементы.КомандаУтвердить.Видимость И НЕ КомандаПодписиОтправки.Видимость
			И ЗначениеЗаполнено(ДокументыКОтправке(ДеревоПодчиненныеЭД, ПрисоединенныйФайлСсылка)) Тогда
			Элементы.КомандаОтправить.Видимость   = Истина;
			Элементы.КомандаОтправить.Доступность = Истина;
		Иначе
			Элементы.КомандаОтправить.Видимость   = Ложь;
			Элементы.КомандаОтправить.Доступность = Ложь;
		КонецЕсли;
		
		// Для входящей с/ф кнопка отклонение имеет свое название и картинку.
		Если НЕ ЭтоСлужебный И Объект.ВидЭД = Перечисления.ВидыЭД.СчетФактура
			Или Объект.ВидЭД = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Запросить уточнение по электронному документу'");
			Элементы.КомандаОтклонить.Картинка = БиблиотекаКартинок.ПользовательБезНеобходимыхСвойств;
		КонецЕсли;
		
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий Тогда
		
		КомандаПодписиОтправки.Видимость   = (ТребуетсяПодпись
				И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.НеСформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан))
			И ЕстьВозможностьПодписания
			И Не ЭтоУведомлениеОбУточнении
			И НЕ СтатусОтклонен И Не ЭДОЗакрыт
			И (ОтраженВУчете ИЛИ ЭтоСлужебный);
			
		Элементы.НастройкиОтправки.Видимость = (ОбменЧерезОператора И ЕстьВозможностьПодписания
				И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.НеСформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан))
			И Не ЭтоУведомлениеОбУточнении
			И НЕ СтатусОтклонен И Не ЭДОЗакрыт
			И (ОтраженВУчете ИЛИ ЭтоСлужебный)
			И ЗначениеЗаполнено(Объект.Ссылка);
			
		Элементы.ГруппаМаршрутПодписания.Видимость = ТребуетсяПодпись 
			И Не ЭтоУведомлениеОбУточнении
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.НеСформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан);
		
		Если НЕ ЭДОЗакрыт И Не ОжидаетсяСогласиеКонтрагента И НЕ Элементы.КомандаУтвердить.Видимость И НЕ КомандаПодписиОтправки.Видимость
			И (Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка И ТребуетсяПодпись
				ИЛИ Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОтклоненОператором
				ИЛИ ЗначениеЗаполнено(ДокументыКОтправке(ДеревоПодчиненныеЭД, ПрисоединенныйФайлСсылка))) Тогда
				Если Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОтклоненОператором
					И Объект.ВидОшибкиПередачи = Перечисления.ВидыОшибокПередачиЭД.ОграничениеТарификации Тогда
					ПереместитьКнопкуОтправитьПовторно(Истина);
				Иначе 
					Элементы.КомандаОтправить.Видимость   = Истина;
					Элементы.КомандаОтправить.Доступность = Истина;
					ПереместитьКнопкуОтправитьПовторно(Ложь);
					Элементы.ГруппаОшибкаОтклоненОператором.Видимость = Ложь;
					Элементы.ГруппаПодробныйТекстОшибки.Видимость = Ложь;
				КонецЕсли;
			Иначе
				Элементы.КомандаОтправить.Видимость   = Ложь;
				Элементы.КомандаОтправить.Доступность = Ложь;
				ПереместитьКнопкуОтправитьПовторно(Ложь);
				Элементы.ГруппаОшибкаОтклоненОператором.Видимость = Ложь;
				Элементы.ГруппаПодробныйТекстОшибки.Видимость = Ложь;
			КонецЕсли;
		
		Элементы.КомандаОтправитьПовторно.Видимость = Истина;
		Если ДОЗавершен Тогда
			Элементы.КомандаОтправитьПовторно.Доступность = Ложь;
		ИначеЕсли Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент Тогда
			Элементы.КомандаОтправитьПовторно.Доступность = Ложь;
		Иначе
			Элементы.КомандаОтправитьПовторно.Доступность = Истина;
		КонецЕсли;
		
		Если НЕ ОбменЧерезОператора Тогда
			Элементы.КомандаОтправитьПовторно.Видимость = Истина;
			Элементы.КомандаОтправитьПовторно.Доступность = НЕ СтатусОтклонен
				И ОтраженВУчете
				ИЛИ (ЭтоИзвещениеОПолучении
					ИЛИ ЭтоПодтверждение
					ИЛИ СвойстваФайлаЭД.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
					ИЛИ ЭтоУведомлениеОбУточнении);
		КонецЕсли;
		
		ЗапискаДоступна = (НЕ ЭтоСлужебный
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.НеСформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден));
		
		Элементы.ОбъектДополнительнаяИнформация.ТолькоПросмотр = НЕ ЗапискаДоступна;
		Элементы.ОчиститьЗаписку.Доступность = ЗапискаДоступна;
		
		Если НЕ ТребуетсяПодпись
			И (НЕ ЗначениеЗаполнено(Объект.СостояниеЭДО)
				ИЛИ Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяОтправка
					И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
					ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден)) Тогда
			Элементы.КомандаУтвердить.Видимость = Истина;
			Элементы.КомандаУтвердить.Заголовок = НСтр("ru = 'Отправить'");
		Иначе
			Элементы.КомандаУтвердить.Видимость = Ложь;
		КонецЕсли;
			
		// Если есть право подписи, то можем отклонять документы на этапе подписания (кроме произвольных ЭД).
		Если ТребуетсяПодпись 
			И Не ЭтоУведомлениеОбУточнении
			И Не Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Подписан) Тогда
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Отказаться от подписания'");
			Элементы.КомандаОтклонить.Видимость = ЕстьВозможностьПодписания;
			ОпределенаДоступностьКнопкиОтклонить = Истина;
		Иначе
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Отклонить'");
		КонецЕсли;
		Если Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента Тогда
			ОпределенаДоступностьКнопкиОтклонить = Истина;
			Элементы.КомандаОтклонить.Заголовок = НСтр("ru = 'Отклонить'");
			Элементы.КомандаОтклонить.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		
		Элементы.НастройкиОтправки.Видимость = Ложь;
		
		КомандаПодписиОтправки.Видимость = СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
		КомандаПодписиОтправки.Доступность   = (ЕстьВозможностьПодписания
			И НЕ СтатусОтклонен И СвойстваФайлаЭД.СтатусЭД <> Перечисления.СтатусыЭД.ПолностьюПодписан);
		
		Элементы.ДополнительныеКоманды.Видимость = Ложь;
		
		ОтключитьВыводДопДанных = Истина;
		Элементы.КомандаОтображатьДополнительнуюИнформацию.Видимость = Ложь;
		
		Элементы.ГруппаМаршрутПодписания.Видимость = СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
		
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Внутренний Тогда
		
		Элементы.НастройкиОтправки.Видимость = Ложь;
		КомандаПодписиОтправки.Видимость = ТребуетсяПодпись И ЕстьВозможностьПодписания
			И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.НеСформирован
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан);
		ОтключитьВыводДопДанных = Истина;
		Элементы.ДополнительныеТехнологическиеКоманды.Видимость = Ложь;
		Элементы.КомандаОтображатьДополнительнуюИнформацию.Видимость = Ложь;
		Элементы.СтраницаСопроводительнаяЗаписка.Видимость = Ложь;
		Элементы.КомандаОтклонить.Видимость = ТребуетсяПодпись И ЕстьВозможностьПодписания;
		ОпределенаДоступностьКнопкиОтклонить = Истина;
		Элементы.ГруппаМаршрутПодписания.Видимость = СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ЧастичноПодписан
			ИЛИ Не ЗначениеЗаполнено(Объект.Ссылка)
				И ЗначениеЗаполнено(Объект.СписокПодписантов);
		Элементы.ДеревоМаршрутаПодписанияСертификат.Видимость = Объект.ВидПодписи <> Перечисления.ВидыЭлектронныхПодписей.Простая;
		
		Элементы.ГруппаВыводаОбластей.Видимость = Ложь;
		Элементы.КомандаОтправитьПовторно.Видимость = Ложь;
		Элементы.ФормаПакетДокумента.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.СтраницаСтатусов.Видимость = Ложь;
	Элементы.КомандаАннулировать.Видимость = МожноАннулироватьЭтотЭД;
	Элементы.КомандаАннулировать.Доступность = МожноАннулироватьЭтотЭД;
	Если НЕ ОпределенаДоступностьКнопкиОтклонить Тогда
		Элементы.КомандаОтклонить.Видимость = (НЕ (СтатусОтклонен ИЛИ ЭтоСлужебный ИЛИ ЭДОЗакрыт) И МожноОтклонитьЭтотЭД)
			И Не ОбменСКонтрагентамиСлужебный.ЕстьОтправленноеУведомление(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	Элементы.ГруппаКомандАннулирование.Видимость = Ложь;
	Элементы.КомандаЗавершить.Доступность = Не ДОСФЗавершен
		И (СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отправлен
			Или СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Доставлен);
	Элементы.КомандаЗавершить.Видимость = ЭДСчетФактура И Элементы.КомандаЗавершить.Доступность;
	
	Если СтатусОтклонен Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Если СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Отклонен Тогда
			Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причины отказа от подписания'");
		КонецЕсли;
		
	ИначеЕсли СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ОтправкаЗаблокированаОператором Тогда
		
		Элементы.КомандаОтправитьПовторно.Видимость = Ложь;
		Элементы.ГруппаПодробныйТекстОшибки.Видимость = Истина;
		Рекомендация = ОбменСКонтрагентамиСлужебный.РекомендацииПоУстранениюОшибкиПередачи(Объект.ВидОшибкиПередачи);
		Если ЗначениеЗаполнено(Рекомендация) Тогда
			Элементы.ГруппаОшибкаОтклоненОператором.Видимость = Истина;
			Элементы.РекомендацииПоУстранениюОшибкиОтклоненияОператором.Заголовок = Рекомендация;
			Элементы.РекомендацииПоУстранениюОшибкиОтклоненияОператором.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли ЭДОАннулированИлиВПроцессе() Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причина аннулирования:'");
		Элементы.КомандаОтклонить.Видимость = Ложь;
		Если СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании
			ИЛИ СвойстваФайлаЭД.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Получен
			ИЛИ ЗначениеЗаполнено(СвойстваФайлаЭД.ЭлектронныйДокументВладелец)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваФайлаЭД.ЭлектронныйДокументВладелец, "СтатусЭД") = Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании Тогда
			Элементы.ГруппаКомандАннулирование.Видимость = Истина;
			Элементы.КомандаПодписатьОтправить.Видимость = Ложь;
			Элементы.КомандаАннулировать.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли АннулированиеОтклонено() Тогда
		
		ПричиныОтклонения.Очистить();
		НовСтрока = ПричиныОтклонения.Добавить();
		НовСтрока.ПричинаОтклонения = Объект.ПричинаОтклонения;
		Элементы.СтраницаОтклонение.Видимость = Истина;
		Элементы.ГруппаОтклонение.Заголовок = НСтр("ru = 'Причина отказа от аннулирования:'");
		
	КонецЕсли;
	
	СостояниеЭДО = ?(Не ЗначениеЗаполнено(Объект.Ссылка), Перечисления.СостоянияВерсийЭД.НеСформирован, 
		Объект.Ссылка.СостояниеЭДО);
	ОсновнойФайл = ПолучитьЭлектронныйДокументВладелец();
	Если СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи 
			И ЗначениеЗаполнено(ОсновнойФайл) 
			И ЗначениеЗаполнено(ОсновнойФайл.ПредставлениеПрогрессаПодписания) Тогда
		ПредставлениеСостояния = СтрШаблон("%1 %2", СостояниеЭДО, 
			ОсновнойФайл.ПредставлениеПрогрессаПодписания);
	Иначе
		ПредставлениеСостояния = СостояниеЭДО;
	КонецЕсли;
	
	// Произвольный ЭД.
	ОтображениеПолейВвода = Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
		И (Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НеСформирован);
	Элементы.ШапкаВводДанных.Видимость      = ОтображениеПолейВвода;
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		НастройкиОбменаЭД = Неопределено;
		ОпределитьНеобходимостьУказанияМаршрута(НастройкиОбменаЭД);
		ОбновитьОтображениеМаршрутаПодписания(НастройкиОбменаЭД);
	КонецЕсли;
	
	НаправлениеИсходящий = Истина;
	ЕстьВложения = ЗначениеЗаполнено(ПрисоединенныйФайлСсылка)
					ИЛИ ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения);
					
	Если ЗначениеЗаполнено(Объект.Ссылка) И НаправлениеИсходящий
		И (ПрисоединенныйФайлСсылка.Пустая()
			ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Сформирован
				ИЛИ СвойстваФайлаЭД.СтатусЭД = Перечисления.СтатусыЭД.Утвержден) Тогда
		МожноРедактироватьПередаваемыеПараметры = Истина;
	Иначе
		МожноРедактироватьПередаваемыеПараметры = НЕ ЗначениеЗаполнено(Объект.Ссылка); // Если документ еще не записан, то можно редактировать.
	КонецЕсли;
	
	// Вложение
	Если НаправлениеИсходящий 
		И СвойстваФайлаЭД.ИмяРеквизита = "ПрисоединенныйФайл" Тогда
		Элементы.КоманднаяПанельВложения.Видимость = Истина;
		
		ПрисоединенныеФайлыОснования = Новый Массив;
		Если Объект.ДокументыОснования.Количество() = 1
			И ЗначениеЗаполнено(Объект.ДокументыОснования[0].ДокументОснование) Тогда
			РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.ДокументыОснования[0].ДокументОснование,
				ПрисоединенныеФайлыОснования);
		КонецЕсли;
		Если ПрисоединенныеФайлыОснования.Количество() > 0 Тогда
			ГруппаКомандДобавитьЗаменить = Элементы.ГруппаКомандДобавитьЗаменить;
			Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная.Видимость = Ложь;
		Иначе
			ГруппаКомандДобавитьЗаменить = Элементы.ДобавитьВложениеИзФайлаНаДискеОдиночная;
			Элементы.ГруппаКомандДобавитьЗаменить.Видимость = Ложь;
		КонецЕсли;
		ГруппаКомандДобавитьЗаменить.Видимость = Истина;
		Если ЕстьВложения Тогда
			ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
			Если ДанныеФайла.ФайлРедактируется Тогда
				ТекстРедактируетФайл = НСтр("ru = 'Файл захвачен на редактирование пользователем %1'");
				ТекстРедактируетФайл = СтрЗаменить(ТекстРедактируетФайл, "%1", ДанныеФайла.Редактирует);
				Элементы.ТекстРедактируетФайл.ЦветТекста = ЦветаСтиля[?(ДанныеФайла.ФайлРедактируетТекущийПользователь,
					"ФайлЗанятыйТекущимПользователем", "ТекстЗапрещеннойЯчейкиЦвет")];
			Иначе
				ТекстРедактируетФайл = "";
			КонецЕсли;
			ГруппаКомандДобавитьЗаменить.Заголовок = СтрЗаменить(ГруппаКомандДобавитьЗаменить.Заголовок,
				НСтр("ru = 'Добавить'"), НСтр("ru = 'Заменить на'"));
			Если МожноРедактироватьПередаваемыеПараметры И НЕ ДанныеФайла.ПодписанЭП Тогда
				Элементы.Редактировать.Доступность = НЕ ДанныеФайла.ФайлРедактируется;
				Элементы.ЗакончитьРедактирование.Доступность = ДанныеФайла.ФайлРедактируется
					И ДанныеФайла.ФайлРедактируетТекущийПользователь;
				Элементы.Освободить.Доступность = ДанныеФайла.ФайлРедактируется И ДанныеФайла.ФайлРедактируетТекущийПользователь;
			Иначе
				Элементы.Редактировать.Доступность = Ложь;
				Элементы.ЗакончитьРедактирование.Доступность = Ложь;
				Элементы.Освободить.Доступность = Ложь;
			КонецЕсли;
			ГруппаКомандДобавитьЗаменить.Доступность = МожноРедактироватьПередаваемыеПараметры;
			Элементы.ТекстВложение.Гиперссылка = Истина;
			Элементы.ТекстВложение.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
		Иначе
			ПрисоединенныйФайлИмяФайла = НСтр("ru = '<отсутствует>'");
			Элементы.ТекстВложение.Гиперссылка = Ложь;
			Элементы.ТекстВложение.ЦветТекста = WebЦвета.Кирпичный;
			ГруппаКомандДобавитьЗаменить.Заголовок = СтрЗаменить(ГруппаКомандДобавитьЗаменить.Заголовок, НСтр("ru = 'Заменить на'"), НСтр("ru = 'Добавить'"));
			ГруппаКомандДобавитьЗаменить.Доступность = МожноРедактироватьПередаваемыеПараметры;
			Элементы.Редактировать.Доступность = Ложь;
			Элементы.ЗакончитьРедактирование.Доступность = Ложь;
			Элементы.Освободить.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Организация.ТолькоПросмотр = Не МожноРедактироватьПередаваемыеПараметры;
	Элементы.Контрагент.ТолькоПросмотр  = Не МожноРедактироватьПередаваемыеПараметры;
	Элементы.Договор.ТолькоПросмотр     = Не МожноРедактироватьПередаваемыеПараметры;
	
	Элементы.ФормаКнопкаЗаписатьИЗакрыть.Видимость = Не ЗначениеЗаполнено(Объект.Ссылка)
		И Не КомандаПодписиОтправки.Видимость
		И Не Элементы.КомандаУтвердить.Видимость;
	
	Элементы.ФормаКнопкаЗаписать.Видимость = Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Или Не ЗначениеЗаполнено(Объект.Ссылка);
	
	Элементы.СтраницаКомментарии.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(ВсеКомментарии);
	
	Элементы.СтраницаСопроводительнаяЗаписка.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(
		СвойстваФайлаЭД.ДополнительнаяИнформация);
	
	Элементы.КомандаЖурналСобытийЭДО.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	
	ОбновитьВидимостьТранслитерации();
	
	Если Не ОбменСКонтрагентамиСлужебный.ЭтоПрямойОбмен(Объект.СпособОбменаЭД)
		ИЛИ ОбменСКонтрагентамиСлужебный.ПрямойОбменДоступен() Тогда
		Элементы.ГруппаПрекращениеПоддержкиПрямогоОбмена.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПрекращениеПоддержкиПрямогоОбмена.Видимость = Истина;
		
		Элементы.КомандаПодписатьОтправить.Видимость        = Ложь;
		Элементы.КомандаПодписать.Видимость                 = Ложь;
		Элементы.КомандаОтправить.Видимость                 = Ложь;
		Элементы.КомандаУтвердить.Видимость                 = Ложь;
		Элементы.КомандаПринятьАннулирование.Видимость      = Ложь;
		Элементы.КомандаОтклонитьАннулирование.Видимость    = Ложь;
		Элементы.КомандаОтклонить.Видимость                 = Ложь;
		Элементы.КомандаАннулировать.Видимость              = Ложь;
		Элементы.КомандаЗавершить.Видимость                 = Ложь;
		Элементы.КомандаПеренаправить.Видимость             = Ложь;
		Элементы.КомандаОтправитьПовторно.Видимость         = Ложь;
		Элементы.ФормаСоздатьПроизвольныйДокумент.Видимость = Ложь;
		Элементы.ФормаКнопкаЗаписать.Видимость              = Ложь;
		Элементы.КартинкаОбновить.Видимость                 = Ложь;
		Элементы.НастройкиОтправки.Видимость                = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбновитьВидимостьКомандПоГруппам();
		ВосстановитьДоступностьКоманд();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбменЧерезОператора()
	Возврат ОбменСКонтрагентамиСлужебный.ЭтоОбменЧерезОператора(Объект.СпособОбменаЭД);
КонецФункции

&НаСервере
Процедура ОбновитьСтатусЭД()
	
	ТекстСостояния = Перечисления.СостоянияВерсийЭД.НеСформирован;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстСостояния = ОбменСКонтрагентамиКлиентСервер.ПолучитьТекстСостоянияЭД(Объект.Ссылка);
	КонецЕсли;
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ОтраженВУчете = Истина;
	Иначе
		МассивОснований = ОбщегоНазначения.ВыгрузитьКолонку(Объект.ДокументыОснования, "ДокументОснование", Истина);
		ЗапросПоОтражению = Новый Запрос;
		ЗапросПоОтражению.УстановитьПараметр("МассивОснований", МассивОснований);
		
		ЗапросПоОтражению.Текст =
		"ВЫБРАТЬ
		|	СостоянияЭД.СсылкаНаОбъект,
		|	СостоянияЭД.ЭлектронныйДокумент
		|ИЗ
		|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
		|ГДЕ
		|	СостоянияЭД.СсылкаНаОбъект В (&МассивОснований)";
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = ЗапросПоОтражению.Выполнить().Выбрать();
		УстановитьПривилегированныйРежим(Ложь);
		Если Выборка.Следующий() Тогда
			ОтраженВУчете = (Объект.Ссылка = Выборка.ЭлектронныйДокумент)
				Или Не ЗначениеЗаполнено(Объект.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СостояниеТекст.Заголовок = Новый ФорматированнаяСтрока(ТекстСостояния,
		Новый Шрифт(Элементы.СостояниеТекст.Шрифт,,, Истина));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЭП(Отпечатки = Неопределено, ДоступныеОтпечатки = Неопределено)
	
	Если Отпечатки <> Неопределено Тогда
		ДоступныеОтпечатки = ОбменСКонтрагентамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(Отпечатки).ВыгрузитьКолонку("Отпечаток"); 
	КонецЕсли;
	
	ПредставлениеПрогрессаПодписания = "";
	
	Если ЗначениеЗаполнено(ТаблицаЭП) Тогда
		ТаблицаЭП.Очистить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		
		ПредставлениеПрогрессаПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПрисоединенныйФайлСсылка, "ПредставлениеПрогрессаПодписания");
		
		Если Объект.ВидПодписи = Перечисления.ВидыЭлектронныхПодписей.Простая Тогда
			ЗаполнитьПростыеПодписи(ПрисоединенныйФайлСсылка);
		Иначе
			ЗаполнитьЭлектронныеПодписи(ПрисоединенныйФайлСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеПрогрессаПодписания) 
		И Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НаПодписи Тогда
		ТекстКоличестваПодписей = ПредставлениеПрогрессаПодписания;
	ИначеЕсли ТаблицаЭП.Количество() > 0 Тогда
		ТекстКоличестваПодписей = "(" + ТаблицаЭП.Количество() + ") ";
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Ссылка)
		И Объект.ВидЭД = Перечисления.ВидыЭД.Внутренний
		И ЗначениеЗаполнено(Объект.СписокПодписантов) Тогда
		ЯзыкКонфигурации = ОбщегоНазначения.КодОсновногоЯзыка();
		Разделитель = ?(ЭлектронноеВзаимодействиеСлужебный.КонфигурацияИспользуетНесколькоЯзыков(),
			"/", НСтр("ru = 'из'", ЯзыкКонфигурации));
		ТекстКоличестваПодписей = СтрШаблон(НСтр("ru = '(%1 %2 %3)'", ЯзыкКонфигурации), 
			0, Разделитель, Объект.СписокПодписантов.Количество());
	Иначе
		ТекстКоличестваПодписей = "";
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.СтраницаПодписиИСтатусы.Заголовок = СтрШаблон(НСтр("ru = 'Подписи %1'"), ТекстКоличестваПодписей);
	КонецЕсли;
		
	Если ТаблицаЭП.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭлектронныеПодписи(ПрисоединенныйФайлСсылка)
	
	ЭлектронныеПодписи = ОбменСКонтрагентамиСлужебный.УстановленныеПодписи(ПрисоединенныйФайлСсылка);
	
	Для Каждого ТекСтрока Из ЭлектронныеПодписи Цикл
		
		НоваяСтрока = ТаблицаЭП.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока);
		
		НоваяСтрока.НомерСтроки = ТаблицаЭП.Количество();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПростыеПодписи(ПрисоединенныйФайлСсылка)
	
	ЭлектронныеПодписи = ОбменСКонтрагентамиСлужебный.УстановленныеПростыеПодписи(ПрисоединенныйФайлСсылка);
	
	Для Каждого СтрокаПодписи Из ЭлектронныеПодписи Цикл
		
		НоваяСтрока = ТаблицаЭП.Добавить();
		
		НоваяСтрока.КомуВыданСертификат = СтрокаПодписи.ВладелецПодписи;
		НоваяСтрока.ДатаПодписи = СтрокаПодписи.ДатаПодписи;
		НоваяСтрока.УстановившийПодпись = СтрокаПодписи.Пользователь;
		НоваяСтрока.ПодписьВерна = Истина;
		НоваяСтрока.ПодписьВернаПредставление = НСтр("ru = 'Верна'");
		
		НоваяСтрока.НомерСтроки = ТаблицаЭП.Количество();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусПодписи(НоваяСтрока, ТекСтрока)
	
	Если ЗначениеЗаполнено(ТекСтрока.ДатаПроверкиПодписи) Тогда
		НоваяСтрока.ПодписьВернаПредставление = ?(ТекСтрока.ПодписьВерна, НСтр("ru = 'Верна'"), НСтр("ru = 'Неверна'"))
			+" (" + ТекСтрока.ДатаПроверкиПодписи + ")";
	Иначе
		НоваяСтрока.ПодписьВернаПредставление = НСтр("ru = 'Не проверена'");
	КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция НеобходимоПодписать(СвойстваФайлаЭД)
	
	ФлагПодписи = Ложь;
	// Ответ на заказ никогда не подписывает покупатель или документ отклонен.
	Если ОбменСКонтрагентамиСлужебный.ЭДОтклонен(СвойстваФайлаЭД.СтатусЭД) Тогда
		Возврат ФлагПодписи;
	КонецЕсли;
		
	Если ОбменЧерезОператора Тогда
		ФлагПодписи = Истина;
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		ФлагПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваФайлаЭД.Ссылка, "ПодписанЭП");
	ИначеЕсли СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани
		ИЛИ СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Внутренний Тогда
		
		Если ОбменСКонтрагентамиСлужебный.ЭтоИзвещениеОПолучении(СвойстваФайлаЭД.ТипЭД)
			И ЗначениеЗаполнено(СвойстваФайлаЭД.ЭлектронныйДокументВладелец) Тогда
			
			ФлагПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				СвойстваФайлаЭД.ЭлектронныйДокументВладелец, "ПодписанЭП");
			
		Иначе
			
			ФлагПодписи = Не Объект.ОбменБезПодписи;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФлагПодписи;
	
КонецФункции

&НаСервере
Процедура ВыполнитьОбработкуОповещенияНаСервере()
	
	Прочитать();
	ЗаполнитьДеревоПодчиненныеЭДНаСервере();
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"Ссылка", ИдентификаторТекущейСтроки, ДеревоПодчиненныеЭД.ПолучитьЭлементы(), ПрисоединенныйФайлСсылка, Ложь);
	Иначе
		СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
		ИдентификаторТекущейСтроки = СтрокиДерева[0].ПолучитьИдентификатор();
		ПрисоединенныйФайлСсылка   = СтрокиДерева[0].Ссылка;
	КонецЕсли;
	ОбновитьСтатусЭД();
	ЗаполнитьТаблицуЭП();
	ОбновитьДеревоМаршрутаПодписания();
	ПерезаполнитьКомментарии();
	ИзменитьВидимостьДоступностьНаСервере();
	ВывестиДокументыУчета();
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента(
		ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСертификат(НомерСтроки, Отпечаток)
	
	ТекущиеДанные = Элементы.ТаблицаЭП.ТекущиеДанные;
	Если ТекущиеДанные.Сертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресДанныхСертификата = АдресДанныхСертификата(НомерСтроки);
	
	СтруктураСертификата = ОбменСКонтрагентамиСлужебныйВызовСервера.СвойстваСертификата(АдресДанныхСертификата);
	
	Если СтруктураСертификата <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("СтруктураСертификата, Отпечаток, АдресСертификата",
			СтруктураСертификата, Отпечаток, АдресДанныхСертификата);
		ОткрытьФорму("ОбщаяФорма.Сертификат", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	ДвоичныеДанныеСертификата = ТаблицаЭП[НомерСтроки-1].Сертификат.Получить();
	СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаСервере
Процедура ПоместитьТекстУточненияВОбъект(ТекстУточнения)
	
	НачатьТранзакцию();
	Попытка
		ЭлектронныйДокументОбъект = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(Объект.Ссылка);
		ЭлектронныйДокументОбъект.ПричинаОтклонения = ТекстУточнения;
		ЭлектронныйДокументОбъект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьДополнительнойИнформации()
	
	ОбновитьВидимостьДополнительнойИнформацииНаСервере();
	ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента();
	
КонецПроцедуры

&НаСервере
Функция ЭДОАннулированИлиВПроцессе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Аннулирован
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭДПрисоединенныеФайлы КАК ЭДВладелецЭД
	|		ПО ЭДПрисоединенныеФайлы.ЭлектронныйДокументВладелец = ЭДВладелецЭД.Ссылка
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка = &ЭД
	|	И ВЫБОР
	|			КОГДА ЭДВладелецЭД.Ссылка ЕСТЬ NULL 
	|				ТОГДА ЭДПрисоединенныеФайлы.СтатусЭД В (&СписокСтатусовСАннулированием)
	|			ИНАЧЕ ЭДВладелецЭД.СтатусЭД В (&СписокСтатусовСАннулированием)
	|		КОНЕЦ";
		
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.Аннулирован);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ОтправленоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.СформированоПредложениеОбАннулировании);
	МассивСостояний.Добавить(Перечисления.СтатусыЭД.ПолученоПредложениеОбАннулировании);
	Запрос.УстановитьПараметр("СписокСтатусовСАннулированием", МассивСостояний);
	Запрос.УстановитьПараметр("ЭД", ПрисоединенныйФайлСсылка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	Если Результат.Пустой() Тогда
		ВозвращаемоеЗначение = Ложь;
	Иначе
		ВозвращаемоеЗначение = Истина;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании()
	
	ПодключитьОбработчикОжидания("ПродолжитьАннулирование", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьАннулирование()
	
	СсылкаНаЭД = ПолучитьЭлектронныйДокументВладелец();
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(СсылкаНаЭД, ОтклонитьАннулирование);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЭлектронныйДокументВладелец()
	
	СсылкаНаЭД = Неопределено;
	
	ДокументВладелец = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайлСсылка, "ЭлектронныйДокументВладелец");
	
	Если ЗначениеЗаполнено(ДокументВладелец) Тогда
		СсылкаНаЭД = ДокументВладелец;
	Иначе
		СсылкаНаЭД = ПрисоединенныйФайлСсылка;
	КонецЕсли;
	
	Возврат СсылкаНаЭД;
	
КонецФункции

&НаКлиенте
Процедура ОтклонитьАннулироватьЭД()
	
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьАннулироватьЭДПродолжить", ЭтотОбъект);
	СсылкаНаЭД = ПолучитьЭлектронныйДокументВладелец();
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(СсылкаНаЭД, Отклонить,, ОписаниеОповещения, КонтекстОперации);
	
КонецПроцедуры

&НаСервере
Функция АннулированиеОтклонено()
	
	Результат = Ложь;
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	Если СтрокиДерева.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева[0].ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПОА
			И (СтрокаДерева.СтатусЭД = Перечисления.СтатусыЭД.ОтклоненПолучателем
				ИЛИ СтрокаДерева.СтатусЭД = Перечисления.СтатусыЭД.Отклонен) Тогда
			
			Результат = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗавершитьЭДОСервере(Результат)
	
	НовоеСостояние = Перечисления.СостоянияВерсийЭД.ОбменЗавершен;
	
	ИзменяемыеДокументы = Новый Массив;
	ИзменяемыеДокументы.Добавить(Объект.Ссылка);
	
	ПараметрыЭД = Новый Структура;
	
	Если ПрисоединенныйФайлСсылка.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		СтатусЭД = Перечисления.СтатусыЭД.Утвержден;
	Иначе
		СтатусЭД = Перечисления.СтатусыЭД.Доставлен;
	КонецЕсли;
	
		
	ПараметрыЭД.Вставить("СтатусЭД", СтатусЭД);
	ПараметрыЭД.Вставить("Описание", Результат);
	ОбменСКонтрагентамиСлужебный.ИзменитьПоСсылкеПрисоединенныйФайл(ПрисоединенныйФайлСсылка, ПараметрыЭД, Ложь);
	
	ОбменСКонтрагентамиСлужебный.ИзменитьСостояниеЭД(ИзменяемыеДокументы, НовоеСостояние);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор)
	
	ДанныеФайла = Неопределено;
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		// Файл во временном хранилище
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаВложения);
		ДанныеФайла.Вставить("Ссылка", Неопределено);
	ИначеЕсли ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		// Файл записан в ИБ
		ДанныеФайла = ОбменСКонтрагентамиСлужебный.ПолучитьДанныеФайла(ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
		ДанныеФайла.Вставить("Ссылка", ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Возврат ДанныеФайла;
	
КонецФункции

&НаСервере
Функция СостояниеНастройкиОтправкиПроизвольногоЭД()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьНастройка",    Ложь);
	Результат.Вставить("МожноФормировать", Ложь);
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыОпределенияНастройки = Новый Структура("ВыводитьСообщения,ВидЭД", Ложь, Объект.ВидЭД);
	НастройкиЭД = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(ТекущийОбъект, ПараметрыОпределенияНастройки); 
	
	Если ЗначениеЗаполнено(НастройкиЭД) Тогда
		Результат.ЕстьНастройка    = Истина;
		Результат.МожноФормировать = НастройкиЭД.Формировать;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьВложениеИзВременногоХранилищаПослеЗаписиДокумента()
	
	ДанныеОбновлены = Ложь;
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		СтруктураФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаВложения);
		АдресВременногоХранилищаВложения = Неопределено;
		Если ТипЗнч(СтруктураФайла) = Тип("Структура") И СтруктураФайла.Свойство("СсылкаНаДвоичныеДанныеФайла") Тогда
			Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
				СтруктураФайла.Вставить("АдресФайлаВоВременномХранилище", СтруктураФайла.СсылкаНаДвоичныеДанныеФайла);
				СтруктураФайла.Вставить("АдресВременногоХранилищаТекста", "");
				СтруктураФайла.Вставить("ИмяБезРасширения",               СтруктураФайла.Наименование);
				
				РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайлСсылка, СтруктураФайла);
			КонецЕсли;
			ДобавитьОбновитьПрисоединенныеФайлыКСообщению(СтруктураФайла.СсылкаНаДвоичныеДанныеФайла);
			ДанныеОбновлены = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеОбновлены;
	
КонецФункции

&НаСервере
Процедура ДобавитьОбновитьПрисоединенныеФайлыКСообщению(АдресВХранилище = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		Документы.ЭлектронныйДокументИсходящий.ДобавитьПрисоединенныйФайл(Объект, АдресВХранилище, ПрисоединенныйФайлИмяФайла)
	КонецЕсли;
	
	Прочитать();
	ОбновитьДанныеОВложении();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыОснования(МассивОснований)
	
	ОсновнойДокумент = Неопределено;
	
	Объект.ДокументыОснования.Очистить();
	Для Каждого Основание Из МассивОснований Цикл
		НоваяСтрока = Объект.ДокументыОснования.Добавить();
		Если СтрНайти(Основание.Метаданные().ПолноеИмя(), "ПрисоединенныеФайлы") > 0 Тогда
			НоваяСтрока.ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВладелецФайла");
		Иначе
			НоваяСтрока.ДокументОснование = Основание;
		КонецЕсли;
		
		Если ОсновнойДокумент = Неопределено Тогда
			ОсновнойДокумент = Основание;
		КонецЕсли;
	КонецЦикла;

	Если ОсновнойДокумент <> Неопределено Тогда
		ЗаполнитьПоДокументуОснованию(ОсновнойДокумент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументуОснованию(ДокументОснование)
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		Документ = РеквизитФормыВЗначение("Объект");
		Документ.Заполнить(ДокументОснование);
		ЗначениеВРеквизитФормы(Документ, "Объект");
		ПриИзмененииКлючевыхРеквизитов();
			
		ДокументыОснования = Документ.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
		Если ДокументыОснования.Количество() > 0 Тогда
			КлючПараметра = ДокументыОснования[0];
		КонецЕсли;
		
		АдресХранилища = ОбменСКонтрагентамиСлужебный.ПараметрИзПараметрыКлиентаНаСервере(КлючПараметра);
		Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
			АдресВременногоХранилищаВложения = АдресХранилища;
			// У документа уже есть сохраненное вложение, надо будет в нем обновить двоичные данные.
			ОбновитьДвоичныеДанныеФайла = ЗначениеЗаполнено(ПрисоединенныйФайлСсылка);
		КонецЕсли;
		МодифицированностьПриОткрытии = Истина;
	КонецЕсли;
	ОбновитьДанныеОВложении();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОВложении()
	
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаВложения) Тогда
		СтруктураФайла = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаВложения);
		Если ТипЗнч(СтруктураФайла) = Тип("Структура") И СтруктураФайла.Свойство("СсылкаНаДвоичныеДанныеФайла") Тогда
			ПрисоединенныйФайлРасширение  = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение);
			ПрисоединенныйФайлИмяФайла    = СокрЛП(СтруктураФайла.ИмяФайла);
			ПрисоединенныйФайлИмяФайлаБезРасширения = СокрЛП(СтруктураФайла.Наименование);
			ПрисоединенныйФайлПиктограмма = 0;
			Элементы.ТекстВложение.Ширина  = СтрДлина(ПрисоединенныйФайлИмяФайла);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка,
			"НаименованиеФайла,Расширение,Редактирует,ИндексКартинки");
		ПрисоединенныйФайлРасширение  = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ЗначенияРеквизитов.Расширение);
		ПрисоединенныйФайлИмяФайлаБезРасширения = СокрЛП(ЗначенияРеквизитов.НаименованиеФайла);
		ПрисоединенныйФайлИмяФайла    = ПрисоединенныйФайлИмяФайлаБезРасширения
			+ ?(ЗначениеЗаполнено(ПрисоединенныйФайлРасширение), "." + ПрисоединенныйФайлРасширение, "");
		ПрисоединенныйФайлПиктограмма = ЗначенияРеквизитов.ИндексКартинки;
		Элементы.ТекстВложение.Ширина = СтрДлина(ПрисоединенныйФайлИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаНаДискеЗавершить(ФайлПомещен, АдресВХранилище, ВыбранныйФайл, ДополнительныеПараметры) Экспорт
	
	Если Не ФайлПомещен Тогда
		Возврат;
	КонецЕсли;
	
	ФайлКлиента = Новый Файл(ВыбранныйФайл);
	РабочийКаталогПользователя = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
	ОтносительныйПуть = Строка(УникальныйИдентификатор);
	ОтносительныйПуть = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ОтносительныйПуть, "");
	ОтносительныйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ОтносительныйПуть);
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныйФайл);
	
	Если НЕ ОтключитьТранслитерацию Тогда
		СтруктураФайла.Имя = СтроковыеФункцииКлиент.СтрокаЛатиницей(СтруктураФайла.Имя);
		СтруктураФайла.Имя = СтрЗаменить(СтруктураФайла.Имя, " ", "_");
		СтруктураФайла.Расширение = СтроковыеФункцииКлиент.СтрокаЛатиницей(СтруктураФайла.Расширение);
		СтруктураФайла.ИмяБезРасширения = СтроковыеФункцииКлиент.СтрокаЛатиницей(СтруктураФайла.ИмяБезРасширения);
		СтруктураФайла.ИмяБезРасширения = СтрЗаменить(СтруктураФайла.ИмяБезРасширения, " ", "_");
	КонецЕсли;
	
	СтруктураФайла.ПолноеИмя = РабочийКаталогПользователя + ОтносительныйПуть + СтруктураФайла.Имя;
	СтруктураФайла.Путь = РабочийКаталогПользователя + ОтносительныйПуть;
	
	Если СтрДлина(СтруктураФайла.ИмяБезРасширения) > 200 Тогда
		
		ТекстСообщения = НСтр("ru='Не удалось прикрепить выбранный файл по причине слишком длинного имени.
								  |Сократите имя файла максимум до 200 символов и приложите его к документу повторно.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		УдалитьИзВременногоХранилища(АдресВХранилище);
		Возврат;
		
	КонецЕсли;
	
	СтруктураФайла.Вставить("ИмяФайла",                           СтруктураФайла.Имя);
	СтруктураФайла.Вставить("Наименование",                       СтруктураФайла.ИмяБезРасширения);
	СтруктураФайла.Вставить("Расширение",                         ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураФайла.Расширение));
	СтруктураФайла.Вставить("Редактирует",                        Неопределено);
	СтруктураФайла.Вставить("ПодписанЭП",                         Ложь);
	СтруктураФайла.Вставить("Зашифрован",                         Ложь);
	СтруктураФайла.Вставить("ФайлРедактируется",                  Ложь);
	СтруктураФайла.Вставить("ОтносительныйПуть",                  ОтносительныйПуть);
	СтруктураФайла.Вставить("СсылкаНаДвоичныеДанныеФайла",        АдресВХранилище);
	СтруктураФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);

	СвойстваФайла = Новый Структура("Размер,УниверсальноеВремяИзменения");
	
	ДействияСФайлом = Новый Массив;
	Действие = Новый Структура;
	Действие.Вставить("Действие", "ПолучитьСвойства");
	Действие.Вставить("Свойства", СвойстваФайла);
	Действие.Вставить("Файл", ФайлКлиента);
	ДействияСФайлом.Добавить(Действие);
	
	СтруктураФайла.Вставить("СвойстваФайла",СвойстваФайла);
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьВложениеИзФайлаНаДискеЗавершитьПродолжение", ЭтотОбъект, СтруктураФайла);
	
	ОбработатьФайл(Оповещение, ДействияСФайлом, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайл(Оповещение, ДействияСФайлом, ИдентификаторФормы = Неопределено)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Оповещение",         Оповещение);
	Контекст.Вставить("ДействияСФайлом",    ДействияСФайлом);
	Контекст.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Контекст.Вставить("РезультатДействий", Новый Структура);
	Контекст.РезультатДействий.Вставить("ОписаниеОшибки", "");
	Контекст.РезультатДействий.Вставить("Результаты", Новый Массив);
	
	Контекст.Вставить("Индекс", -1);
	ОбработатьФайлЦиклНачало(Контекст);
	
КонецПроцедуры

// Продолжение процедуры ОбработатьФайл.
&НаКлиенте
Процедура ОбработатьФайлЦиклНачало(Контекст)
	
	// Скопировано из РаботаСФайламиСлужебныйКлиент.ОбработатьФайлЦиклНачало.
	
	Если Контекст.Индекс + 1 >= Контекст.ДействияСФайлом.Количество() Тогда
		ВыполнитьОбработкуОповещения(Контекст.Оповещение, Контекст.РезультатДействий);
		Возврат;
	КонецЕсли;
	
	Контекст.Индекс = Контекст.Индекс + 1;
	Контекст.Вставить("ОписаниеДействия", Контекст.ДействияСФайлом[Контекст.Индекс]);
	
	Контекст.Вставить("Результат",  Новый Структура);
	Контекст.Результат.Вставить("Файл", Неопределено);
	Контекст.Результат.Вставить("Существует", Ложь);
	
	Контекст.РезультатДействий.Результаты.Добавить(Контекст.Результат);
	
	Контекст.Вставить("СвойстваДляПолучения", Новый Структура);
	Контекст.Вставить("СвойстваДляУстановки", Новый Структура);
	
	Действие = Контекст.ОписаниеДействия.Действие;
	Файл = Контекст.ОписаниеДействия.Файл;
	ПолноеИмяФайла = ?(ТипЗнч(Файл) = Тип("Файл"), Файл.ПолноеИмя, Файл);
	
	Если Действие = "Удалить" Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеУдаленияФайлов", РаботаСФайламиСлужебныйКлиент, Контекст,
			"ОбработатьФайлПослеОшибки", РаботаСФайламиСлужебныйКлиент), ПолноеИмяФайла);
		Возврат;
	
	ИначеЕсли Действие = "СкопироватьИзИсточника" Тогда
		НачатьКопированиеФайла(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеКопированияФайла", РаботаСФайламиСлужебныйКлиент, Контекст,
			"ОбработатьФайлПослеОшибки", РаботаСФайламиСлужебныйКлиент), Контекст.ОписаниеДействия.Источник, ПолноеИмяФайла);
		Возврат;
	
	ИначеЕсли Действие = "СоздатьКаталог" Тогда
		НачатьСозданиеКаталога(Новый ОписаниеОповещения(
			"ОбработатьФайлПослеСозданияКаталога", РаботаСФайламиСлужебныйКлиент, Контекст,
			"ОбработатьФайлПослеОшибки", РаботаСФайламиСлужебныйКлиент), ПолноеИмяФайла);
		Возврат;
	
	ИначеЕсли Действие = "Получить" Тогда
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, Контекст.ОписаниеДействия.Адрес);
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(ОписаниеФайла);
		НачатьПолучениеФайлов(Новый ОписаниеОповещения(
				"ОбработатьФайлПослеПолученияФайлов", РаботаСФайламиСлужебныйКлиент, Контекст,
				"ОбработатьФайлПослеОшибки", РаботаСФайламиСлужебныйКлиент),
			ПолучаемыеФайлы, , Ложь);
		Возврат;
	
	ИначеЕсли Действие = "Поместить" Тогда
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла);
		ПомещаемыеФайлы = Новый Массив;
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
		НачатьПомещениеФайлов(Новый ОписаниеОповещения(
				"ОбработатьФайлПослеПомещенияФайлов", РаботаСФайламиСлужебныйКлиент, Контекст,
				"ОбработатьФайлПослеОшибки", РаботаСФайламиСлужебныйКлиент),
			ПомещаемыеФайлы, , Ложь, Контекст.ИдентификаторФормы);
		Возврат;
	
	ИначеЕсли Действие = "ПолучитьСвойства" Тогда
		Контекст.Вставить("СвойстваДляПолучения", Контекст.ОписаниеДействия.Свойства);
		
	ИначеЕсли Действие = "УстановитьСвойства" Тогда
		Контекст.Вставить("СвойстваДляУстановки", Контекст.ОписаниеДействия.Свойства);
	КонецЕсли;
	
	Контекст.Вставить("Файл", ?(ТипЗнч(Файл) = Тип("Файл"), Файл, Новый Файл(Файл)));
	Контекст.Результат.Вставить("Файл", Контекст.Файл);
	ЗаполнитьЗначенияСвойств(Контекст.СвойстваДляПолучения, Файл);
	Контекст.Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения(
		"ОбработатьФайлПослеПроверкиСуществования", РаботаСФайламиСлужебныйКлиент, Контекст,
		"ОбработатьФайлПослеОшибки", РаботаСФайламиСлужебныйКлиент));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеИзФайлаНаДискеЗавершитьПродолжение(РезультатДействий, СтруктураФайла) Экспорт
	
	СтруктураФайла.Вставить("Размер", СтруктураФайла.СвойстваФайла.Размер);
	СтруктураФайла.Вставить("ДатаМодификацииУниверсальная", СтруктураФайла.СвойстваФайла.УниверсальноеВремяИзменения);
	СтруктураФайла.Удалить("СвойстваФайла");
	ДобавитьВложениеИзФайлаНаДискеЗавершитьНаСервере(СтруктураФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьФайл()
	
	ДанныеФайла = ДанныеФайлаВложения(АдресВременногоХранилищаВложения, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	
	Если НЕ ПроверитьДействиеРазрешено(ДанныеФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДанныеФайла.ФайлРедактируется
	 ИЛИ НЕ ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьФайлНаСервере(ДанныеФайла);
	Если ДанныеФайла.Ссылка = Неопределено Тогда
		АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
	Иначе
		ОповеститьОбИзменении(ДанныеФайла.Ссылка);
	КонецЕсли;
	УдалитьВременныйФайлВложения(ДанныеФайла);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОсвободитьФайлНаСервере(ДанныеФайла)
	
	Если ДанныеФайла.Ссылка = Неопределено Тогда
		ДанныеФайла.Редактирует                        = Справочники.Пользователи.ПустаяСсылка();
		ДанныеФайла.ФайлРедактируется                  = Ложь;
		ДанныеФайла.ФайлРедактируетТекущийПользователь = Ложь;
	Иначе
		РаботаСФайламиСлужебный.ОсвободитьФайл(ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьПрисоединенныйФайлЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ИзменитьВидимостьДоступностьНаСервере();
	
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
	КонецЕсли;
	
	ОписаниеОповещения = Неопределено;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ОбработкаПродолжения", ОписаниеОповещения) Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеЗавершить(Результат, ДополнительныеПараметры) Экспорт
	
	УдалитьВременныйФайлВложения(ДополнительныеПараметры.ДанныеФайла);
	
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжитьПослеОсвобожденияВложения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Записать();
	Иначе
		ТекстСообщения = НСтр("ru = 'Во время выполнения операции произошла ошибка. Действие отменено.
			|Подробности см. в журнале регистрации.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗахватНаРедактирование(ОбработкаПродолжения, ДанныеФайла)
	
	Если ДанныеФайла.ФайлРедактируется Тогда
		Если ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
			// Вложение захвачено для редактирования текущим пользователем
			ДополнительныеПараметры = Новый Структура("ДанныеФайла, ОбработкаПродолжения", ДанныеФайла, ОбработкаПродолжения);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗахватНаРедактированиеПередПодписаниемПродолжить", ЭтотОбъект, ДополнительныеПараметры);
			ТекстВопроса = НСтр("ru = 'Вложение ""%1"" захвачено для редактирования.
				|Для продолжения надо завершить редактирование.'");
			ТекстВопроса = СтрЗаменить(ТекстВопроса, "%1", ПрисоединенныйФайлИмяФайла);
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить("ЗакончитьРедактирование", НСтр("ru = 'Закончить редактирование'"));
			СписокКнопок.Добавить("Освободить",              НСтр("ru = 'Отменить редактирование'"));
			СписокКнопок.Добавить("Отменить",                НСтр("ru = 'Отменить'"));
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок);
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие недоступно, так как файл занят для редактирования
				|другим пользователем.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	Иначе
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗахватНаРедактированиеПередПодписаниемПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Освободить" Тогда
		ОсвободитьФайл();
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработкаПродолжения);
	ИначеЕсли Результат = "ЗакончитьРедактирование" Тогда
		ОбработкаПродолжения = Новый ОписаниеОповещения("ЗакончитьРедактированиеЗавершить",
			ЭтотОбъект, ДополнительныеПараметры);
		Контекст = Новый Структура("ОбработкаПродолжения", ОбработкаПродолжения);
		Оповещение = Новый ОписаниеОповещения("ПоместитьПрисоединенныйФайлЗавершение", ЭтотОбъект, Контекст);
		РаботаСФайламиКлиент.ПоместитьПрисоединенныйФайл(Оповещение, ПрисоединенныйФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВременныйФайлВложения(ДанныеФайла)
	
	РабочийКаталогПользователя = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
	ПолноеИмяФайлаНаКлиенте = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
	НачатьУдалениеФайлов(, ПолноеИмяФайлаНаКлиенте); 
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьДействиеРазрешено(ДанныеФайла, Знач ТекущееДействие = "")
	
	Если ДанныеФайла = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТекущееДействие = "ПометкаУдаления" И ДанныеФайла.ФайлРедактируется Тогда
		
		Если ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
			ТекстПредупреждения = НСтр("ru = 'Действие недоступно, так как файл занят для редактирования.'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Действие недоступно, так как файл занят для редактирования
			                                 |другим пользователем.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗанятьФайлДляРедактированияСервер(ДанныеФайла)
	
	Если ДанныеФайла.Ссылка = Неопределено Тогда
		ДанныеФайла.Редактирует                        = Пользователи.АвторизованныйПользователь();
		ДанныеФайла.ФайлРедактируется                  = Истина;
		ДанныеФайла.ФайлРедактируетТекущийПользователь = Истина;
	Иначе
		РаботаСФайламиСлужебный.ЗанятьФайлДляРедактированияСервер(ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ПриИзмененииКлючевыхРеквизитов();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКлючевыхРеквизитов(ОчищатьМаршрут = Ложь)
	
	НастройкиОбменаЭД = НастройкиОбменаЭД(Объект.ВидЭД, Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Объект.ТребуетсяПодтверждение = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), 
		НастройкиОбменаЭД.ТребуетсяПодтверждение, Ложь);
	Объект.ТребуетсяИзвещение = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), 
		НастройкиОбменаЭД.ТребуетсяИзвещение, Ложь);
	Объект.ИдентификаторОрганизации = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), 
		НастройкиОбменаЭД.ИдентификаторОрганизации, Ложь);
	Объект.ИдентификаторКонтрагента = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), 
		НастройкиОбменаЭД.ИдентификаторКонтрагента, Ложь);
	Объект.СпособОбменаЭД = ?(ЗначениеЗаполнено(НастройкиОбменаЭД), 
		НастройкиОбменаЭД.СпособОбменаЭД, Ложь);
	Объект.ОбменБезПодписи = ?(ЗначениеЗаполнено(НастройкиОбменаЭД),
		Не НастройкиОбменаЭД.Подписывать, Ложь);
	
	МаршрутУказываетсяВДокументеСейчас = МаршрутПодписанияУказываетсяВДокументе;
	ОпределитьНеобходимостьУказанияМаршрута(НастройкиОбменаЭД);
	
	// Очищаем маршрут по требованию или если сменился подход указания маршрута. 
	Если ОчищатьМаршрут ИЛИ МаршрутУказываетсяВДокументеСейчас <> МаршрутПодписанияУказываетсяВДокументе Тогда
		Объект.МаршрутПодписания = Справочники.МаршрутыПодписания.ПустаяСсылка();
		Объект.СписокПодписантов.Очистить();
	КонецЕсли;
	
	ОбновитьОтображениеМаршрутаПодписания(НастройкиОбменаЭД);

КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеМаршрутаПодписания(НастройкиОбменаЭД)
	
	Элементы.МаршрутПодписания.Доступность = МаршрутПодписанияУказываетсяВДокументе;
	Если МаршрутПодписанияУказываетсяВДокументе Тогда
		МаршрутУказываетсяВручную = Объект.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании;
		Подписанты = Объект.СписокПодписантов.Выгрузить();
		
		ПредставлениеНастроекВыбораМаршрута = ЭлектронноеВзаимодействиеСлужебный.ПредставлениеМаршрутаВыбранногоВДокументе(
			МаршрутУказываетсяВручную, Подписанты, Объект.МаршрутПодписания);
	Иначе	
		Если ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
			НастройкиОбменаЭД.Свойство("МаршрутПодписания", Объект.МаршрутПодписания);
			ПредставлениеНастроекВыбораМаршрута = Объект.МаршрутПодписания;
		Иначе
			ПредставлениеНастроекВыбораМаршрута = ЭлектронноеВзаимодействиеСлужебный.ПредставлениеНеВыбранногоМаршрута();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНеобходимостьУказанияМаршрута(НастройкиОбменаЭД = Неопределено)

	Если Не ЗначениеЗаполнено(Объект.СостояниеЭДО) 
		ИЛИ Объект.СостояниеЭДО = Перечисления.СостоянияВерсийЭД.НеСформирован Тогда
		// Определяем необходимость указания маршрута только при не запущенном документообороте, потом поле выбора маршрута
		// в любом случае не показывается.
		Если НастройкиОбменаЭД = Неопределено Тогда
			НастройкиОбменаЭД = НастройкиОбменаЭД(Объект.ВидЭД, Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
		КонецЕсли;
		
		МаршрутПодписания = Неопределено;
		Если ЗначениеЗаполнено(НастройкиОбменаЭД) 
			И НастройкиОбменаЭД.Свойство("МаршрутПодписания", МаршрутПодписания) Тогда
			МаршрутПодписанияУказываетсяВДокументе = 
				МаршрутПодписания = ПредопределенноеЗначение("Справочник.МаршрутыПодписания.УказыватьПриСоздании");
		Иначе
			МаршрутПодписанияУказываетсяВДокументе = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиОбменаЭД(ВидЭД, Организация, Контрагент, ДоговорКонтрагента)
	
	Требуется = Ложь;
	
	ПараметрыЭД = Новый Структура();
	ПараметрыЭД.Вставить("ВидЭД", 		       ВидЭД);
	ПараметрыЭД.Вставить("Организация",        Организация);
	ПараметрыЭД.Вставить("Контрагент",	       Контрагент);
	ПараметрыЭД.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	ПараметрыЭД.Вставить("НаправлениеЭД",      Перечисления.НаправленияЭД.Исходящий);
	
	НастройкиЭД = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);
	
	Возврат НастройкиЭД;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресХраненияНастроекВыбораМаршрута()

	ДоступныеДляВыбораСертификаты = Новый Массив;
	НастройкиОбменаЭД = НастройкиОбменаЭД(Объект.ВидЭД, Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента);
	Если НастройкиОбменаЭД = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось найти настройки отправки документов ЭДО по выбранным организации и контрагенту'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка);
		
		Возврат Неопределено;
	КонецЕсли;
	
	ДоступныеДляВыбораСертификаты = РегистрыСведений.СертификатыУчетныхЗаписейЭДО.СертификатыУчетнойЗаписи(НастройкиОбменаЭД.ИдентификаторОрганизации);
	
	ЗадаватьМаршрутВручную = (Не ЗначениеЗаполнено(Объект.МаршрутПодписания) 
		ИЛИ Объект.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании) 
		И Объект.СписокПодписантов.Количество();
	Подписанты = Объект.СписокПодписантов.Выгрузить();
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.СохранитьНастройкиВыбораМаршрута(ЭтотОбъект, ЗадаватьМаршрутВручную, 
		Подписанты, Объект.МаршрутПодписания, ДоступныеДляВыбораСертификаты);

КонецФункции
	
&НаКлиенте
Процедура ВыборМаршрутаПодписания(АдресХраненияНастроек, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(АдресХраненияНастроек) = Тип("Строка") И ЗначениеЗаполнено(АдресХраненияНастроек) Тогда
		ОбработатьПолученныеНастройкиВыбораМаршрутов(АдресХраненияНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеНастройкиВыбораМаршрутов(АдресНастроек)

	Настройки = ПолучитьИзВременногоХранилища(АдресНастроек);
	УдалитьИзВременногоХранилища(АдресНастроек);
	
	ПредставлениеНастроекВыбораМаршрута = Настройки.ПредставлениеНастроек;
	Объект.СписокПодписантов.Очистить();
	Если Настройки.ЗадаватьМаршрутВручную Тогда
		Объект.МаршрутПодписания = Справочники.МаршрутыПодписания.УказыватьПриСоздании;
		
		Для Каждого Подписант Из Настройки.Подписанты Цикл
			СтрокаПодписанта = Объект.СписокПодписантов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПодписанта, Подписант);
		КонецЦикла;
	Иначе	
	    Объект.МаршрутПодписания = Настройки.Маршрут;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоМаршрутаПодписания()
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		
		СвойстваФайлаЭД  = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, "НаправлениеЭД");
		ТаблицаМаршрутов = ПрисоединенныйФайлСсылка;
		
	ИначеЕсли ЗначениеЗаполнено(ОписаниеМаршрутаПодписания) Тогда
		
		СвойстваФайлаЭД  = ОписаниеМаршрутаПодписания.СвойстваФайлаЭД;
		ТаблицаМаршрутов = ОписаниеМаршрутаПодписания.ТаблицаМаршрутов;
		
	Иначе
		
		ДеревоМаршрутаПодписания.ПолучитьЭлементы().Очистить();
		Возврат;
		
	КонецЕсли;
	
	Если СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
		ОсновнойРеквизит = "Организация";
	Иначе
		ОсновнойРеквизит = "Подписант";
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеСлужебный.ЗаполнитьДеревоМаршрутаНаФорме(ЭтотОбъект, ТаблицаМаршрутов, 
		"ДеревоМаршрутаПодписания", ОсновнойРеквизит, ВесМаршрута);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьТранслитерации()
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Элементы.ТранслитироватьИмяФайла.Видимость = Истина;
		Элементы.ТранслитироватьИмяФайла.Пометка = Не ОтключитьТранслитерацию;
		Элементы.НадписьТранслитерация.Видимость = Не ОтключитьТранслитерацию;
	Иначе
		Элементы.ТранслитироватьИмяФайла.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОДокументе()
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	ИнформацияОДокументе = ?(Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД, Строка(Объект.ТипДокумента) + ", ", "")
		+ Объект.Контрагент
		+ ?(ЗначениеЗаполнено(Объект.ДоговорКонтрагента), ", " + Объект.ДоговорКонтрагента, "")
		+ ?(ИспользуетсяНесколькоОрганизацийЭД, ", " + Объект.Организация, "");
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОтсутствииЭД() 
	
	ТекстСообщения = НСтр("ru = 'Электронный документ не сформирован. Работа с ним невозможна.'");
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Необходимо добавить файл и сохранить документ.'");
	КонецЕсли;
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеИзФайлаНаДискеЗавершитьНаСервере(Знач СтруктураФайла)
	
	СтруктураФайла.Имя = ОбменСКонтрагентамиСлужебный.ЗаменитьСимволыОтсутствующиеВКодировкеТекста(
		СтруктураФайла.Имя);
	СтруктураФайла.ИмяБезРасширения = ОбменСКонтрагентамиСлужебный.ЗаменитьСимволыОтсутствующиеВКодировкеТекста(
		СтруктураФайла.ИмяБезРасширения);
	СтруктураФайла.Вставить("ИмяФайла",     СтруктураФайла.Имя);
	СтруктураФайла.Вставить("Наименование", СтруктураФайла.ИмяБезРасширения);
	
	АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(СтруктураФайла, УникальныйИдентификатор);
	ОбновитьДанныеОВложении();
	
	Если СтруктураФайла.Расширение = "xml" Тогда
		
		ДанныеФайлаXML = ПолучитьИзВременногоХранилища(СтруктураФайла.СсылкаНаДвоичныеДанныеФайла);
		ПараметрыПроизвольногоДокумента = ОбменСКонтрагентамиСлужебный.ПараметрыФайлаПроизвольногоДокумента(ДанныеФайлаXML);
		Если ПараметрыПроизвольногоДокумента <> Неопределено Тогда
			Объект.ТипДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыПроизвольногоДокумента, "ТипДокумента", Объект.ТипДокумента);
			Объект.НомерДокументаОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыПроизвольногоДокумента, "НомерДокументаОтправителя", Объект.НомерДокументаОтправителя);
			Объект.ДатаДокументаОтправителя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыПроизвольногоДокумента, "ДатаДокументаОтправителя", Объект.ДатаДокументаОтправителя);
			Объект.СуммаДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ПараметрыПроизвольногоДокумента, "СуммаДокумента", Объект.СуммаДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзНастроекНаСервере()
	
	ОтключитьВыводДерева        = Ложь;
	ОтключитьВыводДопДанных     = Истина;
	ОтключитьВыводКопияВерна    = Истина;
	ВыводитьБанковскиеРеквизиты = Истина;
	ОтключитьТранслитерацию     = Ложь;
	Настройки = ХранилищеСистемныхНастроек.Загрузить("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД/ТекущиеДанные");
	Если Настройки <> Неопределено Тогда
		Если Не Настройки.Получить("ОтключитьВыводДерева") = Неопределено Тогда
			ОтключитьВыводДерева = Настройки.Получить("ОтключитьВыводДерева");
		КонецЕсли;
		Если Не Настройки.Получить("ОтключитьВыводДопДанных") = Неопределено Тогда
			ОтключитьВыводДопДанных = Настройки.Получить("ОтключитьВыводДопДанных");
		КонецЕсли;
		Если Не Настройки.Получить("ОтключитьВыводКопияВерна") = Неопределено Тогда
			ОтключитьВыводКопияВерна = Настройки.Получить("ОтключитьВыводКопияВерна");
		КонецЕсли;
		Если Не Настройки.Получить("ВыводитьБанковскиеРеквизиты") = Неопределено Тогда
			ВыводитьБанковскиеРеквизиты = Настройки.Получить("ВыводитьБанковскиеРеквизиты");
		КонецЕсли;
		Если Не Настройки.Получить("ОтключитьТранслитерацию") = Неопределено Тогда
			ОтключитьТранслитерацию = Настройки.Получить("ОтключитьТранслитерацию");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.КомандаОтображатьДополнительнуюИнформацию.Пометка = НЕ ОтключитьВыводДопДанных;
	Элементы.КомандаОтображатьКопияВерна.Пометка               = НЕ ОтключитьВыводКопияВерна;
	Элементы.КомандаОтображатьДерево.Пометка                   = НЕ ОтключитьВыводДерева;
	Элементы.ДеревоПодчиненныеЭД.Видимость                     = НЕ ОтключитьВыводДерева;
	Элементы.КомандаОтображатьБанковскиеРеквизиты.Пометка      = ВыводитьБанковскиеРеквизиты;
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	Если СтрокиДерева[0].Ссылка <> ПрисоединенныйФайлСсылка И ЗначениеЗаполнено(СтрокиДерева[0].Ссылка) Тогда
		Элементы.КомандаОтображатьДерево.Пометка = Истина;
		Элементы.ДеревоПодчиненныеЭД.Видимость   = Истина;
	КонецЕсли;
	
	// В счете на оплату банковские реквизиты будут отображаться всегда.
	// В произвольном ЭД нет банковских реквизитов.
	Если Объект.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату
		ИЛИ Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Элементы.КомандаОтображатьБанковскиеРеквизиты.Видимость = Ложь;
	ИначеЕсли Объект.ВидЭД = Перечисления.видыэд.Внутренний Тогда
		ОтключитьВыводДерева = Истина;
		Элементы.ДеревоПодчиненныеЭД.Видимость = Ложь;
		Элементы.КомандаОтображатьДерево.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		СтруктураОтветы = РеквизитФормыВЗначение("Объект").ДополнительныеДанные.Получить();
		Если ТипЗнч(СтруктураОтветы) = Тип("ФиксированнаяСтруктура") Тогда
			ДополнительныеДанные = Новый Структура(СтруктураОтветы);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьПредставлениеФайлаЭлектронногоДокумента(ТекущаяСтрокаДерева = Неопределено, ПовторноеИспользование = Истина)
	
	Если ТекущаяСтрокаДерева = Неопределено Тогда
		ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	КонецЕсли;
	
	Если ТекущаяСтрокаДерева.ИмяРеквизита = "ПрисоединенныйФайл" Тогда
		ОбновитьДанныеОВложении();
		СменитьСтраницуЭД(Элементы, Элементы.СтраницаПрисоединенныйФайл);
		ПриСменеСтраницыПанелиЭлектронногоДокумента(ЭтотОбъект);
		Возврат;
	ИначеЕсли ПовторноеИспользование И ЗначениеЗаполнено(ТекущаяСтрокаДерева.ИмяРеквизита)
		И ЭтотОбъект[ТекущаяСтрокаДерева.ИмяРеквизита].ВысотаТаблицы > 0 Тогда
		СменитьСтраницуЭД(Элементы, Элементы["Страница" + ТекущаяСтрокаДерева.ИмяРеквизита]);
		ПриСменеСтраницыПанелиЭлектронногоДокумента(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	СвойстваЭлектронногоДокумента = Новый Структура;
	СвойстваЭлектронногоДокумента.Вставить("Ссылка",    			 Объект.Ссылка);
	СвойстваЭлектронногоДокумента.Вставить("ВидЭД",                  Объект.ВидЭД);
	СвойстваЭлектронногоДокумента.Вставить("ПрикладнойВидЭД",        Объект.ПрикладнойВидЭД);
	СвойстваЭлектронногоДокумента.Вставить("ТипЭлементаВерсииЭД",    Объект.ТипЭлементаВерсииЭД);
	СвойстваЭлектронногоДокумента.Вставить("ТребуетсяПодтверждение", Объект.ТребуетсяПодтверждение);
	
	СвойстваФайлаЭлектронногоДокумента = Новый Структура;
	СвойстваФайлаЭлектронногоДокумента.Вставить("Ссылка",              ТекущаяСтрокаДерева.Ссылка);
	СвойстваФайлаЭлектронногоДокумента.Вставить("СтатусЭД",            ТекущаяСтрокаДерева.СтатусЭД);
	СвойстваФайлаЭлектронногоДокумента.Вставить("НаправлениеЭД",       ТекущаяСтрокаДерева.НаправлениеЭД);
	СвойстваФайлаЭлектронногоДокумента.Вставить("ТипЭлементаВерсииЭД", ТекущаяСтрокаДерева.ТипЭД);
	
	Если ЗначениеЗаполнено(СформированныеЭД) Тогда
		СвойстваФайлаЭлектронногоДокумента.Вставить("ФайлыЭД", СформированныеЭД.Получить(Объект.ВидЭД));
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("СкрыватьДопДанные",                  ОтключитьВыводДопДанных);
	ПараметрыЗадания.Вставить("СкрыватьКопияВерна",                 ОтключитьВыводКопияВерна);
	ПараметрыЗадания.Вставить("ВыводитьБанковскиеРеквизиты",        ВыводитьБанковскиеРеквизиты);
	ПараметрыЗадания.Вставить("УникальныйИдентификатор",            УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("СвойстваЭлектронногоДокумента",      СвойстваЭлектронногоДокумента);
	ПараметрыЗадания.Вставить("СвойстваФайлаЭлектронногоДокумента", СвойстваФайлаЭлектронногоДокумента);
	ПараметрыЗадания.Вставить("ПолучитьВерсиюФормата"             , Истина);
	ПараметрыЗадания.Вставить("КонтекстОперации",                   КонтекстОперации);
	
	Если ПараметрыПроизвольногоДокумента <> Неопределено
		И ТекущаяСтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
		ПараметрыЗадания.Вставить("ПараметрыПроизвольногоДокумента", ПараметрыПроизвольногоДокумента);
	КонецЕсли;
	
	ДлительнаяОперация = ОбменСКонтрагентамиСлужебный.ЗапуститьФормированиеПредставленияФайлаЭлектронногоДокумента(
		ПараметрыЗадания, УникальныйИдентификатор);
	
	ПроверитьФормированиеПредставленияФайлаЭлектронногоДокумента(ДлительнаяОперация, ТекущаяСтрокаДерева);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПредставлениеФайлаЭлектронногоДокумента(Знач Результат)
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	ПроверитьФормированиеПредставленияФайлаЭлектронногоДокумента(Результат, ТекущаяСтрокаДерева)
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьФормированиеПредставленияФайлаЭлектронногоДокумента(ДлительнаяОперация, ТекущаяСтрокаДерева)
	
	Элементы.ДеревоПодчиненныеЭД.Доступность = Истина;
	
	Если ДлительнаяОперация = Неопределено Тогда
		СменитьСтраницуЭД(Элементы, Элементы.СтраницаОшибкаФормированияПредставления);
		ПриСменеСтраницыПанелиЭлектронногоДокумента(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если РезультатВыполнения = Неопределено Тогда
			Если ТекущаяСтрокаДерева.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
				И ТекущаяСтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД Тогда
				ОбновитьДанныеОВложении();
				ТекущаяСтрокаДерева.ИмяРеквизита = "ПрисоединенныйФайл";
				СменитьСтраницуЭД(Элементы, Элементы.СтраницаПрисоединенныйФайл);
			Иначе
				СменитьСтраницуЭД(Элементы, Элементы.СтраницаОшибкаФормированияПредставления);
			КонецЕсли;
		Иначе 
			Если РезультатВыполнения.Свойство("КонтекстОперации") Тогда
				КонтекстОперации = РезультатВыполнения.КонтекстОперации;
			КонецЕсли;
			Если РезультатВыполнения.ПредставлениеФайлаЭлектронногоДокумента = Неопределено Тогда
				СменитьСтраницуЭД(Элементы, Элементы.СтраницаОшибкаФормированияПредставления);
			Иначе 
				Если ПустаяСтрока(ТекущаяСтрокаДерева.ИмяРеквизита) Тогда
					ОбменСКонтрагентамиСлужебный.СоздатьРеквизитыИЭлементыДляПредставленияФайлаЭлектронногоДокумента(
						ЭтотОбъект, ТекущаяСтрокаДерева);
				КонецЕсли;
				
				// Обновляем представление и версию только в том случае, если задание запускалось по текущему
				// электронному документу (при смене формата через настройки отправки может прийти результат по
				// неактуальной версии документа).
				Если РезультатВыполнения.ЭлектронныйДокумент = Объект.Ссылка Тогда
					ПредставлениеЭлектронногоДокумента = РезультатВыполнения.ПредставлениеФайлаЭлектронногоДокумента;
					
					Если РезультатВыполнения.Свойство("ВерсияФормата")
						И ЗначениеЗаполнено(РезультатВыполнения.ВерсияФормата) Тогда
						ВерсияФормата = РезультатВыполнения.ВерсияФормата;
					КонецЕсли;
					
					ЭтотОбъект[ТекущаяСтрокаДерева.ИмяРеквизита] = ПредставлениеЭлектронногоДокумента;
					СменитьСтраницуЭД(Элементы, Элементы["Страница" + ТекущаяСтрокаДерева.ИмяРеквизита]);
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ПриСменеСтраницыПанелиЭлектронногоДокумента(ЭтотОбъект);
	ИначеЕсли ДлительнаяОперация.Статус = "Выполняется" Тогда
		ФормированиеПредставления = ДлительнаяОперация;
		Элементы.ДеревоПодчиненныеЭД.Доступность = Ложь;
		СменитьСтраницуЭД(Элементы, Элементы.СтраницаОжидание);
		ПриСменеСтраницыПанелиЭлектронногоДокумента(ЭтотОбъект);
	ИначеЕсли ДлительнаяОперация.Статус = "Ошибка" Тогда
		СменитьСтраницуЭД(Элементы, Элементы.СтраницаОшибкаФормированияПредставления);
		ПриСменеСтраницыПанелиЭлектронногоДокумента(ЭтотОбъект);
	ИначеЕсли ДлительнаяОперация.Статус = "Отменено" Тогда
		СменитьСтраницуЭД(Элементы, Элементы.СтраницаОшибкаФормированияПредставления);
		ПриСменеСтраницыПанелиЭлектронногоДокумента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента(ПредставлениеСформировано = Ложь)
	
	Если ФормированиеПредставления = Неопределено Тогда
		ПредставлениеСформировано = Истина;
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьПредставлениеФайлаЭДПослеВыполненияДлительнойОперации", ЭтотОбъект);
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФормированиеПредставления, Оповещение, ПараметрыОжидания);
	ФормированиеПредставления = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредставлениеФайлаЭДПослеВыполненияДлительнойОперации(Результат, Контекст) Экспорт
	
	ВывестиПредставлениеФайлаЭлектронногоДокумента(Результат);
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриСменеСтраницыПанелиЭлектронногоДокумента(Форма)

	Элементы = Форма.Элементы;
	
	// Версию формата мы получаем при получении представления электронного документа, поэтому, если
	// оно еще не сформировалось, придется подождать.
	Элементы.НастройкиОтправки.Доступность = Не (Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаОжидание
		ИЛИ Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаОшибкаФормированияПредставления);

КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьДополнительнойИнформацииНаСервере()
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента(
		ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки), Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СменитьСтраницуЭД(Элементы, НоваяСтраница)
	
	#Если МобильныйКлиент Тогда
		Возврат;
	#КонецЕсли
	
	#Если Сервер Тогда
		Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			Элементы.СтраницыЭД.ТекущаяСтраница = НоваяСтраница;
		КонецЕсли;
	#Иначе
		Элементы.СтраницыЭД.ТекущаяСтраница = НоваяСтраница;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВложениеИзТабличногоДокумента(ТабличныйДокумент)
	
	Поток = Новый ПотокВПамяти;
	ТабличныйДокумент.Записать(Поток, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Поток.ЗакрытьИПолучитьДвоичныеДанные();
	АдресВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		Наименование = ПолучитьИмяВременногоФайла();
	Иначе
		Наименование = СтрЗаменить(Строка(Объект.ДокументыОснования[0].ДокументОснование), " ", "_");
		
		Если НЕ ОтключитьТранслитерацию Тогда
			Наименование = СтроковыеФункции.СтрокаЛатиницей(Наименование);
		КонецЕсли;
		
		Наименование = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(Наименование, "_");
	КонецЕсли;
	
	Расширение = "pdf";
	ИмяФайла = СтрШаблон("%1.%2", Наименование, Расширение);
	
	ОтносительныйПуть = Строка(УникальныйИдентификатор);
	ОтносительныйПуть = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ОтносительныйПуть, "");
	ОтносительныйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ОтносительныйПуть);
	
	СтруктураФайла = Новый Структура;
	СтруктураФайла.Вставить("ИмяФайла",                           ИмяФайла);
	СтруктураФайла.Вставить("Наименование",                       Наименование);
	СтруктураФайла.Вставить("Расширение",                         Расширение);
	СтруктураФайла.Вставить("Редактирует",                        Неопределено);
	СтруктураФайла.Вставить("ПодписанЭП",                         Ложь);
	СтруктураФайла.Вставить("Зашифрован",                         Ложь);
	СтруктураФайла.Вставить("ФайлРедактируется",                  Ложь);
	СтруктураФайла.Вставить("ОтносительныйПуть",                  ОтносительныйПуть);
	СтруктураФайла.Вставить("СсылкаНаДвоичныеДанныеФайла",        АдресВХранилище);
	СтруктураФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
	СтруктураФайла.Вставить("Размер",                             ДвоичныеДанные.Размер());
	СтруктураФайла.Вставить("УниверсальноеВремяИзменения",        ТекущаяУниверсальнаяДата());
	
	АдресВременногоХранилищаВложения = ПоместитьВоВременноеХранилище(СтруктураФайла, УникальныйИдентификатор);
	
	ОбновитьДанныеОВложении();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ТекстВложениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.Записать();
	
	Если Не ПрисоединенныйФайлСсылка.Пустая() Тогда
		ОткрытьФайлВложения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЭДОПродолжить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗавершитьЭДОСервере(Результат);
	
	ОбновитьСостояниеЭД();

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокументПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьДокументЗавершить", ЭтотОбъект);
		Подсказка = НСтр("ru = 'Укажите документ отражения в учете'");
		ПоказатьВводЗначения(ОписаниеОповещения, Объект.Ссылка, Подсказка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулироватьЭДПродолжить(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	ИзменитьВидимостьДоступность();
	Если Результат = Истина Тогда
		ОбновитьСостояниеЭД();
	ИначеЕсли КонтекстОперации <> Неопределено Тогда
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаЭП = ТаблицаЭП.Получить(Расшифровка - 1);
	
	Если СтрокаЭП <> Неопределено Тогда
		ПоказатьСертификат(СтрокаЭП.НомерСтроки, СтрокаЭП.Отпечаток);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НоваяАрхитектураЭДО

// Получает основания формализованных документов.
//
// Параметры:
//  ЭлектронныйДокумент	 - ДокументСсылка.ЭлектронныйДокументИсходящий - ссылка на электронный документ. 
// 
// Возвращаемое значение:
//  Массив - массив объектов, являющихся основаниями электронного документа.
//
&НаСервереБезКонтекста
Функция ДокументыОснования(ЭлектронныйДокумент)
	
	РеквизитыЭлектронногоДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлектронныйДокумент, "ВидЭД, ДокументыОснования");
	Если РеквизитыЭлектронногоДокумента.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		Результат = Новый Массив;
	Иначе 
		Результат = РеквизитыЭлектронногоДокумента.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	КонецЕсли;
	
	Возврат Результат; 
	
КонецФункции
	
&НаКлиенте
Процедура ДеревоПодчиненныеЭДПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоПодчиненныеЭДПослеАктивизацииСтроки",0.1,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПодчиненныеЭДПослеАктивизацииСтроки()
	
	ИдентификаторСтрокиДерева = Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока;
	Если ИдентификаторСтрокиДерева <> Неопределено
		И ИдентификаторСтрокиДерева <> ИдентификаторТекущейСтроки
		И ЗначениеЗаполнено(Элементы.ДеревоПодчиненныеЭД.ТекущиеДанные.Ссылка)
		И НЕ ВыполняетсяОбновлениеФормата Тогда
		ИдентификаторТекущейСтроки = ИдентификаторСтрокиДерева;
		ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере();
		ОжидатьФормированиеПредставленияФайлаЭлектронногоДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоПодчиненныеЭДПослеАктивизацииСтрокиНаСервере()
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	
	ПрисоединенныйФайлСсылка = ТекущаяСтрокаДерева.Ссылка;
	
	СопроводительнаяЗаписка = ТекущаяСтрокаДерева.ДополнительнаяИнформация;
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента(ТекущаяСтрокаДерева);
	
	ОбновитьСтатусЭД();
	
	ЗаполнитьТаблицуЭП();
	
	ОбновитьДеревоМаршрутаПодписания();
	
	ПерезаполнитьКомментарии();
	
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЭПСтатус.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаЭП.ПодписьВерна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255, 0, 0));


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтрокаДоступна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);


	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Получен);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.ПереданОператору);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Отправлен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ЭСФ);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Утвержден);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Доставлен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ТипЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ТОРГ12Покупатель);
	СписокЗначений.Добавить(Перечисления.ТипыЭлементовВерсииЭД.АктЗаказчик);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Доставлен);
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.Получен);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ВидЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	СписокЗначений.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора4 = ГруппаОтбора3.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора4.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.НаправлениеЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭД.Входящий;


	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЭД.Утвержден;


	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.СтатусЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.СтатусыЭД.ПолученоПодтверждение);
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДПредставление.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.АктуальныйЭД");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.ШрифтДиалоговИМеню, , , Истина, Ложь, Ложь, Ложь, ));

	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПодчиненныеЭДСтатусЭД.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоПодчиненныеЭД.ДатаЭДБольшеАктуального");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ДобавитьПрисоединенныйФайлКакВложение(ВыбранноеЗначение);
	ОбновитьОтображениеДанных();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПрисоединенныйФайлКакВложение(ВыбранноеЗначение)
	
	ЗаполнитьПоДокументуОснованию(ВыбранноеЗначение);
	ИзменитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПодчиненныеЭДНаСервере()
	
	ДеревоПодчиненныеЭД.ПолучитьЭлементы().Очистить();
	
	НастройкиОбмена = Неопределено;
	СсылкаНаЭД = Неопределено;
	
	Если Объект.Ссылка.Пустая() Тогда
		НастройкиОбмена = Новый Структура;
		НастройкиОбмена.Вставить("ВидЭД",               Объект.ВидЭД);
		НастройкиОбмена.Вставить("ПрикладнойВидЭД",     Объект.ПрикладнойВидЭД);
		НастройкиОбмена.Вставить("ВидВнутреннегоДокумента", Объект.ВидВнутреннегоДокумента);
		НастройкиОбмена.Вставить("ВерсияРегламентаЭДО", Объект.ВерсияРегламентаЭДО);
		НастройкиОбмена.Вставить("СтатусЭД",            Перечисления.СтатусыЭД.ПустаяСсылка());
		НастройкиОбмена.Вставить("СпособОбменаЭД",      Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском);
		НастройкиОбмена.Вставить("ВерсияФорматаПакета", Неопределено);
		НастройкиОбмена.Вставить("СостояниеЭДО",        Объект.СостояниеЭДО);
		НастройкиОбмена.Вставить("ИспользоватьУПД",     Истина);
		НастройкиОбмена.Вставить("ИспользоватьУКД",     Истина);
		
		НастройкиОбмена.Вставить("ВерсияФормата",       ВерсияФормата);
		НастройкиОбмена.Вставить("ТребуетсяИзвещение",     Истина);
		НастройкиОбмена.Вставить("ТребуетсяПодтверждение", Истина);
		
		Если ЗначениеЗаполнено(НаправлениеЭД) Тогда 
			НастройкиОбмена.Вставить("НаправлениеЭД", НаправлениеЭД);
		ИначеЕсли НастройкиОбмена.ВидЭД = Перечисления.ВидыЭД.Внутренний Тогда
			НастройкиОбмена.Вставить("СпособОбменаЭД", Перечисления.СпособыОбменаЭД.Внутренний);
			НастройкиОбмена.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Внутренний);
			НастройкиОбмена.Вставить("ТребуетсяИзвещение",     Ложь);
			НастройкиОбмена.Вставить("ТребуетсяПодтверждение", Ложь);
		Иначе
			НастройкиОбмена.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);
		КонецЕсли;
		
	Иначе
		СсылкаНаЭД = Объект.Ссылка;
	КонецЕсли;
	
	СоответствиеВладельцевИЭД = Новый Соответствие;
	СоответствиеВладельцевИЭД.Вставить(Объект.Ссылка, СсылкаНаЭД);
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоПодчиненныеЭД");
	
	ОбменСКонтрагентамиСлужебный.СформироватьДеревьяЭД(ДеревоОбъект,СоответствиеВладельцевИЭД, НастройкиОбмена, Ложь);
	
	Если ДеревоОбъект.Строки.Количество() Тогда
		КорневаяСтрокаДерева = ДеревоОбъект.Строки[0];
		Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
			И КорневаяСтрокаДерева.ТипЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД
			И ПараметрыПроизвольногоДокумента = Неопределено Тогда
			КорневаяСтрокаДерева.ИмяРеквизита = "ПрисоединенныйФайл";
		Иначе
			КорневаяСтрокаДерева.ИмяРеквизита = "ТабличныйДокументФайлаОтправителя";
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоПодчиненныеЭД");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтправитьИПолучитьЭДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.КартинкаОбновить.Картинка = БиблиотекаКартинок.Обновить;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	ОбновляемыеКатегории = Новый Массив;
	ОбновляемыеКатегории.Добавить(КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусЭлектронногоДокумента());
	ОбновляемыеКатегории.Добавить(КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусДокументооборота());

	СформироватьКонтекст(ОбновляемыеКатегории);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиНовогоЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		ОбновлениеПослеЗаписиНовогоЭД = Истина;
		ОбновитьДанныеДокумента();
		ОбновлениеПослеЗаписиНовогоЭД = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДокумента()
	
	Основания = МассивДокументовУчета(Объект);
	
	Если Не ЗначениеЗаполнено(ПервичныйДокумент) И ЗначениеЗаполнено(Основания) Тогда 
		ПервичныйДокумент = Основания[0];
	КонецЕсли;
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.Внутренний Тогда
		СсылкаНаЭД = ОбменСКонтрагентамиСлужебный.ВнутреннийДокументОбъектаУчета(
			ПервичныйДокумент, Объект.ВидВнутреннегоДокумента);
	Иначе
		СоответствиеВладельцевИЭД = ОбменСКонтрагентамиСлужебный.ВладельцыИЭлектронныеДокументы(Основания);
		СсылкаНаЭД = СоответствиеВладельцевИЭД.Получить(ПервичныйДокумент);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаЭД) Тогда
		ЗначениеВРеквизитФормы(СсылкаНаЭД.ПолучитьОбъект(), "Объект");
		ЗаполнитьПоСозданномуЭД();
		ЗаполнитьПредставлениеЭД();
	КонецЕсли;
	
	ПроверитьПредупрежденияДокумента();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоСозданномуЭД()
	
	ЗаполнитьДеревоПодчиненныеЭДНаСервере();
	
	СтрокиДерева = ДеревоПодчиненныеЭД.ПолучитьЭлементы();
	Если Параметры.Свойство("ФайлЭлектронногоДокумента", ПрисоединенныйФайлСсылка) Тогда
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Ссылка", ИдентификаторТекущейСтроки, СтрокиДерева, ПрисоединенныйФайлСсылка, Ложь);
		Элементы.ДеревоПодчиненныеЭД.ТекущаяСтрока = ИдентификаторТекущейСтроки;
	Иначе
		ИдентификаторТекущейСтроки = СтрокиДерева[0].ПолучитьИдентификатор();
		ПрисоединенныйФайлСсылка   = СтрокиДерева[0].Ссылка;
	КонецЕсли;
	
	Если Объект.ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД
		И СтрокиДерева[0].Расширение = "xml" Тогда
		ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрокиДерева[0].Ссылка);
		ПараметрыПроизвольногоДокумента = ОбменСКонтрагентамиСлужебный.ПараметрыФайлаПроизвольногоДокумента(ДанныеФайла);
		Если ПараметрыПроизвольногоДокумента <> Неопределено Тогда
			СтрокиДерева[0].ИмяРеквизита = "ТабличныйДокументФайлаОтправителя";
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьИнформациюОДокументе();
	
	Заголовок = ОбменСКонтрагентамиСлужебный.ПолучитьПредставлениеЭД(Объект.Ссылка);
	
	ТекущаяСтрокаДерева = ДеревоПодчиненныеЭД.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Если ОбновлениеПослеЗаписиНовогоЭД Тогда
		СтруктураПараметров = Новый Структура("ДополнительнаяИнформация", СопроводительнаяЗаписка);
		ИзменитьЗначенияРеквизитовНаСервере(ПрисоединенныйФайлСсылка, СтруктураПараметров);
		ТекущаяСтрокаДерева.ДополнительнаяИнформация = СопроводительнаяЗаписка;
	Иначе
		СопроводительнаяЗаписка = ТекущаяСтрокаДерева.ДополнительнаяИнформация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеЭД()
	
	ПоказатьПредставлениеФайлаЭлектронногоДокумента(, Ложь);
	
	ОбменЧерезОператора = ОбменЧерезОператора();
	
	ОформитьКолонкуПодписант = Истина;
	Если ЗначениеЗаполнено(ПрисоединенныйФайлСсылка) Тогда
		СвойстваФайлаЭД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайлСсылка, "НаправлениеЭД");
		Если СвойстваФайлаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани Тогда
			ОформитьКолонкуПодписант = Ложь;
			
			Элементы.ДеревоМаршрутаПодписанияОсновноеЗначение.Заголовок = НСтр("ru = 'Группа / организация'");
			Элементы.ДеревоМаршрутаПодписания.КартинкаСтрок = БиблиотекаКартинок.Реквизит;
		КонецЕсли;
	КонецЕсли;
	ЭлектронноеВзаимодействиеСлужебный.УстановитьУсловноеОформлениеДереваМаршрута(ЭтотОбъект, "ДеревоМаршрутаПодписания",
		ОформитьКолонкуПодписант);
	
	ОбновитьДеревоМаршрутаПодписания();
		
	ЗаполнитьТаблицуЭП();
	ОбновитьСтатусЭД();
	ПерезаполнитьКомментарии();
	
	ИзменитьВидимостьДоступностьНаСервере();
	
	ВывестиДокументыУчета();
	
	// Установка связей параметров выбора для поля "ДоговорКонтрагента".
	ОбменСКонтрагентамиСлужебный.УстановитьСвязиПараметровВыбораДоговорКонтрагента(
		Элементы.Договор, Элементы.Организация.ПутьКДанным, Элементы.Контрагент.ПутьКДанным);
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтправкиДокументаПослеВопросаСохранить(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
		ОткрытьФормуРедактированияНастроекОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияНастроекОтправки()
	
	Описание = Новый ОписаниеОповещения("ПослеНастройкиОтправкиДокумента", ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отправитель"              , Объект.Организация);
	ПараметрыОткрытия.Вставить("Получатель"               , Объект.Контрагент);
	ПараметрыОткрытия.Вставить("ДоговорКонтрагента"       , Объект.ДоговорКонтрагента);
	ПараметрыОткрытия.Вставить("ВидЭД"                    , Объект.ВидЭД);
	ПараметрыОткрытия.Вставить("Формат"                   , ВерсияФормата);
	ПараметрыОткрытия.Вставить("ИдентификаторОтправителя" , Объект.ИдентификаторОрганизации);
	ПараметрыОткрытия.Вставить("ИдентификаторПолучателя"  , Объект.ИдентификаторКонтрагента);
	ПараметрыОткрытия.Вставить("МаршрутПодписания"        , Объект.МаршрутПодписания);
	ПараметрыОткрытия.Вставить("ТребуетсяПодтверждение"   , Объект.ТребуетсяПодтверждение);
	ПараметрыОткрытия.Вставить("ТребуетсяИзвещение"       , Объект.ТребуетсяИзвещение);
	ПараметрыОткрытия.Вставить("НастройкаДокумента"       , Истина);
	ПараметрыОткрытия.Вставить("ВыгружатьДопСведения"     , Объект.ВыгружатьДополнительныеСведения);
	ПараметрыОткрытия.Вставить("ДополнительныеДанные"     , ДополнительныеДанные);
	ПараметрыОткрытия.Вставить("ИспользоватьУПД"          ,
		Объект.ТипЭлементаВерсииЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
	ПараметрыОткрытия.Вставить("ИспользоватьУКД"          ,
		Объект.ТипЭлементаВерсииЭД = ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
	ПараметрыОткрытия.Вставить("ПодтверждениеОбязательно" , Объект.ПодтверждениеОбязательно);
	
	ПараметрыОткрытия.Вставить("ДокументыОснования"    , МассивДокументовУчета(Объект));
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаОбменаСКонтрагентом",
		ПараметрыОткрытия, ЭтотОбъект,,,, Описание, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПослеНастройкиОтправкиДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		
		НастройкиДокумента = Неопределено;
		ПоляКопирования    = "МаршрутПодписания, ТребуетсяПодтверждение, ТребуетсяИзвещение,
			|ИдентификаторКонтрагента, ИдентификаторОрганизации";
		
		Если Результат.Свойство("НастройкиДокумента", НастройкиДокумента) Тогда
			ЗаполнитьЗначенияСвойств(Объект, НастройкиДокумента, ПоляКопирования);
			Записать();
			
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ДокументыУчета = МассивДокументовУчета(Объект);
	КоличествоЗакрыто = 0;
	
	СменитьСтраницуЭД(Элементы, Элементы.СтраницаОжидание);
	
	Элементы.ОсновныеКоманды.Доступность = Ложь;
	ПриСменеСтраницыПанелиЭлектронногоДокумента(ЭтотОбъект);
	
	ОбменСКонтрагентамиСлужебныйВызовСервера.ЗакрытьДокументыПринудительно(ДокументыУчета,
		НСтр("ru = 'Закрыт принудительно при повторном формировании документа.'"), КоличествоЗакрыто);
		
	ВыполняетсяОбновлениеФормата = Истина;
	
	Описание = Новый ОписаниеОповещения("ФормированиеЭДЗавершение", ЭтотОбъект);
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(ДокументыУчета, "Сформировать",
		Результат.ДополнительныеДанные, Неопределено, Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЭДЗавершение(Успех, ДополнительныеПараметры) Экспорт

	Если Успех = Истина Тогда
		ОбновитьДанныеДокумента();
	КонецЕсли;
	
	ВыполняетсяОбновлениеФормата = Ложь;
	Элементы.ОсновныеКоманды.Доступность = Истина;
	СменитьСтраницуЭД(Элементы, Элементы.СтраницаТабличныйДокументФайлаОтправителя);

	ПриСменеСтраницыПанелиЭлектронногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПредупрежденияДокумента()
	
	ТекущиеНастройки = Новый Структура;
	ТекущиеНастройки.Вставить("ВидЭД", Объект.ВидЭД);
	ТекущиеНастройки.Вставить("ВерсияФормата", ВерсияФормата);
	ТекущиеНастройки.Вставить("ИдентификаторКонтрагента", Объект.ИдентификаторКонтрагента);
	
	Предупреждения = ОбменСКонтрагентамиСлужебный.ПредупрежденияПоНастройкеОбменаНаДату(ТекущиеНастройки);
	
	Элементы.ГруппаПредупреждения.Видимость = Предупреждения.Количество() > 0;
	
	ЕстьБлокирующиеОшибки = Ложь;
	Для Каждого ВидПредупреждений Из Предупреждения Цикл
		
		Для Каждого Предупреждение Из ВидПредупреждений.Значение Цикл
			
			Заблокировать = Ложь;
			ОбменСКонтрагентамиСлужебный.ПредставлениеПредупрежденияПоИмени(Предупреждение.Ключ, Предупреждение.Значение, Заблокировать);
			
			Если Заблокировать Тогда
				ЕстьБлокирующиеОшибки = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ЕстьБлокирующиеОшибки Тогда
		Элементы.НастройкиОтправки.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	Иначе
		Элементы.НастройкиОтправки.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодписатьОтправитьЭД()

	МассивЭД = Новый Массив;
	МассивЭД.Добавить(ПрисоединенныйФайлСсылка);
	
	ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(Неопределено, МассивЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПредупреждений(ПодписатьИОтправить = Ложь)

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИдентификаторКонтрагента", Объект.ИдентификаторКонтрагента);
	ПараметрыОткрытия.Вставить("ВидЭД"                   , Объект.ВидЭД);
	ПараметрыОткрытия.Вставить("ВерсияФормата"           , ВерсияФормата);
	ПараметрыОткрытия.Вставить("ПодписатьОтправить"      , ПодписатьИОтправить);
	ПараметрыОткрытия.Вставить("НеОтправлять"            , ПодписатьИОтправить = Неопределено);
	
	Если Объект.ДокументыОснования.Количество() > 1 Тогда 
		ПараметрыОткрытия.Вставить("Документ"               , Объект.ДокументыОснования[0].ДокументОснование);
	КонецЕсли;
	
	ОписаниеЗакрытия = Новый ОписаниеОповещения("ПослеПросмотраПредупреждений", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПроблемыПриФормированииДокументов", ПараметрыОткрытия,
		ЭтотОбъект,,,, ОписаниеЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПросмотраПредупреждений(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ВыполнитьПодписатьОтправитьЭД();
	Иначе
		ИзменитьДоступностьКнопокПодписания(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияНастроекОбмена(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ПриИзмененииКлючевыхРеквизитов();
		Записать();
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьМаршрутыНаСервере(ПрисоединенныйФайлСсылка, Маршрут)
	
	НачатьТранзакцию();
	Попытка
		
		БлокировкаДанных        = Новый БлокировкаДанных;
		ЭлементБлокировки       = БлокировкаДанных.Добавить("Справочник.ЭДПрисоединенныеФайлы");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных. Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПрисоединенныйФайлСсылка);
		БлокировкаДанных.Заблокировать();
		
		ЭлектронноеВзаимодействиеСлужебный.ОчиститьМаршрутПодписания(ПрисоединенныйФайлСсылка);
		ЭлектронноеВзаимодействиеСлужебный.СформироватьМаршрутПодписанияЭД(ПрисоединенныйФайлСсылка, Маршрут);
		
		ЭД = ПрисоединенныйФайлСсылка.ПолучитьОбъект();
		ОбменСКонтрагентамиСлужебный.ВыполнитьДействияСМаршрутамиПриОтправкеНаПодпись(ЭД);
		ЭД.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Информация = ИнформацияОбОшибке();
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Обновление маршрута подписания ЭД'"),
			ПодробноеПредставлениеОшибки(Информация), НСтр("ru = 'Не удалось обновить маршрут подписания документа'"),,
			ПрисоединенныйФайлСсылка);
		
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ПереместитьКнопкуОтправитьПовторно(ВОсновныеКоманды) 
	
	Если ВОсновныеКоманды Тогда
		НовыйРодитель = Элементы.ОсновныеКоманды;
		Если НовыйРодитель.ПодчиненныеЭлементы.Количество() = 0 Тогда
			НовоеМестоРасположения = Неопределено;
		Иначе 
			НовоеМестоРасположения = НовыйРодитель.ПодчиненныеЭлементы[0];
		КонецЕсли;
	Иначе 
		НовыйРодитель = Элементы.ГруппаКомандЕще;
		НовоеМестоРасположения = Элементы.ГруппаКомандТехнологические;
	КонецЕсли;

	Если Элементы.КомандаОтправитьПовторно.Родитель = НовыйРодитель Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Переместить(Элементы.КомандаОтправитьПовторно, НовыйРодитель, НовоеМестоРасположения);
	
КонецПроцедуры

#Область МобильныйКлиент

&НаКлиенте
Процедура СделатьВсеКомандыНедоступнымиНаМобильномКлиенте()
	
	#Если МобильныйКлиент Тогда
		МассивКоманд = КомандыМобильногоКлиента();
		Для каждого ЭлементКоллекции Из МассивКоманд Цикл
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементКоллекции, "Доступность", Ложь);
		КонецЦикла;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура ОформитьИнтерфейсДляМобильногоКлиентаНаСервере()

	ПараметрыПредставления = ОбменСКонтрагентамиСлужебный.ПараметрыФормированияПредставленияЭДДляМК();
	ЗаполнитьЗначенияСвойств(ПараметрыПредставления, Объект);
	Заголовок = ОбменСКонтрагентамиСлужебный.ПредставлениеЭДМК(ПараметрыПредставления);
	КоманднаяПанель.Видимость = Истина;
	
	ВидимыеЭлементы = "ГруппаШапки, ГруппаСостояниеЭД, ГруппаСостояние, СостояниеЭД, СостояниеТекст, КартинкаОбновить,
		|ГруппаДанныеДокументов, СтраницыФормы, СтраницаТабличныйДокумент, СтраницыЭД, СтраницаПодписиИСтатусы, ГруппаЭП,
		|ТаблицаЭП, ЭПКомуВыданСертификат, ЭПДатаПодписи, СтраницаСопроводительнаяЗаписка, ПосмотретьЭДМК, ГруппаМК";
	
	ОбменСКонтрагентамиСлужебный.УстановитьВидимостьЭлементов(Элементы, ВидимыеЭлементы);
	
	ОбменСКонтрагентамиСлужебный.УстановитьВидимостьРекурсивно(Элементы, "СтраницаДанныеДокументаМК");
	ОбменСКонтрагентамиСлужебный.УстановитьВидимостьРекурсивно(Элементы, "ТаблицаЭПСтатусИКартинка");
	
	Элементы.СтраницыЭД.ТекущаяСтраница = Элементы.СтраницаДанныеДокументаМК;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаТабличныйДокумент", "Заголовок", НСтр("ru = 'Данные документа'"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаПодписиИСтатусы", "Заголовок", НСтр("ru = 'Подписи'"));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаОтклонить", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Центр);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаОтклонить", "РастягиватьПоГоризонтали", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаАннулировать", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Центр);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаАннулировать", "РастягиватьПоГоризонтали", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаОтклонитьАннулирование", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Центр);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаОтклонитьАннулирование", "РастягиватьПоГоризонтали", Истина);

	ВыделитьКоманду("КомандаПодписатьОтправить");
	ВыделитьКоманду("КомандаПодписать");
	ВыделитьКоманду("КомандаОтправить");
	ВыделитьКоманду("КомандаУтвердить");
	ВыделитьКоманду("КомандаПринятьАннулирование");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаЗавершить", "Видимость", Ложь);
	
	ЗаголовокКнопки = НСтр("ru = 'Подписать
								|и отправить'");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаПодписатьОтправить", "Заголовок", ЗаголовокКнопки);
	
	ЗаголовокСогласитьсяСАннулированием = НСтр("ru = 'Аннулировать'");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "КомандаПринятьАннулирование", "Заголовок", ЗаголовокСогласитьсяСАннулированием);
	
	ОбменСКонтрагентамиСлужебный.ПереместитьЭлемент(Элементы, "КомандаОтклонить", "ГруппаМК");
	ОбменСКонтрагентамиСлужебный.ПереместитьЭлемент(Элементы, "КомандаАннулировать", "ГруппаМК");
	ОбменСКонтрагентамиСлужебный.ПереместитьЭлемент(Элементы, "КомандаОтклонитьАннулирование", "ГруппаМК");
	
	Если ПустаяСтрока(СопроводительнаяЗаписка) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияОтсутствуетМК", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбъектДополнительнаяИнформация", "Видимость", Истина);
	КонецЕсли;
	
	ЗаголовокСтраницаСопроводительнаяЗаписка = НСтр("ru = 'Сопр. записка'");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "СтраницаСопроводительнаяЗаписка", "Заголовок", ЗаголовокСтраницаСопроводительнаяЗаписка);
	
	ОбновитьВидимостьКомандПоГруппам()
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьКоманду(ИмяКоманды)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяКоманды, "Шрифт", ШрифтыСтиля.КрупныйШрифтТекста);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяКоманды, "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Центр);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяКоманды, "РастягиватьПоГоризонтали", Истина);
	ОбменСКонтрагентамиСлужебный.ПереместитьЭлемент(Элементы, ИмяКоманды, "ГруппаМК", "ДекорацияОтступ");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДвоичныеДанныеФайла(Знач ПрисоединенныйФайл)
	
	Возврат РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл);
	
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьКомандПоГруппам()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаПринятьАннулирование", "Видимость", Элементы.ГруппаКомандАннулирование.Видимость);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаОтклонитьАннулирование", "Видимость", Элементы.ГруппаКомандАннулирование.Видимость);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КомандыМобильногоКлиента()
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить("КомандаПодписатьОтправить");
	МассивВозврата.Добавить("КомандаПодписать");
	МассивВозврата.Добавить("КомандаОтправить");
	МассивВозврата.Добавить("КомандаУтвердить");
	МассивВозврата.Добавить("КомандаПринятьАннулирование");
	МассивВозврата.Добавить("КомандаОтклонитьАннулирование");
	МассивВозврата.Добавить("КомандаОтклонить");
	МассивВозврата.Добавить("КомандаАннулировать");
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Процедура ВосстановитьДоступностьКоманд()
	
	МассивКоманд = КомандыМобильногоКлиента();
	Для каждого ЭлементКоллекции Из МассивКоманд Цикл
		ЭлементФормы = Элементы.Найти(ЭлементКоллекции);
		Если ЭлементФормы <> Неопределено И ЭлементФормы.Видимость Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементКоллекции, "Доступность", Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонтекстныеПодсказки

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;

	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусЭлектронногоДокумента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда
		Значение =  КонтекстныеПодсказкиБЭДКатегоризация.ЗначениеСтатусаЭД(ПрисоединенныйФайлСсылка); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусДокументооборота();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ЗначениеСостоянияВерсииЭД(Объект.СостояниеЭДО); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;  
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_ВидЭлектронногоДокумента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ЗначениеВидаЭД(Объект.ВидЭД); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли; 
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораКонтрагента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораКонтрагента(Объект.Контрагент); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораУчетнойЗаписиОрганизации(Объект.Организация); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СуществуютНеверныеПодписиФайла();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.СуществуютНеверныеПодписиФайла(ПрисоединенныйФайлСсылка); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти  

#КонецОбласти
