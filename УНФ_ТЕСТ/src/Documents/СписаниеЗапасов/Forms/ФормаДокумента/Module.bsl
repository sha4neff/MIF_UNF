
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект,
		"ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ИнвентаризацияЗапасов") Тогда
		
		Запрос = Новый Запрос( 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет КАК Количество
		|ИЗ
		|	Документ.ИнвентаризацияЗапасов.Запасы КАК ИнвентаризацияЗапасов
		|ГДЕ
		|	ИнвентаризацияЗапасов.Ссылка = &ДокументОснование
		|	И ИнвентаризацияЗапасов.Количество - ИнвентаризацияЗапасов.КоличествоУчет < 0");
		
		Запрос.УстановитьПараметр("ДокументОснование", Параметры.Основание);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			НеОткрыватьФорму = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	
	ОбновитьРеквизитыВидимостиФормы();

	ИменаТЧ = Новый Массив;
	ИменаТЧ.Добавить(Новый Структура("ИмяПоляПроверки, ИмяПоляОформления", "Объект.Запасы.СтранаПроисхождения", "ЗапасыНомерГТД"));
	
	ГрузовыеТаможенныеДекларацииСервер.ПриСозданииНаСервере(ЭтаФорма, ИменаТЧ, КэшЗначений);
	
	// ЕГАИС
	УстановитьДоступностьЭлементовЕГАИС();
	// Конец ЕГАИС
	
	// Установка способа выбора структурной единицы в зависимости от ФО.
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
		И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
		
		Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка = Истина;
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
		Элементы.СтруктурнаяЕдиница.СписокВыбора.Добавить(Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		
	КонецЕсли;
	
	// Установить надписи счет-фактура и основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	СписокЭлектронныхВесов = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ЭлектронныеВесы", , МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Если СписокЭлектронныхВесов.Количество() = 0 Тогда
		// Нет подключенных весов.
		Элементы.ЗапасыПолучитьВес.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗапасыЗагрузитьДанныеИзТСД.Видимость = ИспользоватьПодключаемоеОборудование;
	// Конец ПодключаемоеОборудование
	
	// КопированиеСтрокТабличныхЧастей
	КопированиеТабличнойЧастиСервер.ПриСозданииНаСевере(Элементы, "Запасы");
	
	// Серийные номера
	ИспользоватьСерийныеНомераОстатки = РаботаССерийнымиНомерами.ИспользоватьСерийныеНомераОстатки();
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	ШтрихкодированиеИС.ИнициализироватьКэшМаркируемойПродукции(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	// Характеристики
	НоменклатураВДокументахСервер.ОбновитьУсловноеОформлениеТабличнойЧастиДляХарактеристик(ЭтаФорма);
	Если Параметры.Ключ.Пустая()
		Тогда
		НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект, Истина)
	КонецЕсли;
	
	НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "СписаниеЗапасов", НастройкиФормыВыбораНоменклатуры);
	НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
	
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
	ИспользоватьНовуюФормуПодбораНоменклатуры = Константы.ИспользоватьНовуюФормуПодбораНоменклатуры.Получить();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменений
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменений
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец ИнтеграцияГосИС
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
	
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПриОткрытии.
//
&НаКлиенте

Процедура ПриОткрытии(Отказ)
	
	Если НеОткрыватьФорму Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УправлениеФормой(Истина);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события ПриЗакрытии.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// ЕГАИС
	УстановитьДоступностьЭлементовЕГАИС();
	// Конец ЕГАИС
	
	// ИнтеграцияГИСМ
	СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
	// Конец ИнтеграцияГИСМ
	
	// ИнтеграцияГосИС
	СобытияФормИС.ПослеЗаписиНаСервере(ЭтаФорма);
	// Конец ИнтеграцияГосИС
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПодборПроизведен" 
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		АдресЗапасовВХранилище	= Параметр;
		
		ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, "Запасы", Истина, Истина);
		
	ИначеЕсли ИмяСобытия = "ПодборСерий"
		И ЗначениеЗаполнено(Параметр) 
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ПолучитьСерийныеНомераИзХранилища(Параметр.АдресВоВременномХранилище, Параметр.КлючСтроки);
		
	КонецЕсли;
	
	Если ИмяСобытия = "СменитьФормуПобора"
		И ТипЗнч(Параметр) = Тип("Булево")
		// Проверка на владельца формы
		И Источник <> Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000")
		И Источник = УникальныйИдентификатор
		Тогда
		
		ИспользоватьНовуюФормуПодбораНоменклатуры = Параметр;
		Подбор(Неопределено);
		
	КонецЕсли;
	
	// КопированиеСтрокТабличныхЧастей
	Если ИмяСобытия = "БуферОбменаТабличнаяЧастьКопированиеСтрок" Тогда
		КопированиеТабличнойЧастиКлиент.ОбработкаОповещения(Элементы, "Запасы");
	КонецЕсли;
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// ИнтеграцияГИСМ
	Если ИмяСобытия = "Запись_УведомлениеОСписанииКиЗГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияГИСМ"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменГИСМ"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусГИСМФормахВДокументах)) Тогда
		
		СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер();
		
	КонецЕсли;
	// Конец ИнтеграцияГИСМ

	// ИнтеграцияГосИС
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КэшированныеЗначения",    Неопределено);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка",    Истина);
	ДополнительныеПараметры.Вставить("ТребуетсяСерверныйВызов", Ложь);
	СобытияФормИСКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник, ДополнительныеПараметры);
	// Конец ИнтеграцияГосИС

КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении(Объект.Организация);
	Компания = СтруктураДанные.Компания;
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СтруктурнаяЕдиница.
&НаКлиенте
Процедура СтруктурнаяЕдиницаПриИзменении(Элемент)
	
	ОбновитьРеквизитыВидимостиФормы();
	УправлениеФормой();
	
	ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита();
	
КонецПроцедуры // СтруктурнаяЕдиницаПриИзменении()

// Процедура - обработчик события Открытие поля СтруктурнаяЕдиница.
//
&НаКлиенте
Процедура СтруктурнаяЕдиницаОткрытие(Элемент, СтандартнаяОбработка)
	
	Если Элементы.СтруктурнаяЕдиница.РежимВыбораИзСписка
		И НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // СтруктурнаяЕдиницаОткрытие()

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыЗапасы

// Процедура - обработчик события ПриИзменении поля ввода Номенклатура.
//
&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация",		Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",	СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",	СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",			СтрокаТабличнойЧасти.Партия);
	
	СтатусПартии = Новый СписокЗначений;
	СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
	
	СтруктураДанные.Вставить("СтатусПартии", СтатусПартии);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	СтрокаТабличнойЧасти.Количество = 1;
	
	СтрокаТабличнойЧасти.НеобходимостьВводаСправкиНаАлкоголь = СтруктураДанные.ЭтоАлкогольнаяПродукция;
	
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,
			ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;
	
	// Характеристики
	СтрокаТабличнойЧасти.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
	СтрокаТабличнойЧасти.ЗаполнениеХарактеристикиПроверено = Истина;
	
	Если СтруктураДанные.ИспользоватьХарактеристики Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Характеристика = СтруктураВыбораНоменклатуры.Характеристика;
			СтруктураВыбораНоменклатуры.Характеристика = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
	КонецЕсли;
	// Конец Характеристики
	
	//Партии
	СтрокаТабличнойЧасти.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
	СтрокаТабличнойЧасти.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
	
	Если СтруктураДанные.ИспользоватьПартии Тогда
		Если ПодборНоменклатурыИзСписка И ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтрокаТабличнойЧасти.Партия = СтруктураВыбораНоменклатуры.Партия;
			СтруктураВыбораНоменклатуры.Партия = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.Партия = СтруктураДанные.Партия;
		КонецЕсли;
	КонецЕсли;
	// Конец Партии
	
	ПодборНоменклатурыИзСписка = Ложь;
	
КонецПроцедуры // ЗапасыНоменклатураПриИзменении()

&НаКлиенте
Процедура ЗапасыХарактеристикаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",			Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПартияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("Организация",			Объект.Организация);
	СтруктураДанные.Вставить("Номенклатура",		СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные.Вставить("Характеристика",		СтрокаТабличнойЧасти.Характеристика);
	СтруктураДанные.Вставить("Партия",				СтрокаТабличнойЧасти.Партия);
	СтруктураДанные.Вставить("СтранаПроисхождения",	СтрокаТабличнойЧасти.СтранаПроисхождения);
	
	СтруктураДанные = ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
	СтрокаТабличнойЧасти.НомерГТД = СтруктураДанные.НомерГТД;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		
		Если ВыбранноеЗначение.Свойство("СтруктураНастроек") Тогда
			НоменклатураВДокументахКлиентСервер.ЗаполнитьТаблицуНастроекФормыВыбораНоменклатуры(ЭтаФорма, "СписаниеЗапасов", НастройкиФормыВыбораНоменклатуры, Истина, "Запасы", ВыбранноеЗначение.СтруктураНастроек);
			НоменклатураВДокументахКлиентСервер.ОбновитьПараметрыОткрытияФормыВыбора(ЭтаФорма, "Запасы");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ПодборНоменклатурыИзСписка = ВыбранноеЗначение.Свойство("Ячейка");
		
		Если НЕ ТипЗнч(СтруктураВыбораНоменклатуры) = Тип("Структура") Тогда
			СтруктураВыбораНоменклатуры = Новый Структура("Характеристика, Партия");
		КонецЕсли;
		
		СтруктураВыбораНоменклатуры.Характеристика = ВыбранноеЗначение.Характеристика;
		СтруктураВыбораНоменклатуры.Партия = ВыбранноеЗначение.Партия;
		
		ВыбранноеЗначение = ВыбранноеЗначение.Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Элемент.ТекущиеДанные.СерийныеНомера = "";
	КонецЕсли;	
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗапасыСерийныеНомера" Тогда
		ОткрытьПодборСерийныеНомера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыПередУдалением(Элемент, Отказ)
	
	// Серийные номера
	Для каждого ВыделеннаяСтрока Из Элементы.Запасы.ВыделенныеСтроки Цикл
		ТекущиеДанныеСтроки = Элементы.Запасы.ДанныеСтроки(ВыделеннаяСтрока);
		РаботаССерийнымиНомерамиКлиентСервер.УдалитьСерийныеНомераПоКлючуСвязи(Объект.СерийныеНомера, ТекущиеДанныеСтроки,
			ИспользоватьСерийныеНомераОстатки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗапасыКоличествоПриИзменении(Элемент)
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки<>Неопределено Тогда
		РаботаССерийнымиНомерамиКлиентСервер.ОбновитьСерийныеНомераКоличество(Объект, Элементы.Запасы.ТекущиеДанные);
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовПодвалаФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		// Выбрать основание
		СтруктураПараметровОтбора = Новый Структура();
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.ИнвентаризацияЗапасов.ФормаВыбора", СтруктураПараметровОтбора, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура РежимГТД(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "РежимГТД", "Пометка", НЕ Элементы.РежимГТД.Пометка);
	
	ИзменитьРежимРаботаГТД(Элементы.РежимГТД.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДЗаполнитьПоФактическимОстаткам(Команда)
	
	НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомераГТДПодобрать(Команда)
	
	НомераГТДПодобратьНаСервере(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Ответ = Результат;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьПоДокументу();		
    КонецЕсли;

КонецПроцедуры  // ЗаполнитьВыполнить()

// ЕГАИС
&НаКлиенте
Процедура ОповещениеПередачаДанныхВЕГАИС(ДанныеОтЕГАИС, ДополнительныеПараметры) Экспорт
	
	Если НЕ ДанныеОтЕГАИС = Неопределено Тогда
		Если НЕ ДанныеОтЕГАИС.Результат Тогда
			СтрокаСообщения = НСтр("ru = 'Ошибка передачи данных в ЕГАИС'") 
				+ Символы.ПС + ДанныеОтЕГАИС.ОписаниеОшибки;
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		Иначе
			Объект.ПереданВЕГАИС = Истина;
			Модифицированность = Истина;
		КонецЕсли;
		
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		
		УстановитьДоступностьЭлементовЕГАИС();
	КонецЕсли;
	
КонецПроцедуры
// Конец ЕГАИС

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_СписаниеЗапасов"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область ИнтеграцияИС

// ИнтеграцияИС

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеИнтеграцииИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект, Объект, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры
// Конец ИнтеграцияИС

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВключитьРежимРаботаГТД()
	
	НеизменяемыеРеквизиты = Новый Массив;
	НеизменяемыеРеквизиты.Добавить("ЗапасыПометка");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерСтроки");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНоменклатура");
	НеизменяемыеРеквизиты.Добавить("ЗапасыХарактеристика");
	НеизменяемыеРеквизиты.Добавить("ЗапасыПартия");
	НеизменяемыеРеквизиты.Добавить("ЗапасыКоличество");
	НеизменяемыеРеквизиты.Добавить("ЗапасыЕдиницаИзмерения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыСтранаПроисхождения");
	НеизменяемыеРеквизиты.Добавить("ЗапасыНомерГТД");
	
	Для каждого ЭлементФормы Из Элементы.Запасы.ПодчиненныеЭлементы Цикл
		
		Если НеизменяемыеРеквизиты.Найти(ЭлементФормы.Имя) = Неопределено
			И ЭлементФормы.Видимость = Истина Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ЭлементФормы.Имя, "Видимость", Ложь);
			КэшЗначений.ОбрабатываемыеРеквизиты.Добавить(ЭлементФормы.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыключитьРежимРаботаГТД()
	
	Для каждого ИмяЭлементаФормы Из КэшЗначений.ОбрабатываемыеРеквизиты Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлементаФормы, "Видимость", Истина);
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗапасыЕдиницаИзмерения", "Доступность", Истина);
	
	КэшЗначений.ОбрабатываемыеРеквизиты = Новый Массив;
	
КонецПроцедуры

&НаКлиенте 
Процедура ИзменитьРежимРаботаГТД(ВключитьРежимГТД)
	
	Если НЕ КэшЗначений.Свойство("ОбрабатываемыеРеквизиты") Тогда
		
		КэшЗначений.Вставить("ОбрабатываемыеРеквизиты", Новый Массив);
		
	КонецЕсли;
	
	Если ВключитьРежимГТД Тогда
		
		ВключитьРежимРаботаГТД();
		
	Иначе
		
		ВыключитьРежимРаботаГТД();
		
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДатаПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДатаПриИзменении(ДокументСсылка, ДатаНовая, ДатаПередИзменением)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("РазностьДат", УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(ДокументСсылка, ДатаНовая, ДатаПередИзменением));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеОрганизацияПриИзменении(Организация)
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	СтруктураДанные.Вставить("ЭтоАлкогольнаяПродукция", СтруктураДанные.Номенклатура.АлкогольнаяПродукция);
	// Наборы
	СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		
		Если СтруктураДанные.Свойство("СтатусПартии")
			Тогда
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтруктураДанные.СтатусПартии);
		Иначе
			Если Не СтруктураДанные.Свойство("ВидОперации")
				Тогда
				ВидОперации = Неопределено
			Иначе
				ВидОперации = СтруктураДанные.ВидОперации
			КонецЕсли;
			
			СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОпреацииИлиХозОперацииСтатусуПартии(, ВидОперации);
			ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		КонецЕсли;
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
		
	КонецЕсли;
	// Конец Партии
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу()
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(Объект.ДокументОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервереБезКонтекста
Функция ПолучитьДанныеХарактеристикаПриИзменении(СтруктураДанные)
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.СтранаПроисхождения) Тогда
		
		СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
		
	КонецЕсли;
	
	СтруктураДанные.Вставить("НомерГТД", Неопределено);
	
	ГрузовыеТаможенныеДекларацииСервер.АвтоматическийПодборВРеализацииНомераГТД(СтруктураДанные);
	
	Возврат СтруктураДанные;
	
КонецФункции

// ПодключаемоеОборудование
// Процедура получает данные по штрихкодам.
//
&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				СтруктураДанныеНоменклатуры = Новый Структура();
				СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
				СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
				СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из Метаданные.Документы.СписаниеЗапасов.ТабличныеЧасти.Запасы.Реквизиты.Номенклатура.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
			    МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Организация", Объект.Организация);
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные", СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено 
			ИЛИ ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода[0].СтруктураДанныеНоменклатуры.ЭтоНабор));
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				НоваяСтрока = Объект.Запасы.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
				ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
				
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
			Иначе
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
			Если ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
				РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, Объект);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено ИЛИ ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры,ЭтоНабор", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор));
	Иначе
		МассивСтрокТЧ = Объект.Запасы.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,ЕдиницаИзмерения",ДанныеШтрихкода.Номенклатура,ДанныеШтрихкода.Характеристика,ДанныеШтрихкода.ЕдиницаИзмерения));
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			НоваяСтрока = Объект.Запасы.Добавить();
			НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
			НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
			НоваяСтрока.Партия = ДанныеШтрихкода.Партия;
			НоваяСтрока.Количество = ТекШтрихкод.Количество;
			НоваяСтрока.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
			
			ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("СтранаПроисхождения", НоваяСтрока.СтранаПроисхождения);
			ДанныеШтрихкода.СтруктураДанныеНоменклатуры.Свойство("НомерГТД", НоваяСтрока.НомерГТД);
			
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
			
		Иначе
			НоваяСтрока = МассивСтрокТЧ[0];
			НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
			Элементы.Запасы.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		КонецЕсли;
		
		Если ДанныеШтрихкода.Свойство("СерийныйНомер") И ЗначениеЗаполнено(ДанныеШтрихкода.СерийныйНомер) Тогда
			РаботаССерийнымиНомерамиКлиентСервер.ДобавитьСерийныйНомерВСтроку(НоваяСтрока, ДанныеШтрихкода.СерийныйНомер, Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

// Процедура обрабатывает полученные штрихкоды.
//
&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды", НеизвестныеШтрихкоды), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
	ЗаполнитьПризнакиИспользованияХарактеристик();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиИспользованияХарактеристик()
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		Если ТекНекорректныйШтрихкод.Свойство("ЭтоНабор") И ТекНекорректныйШтрихкод.ЭтоНабор Тогда
			// Наборы
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", НСтр("ru = 'Набор'"));
		Иначе
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		КонецЕсли; 
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры
// Конец ПодключаемоеОборудование

&НаСервере
Процедура ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита()
	НоменклатураВДокументахСервер.ОбновитьНастройкиФормыВыбораНоменклатурыПриИзмененииРеквизита(ЭтотОбъект,
		"СписаниеЗапасов", "Запасы", НастройкиФормыВыбораНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура НомераГТДЗаполнитьПоФактическимОстаткамНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("ОстаткиПоГТД", Неопределено);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("Ссылка", Объект.Ссылка);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("ИндексТекущейСтроки", ?(ЗначениеЗаполнено(Элементы.Запасы.ТекущаяСтрока), Объект.Запасы.Индекс(Объект.Запасы.НайтиПоИдентификатору(Элементы.Запасы.ТекущаяСтрока)), 0));
	ПараметрыПодбора.Вставить("ЕстьКлючСвязиАвтоматическихСкидок", Неопределено);
		
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	МассивИменПолей = Новый Массив;
	
	ПараметрыПодбора.Вставить("ИменаПолей", МассивИменПолей);
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.СформироватьОстаткиНомеровГТД(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиОстаткиНомеровГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
	Если ПараметрыПодбора.ИндексТекущейСтроки <> -1 Тогда
		
		СтрокаКоллекции = Объект.Запасы.Получить(ПараметрыПодбора.ИндексТекущейСтроки);
		Элементы.Запасы.ТекущаяСтрока = СтрокаКоллекции.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НомераГТДПодобратьНаСервере(ЭтоКонтекстныйВызов)
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ТаблицаЗапасы", Неопределено);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	
	Если НЕ ЭтоКонтекстныйВызов Тогда
		
		ПараметрыПодбора.Вставить("ПроверятьПометку", Истина);
		
	КонецЕсли;
	
	ГрузовыеТаможенныеДекларацииСервер.ПодготовитьТаблицуЗапасовИзТаблицыФормы(ПараметрыПодбора, Объект.Запасы);
	ГрузовыеТаможенныеДекларацииСервер.ПодобратьНомераГТДПоПредыдущимПоступлениям(ПараметрыПодбора);
	ГрузовыеТаможенныеДекларацииСервер.ПеренестиНомераГТДВТаблицуФормы(Объект.Запасы, ПараметрыПодбора);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область КопированиеСтрокТабличныхЧастей

// Процедура - обработчик нажатия кнопки Копировать строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыКопироватьСтроки(Команда)
	
	КопироватьСтроки("Запасы");
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Вставить строки в ТЧ Запасы.
//
&НаКлиенте
Процедура ЗапасыВставитьСтроки(Команда)
	
	ВставитьСтроки("Запасы");
	
КонецПроцедуры

// Вызывает процедуру копирования строк и оповещает пользователя о количестве скопированных.
//
&НаКлиенте
Процедура КопироватьСтроки(ИмяТЧ)
	
	Если КопированиеТабличнойЧастиКлиент.МожноКопироватьСтроки(Объект[ИмяТЧ], Элементы[ИмяТЧ].ТекущиеДанные) Тогда
		КоличествоСкопированных = 0;
		КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных);
		КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОКопированииСтрок(КоличествоСкопированных);
	КонецЕсли;
	
КонецПроцедуры

// Вызывает процедуру вставки строк и оповещает пользователя о количетсве вставленных.
//
&НаКлиенте
Процедура ВставитьСтроки(ИмяТЧ)
	
	КоличествоСкопированных = 0;
	КоличествоВставленных = 0;
	ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных);
	КопированиеТабличнойЧастиКлиент.ОповеститьПользователяОВставкеСтрок(КоличествоСкопированных, КоличествоВставленных);
	
КонецПроцедуры

// Выполняет копирование выделенных строк в буфер обмена.
//
&НаСервере
Процедура КопироватьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных)
	
	КопированиеТабличнойЧастиСервер.Копировать(Объект[ИмяТЧ], Элементы[ИмяТЧ].ВыделенныеСтроки, КоличествоСкопированных);
	
КонецПроцедуры

// Вставляет скопированные строки из буфера обмена в выбранную табличную часть.
//
&НаСервере
Процедура ВставитьСтрокиНаСервере(ИмяТЧ, КоличествоСкопированных, КоличествоВставленных)
	
	КопированиеТабличнойЧастиСервер.Вставить(Объект, ИмяТЧ, Элементы, КоличествоСкопированных, КоличествоВставленных);
	ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных);
	
	НоменклатураВДокументахСервер.ЗаполнитьПризнакиИспользованияХарактеристик(Объект);
	
КонецПроцедуры

// Обрабатывает вставленные строки.
//
&НаСервере
Процедура ОбработатьВставленныеСтрокиНаСервере(ИмяТЧ, КоличествоВставленных)
	
	Количество = Объект[ИмяТЧ].Количество();
	
	Для Итератор = 1 По КоличествоВставленных Цикл
		
		Строка = Объект[ИмяТЧ][Количество - Итератор];
		
		СтруктураДанные = Новый Структура;
		СтруктураДанные.Вставить("Номенклатура", Строка.Номенклатура);
		СтруктураДанные.Вставить("Организация", Объект.Организация);
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПодбором

// Процедура - обработчик события Действие команды Подбор
//
&НаКлиенте
Процедура Подбор(Команда)
	
	ИмяТабличнойЧасти 	= "Запасы";
	
	Если ИспользоватьНовуюФормуПодбораНоменклатуры Тогда
		ПодборНоменклатурыВДокументахКлиент.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ИмяТабличнойЧасти);
		Возврат;
	КонецЕсли;
	
	ПараметрыПодбора = Новый Структура;
	
	ПараметрыПодбора.Вставить("Период", 				Объект.Дата);
	ПараметрыПодбора.Вставить("Организация", 			Компания);
	
	ПараметрыПодбора.Вставить("СтруктурнаяЕдиница", 	Объект.СтруктурнаяЕдиница);
	
	ТипНоменклатуры = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Номенклатура"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					ТипНоменклатуры.Добавить(ЭлементФиксМассива);
				КонецЦикла; 
			Иначе
				ТипНоменклатуры.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПараметрыПодбора.Вставить("ТипНоменклатуры", ТипНоменклатуры);
	// Наборы
	ПараметрыПодбора.Вставить("ЭтоНабор", Ложь);
	
	СтатусПартии = Новый СписокЗначений;
	Для каждого ЭлементМассива Из Элементы[ИмяТабличнойЧасти + "Партия"].ПараметрыВыбора Цикл
		Если ЭлементМассива.Имя = "Отбор.Статус" Тогда
			Если ТипЗнч(ЭлементМассива.Значение) = Тип("ФиксированныйМассив") Тогда
				Для каждого ЭлементФиксМассива Из ЭлементМассива.Значение Цикл
					СтатусПартии.Добавить(ЭлементФиксМассива);
				КонецЦикла;
			Иначе
				СтатусПартии.Добавить(ЭлементМассива.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПодбора.Вставить("СтатусПартии", СтатусПартии);
	
	ПараметрыПодбора.Вставить("УникальныйИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбора", ПараметрыПодбора, ЭтотОбъект);
	
КонецПроцедуры // ПодборВыполнить()

// Функция получает список товаров из временного хранилища
//
&НаСервере
Процедура ПолучитьЗапасыИзХранилища(АдресЗапасовВХранилище, ИмяТабличнойЧасти, ЕстьХарактеристики, ЕстьПартии)
	
	ТаблицаДляЗагрузки = ПолучитьИзВременногоХранилища(АдресЗапасовВХранилище);
	
	Для каждого СтрокаЗагрузки Из ТаблицаДляЗагрузки Цикл
		
		НоваяСтрока = Объект[ИмяТабличнойЧасти].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗагрузки);
		
		// Характеристики
		СтруктураДанныеНоменклатуры = Новый Структура();
		СтруктураДанныеНоменклатуры.Вставить("Организация", Объект.Организация);
		СтруктураДанныеНоменклатуры.Вставить("Номенклатура", СтрокаЗагрузки.Номенклатура);
		СтруктураДанныеНоменклатуры.Вставить("Характеристика", СтрокаЗагрузки.Характеристика);
		
		Если ИмяТабличнойЧасти = "Запасы"
			Тогда
			СтатусПартии = Новый СписокЗначений;
			СтатусПартии.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПартий.СобственныеЗапасы"));
			
			СтруктураДанныеНоменклатуры.Вставить("СтатусПартии", СтатусПартии);
		КонецЕсли;
		
		СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры);
		
		НоваяСтрока.ИспользоватьХарактеристики = СтруктураДанные.ИспользоватьХарактеристики;
		НоваяСтрока.ПроверятьЗаполнениеХарактеристики = СтруктураДанные.ПроверятьЗаполнениеХарактеристики;
		НоваяСтрока.ЗаполнениеХарактеристикиПроверено = Истина;
		
		Если СтруктураДанные.ИспользоватьХарактеристики
			Тогда
			НоваяСтрока.Характеристика = СтруктураДанные.Характеристика;
		КонецЕсли;
		// Конец Характеристики
		
		//Партии
		НоваяСтрока.ИспользоватьПартии = СтруктураДанные.ИспользоватьПартии;
		НоваяСтрока.ПроверятьЗаполнениеПартий = СтруктураДанные.ПроверятьЗаполнениеПартий;
		
		НоваяСтрока.Партия = ?(ЗначениеЗаполнено(СтрокаЗагрузки.Партия), СтрокаЗагрузки.Партия, СтруктураДанные.Партия);
		// Конец Партии
		
		НоваяСтрока.СтранаПроисхождения = СтруктураДанные.СтранаПроисхождения;
		НоваяСтрока.НомерГТД = СтруктураДанные.НомерГТД;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьЗапасыИзХранилища()

// ПодключаемоеОборудование
// Процедура - обработчик команды командной панели табличной части.
//
&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);
	
	Если УправлениеНебольшойФирмойСервер.ЭтоМобильныйКлиент() Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры // ПоискПоШтрихкоду()

// Процедура - обработчик события Действие команды ПолучитьВес
//
&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучениеВесаСЭлектронныхВесовДляТабличнойЧасти(ЭтотОбъект, "Запасы", Ложь);
	
КонецПроцедуры // ПолучитьВес()

// Процедура - обработчик команды ЗагрузитьДанныеИзТСД.
//
&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ПодключаемоеОборудованиеУНФКлиент.ПолучитьДанныеИзТСД(ЭтотОбъект);
	
КонецПроцедуры // ЗагрузитьДанныеИзТСД()
// Конец ПодключаемоеОборудование

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура ОбновитьРеквизитыВидимостиФормы()
	
	СтрокаРеквизитов = "ТипСтруктурнойЕдиницы, ОрдерныйСклад";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СтруктурнаяЕдиница, СтрокаРеквизитов);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначенияРеквизитов, СтрокаРеквизитов);
	
	УчетПоЯчейкам = ПолучитьФункциональнуюОпцию("УчетПоЯчейкам");
	
КонецПроцедуры

// Получает признак Ордерного склада.
//
&НаКлиенте
Процедура УправлениеФормой(ПриОткрытии = Ложь)
	
	Если ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) 
		И НЕ ОрдерныйСклад 
		И НЕ ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Розница") 
		И УчетПоЯчейкам Тогда
		
		Элементы.Ячейка.Видимость = Истина;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Ложь;
	Иначе
		Элементы.Ячейка.Видимость = Ложь;
		Элементы.СтруктурнаяЕдиница.АвтоМаксимальнаяШирина = Истина;
	КонецЕсли;
	
	Если ТипСтруктурнойЕдиницы = ПредопределенноеЗначение("Перечисление.ТипыСтруктурныхЕдиниц.Подразделение") Тогда
		
		Если НЕ ПриОткрытии Тогда
			Объект.СписатьЗапасыИзЭксплуатации = Истина;
		КонецЕсли;
		Элементы.СписаниеИз.Подсказка  = "(списание из эксплуатации)";
		Элементы.ЗапасыПодбор.Видимость = Ложь;
		
	Иначе
		
		Если НЕ ПриОткрытии Тогда
			Объект.СписатьЗапасыИзЭксплуатации = Ложь;
		КонецЕсли;
		Элементы.СписаниеИз.Подсказка  = "(списание со склада)";
		
		Элементы.ЗапасыПодбор.Видимость = Истина;
		
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ЕГАИС

&НаСервере
Процедура УстановитьДоступностьЭлементовЕГАИС()
	
	// Форма
	ЭтотОбъект.ТолькоПросмотр = Объект.ПереданВЕГАИС;
	
	// Шапка
	ДоступнаОтправкаЕГАИС = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	
	Если Элементы.Найти("ФормаОбщаяКомандаВыгрузитьВЕГАИС") <> Неопределено Тогда
		
		Элементы.ФормаОбщаяКомандаВыгрузитьВЕГАИС.Видимость = ДоступнаОтправкаЕГАИС;
		Элементы.ФормаОбщаяКомандаВыгрузитьВЕГАИС.Доступность = Объект.Проведен И НЕ Объект.ПереданВЕГАИС;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССерийнымиНомерами

&НаКлиенте
Процедура ЗапасыСерийныеНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерийныеНомера();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийныеНомера()
		
	ТекущиеДанныеИдентификатор = Элементы.Запасы.ТекущиеДанные.ПолучитьИдентификатор();
	ПараметрыСерийныхНомеров = ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор);
	
	ОткрытьФорму("Обработка.ПодборСерийныхНомеров.Форма", ПараметрыСерийныхНомеров, ЭтотОбъект);

КонецПроцедуры

Функция ПолучитьСерийныеНомераИзХранилища(АдресВоВременномХранилище, КлючСтроки)
	
	Модифицированность = Истина;
	Возврат РаботаСФормойДокумента.ПолучитьСерийныеНомераИзХранилища(Объект, АдресВоВременномХранилище, КлючСтроки);
	
КонецФункции

Функция ПараметрыПодбораСерийныхНомеров(ТекущиеДанныеИдентификатор)
	
	Возврат РаботаСФормойДокумента.ПараметрыПодбораСерийныхНомеров(Объект, ЭтотОбъект.УникальныйИдентификатор, ТекущиеДанныеИдентификатор);
	
КонецФункции

#КонецОбласти

#Область ИнтеграцяГИСМ

// ИнтеграцияГИСМ
&НаКлиенте
Процедура ТекстУведомленияОСписанииГИСМОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияГИСМУНФКлиент.ТекстУведомленияОСписанииКиЗГИСМОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры



// ИнтеграцияГИСМ
&НаСервере
Процедура СформироватьТекстУведомлениеОСписанииКиЗГИСМСервер()
	
	ИнтеграцияГИСМУНФ.СформироватьТекстУведомлениеОСписанииКиЗ(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыНомерГТДПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти <> Неопределено
		И ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерГТД) Тогда
		
		ДатаГТД = ГрузовыеТаможенныеДекларацииКлиент.ВыделитьДатуИзНомераГТД(Строка(СтрокаТабличнойЧасти.НомерГТД));
		Если ДатаГТД > КонецДня(Объект.Дата) Тогда
			
			ТекстСообщения = НСтр("ru ='Внимание! Выбранная ГТД датирована более поздней датой, чем текущий документ'");
			Прилипалка = СтрШаблон("Объект.Запасы[%1].НомерГТД", СтрокаТабличнойЧасти.ПолучитьИдентификатор());
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , Прилипалка);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСтранаПроисхожденияПриИзменении(Элемент)
	
	Если КэшЗначений.УчетГТД Тогда
		
		СтрокаТабличнойЧасти = Элементы.Запасы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтранаПроисхождения)
			ИЛИ СтрокаТабличнойЧасти.СтранаПроисхождения = КэшЗначений.Россия Тогда
			
			СтрокаТабличнойЧасти.НомерГТД = Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
// @skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
// @skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)

	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// @skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// ИнтеграцияГосИС
&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтаФорма, НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);

КонецПроцедуры
// Конец ИнтеграцияГосИС

#КонецОбласти
