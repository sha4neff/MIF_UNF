
#Область ОбработчикиСобытийФормы

// Процедура - обработчик события ПриСозданииНаСервере.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Свойство("СозданПоКомандеИзФормыСписка") Тогда
		СозданПоКомандеИзФормыСписка = Параметры.СозданПоКомандеИзФормыСписка;
	Иначе
		СозданПоКомандеИзФормыСписка = Ложь;
	КонецЕсли;
	
	ФормаСоздана = Истина;
	
	// Предопределенные значения
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиАвтоматически = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Автоматически");
	
	СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	СпособЗачетаАвтоматически = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	
	ВидОперацииПоставщику = Перечисления.ВидыОперацийРасходСоСчета.Поставщику;
	ВидОперацииЭквайринг = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты;
	ВидОперацииКредит = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит;
	ВидОперацииПокупателю = Перечисления.ВидыОперацийРасходСоСчета.Покупателю;
	ВидОперацииВыдачаЗаймаСотруднику = Перечисления.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику;
	ВидОперацииНашейОрганизации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации;
	
	УчетПоКомпании = Константы.УчетПоКомпании.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	// Конец Предопределенные значения
	
	// Зачет долгов
	ВзаиморасчетыПриСозданииНаСервере();
	// Конец Зачет долгов
	
	ДвиженияДенежныхСредствВызовСервера.ЗаполнитьСписокВыбораВидовОпераций("РасходСоСчета", Элементы.ВидОперации.СписокВыбора);
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Зарплата
	   И Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		ДобавитьПервуюСтрокуРасшифровкиНаСервере();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьДоговор(Параметры);
		// Статья может прийти из шаблона документа или из документа планирования и тогда её заполнять не нужно.
		Если НЕ (Параметры.ЗначенияЗаполнения.Свойство("ШаблонДокумента") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ШаблонДокумента) И
			Параметры.ЗначенияЗаполнения.Свойство("Статья") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Статья))
			И НЕ ((ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РасходДСПлан") ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПеремещениеДСПлан"))
			И НЕ Параметры.Основание.СтатьяДвиженияДенежныхСредств.Пустая())
			Тогда
			
			Если НЕ Объект.Статья.Пустая() И НЕ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				УстановитьСтатьюДДС();
			КонецЕсли;
			
			Если НЕ Объект.Контрагент.Пустая() И НЕ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
				УстановитьСтатьиДДСВРасшифровкеПлатежа();
			КонецЕсли;
			
		ИначеЕсли ((ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РасходДСПлан") ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПеремещениеДСПлан"))
			И НЕ Параметры.Основание.СтатьяДвиженияДенежныхСредств.Пустая()) Тогда
			
			Если Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
				И (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит) Тогда
				Объект.УчитыватьВНУ = Истина;
			Иначе
				Объект.УчитыватьВНУ = СтатьяУчитываетсяВНУ(Объект.Статья, Объект.Организация, Объект.Дата);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПлатежноеПоручение") И Объект.РасшифровкаПлатежа.Количество() > 0
			И ЗначениеЗаполнено(Параметры.Основание.ДокументОснование)
			И Параметры.Основание.ДокументОснование.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
			
			Если Параметры.Основание.Контрагент <> Параметры.Основание.ДокументОснование.Контрагент Тогда
				ТекстСоощенияДляОтраженияПриОткрытии = НСтр("ru = 'Контрагент в документе-основании ""%1%"" и контрагент в его основании не совпадают.'");
				ТекстСоощенияДляОтраженияПриОткрытии = СтрЗаменить(ТекстСоощенияДляОтраженияПриОткрытии, "%1%", "" + Объект.ДокументОснование);
			КонецЕсли;
			
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
			Объект.СпециальныйНалоговыйРежим = УправлениеНебольшойФирмойСервер.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя Тогда
			Объект.Корреспонденция = ПланыСчетов.Управленческий.НераспределеннаяПрибыль;
			Если Объект.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				Объект.Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка Тогда
			Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = УправлениеНебольшойФирмойСервер.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	КонецЕсли;
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		ЭтоАванс = Ложь;
	Иначе
		ЭтоАванс = Объект.РасшифровкаПлатежа[0].ПризнакАванса;
	КонецЕсли;
	
	Если ЭтоАванс Тогда
		ПризнакАванса = Перечисления.ДаНет.Да;
	Иначе
		ПризнакАванса = Перечисления.ДаНет.Нет;
	КонецЕсли;
	
	// Установка реквизитов формы.
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыКурсИКратность(ЭтотОбъект);
	
	УстановитьВидимостьКурсаВалюты(Объект.ВалютаДенежныхСредств);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ ЗначениеЗаполнено(Параметры.Основание)
		И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования)
		И НЕ Параметры.Свойство("ДокументОснование") Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
			Объект.ВидОперации = ВидОперацииПоставщику;
		КонецЕсли;
		
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
		
	КонецЕсли;
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС(Ложь);
	
	ВидОперации = Объект.ВидОперации;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	Корреспонденция = Объект.Корреспонденция;
	
	// Счет фактура и документ-основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование, ТолькоПросмотр);
	// Конец Счет фактура и документ-основание
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	УстановитьВидимостьПечатиЧека();
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		УправлениеНебольшойФирмойСервер.ПолучитьДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы, ПоляКИДляОтправкиЧека());
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов = Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов.Получить();
	
	// Зачет долгов
	ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа();
	ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	// Конец Зачет долгов
	
	ВестиРасчетыПоДокументам = Объект.Контрагент.ВестиРасчетыПоДокументам;
	ВестиРасчетыПоДоговорам = Объект.Контрагент.ВестиРасчетыПоДоговорам;
	
	УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции();
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(Истина);
	УстановитьВидимостьИДоступность();
	УстановитьУсловноеОформление();
	РасчетыРаботаСФормамиВызовСервера.УстановитьСвязьПараметровВыбораПоОрганизации(ЭтотОбъект);
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги Тогда
		Элементы.НаправлениеДеятельностиНалоги.Видимость = ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику Тогда
		Элементы.ВыплатаЗаработнойПлатыСотрудникуНаправлениеДеятельности.Видимость = ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
		Элементы.ВыплатыЗаработнойПлатыНаправлениеДеятельности.Видимость = ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов;
	КонецЕсли;
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	// Заполнение табличной части при вводе документа из рабочего места.
	Если ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
	   И Параметры.ЗначенияЗаполнения.Свойство("ЗаполнитьРасшифровкаПлатежа")
	   И Параметры.ЗначенияЗаполнения.ЗаполнитьРасшифровкаПлатежа Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность
		);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтрокаТабличнойЧасти.СтавкаНДС.Ставка + 100) / 100);
		
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовРасчетов();
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтаФорма);
	
	// Эквайринг
	Если Объект.ВидОперации = ВидОперацииЭквайринг Тогда
		ЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
		Для Каждого ТекущаяСтрока Из Объект.ЭквайринговыеОперации Цикл
			ТекущаяСтрока.СуммаПлатежаИтогоПоСтроке = ТекущаяСтрока.СуммаРасчетовВозврата
								+ТекущаяСтрока.СуммаРасчетовКомиссии+ТекущаяСтрока.СуммаРасчетовКомиссииВозврата-ТекущаяСтрока.СуммаРасчетов;
		КонецЦикла;
		СуммаПлатежаЭквайринг = Объект.ЭквайринговыеОперации.Итог("СуммаПлатежаИтогоПоСтроке");
		ТипСчетаЗатратШапка = Объект.ЭквайринговыйТерминал.СчетЗатрат.ТипСчета;
		НастроитьВидимостьЭлементовВЗависимостиОтТипаСчетаЗатрат(Объект.Ссылка.Пустая());
	КонецЕсли;
	// Конец Эквайринг
	
	// Остатки ДС и взаиморасчетов на форме
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС(Объект.БанковскийСчет);
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
	ИспользуетсяОтчетность = ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность");
	ИзменитьОтображениеПодсказки(Элементы, Объект.ВидОперации, Не ЗначениеЗаполнено(Объект.Ссылка)И ИспользуетсяОтчетность);
	
	// МобильныйКлиент
	УправлениеНебольшойФирмойСервер.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события ПриЧтенииНаСервере.
//
&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Зачет долгов
	Если ФормаСоздана Тогда
		ТаблицаДокументовДляИзменения.Очистить();
		НадписьДокументЗачетаПредоплаты = "";
		Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
		НастроитьЭлементыРаспределенияДолговНаСервере();
	КонецЕсли;
	
	ОбработатьРеквизитыРасчетов();
	
	СпособЗачетаПоУмолчаниюДляКонтрагента = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляКонтрагента(Объект.Контрагент, Ложь);
	// Конец Зачет долгов
	
	ВестиРасчетыПоДокументам = Объект.Контрагент.ВестиРасчетыПоДокументам;
	ВестиРасчетыПоДоговорам = Объект.Контрагент.ВестиРасчетыПоДоговорам;
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры // ПриЧтенииНаСервере()

// Процедура - обработчик события ПослеЗаписи.
//
&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	Если СозданПоКомандеИзФормыСписка Тогда
		ПараметрыОповещения = Новый Структура("Ссылка", Объект.Ссылка);
		Оповестить("Запись_РасходСоСчета", ПараметрыОповещения);
	КонецЕсли;
	
	// Оповещение об оплате.
	ОповеститьОбОплатеСчета = Ложь;
	ОповеститьОбОплатеЗаказа = Ложь;
	
	Для каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
		ОповеститьОбОплатеСчета = ?(
			ОповеститьОбОплатеСчета,
			ОповеститьОбОплатеСчета,
			ЗначениеЗаполнено(ТекСтрока.СчетНаОплату)
		);
		ОповеститьОбОплатеЗаказа = ?(
			ОповеститьОбОплатеЗаказа,
			ОповеститьОбОплатеЗаказа,
			ЗначениеЗаполнено(ТекСтрока.Заказ)
		);
	КонецЦикла;
	
	Если ОповеститьОбОплатеСчета Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплату"));
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	КонецЕсли;
	
	Если ОповеститьОбОплатеЗаказа Тогда
		Оповестить("ОповещениеОбОплатеЗаказа");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
		Оповестить("ОповещениеОЗаписиРасходаСоСчета");
	КонецЕсли; 
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события ПриОткрытии.
// В процедуре устанавливается текущая страница в зависимости от операции.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТекстСоощенияДляОтраженияПриОткрытии) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСоощенияДляОтраженияПриОткрытии;
		Сообщение.Сообщить();
		
		ТекстСоощенияДляОтраженияПриОткрытии = "";
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницу();
	
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события формы ПередЗаписью
//
&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
	ОбработатьРасшифровкуПлатежаПередЗаписью();
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит"))
		И Объект.ПоложениеНастроекНалоговогоУчета = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти")
		И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Для каждого СтрокаОперации Из Объект.ЭквайринговыеОперации Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаОперации.НалогообложениеНДС) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заполнено поле ""Налоговый учет""!'");
				Сообщение.Поле = "ЭквайринговыеОперации["+(СтрокаОперации.НомерСтроки-1)+"].НалоговыйУчет";
				Сообщение.ПутьКДанным = "Объект";
				Сообщение.Сообщить();
				
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 

	
КонецПроцедуры // ПередЗаписью()

// Процедура обработчик события ПередЗаписьюНаСервере.
//
&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Взаиморасчеты
	РасчетыРаботаСФормамиВызовСервера.ПередЗаписьюНаСервереДеньги(ЭтотОбъект, ТекущийОбъект);
	// Конец Взаиморасчеты
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации,
			Объект.РасшифровкаПлатежа,
			Объект.ДоговорКредитаЗайма);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ?(Отказ, НСтр("ru = 'Документ не проведен! '") + ТекстСообщения, ТекстСообщения);
			Сообщение.Сообщить();
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		// Эквайринг
		Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты И ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
			
			// Дата документа должна быть больше даты операции.
			Для Каждого ТекущаяСтрока Из ТекущийОбъект.ЭквайринговыеОперации Цикл
				Если ТекущаяСтрока.Документ <> Неопределено И ТекущаяСтрока.Документ.Дата >= ТекущийОбъект.Дата Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Дата операции больше или равна дате документа!'");
					Сообщение.Поле = "ЭквайринговыеОперации["+(ТекущаяСтрока.НомерСтроки-1)+"].Документ";
					Сообщение.ПутьКДанным = "Объект";
					Сообщение.Сообщить();
					
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Отказ Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Дата документа должна быть больше даты всех операций, которые указаны в табличной части ""Эквайринговые операции"". Документ не проведен!'");
				Сообщение.Сообщить();
				
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// Конец Эквайринг
		
		// Кредит
		Если ТекущийОбъект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит И ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
			
			// Дата документа должна быть больше даты операции.
			Для Каждого ТекущаяСтрока Из ТекущийОбъект.ЭквайринговыеОперации Цикл
				Если ТекущаяСтрока.Документ <> Неопределено И ТекущаяСтрока.Документ.Дата >= ТекущийОбъект.Дата Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Дата операции больше или равна дате документа!'");
					Сообщение.Поле = "ЭквайринговыеОперации["+(ТекущаяСтрока.НомерСтроки-1)+"].Документ";
					Сообщение.ПутьКДанным = "Объект";
					Сообщение.Сообщить();
					
					Отказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Отказ Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Дата документа должна быть больше даты всех операций, которые указаны в табличной части ""Эквайринговые операции"". Документ не проведен!'");
				Сообщение.Сообщить();
				
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		// Конец Кредит
		
	КонецЕсли;
	
	// Расчеты
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТаблицаДокументовДляИзменения", ТаблицаДокументовДляИзменения);
	// Конец Расчеты
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

// Процедура - обработчик события ПослеЗаписиНаСервере.
//
&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	
	Если ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику") Или
		ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.РасчетыПоКредитам") Тогда
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
	КонецЕсли;
	
	// Эквайринг
	Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит Тогда
		ОбновитьОтображениеНалоговогоУчетаВТабличнойЧасти();
	КонецЕсли; 
	// Конец Эквайринг
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС(Объект.БанковскийСчет);
	
	// Зачет долгов
	ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа();
	
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	
	НадписьДокументЗачетаПредоплаты = "";
	Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
	
	Если ТекущийОбъект.Проведен ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТаблицаДокументовДляИзменения.Очистить();
		ЗаполнитьТаблицуПросмотраНаСервере(ТекущийОбъект.Проведен);
	КонецЕсли;
	
	ДатаПриСозданииНаСервере = Объект.Дата;
	ОбработатьРеквизитыРасчетов();
	// Конец Зачет долгов
	
	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);
	// Конец Обсуждения
	
	Если ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику")
		Или ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации") Тогда
		Справочники.ДоговорыКонтрагентов.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументамОплаты(
			ТекущийОбъект.РасшифровкаПлатежа, ТекущийОбъект.Ссылка);
		КонецЕсли;
		
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр)
		   И Объект.Контрагент = Параметр Тогда
			УстановитьВидимостьРеквизитовРасчетов();
		КонецЕсли;
	КонецЕсли;
	
	// Прочие расчеты
	Если ИмяСобытия = "Запись_ПланСчетовУправленческий" Тогда
		Если ЗначениеЗаполнено(Параметр)
		   И Объект.Корреспонденция = Параметр Тогда
			УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		КонецЕсли;
	КонецЕсли;
	// Конец Прочие расчеты
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры //ОбработкаОповещения()

// Процедура - обработчик события ОбработкаПроверкиЗаполненияНаСервере формы.
//
&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		Объект.ПериодРегистрации = КонецДня(ВыбранноеЗначение);
		УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ДокументОснование

&НаСервере
Функция ПолучитьСписокДляВыбораДокументаОснования()
	
	СписокОснований = Новый СписокЗначений;
	
	СписокОснований.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", "Приходная накладная");
	СписокОснований.Добавить("Документ.НачислениеНалогов.ФормаВыбора", "Начисление налогов");
	СписокОснований.Добавить("Документ.ПлатежноеПоручение.ФормаВыбора", "Платежное поручение");
	СписокОснований.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", "Заказ поставщику");
	СписокОснований.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", "Счет на оплату (полученный)");
	СписокОснований.Добавить("Документ.ДополнительныеРасходы.ФормаВыбора", "Дополнительные расходы");
	СписокОснований.Добавить("Документ.ПлатежнаяВедомость.ФормаВыбора", "Платежная ведомость");
	Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
		СписокОснований.Добавить("Документ.ОтчетКомиссионера.ФормаВыбора", "Отчет комиссионера");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
		СписокОснований.Добавить("Документ.ОтчетКомитенту.ФормаВыбора", "Отчет комитенту");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
		СписокОснований.Добавить("Документ.ПеремещениеДСПлан.ФормаВыбора", "Перемещение денег (план)");
		СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", "Заявка на расход денег");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
		СписокОснований.Добавить("Документ.НачисленияПоКредитамИЗаймам.ФормаВыбора", "Начисления по кредитам и займам");
		СписокОснований.Добавить("Документ.ДоговорКредитаИЗайма.ФормаВыбора", "Договор кредита (займа)");
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя Тогда
		СписокОснований.Очистить();
		Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", "Заявка на расход денег");
		КонецЕсли;
	КонецЕсли; 
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		СписокОснований.Добавить("Документ.ПередачаТоваровМеждуОрганизациями.ФормаВыбора", "Передача товаров между организациями");
	КонецЕсли;
	
	СписокОснований.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат СписокОснований;
	
КонецФункции

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
		
		ДокументОснованиеВалютаПредставление = "";
		ДокументОснованиеСумма = 0;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		
		//Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, ПолучитьСписокДляВыбораДокументаОснования(), Элемент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбИмяФормы, Параметры) Экспорт
	
	Если ВыбИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Для каждого элОтбора Из ПараметрыВыбораДокументаОснования Цикл
			ИмяПоляОтбора = СтрЗаменить(элОтбора.Имя,"Отбор.","");
			СтруктураПараметровОтбора.Вставить(ИмяПоляОтбора, элОтбора.Значение);
		КонецЦикла;
		
		Если Объект.ВидОперации = ВидОперацииВыдачаЗаймаСотруднику И
			СтрНайти(ВыбИмяФормы.Значение, "ДоговорКредитаИЗайма") > 0 Тогда
			Если Не Объект.Подотчетник.Пустая() Тогда
				СтруктураПараметровОтбора.Вставить("Сотрудник", Объект.Подотчетник);
			КонецЕсли;
		Иначе
			Если НЕ Объект.Контрагент.Пустая() Тогда
				СтруктураПараметровОтбора.Вставить("Контрагент", Объект.Контрагент);
			КонецЕсли;
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура("Отбор", СтруктураПараметровОтбора);
		
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбИмяФормы.Значение, ПараметрыОткрытияФормы, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт

	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);		

КонецПроцедуры

#КонецОбласти

// Процедура - обработчик события ПриИзменении поля ввода Контрагент.
//
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, Объект.Организация, Объект.Дата);
	
	ВладелецДоговораПоУмолчанию = Объект.Контрагент;
	ДоговорКонтрагентаПоУмолчанию = СтруктураДанные.Договор;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда 
		
		Объект.РасшифровкаПлатежа[0].Договор = СтруктураДанные.Договор;
		Объект.РасшифровкаПлатежа[0].СтавкаНДС = РасчетыРаботаСФормамиВызовСервера.СтавкаНДСПоОрганизациияНалогообложениеНДСИСпособуЗаполнения(Объект.Организация, Объект.Дата, СтруктураДанные.СпособЗаполненияСтавкиНДС);
		
		Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
			Объект.РасшифровкаПлатежа[0].Курс = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс
			);
			Объект.РасшифровкаПлатежа[0].Кратность = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
			);
		КонецЕсли;
		
		Объект.РасшифровкаПлатежа[0].Курс = ?(
			Объект.РасшифровкаПлатежа[0].Курс = 0,
			1,
			Объект.РасшифровкаПлатежа[0].Курс
		);
		Объект.РасшифровкаПлатежа[0].Кратность = ?(
			Объект.РасшифровкаПлатежа[0].Кратность = 0,
			1,
			Объект.РасшифровкаПлатежа[0].Кратность
		);
		
		Объект.РасшифровкаПлатежа[0].СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа,
			Курс,
			Объект.РасшифровкаПлатежа[0].Курс,
			Кратность,
			Объект.РасшифровкаПлатежа[0].Кратность
		);
		
		Если Объект.ВидОперации = ВидОперацииПоставщику 
			ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
			Объект.РасшифровкаПлатежа[0].СпособЗачета = СтруктураДанные.СпособЗачета;
		Иначе
			Объект.РасшифровкаПлатежа[0].СпособЗачета = СпособЗачетаВручную;
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("Проект") Тогда
			Объект.РасшифровкаПлатежа[0].Проект = СтруктураДанные.Проект;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Проект") Тогда
		Объект.Проект = СтруктураДанные.Проект;
	КонецЕсли;
		
	// Статьи ДДС
	УстановитьСтатьиДДСВРасшифровкеПлатежа();
	// Конец Статьи ДДС
	
	// Прочие расчеты
	Если СтруктураДанные.Свойство("ДоговорКредитаЗаймаПоУмолчанию") Тогда
		Объект.ДоговорКредитаЗайма = СтруктураДанные.ДоговорКредитаЗаймаПоУмолчанию;
		ОбработатьИзменениеДоговораКредитаИлиЗайма();
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПрочиеРасчеты") Тогда
		
		Объект.Корреспонденция = СтруктураДанные.КорреспонденцияПрочихРасчетов;
		
	КонецЕсли;
	// Конец Прочие расчеты
	
	Если ЗначениеЗаполнено(СтруктураДанные.СтатьяДДСПоУмолчанию) Тогда
		Объект.Статья = СтруктураДанные.СтатьяДДСПоУмолчанию;
		Объект.УчитыватьВНУ = СтруктураДанные.УчитыватьВНУ;
	КонецЕсли;
	
	ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	ВестиРасчетыПоДоговорам = СтруктураДанные.ВестиРасчетыПоДоговорам;
	Если ВестиРасчетыПоДокументам И Объект.ВидОперации = ВидОперацииПокупателю Тогда
		Для Каждого ТекущаяСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ТекущаяСтрокаРасшифровки.ПризнакАванса = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
	// Видимость флага "ПризнакАванса" зависит от установленных флагов учета в карточке контрагента.
	УстановитьУсловноеОформлениеПоДаннымКонтрагента();
	
КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события ВидОперацииПриИзменении.
// Управляет страницами при изменении вида операции документа.
//
&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПередИзменением = ВидОперации;
	ВидОперации = Объект.ВидОперации;
	
	Если ВидОперации <> ВидОперацииПередИзменением Тогда
		УстановитьТекущуюСтраницу();
		ОчиститьРеквизитыНеОтносящиесяКОперации();
		ВидОперацииПриИзмененииНаСервере();
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда 
			УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		КонецЕсли;
		
		ИзменитьОтображениеПодсказки(Элементы, Объект.ВидОперации, Не ЗначениеЗаполнено(Объект.Ссылка)И ИспользуетсяОтчетность);
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Дата.
// В процедуре определяется ситуация, когда при изменении своей даты документ 
// оказывается в другом периоде нумерации документов, и в этом случае
// присваивает документу новый уникальный номер.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		// Обновление курсов расчетов
		СтруктураДанные.Вставить("ОбновитьКурсыРасчетов", (Объект.РасшифровкаПлатежа.Количество() > 0 И Объект.РасшифровкаПлатежа.Итог("Курс") > 0 И
			Объект.РасшифровкаПлатежа.Количество() <> Объект.РасшифровкаПлатежа.Итог("Курс")));
		СтруктураДанные.Вставить("ОбновитьКурсыРасчетовТекстВопроса", НСтр("ru = 'Изменилась дата документа. Установить курс расчетов в соответствии с курсом валюты договора?'"));
		// Конец Обновление курсов расчетов
		
		ТекстСообщения = НСтр("ru = 'Изменился курс валюты банковского счета. Пересчитать суммы документа?'");
		ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);
		Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
			Объект.СрокУплаты = ПолучитьСрокУплаты(Объект.ВидНалога, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Организация.
// В процедуре осуществляется очистка номера документа,
// а также производится установка параметров функциональных опций формы.
// Переопределяет соответствующий параметр формы.
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	Объект.БанковскийСчет = СтруктураДанные.БанковскийСчет;
	Объект.СчетКонтрагента = СтруктураДанные.СчетКонтрагента;
	
	ВалютаДенежныхСредствПередИзменением = ВалютаДенежныхСредств;
	Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаДенежныхСредств;
	ВалютаДенежныхСредств = СтруктураДанные.ВалютаДенежныхСредств;
	
	УстановитьНастройкиУчетаВНалогообложении();
	
	// Если валюта не изменилась, то ничего не делаем.
	Если ВалютаДенежныхСредств = ВалютаДенежныхСредствПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Для Каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
			Если ВестиРасчетыПоДоговорам Тогда
				ТекущаяСтрока.Договор = Неопределено;
			ИначеЕсли ТекущаяСтрока.Договор.Пустая() Тогда
				ТекущаяСтрока.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Объект.ДоговорыАвтоЗачетаДолгов.Количество() > 0 Тогда
		Для Каждого ТекущаяСтрока Из Объект.ДоговорыАвтоЗачетаДолгов Цикл
			Если ВестиРасчетыПоДоговорам Тогда
				ТекущаяСтрока.Договор = Неопределено;
			Иначе
				ТекущаяСтрока.Договор = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Объект.Контрагент, Объект.Организация, Объект.ВидОперации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'Изменилась валюта банковского счета. Пересчитать суммы документа?'");
	ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);
	
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода БанковскийСчет.
//
&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ПредыдущаяВалюдаДС = Объект.ВалютаДенежныхСредств;
	
	СтруктураДанные = ПолучитьДанныеБанковскийСчетПриИзменении(
		Объект.Дата,
		Объект.БанковскийСчет,
		Объект.СчетКонтрагента
	);
	
	Если Объект.ВидОперации = ВидОперацииЭквайринг Тогда
		Объект.СуммаДокумента = 0;
		Объект.СуммаКомиссииДокумента = 0;
		Объект.ЭквайринговыеОперации.Очистить();
		СуммаПлатежаЭквайринг = Объект.ЭквайринговыеОперации.Итог("СуммаПлатежаИтогоПоСтроке");
	КонецЕсли;
	
	Если Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаДенежныхСредств Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СчетКонтрагента					= СтруктураДанные.СчетКонтрагента;
	Объект.ВалютаДенежныхСредств			= СтруктураДанные.ВалютаДенежныхСредств;
	ВалютаДенежныхСредств 					= СтруктураДанные.ВалютаДенежныхСредств;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Зарплата") Тогда
		ТекстСообщения = НСтр("ru = 'Изменилась валюта банковского счета. Список ""Платежные ведомости"" будет очищен.'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("БанковскийСчетПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные, ТекстСообщения", СтруктураДанные, ТекстСообщения)), ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	БанковскийСчетПриИзмененииФрагмент(СтруктураДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	СтруктураДанные = ДополнительныеПараметры.СтруктураДанные;
	ТекстСообщения = ДополнительныеПараметры.ТекстСообщения;
	
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	
	БанковскийСчетПриИзмененииФрагмент(СтруктураДанные);

КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзмененииФрагмент(Знач СтруктураДанные)
	
	Перем ТекстСообщения;
	
	ТекстСообщения = НСтр("ru = 'Изменилась валюта банковского счета. Пересчитать суммы документа?'");
	ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);
	
КонецПроцедуры // БанковскийСчетПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода Корреспонденция.
//
&НаКлиенте
Процедура КорреспонденцияПриИзменении(Элемент)
	
	Если Корреспонденция <> Объект.Корреспонденция Тогда
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Истина);
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Корреспонденция = Объект.Корреспонденция;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СуммаДокумента.
//
&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	
	СуммаДокументаПриИзмененииФрагмент();
	
КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода СуммаДокумента.
//
&НаКлиенте
Процедура СуммаДокументаПриИзмененииФрагмент()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		
		// Эквайринг
		Если Объект.ВидОперации = ВидОперацииЭквайринг Тогда
			СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаПлатежа + Объект.СуммаКомиссииДокумента;
		КонецЕсли;
		// Конец Эквайринг
		
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность
		);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
		
		РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	Иначе
		СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
КонецПроцедуры // СуммаДокументаПриИзменении()

&НаСервере
Процедура УстановитьВидиомостьДокументаОснования(НоваяВидимость)
	
	Элементы.ДокументОснованиеНадпись.Видимость = НоваяВидимость;
	
КонецПроцедуры

// Процедура устанавливает видимость элементов в зависимости от вида операции.
//
&НаСервере
Процедура УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(ПриСозданииНаСервере = Ложь)
	
	Элементы.РасшифровкаПлатежаСуммаПлатежа.Видимость = УчетВалютныхОпераций;
	Элементы.РасшифровкаПлатежаПрочиеРасчетыСуммаПлатежа.Видимость = УчетВалютныхОпераций;
	Элементы.РасшифровкаПлатежаПрочиеРасчетыСуммаПлатежа.Видимость = УчетВалютныхОпераций;
	Элементы.РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежа.Видимость = УчетВалютныхОпераций;
	
	Элементы.Подвал.Видимость = Истина;
	
	Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
	Элементы.РасчетыСПодотчетником.Видимость = Ложь;
	Элементы.РасчетыПрочие.Видимость = Ложь;
	Элементы.ВыплатыЗаработнойПлаты.Видимость = Ложь;
	Элементы.ВыплатаЗаработнойПлатыСотруднику.Видимость = Ложь;
	Элементы.РасчетыПоНалогам.Видимость = Ложь;
	
	Элементы.НалогообложениеНДС.Видимость = Ложь;
	Элементы.ГруппаКонтрагент.Видимость = Ложь;
	Элементы.Контрагент.Видимость = Ложь;
	Элементы.СчетКонтрагента.Видимость = Ложь;
	Элементы.Подотчетник.Видимость = Ложь;
	
	// Эквайринг
	Элементы.РасчетыПоЭквайрингу.Видимость = Ложь;
	Элементы.ЭквайринговыйТерминал.Видимость = Ложь;
	Элементы.ДоговорЭквайринга.Видимость = Ложь;
	Элементы.ДоговорЭквайрингаНадпись.Видимость = Ложь;
	Элементы.СуммаПлатежаЭквайринг.Видимость = Ложь;
	Элементы.СуммаКомиссииДокумента.Видимость = Ложь;
	Элементы.ФормаШапкаТабличнаяЧасть.Видимость = Ложь;
	УстановитьВидиомостьДокументаОснования(Истина);
	Элементы.СуммаДокумента.Заголовок = НСтр("ru='Сумма'");
	// Конец Эквайринг
	
	// Прочие расчеты
	Элементы.РасчетыПоКредитам.Видимость = Ложь;
	Элементы.РасчетыПоКредитам.Заголовок = НСтр("ru='Расчеты по кредитам'");
	Элементы.ДоговорЗаймаСотруднику.Видимость = Ложь;
	Элементы.ЗаполнитьПоДоговоруЗайма.Видимость = Ложь;
	Элементы.ДоговорКредита.Видимость = Ложь;
	Элементы.ЗаполнитьПоДоговоруКредита.Видимость = Ложь;
	Элементы.ГруппаИнформацияПоДоговору.Видимость = Ложь;
	Элементы.Сотрудник.Видимость = Ложь;
	// Конец Прочие расчеты
	
	Элементы.Корреспонденция.Заголовок = НСтр("ru='Корреспонденция'");
	Элементы.СуммаДокумента.КнопкаВыпадающегоСписка = Ложь;
	
	Элементы.СчетПолучателя.Видимость = Ложь;
	Элементы.Касса.Видимость = Ложь;
	
	Элементы.ГруппаПомощникИВариантЗаполнения.Видимость = Ложь;
	
	//Если доступных документов основания нет, спрячем гиперссылку
	СписокОснований = ПолучитьСписокДляВыбораДокументаОснования();
	Элементы.ДокументОснованиеНадпись.Видимость = СписокОснований.Количество() > 0;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации") Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Истина;
		Элементы.РасшифровкаПлатежаПодбор.Видимость = Истина;
		Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Истина;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Поставщик'");
		Элементы.СчетКонтрагента.Видимость = Истина;
		
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		Элементы.СуммаПлатежа.Видимость = УчетВалютныхОпераций;
		Элементы.СуммаРасчетов.Видимость = НЕ УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Всего'");
		
		Элементы.НалогообложениеНДС.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость =Истина;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.ГруппаПомощникИВариантЗаполнения.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю") Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Истина;
		Элементы.РасшифровкаПлатежаПодбор.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Покупатель'");
		
		Элементы.СчетКонтрагента.Видимость = Истина;
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		Элементы.СуммаПлатежа.Видимость = УчетВалютныхОпераций;
		Элементы.СуммаРасчетов.Видимость = НЕ УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Всего'");
		
		Элементы.СуммаНДС.Видимость = Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаРучноеЗаполнение;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Подотчетнику") Тогда
		
		Элементы.РасчетыСПодотчетником.Видимость = Истина;
		Элементы.Подотчетник.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику") Тогда
		
		Элементы.ВыплатаЗаработнойПлатыСотруднику.Видимость = Истина;
		Элементы.Подотчетник.Видимость = Истина;
		Элементы.Подотчетник.Заголовок = НСтр("ru='Сотрудник'");
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
	
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Зарплата") Тогда
		
		Элементы.ВыплатыЗаработнойПлаты.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = Ложь;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Налоги") Тогда
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Получатель'");
		
		Элементы.РасчетыПоНалогам.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	// Эквайринг
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты") Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Банк-эквайер'");
		Элементы.СчетКонтрагента.Видимость = Истина;
		
		Элементы.ЭквайринговыйТерминал.Видимость = Истина;
		Элементы.ДоговорЭквайрингаНадпись.Видимость = Истина;
		
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		Элементы.РасчетыПоЭквайрингу.Видимость = Истина;
		
		Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
			ДоговорЭквайринга = Объект.ЭквайринговыеОперации[0].ЭквайринговыйТерминал.Договор;
		Иначе
			ДоговорЭквайринга = Объект.ЭквайринговыйТерминал.Договор;
		КонецЕсли; 
		
		Если ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
			Элементы.СуммаПлатежа.Видимость = Ложь;
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Истина;
			
			Элементы.ЭквайринговыеОперации.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Истина;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru='Сумма'");
			Элементы.СуммаКомиссииДокумента.Видимость = Ложь;
		Иначе
			Элементы.СуммаПлатежа.Видимость = Истина;
			Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Всего'"));
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Ложь;
			
			Элементы.ЭквайринговыеОперации.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Ложь;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru='Сумма/комиссия'");
			Элементы.СуммаКомиссииДокумента.Видимость = Истина;
		КонецЕсли;
		
		Если ДоговорЭквайринга.РасчетКомиссиВОтчетеЭквайера Тогда
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Ложь;
			Элементы.ЭквайринговыйТерминалКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = Ложь;
			Элементы.ФормаШапкаТабличнаяЧасть.Видимость = Ложь;
		Иначе
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма / Комиссия)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма / Комиссия)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Истина;
			Элементы.ЭквайринговыйТерминалКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг;
			Элементы.ЭквайринговыеОперацииКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг;
			Элементы.ФормаШапкаТабличнаяЧасть.Видимость = ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг;
		КонецЕсли;
		
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		
		Если ТипСчетаЗатратШапка = Перечисления.ТипыСчетов.Расходы Тогда
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Истина;
		Иначе
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	// Конец Эквайринг
	
	// Кредит
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит") Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Банк'");
		Элементы.СчетКонтрагента.Видимость = Истина;
		
		Элементы.ЭквайринговыйТерминал.Видимость = Истина;
		Элементы.ДоговорЭквайринга.Видимость = Истина;
		
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		Элементы.РасчетыПоЭквайрингу.Видимость = Истина;
		
		Если ЗначениеЗаполнено(ДоговорЭквайринга) Тогда
			МассивТерминалов = ЭквайринговыеОперацииСервер.ПолучитьТерминалыПоДоговору(ДоговорЭквайринга);
			Если МассивТерминалов.Количество() > 0 Тогда
				ЭквайринговыйТерминал = МассивТерминалов[0];
				Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
					Для Каждого ЭквайринговаяОперация Из Объект.ЭквайринговыеОперации Цикл
						ЭквайринговаяОперация.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
					КонецЦикла;
				Иначе
					Объект.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
				ДоговорЭквайринга = Объект.ЭквайринговыеОперации[0].ЭквайринговыйТерминал.Договор;
			Иначе
				ДоговорЭквайринга = Объект.ЭквайринговыйТерминал.Договор;
			КонецЕсли; 
		КонецЕсли;
		
		Если ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
			Элементы.СуммаПлатежа.Видимость = Ложь;
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Истина;
			
			Элементы.ЭквайринговыеОперации.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Истина;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru='Сумма'");
			Элементы.СуммаКомиссииДокумента.Видимость = Ложь;
		Иначе
			Элементы.СуммаПлатежа.Видимость = Истина;
			Элементы.СуммаПлатежа.Заголовок = ?(ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь"), НСтр("ru='Сумма (план)'"), НСтр("ru='Всего'"));
			Элементы.СуммаРасчетов.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			Элементы.СуммаПлатежаЭквайринг.Видимость = Ложь;
			
			Элементы.ЭквайринговыеОперации.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииЗаполнитьЭквайринговыеОперацииСВыборомПериода.Видимость = Ложь;
			Элементы.СуммаДокумента.Заголовок = НСтр("ru='Сумма/комиссия'");
			Элементы.СуммаКомиссииДокумента.Видимость = Истина;
		КонецЕсли;
		
		Если ДоговорЭквайринга.РасчетКомиссиВОтчетеЭквайера Тогда
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Ложь;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Ложь;
			Элементы.ЭквайринговыйТерминалКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = Ложь;
			Элементы.ФормаШапкаТабличнаяЧасть.Видимость = Ложь;
		Иначе
			Элементы.ГруппаОплатаКомиссия.Заголовок = НСтр("ru='Оплата (Сумма / Комиссия)'");
			Элементы.ГруппаВозвратКомиссияВозврат.Заголовок = НСтр("ru='Возврат (Сумма / Комиссия)'");
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссии.Видимость = Истина;
			Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Истина;
			Элементы.ЭквайринговыйТерминалКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг;
			Элементы.ЭквайринговыеОперацииКонтекстноеМенюШапкаТабличнаяЧасть.Видимость = ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг;
			Элементы.ФормаШапкаТабличнаяЧасть.Видимость = ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг;
		КонецЕсли;
		
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		
		Если ТипСчетаЗатратШапка = Перечисления.ТипыСчетов.Расходы Тогда
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Истина;
		Иначе
			Элементы.НаправлениеДеятельностиЗатраты.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	// Конец Кредит
	
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.КомиссияБанка") Тогда
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Банк'");
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
	
	// Прочие расчеты
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Прочее") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.СнятиеНаличных") Тогда
		
		Элементы.Касса.Видимость = Истина;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет") Тогда
		
		Элементы.СчетПолучателя.Видимость = Истина;
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НаРасходы") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
		Элементы.Корреспонденция.Заголовок = НСтр("ru='Статья расходов'");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПрочиеРасчеты") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = УчетВалютныхОпераций;
		Элементы.СуммаРасчетов.Видимость = НЕ УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Всего'");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Контрагент'");
		Элементы.РасшифровкаПлатежаПрочиеРасчеты.Видимость = Истина;
		Элементы.РасшифровкаПлатежаПрочиеРасчетыДоговор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Идентификатор = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику") Тогда
		
		Элементы.Сотрудник.Видимость = Истина;
		Элементы.РасчетыПоКредитам.Заголовок = НСтр("ru='Расчеты по займам'");
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Ложь;
		
		Элементы.ДоговорЗаймаСотруднику.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруЗайма.Видимость = Истина;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
		
		Элементы.ГруппаИнформацияПоДоговору.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.РасчетыПоКредитам") Тогда
		
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Банк'");
		Элементы.НалогообложениеНДС.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Истина;
		
		Элементы.ДоговорКредита.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруКредита.Видимость = Истина;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
		
		Элементы.ГруппаИнформацияПоДоговору.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
		Элементы.СуммаРасчетов.Видимость = Истина;
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Сумма расчетов'");
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	// Конец Прочие расчеты
	Иначе
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	КонецЕсли;
	
	ДвижениеДенежныхСредствСервер.ОбработатьВидОперации(ЭтотОбъект);
	
	УстановитьВидимостьДокументыПланирования();
	
	НастроитьЭлементыРаспределенияДолговНаСервере();
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	УстановитьВидимостьОтПользовательскихНастроек();
	
КонецПроцедуры // УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации()

// Процедура выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговораКонтрагента(СтрокаТабличнойЧасти)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС,,
			СтрокаТабличнойЧасти.СчетНаОплату
		);
		СтрокаТабличнойЧасти.Курс = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
		);
		
		СтрокаТабличнойЧасти.СтатьяДДС = СтруктураДанные.СтатьяДДСПоУмолчанию;
		Если Объект.ВидОперации = ВидОперацииПоставщику
			ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
			СтрокаТабличнойЧасти.СпособЗачета = СтруктураДанные.СпособЗачета;
		Иначе
			СтрокаТабличнойЧасти.СпособЗачета = СпособЗачетаВручную;
		КонецЕсли;
		СтрокаТабличнойЧасти.СтавкаНДС = РасчетыРаботаСФормамиВызовСервера.СтавкаНДСПоОрганизациияНалогообложениеНДСИСпособуЗаполнения(Объект.Организация, Объект.Дата, СтруктураДанные.СпособЗаполненияСтавкиНДС);
		
		Если СтруктураДанные.Свойство("Проект") Тогда
			СтрокаТабличнойЧасти.Проект = СтруктураДанные.Проект;
		КонецЕсли;
		
		Если СтруктураДанные.СчетНаОплатуДоговор <> Неопределено Тогда
			Если СтруктураДанные.СчетНаОплатуДоговор <> СтрокаТабличнойЧасти.Договор Тогда
				СтрокаТабличнойЧасти.СчетНаОплату = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		СтрокаТабличнойЧасти.СтатьяДДС = РасчетыРаботаСФормамиВызовСервера.ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС
		);
		Если Объект.ВидОперации = ВидОперацииПоставщику 
			ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
			СтрокаТабличнойЧасти.СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(
				СтрокаТабличнойЧасти.Договор,
				Объект.Контрагент,
				Ложь
			);
		Иначе
			СтрокаТабличнойЧасти.СпособЗачета = СпособЗачетаВручную;
		КонецЕсли;
		СтрокаТабличнойЧасти.СчетНаОплату = Неопределено;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаПлатежа,
		Курс,
		СтрокаТабличнойЧасти.Курс,
		Кратность,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.ЭтоВзаимозачет = (ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет"));
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

#Область ОбновитьКурсыРасчетов

// Процедура выполняет обновление курса расчётов в ТЧ РасшифровкаПлатежа и пересчет суммы расчетов при изменении даты документа.
//
&НаСервере
Процедура ОбновитьКурсыРасчетовРасшифровкиПлатежаНаСервере()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
				Объект.Дата,
				СтрокаТабличнойЧасти.Договор
			);
			СтрокаТабличнойЧасти.Курс = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс
			);
			СтрокаТабличнойЧасти.Кратность = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
			);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
	КонецЦикла;
	
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаСервере();
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

// Процедура выполняет обновление курса расчётов в ТЧ РасшифровкаПлатежа и пересчет суммы расчетов при изменении даты документа.
// Вызывается при положительном ответе пользователя на вопрос о необходимости обновления курса и пересчета.
//
&НаКлиенте
Процедура ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы(КнопкаРезультат, ДополнительныеПараметры) Экспорт

	Если КнопкаРезультат = КодВозвратаДиалога.Да Тогда
		ОбновитьКурсыРасчетовРасшифровкиПлатежаНаСервере();
	КонецЕсли;

КонецПроцедуры // ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммыЗавершение()

&НаКлиенте
Процедура ДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Подотчетник.Пустая() Тогда
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект,НСтр("ru = 'Сначала нужно выбрать подотчетника'"),,,"Объект.Подотчетник");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура заполняет строку ТЧ РасшифровкаПлатежа данными документа расчетов.
//
&НаКлиенте
Процедура ОбработатьВыборДокументаРасчетов(ДанныеДокумента)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти.Документ = ДанныеДокумента.Документ;
		Если ДанныеДокумента.УстановитьЗаказ Тогда
			СтрокаТабличнойЧасти.Заказ = ДанныеДокумента.Заказ;
		КонецЕсли;
		СтрокаТабличнойЧасти.СчетНаОплату = ДанныеДокумента.СчетНаОплату;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтрокаТабличнойЧасти.Договор = ДанныеДокумента.Договор;
			ОбработатьИзменениеДоговораКонтрагента(СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ВыполнитьДействияПриИзмененииДокументаРасчетов();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборДокументаРасчетов()

// Процедура определяет признак аванса в зависимости от типа документа расчетов.
//
&НаКлиенте
Процедура ВыполнитьДействияПриИзмененииДокументаРасчетов()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ВидОперацииПокупателю Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
			
			СтрокаТабличнойЧасти.ПризнакАванса = Истина;
			
			КурсКратностьДокументаРасчетов = РасчетыРаботаСФормамиВызовСервера.ПолучитьКурсКратностьДокументаРасчетов(СтрокаТабличнойЧасти.Документ);
			
			Если ЗначениеЗаполнено(КурсКратностьДокументаРасчетов) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, КурсКратностьДокументаРасчетов);
				РасшифровкаПлатежаКурсПриИзмененииФрагмент(СтрокаТабличнойЧасти);
			КонецЕсли;
			
			
		Иначе
			
			СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ВидОперацииПоставщику 
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		
		СтрокаТабличнойЧасти.ПризнакАванса = НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
			СтрокаТабличнойЧасти.СпособЗачета = СпособЗачетаВручную;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЭтоВзаимозачет = (ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет"));
	
КонецПроцедуры // ВыполнитьДействияПриИзмененииДокументаРасчетов()

// Процедура заполняет расшифровку платежа.
//
&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежа(ТекущийОбъект = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьРасшифровкуПлатежа();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьРасшифровкуПлатежа()

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.УчитыватьВНУ = СтатьяУчитываетсяВНУ(Объект.Статья, Объект.Организация, Объект.Дата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовНажатие(Элемент)
	
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредствНажатие(Элемент)
	
	РаботаСФормойДокументаКлиент.ОткрытьОтчетДенежныеСредства(Объект.БанковскийСчет, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредствОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетДенежныеСредства(Объект.БанковскийСчет, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	
	НастроитьЭлементыРаспределенияДолговНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		
		СуммаИтог = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		Если СуммаИтог <> 0 И СуммаИтог <> Объект.СуммаДокумента Тогда
			НадписьВСкобках = ?(Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную, 
				НСтр("ru = 'разнесено вручную'"), 
				НСтр("ru = 'зачтено + аванс'"));
			
			Элемент.СписокВыбора.Добавить(СуммаИтог, ""+СуммаИтог+" ("+НадписьВСкобках+")");
		КонецЕсли;
		
		Если ОстатокВзаиморасчетов < 0 И (-ОстатокВзаиморасчетов) <> Объект.СуммаДокумента Тогда
			Элемент.СписокВыбора.Добавить(-ОстатокВзаиморасчетов, ""+(-ОстатокВзаиморасчетов)+НСтр("ru = ' (мы должны)'"));
		КонецЕсли;
		
		Если ОстатокДенежныхСредств > 0 И (ОстатокДенежныхСредств) <> Объект.СуммаДокумента Тогда
			Элемент.СписокВыбора.Добавить(ОстатокДенежныхСредств, ""+(ОстатокДенежныхСредств)+НСтр("ru = ' (остаток на счете)'"));
		КонецЕсли;
		
		Если Элемент.СписокВыбора.Количество() = 0 Тогда
			Элемент.СписокВыбора.Добавить(Объект.СуммаДокумента, НСтр("ru = 'Нет данных для заполнения'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПлатежаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.НазначениеПлатежа", НСтр("ru='Назначение платежа'"));
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.СуммаДокумента = ВыбранноеЗначение;
	СуммаДокументаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойКлиент.ПриРегулированииПериодаРегистрации(ЭтотОбъект, Направление);
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
	
КонецПроцедуры //ПериодРегистрацииРегулирование()

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	 = Ложь;
	
	ДатаКалендаряПриОткрытии = ?(ЗначениеЗаполнено(Объект.ПериодРегистрации), Объект.ПериодРегистрации, УправлениеНебольшойФирмойПовтИсп.ПолучитьТекущуюДатаСеанса());
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", УправлениеНебольшойФирмойКлиент.ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии), ЭтотОбъект);
	
КонецПроцедуры //ПериодРегистрацииНачалоВыбора()

&НаКлиенте
Процедура ПодотчетникПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику") Тогда
		Объект.Подразделение = РасчетыРаботаСФормамиВызовСервера.ПолучитьТекущееПодразделениеСотрудника(Объект.Подотчетник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьПодсказкуНажатие(Элемент)
	ИзменитьОтображениеПодсказки(Элементы, Объект.ВидОперации, Ложь);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.СпособЗачета.Пустая() Тогда
				ТекущиеДанные.СпособЗачета = СпособЗачетаПоУмолчаниюДляКонтрагента;
			КонецЕсли;
			
			Если НЕ Копирование Тогда
				РасчетыРаботаСФормамиКлиент.ЗаполнитьДоговорВНовойСтрокеРасшифровки(ЭтотОбъект, ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередУдалением табличной части РасшифровкаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() <= 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаПередУдалением()

// Процедура - обработчик события ПослеУдаления табличной части РасшифровкаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаДоговор.
// Устанавливает курс и кратность валюты договора.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	ОбработатьИзменениеДоговораКонтрагента(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РасшифровкаПлатежаДоговорПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода РасшифровкаПлатежаДоговор.
// Устанавливает курс и кратность валюты договора.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ОбработатьНачалоВыбораДоговораКонтрагента(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",Новый Структура("Владелец, Организация, ВидДоговора, ОповеститьОЗаписиДоговора",Объект.Контрагент,Объект.Организация,ВидДоговораПриСоздании(Объект.ВидОперации), Истина), Элемент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидДоговораПриСоздании(ВидОперации)
	Если ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
		Возврат Перечисления.ВидыДоговоров.СПокупателем;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации Тогда
		Возврат Перечисления.ВидыДоговоров.СПоставщиком;
	Иначе
		Возврат Перечисления.ВидыДоговоров.Прочее;
	КонецЕсли;
КонецФункции

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаВидРасчетов.
// Очищает реквизит документ если тип расчетов - "Аванс".
//
&НаКлиенте
Процедура РасшифровкаПлатежаПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации") Тогда
		Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.ДокументПланирования = Неопределено;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю")
		И ВестиРасчетыПоДокументам Тогда
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			СтрокаТабличнойЧасти.ПризнакАванса = Истина;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данного типа документа расчетов признак аванса всегда установлен!'"));
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
			СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данного типа документа расчетов нельзя установить признак аванса!'"));
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса , СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры // РасшифровкаПлатежаПризнакАвансаПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода РасшифровкаПлатежаДокумент.
// Передает в параметры текущее значение реквизита.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено И СтрокаТабличнойЧасти.СпособЗачета = СпособЗачетаАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоРасчетыСПокупателями = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю");
	
	СтруктураОтбор = Новый Структура();
	СтруктураОтбор.Вставить("Контрагент", Объект.Контрагент);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураОтбор.Вставить("Договор", СтрокаТабличнойЧасти.Договор);
	КонецЕсли;
	Если НЕ УчетПоКомпании Тогда
		СтруктураОтбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("Отбор, ЭтоРасчетыСПокупателями, ТипДокумента",
		СтруктураОтбор,
		ЭтоРасчетыСПокупателями,
		ТипЗнч(Объект.Ссылка)
	);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыборДокументаРасчетов", СтруктураПараметры, Элемент);
	
КонецПроцедуры // РасшифровкаПлатежаДокументНачалоВыбора()

// Процедура - обработчик события ОбработкаВыбора поля ввода РасшифровкаПлатежаДокумент.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьВыборДокументаРасчетов(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля вв РасшифровкаПлатежаСуммаРасчетов.
// Расчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаРасчетовПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаСуммаРасчетовПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаКурс.
// Расчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзменении(Элемент)
	
	РасшифровкаПлатежаКурсПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежа");
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаКурс.
// Расчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзмененииФрагмент(ТекущиеДанные)
	
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, ТекущиеДанные, "Курс");
		
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаКратность.
// Расчитывает сумму платежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаКратностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежа.ТекущиеДанные, "Кратность");
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаКратностьПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСуммаПлатежа.
// Расчитывает курс и кратность валюты расчетов и сумму НДС.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(СтрокаТабличнойЧасти,
		Объект.Дата, Объект.ВалютаДенежныхСредств, Курс, Кратность, СтавкаНДСПоУмолчанию
	);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
		
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры // РасшифровкаПлатежаСуммаПлатежаПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаСтавкаНДС.
// Расчитывает сумму НДС.
//
&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РасшифровкаПлатежаСтавкаНДСПриИзменении()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаДокумент.
//
&НаКлиенте
Процедура РасшифровкаПлатежаДокументПриИзменении(Элемент)
	
	ВыполнитьДействияПриИзмененииДокументаРасчетов();
	
КонецПроцедуры // РасшифровкаПлатежаДокументПриИзменении() 

// Процедура - обработчик события ПриИзменении поля ввода ВыплатаЗаработнойПлатыВедомость.
//
&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	ПараметрыВедомости = ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении(СтрокаТабличнойЧасти.Ведомость);
	СтрокаТабличнойЧасти.Подразделение = ПараметрыВедомости.Подразделение;
	СтрокаТабличнойЧасти.СуммаПлатежа = ПараметрыВедомости.СуммаПлатежа;
	
КонецПроцедуры // ВыплатаЗаработнойПлатыВедомостьПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаСчетНаОплатуПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииПокупателю 
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		РасшифровкаПлатежаСчетНаОплатуПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетНаОплатуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыДляФормыВыбора = Новый Структура();
	ПараметрыДляФормыВыбора.Вставить("Отбор", Новый Структура("Договор, Контрагент", Элементы.РасшифровкаПлатежа.ТекущиеДанные.Договор, Объект.Контрагент));
	
	Если Объект.ВидОперации = ВидОперацииПоставщику 
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ОповещениеОЗакрытииФормыВыбора = Новый ОписаниеОповещения("РасшифровкаПлатежаСчетНаОплатуНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.СчетНаОплатуПоставщика.ФормаВыбора", ПараметрыДляФормыВыбора, ЭтотОбъект, УникальныйИдентификатор,,, ОповещениеОЗакрытииФормыВыбора);
	Иначе
		ОповещениеОЗакрытииФормыВыбора = Новый ОписаниеОповещения("РасшифровкаПлатежаСчетНаОплатуНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.СчетНаОплату.ФормаВыбора", ПараметрыДляФормыВыбора, ЭтотОбъект, УникальныйИдентификатор,,, ОповещениеОЗакрытииФормыВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСчетНаОплатуНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаСчетНаОплатуНачалоВыбораЗавершение(ЭтотОбъект, Результат, ДополнительныеПараметры);
	РасшифровкаПлатежаСчетНаОплатуПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСчетНаОплатуПриИзмененииФрагмент(ТекущиеДанныеИдентификатор)
	
	ТекущиеДанные = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	
	РасчетыРаботаСФормамиВызовСервера.ПроверитьСовпадениеДоговораВСтрокеИВСчетеНаОплату(ЭтотОбъект, ТекущиеДанные);
	
	Если Объект.ВидОперации = ВидОперацииПоставщику 
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		// Определим заказ, если он не заполнен.
		Если Объект.Контрагент.ВестиРасчетыПоЗаказам Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.СчетНаОплату) Тогда
				ТекущиеДанные.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
				Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Заказ) И
					ТипЗнч(ТекущиеДанные.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И
					ТипЗнч(ТекущиеДанные.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
					ТекущиеДанные.Заказ = ТекущиеДанные.СчетНаОплату.ДокументОснование;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперацииПоставщику 
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ИзменилиСуммуПлатежа = РасшифровкаПлатежаЗаказПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
		Если ИзменилиСуммуПлатежа И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
			СуммаДокументаПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РасшифровкаПлатежаЗаказПриИзмененииФрагмент(ТекущиеДанныеИдентификатор)
	
	Возврат РасчетыРаботаСФормамиВызовСервера.РасшифровкаПлатежаЗаказПриИзмененииФрагмент(Объект, ТекущиеДанныеИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДокументыПланированияРасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.СуммаРасчетов = ТекущаяСтрока.СуммаПлатежа;
	КонецЕсли;
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетникомРасшифровкаПлатежаСчетНаОплатуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыПланированияРасшифровкаПлатежа.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВидНалога

&НаКлиенте
Процедура ВидНалогаПриИзменении(Элемент)
	Если Объект.ВидНалога = ПредопределенноеЗначение("Справочник.ВидыНалогов.Патент") Тогда
		Объект.УчитыватьВНУ = Ложь;
	КонецЕсли;
	ЗаполнитьНазначениеПлатежаНаСервере();
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		Объект.СрокУплаты = ПолучитьСрокУплаты(Объект.ВидНалога, Объект.Дата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидНалогаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДвиженияДенежныхСредствВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНалогаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДвиженияДенежныхСредствВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик события Выполнить команды Подбор.
// Открывает форму подбора долгообразующих документов.
//
&НаКлиенте
Процедура Подбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
	   И НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале банковский счет!'"));
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкаПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"АдресРасшифровкаПлатежаВХранилище,
		|Компания,
		|Дата,
		|Контрагент,
		|Ссылка,
		|ВидОперации,
		|ВалютаДенежныхСредств,
		|СуммаДокумента",
		АдресРасшифровкаПлатежаВХранилище,
		Компания,
		Объект.Дата,
		Объект.Контрагент,
		Объект.Ссылка,
		Объект.ВидОперации,
		Объект.ВалютаДенежныхСредств,
		Объект.СуммаДокумента
	);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораДолговПоставщикам", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект, Новый Структура("АдресРасшифровкаПлатежаВХранилище",
		АдресРасшифровкаПлатежаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	АдресРасшифровкаПлатежаВХранилище = ДополнительныеПараметры.АдресРасшифровкаПлатежаВХранилище;
	
	
	Результат = Результат1;
	Если Результат = КодВозвратаДиалога.OK Тогда
		
		ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище);
		ИмяТабличнойЧасти = "РасшифровкаПлатежа";
		Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.СтавкаНДС) Тогда
				СтрокаРасшифровкаПлатежа.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, СтрокаРасшифровкаПлатежа);
			СтрокаРасшифровкаПлатежа.СпособЗачета = СпособЗачетаВручную;
		КонецЦикла;
		
		УстановитьТекущуюСтраницу();
		
		Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // Подбор()

// Процедура вызывается при нажатии кнопки "ЗаполнитьПоОснованию" командной панели
// табличного поля.
//
&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Не выбран документ основание.'"));
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеДСПлан")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан"))
		И НЕ ДокументУтвержден(Объект.ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести перемещение денег на основании неутвержденного планового документа.'");
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен по ""Документу-основанию"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.БанковскийСчет = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		
		Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Зарплата")
			И Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			ДобавитьПервуюСтрокуРасшифровкиНаСервере();
		КонецЕсли;
		
		ВидОперации = Объект.ВидОперации;
		ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
		ДатаДокумента = Объект.Дата;
		
		УстановитьТекущуюСтраницу();
		
		ЗаполнитьПоОснованиюЗавершениеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоОснованию()

&НаСервере
Процедура ЗаполнитьПоОснованиюЗавершениеНаСервере()
	
	ВидОперацииПриИзмененииНаСервере(Ложь);
	
	ЗаполнитьДоговор();
	
	Если (Объект.ВидОперации = ВидОперацииПоставщику ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации) И Объект.ВариантЗаполненияРасшифровки <> ВариантЗаполненияРасшифровкиВручную Тогда
		Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную;
		НастроитьЭлементыРаспределенияДолговНаСервере();
	КонецЕсли;
	
	Если НЕ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеДСПлан")) Тогда
		
		УстановитьСтатьюДДС();
		Если НЕ Объект.Контрагент.Пустая() И НЕ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			УстановитьСтатьиДДСВРасшифровкеПлатежа();
		КонецЕсли;
		
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыКурсИКратность(ЭтотОбъект);
	ОбновитьВидимостьИОстаткиДС();
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ВалютаДенежныхСредств <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ТекстСообщения = НСтр("ru = 'Валюта оплаты отличается от национальной!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на оборудовании!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПоказыватьПредупреждение = Ложь;
	Если НЕ УправлениеНебольшойФирмойКлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект, ПоказыватьПредупреждение) Тогда
		Если ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияФискальногоРегистратораЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьЧекВыполнить()

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР, ЭтоВозврат) 
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	РозничныеПродажиСервер.ДополнитьТоварамиПараметрыПриПробитииЧека(Объект, ОбщиеПараметры);
	СуммаСтрокЧека = РозничныеПродажиСервер.СуммаСтрокЧека(ОбщиеПараметры);
	
	// Общие параметры чека
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "НаименованиеПолное,ИНН,КПП");
	
	КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ИдентификаторУстройстваФР);
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена касса ККМ соответсвующая устройству %устройство%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%устройство%", ИдентификаторУстройстваФР);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование,СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ, СтруктураРеквизитов);
	
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор, Объект.ПодписьКассира);
	
	ОбщиеПараметры.ТипРасчета = ?(ЭтоВозврат,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств);
		
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = "+7" + РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Объект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = Объект.АдресЭП;
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыКассыККМ.СтруктурнаяЕдиница;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.КассаККМ = КассаККМ;
	ОбщиеПараметры.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	
	АдресМагазина = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Объект.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(Объект.Организация);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		Объект.Организация,
		,
		Объект.Дата,
		Объект.СпециальныйНалоговыйРежим);
		
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Электронно, НСтр("ru = 'Электронно'"), Объект.СуммаДокумента);
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	РазницаСумм = СуммаСтрокЧека - Объект.СуммаДокумента;
	Если РазницаСумм > 0 Тогда
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), РазницаСумм);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

&НаКлиенте
Процедура ПодключенияФискальногоРегистратораЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю");
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР, ЭтоВозврат);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	Контекст = Новый Структура("КассаККМ", ОбщиеПараметры.КассаККМ);
	
	Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
	
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
		Оповещение, 
		УникальныйИдентификатор, 
		ОбщиеПараметры, 
		ИдентификаторУстройстваФР,
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
			Объект.КассаККМ = Параметры.КассаККМ;
		КонецЕсли;
		
		Объект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

// Процедура - обработчик команды ЗаполнитьРасшифровку.
//
&НаКлиенте
Процедура ЗаполнитьРасшифровку(Команда)
	
	Если Объект.СуммаДокумента = 0 Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru='Укажите вначале сумму документа.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) И Не ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале банковский счет.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРасшифровкуЗавершение", ЭтотОбъект), 
		НСтр("ru='Расшифровка будет полностью перезаполнена. Продолжить?'"),
		РежимДиалогаВопрос.ДаНет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации") Тогда
		
		ЗаполнитьРасшифровкуПлатежа();
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницу();
	
КонецПроцедуры // ЗаполнитьРасшифровку()

&НаКлиенте
Процедура ОбновитьКурсВТекущейСтрокеРасшифровки(Команда)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю") 
		И ЗначениеЗаполнено(ТекущиеДанные.Документ) И ТекущиеДанные.ПризнакАванса Тогда
		
		КурсКратностьДокументаРасчетов = РасчетыРаботаСФормамиВызовСервера.ПолучитьКурсКратностьДокументаРасчетов(ТекущиеДанные.Документ);
		ТекущиеДанные.Курс = КурсКратностьДокументаРасчетов.Курс;
		ТекущиеДанные.Кратность = КурсКратностьДокументаРасчетов.Кратность;
		
	Иначе
		СтруктураДанных = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(Объект.Дата, ТекущиеДанные.Договор);
		ТекущиеДанные.Курс = СтруктураДанных.ДоговорВалютаКурсКратность.Курс;
		ТекущиеДанные.Кратность = СтруктураДанных.ДоговорВалютаКурсКратность.Кратность;
	КонецЕсли;
	
	РасшифровкаПлатежаКурсПриИзмененииФрагмент(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ШапкаТабличнаяЧасть(Команда)
	
	ПараметрыДиалога = Новый Структура;
	ЗаполнитьПараметрыДиалогаШапкаТабличнаяЧасть(ПараметрыДиалога);
	
	ОткрытьФорму(
	"ОбщаяФорма.ШапкаТабличнаяЧасть",
	ПараметрыДиалога,,,,,
	Новый ОписаниеОповещения("ШапкаТабличнаяЧастьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыДиалогаШапкаТабличнаяЧасть(ПараметрыДиалога)
	
	Если НЕ ДоговорЭквайринга.РасчетКомиссиВОтчетеЭквайера Тогда
		ПараметрыДиалога.Вставить("ПоложениеЭквайринговогоТерминалаВБанковскихДокументах", Объект.ПоложениеЭквайринговогоТерминала);
	КонецЕсли;
	
	ПараметрыДиалога.Вставить("ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах", Объект.ПоложениеНастроекНалоговогоУчета);
	ПараметрыДиалога.Вставить("БылиВнесеныИзменения", Ложь);
	
КонецПроцедуры


&НаКлиенте
Процедура ШапкаТабличнаяЧастьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.БылиВнесеныИзменения Тогда
		ШапкаТабличнаяЧастьЗавершениеНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ШапкаТабличнаяЧастьЗавершениеНаСервере(Знач Результат)
	
	Если Результат.Свойство("ПоложениеЭквайринговогоТерминалаВБанковскихДокументах") Тогда
		Объект.ПоложениеЭквайринговогоТерминала = Результат.ПоложениеЭквайринговогоТерминалаВБанковскихДокументах;
	КонецЕсли;
	
	Если Результат.Свойство("ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах") Тогда
		Объект.ПоложениеНастроекНалоговогоУчета = Результат.ПоложениеНастроекНалоговогоУчетаВБанковскихДокументах;
	КонецЕсли;
	
	Если Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти И ЗначениеЗаполнено(Объект.ЭквайринговыйТерминал) Тогда
		Если Объект.ЭквайринговыеОперации.Количество() = 0 Тогда
			Объект.ЭквайринговыеОперации.Добавить(); 
		КонецЕсли; 
		Для каждого ОперацияЭквайринга Из Объект.ЭквайринговыеОперации Цикл
			 ОперацияЭквайринга.ЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	КонецЕсли;
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации();
	УстановитьВидимостьОтПользовательскихНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_РасходСоСчета"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	Если Модифицированность Тогда
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет проведен. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести и продолжить'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет записан. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаПродолжение", ЭтотОбъект);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
	Иначе
		ПредварительныйПросмотрЧекаПродолжение(Неопределено, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Объект.Проведен Тогда
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		Если Не РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю");
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР, ЭтоВозврат);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	УправлениеНебольшойФирмойКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтаФорма, ИдентификаторУстройстваФР);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхССервера

// Получает набор данных с сервера для процедуры ВалютаДенежныхСредствПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеБанковскийСчетПриИзменении(Дата, БанковскийСчет, СчетКонтрагента)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", БанковскийСчет.ВалютаДенежныхСредств)
		)
	);
	
	СтруктураДанные.Вставить(
		"ВалютаДенежныхСредств",
		БанковскийСчет.ВалютаДенежныхСредств
	);
	
	СтруктураДанные.Вставить(
		"СчетКонтрагента",
		?(ЗначениеЗаполнено(СчетКонтрагента) И СчетКонтрагента.ВалютаДенежныхСредств = БанковскийСчет.ВалютаДенежныхСредств, СчетКонтрагента, Неопределено)
	);
	
	ОбновитьВидимостьИОстаткиДС(Объект.БанковскийСчет);
	
	УстановитьЗаголовкиКолонокТабличныхЧастей(СтруктураДанные.ВалютаДенежныхСредств);
	
	УстановитьВидимостьКурсаВалюты(БанковскийСчет.ВалютаДенежныхСредств);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеБанковскийСчетПриИзменении()

&НаСервере
Процедура УстановитьСтатьиДДСВРасшифровкеПлатежа()
	
	Для Каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
			ТекущаяСтрока.СтатьяДДС = ДвиженияДенежныхСредствВызовСервера.ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(ТекущаяСтрока.Договор,
				ТекущаяСтрока.ДокументПланирования,
				ТекущаяСтрока.СтатьяДДС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"Компания",
		УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация)
	);
	
	СтруктураДанные.Вставить(
		"БанковскийСчет",
		?(ЗначениеЗаполнено(Объект.БанковскийСчет) И Объект.БанковскийСчет.Владелец = Объект.Организация, Объект.БанковскийСчет, Объект.Организация.БанковскийСчетПоУмолчанию)
	);
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Объект.Дата,
			Новый Структура("Валюта", СтруктураДанные.БанковскийСчет.ВалютаДенежныхСредств)
		)
	);
	
	СтруктураДанные.Вставить(
		"ВалютаДенежныхСредств",
		СтруктураДанные.БанковскийСчет.ВалютаДенежныхСредств
	);
	
	СтруктураДанные.Вставить(
		"СчетКонтрагента",
		?(ЗначениеЗаполнено(Объект.СчетКонтрагента) И СтруктураДанные.БанковскийСчет.ВалютаДенежныхСредств = Объект.СчетКонтрагента.ВалютаДенежныхСредств, Объект.СчетКонтрагента, Справочники.БанковскиеСчета.ПустаяСсылка())
	);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	ОбновитьВидимостьИОстаткиДС(СтруктураДанные.БанковскийСчет);
	
	УстановитьЗаголовкиКолонокТабличныхЧастей(СтруктураДанные.ВалютаДенежныхСредств);
	
	УстановитьВидимостьКурсаВалюты(СтруктураДанные.БанковскийСчет.ВалютаДенежныхСредств);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

// Получает набор данных с сервера для процедуры ВыплатаЗаработнойПлатыВедомостьПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении(Ведомость)
	
	ПараметрыВедомости = Новый Структура;
	ПараметрыВедомости.Вставить("Подразделение", Ведомость.СтруктурнаяЕдиница);
	ПараметрыВедомости.Вставить("СуммаПлатежа", Ведомость.Сотрудники.Итог("СуммаПлатежа"));
	
	Возврат ПараметрыВедомости;
	
КонецФункции // ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении()

// Получает набор данных с сервера для процедуры СотрудникПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСотрудникПриИзменении(Сотрудник, Дата, Организация)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("ДоговорКредитаЗайма", Документы.ДоговорКредитаИЗайма.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Сотрудник, Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПодотчетникПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументаПланированияПриИзменении(ДокументПланирования)
	
	СтруктураДанных = Новый Структура("СтатьяДДС", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходДСПлан.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.РасходДСПлан КАК РасходДСПлан
		|ГДЕ
		|	РасходДСПлан.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПланирования);
	
	Если ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходДСПлан КАК РасходДСПлан", "Документ.ПеремещениеДСПлан КАК РасходДСПлан");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураДанных.Вставить("СтатьяДДС", Выборка.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Получает набор данных с сервера для процедуры КонтрагентПриИзменении.
//
&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, Организация, Дата)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"ДоговорВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)
		)
	);
	
	СтруктураДанные.Вставить(
		"ВестиРасчетыПоДокументам",
		Контрагент.ВестиРасчетыПоДокументам
	);
	
	СтруктураДанные.Вставить(
		"ВестиРасчетыПоДоговорам",
		Контрагент.ВестиРасчетыПоДоговорам
	);
	
	// Прочие расчеты
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
		ДоговорКредитаЗаймаПоУмолчанию = ПолучитьДоговорКредитаЗаймаПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
		СтруктураДанные.Вставить(
			"ДоговорКредитаЗаймаПоУмолчанию",
			ДоговорКредитаЗаймаПоУмолчанию
		);
	КонецЕсли;
	
	СтруктураДанные.Вставить(
			"КорреспонденцияПрочихРасчетов",
			Контрагент.СчетУчетаРасчетовСПоставщиком
		);
	// Конец Прочие расчеты
	СтруктураДанные.Вставить("СпособЗаполненияСтавкиНДС", Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
			ДоговорПоУмолчанию));
	
	УстановитьВидимостьРеквизитовРасчетов();
	
	СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", Контрагент.СтатьяДДСПоУмолчанию);
	Если ЗначениеЗаполнено(Контрагент.СтатьяДДСПоУмолчанию) Тогда
		СтруктураДанные.Вставить("УчитыватьВНУ", СтатьяУчитываетсяВНУ(Контрагент.СтатьяДДСПоУмолчанию, Организация, Дата));
	Иначе
		СтруктураДанных = ПолучитьДанныеСтатьиДДС();
		СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", СтруктураДанных.Статья);
		СтруктураДанные.Вставить("УчитыватьВНУ", СтруктураДанных.УчитыватьВНУ);
	КонецЕсли;
	
	СтруктураДанные.Вставить("СпособЗачета", РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(ДоговорПоУмолчанию, Контрагент, Ложь));
	СпособЗачетаПоУмолчаниюДляКонтрагента = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляКонтрагента(Объект.Контрагент, Ложь);
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ДанныеКИКонтрагента = УправлениеНебольшойФирмойСервер.ПолучитьДанныеКИКонтрагентаДляВыбораНаФорме(Контрагент, Элементы, ПоляКИДляОтправкиЧека());
		ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ЗначениеЗаполнено(ДоговорПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		СтруктураДанные.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

#КонецОбласти

// Процедура обработки изменения поля Вид операции на сервере.
//
&НаСервере
Процедура УстановитьСтатьюДДСПриСменеВидаОперации()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
		И (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	ИначеЕсли (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации)
		И (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
	ИначеЕсли (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	КонецЕсли;
	
	Если Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		И (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит) Тогда
		Объект.УчитыватьВНУ = Истина;
	Иначе
		Если ЗначениеЗаполнено(Объект.Статья) Тогда
			Объект.УчитыватьВНУ = Объект.Статья.УчитыватьВНУ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьСтатьюДДСПриСменеВидаОперации()

// Процедура обработки изменения поля Вид операции на сервере.
//
&НаСервере
Процедура УстановитьСтатьюДДС()
	
	СтруктураДанных = ПолучитьДанныеСтатьиДДС();
	
	Объект.Статья = СтруктураДанных.Статья;
	Объект.УчитыватьВНУ = СтруктураДанных.УчитыватьВНУ;
	
КонецПроцедуры // УстановитьСтатьюДДС()

&НаСервере
Процедура ЗаполнитьИнформациюОСуммеИВалютеОснования()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Попытка
			ДокументОснованиеСумма = Объект.ДокументОснование.СуммаДокумента;
			ДокументОснованиеВалютаПредставление = Объект.ДокументОснование.ВалютаДокумента.СимвольноеПредставление;
		Исключение
			// Нет реквизита "СуммаДокумента" или "ВалютаДокумента".
			ДокументОснованиеСумма = 0;
			ДокументОснованиеВалютаПредставление = "";
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывает обработку заполнения документа по основанию.
//
&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС(Ложь);
	УстановитьВидимостьРеквизитовРасчетов();
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	ЗаполнитьИнформациюОСуммеИВалютеОснования();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

// Функция помещает табличную часть РасшифровкаРасчетов во временное хранилище
// и возвращает адрес
//
&НаСервере
Функция ПоместитьРасшифровкаПлатежаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.РасшифровкаПлатежа.Выгрузить(,
			"Договор,
			|ПризнакАванса,
			|Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СпособЗачета,
			|СуммаПлатежа"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

// Функция получает табличную часть РасшифровкаРасчетов из временного хранилища.
//
&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище, Очищать = Истина)
	
	ТаблицаРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресРасшифровкаПлатежаВХранилище);
	Если Очищать Тогда
		Объект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	Для каждого СтрокаРасшифровкаПлатежа Из ТаблицаРасшифровкаПлатежа Цикл
		Строка = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаРасшифровкаПлатежа);
		Если НЕ Строка.Договор.Пустая() Тогда
			Строка.СтатьяДДС = Строка.Договор.СтатьяДДСПоУмолчанию;
		КонецЕсли;
		Если Строка.СпособЗачета.Пустая() И (Объект.ВидОперации = ВидОперацииПоставщику
				ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации) Тогда
			Строка.СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Строка.Договор, Объект.Контрагент, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьРасшифровкаПлатежаИзХранилища()

// Выполняет пересчет сумм по валюте табличной части документа после изменения
// банковского счета или кассы.
//
&НаСервере
Процедура ПересчитатьСуммыДокумента(Курс, Кратность, ПересчитатьСуммуПлатежа, ДополнительныеПараметры)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаТабличнойЧасти.Договор.ВалютаРасчетов = Объект.ВалютаДенежныхСредств Тогда
			Если ПересчитатьСуммуПлатежа Тогда
				СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаРасчетов;
				СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
				РасчетыРаботаСФормамиВызовСервера.РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
			Иначе
				СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ПересчитатьСуммуПлатежа Тогда
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				Курс,
				СтрокаТабличнойЧасти.Кратность,
				Кратность
			);
			СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
			РасчетыРаботаСФормамиВызовСервера.РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.Курс = ?(
				СтрокаТабличнойЧасти.Курс = 0,
				1,
				СтрокаТабличнойЧасти.Курс
			);
			СтрокаТабличнойЧасти.Кратность = ?(
				СтрокаТабличнойЧасти.Кратность = 0,
				1,
				СтрокаТабличнойЧасти.Кратность
			);
			СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаПлатежа,
				Курс,
				СтрокаТабличнойЧасти.Курс,
				Кратность,
				СтрокаТабличнойЧасти.Кратность
			);
		КонецЕсли;
	КонецЦикла;
	
	// Если нужно, то пересчитаем суммы в ТЧ ДоговорыАвтоЗачетаДолгов.
	Если ПересчитатьСуммуПлатежа Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	Если Объект.ВидОперации = ВидОперацииПомощника Тогда
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
		
КонецПроцедуры // ПересчитатьСуммыДокумента()

// Выполняет пересчет сумм по валюте денежных средств.
//
&НаКлиенте
Процедура ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения)
	
	КурсПередИзменением = Курс;
	КратностьПередИзменением = Кратность;
	
	Если ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Курс = ?(
			СтруктураДанные.ВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ВалютаКурсКратность.Курс
		);
		Кратность = ?(
			СтруктураДанные.ВалютаКурсКратность.Кратность = 0,
			1,	
			СтруктураДанные.ВалютаКурсКратность.Кратность
		);
	КонецЕсли;
	
	// Если курс валюты не изменился или не заполнена валюта денежных средств
	// или документ не заполнен, то ничего не делаем.
	Если (Курс = КурсПередИзменением
		И Кратность = КратностьПередИзменением)
	 ИЛИ (НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств))
	 ИЛИ (Объект.РасшифровкаПлатежа.Итог("СуммаРасчетов") = 0
	 И НЕ ЗначениеЗаполнено(Объект.СуммаДокумента)) Тогда
		
		// Обновить курсы расчетов
		// Если в расшифровке платежа есть курс <> 1, то предложим его перезаполнить.
		Если СтруктураДанные.Свойство("ОбновитьКурсыРасчетов") И СтруктураДанные.ОбновитьКурсыРасчетов Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы", ЭтотОбъект), СтруктураДанные.ОбновитьКурсыРасчетовТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		// Конец Обновить курсы расчетов
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КурсПередИзменением", КурсПередИзменением);
	ДополнительныеПараметры.Вставить("КратностьПередИзменением", КратностьПередИзменением);
	
	// Обновить курсы расчетов
	Если СтруктураДанные.Свойство("ОбновитьКурсыРасчетов") Тогда
		ДополнительныеПараметры.Вставить("ОбновитьКурсыРасчетов", СтруктураДанные.ОбновитьКурсыРасчетов);
		ДополнительныеПараметры.Вставить("ОбновитьКурсыРасчетовТекстВопроса", СтруктураДанные.ОбновитьКурсыРасчетовТекстВопроса);
	КонецЕсли;
	// Конец Обновить курсы расчетов
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОпределитьНеобходимостьПересчетаСуммПриИзмененииКурса", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры // ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств()

// Процедура-обработчик ответа на вопрос о пересчете документа после изменения курса валюты
//
&НаКлиенте
Процедура ОпределитьНеобходимостьПересчетаСуммПриИзмененииКурса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = КодВозвратаДиалога.Да Тогда
		
		КурсПередИзменением = ДополнительныеПараметры.КурсПередИзменением;
		КратностьПередИзменением = ДополнительныеПараметры.КратностьПередИзменением;
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0
		   И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Зарплата") Тогда // для вида операции "Зарплата" пересчитывается только шапка.
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации") Тогда
				ПересчитатьСуммыДокумента(Курс, Кратность, Истина, ДополнительныеПараметры);
			// Прочие расчеты
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПрочиеРасчеты") Тогда
				ПересчитатьСуммыДокумента(Курс, Кратность, Истина, ДополнительныеПараметры);
			// Конец Прочие расчеты
			Иначе
				СуммаДокументаРавнаИтогуСуммыПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") = Объект.СуммаДокумента;
				
				Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл // для видов операций с планируемыми платежами пересчитываем сумму плана.
					СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
						СтрокаТабличнойЧасти.СуммаПлатежа,
						КурсПередИзменением,
						Курс,
						КратностьПередИзменением,
						Кратность
					);
					
					РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
				КонецЦикла;
					
				Если СуммаДокументаРавнаИтогуСуммыПлатежа Тогда
					Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				Иначе
					Объект.СуммаДокумента = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
						Объект.СуммаДокумента,
						КурсПередИзменением,
						Курс,
						КратностьПередИзменением,
						Кратность
					);
				КонецЕсли;
				
				ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
				
			КонецЕсли;
		Иначе
			Объект.СуммаДокумента = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				Объект.СуммаДокумента,
				КурсПередИзменением,
				Курс,
				КратностьПередИзменением,
				Кратность
			);
		КонецЕсли;
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПересчитатьСуммыДокумента(Курс, Кратность, Ложь, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	// Обновить курсы расчетов
	Если НЕ ((Объект.ВидОперации = ВидОперацииПоставщику ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации) И Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиАвтоматически) Тогда
		Если ДополнительныеПараметры.Свойство("ОбновитьКурсыРасчетов")  И ДополнительныеПараметры.ОбновитьКурсыРасчетов Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы", ЭтотОбъект),
				ДополнительныеПараметры.ОбновитьКурсыРасчетовТекстВопроса,
				РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	// Конец Обновить курсы расчетов
	
КонецПроцедуры // ОпределитьНеобходимостьПересчетаСуммПриИзмененииКурса()

// Процедура устанавливает видимость реквизитов расчетов.
//
&НаСервере
Процедура УстановитьВидимостьРеквизитовРасчетов()
	
	СтруктураРеквизитыРасчетов = РасчетыРаботаСФормамиВызовСервера.УстановитьВидимостьРеквизитовРасчетовФрагмент(ЭтотОбъект);
	
	Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Объект.Контрагент.ВестиУчетОплатыПоСчетам;
	
	// Прочие расчеты
	Элементы.РасшифровкаПлатежаПрочиеРасчетыДоговор.Видимость = СтруктураРеквизитыРасчетов.ВестиРасчетыПоДоговорам;
	Элементы.РасшифровкаПлатежаПрочиеРасчетыДоговорВалютаРасчетовСимвольноеПредставление.Видимость = СтруктураРеквизитыРасчетов.УчетВалютныхОпераций;
	// Конец Прочие расчеты
	
КонецПроцедуры // УстановитьВидимостьРеквизитовРасчетов()

&НаСервере
Процедура УстановитьВидимостьКурсаВалюты(ВалютаДенежныхСредств)
	
	Элементы.Курс.Видимость = (ВалютаДенежныхСредств <> Константы.НациональнаяВалюта.Получить());
	
КонецПроцедуры

// Процедура обработки изменения поля Вид операции на сервере.
//
&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере(ЗаполнятьНалогообложение = Истина)
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	УстановитьВидимостьПечатиЧека();
	
	// Прочие расчеты
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.СнятиеНаличных
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Объект.РасшифровкаПлатежа[0].СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	// Конец Прочие расчеты
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя Тогда
		Объект.Корреспонденция = ПланыСчетов.Управленческий.НераспределеннаяПрибыль;
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ЛичныеСредстваПредпринимателя;
		Если Объект.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Объект.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ЗаполнятьНалогообложение Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.КомиссияБанка Тогда
		Объект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
	КонецЕсли;
	
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации();
	УстановитьСтатьюДДСПриСменеВидаОперации();
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения
// организации.
//
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС()
	
	Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьСтавкуНДСПоУмолчанию(СтавкаНДСПоУмолчанию, СтавкаНДСПоУмолчаниюЧисло, Объект.НалогообложениеНДС, Объект.Организация);

КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура устанавливает видимость поля Налогообложение.
//
&НаСервере
Процедура УстановитьВидимостьДокументыПланирования()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
		Элементы.ДокументыПланирования.Видимость = Ложь;
	// Эквайринг
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит Тогда
		Если ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
			Элементы.ДокументыПланирования.Видимость = Ложь;
		Иначе
			Элементы.ДокументыПланирования.Видимость = Истина;
		КонецЕсли;
	// Прочие расчеты
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам Тогда
		Элементы.ДокументыПланирования.Видимость = Ложь;
	// Конец Прочие расчеты
	Иначе
		Элементы.ДокументыПланирования.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьНалогообложениеНДС()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(ВосстанавливатьСтавкиНДС = Истина)
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьСтавкуНДСПоУмолчанию(СтавкаНДСПоУмолчанию, СтавкаНДСПоУмолчаниюЧисло, Объект.НалогообложениеНДС, Объект.Организация);
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Истина;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Истина;
			Элементы.СуммаНДС.Видимость = Истина;
			
		КонецЕсли;
		
		Если ВосстанавливатьСтавкиНДС Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДСПоУмолчаниюЧисло + 100) / 100);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			
		КонецЕсли;
		
		Если ВосстанавливатьСтавкиНДС Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
			КонецЦикла;
		Конецесли;
		
	КонецЕсли;
	
	УстановитьВидимостьДокументыПланирования();
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()


// Получает структуру параметров формы выбора договора контрагента.
//
&НаСервереБезКонтекста
Функция ПолучитьПараметрыФормыВыбора(Документ, Организация, Контрагент, Договор, ВидОперации)
	
	СписокВидовДоговоров = Справочники.ДоговорыКонтрагентов.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КонтролироватьВыборДоговора", Контрагент.ВестиРасчетыПоДоговорам);
	ПараметрыФормы.Вставить("Контрагент", Контрагент);
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("ВидыДоговоров", СписокВидовДоговоров);
	ПараметрыФормы.Вставить("ТекущаяСтрока", Договор);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Получает договор по умолчанить в зависимости от способа ведения расчетов.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации) Экспорт
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Проверяет утвержден документ или нет.
//
&НаСервереБезКонтекста
Функция ДокументУтвержден(ДокументОснование)
	
	Возврат ДокументОснование.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.Утвержден;
	
КонецФункции // ДокументУтвержден()

// Заполняет договор.
//
Процедура ЗаполнитьДоговор(Параметры = Неопределено)
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику") И
		Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.РасчетыПоКредитам") Тогда
		
		Если ЗначениеЗаполнено(Объект.Контрагент)
			И Объект.РасшифровкаПлатежа.Количество() > 0
			И (Параметры = Неопределено ИЛИ (Параметры <> Неопределено И НЕ ЗначениеЗаполнено(Параметры.ДокументОснование))) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
				МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
				СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Объект.Ссылка, Объект.ВидОперации);
				Объект.РасшифровкаПлатежа[0].Договор = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
					Объект.Контрагент, Объект.Организация, СписокВидовДоговоров);
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
				ДоговорВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
					?(Объект.Дата = '00010101', ТекущаяДатаСеанса(), Объект.Дата),
					Новый Структура("Валюта", Объект.РасшифровкаПлатежа[0].Договор.ВалютаРасчетов)
				);
				Объект.РасшифровкаПлатежа[0].Курс = ?(ДоговорВалютаКурсКратность.Курс = 0, 1, ДоговорВалютаКурсКратность.Курс);
				Объект.РасшифровкаПлатежа[0].Кратность = ?(ДоговорВалютаКурсКратность.Кратность = 0, 1, ДоговорВалютаКурсКратность.Кратность);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
Конецпроцедуры

&НаСервереБезКонтекста
Функция СтатьяУчитываетсяВНУ(Статья, Организация, Дата)
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Организация, Дата);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "УчитыватьВНУ") И СистемаНалогообложенияСтруктура.ПлательщикУСН;
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	ОстатокВзаиморасчетов = 0;
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		//Только для новых объектов
		Элементы.Контрагент.АвтоМаксимальнаяШирина = Истина;
	Иначе
		Элементы.Контрагент.АвтоМаксимальнаяШирина = Ложь;
		Элементы.Контрагент.МаксимальнаяШирина = 22;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент, ОстатокВзаиморасчетов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиДС(БанковскийСчет = Неопределено)
	
	Если БанковскийСчет = Неопределено Тогда
		ТекущийБанковскийСчет = Объект.БанковскийСчет;
	Иначе
		ТекущийБанковскийСчет = БанковскийСчет;
	КонецЕсли;
	
	Элементы.ОстатокДенежныхСредств.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ТекущийБанковскийСчет);
	ОстатокДенежныхСредств = 0;

	Если НЕ Элементы.ОстатокДенежныхСредств.Видимость Тогда
		//Только для новых объектов
		Элементы.БанковскийСчет.АвтоМаксимальнаяШирина = Истина;
		
		Если ТолькоПросмотр Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Элементы.БанковскийСчет.АвтоМаксимальнаяШирина = Ложь;
		Элементы.БанковскийСчет.МаксимальнаяШирина = 22;
	КонецЕсли;
	
	Элементы.ОстатокДенежныхСредств.Заголовок = ДвиженияДенежныхСредствВызовСервера.ЗаголовокНадписиОстатковДС(ТекущийБанковскийСчет, Объект.Организация, ОстатокДенежныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиПриИзмененииАвансаНаКлиенте() Экспорт
	
	СуммаПлатежаАванс = Объект.РасшифровкаПлатежа.Итог("Аванс");
	СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СуммаЗачтено = СуммаПлатежаДляУсловногоОформления - СуммаПлатежаАванс;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиПриИзмененииАвансаНаСервере()
	
	СуммаПлатежаАванс = Объект.РасшифровкаПлатежа.Итог("Аванс");
	СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СуммаЗачтено = СуммаПлатежаДляУсловногоОформления - СуммаПлатежаАванс;
	
	РассчитатьСуммуНДСПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуНДСПоУмолчаниюНаСервере()
	
	ИтогоРазнесено = Объект.ДоговорыАвтоЗачетаДолгов.Итог("СуммаПлатежа");
	СуммаНДСПоУмолчанию = ИтогоРазнесено - (ИтогоРазнесено) / ((СтавкаНДСПоУмолчаниюЧисло + 100) / 100);
	
КонецПроцедуры

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении()
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		ОпределитьВидимостьНастроекУчетаВНалогообложенииДляОтчетаЭквайера(Истина);
		Возврат;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	
	ПлательщикУСН =  СистемаНалогообложенияСтруктура.ПлательщикУСН;
	
	Если Не ПлательщикУСН Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
	Иначе
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ПрочиеРасчеты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата Тогда
			Элементы.УчитыватьВНУ.Видимость = Истина;
		Иначе
			Элементы.УчитыватьВНУ.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаУчетВНУ.Видимость = Элементы.УчитыватьВНУ.Видимость;
	КонецЕсли;
	
	ОпределитьВидимостьНастроекУчетаВНалогообложенииДляОтчетаЭквайера(Ложь);
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	Если ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.УчитыватьВНУ = СтатьяУчитываетсяВНУ(Объект.Статья, Объект.Организация, Объект.Дата);
	КонецЕсли;
	Объект.СпециальныйНалоговыйРежим = УправлениеНебольшойФирмойСервер.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНазначениеПлатежаНаСервере()
	Перем ВидНалога;
	
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		Период = Объект.Дата;
	Иначе
		Период = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНалога, "ВидНалога");
	КонецЕсли;
	
	ПоказателиНалоговогоПериода = ПлатежиВБюджетКлиентСервер.ПоказателиНалоговогоПериода(Объект.Организация, ВидНалога, Период);
	
	Если ПустаяСтрока(Объект.НазначениеПлатежа) Тогда
		Объект.НазначениеПлатежа = Справочники.ВидыНалогов.НазначениеПлатежа(
			Объект.ВидНалога,,
			Объект.Организация,
			Макс(ПоказателиНалоговогоПериода.Период, Период),
			ПоказателиНалоговогоПериода.ПредставлениеНалоговогоПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтатьиДДС()
	
	СтруктураДляВозврата = Новый Структура;
	
	Если НЕ Объект.Контрагент.Пустая() И НЕ Объект.Контрагент.СтатьяДДСПоУмолчанию.Пустая() Тогда
		СтруктураДляВозврата.Вставить("Статья", Объект.Контрагент.СтатьяДДСПоУмолчанию);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ЛичныеСредстваПредпринимателя);
	Иначе
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.Прочее);
	КонецЕсли;
	
	Если Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		И (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Зарплата
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит) Тогда
		СтруктураДляВозврата.Вставить("УчитыватьВНУ", Истина);
	Иначе
		Если ЗначениеЗаполнено(Объект.Статья) Тогда
			СтруктураДляВозврата.Вставить("УчитыватьВНУ", Объект.Статья.УчитыватьВНУ);
		Иначе
			СтруктураДляВозврата.Вставить("УчитыватьВНУ", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ПолучитьДанныеСтатьиДДС()

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложенииДляОтчетаЭквайера(ЭтоЮрЛицо)
	
	Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты
		И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит Тогда
		 Возврат;
	КонецЕсли; 
	
	ВидимостьУчитыватьВНУ = Элементы.ГруппаУчетВНУ.Видимость;
	
	Если Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		Элементы.НалогообложениеНДС.Видимость = Ложь;
		Элементы.ЭквайринговыеОперацииНалоговыйУчет.Видимость = Истина;
	Иначе
		Элементы.НалогообложениеНДС.Видимость = Истина;
		Элементы.ЭквайринговыеОперацииНалоговыйУчет.Видимость = Ложь;;
	КонецЕсли;
	
	ОбновитьОтображениеНалоговогоУчетаВТабличнойЧасти();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСрокУплаты(ВидНалога, Дата)
	Возврат РегламентированнаяОтчетностьУСН.СрокУплатыПоНалогуИДате(ВидНалога, Дата);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОтображениеПодсказки(Элементы, ВидОперации, Показать)
	
	Если ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Зарплата") И
		 ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику") Тогда
		Показать = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПодсказкаАссистента",
		"Видимость",
		Показать);
	
КонецПроцедуры


#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьВидимостьПечатиЧека()
	
	ИспользоватьПО = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	Если ИспользоватьПО
		И НЕ ТолькоПросмотр
		И (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Покупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее) Тогда
		НапечататьЧекВидимость = Истина;
	Иначе
		НапечататьЧекВидимость = Ложь;
	КонецЕсли;
	
	Элементы.НапечататьЧек.Видимость = НапечататьЧекВидимость;
	Элементы.НомерЧекаККМ.Видимость = НапечататьЧекВидимость;
	Элементы.ГруппаОтправкаЧека.Видимость = НапечататьЧекВидимость;
	Элементы.СпециальныйНалоговыйРежим.Видимость = НапечататьЧекВидимость;
	Элементы.ПредварительныйПросмотрЧека.Видимость = НапечататьЧекВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		Элементы.ГруппаОтправкаЧека.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущую страницу в зависимости от вида операции.
//
&НаКлиенте
Процедура УстановитьТекущуюСтраницу()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		ДобавитьПервуюСтрокуРасшифровкиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // УстановитьТекущуюСтраницу()

// Процедура очищает реквизиты, которые ранее могли быть заполнены, но не
// относятся к текущей операции.
//
&НаКлиенте
Процедура ОчиститьРеквизитыНеОтносящиесяКОперации()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.ЭквайринговыеОперации.Очистить();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Подотчетнику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.ЭквайринговыеОперации.Очистить();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Зарплата") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.ПериодРегистрации = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.ЭквайринговыеОперации.Очистить();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Документ = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.ЭквайринговыеОперации.Очистить();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Прочее")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.СнятиеНаличных")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПереводНаДругойСчет") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ЛичныеСредстваПредпринимателя") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.ЭквайринговыеОперации.Очистить();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НаРасходы") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.ЭквайринговыеОперации.Очистить();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Налоги") Тогда
		Объект.Контрагент = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.ЭквайринговыеОперации.Очистить();
	// Эквайринг
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ЭквайринговыйТерминал = Неопределено;
		ДоговорЭквайринга = Неопределено;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.СтатьяДДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
	// Конец Эквайринг
	// Кредит
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ЭквайринговыйТерминал = Неопределено;
		ДоговорЭквайринга = Неопределено;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.СтатьяДДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
	// Конец Кредит
	// Прочие расчеты
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.ЭквайринговыеОперации.Очистить();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.РасчетыПоКредитам") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.ЭквайринговыеОперации.Очистить();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПрочиеРасчеты") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.РасшифровкаПлатежа.Очистить();
		ДобавитьПервуюСтрокуРасшифровкиНаКлиенте();
		Объект.ЭквайринговыеОперации.Очистить();
	// Конец Прочие расчеты
	КонецЕсли;
	
	Корреспонденция = Объект.Корреспонденция;
	
	Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
		СтрокаТаблицы.СчетНаОплату = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРеквизитыНеОтносящиесяКОперации()

// Процедура устанавливает связи параметров выбора и доступные типы.
//
&НаСервере
Процедура УстановитьСвязиПараметровВыбораДоступныеТипы()
	
	// Прочие расчеты
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ПрочиеРасчеты") Тогда
		УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлементаСчетаКорреспонденции();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НаРасходы") Тогда
		УстановитьПараметрыВыбораНаРасходыНаСервереДляЭлементаСчетаКорреспонденции();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.КомиссияБанка") Тогда
		УстановитьПараметрыВыбораКомиссияБанкаНаСервереДляЭлементаСчетаКорреспонденции();
	Иначе
		УстановитьПараметрыВыбораПоМетаданнымДляЭлементаСчетаКорреспонденции();
	КонецЕсли;
	// Конец Прочие расчеты
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Поставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации") Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, ,);
		Элементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику", ,);
		Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика", , );
		Элементы.РасшифровкаПлатежаСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		Элементы.РасшифровкаПлатежаДокумент.Подсказка = "Оплачиваемый документ отгрузки товаров, работ и услуг контрагентом";
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.Покупателю") Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, ,);
		Элементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", , );
		Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату", , );
		Элементы.РасшифровкаПлатежаСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		Элементы.РасшифровкаПлатежаДокумент.Подсказка = "Документ расчетов с контрагентом, по которому осуществляется возврат денежных средств";
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКредитам") Тогда
		
		НовыйМассив = Новый Массив;
		
		ПараметрВыбора = Новый ПараметрВыбора("Обтор.ЭтоДоговорКредита", Истина);
		НовыйМассив.Добавить(ПараметрВыбора);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.КонтрольВзаиморасчетовЭквайринг", Истина);
		НовыйМассив.Добавить(ПараметрВыбора);
		
		ПараметрыВыбораДоговора = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ДоговорЭквайринга.ПараметрыВыбора = ПараметрыВыбораДоговора;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеНаСчет.ПоступлениеОплатыПоКартам") Тогда
		
		НовыйМассив = Новый Массив;
		
		ПараметрВыбора = Новый ПараметрВыбора("Обтор.ЭтоДоговорЭквайринга", Истина);
		НовыйМассив.Добавить(ПараметрВыбора);
		
		ПараметрВыбора = Новый ПараметрВыбора("Отбор.КонтрольВзаиморасчетовЭквайринг", Истина);
		НовыйМассив.Добавить(ПараметрВыбора);
		
		ПараметрыВыбораДоговора = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ДоговорЭквайринга.ПараметрыВыбора = ПараметрыВыбораДоговора;
		
	КонецЕсли;
	
	// Интеркампани
	Связи = Новый Массив;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.НашейОрганизации") Тогда
		Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		Связи.Добавить(Новый СвязьПараметраВыбора("ВидОперации", "Объект.ВидОперации", РежимИзмененияСвязанногоЗначения.НеИзменять));
	Иначе
		Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
	КонецЕсли;
	Элементы.РасшифровкаПлатежаДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(Связи);
	// Конец Интеркампани
	
КонецПроцедуры

// Процедура устанавливает устанавливает видимость реквизитов в зависимости от корреспонденции.
//
&НаСервере
Процедура УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(ОчиститьАналитику = Ложь)
	
	Если Объект.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
		Элементы.НаправлениеДеятельности.Видимость = Истина;
		Элементы.Заказ.Видимость = Истина;
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Пользователь = Пользователи.ТекущийПользователь();
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
			Объект.Подразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		КонецЕсли;
	Иначе
		Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.Налоги // для ввода на основании
		   И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов
			И (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Налоги
		   ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ЗарплатаСотруднику) Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Элементы.НаправлениеДеятельности.Видимость = Ложь;
		Элементы.Заказ.Видимость = Ложь;
			
	КонецЕсли;
	
	// Прочие расчеты
	Если (Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.Прочее 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НаРасходы) Тогда
		
		АналитикаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Корреспонденция, "АналитикаДоходовИРасходов");
		
		Если ОчиститьАналитику И ЗначениеЗаполнено(АналитикаСчета) Тогда
			Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа = Новый ОписаниеТипов(АналитикаСчета);
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = Строка(Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа);
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "";
			Объект.АналитикаПрочихДоходовИРасходов = Новый(АналитикаСчета);
		ИначеЕсли ЗначениеЗаполнено(АналитикаСчета) Тогда
			Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа = Новый ОписаниеТипов(АналитикаСчета);
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = Строка(Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа);
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "";
		Иначе // Очистить и не заполнена аналитика.
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = "Аналитика расходов";
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "<Не настроена у этого счета>";
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Ложь;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		КонецЕсли;
		
	Иначе
		Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Ложь;
	КонецЕсли;
	// Конец Прочие расчеты
	
КонецПроцедуры // УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции()

// Процедура устанавливает доступность элементов формы.
//
// Параметры:
//  Нет.
//
&НаСервере
Процедура УстановитьВидимостьИДоступность(ИзмененВидОперации = Ложь)
	
	// Документ основание.
	НовыйМассив = Новый Массив();
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	ПараметрыВыбораДокументаОснования = НовыеПараметры;
	// Конец Документ основание.
	
	Если ТолькоПросмотр И НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснованиеНадпись.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьУсловноеОформлениеРасчетов(ЭтотОбъект, Перечисления.ВидыОперацийРасходСоСчета.Покупателю);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ЭквайринговыеОперации.СуммаРасчетовКомиссииВозврата", 0, ВидСравненияКомпоновкиДанных.Меньше);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветСуммыПоступления);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "Объект.ЭквайринговыеОперации.НалогообложениеНДС", "", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ЭквайринговыеОперацииНалоговыйУчет");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоДаннымКонтрагента()
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьУсловноеОформлениеРасчетовПоДаннымКонтрагента(ЭтотОбъект, Перечисления.ВидыОперацийРасходСоСчета.Покупателю);
	
КонецПроцедуры

// Процедура устанавливает доступность и подсказку ввода элемента ДоговорЗаймаСотруднику формы.
//
&НаСервере
Процедура НастроитьЭлементДоговораЗайма()
	
	Элементы.ДоговорЗаймаСотруднику.Доступность = НЕ Объект.Подотчетник.Пустая();
	Если Элементы.ДоговорЗаймаСотруднику.Доступность Тогда
		Элементы.ДоговорЗаймаСотруднику.ПодсказкаВвода = "";
	Иначе
		Элементы.ДоговорЗаймаСотруднику.ПодсказкаВвода = НСтр("ru = 'Чтобы выбрать договор, выберите сотрудника'");
	КонецЕсли;
	
	Элементы.ДоговорКредита.Доступность = НЕ Объект.Контрагент.Пустая();
	Если Элементы.ДоговорКредита.Доступность Тогда
		Элементы.ДоговорКредита.ПодсказкаВвода = "";
	Иначе
		Элементы.ДоговорКредита.ПодсказкаВвода = НСтр("ru = 'Чтобы выбрать договор, выберите банк'");
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость элементов формы, в зависимости от выбранного положения реквизитов: "ВШапке" или "ВТабличнойЧасти"
//
&НаСервере
Процедура УстановитьВидимостьОтПользовательскихНастроек()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратОплатыНаПлатежныеКарты Тогда
		
		Если НЕ ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг ИЛИ ДоговорЭквайринга.РасчетКомиссиВОтчетеЭквайера Тогда
			ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Иначе
			ПоложениеЭквайринговогоТерминала = Объект.ПоложениеЭквайринговогоТерминала;
		КонецЕсли;
		
		Если ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайрингаНадпись", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайринга", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыйТерминал", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыеОперацииЭквайринговыйТерминал", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТерминалДокумент", "Заголовок", "Терминал / Документ");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайрингаНадпись", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайринга", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыйТерминал", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыеОперацииЭквайринговыйТерминал", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТерминалДокумент", "Заголовок", "Документ");
		КонецЕсли;
		
		Если Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказНалоги",  "Заголовок", "Заказ / Налоговый учет");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказНалоги",  "Заголовок", "Заказ");
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.ВозвратПродажиВКредит Тогда
		
		Если НЕ ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг ИЛИ ДоговорЭквайринга.РасчетКомиссиВОтчетеЭквайера Тогда
			ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
		Иначе
			ПоложениеЭквайринговогоТерминала = Объект.ПоложениеЭквайринговогоТерминала;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайрингаНадпись", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДоговорЭквайринга", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыйТерминал", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЭквайринговыеОперацииЭквайринговыйТерминал", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаТерминалДокумент", "Заголовок", "Документ");
		
		Если Объект.ПоложениеНастроекНалоговогоУчета = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказНалоги",  "Заголовок", "Заказ / Налоговый учет");
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаказНалоги",  "Заголовок", "Заказ");
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // УстановитьВидимостьОтПользовательскихНастроек()

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовкиКолонокТабличныхЧастей(ВалютаСсылка)
	РасчетыРаботаСФормамиВызовСервера.УстановитьЗаголовкиКолонокТабличныхЧастей(ЭтотОбъект, ВалютаСсылка);
КонецПроцедуры

#КонецОбласти

#Область ПрочиеРасчеты

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

// Процедура - обработчик события ПриИзменении поля ввода ДоговорЗаймаСотруднику.
//
&НаКлиенте
Процедура ДоговорЗаймаСотрудникуПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКредитаИлиЗайма();
	
КонецПроцедуры

// Процедура заполняет реквизиты документа в соответствии с реквизитами договора.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговораКредитаИлиЗайма()
	
	ДанныеДоговораЗаймаСотруднику = ДоговорКредитаЗаймаПриИзмененииНаСервере(Объект.ДоговорКредитаЗайма, Объект.Дата);
	
	ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
	
КонецПроцедуры

// Функция возвращает структуру с реквизитами договора кредита (займа).
//
&НаСервереБезКонтекста
Функция ДоговорКредитаЗаймаПриИзмененииНаСервере(ДоговорКредитаЗайма, Дата)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("ВалютаРасчетов", ДоговорКредитаЗайма.ВалютаРасчетов);
	СтруктураДанные.Вставить("Контрагент", ДоговорКредитаЗайма.Контрагент);
	СтруктураДанные.Вставить("Сотрудник", ДоговорКредитаЗайма.Сотрудник);
	СтруктураДанные.Вставить("ЭтоДоговорЗайма", ДоговорКредитаЗайма.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику);
	
	Возврат СтруктураДанные;
	
КонецФункции

// Процедура - обработчик события ПриИзменении поля ввода Сотрудник.
//
&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеСотрудникПриИзменении(Объект.Подотчетник, Объект.Дата, Объект.Организация);
	
	Объект.ДоговорКредитаЗайма = СтруктураДанные.ДоговорКредитаЗайма;
	ОбработатьИзменениеДоговораКредитаИлиЗайма();
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧасти

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.СуммаРасчетов.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСуммаРасчетовПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПередУдалением элемента РасшифровкаПлатежаПрочиеРасчеты (ТЧ).
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.Курс.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКурсПриИзменении(Элемент)
		
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежаПрочиеРасчеты");
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.Кратность.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.СуммаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.СуммаРасчетов = 0,
		1,
		СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
	);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.Договор.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКонтрагентаПрочиеРасчеты();
	
КонецПроцедуры

// Процедура выполняет действия при изменении договора контрагента.
//
&НаКлиенте
Процедура ОбработатьИзменениеДоговораКонтрагентаПрочиеРасчеты()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС
		);
		СтрокаТабличнойЧасти.Курс = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
		);
		
		СтрокаТабличнойЧасти.СтатьяДДС = СтруктураДанные.СтатьяДДСПоУмолчанию;
	Иначе
		СтрокаТабличнойЧасти.СтатьяДДС = Неопределено;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаПлатежа,
		Курс,
		СтрокаТабличнойЧасти.Курс,
		Кратность,
		СтрокаТабличнойЧасти.Кратность
	);
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

// Процедура - обработчик события НачалоВыбора поля ввода РасшифровкаПлатежаПрочиеРасчеты.Договор.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Контрагент.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Сначала выберите контрагента'");
		Сообщение.Поле = "Объект.Контрагент";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ОбработатьНачалоВыбораДоговораКонтрагентаПрочиеРасчеты(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура выполняет действия при начале выбора договора контрагента.
//
&НаКлиенте
Процедура ОбработатьНачалоВыбораДоговораКонтрагентаПрочиеРасчеты(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, СтрокаТабличнойЧасти.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаПрочиеРасчеты.СтавкаНДС.
//
&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаРасчетыПоКредитам.СуммаРасчетов.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаРасчетовПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаРасчетыПоКредитам.СуммаРасчетов.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежаРасчетыПоКредитам");
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаРасчетыПоКредитам.Кратность.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаРасчетыПоКредитам.СтавкаНДС.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода РасшифровкаПлатежаРасчетыПоКредитам.СуммаПлатежа.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежаПриИзменении(ЭтотОбъект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Процедура - обработчик события ПередУдалением табличной части РасшифровкаПлатежаРасчетыПоКредитам.
//
&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДействияКоманд

// Процедура - обработчик команды ЗаполнитьПоДоговоруЗайма. Заполняет сумму документа остатком невыплаченной суммы.
//
&НаСервере
Процедура ЗаполнитьПоДоговоруЗаймаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма.ВалютаРасчетов КАК ВалютаРасчетов,
	|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалПриход
	|ПОМЕСТИТЬ ВременнаяТаблицаВыданныеРанееСуммы
	|ИЗ
	|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Обороты(
	|			,
	|			,
	|			,
	|			ДоговорКредитаЗайма = &ДоговорКредитаЗайма
	|				И Организация = &Организация) КАК РасчетыПоКредитамИЗаймамОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма.ВалютаРасчетов,
	|	ВЫБОР
	|		КОГДА РасчетыПоКредитамИЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА -РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
	|		ИНАЧЕ РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.РасчетыПоКредитамИЗаймам КАК РасчетыПоКредитамИЗаймам
	|ГДЕ
	|	РасчетыПоКредитамИЗаймам.Регистратор = &Ссылка
	|	И РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма = &ДоговорКредитаЗайма
	|	И РасчетыПоКредитамИЗаймам.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
	|	СУММА(ВременнаяТаблицаВыданныеРанееСуммы.ОсновнойДолгВалПриход) КАК ОсновнойДолгВалПриход,
	|	ДоговорКредитаЗайма.СуммаДокумента
	|ИЗ
	|	ВременнаяТаблицаВыданныеРанееСуммы КАК ВременнаяТаблицаВыданныеРанееСуммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорКредитаИЗайма КАК ДоговорКредитаЗайма
	|		ПО ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов = ДоговорКредитаЗайма.ВалютаРасчетов
	|ГДЕ
	|	ДоговорКредитаЗайма.Ссылка = &ДоговорКредитаЗайма
	|
	|СГРУППИРОВАТЬ ПО
	|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
	|	ДоговорКредитаЗайма.СуммаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаРасчетов) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаДенежныхСредств) КАК КурсыВалютСрезПоследних";
	
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВалютаРасчетов", Объект.ДоговорКредитаЗайма.ВалютаРасчетов);
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Объект.ВалютаДенежныхСредств);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	Выборка = МРезультатов[1].Выбрать();
	
	ВыборкаВалютаДоговора = МРезультатов[2].Выбрать();
	Если ВыборкаВалютаДоговора.Следующий() Тогда
		КурсДоговора = ВыборкаВалютаДоговора.Курс;
		КратностьДоговора = ВыборкаВалютаДоговора.Кратность;
	Иначе
		КурсДоговора = 1;
		КратностьДоговора = 1;
	КонецЕсли;
	
	ВыборкаВалютыДС = МРезультатов[3].Выбрать();
	Если ВыборкаВалютыДС.Следующий() Тогда
		КурсДокумента = ВыборкаВалютыДС.Курс;
		КратностьДокумента = ВыборкаВалютыДС.Кратность;
	Иначе
		КурсДокумента = 1;
		КратностьДокумента = 1;
	КонецЕсли;
	
	Если Выборка.Следующий() Тогда
		ТекстСообщения = "";
		Если Выборка.СуммаДокумента < Выборка.ОсновнойДолгВалПриход Тогда
			ТекстСообщения = "По договору займа уже выдано "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		ИначеЕсли Выборка.СуммаДокумента = Выборка.ОсновнойДолгВалПриход Тогда
			ТекстСообщения = "По договору займа уже выдана вся сумма "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		Иначе
			Объект.СуммаДокумента = (Выборка.СуммаДокумента - Выборка.ОсновнойДолгВалПриход) * КурсДоговора * КратностьДокумента / (КратностьДоговора * КурсДокумента);
		КонецЕсли;
		
		Если ТекстСообщения <> "" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Поле = "ДоговорКредитаЗайма";
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		Объект.СуммаДокумента = Объект.ДоговорКредитаЗайма.СуммаДокумента * КурсДоговора * КратностьДокумента / (КратностьДоговора * КурсДокумента);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура - обработчик команды ЗаполнитьПоДоговоруЗайма.
//
&НаКлиенте
Процедура ЗаполнитьПоДоговоруЗайма(Команда)
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Выберите договор");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДоговоруЗаймаНаСервере();
	СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
	
КонецПроцедуры

// Процедура - обработчик команды ЗаполнитьПоДоговоруКредита.
//
&НаКлиенте
Процедура ЗаполнитьПоДоговоруКредита(Команда)
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Выберите договор");
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкиПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	ПараметрыОтбора = Новый Структура("
		|АдресРасшифровкиПлатежаВХранилище,
		|Организация,
		|Регистратор,
		|ИдентификаторФормыДокумента,
		|ВидОперации,
		|Дата,
		|Валюта,
		|ДоговорКредитаЗайма,
		|СуммаДокумента,
		|Контрагент,
		|СтавкаНДСПоУмолчанию,
		|СуммаПлатежа,
		|Курс,
		|Кратность,
		|Сотрудник",
		АдресРасшифровкиПлатежаВХранилище,
		Объект.Организация,
		Объект.Ссылка,
		УникальныйИдентификатор,
		Объект.ВидОперации,
		Объект.Дата,
		Объект.ВалютаДенежныхСредств,
		Объект.ДоговорКредитаЗайма,
		Объект.СуммаДокумента,
		Объект.Контрагент,
		СтавкаНДСПоУмолчанию,
		Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа"),
		Курс,
		Кратность,
		Объект.Подотчетник);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЗаполненияРасшифровкиПлатежаПоКредитамИЗаймам", 
						ПараметрыОтбора,
						ЭтаФорма,,,, Новый ОписаниеОповещения("ЗаполнитьПоДоговоруКредитаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Процедура - обработчик команды ЗаполнитьПоДоговоруКредита. Завершающая часть, которая вызывается после выбора данных заполнения.
//
&НаКлиенте
Процедура ЗаполнитьПоДоговоруКредитаЗавершение(РезультатЗаполнения, ПараметрыЗавершения) Экспорт

	Если ТипЗнч(РезультатЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьСуммуДокумента = Ложь;
		Если РезультатЗаполнения.Свойство("ОчищатьТабличнуюЧастьПриЗаполнении") И РезультатЗаполнения.ОчищатьТабличнуюЧастьПриЗаполнении Тогда
			Объект.РасшифровкаПлатежа.Очистить();
			ЗаполнитьСуммуДокумента = Истина;
		КонецЕсли;
		Если РезультатЗаполнения.Свойство("АдресРасшифровкиПлатежаВХранилище") Тогда
			ПолучитьРасшифровкаПлатежаИзХранилища(РезультатЗаполнения.АдресРасшифровкиПлатежаВХранилище, Ложь);
			
			Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнитьСуммуДокумента Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Процедура устанавливает параметры выбора элемента Корреспонденция для вида операции "ПрочиеРасчеты".
//
&НаСервере
Процедура УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.Корреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипСчета" Тогда
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Дебиторы);
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Кредиторы);
			
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ОтборПоТипуСчета)));
		Иначе
			ПараметрыВыбораЭлемента.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора элемента Корреспонденция для вида операции "ПрочиеРасчеты".
//
&НаСервере
Процедура УстановитьПараметрыВыбораНаРасходыНаСервереДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.Корреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипСчета" Тогда
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Расходы);
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
			
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ОтборПоТипуСчета)));
		ИначеЕсли Параметр.Имя = "ЗаголовокСчета" Тогда
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("ЗаголовокСчета", "Статья расходов"));
		Иначе
			ПараметрыВыбораЭлемента.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора элемента Корреспонденция для вида операции "КомиссияБанка".
//
&НаСервере
Процедура УстановитьПараметрыВыбораКомиссияБанкаНаСервереДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.Корреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипСчета" Тогда
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Расходы);
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ОтборПоТипуСчета)));
		Иначе
			ПараметрыВыбораЭлемента.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

// Процедура устанавливает параметры выбора элемента Корреспонденция для всех видов операций кроме "ПрочиеРасчеты".
//
&НаСервере
Процедура УстановитьПараметрыВыбораПоМетаданнымДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.Корреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	
	ПараметрыВыбораИзМетаданных = Объект.Ссылка.Метаданные().Реквизиты.Корреспонденция.ПараметрыВыбора;
	Для Каждого Параметр Из ПараметрыВыбораИзМетаданных Цикл
		ПараметрыВыбораЭлемента.Добавить(Параметр);
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

// Процедура заполняет заголовки информационных надписей о договоре кредита (займа) в зависимости от вида операции документа.
//
&НаСервере
Процедура ЗаполнитьИнформациюПоКредитуЗаймуНаСервере()
	
	НастроитьЭлементДоговораЗайма();
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		Элементы.НадписьИнформацияПоКредиту.Заголовок = "<Выберите договор кредита (займа)>";
		Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = "";
		
		Элементы.НадписьИнформацияПоКредиту.ЦветТекста = ЦветаСтиля.ЦветРамки;
		Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = ЦветаСтиля.ЦветРамки;
		
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.ВыдачаЗаймаСотруднику") Тогда
		ЗаполнитьИнформациюПоЗаймуНаСервере();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходСоСчета.РасчетыПоКредитам") Тогда
		ЗаполнитьИнформациюПоКредитуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет заголовки информационных надписей о договоре кредита.
//
&НаСервере
Процедура ЗаполнитьИнформациюПоКредитуНаСервере();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.Период,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаОсновногоДолга,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаПроцентов,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаКомиссии,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление
		|ИЗ
		|	РегистрСведений.ГрафикПогашенияКредитовИЗаймов.СрезПоследних(&ДатаСрезаПоследних, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК ГрафикПогашенияКредитовИЗаймовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.ОсновнойДолгВалОстаток) КАК ОсновнойДолгВалОстаток,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление,
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.ПроцентыВалОстаток) КАК ПроцентыВалОстаток,
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.КомиссияВалОстаток) КАК КомиссияВалОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Остатки(, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК РасчетыПоКредитамИЗаймамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.Период,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаОсновногоДолга,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаПроцентов,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаКомиссии,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление
		|ИЗ
		|	РегистрСведений.ГрафикПогашенияКредитовИЗаймов.СрезПервых(&ДатаСрезаПоследних, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК ГрафикПогашенияКредитовИЗаймовСрезПервых";
	
	Запрос.УстановитьПараметр("ДатаСрезаПоследних", ?(Объект.Дата = '00010101', НачалоДня(ТекущаяДата()), НачалоДня(Объект.Дата)));
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	Если Объект.ДоговорКредитаЗайма.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику Тогда
		Множитель = 1;
	Иначе
		Множитель = -1;
	КонецЕсли;
	
	ВыборкаГрафик = МРезультатов[0].Выбрать();
	ВыборкаГрафикБудущиеМесяцы = МРезультатов[2].Выбрать();
	
	НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Если ВыборкаГрафикБудущиеМесяцы.Следующий() Тогда
		
		Если НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДата(), Объект.Дата)) = НачалоМесяца(ВыборкаГрафикБудущиеМесяцы.Период) Тогда
			ДатаПлатежа = "" + Формат(ВыборкаГрафикБудущиеМесяцы.Период, "ДФ=dd.MM.yyyy");
		Иначе
			ДатаПлатежа = "" + Формат(ВыборкаГрафикБудущиеМесяцы.Период, "ДФ=dd.MM.yyyy") + " (не в тек. месяце)";
			НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
			
		НадписьИнформацияПоКредиту = "Дата платежа: "+ДатаПлатежа+". Сумма долга: "+Формат(ВыборкаГрафикБудущиеМесяцы.СуммаОсновногоДолга, "ЧДЦ=2; ЧН=0")+". Сумма %: "+
			Формат(ВыборкаГрафикБудущиеМесяцы.СуммаПроцентов, "ЧДЦ=2; ЧН=0")+
			". Комиссия: "+Формат(ВыборкаГрафикБудущиеМесяцы.СуммаКомиссии, "ЧДЦ=2; ЧН=0")+" (" + ВыборкаГрафикБудущиеМесяцы.ВалютаРасчетовПредставление +")";
		
	ИначеЕсли ВыборкаГрафик.Следующий() Тогда
		
		Если НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДата(), Объект.Дата)) = НачалоМесяца(ВыборкаГрафик.Период) Тогда
			ДатаПлатежа = "" + Формат(ВыборкаГрафик.Период, "ДФ=dd.MM.yyyy");
		Иначе
			ДатаПлатежа = "" + Формат(ВыборкаГрафик.Период, "ДФ=dd.MM.yyyy") + " (не в тек. месяце)";
			НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
			
		НадписьИнформацияПоКредиту = "Дата платежа: "+ДатаПлатежа+". Сумма долга: "+Формат(ВыборкаГрафик.СуммаОсновногоДолга, "ЧДЦ=2; ЧН=0")+". Сумма %: "+
			Формат(ВыборкаГрафик.СуммаПроцентов, "ЧДЦ=2; ЧН=0")+
			". Комиссия: "+Формат(ВыборкаГрафик.СуммаКомиссии, "ЧДЦ=2; ЧН=0")+" (" + ВыборкаГрафик.ВалютаРасчетовПредставление +")";
		
	Иначе
		
		НадписьИнформацияПоКредиту = "Дата платежа: <не определена>";
		
	КонецЕсли;
	
	ВыборкаОстатки = МРезультатов[1].Выбрать();
	Если ВыборкаОстатки.Следующий() Тогда
		
		НадписьОстатокДолгаПоКредиту = "Остаток долга: "+Формат(Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток, "ЧДЦ=2; ЧН=0")+". Сумма %: "+
			Формат(Множитель * ВыборкаОстатки.ПроцентыВалОстаток, "ЧДЦ=2; ЧН=0")+
			". Комиссия: "+Формат(Множитель * ВыборкаОстатки.КомиссияВалОстаток, "ЧДЦ=2; ЧН=0")+" (" + ВыборкаОстатки.ВалютаРасчетовПредставление +")";
			
		Если Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток >= 0 И (Множитель * ВыборкаОстатки.ПроцентыВалОстаток < 0 ИЛИ 
			Множитель * ВыборкаОстатки.КомиссияВалОстаток < 0) Тогда
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		Если Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток < 0 Тогда
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли;
	Иначе
		
		НадписьОстатокДолгаПоКредиту = "Остаток долга: <не определен> "
		
	КонецЕсли;
	
	Элементы.НадписьИнформацияПоКредиту.Заголовок = НадписьИнформацияПоКредиту;
	Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = НадписьОстатокДолгаПоКредиту;
	
	Элементы.НадписьИнформацияПоКредиту.ЦветТекста = НадписьИнформацияПоКредитуЦветТекста;
	Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = НадписьОстатокДолгаПоКредитуЦветТекста;
		
КонецПроцедуры

// Процедура заполняет заголовки информационных надписей о договоре займа сотруднику.
//
&НаСервере
Процедура ЗаполнитьИнформациюПоЗаймуНаСервере()

	НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма.ВалютаРасчетов КАК ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалПриход
		|ПОМЕСТИТЬ ВременнаяТаблицаВыданныеРанееСуммы
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Обороты(
		|			,
		|			,
		|			,
		|			ДоговорКредитаЗайма = &ДоговорКредитаЗайма
		|				И Организация = &Организация) КАК РасчетыПоКредитамИЗаймамОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	СУММА(ВременнаяТаблицаВыданныеРанееСуммы.ОсновнойДолгВалПриход) КАК ОсновнойДолгВалПриход,
		|	ДоговорКредитаЗайма.СуммаДокумента
		|ИЗ
		|	ВременнаяТаблицаВыданныеРанееСуммы КАК ВременнаяТаблицаВыданныеРанееСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорКредитаИЗайма КАК ДоговорКредитаЗайма
		|		ПО ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов = ДоговорКредитаЗайма.ВалютаРасчетов
		|ГДЕ
		|	ДоговорКредитаЗайма.Ссылка = &ДоговорКредитаЗайма
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	ДоговорКредитаЗайма.СуммаДокумента";
	
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	Запрос.УстановитьПараметр("Организация", Компания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НадписьИнформацияПоКредиту = "Сумма займа: "+Выборка.СуммаДокумента+" ("+Выборка.ВалютаРасчетов+")";
		
		Если Выборка.СуммаДокумента < Выборка.ОсновнойДолгВалПриход Тогда
			НадписьОстатокДолгаПоКредиту = "Осталось выдать: "+(Выборка.СуммаДокумента-Выборка.ОсновнойДолгВалПриход)+" ("+Выборка.ВалютаРасчетов+")"+
				". Уже выдано "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ИначеЕсли Выборка.СуммаДокумента = Выборка.ОсновнойДолгВалПриход Тогда
			НадписьОстатокДолгаПоКредиту = "Осталось выдать: 0 ("+Выборка.ВалютаРасчетов+")";
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		Иначе
			НадписьОстатокДолгаПоКредиту = "Осталось выдать: "+(Выборка.СуммаДокумента-Выборка.ОсновнойДолгВалПриход)+" ("+Выборка.ВалютаРасчетов+")"+
				". Уже выдано "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		КонецЕсли;
	Иначе
		НадписьИнформацияПоКредиту = "Сумма займа: "+Объект.ДоговорКредитаЗайма.СуммаДокумента+" ("+Объект.ДоговорКредитаЗайма.ВалютаРасчетов+")";
		НадписьОстатокДолгаПоКредиту = "Осталось выдать: "+Объект.ДоговорКредитаЗайма.СуммаДокумента+" ("+Объект.ДоговорКредитаЗайма.ВалютаРасчетов+")";
	КонецЕсли;
	
	Элементы.НадписьИнформацияПоКредиту.Заголовок = НадписьИнформацияПоКредиту;
	Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = НадписьОстатокДолгаПоКредиту;
	
	Элементы.НадписьИнформацияПоКредиту.ЦветТекста = НадписьИнформацияПоКредитуЦветТекста;
	Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = НадписьОстатокДолгаПоКредитуЦветТекста;
	
КонецПроцедуры

// Получает договор кредита (займа) по умолчанить в зависимости от вида операции документа.
//
&НаСервереБезКонтекста
Функция ПолучитьДоговорКредитаЗаймаПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерДокумента = Документы.ДоговорКредитаИЗайма;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(?(ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.РасчетыПоКредитам, 
		Перечисления.ВидыДоговоровКредитаИЗайма.КредитПолученный,
		Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику));
	
	ДоговорКредитаЗаймаПоУмолчанию = МенеджерДокумента.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорКредитаЗаймаПоУмолчанию;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Эквайринг

// Функция помещает табличную часть РасшифровкаРасчетов во временное хранилище
// и возвращает адрес.
//
&НаСервере
Функция ПоместитьЭквайринговыеОперацииВХранилище() 
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.ЭквайринговыеОперации.Выгрузить(),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьЭквайринговыеОперацииВХранилище()

// Функция получает табличную часть РасшифровкаРасчетов из временного хранилища.
//
&НаСервере
Процедура ПолучитьЭквайринговыеОперацииИзХранилища(АдресЭквайринговыеОперацииВХранилище)
	
	ТаблицаЭквайринговыеОперации = ПолучитьИзВременногоХранилища(АдресЭквайринговыеОперацииВХранилище);
	Объект.ЭквайринговыеОперации.Очистить();
	Для каждого СтрокаЭквайринговыеОперации Из ТаблицаЭквайринговыеОперации Цикл
		Строка = Объект.ЭквайринговыеОперации.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаЭквайринговыеОперации);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьРасшифровкаПлатежаИзХранилища()

&НаСервереБезКонтекста
Функция ПолучитьПараметрыЭквайринговогоТерминалаПриИзменении(ЭквайринговыйТерминал)
	
	ПараметрыЭквайринговогоТерминала = Новый Структура;
	
	ПараметрыЭквайринговогоТерминала.Вставить("Договор", ЭквайринговыйТерминал.Договор);
	Если Не ЭквайринговыйТерминал.СчетУчета.Пустая() Тогда
		ПараметрыЭквайринговогоТерминала.Вставить("СчетУчета", ЭквайринговыйТерминал.СчетУчета);
	Иначе
		ПараметрыЭквайринговогоТерминала.Вставить("СчетУчета", ПредопределенноеЗначение("ПланСчетов.Управленческий.ПереводыВПути"));
	КонецЕсли;
	Если Не ЭквайринговыйТерминал.СчетЗатрат.Пустая() Тогда
		ПараметрыЭквайринговогоТерминала.Вставить("СчетЗатрат", ЭквайринговыйТерминал.СчетЗатрат);
		ПараметрыЭквайринговогоТерминала.Вставить("ТипСчетаЗатрат", ЭквайринговыйТерминал.СчетЗатрат.ТипСчета);
	Иначе
		ПараметрыЭквайринговогоТерминала.Вставить("СчетЗатрат", ПредопределенноеЗначение("ПланСчетов.Управленческий.ПрочиеРасходы"));
		ПараметрыЭквайринговогоТерминала.Вставить("ТипСчетаЗатрат", ПараметрыЭквайринговогоТерминала.СчетЗатрат.ТипСчета);
	КонецЕсли;
	Если Не ЭквайринговыйТерминал.НаправлениеДеятельности.Пустая() Тогда
		ПараметрыЭквайринговогоТерминала.Вставить("НаправлениеДеятельности", ЭквайринговыйТерминал.НаправлениеДеятельности);
	Иначе
		ПараметрыЭквайринговогоТерминала.Вставить("НаправлениеДеятельности", ПредопределенноеЗначение("Справочник.НаправленияДеятельности.Прочее"));
	КонецЕсли;
	Если Не ЭквайринговыйТерминал.Подразделение.Пустая() Тогда
		ПараметрыЭквайринговогоТерминала.Вставить("Подразделение", ЭквайринговыйТерминал.Подразделение);
	Иначе
		Пользователь = Пользователи.ТекущийПользователь();
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
		ПараметрыЭквайринговогоТерминала.Вставить("Подразделение", ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение));
	КонецЕсли;
	ПараметрыЭквайринговогоТерминала.Вставить("БанковскийСчетЭквайринг", ЭквайринговыйТерминал.БанковскийСчетЭквайринг);
	
	Возврат ПараметрыЭквайринговогоТерминала;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЭквайринговыеОперации(Команда)
	
	ВыполнитьВозврат = ПроверитьРеквизитыПередЗаполнениемТабличнойЧасти();
	Если ВыполнитьВозврат Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗаполнитьЭквайринговыеОперацииЗавершение", ЭтотОбъект);
	Если Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, НСтр("ru='Эквайринговые операции будут полностью перезаполнены. Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ЗаполнитьЭквайринговыеОперацииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьРеквизитыПередЗаполнениемТабличнойЧасти()
	
	ВыполнитьВозврат = Ложь;
	Если Объект.Контрагент.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Укажите вначале контрагента!'");
		Сообщение.Поле = "Контрагент";
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		
		ВыполнитьВозврат = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
	   И НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Укажите вначале банковский счет!'");
		Сообщение.Поле = "БанковскийСчет";
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.Сообщить();
		
		ВыполнитьВозврат = Истина;
	КонецЕсли;

	Если Объект.ПоложениеЭквайринговогоТерминала = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВШапке") Тогда
		Если Объект.ЭквайринговыйТерминал.Пустая() Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Укажите вначале эквайринговый терминал!'");
			Сообщение.Поле = "ЭквайринговыйТерминал";
			Сообщение.ПутьКДанным = "Объект";
			Сообщение.Сообщить();
			
			ВыполнитьВозврат = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ДоговорЭквайринга.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Укажите вначале договор эквайринга!'");
		Сообщение.Поле = "ДоговорЭквайринга";
		Сообщение.ПутьКДанным = "ДоговорЭквайринга";
		Сообщение.Сообщить();
		
		ВыполнитьВозврат = Истина;
	КонецЕсли;
	
	Возврат ВыполнитьВозврат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЭквайринговыеОперацииЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЭквайринговыеОперацииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭквайринговыеОперацииНаСервере(ДатаНачала = '00010101', ДатаОкончания = '00010101')
	
	ЭквайринговыеОперацииСервер.ЗаполнитьЭквайринговыеОперации(Объект, ДатаНачала, ДатаОкончания, ДоговорЭквайринга);
	
	Модифицированность = Истина;
	СуммаПлатежаЭквайринг = Объект.СуммаДокумента;
	
	ОбновитьОтображениеНалоговогоУчетаВТабличнойЧасти();
	РаспределитьСуммуКомиссии();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайрингПодборЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	АдресЭквайринговыеОперацииВХранилище = ДополнительныеПараметры.АдресЭквайринговыеОперацииВХранилище;
	
	Результат = Результат1;
	Если Результат = КодВозвратаДиалога.OK Тогда
		
		ПолучитьЭквайринговыеОперацииИзХранилища(АдресЭквайринговыеОперацииВХранилище);
		
		Для Каждого ТекущаяСтрока Из Объект.ЭквайринговыеОперации Цикл
			ТекущаяСтрока.СуммаПлатежаИтогоПоСтроке = ТекущаяСтрока.СуммаРасчетовВозврата
									+ТекущаяСтрока.СуммаРасчетовКомиссии+ТекущаяСтрока.СуммаРасчетовКомиссииВозврата-ТекущаяСтрока.СуммаРасчетов;
			
			ТекущаяСтрока.НалоговыйУчет = ПолучитьПредставлениеНалоговогоУчетаСтроки(ТекущаяСтрока, ВидимостьУчитыватьВНУ);
			
		КонецЦикла;
		
		УстановитьТекущуюСтраницу();
		
		СуммаПлатежаЭквайринг = Объект.ЭквайринговыеОперации.Итог("СуммаПлатежаИтогоПоСтроке");
		
		Если Объект.ЭквайринговыеОперации.Количество() = 1 Тогда
			Объект.СуммаДокумента = СуммаПлатежаЭквайринг;
		КонецЕсли;
		
	РаспределитьСуммуКомиссии();
		
	КонецЕсли;

КонецПроцедуры // ЭквайрингПодборЗавершение()

&НаКлиенте
Процедура ЭквайринговыйТерминалПриИзменении(Элемент)
	
	Если ЭквайринговыйТерминал <> Объект.ЭквайринговыйТерминал Тогда
		
		ПараметрыЭквайринговогоТерминала = ПолучитьПараметрыЭквайринговогоТерминалаПриИзменении(Объект.ЭквайринговыйТерминал);
		ТипСчетаЗатратШапка = ПараметрыЭквайринговогоТерминала.ТипСчетаЗатрат;
		
		ЭквайринговыйТерминалПриИзмененииНаСервере();
		
		Объект.НаправлениеДеятельностиЗатраты = ПараметрыЭквайринговогоТерминала.НаправлениеДеятельности;
		Объект.ПодразделениеЗатраты = ПараметрыЭквайринговогоТерминала.Подразделение;
		
		Если Объект.БанковскийСчет <> ПараметрыЭквайринговогоТерминала.БанковскийСчетЭквайринг И ЗначениеЗаполнено(ПараметрыЭквайринговогоТерминала.БанковскийСчетЭквайринг) Тогда
			Объект.БанковскийСчет = ПараметрыЭквайринговогоТерминала.БанковскийСчетЭквайринг;
			БанковскийСчетПриИзменении(Элемент);
		КонецЕсли;
		
		ЭквайринговыйТерминал = Объект.ЭквайринговыйТерминал;
		
		МассивДляУдаления = Новый Массив;
		Для каждого СтрокаОпераций Из Объект.ЭквайринговыеОперации Цикл
			Если ЗначениеЗаполнено(СтрокаОпераций.ЭквайринговыйТерминал) И СтрокаОпераций.ЭквайринговыйТерминал <> ЭквайринговыйТерминал Тогда
				 МассивДляУдаления.Добавить(СтрокаОпераций);
			Иначе
				СтрокаОпераций.ЭквайринговыйТерминал = ЭквайринговыйТерминал;
			КонецЕсли; 
		КонецЦикла; 
		
		Для каждого СтрокаДляУдаления Из МассивДляУдаления Цикл
			Объект.ЭквайринговыеОперации.Удалить(СтрокаДляУдаления);
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЭквайринговыйТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЕстьСообщения = Ложь;
	Если Объект.Контрагент.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Сначала выберите банк-эквайрер!'");
		Сообщение.Поле = "Объект.Контрагент";
		Сообщение.Сообщить();
		
		ЕстьСообщения = Истина;
	КонецЕсли;
	
	Если Объект.БанковскийСчет.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Сначала выберите банковский счет!'");
		Сообщение.Поле = "Объект.БанковскийСчет";
		Сообщение.Сообщить();
		
		ЕстьСообщения = Истина;
	КонецЕсли;
	
	Если ЕстьСообщения Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьЭлементовВЗависимостиОтТипаСчетаЗатрат(УстанавливатьЗначения = Истина)
	
	Если ТипСчетаЗатратШапка = Перечисления.ТипыСчетов.Расходы Тогда
		ПараметрыЭквайринговогоТерминала = ПолучитьПараметрыЭквайринговогоТерминалаПриИзменении(Объект.ЭквайринговыйТерминал);
		
		Если УстанавливатьЗначения Тогда
			Объект.НаправлениеДеятельностиЗатраты = ПараметрыЭквайринговогоТерминала.НаправлениеДеятельности;
			Объект.ПодразделениеЗатраты = ПараметрыЭквайринговогоТерминала.Подразделение;
		КонецЕсли;
		
		Элементы.ПодразделениеЗатраты.Видимость = Истина;
		Элементы.НаправлениеДеятельностиЗатраты.Видимость = Истина;
	Иначе
		
		Если УстанавливатьЗначения Тогда
			Объект.НаправлениеДеятельностиЗатраты = Справочники.НаправленияДеятельности.Прочее;
			Объект.ПодразделениеЗатраты = Неопределено;
		КонецЕсли;
		
		Элементы.ПодразделениеЗатраты.Видимость = Ложь;
		Элементы.НаправлениеДеятельностиЗатраты.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыеОперацииСуммаРасчетовПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭквайринговыеОперации.ТекущиеДанные;
	ПересчитатьСуммуПлатежаЭквайринга(ТекущаяСтрока);
	
	Если ТекущаяСтрока.СуммаРасчетов <> 0 Тогда
		ТекущаяСтрока.СуммаРасчетовВозврата = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПлатежаЭквайринга(ТекущаяСтрока)
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.СуммаПлатежаИтогоПоСтроке = ТекущаяСтрока.СуммаРасчетовВозврата
								+ТекущаяСтрока.СуммаРасчетовКомиссии+ТекущаяСтрока.СуммаРасчетовКомиссииВозврата-ТекущаяСтрока.СуммаРасчетов;
		
		СуммаПлатежаЭквайринг = Объект.ЭквайринговыеОперации.Итог("СуммаПлатежаИтогоПоСтроке");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыеОперацииСуммаРасчетовВозвратаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭквайринговыеОперации.ТекущиеДанные;
	ПересчитатьСуммуПлатежаЭквайринга(ТекущаяСтрока);
	
	Если ТекущаяСтрока.СуммаРасчетовВозврата <> 0 Тогда
		ТекущаяСтрока.СуммаРасчетов = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыеОперацииСуммаРасчетовКомиссииПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭквайринговыеОперации.ТекущиеДанные;
	ПересчитатьСуммуПлатежаЭквайринга(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыеОперацииСуммаРасчетовКомиссииВозвратаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭквайринговыеОперации.ТекущиеДанные;
	ПересчитатьСуммуПлатежаЭквайринга(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыеОперацииДокументПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЭквайринговыеОперации.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		СтукрутраПараметров = ПолучитьПараметрыЭквайринговойОперации(ТекущаяСтрока.Документ, Объект.ЭквайринговыйТерминал);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтукрутраПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыЭквайринговойОперации(СсылкаНаДокумент, ЭквайринговыйТерминал)
	
	СтукрутраПараметров = Новый Структура("ДатаПлатежа, НомерПлатежнойКарты, ВидПлатежнойКарты");
	
	Если ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
		СтукрутраПараметров.ДатаПлатежа = СсылкаНаДокумент.Дата;
		СтукрутраПараметров.НомерПлатежнойКарты = СсылкаНаДокумент.НомерПлатежнойКарты;
		СтукрутраПараметров.ВидПлатежнойКарты = СсылкаНаДокумент.ВидПлатежнойКарты;
		Если СсылкаНаДокумент.РасшифровкаПлатежа.Количество() = 1 Тогда
			Если ЗначениеЗаполнено(СсылкаНаДокумент.РасшифровкаПлатежа[0].Заказ) Тогда
				СтукрутраПараметров.Вставить("Заказ", СсылкаНаДокумент.РасшифровкаПлатежа[0].Заказ);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СсылкаНаДокумент) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		СтукрутраПараметров.ДатаПлатежа = СсылкаНаДокумент.Дата;
		Если СсылкаНаДокумент.БезналичнаяОплата.Количество() > 0 Тогда
			ОплатаКартами = СсылкаНаДокумент.БезналичнаяОплата.Выгрузить(Новый Структура("ВидОплаты", Перечисления.ВидыБезналичныхОплат.БанковскаяКарта));
			Если ОплатаКартами.Количество() > 0 Тогда
				ПерваяСтрокаОплатыКартой = ОплатаКартами[0];
				Если ПерваяСтрокаОплатыКартой.ЭквайринговыйТерминал = ЭквайринговыйТерминал Тогда
					СтукрутраПараметров.НомерПлатежнойКарты = ПерваяСтрокаОплатыКартой.НомерПлатежнойКарты;
					СтукрутраПараметров.ВидПлатежнойКарты = ПерваяСтрокаОплатыКартой.ВидПлатежнойКарты;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтукрутраПараметров;
	
КонецФункции

// Обработка события "ПриУдалении" строки табличной части "ЭквайринговыеОперации"
//
&НаКлиенте
Процедура ЭквайринговыеОперацииПослеУдаления(Элемент)
	
	РаспределитьСуммуКомиссии();
	
	СуммаПлатежаЭквайринг = Объект.ЭквайринговыеОперации.Итог("СуммаПлатежаИтогоПоСтроке");
	
	Для каждого СтрокаЭквайринга Из Объект.ЭквайринговыеОперации Цикл
		ПересчитатьСуммуПлатежаЭквайринга(СтрокаЭквайринга);
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭквайринговыеОперацииСВыборомПериода(Команда)
	
	ВыполнитьВозврат = ПроверитьРеквизитыПередЗаполнениемТабличнойЧасти();
	Если ВыполнитьВозврат Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ЗаполнитьЭквайринговыеОперацииСВыборомПериодаЗавершение", ЭтотОбъект);
	Если Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, НСтр("ru='Эквайринговые операции будут полностью перезаполнены. Продолжить?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	Иначе
		ОткрытьФормуВыбораПериодаРасчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЭквайринговыеОперацииСВыборомПериодаЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораПериодаРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПериодаРасчета()
	
	ПараметрыЗаполнения = Новый Структура("Контрагент, БанковскийСчет, ЭквайринговыйТерминал, Организация, Ссылка, ВалютаДенежныхСредств, ПоложениеЭквайринговогоТерминала, РасшифровкаПлатежа", 
		Объект.Контрагент, 
		Объект.БанковскийСчет, 
		Объект.ЭквайринговыйТерминал,
		Объект.Организация,
		Объект.Ссылка,
		Объект.ВалютаДенежныхСредств,
		Объект.ПоложениеЭквайринговогоТерминала,
		ПоместитьРасшифровкаПлатежаВХранилище());
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ОткрытьФормуВыбораПериодаРасчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.ПоступлениеНаСчет.Форма.ФормаВыбораПериода", ПараметрыЗаполнения, ЭтотОбъект, УникальныйИдентификатор,,, ОписаниеОповещенияОЗавершении, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПериодаРасчетаЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЭквайринговыеОперацииНаСервере(Результат.ПериодРасчетовДатаНачала, Результат.ПериодРасчетовДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Выполнить команды Подбор.
// Открывает форму подбора долгообразующих документов.
//
&НаКлиенте
Процедура ПодборЭквайринговыхОпераций(Команда)
	
	// Эквайринг
	ВыполнитьВозврат = ПроверитьРеквизитыПередЗаполнениемТабличнойЧасти();
	Если ВыполнитьВозврат Тогда
		Возврат;
	КонецЕсли;
	
	АдресЭквайринговыеОперацииВХранилище = ПоместитьЭквайринговыеОперацииВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"АдресЭквайринговыеОперацииВХранилище,
		|Компания,
		|Дата,
		|Контрагент,
		|Ссылка,
		|ВидОперации,
		|ВалютаДенежныхСредств,
		|СуммаДокумента,
		|БанковскийСчет,
		|ЭквайринговыйТерминал",
		АдресЭквайринговыеОперацииВХранилище,
		Компания,
		Объект.Дата,
		Объект.Контрагент,
		Объект.Ссылка,
		Объект.ВидОперации,
		Объект.ВалютаДенежныхСредств,
		Объект.СуммаДокумента,
		Объект.БанковскийСчет,
		Объект.ЭквайринговыйТерминал
	);
	
	//Если терминал указывается в табличной части, отбор по нему в форме подбора не нужен
	Если Объект.ПоложениеЭквайринговогоТерминала = ПредопределенноеЗначение("Перечисление.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти") Тогда
		ПараметрыПодбора.Удалить("ЭквайринговыйТерминал");
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораДолговПоЭквайрингу", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ЭквайрингПодборЗавершение", ЭтотОбъект,
		Новый Структура("АдресЭквайринговыеОперацииВХранилище", АдресЭквайринговыеОперацииВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаКомиссииДокументаПриИзменении(Элемент)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента + Объект.СуммаКомиссииДокумента;
		
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность
		);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		РасчетыРаботаСФормамиКлиент.РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЭквайринговыйТерминалПриИзмененииНаСервере()
	
	ДоговорЭквайринга = Объект.ЭквайринговыйТерминал.Договор;
	
	Если НЕ ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг ИЛИ ДоговорЭквайринга.РасчетКомиссиВОтчетеЭквайера Тогда
		Объект.ПоложениеЭквайринговогоТерминала = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли; 
	
	НастроитьВидимостьЭлементовВЗависимостиОтТипаСчетаЗатрат();
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации();
	Элементы.ЭквайринговыеОперацииСуммаРасчетовКомиссииВозврата.Видимость = Объект.ЭквайринговыйТерминал.ЭквайрерБеретКомиссиюЗаВозвратДС;
	
КонецПроцедуры

// Обработка выбора табличной части "ЭквайринговыеОперации"
//
&НаКлиенте
Процедура ЭквайринговыеОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЭквайринговыеОперацииНалоговыйУчет" Тогда
		
		ОткрытьФормуРедактированияНастроекНалоговогоУчета(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы настроек налогового учета для строки табличной части "ЭквайринговыеОперации"
//
&НаКлиенте
Процедура ОткрытьФормуРедактированияНастроекНалоговогоУчета(ВыбранноеЗначение)
	
	ВыбраннаяСтрока =  Объект.ЭквайринговыеОперации.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ВидимостьУчитыватьВНУ",		 ВидимостьУчитыватьВНУ);
	ПараметрыПодбора.Вставить("ВидимостьНалогообложениеНДС", Истина);
	ПараметрыПодбора.Вставить("ВидимостьПатент",			 Ложь);
	ПараметрыПодбора.Вставить("УчитыватьВНУ", 				 ВыбраннаяСтрока.УчитыватьВНУ);
	ПараметрыПодбора.Вставить("НалогообложениеНДС", 		 ВыбраннаяСтрока.НалогообложениеНДС);
	ПараметрыПодбора.Вставить("Патент", 					 Неопределено);
	ПараметрыПодбора.Вставить("ИдентификаторСтроки",		 ВыбранноеЗначение);
	
	Обработчик = Новый ОписаниеОповещения("ПриЗавершенииВыбораНастроекНалогообложения", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаНастройкиНалоговогоУчета", ПараметрыПодбора, ЭтаФорма,,,, Обработчик, ПредопределенноеЗначение("РежимОткрытияОкнаФормы.БлокироватьОкноВладельца"));
	
КонецПроцедуры

// Завершение подбора настроек налогового учета для строки табличной части "ЭквайринговыеОперации"
//
&НаКлиенте
Процедура ПриЗавершенииВыбораНастроекНалогообложения(СтруктураРезультата, ДополнительныеПараметры) Экспорт
	
	Если СтруктураРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если СтруктураРезультата.КодВозвратаДиалога = КодВозвратаДиалога.OK И СтруктураРезультата.БылиВнесеныИзменения Тогда
		
		Модифицированность = Истина;
		
		ВыбраннаяСтрока = Объект.ЭквайринговыеОперации.НайтиПоИдентификатору(СтруктураРезультата.ИдентификаторСтроки);
		
		ВыбраннаяСтрока.УчитыватьВНУ = СтруктураРезультата.УчитыватьВНУ;
		ВыбраннаяСтрока.НалогообложениеНДС = СтруктураРезультата.НалогообложениеНДС;
		
		ВыбраннаяСтрока.НалоговыйУчет = ПолучитьПредставлениеНалоговогоУчетаСтроки(ВыбраннаяСтрока, ВидимостьУчитыватьВНУ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработка события "ПриИзменении" поля "Терминал" табличной части "ЭквайринговыеОперации"
//
&НаКлиенте
Процедура ЭквайринговыеОперацииЭквайринговыйТерминалПриИзменении(Элемент)
	
	ВыбраннаяСтрока = Элементы.ЭквайринговыеОперации.ТекущиеДанные;
	
	НалоговыйУчетТерминала = ПолучитьНастройкиНалоговогоУчетаТерминала(ВыбраннаяСтрока.ЭквайринговыйТерминал);
	
	Если НалоговыйУчетТерминала.СобственныеНастройкиНалоговогоУчета Тогда
		
		СтрокаЭквайринга = Объект.ЭквайринговыеОперации.НайтиПоИдентификатору(Элементы.ЭквайринговыеОперации.ТекущаяСтрока); 
		ЗаполнитьЗначенияСвойств(СтрокаЭквайринга, НалоговыйУчетТерминала);
		ВыбраннаяСтрока.НалоговыйУчет = ПолучитьПредставлениеНалоговогоУчетаСтроки(СтрокаЭквайринга, ВидимостьУчитыватьВНУ);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура обновляет содержимое поля "НалоговыйУчет" табличной части "ЭквайринговыеОперации"
//
&НаСервере
Процедура ОбновитьОтображениеНалоговогоУчетаВТабличнойЧасти()
	
	Для каждого СтрокаЭквайринг Из Объект.ЭквайринговыеОперации Цикл
		СтрокаЭквайринг.НалоговыйУчет = ПолучитьПредставлениеНалоговогоУчетаСтроки(СтрокаЭквайринг, ВидимостьУчитыватьВНУ);
	КонецЦикла; 
	
КонецПроцедуры

// Функция возвращает структуру настроек налогообложения для эквайрингового терминала из параметра
//
&НаСервереБезКонтекста
Функция ПолучитьНастройкиНалоговогоУчетаТерминала(Терминал)

	Возврат ЭквайринговыеОперацииСервер.ПолучитьНастройкиНалоговогоУчетаТерминала(Терминал);

КонецФункции

// Функция возвращает строку с описанием настроек налогового учета в строке табличной части "ЭквайринговыеОперации"
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеНалоговогоУчетаСтроки(ВыбраннаяСтрока, ВидимостьУСН) Экспорт
	
	Если ВидимостьУСН Тогда
		УСНСтрокой = ?(ВыбраннаяСтрока.УчитыватьВНУ, НСтр("ru='УСН (Да), '"), НСтр("ru='УСН (Нет), '"));
	Иначе
		УСНСтрокой = "";
	КонецЕсли; 
	
	НалогообложениеСтрокой = РаботаСФормойДокументаКлиентСервер.КраткоеПредставлениеТипаНалогообложенияНДС(ВыбраннаяСтрока.НалогообложениеНДС);
	
	Если НЕ ЗначениеЗаполнено(НалогообложениеСтрокой) Тогда
		НалогообложениеСтрокой = НСтр("ru='<Не выбрано>'");
	КонецЕсли;
	
	СтрокаНалоговогоУчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2'"), УСНСтрокой, НалогообложениеСтрокой);
	
	Возврат СтрокаНалоговогоУчета;
	
КонецФункции

// Обработка события "ПриИзменении" реквизита "ДоговорЭквайринга"
//
&НаКлиенте
Процедура ДоговорЭквайрингаПриИзменении(Элемент)
	ДоговорЭквайрингаПриИзмененииНаСервере();
КонецПроцедуры

// Процедура приводит в соответствие с выбранным договором табличную часть "ЭквайринговыеОперации"
//
&НаСервере
Процедура ДоговорЭквайрингаПриИзмененииНаСервере()
	
	МассивДляУдаления = Новый Массив;
	
	Для каждого СтрокаЭквайринг Из Объект.ЭквайринговыеОперации Цикл
		
		Если СтрокаЭквайринг.ЭквайринговыйТерминал.Договор <> ДоговорЭквайринга Тогда
			МассивДляУдаления.Добавить(СтрокаЭквайринг);
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого СтрокаДляУдаления Из МассивДляУдаления Цикл
		Объект.ЭквайринговыеОперации.Удалить(СтрокаДляУдаления);
	КонецЦикла;
	
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации();
	
КонецПроцедуры

// Процедура распределяет сумму комисси по всем строкам табличной части, когда в комиссия рассчитывается в отчете эквайера
//
&НаСервере
Процедура РаспределитьСуммуКомиссии()
	
	//Необходимо перераспределить комиссию по всем строкам табличной части
	Если ДоговорЭквайринга.РасчетКомиссиВОтчетеЭквайера И ДоговорЭквайринга.КонтрольВзаиморасчетовЭквайринг Тогда
		Если Объект.ЭквайринговыеОперации.Количество() > 0 Тогда
			ТаблицаЭквайринга = Объект.ЭквайринговыеОперации.Выгрузить();
			МассивКоэффициентов = ТаблицаЭквайринга.ВыгрузитьКолонку("СуммаРасчетов");
			МассивСумм = ЭквайринговыеОперацииСервер.РаспределитьПропорционально(Объект.СуммаКомиссииДокумента, МассивКоэффициентов);
			Если МассивСумм <> Неопределено Тогда
				ТаблицаЭквайринга.ЗагрузитьКолонку(МассивСумм, "СуммаРасчетовКомиссии");
				ТаблицаЭквайринга.ЗагрузитьКолонку(МассивСумм, "СуммаПлатежаИтогоПоСтроке");
				Объект.ЭквайринговыеОперации.Загрузить(ТаблицаЭквайринга);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭквайринговыеОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		СтрокаЭквайринг = Элементы.ЭквайринговыеОперации.ТекущиеДанные;
		СтрокаЭквайринг.НалогообложениеНДС = Объект.НалогообложениеНДС;
		СтрокаЭквайринг.УчитыватьВНУ 	   = Объект.УчитыватьВНУ;
		СтрокаЭквайринг.НалоговыйУчет = ПолучитьПредставлениеНалоговогоУчетаСтроки(СтрокаЭквайринг, ВидимостьУчитыватьВНУ);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(	ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры // ОбновитьЭлементыДополнительныхРеквизитов()

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Взаиморасчеты

&НаСервере
Процедура НастроитьЭлементыРаспределенияДолговНаСервере(ПриСозданииНаСервере = Ложь) Экспорт
	
	РасчетыРаботаСФормамиВызовСервера.НастроитьЭлементыРаспределенияСуммыНаСервере(ЭтотОбъект,
		?(ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации, Перечисления.ВидыОперацийРасходСоСчета.НашейОрганизации,Перечисления.ВидыОперацийРасходСоСчета.Поставщику));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа()
	
	Для каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		ТекущаяСтрока.Аванс = ?(ТекущаяСтрока.ПризнакАванса , ТекущаяСтрока.СуммаПлатежа, 0);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПервуюСтрокуРасшифровкиНаСервере()
	
	Объект.РасшифровкаПлатежа.Добавить();
	Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
	Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент, Ложь);
	Объект.РасшифровкаПлатежа[0].ПризнакАванса = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПервуюСтрокуРасшифровкиНаКлиенте()
	
	Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Добавить();
	Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
	Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент, Ложь);
	Объект.РасшифровкаПлатежа[0].ПризнакАванса = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасшифровкуПлатежаПередЗаписью()
	
	Для Каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		Если ТекущаяСтрока.СЗачетом Тогда
			ТекущаяСтрока.СЗачетом = Ложь;
			ТекущаяСтрока.Документ = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруАдресовВХранилище()
	
	СтруктураДляВозврата = Новый Структура();
	
	СтруктураДляВозврата.Вставить("АдресРасшифровкаПлатежаВХранилище",
		ПоместитьВоВременноеХранилище(
			Объект.РасшифровкаПлатежа.Выгрузить(),
			УникальныйИдентификатор
		)
	);
	
	СтруктураДляВозврата.Вставить("АдресТаблицаДокументовДляИзмененияВХранилище",
		ПоместитьВоВременноеХранилище(
			ТаблицаДокументовДляИзменения.Выгрузить(),
			УникальныйИдентификатор
		)
	);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

#Область РаботаСФормойРаспределенияСуммыПлатежа

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		СтруктураВидыИзменяемыхДокументов = РасчетыРаботаСФормамиКлиент.ЗаполнитьРасшировкуПлатежаДеньгиПоДеревуРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		ЗаполнитьРасшировкуПлатежаПоДеревуРаспределенияЗавершение(РезультатЗакрытия, ДопПараметры);
		
		РасчетыРаботаСФормамиКлиент.НастроитьЭлементыДляИзменяемыхДокументов(Истина, ЭтотОбъект, СтруктураВидыИзменяемыхДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшировкуПлатежаПоДеревуРаспределенияЗавершение(РезультатЗакрытия, ДопПараметры)
	
	// Если больше строк не осталось, то добавить одну строку с автораспределением всей суммы на основной договор.
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		Объект.РасшифровкаПлатежа[0].Договор = РезультатЗакрытия.ДоговорПоУмолчанию;
		Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент, Ложь);
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		РасшифровкаПлатежаСуммаПлатежаПриИзменении(Неопределено);
	КонецЕсли;
	
	Если Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница <> Элементы.СтраницаПросмотр Тогда
		ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр;
		НастроитьЭлементыРаспределенияДолговНаСервере();
	КонецЕсли;
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
	Если Объект.СуммаДокумента = 0 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РаспределитьСуммуПлатежа(Команда) Экспорт
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале контрагента!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Объект.Дата <> ДатаПриСозданииНаСервере Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьФормуРаспределенияПлатежа", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Заполнение калькуляции возможно только после записи данных.
					|Данные будут записаны.'"),
		РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьФормуРаспределенияПлатежа(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ=КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ОткрытьФормуРаспределенияПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаспределенияПлатежа()
	
	СтруктураПараметров = Новый Структура();
	СтруктураАдресов = ПолучитьСтруктуруАдресовВХранилище();
	СтруктураПараметров.Вставить("СтруктураАдресов", СтруктураАдресов);
	СтруктураПараметров.Вставить("ЭтоРасчетыСПоставщиком", Истина);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДенежныхСредств);
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуРаспределенияСуммыПлатежа(Истина, ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотраНаКлиенте(пПоДвижениям = Ложь)
	
	Если ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр
		И (Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации) Тогда
		ЗаполнитьТаблицуПросмотраНаСервере(пПоДвижениям, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере(пПоДвижениям = Ложь, пПроверилиНаКлиенте = Ложь)
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраВДенежномДокументеНаСервере(ЭтотОбъект, пПоДвижениям, пПроверилиНаКлиенте);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если СтрНайти(Расшифровка, "ПереходитьВРежимРедактирования") <> 0 Тогда
		ВариантЗаполненияРасшифровки = СтруктураПараметровРасчетов.ВариантЗаполненияРасшифровкиВручную;
		ВариантЗаполненияРасшифровкиПриИзменении(Элементы.ВариантЗаполненияРасшифровки);
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка, СтруктураПараметровРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеНадписиСписокИзменяемыхДокументовНажатие(Элемент, СтандартнаяОбработка)
	
	СписокСсылок = РасчетыРаботаСФормамиКлиент.ДанныеНадписиСписокИзменяемыхДокументовНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка, 2);
	Если СписокСсылок <> Неопределено Тогда
		ОписаниеОповещенияВыбораИзМеню = Новый ОписаниеОповещения("ДанныеНадписиСписокИзменяемыхДокументовНажатиеЗавершение", РасчетыРаботаСФормамиКлиент.ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещенияВыбораИзМеню, СписокСсылок, Элементы.НадписьДокументЗачетаПредоплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособЗачетаПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаСпособЗачетаПриИзменении(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРеквизитыРасчетов()
	
	РасчетыРаботаСФормамиВызовСервера.ОбработатьОбщиеРеквизитыРасчетов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере()
	
	Если Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ВидОперацииПомощника = ВидОперацииНашейОрганизации;
	Иначе
		ВидОперацииПомощника = ВидОперацииПоставщику;
	КонецЕсли;
	
	ЗаполнитьИнформациюОСуммеИВалютеОснования();
	
	РасчетыРаботаСФормамиВызовСервера.ВзаиморасчетыДеньгиПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	// Выведем информацию о документе, в котором будет зачтена предоплата.
	Если ТаблицаДокументовДляИзменения.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа", 0.2, Истина);
	Иначе
		Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа()
	
	РасчетыРаботаСФормамиКлиент.Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа(ЭтотОбъект);
	
КонецПроцедуры // ОбработатьАктивизациюСтрокиСписка()

&НаКлиенте
Процедура ТаблицаДокументовДляИзмененияКартинка1Нажатие(Элемент, СтандартнаяОбработка)
	РасчетыРаботаСФормамиКлиент.ДанныеНадписиСписокИзменяемыхДокументовНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти
