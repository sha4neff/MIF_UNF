#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Событие = Документы.Событие.ПустаяСсылка();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.АктВыполненныхРабот")] = "ОбработчикЗаполнения";
	СтратегияЗаполнения[Тип("ДокументСсылка.ОтчетОПереработке")] = "ОбработчикЗаполнения";
	СтратегияЗаполнения[Тип("ДокументСсылка.РасходнаяНакладная")] = "ОбработчикЗаполнения";
	СтратегияЗаполнения[Тип("ДокументСсылка.Событие")] = "ОбработчикЗаполнения";
	СтратегияЗаполнения[Тип("СправочникСсылка.Контрагенты")] = "ОбработчикЗаполнения";
	СтратегияЗаполнения[Тип("СправочникСсылка.ДоговорыКонтрагентов")] = "ЗаполнитьПоДоговоруКонтрагента";
	СтратегияЗаполнения[Тип("Структура")] = "ОбработчикЗаполнения";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
	ПечатьДокументовУНФ.ОбработкаЗаполненияОснованияПечати(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего") + СтоимостьДоставки + ?(СуммаВключаетНДС, 0, СуммаНДСДоставки);
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	Если ОснованиеПечати = ПечатьДокументовУНФ.ПараметрЭтотДокументСчетНаОплату() Тогда
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			
			ОснованиеПечатиСсылка = Ссылка;
			
		Иначе
		
			СсылкаНового = Документы.СчетНаОплату.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			
			ОснованиеПечатиСсылка = СсылкаНового;
			
			УстановитьНовыйНомер();
			
		КонецЕсли;
		
		НомерДокумента	= ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Дата, Номер, Организация.Префикс);
		ОснованиеПечати	= СтрШаблон(НСтр("ru='Счет на оплату %1 от %2'"), НомерДокумента, Формат(Дата, "ДЛФ=D"));
		
	КонецЕсли;
	
	// До включения автоматических скидок будем считать, что скидки рассчитаны.
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		СкидкиРассчитаны = Истина;
	КонецЕсли;
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторПлатежа) Тогда
		ИдентификаторПлатежа = РасчетыСлужебный.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.СчетНаОплату.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Подчиненная счет-фактура
	Если НЕ Отказ Тогда
		
		КонтрольПодчиненнойСчетФактуры();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Скидка 100%.
	ЕстьРучныеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиНаценкиПродажи");
	ЕстьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки"); // АвтоматическиеСкидки
	Если ЕстьРучныеСкидки ИЛИ ЕстьАвтоматическиеСкидки Тогда
		Для каждого СтрокаЗапасы Из Запасы Цикл
			// АвтоматическиеСкидки
			ТекСумма = СтрокаЗапасы.Цена * СтрокаЗапасы.Количество;
			ТекСуммаРучнойСкидки = ?(ЕстьРучныеСкидки, СтрокаЗапасы.СуммаСкидкиНаценки, 0);
			ТекСуммаАвтоматическойСкидки = ?(ЕстьАвтоматическиеСкидки, СтрокаЗапасы.СуммаАвтоматическойСкидки, 0);
			ТекСуммаСкидки = ТекСуммаРучнойСкидки + ТекСуммаАвтоматическойСкидки;
			Если СтрокаЗапасы.ПроцентСкидкиНаценки <> 100 И ТекСуммаСкидки < ТекСумма
				И НЕ ЗначениеЗаполнено(СтрокаЗапасы.Сумма) Тогда
				ТекстСообщения = НСтр("ru = 'Не заполнена колонка ""Сумма"" в строке %Номер% списка ""Запасы"".'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Сумма",
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗапланироватьОплату
		И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Касса");
		
	ИначеЕсли ЗапланироватьОплату
		И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "БанковскийСчет");
		
	Иначе
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Касса");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "БанковскийСчет");
		
	КонецЕсли;
	
	Если ЗапланироватьОплату
		И ПлатежныйКалендарь.Количество() = 1
		И НЕ ЗначениеЗаполнено(ПлатежныйКалендарь[0].ДатаОплаты) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Дата оплаты"" не заполнено.'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, , , "ДатаОплаты", Отказ);
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПлатежныйКалендарь.ДатаОплаты");
		
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	// Биллинг
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБиллинг") И Договор.ЭтоДоговорОбслуживания Тогда
		Для Каждого Стр Из Запасы Цикл
			Если НЕ УправлениеНебольшойФирмойСервер.РазрешенаПродажаНоменклатурыПоДоговоруОбслуживания(Договор, Стр.Номенклатура, Стр.Характеристика) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Запрещено проводить незапланированные запасы/услуги по текущему договору обслуживания!'"),
					Договор.ДоговорОбслуживанияТарифныйПлан,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("РаботыИУслуги", Стр.НомерСтроки, "Номенклатура"),,
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Доставка
	Если СтоимостьДоставки>0 Тогда
		ПроверяемыеРеквизиты.Добавить("НоменклатураДоставки");
	КонецЕсли;
	// Конец Доставка
	
	// Наборы
	НаборыСервер.ПроверитьТабличнуюЧасть(ЭтотОбъект, "Запасы", Отказ);
	// КонецНаборы
	
	ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

// Процедура заполнения документа на основании заказа покупателя.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоЗаказуПокупателя(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.БанковскийСчет КАК БанковскийСчет,
	|	ЗаказПокупателя.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	ЗаказПокупателя.УсловияСчетаЗаказа КАК УсловияСчетаЗаказа,
	|	ЗаказПокупателя.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	ЗаказПокупателя.Курс КАК Курс,
	|	ЗаказПокупателя.Кратность КАК Кратность,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПокупателя.Договор КАК Договор,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.СкидкиРассчитаны КАК СкидкиРассчитаны1,
	|	ЗаказПокупателя.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	ЗаказПокупателя.ОснованиеПечати КАК ОснованиеПечати,
	|	ЗаказПокупателя.СкидкиРассчитаны КАК СкидкиРассчитаны,
	|	ВЫБОР
	|		КОГДА ЗаказПокупателя.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ПустаяСсылка)
	|				ИЛИ ЗаказПокупателя.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.Самовывоз)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ИНАЧЕ ЗаказПокупателя.НоменклатураДоставки
	|	КОНЕЦ КАК НоменклатураДоставки,
	|	ЗаказПокупателя.СтоимостьДоставки КАК СтоимостьДоставки,
	|	ЗаказПокупателя.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	ЗаказПокупателя.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	ЗаказПокупателя.Вес КАК Вес,
	|	ЗаказПокупателя.Объем КАК Объем,
	|	ЗаказПокупателя.ОжидаетсяВыборВариантаКП КАК ОжидаетсяВыборВариантаКП
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяСкидкиНаценки.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
	|	ЗаказПокупателяСкидкиНаценки.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаказПокупателя.СкидкиНаценки КАК ЗаказПокупателяСкидкиНаценки
	|ГДЕ
	|	ЗаказПокупателяСкидкиНаценки.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Количество КАК Количество,
	|	ЗаказПокупателяЗапасы.Цена КАК Цена,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Всего КАК Всего,
	|	ЗаказПокупателяЗапасы.КлючСвязи КАК КлючСвязи,
	|	ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяЗапасы.Партия КАК Партия,
	|	ЗаказПокупателяЗапасы.Вес КАК Вес,
	|	ЗаказПокупателяЗапасы.Объем КАК Объем,
	|	ЗаказПокупателяЗапасы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяЗапасы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяЗапасы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяЗапасы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяРаботы.Номенклатура КАК Номенклатура,
	|	ЗаказПокупателяРаботы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяРаботы.Содержание КАК Содержание,
	|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяРаботы.Количество * ЗаказПокупателяРаботы.Коэффициент * ЗаказПокупателяРаботы.Кратность КАК Количество,
	|	ЗаказПокупателяРаботы.Цена КАК Цена,
	|	ЗаказПокупателяРаботы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
	|	ЗаказПокупателяРаботы.СуммаСкидкиНаценки КАК СуммаСкидкиНаценки,
	|	ЗаказПокупателяРаботы.Сумма КАК Сумма,
	|	ЗаказПокупателяРаботы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяРаботы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяРаботы.Всего КАК Всего,
	|	ЗаказПокупателяРаботы.КлючСвязиДляСкидокНаценок КАК КлючСвязи,
	|	ЗаказПокупателяРаботы.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЗаказПокупателяРаботы.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЗаказПокупателяРаботы.НоменклатураНабора КАК НоменклатураНабора,
	|	ЗаказПокупателяРаботы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ЗаказПокупателяРаботы.ДоляСтоимости КАК ДоляСтоимости
	|ИЗ
	|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
	|ГДЕ
	|	ЗаказПокупателяРаботы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПокупателяРаботы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавленныеНаборы.Ссылка КАК Заказ,
	|	ДобавленныеНаборы.НоменклатураНабора КАК НоменклатураНабора,
	|	ДобавленныеНаборы.ХарактеристикаНабора КАК ХарактеристикаНабора,
	|	ДобавленныеНаборы.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказПокупателя.ДобавленныеНаборы КАК ДобавленныеНаборы
	|ГДЕ
	|	ДобавленныеНаборы.Ссылка = &Ссылка
	|	И ДобавленныеНаборы.Ссылка.ОсновнойВариантКП = ДобавленныеНаборы.НомерВариантаКП";
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДанныеЗаполнения, Запрос.МенеджерВременныхТаблиц, Ложь);
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = РезультатЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ВыборкаЗапасы = РезультатЗапроса[2].Выбрать();
	ВыборкаРаботы = РезультатЗапроса[3].Выбрать();
	
	Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(
		ДанныеЗаполнения, Новый Структура("ОжидаетсяВыборВариантаКП", ВыборкаШапка.ОжидаетсяВыборВариантаКП));
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	Запасы.Очистить();
	Пока ВыборкаЗапасы.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Запасы.Добавить(), ВыборкаЗапасы);
	КонецЦикла;
	
	Пока ВыборкаРаботы.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Запасы.Добавить(), ВыборкаРаботы);
	КонецЦикла;
	
	Если Договор.ЭтоДоговорОбслуживания Тогда
		Документы.СчетНаОплату.ЗаполнитьРасшифровкуБиллинга(ЭтотОбъект);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		ВыборкаСкидкиНаценки = РезультатЗапроса[1].Выбрать();
		Пока ВыборкаСкидкиНаценки.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СкидкиНаценки.Добавить(), ВыборкаСкидкиНаценки);
		КонецЦикла;
	КонецЕсли;
	
	// Наборы
	ДобавленныеНаборы.Очистить();
	ДобавленныеНаборыЗаказа = РезультатЗапроса[4].Выгрузить();
	Для каждого СтрокаДобавленныхНаборов Из ДобавленныеНаборыЗаказа Цикл
		ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), СтрокаДобавленныхНаборов);
	КонецЦикла;  
	// Конец Наборы
	
	СуммаОплаты = Запасы.Итог("Всего");
	
КонецПроцедуры // ЗаполнитьПоЗаказПокупателя()

Процедура ЗаполнитьПоДоговоруКонтрагента(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.ВалютаРасчетов КАК ВалютаДокумента,
	|	ДоговорыКонтрагентов.ВидЦен КАК ВидЦен,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВидЦен.ЦенаВключаетНДС, ЛОЖЬ) КАК СуммаВключаетНДС,
	|	ДоговорыКонтрагентов.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	ДоговорыКонтрагентов.ЭтоДоговорОбслуживания КАК ЭтоДоговорОбслуживания,
	|	ДоговорыКонтрагентов.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
	|	
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	ВыборкаШапка = Запрос.Выполнить().Выбрать();
	
	ВыборкаШапка.Следующий();
	
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	Если ВыборкаШапка.ЭтоДоговорОбслуживания Тогда
		Документы.СчетНаОплату.ЗаполнитьРасшифровкуБиллинга(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДоговоруКонтрагента()

Процедура ОбработчикЗаполнения(ДанныеЗаполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти(ДанныеЗаполнения)) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ЗапросДанныхДляЗаполнения(ДанныеЗаполнения).Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = РезультатЗапроса.Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Если ВалютаДокумента <> Константы.НациональнаяВалюта.Получить() Тогда
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	Запасы.Очистить();
	ВыборкаТабличнаяЧасть = ВыборкаШапка[ИмяТабличнойЧасти(ДанныеЗаполнения)].Выбрать();
	Пока ВыборкаТабличнаяЧасть.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Запасы.Добавить(), ВыборкаТабличнаяЧасть);
	КонецЦикла;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВыборкаРаботы = ВыборкаШапка.Работы.Выбрать();
		Пока ВыборкаРаботы.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Запасы.Добавить(), ВыборкаРаботы);
		КонецЦикла;
	КонецЕсли;
	
	Если Договор.ЭтоДоговорОбслуживания Тогда
		Документы.СчетНаОплату.ЗаполнитьРасшифровкуБиллинга(ЭтотОбъект);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		ВыборкаСкидкиНаценки = ВыборкаШапка.СкидкиНаценки.Выбрать();
		Пока ВыборкаСкидкиНаценки.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СкидкиНаценки.Добавить(), ВыборкаСкидкиНаценки);
		КонецЦикла;
	КонецЕсли;
	
	// Наборы
	ДобавленныеНаборы.Очистить();
	Если ДанныеЗаполнения.Метаданные().ТабличныеЧасти.Найти("ДобавленныеНаборы")<>Неопределено Тогда
		ВыборкаДобавленныеНаборы = ВыборкаШапка.ДобавленныеНаборы.Выбрать();
		Пока ВыборкаДобавленныеНаборы.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ДобавленныеНаборы.Добавить(), ВыборкаДобавленныеНаборы);
		КонецЦикла;
	КонецЕсли;
	// Конец Наборы
	
	Если Не ДанныеЗаполнения.Метаданные().Реквизиты.Найти("ОснованиеПечати") = Неопределено Тогда
		Если Не Константы.ОснованиеПечатиСчетНаОплату.Получить() = Перечисления.ОснованиеПечатиСпособНачальногоЗаполнение.ОставлятьПустым Тогда
			ОснованиеПечати = ДанныеЗаполнения.ОснованиеПечати;
		КонецЕсли;
	КонецЕсли;
	
	СуммаОплаты = Запасы.Итог("Всего");
	
КонецПроцедуры

Функция ЗапросДанныхДляЗаполнения(ДанныеЗаполнения)
	
	Конструктор = Новый СхемаЗапроса;
	Пакет = Конструктор.ПакетЗапросов[0];
	Пакет.ВыбиратьРазрешенные = Истина;
	Оператор0 = Пакет.Операторы[0];
	Оператор0.Источники.Добавить(ДанныеЗаполнения.Метаданные().ПолноеИмя());
	Для Каждого ОписаниеПоляШапки Из ОписаниеПолейШапки(ДанныеЗаполнения) Цикл
		Оператор0.ВыбираемыеПоля.Добавить(ОписаниеПоляШапки.Ключ);
		Если ЗначениеЗаполнено(ОписаниеПоляШапки.Значение) Тогда
			Пакет.Колонки[Пакет.Колонки.Количество() - 1].Псевдоним = ОписаниеПоляШапки.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекОписаниеПоляТабличнойЧастиЗапасы Из ОписаниеПолейТабличнойЧастиЗапасы(ДанныеЗаполнения) Цикл
		Оператор0.ВыбираемыеПоля.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1.%2",
		ИмяТабличнойЧасти(ДанныеЗаполнения),
		ТекОписаниеПоляТабличнойЧастиЗапасы.Ключ));
		Если ЗначениеЗаполнено(ТекОписаниеПоляТабличнойЧастиЗапасы.Значение) Тогда
			Пакет.Колонки[Пакет.Колонки.Количество() - 1].Псевдоним = ТекОписаниеПоляТабличнойЧастиЗапасы.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекОписаниеПоляТабличнойЧастиРаботы Из ОписаниеПолейТабличнойЧастиРаботы(ДанныеЗаполнения) Цикл
		Оператор0.ВыбираемыеПоля.Добавить(ТекОписаниеПоляТабличнойЧастиРаботы.Ключ);
		Если ЗначениеЗаполнено(ТекОписаниеПоляТабличнойЧастиРаботы.Значение) Тогда
			КолонкаВложеннойТаблицы = Пакет.Колонки[Пакет.Колонки.Количество() - 1];
			КолонкаВложеннойТаблицы.Колонки[КолонкаВложеннойТаблицы.Колонки.Количество() - 1].Псевдоним = ТекОписаниеПоляТабличнойЧастиРаботы.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.КлючСвязи");
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.СкидкаНаценка");
		Оператор0.ВыбираемыеПоля.Добавить("СкидкиНаценки.Сумма");
	КонецЕсли;
	
	// Наборы
	Если ДанныеЗаполнения.Метаданные().ТабличныеЧасти.Найти("ДобавленныеНаборы")<>Неопределено Тогда
		Оператор0.ВыбираемыеПоля.Добавить("ДобавленныеНаборы.НоменклатураНабора");
		Оператор0.ВыбираемыеПоля.Добавить("ДобавленныеНаборы.ХарактеристикаНабора");
		Оператор0.ВыбираемыеПоля.Добавить("ДобавленныеНаборы.Количество");
	КонецЕсли;
	// Конец Наборы
	
	Оператор0.Отбор.Добавить("Ссылка = &Параметр");
	
	Результат = Новый Запрос(Конструктор.ПолучитьТекстЗапроса());
	Результат.УстановитьПараметр("Параметр", ДанныеЗаполнения);
	
	Возврат Результат;
	
КонецФункции

Функция ИмяТабличнойЧасти(ДанныеЗаполнения)
	
	ИменаТабличныхЧастей = Новый Соответствие;
	ИменаТабличныхЧастей[Тип("ДокументСсылка.ЗаказПокупателя")] = "Запасы";
	ИменаТабличныхЧастей[Тип("ДокументСсылка.РасходнаяНакладная")] = "Запасы";
	ИменаТабличныхЧастей[Тип("ДокументСсылка.АктВыполненныхРабот")] = "РаботыИУслуги";
	ИменаТабличныхЧастей[Тип("ДокументСсылка.ОтчетОПереработке")] = "Продукция";
	
	Возврат ИменаТабличныхЧастей[ТипЗнч(ДанныеЗаполнения)];
	
КонецФункции

Функция ОписаниеПолейШапки(ДанныеЗаполнения)
	
	Результат = Новый Соответствие;
	
	ДанныеЗаполненияМетаданные = ДанныеЗаполнения.Метаданные();
	
	Результат.Вставить("Ссылка", "ДокументОснование");
	Результат.Вставить("Организация", "Организация");
	
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "БанковскийСчет");
	
	Если Не ЗначениеЗаполнено(Результат["БанковскийСчет"]) Тогда
		Результат.Вставить("Организация.БанковскийСчетПоУмолчанию", "БанковскийСчет");
	КонецЕсли;
	
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ДисконтнаяКарта");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "УсловияСчетаЗаказа");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ПроцентСкидкиПоДисконтнойКарте");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Курс");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Кратность");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "СуммаВключаетНДС");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "НалогообложениеНДС");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Договор");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Контрагент");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "ВалютаДокумента");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "НоменклатураДоставки");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "СтоимостьДоставки");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "СтавкаНДСДоставки");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "СуммаНДСДоставки");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Вес");
	ДобавитьРеквизитЕслиОнЕстьВДокументе(Результат, ДанныеЗаполненияМетаданные, "Объем");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Результат.Вставить("СкидкиРассчитаны", "СкидкиРассчитаны");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьРеквизитЕслиОнЕстьВДокументе(РезультатСоответствие, ДанныеЗаполненияМетаданные, ИмяРеквизита)
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, ДанныеЗаполненияМетаданные) Тогда
		РезультатСоответствие.Вставить(ИмяРеквизита, ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеПолейТабличнойЧастиЗапасы(ДанныеЗаполнения)
	
	Результат = Новый Соответствие;
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Содержание");
	Результат.Вставить("ЕдиницаИзмерения");
	Результат.Вставить("Количество");
	Результат.Вставить("Цена");
	Результат.Вставить("ПроцентСкидкиНаценки");
	Результат.Вставить("СуммаСкидкиНаценки");
	Результат.Вставить("Сумма");
	Результат.Вставить("СтавкаНДС");
	Результат.Вставить("СуммаНДС");
	Результат.Вставить("Всего");
	Если ИмяТабличнойЧасти(ДанныеЗаполнения) <> "РаботыИУслуги" Тогда
		Результат.Вставить("Партия");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Результат.Вставить("КлючСвязи");
		Результат.Вставить("СуммаАвтоматическойСкидки");
		Результат.Вставить("ПроцентАвтоматическойСкидки");
	КонецЕсли;
	
	// Наборы
	Если ДанныеЗаполнения.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти(ДанныеЗаполнения)].Реквизиты.Найти("НоменклатураНабора")<>Неопределено Тогда
		Результат.Вставить("НоменклатураНабора");
		Результат.Вставить("ХарактеристикаНабора");
		Результат.Вставить("ДоляСтоимости");
	КонецЕсли;
	// Конец Наборы
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеПолейТабличнойЧастиРаботы(ДанныеЗаполнения)
	
	Результат = Новый Соответствие;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("Работы.Номенклатура");
	Результат.Вставить("Работы.Характеристика");
	Результат.Вставить("Работы.Содержание");
	Результат.Вставить("Работы.Номенклатура.ЕдиницаИзмерения", "ЕдиницаИзмерения");
	Результат.Вставить("Работы.Количество * Работы.Коэффициент * Работы.Кратность", "Количество");
	Результат.Вставить("Работы.Цена");
	Результат.Вставить("Работы.ПроцентСкидкиНаценки");
	Результат.Вставить("Работы.СуммаСкидкиНаценки");
	Результат.Вставить("Работы.Сумма");
	Результат.Вставить("Работы.СтавкаНДС");
	Результат.Вставить("Работы.СуммаНДС");
	Результат.Вставить("Работы.Всего");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиНаценки") Тогда
		Результат.Вставить("Работы.КлючСвязиДляСкидокНаценок", "КлючСвязи");
		Результат.Вставить("Работы.СуммаАвтоматическойСкидки");
		Результат.Вставить("Работы.ПроцентАвтоматическойСкидки");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура отмены проведения у подченненой счет фактуры
//
Процедура КонтрольПодчиненнойСчетФактуры()
	
	СтруктураСчетаФактуры = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(Ссылка);
	Если СтруктураСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СчетФактура	 = СтруктураСчетаФактуры.Ссылка;
	Если Не СчетФактура.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = НСтр("ru = 'В связи с отсутствием движений у документа %ПредставлениеТекущегоДокумента% распроводится счет фактура %ПредставлениеСчетФактуры%.'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеТекущегоДокумента%", """Счет на оплату № " + Номер + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + """");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеСчетФактуры%", """Счет фактура (выданная) № " + СтруктураСчетаФактуры.Номер + " от " + СтруктураСчетаФактуры.Дата + """");
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
	СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
	СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры //КонтрольПодчиненнойСчетФактуры()

// Проверяет,в зависимости от использования, заполнение характеристик номенклатуры
//
Процедура ПроверитьЗаполнениеХарактеристик(Объект, Отказ)
	
	Если Не Отказ
		Тогда
		
			СписокНоменклатуры = СписокНоменклатурыСХарактеристиками(Объект, Истина, "Запасы");
			СписокНоменклатурыСПартями = СписокНоменклатурыСПартиями(Объект, Истина, "Запасы");
			
			Для Каждого СтрокаЗапасы Из Объект["Запасы"] Цикл
				
				Если Не СтрокаЗапасы.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
					И Не СписокНоменклатуры.НайтиПоЗначению(СтрокаЗапасы.Номенклатура) = Неопределено 
					И Не ЗначениеЗаполнено(СтрокаЗапасы.Характеристика)
					Тогда
					ТекстСообщения = НСтр("ru = 'Для номенклатуры %1% в строке %Номер%, заполнение поля ""характеристика"" является обязательным. '");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1%", Строка(СтрокаЗапасы.Номенклатура));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
					
					УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					Объект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Характеристика",
					Отказ
					);
				КонецЕсли;
				
				Если Не СписокНоменклатурыСПартями.НайтиПоЗначению(СтрокаЗапасы.Номенклатура) = Неопределено И Не ЗначениеЗаполнено(СтрокаЗапасы.Партия)
					Тогда
					ТекстСообщения = НСтр("ru = 'Для номенклатуры %1% в строке %Номер%, заполнение поля ""партия"" является обязательным. '");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1%", Строка(СтрокаЗапасы.Номенклатура));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
					
					УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					Объект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Партия",
					Отказ
					);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Договор) И Договор.ЭтоДоговорОбслуживания
				Тогда
				СписокНоменклатуры = СписокНоменклатурыСХарактеристиками(ЭтотОбъект, Истина, "РасшифровкаБиллинга","ОбъектДоговораОбслуживания");
				
				Для Каждого СтрокаЗапасы Из Объект["РасшифровкаБиллинга"] Цикл
					
					Если ТипЗнч(СтрокаЗапасы.ОбъектДоговораОбслуживания) = Тип("СправочникСсылка.Номенклатура")
						И Не СтрокаЗапасы.ОбъектДоговораОбслуживания.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
						И СтрокаЗапасы.ОбъектДоговораОбслуживания.ПроверятьЗаполнениеХарактеристики
						И Не ЗначениеЗаполнено(СтрокаЗапасы.Характеристика)
						Тогда
						ТекстСообщения = НСтр("ru = 'Для номенклатуры %1% в строке %Номер%, поля ""характеристика"" является обязательным. '");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1%", Строка(СтрокаЗапасы.ОбъектДоговораОбслуживания));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
						
						УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
						Объект,
						ТекстСообщения,
						"РасшифровкаБиллинга",
						СтрокаЗапасы.НомерСтроки,
						"Характеристика",
						Отказ
						);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

// Получает список номенклатуры для которой ведется учет по характеристикам
//
Функция СписокНоменклатурыСХарактеристиками(Объект, ПроверятьЗаполнениеХарактеристики = ложь, ИмяТабличнойЧасти, ИмяКолонкиТабличнойЧасти = Неопределено)
	
	СписокНоменклатуры = Новый СписокЗначений;
	
	НаименованиеВыгружаемойКолонки = ?(Не ИмяКолонкиТабличнойЧасти = Неопределено, ИмяКолонкиТабличнойЧасти, "Номенклатура");
	
	ТаблицаНоменклатуры = Объект[ИмяТабличнойЧасти].Выгрузить(,НаименованиеВыгружаемойКолонки);
	ТаблицаНоменклатуры.Свернуть(НаименованиеВыгружаемойКолонки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ТаблицаНоменклатуры.[ИмяКолонки] КАК Справочник.Номенклатура) КАК Номенклатура
	               |ПОМЕСТИТЬ ТаблицаНоменклатуры
	               |ИЗ
	               |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |ГДЕ
	               |	ТаблицаНоменклатуры.Номенклатура.ИспользоватьХарактеристики
	               |	И ТаблицаНоменклатуры.Номенклатура.ПроверятьЗаполнениеХарактеристики = &ПроверятьЗаполнениеХарактеристики";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ИмяКолонки]",НаименованиеВыгружаемойКолонки); 
	
	Если НЕ ПроверятьЗаполнениеХарактеристики
		Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ТаблицаНоменклатуры.Номенклатура.ПроверятьЗаполнениеХарактеристики = &ПроверятьЗаполнениеХарактеристики","");
	Иначе
		Запрос.УстановитьПараметр("ПроверятьЗаполнениеХарактеристики",ПроверятьЗаполнениеХарактеристики);
	КонецЕсли;
	
	МассивНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	СписокНоменклатуры.ЗагрузитьЗначения(МассивНоменклатуры);
	
	Возврат СписокНоменклатуры;
	
КонецФункции

// Получает список номенклатуры для которой ведется учет по партиям
//
Функция СписокНоменклатурыСПартиями(Объект, ПроверятьЗаполнениеПартий = ложь, ИмяТабличнойЧасти, ИмяКолонкиТабличнойЧасти = Неопределено)
	
	СписокНоменклатуры = Новый СписокЗначений;
	
	НаименованиеВыгружаемойКолонки = ?(Не ИмяКолонкиТабличнойЧасти = Неопределено, ИмяКолонкиТабличнойЧасти, "Номенклатура");
	
	ТаблицаНоменклатуры = Объект[ИмяТабличнойЧасти].Выгрузить(,НаименованиеВыгружаемойКолонки);
	ТаблицаНоменклатуры.Свернуть(НаименованиеВыгружаемойКолонки);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВЫРАЗИТЬ(ТаблицаНоменклатуры.[ИмяКолонки] КАК Справочник.Номенклатура) КАК Номенклатура
	               |ПОМЕСТИТЬ ТаблицаНоменклатуры
	               |ИЗ
	               |	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	               |ГДЕ
	               |	ТаблицаНоменклатуры.Номенклатура.ИспользоватьПартии
	               |	И ТаблицаНоменклатуры.Номенклатура.ПроверятьЗаполнениеПартий = &ПроверятьЗаполнениеПартий";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"[ИмяКолонки]",НаименованиеВыгружаемойКолонки); 
	
	Если НЕ ПроверятьЗаполнениеПартий
		Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"И ТаблицаНоменклатуры.Номенклатура.ПроверятьЗаполнениеПартий = &ПроверятьЗаполнениеПартий","");
	Иначе
		Запрос.УстановитьПараметр("ПроверятьЗаполнениеПартий",ПроверятьЗаполнениеПартий);
	КонецЕсли;
	
	МассивНоменклатуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	СписокНоменклатуры.ЗагрузитьЗначения(МассивНоменклатуры);
	
	Возврат СписокНоменклатуры;

КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли