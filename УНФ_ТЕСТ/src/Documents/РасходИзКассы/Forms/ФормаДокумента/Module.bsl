
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СозданПоКомандеИзФормыСписка") Тогда
		СозданПоКомандеИзФормыСписка = Параметры.СозданПоКомандеИзФормыСписка;
	Иначе
		СозданПоКомандеИзФормыСписка = Ложь;
	КонецЕсли;
	
	ФормаСоздана = Истина;
	
	// Предопределенные значения
	ВариантЗаполненияРасшифровкиПросмотр = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Просмотр");
	ВариантЗаполненияРасшифровкиВручную = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Вручную");
	// Для сохранения совместимости с предыдущими версиями.
	ВариантЗаполненияРасшифровкиАвтоматически = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияРасшифровкиПлатежа.Автоматически");
	
	СпособЗачетаВручную = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
	СпособЗачетаАвтоматически = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Авто;
	
	ВидОперацииПоставщику = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
	ВидОперацииПокупателю = Перечисления.ВидыОперацийРасходИзКассы.Покупателю;
	ВидОперацииВыдачаЗаймаСотруднику = Перечисления.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику;
	ВидОперацииНашейОрганизации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации;
	
	УчетПоКомпании = Константы.УчетПоКомпании.Получить();
	УчетВалютныхОпераций = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	// Конец Предопределенные значения
	
	// Взаиморасчеты
	ВзаиморасчетыПриСозданииНаСервере();
	// Конец Взаиморасчеты
	
	ДвиженияДенежныхСредствВызовСервера.ЗаполнитьСписокВыбораВидовОпераций("РасходИзКассы", Элементы.ВидОперации.СписокВыбора);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0
	   И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Зарплата Тогда
		ДобавитьПервуюСтрокуРасшифровкиНаСервере();
	КонецЕсли;
	
	КэшЗначений = Новый Структура;
	КэшЗначений.Вставить("ВерсияПодчиненногоСчетФактуры", Неопределено);
	КэшЗначений.Вставить("МодифицированностьФормы", Ложь);
	
	Если Объект.Ссылка.Пустая()
	И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
	    Если Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
			Объект.ВидОперации = ВидОперацииПоставщику;
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Контрагент)
		   И Объект.РасшифровкаПлатежа.Количество() > 0
		И НЕ ЗначениеЗаполнено(Параметры.ДокументОснование) Тогда
			Если НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
				МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
				СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Объект.Ссылка, Объект.ВидОперации);
				Объект.РасшифровкаПлатежа[0].Договор = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(
					Объект.Контрагент, Объект.Организация, СписокВидовДоговоров);
			КонецЕсли;
			Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
				Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
					ДоговорВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
						?(Объект.Дата = '00010101', ТекущаяДатаСеанса(), Объект.Дата),
						Новый Структура("Валюта", Объект.РасшифровкаПлатежа[0].Договор.ВалютаРасчетов)
					);
					
					Объект.РасшифровкаПлатежа[0].Курс = ?(ДоговорВалютаКурсКратность.Курс = 0, 1, ДоговорВалютаКурсКратность.Курс);
					Объект.РасшифровкаПлатежа[0].Кратность = ?(ДоговорВалютаКурсКратность.Кратность = 0, 1, ДоговорВалютаКурсКратность.Кратность);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		// Статья может прийти из шаблона документа или из документа планирования и тогда её заполнять не нужно.
		Если НЕ (Параметры.ЗначенияЗаполнения.Свойство("ШаблонДокумента") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.ШаблонДокумента) И
				Параметры.ЗначенияЗаполнения.Свойство("Статья") И ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Статья)
			)
			И НЕ (
				(ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РасходДСПлан") ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПеремещениеДСПлан"))
				И НЕ Параметры.Основание.СтатьяДвиженияДенежныхСредств.Пустая()
				)
			Тогда
			
			УстановитьСтатьюДДС();
			Если НЕ Объект.Контрагент.Пустая() Тогда
				УстановитьСтатьиДДСВРасшифровкеПлатежа();
			КонецЕсли;
			
		ИначеЕсли	((ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.РасходДСПлан") ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ПеремещениеДСПлан"))
					И НЕ Параметры.Основание.СтатьяДвиженияДенежныхСредств.Пустая()
					)
			Тогда
			
			Если Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
				И ( Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
				ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги) Тогда
				Объект.УчитыватьВНУ = Истина;
			Иначе
				Объект.УчитыватьВНУ = СтатьяУчитываетсяВНУ(Объект.Статья, Объект.Организация, Объект.Дата);
			КонецЕсли;
			
		КонецЕсли;
		Объект.СпециальныйНалоговыйРежим = УправлениеНебольшойФирмойСервер.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя Тогда
			Объект.Корреспонденция = ПланыСчетов.Управленческий.НераспределеннаяПрибыль;
			Если Объект.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
				Объект.Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СпециальныйНалоговыйРежим) Тогда
		Объект.СпециальныйНалоговыйРежим = УправлениеНебольшойФирмойСервер.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	КонецЕсли;
	
	// Установка реквизитов формы.
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	Контрагент = Объект.Контрагент;
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыКурсИКратность(ЭтотОбъект);
	
	// Зачет долгов
	УстановитьВидимостьКурсаВалюты(Объект.ВалютаДенежныхСредств);
	// Конец Зачет долгов
	
	СтруктурнаяЕдиницаПодразделение = Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение;
	
	СозданиеНового = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
	   И НЕ ЗначениеЗаполнено(Параметры.Основание)
	   И НЕ ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
		СозданиеНового = Истина;
	Иначе
		УстановитьВидимостьНалогообложениеНДС();
	КонецЕсли;
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	// Зачет долгов
	СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	// Конец Зачет долгов
	
	ВидОперации = Объект.ВидОперации;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	Корреспонденция = Объект.Корреспонденция;
	
	// Счет фактура и документ-основание
	Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Объект.ДокументОснование, ТолькоПросмотр);
	// Конец Счет фактура и документ-основание
	
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	УстановитьВидимостьПечатиЧека();
	Если ИспользоватьПодключаемоеОборудование И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		УправлениеНебольшойФирмойСервер.ПолучитьДанныеКИКонтрагентаДляВыбораНаФорме(Объект.Контрагент, Элементы, ПоляКИДляОтправкиЧека());
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов = Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов.Получить();
	
	УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(СозданиеНового);
	
	// Зачет долгов
	Если Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную Тогда
		Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаРучноеЗаполнение;
	КонецЕсли;
	
	ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа();
	ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	// Конец Зачет долгов
	
	ВестиРасчетыПоДокументам = Объект.Контрагент.ВестиРасчетыПоДокументам;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги Тогда
		Элементы.НаправлениеДеятельностиНалоги.Видимость = ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
		Элементы.ВыплатаЗаработнойПлатыСотрудникуНаправлениеДеятельности.Видимость = ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов;
	КонецЕсли;
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата Тогда
		Элементы.ВыплатаЗаработнойПлатыНаправлениеДеятельности.Видимость = ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов;
	КонецЕсли;
	
	ОтображениеПериодаРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	
	// Заполнение табличной части при вводе документа из рабочего места.
	Если ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
	   И Параметры.ЗначенияЗаполнения.Свойство("ЗаполнитьРасшифровкаПлатежа")
	   И Параметры.ЗначенияЗаполнения.ЗаполнитьРасшифровкаПлатежа Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность
		);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтрокаТабличнойЧасти.СтавкаНДС.Ставка + 100) / 100);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(Истина);
	УстановитьВидимостьРеквизитовРасчетов();
	УстановитьВидимостьИДоступность();
	УстановитьУсловноеОформление();
	РасчетыРаботаСФормамиВызовСервера.УстановитьСвязьПараметровВыбораПоОрганизации(ЭтотОбъект);
	
	ТекущийПользовательСистемы = Пользователи.ТекущийПользователь();
	
	АвтоподборКонтактов.ПодключитьОбработчикиСобытияАвтоподбор(ЭтотОбъект);
	
	ОтчетыУНФ.ПриСозданииНаСервереФормыСвязанногоОбъекта(ЭтотОбъект);
	
	// Остатки ДС и взаиморасчетов на форме
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС();
	// Конец Остатки ДС и взаиморасчетов на форме
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	УправлениеНебольшойФирмойСервер.УстановитьОтображаниеПодменюПечати(Элементы.ПодменюПечать);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = УправлениеСвойствамиПереопределяемый.ЗаполнитьДополнительныеПараметры(Объект, "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
		Элементы.РасчетыПрочие.Видимость = Ложь;
		Элементы.ГруппаКасса.Видимость = Ложь;
		Элементы.ВидОперации.Видимость = Ложь;
		Элементы.НалогообложениеНДС.Видимость = Ложь;
		Элементы.АвторДокумента.Видимость = Ложь;
		Элементы.ФормаОбщаяКомандаНапомнить.Видимость = Ложь;
		Элементы.ГруппаГлобальныеКоманды.Видимость = Ложь;
		Элементы.ФормаОбработкаНастройкаПрограммыБольшеВозможностейКонтекст.Видимость = Ложь;
		Элементы.ГруппаСсылки.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаЗаказ.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаСчетНаОплату.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаПризнакАванса.Видимость = Ложь;
		
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаПровести.Видимость = Ложь;
		Элементы.ФормаОтменаПроведения.Видимость = Ложь;
		Элементы.ФормаПоказатьВСписке.Видимость = Ложь;
		Элементы.ФормаПровестиИЗакрыть.Заголовок = "Готово";
	КонецЕсли;
	// Конец МобильноеПриложение
	
	ИспользуетсяОтчетность = ПолучитьФункциональнуюОпцию("ИспользоватьОтчетность");
	ИзменитьОтображениеПодсказки(Элементы, Объект.ВидОперации, Не ЗначениеЗаполнено(Объект.Ссылка)И ИспользуетсяОтчетность);
	
	// МобильныйКлиент
	УправлениеНебольшойФирмойСервер.НастроитьФормуОбъектаМобильныйКлиент(Элементы);
	// Конец МобильныйКлиент
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УставитьТекущуюСтраницу();
	
	УправлениеНебольшойФирмойКлиент.ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("ФормаКлиентскогоПриложения")
		И СтрНайти(ИсточникВыбора.ИмяФормы, "ФормаКалендаря") > 0 Тогда
		
		Объект.ПериодРегистрации = КонецДня(ВыбранноеЗначение);
		УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Контрагент" Тогда
		Если ЗначениеЗаполнено(Параметр)
		   И Объект.Контрагент = Параметр Тогда
			УстановитьВидимостьРеквизитовРасчетов();
		КонецЕсли;
	КонецЕсли;
	
	// Прочие расчеты
	Если ИмяСобытия = "Запись_ПланСчетовУправленческий" Тогда
		Если ЗначениеЗаполнено(Параметр)
		   И Объект.Корреспонденция = Параметр Тогда
			УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		КонецЕсли;
	КонецЕсли;
	// Конец Прочие расчеты
	
	// Обсуждения
	ОбсужденияУНФКлиент.ОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтотОбъект, Объект.Ссылка);
	// Конец Обсуждения
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Взаиморасчеты
	Если ФормаСоздана Тогда
		ТаблицаДокументовДляИзменения.Очистить();
		НадписьДокументЗачетаПредоплаты = "";
		Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
		НастроитьЭлементыРаспределенияДолговНаСервере(Истина);
	КонецЕсли;
	
	СпособЗачетаПоУмолчаниюДляКонтрагента = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляКонтрагента(Объект.Контрагент, Ложь);
	// Конец Взаиморасчеты
	
	ВестиРасчетыПоДокументам = Объект.Контрагент.ВестиРасчетыПоДокументам;
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ОценкаПроизводительностиКлиент.ЗамерВремени("Проведение"
			+ РаботаСФормойДокументаКлиентСервер.ПолучитьИмяФормыСтрокой(ЭтотОбъект.ИмяФормы));
	КонецЕсли;
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	КэшЗначений.МодифицированностьФормы = Модифицированность;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Взаиморасчеты
	РасчетыРаботаСФормамиВызовСервера.ПередЗаписьюНаСервереДеньги(ЭтотОбъект, ТекущийОбъект);
	// Конец Взаиморасчеты
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТекстСообщения = "";
		Справочники.ДоговорыКонтрагентов.ПроверитьСоответствиеДоговораУсловиямДокумента(
			ТекстСообщения,
			,
			Объект.Ссылка,
			Объект.Организация,
			Объект.Контрагент,
			Отказ,
			Объект.ВидОперации,
			Объект.РасшифровкаПлатежа,
			Объект.ДоговорКредитаЗайма);
		
		Если ТекстСообщения <> "" Тогда
			
			Сообщение = Новый СообщениеПользователю;
			Если Отказ Тогда
				Сообщение.Текст = СтрШаблон(НСтр("ru = 'Документ не проведен. %1'"), ТекстСообщения);
			Иначе
				Сообщение.Текст = ТекстСообщения;
			КонецЕсли;
			Сообщение.Сообщить();
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обсуждения
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Модифицированность",Модифицированность);
	// Конец Обсуждения
	
КонецПроцедуры // ПередЗаписьюНаСервере()

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Свойство("ВерсияПодчиненногоСчетФактуры", КэшЗначений.ВерсияПодчиненногоСчетФактуры);
	
	// Прочие расчеты
	Если ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику") Или
		ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
	КонецЕсли;
	
	// Конец Прочие расчеты
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	ОбновитьВидимостьИОстаткиДС();
	
	// Зачет долгов
	ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа();
	
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	
	НадписьДокументЗачетаПредоплаты = "";
	Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
	
	ДатаПриСозданииНаСервере = Объект.Дата;
	
	Если ТекущийОбъект.Проведен ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ТаблицаДокументовДляИзменения.Очистить();
		ЗаполнитьТаблицуПросмотраНаСервере(ТекущийОбъект.Проведен);
	КонецЕсли;
	// Конец Зачет долгов

	//Обсуждения
	ОбсужденияУНФ.ПослеЗаписиНаСервере(ТекущийОбъект);	
	// Конец Обсуждения
	
	Если ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
		ИЛИ ТекущийОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		Справочники.ДоговорыКонтрагентов.ЗаписатьСпособЗаполненияСтавкиНДСПоДокументамОплаты(
			ТекущийОбъект.РасшифровкаПлатежа, ТекущийОбъект.Ссылка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если КэшЗначений.МодифицированностьФормы = Истина
		И КэшЗначений.ВерсияПодчиненногоСчетФактуры = "1.6.11" Тогда
		
		ТекстВопроса = НСтр("ru = 'В накладную были внесены изменения.
			|Требуется самостоятельно поправить подчиненный документ счет-фактура'");
		
		ПоказатьПредупреждение(, ТекстВопроса, 0, НСтр("ru ='Счет-фактура'"));
		
	КонецЕсли;
	
	Если СозданПоКомандеИзФормыСписка Тогда
		ПараметрыОповещения = Новый Структура("Ссылка", Объект.Ссылка);
		Оповестить("Запись_РасходИзКассы", ПараметрыОповещения);
	КонецЕсли;
	
	// Оповещение об оплате.
	ОповеститьОбОплатеСчета = Ложь;
	ОповеститьОбОплатеЗаказа = Ложь;
	
	Для каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
		ОповеститьОбОплатеСчета = ?(
			ОповеститьОбОплатеСчета,
			ОповеститьОбОплатеСчета,
			ЗначениеЗаполнено(ТекСтрока.СчетНаОплату)
		);
		ОповеститьОбОплатеЗаказа = ?(
			ОповеститьОбОплатеЗаказа,
			ОповеститьОбОплатеЗаказа,
			ЗначениеЗаполнено(ТекСтрока.Заказ)
		);
	КонецЦикла;
	
	Если ОповеститьОбОплатеСчета Тогда
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплату"));
		ОповеститьОбИзменении(Тип("ДокументСсылка.СчетНаОплатуПоставщика"));
	КонецЕсли;
	
	Если ОповеститьОбОплатеЗаказа Тогда
		Оповестить("ОповещениеОбОплатеЗаказа");
	КонецЕсли;
	
	Оповестить("ОповещениеОбИзмененииДолга");
	
	// РМК
	Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("ФормаКлиентскогоПриложения")
		И СтрНайти(ЭтотОбъект.ВладелецФормы.ИмяФормы, "ФормаДокумента_РМК") > 0 
		Тогда
		Оповестить("РМК_Запись_РКО", Новый Структура("Ссылка, Номер, Дата, ВидОперации", Объект.Ссылка, Объект.Номер, Объект.Дата, Объект.ВидОперации));
	КонецЕсли;
	// Конец РМК
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры // ПослеЗаписи()

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснованиеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "удалить" Тогда
		
		Объект.ДокументОснование = Неопределено;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(Неопределено);
		Модифицированность = Истина;
		
		ДокументОснованиеВалютаПредставление = "";
		ДокументОснованиеСумма = 0;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "заполнить" Тогда
		ЗаполнитьПоОснованиюНачало();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "выбрать" Тогда
		
		//Выбрать основание
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыборТипаОснованияЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещения, ПолучитьСписокДляВыбораДокументаОснования(), Элемент);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "открыть" Тогда
		
		РаботаСФормойДокументаКлиент.ОткрытьФормуДокументаПоСсылке(Объект.ДокументОснование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	СтруктураДанные = ПолучитьДанныеКонтрагентПриИзменении(Объект.Контрагент, КонтрагентПередИзменением, Объект.Организация, Объект.Дата);
	
	ВладелецДоговораПоУмолчанию = Объект.Контрагент;
	ДоговорКонтрагентаПоУмолчанию = СтруктураДанные.Договор;
	
	// Поменяем Выдать, если оно пустое или пользователь не менял его вручную.
	Если Не ЗначениеЗаполнено(Объект.Выдать)
		Или (СокрЛП(Объект.Выдать) = СокрЛП(СтруктураДанные.КонтрагентПередИзменениемНаименованиеПолное)) Тогда
		Объект.Выдать = СтруктураДанные.КонтрагентНаименованиеПолное;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда 
		
		Объект.РасшифровкаПлатежа[0].Договор = СтруктураДанные.Договор;
		Объект.РасшифровкаПлатежа[0].СтавкаНДС = РасчетыРаботаСФормамиВызовСервера.СтавкаНДСПоОрганизациияНалогообложениеНДСИСпособуЗаполнения(Объект.Организация, Объект.Дата, СтруктураДанные.СпособЗаполненияСтавкиНДС);
		
		Если ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].Договор) Тогда
			Объект.РасшифровкаПлатежа[0].Курс = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс
			);
			Объект.РасшифровкаПлатежа[0].Кратность = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
			);
		КонецЕсли;
		
		Объект.РасшифровкаПлатежа[0].Курс = ?(
			Объект.РасшифровкаПлатежа[0].Курс = 0,
			1,
			Объект.РасшифровкаПлатежа[0].Курс
		);
		Объект.РасшифровкаПлатежа[0].Кратность = ?(
			Объект.РасшифровкаПлатежа[0].Кратность = 0,
			1,
			Объект.РасшифровкаПлатежа[0].Кратность
		);
		
		Объект.РасшифровкаПлатежа[0].СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа,
			Курс,
			Объект.РасшифровкаПлатежа[0].Курс,
			Кратность,
			Объект.РасшифровкаПлатежа[0].Кратность
		);
		
		Если Объект.ВидОперации = ВидОперацииПоставщику
			ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
			Объект.РасшифровкаПлатежа[0].СпособЗачета = СтруктураДанные.СпособЗачета;
		Иначе
			Объект.РасшифровкаПлатежа[0].СпособЗачета = СпособЗачетаВручную;
		КонецЕсли;
		
		Если СтруктураДанные.Свойство("Проект") Тогда
			Объект.РасшифровкаПлатежа[0].Проект = СтруктураДанные.Проект;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("Проект") Тогда
		Объект.Проект = СтруктураДанные.Проект;
	КонецЕсли;
	
	// Статьи ДДС
	УстановитьСтатьиДДСВРасшифровкеПлатежа();
	// Конец Статьи ДДС
	
	// Прочие расчеты
	Если СтруктураДанные.Свойство("ДоговорКредитаЗаймаПоУмолчанию") Тогда
		Объект.ДоговорКредитаЗайма = СтруктураДанные.ДоговорКредитаЗаймаПоУмолчанию;
		ОбработатьИзменениеДоговораКредитаИлиЗайма();
	КонецЕсли;
	// Конец Прочие расчеты
	
	Если ЗначениеЗаполнено(СтруктураДанные.СтатьяДДСПоУмолчанию) Тогда
		Объект.Статья = СтруктураДанные.СтатьяДДСПоУмолчанию;
		Объект.УчитыватьВНУ = СтруктураДанные.УчитыватьВНУ;
	КонецЕсли;
	
	ВестиРасчетыПоДокументам = СтруктураДанные.ВестиРасчетыПоДокументам;
	Если ВестиРасчетыПоДокументам И Объект.ВидОперации = ВидОперацииПокупателю Тогда
		Для Каждого ТекущаяСтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ТекущаяСтрокаРасшифровки.ПризнакАванса = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
	// Видимость флага "ПризнакАванса" зависит от установленных флагов учета в карточке контрагента.
	УстановитьУсловноеОформлениеПоДаннымКонтрагента();
	
КонецПроцедуры // КонтрагентПриИзменении()

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	ВидОперацииПередИзменением = ВидОперации;
	ВидОперации = Объект.ВидОперации;
	
	Если ВидОперации <> ВидОперацииПередИзменением Тогда
		УставитьТекущуюСтраницу();
		ОчиститьРеквизитыНеОтносящиесяКОперации();
		ВидОперацииПриИзмененииНаСервере();
		Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда 
			УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
		КонецЕсли;
		
		ИзменитьОтображениеПодсказки(Элементы, Объект.ВидОперации, Не ЗначениеЗаполнено(Объект.Ссылка)И ИспользуетсяОтчетность);
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзменении()

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Обработка события изменения даты.
	ДатаПередИзменением = ДатаДокумента;
	ДатаДокумента = Объект.Дата;
	Если Объект.Дата <> ДатаПередИзменением Тогда
		СтруктураДанные = ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением);
		Если СтруктураДанные.РазностьДат <> 0 Тогда
			Объект.Номер = "";
		КонецЕсли;
		
		// Обновление курсов расчетов
		СтруктураДанные.Вставить("ОбновитьКурсыРасчетов", (Объект.РасшифровкаПлатежа.Количество() > 0 И Объект.РасшифровкаПлатежа.Итог("Курс") > 0 И
			Объект.РасшифровкаПлатежа.Количество() <> Объект.РасшифровкаПлатежа.Итог("Курс")));
		СтруктураДанные.Вставить("ОбновитьКурсыРасчетовТекстВопроса", НСтр("ru = 'Изменилась дата документа. Установить курс расчетов в соответствии с курсом валюты договора?'"));
		// Конец Обновление курсов расчетов
		
		ТекстСообщения = НСтр("ru = 'Изменился курс валюты кассы. Пересчитать суммы документа?'");
		ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);
		
		Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
			Объект.СрокУплаты = ПолучитьСрокУплаты(Объект.ВидНалога, Объект.Дата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Объект.Номер = "";
	СтруктураДанные = ПолучитьДанныеОрганизацияПриИзменении();
	Компания = СтруктураДанные.Компания;
	
	Объект.ПодписьРуководителя = СтруктураДанные.ПодписьРуководителя;
	Объект.ПодписьГлавногоБухгалтера = СтруктураДанные.ПодписьГлавногоБухгалтера;
	
	// Касса по умолчанию
	Если СтруктураДанные.Свойство("Касса") Тогда
		Объект.Касса = СтруктураДанные.Касса;
		Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаДенежныхСредств;
	КонецЕсли;
	
	УстановитьНастройкиУчетаВНалогообложении();
	
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	ВалютаДенежныхСредствПередИзменением = ВалютаДенежныхСредств;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	
	// Если валюта не изменилась, то ничего не делаем.
	Если ВалютаДенежныхСредств = ВалютаДенежныхСредствПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
		ТекстСообщения = НСтр("ru = 'Изменилась валюта кассы. Список ""Платежные ведомости"" будет очищен.'");
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ВалютаДенежныхСредствПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекстСообщения", ТекстСообщения)), ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ВалютаДенежныхСредствПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзмененииЗавершение(ДополнительныеПараметры) Экспорт
	
	ТекстСообщения = ДополнительныеПараметры.ТекстСообщения;
	
	Объект.ВыплатаЗаработнойПлаты.Очистить();
	
	ВалютаДенежныхСредствПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВалютаДенежныхСредствПриИзмененииФрагмент()
	
	Перем СтруктураДанные, ТекстСообщения;
	
	ПредыдущаяВалюдаДС = Объект.ВалютаДенежныхСредств;
	
	СтруктураДанные = ПолучитьДанныеВалютаДенежныхСредствПриИзменении(
	Объект.Дата,
	Объект.ВалютаДенежныхСредств
	);
	
	ТекстСообщения = НСтр("ru = 'Пересчитать суммы документа?'");
	ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения);

	УстановитьЗаголовкиКолонокТабличныхЧастей(Объект.ВалютаДенежныхСредств);
	
КонецПроцедуры // ВалютаДенежныхСредствПриИзменении()

&НаКлиенте
Процедура ПодотчетникПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда
		Объект.Подразделение = РасчетыРаботаСФормамиВызовСервера.ПолучитьТекущееПодразделениеСотрудника(Объект.Подотчетник);
	КонецЕсли;
	
	СтруктураДанные = ПолучитьДанныеПодотчетникПриИзменении(Объект.Подотчетник, Объект.Дата);
	Объект.Выдать = СтруктураДанные.ПодотчетникНаименование;
	Объект.ПоДокументу =
		Строка(СтруктураДанные.ДокументВид)
	  + " серия "
	  + СтруктураДанные.ДокументСерия
	  + ", номер "
	  + СтруктураДанные.ДокументНомер
	  + ", выданный "
	  + Формат(СтруктураДанные.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")
	  + " "
	  + СтруктураДанные.ДокументКемВыдан;
	
КонецПроцедуры // ПодотчетникПриИзменении()

&НаКлиенте
Процедура КорреспонденцияПриИзменении(Элемент)
	
	Если Корреспонденция <> Объект.Корреспонденция Тогда
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Истина);
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Корреспонденция = Объект.Корреспонденция;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	// Зачет долгов
	ИсходнаяСуммаРавнаНулю = (Объект.СуммаДокумента = 0);
	// Конец Зачет долгов
	
	СуммаДокументаПриИзмененииФрагмент();
	
КонецПроцедуры // СуммаДокументаПриИзменении()

&НаКлиенте
Процедура СуммаДокументаПриИзмененииФрагмент()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		
		СтрокаТабличнойЧасти = Объект.РасшифровкаПлатежа[0];
		
		СтрокаТабличнойЧасти.СуммаПлатежа = Объект.СуммаДокумента;
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.Курс = 0,
			1,
			СтрокаТабличнойЧасти.Курс
		);
		
		СтрокаТабличнойЧасти.Кратность = ?(
			СтрокаТабличнойЧасти.Кратность = 0,
			1,
			СтрокаТабличнойЧасти.Кратность
		);
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
		
		РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
		
	КонецЕсли;
	
	Если Объект.ВидОперации = ВидОперацииПоставщику 
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	Иначе
		СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
КонецПроцедуры // СуммаДокументаПриИзменении()

&НаКлиенте
Процедура КассаПриИзменении(Элемент)
	
	ПредыдущаяВалюдаДС = Объект.ВалютаДенежныхСредств;
	
	Объект.ВалютаДенежныхСредств = ?(
		ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) И Не РасчетыРаботаСФормамиКлиент.ВсеСуммыРавныНулю(ЭтотОбъект),
		Объект.ВалютаДенежныхСредств,
		ПолучитьВалютуПоУмолчаниюКассыНаСервере(Объект.Касса)
	);
	
	КассаПриИзмененииФрагмент(ПредыдущаяВалюдаДС);
	
КонецПроцедуры // КассаПриИзменении()

&НаКлиенте
Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	ПараметрыВедомости = ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении(СтрокаТабличнойЧасти.Ведомость);
	СтрокаТабличнойЧасти.Подразделение = ПараметрыВедомости.Подразделение;
	СтрокаТабличнойЧасти.СуммаПлатежа = ПараметрыВедомости.СуммаПлатежа;
	
КонецПроцедуры // ВыплатаЗаработнойПлатыВедомостьПриИзменении()

&НаКлиенте
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УправлениеНебольшойФирмойКлиент.ПриРегулированииПериодаРегистрации(ЭтотОбъект, Направление);
	УправлениеНебольшойФирмойКлиент.ПриИзмененииПериодаРегистрации(ЭтотОбъект);
	
КонецПроцедуры //ПериодРегистрацииРегулирование()

&НаКлиенте
Процедура ПериодРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка	 = Ложь;
	
	ДатаКалендаряПриОткрытии = ?(ЗначениеЗаполнено(Объект.ПериодРегистрации), Объект.ПериодРегистрации, УправлениеНебольшойФирмойПовтИсп.ПолучитьТекущуюДатаСеанса());
	
	ОткрытьФорму("ОбщаяФорма.ФормаКалендаря", УправлениеНебольшойФирмойКлиент.ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии), ЭтотОбъект);
	
КонецПроцедуры //ПериодРегистрацииНачалоВыбора()

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатьяПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.УчитыватьВНУ = СтатьяУчитываетсяВНУ(Объект.Статья, Объект.Организация, Объект.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовНажатие(Элемент)
	
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокВзаиморасчетовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетВзаиморасчетыСКонтрагентом(Объект.Контрагент);

КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредствНажатие(Элемент)
	
	РаботаСФормойДокументаКлиент.ОткрытьОтчетДенежныеСредства(Объект.Касса, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенежныхСредствОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСФормойДокументаКлиент.ОткрытьОтчетДенежныеСредства(Объект.Касса, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияРасшифровкиПриИзменении(Элемент)
	
	НастроитьЭлементыРаспределенияДолговНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		
		СуммаИтог = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		
		Если СуммаИтог <> 0 И СуммаИтог <> Объект.СуммаДокумента Тогда
			НадписьВСкобках = ?(Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную, 
				НСтр("ru = 'разнесено вручную'"), 
				НСтр("ru = 'зачтено + аванс'"));
			
			Элемент.СписокВыбора.Добавить(СуммаИтог, ""+СуммаИтог+" ("+НадписьВСкобках+")");
		КонецЕсли;
		
		Если ОстатокВзаиморасчетов < 0 И (-ОстатокВзаиморасчетов) <> Объект.СуммаДокумента Тогда
			Элемент.СписокВыбора.Добавить(-ОстатокВзаиморасчетов, ""+(-ОстатокВзаиморасчетов)+НСтр("ru = ' (мы должны)'"));
		КонецЕсли;
		
		Если ОстатокДенежныхСредств > 0 И (ОстатокДенежныхСредств) <> Объект.СуммаДокумента Тогда
			Элемент.СписокВыбора.Добавить(ОстатокДенежныхСредств, ""+(ОстатокДенежныхСредств)+НСтр("ru = ' (остаток в кассе)'"));
		КонецЕсли;
		
		Если Элемент.СписокВыбора.Количество() = 0 Тогда
			Элемент.СписокВыбора.Добавить(Объект.СуммаДокумента, НСтр("ru = 'Нет данных для заполнения'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Подотчетник.Пустая() Тогда
		УправлениеНебольшойФирмойКлиент.СообщитьОбОшибке(Объект,НСтр("ru = 'Сначала нужно выбрать подотчетника'"),,,"Объект.Подотчетник");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	СтатистикаИспользованияФормКлиент.ПриИнтерактивномДействии(ЭтотОбъект, Элемент, "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНалогаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВидНалога) Тогда
		Объект.СрокУплаты = ПолучитьСрокУплаты(Объект.ВидНалога, Объект.Дата);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РасчетыРаботаСФормамиКлиент.ОбработатьИзменениеДоговораКонтрагента(ЭтотОбъект, СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ОбработатьНачалоВыбораДоговораКонтрагента(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта",Новый Структура("Владелец, Организация, ВидДоговора, ОповеститьОЗаписиДоговора",Объект.Контрагент,Объект.Организация,ВидДоговораПриСоздании(Объект.ВидОперации), Истина), Элемент);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидДоговораПриСоздании(ВидОперации)
	Если ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю  Тогда
		Возврат Перечисления.ВидыДоговоров.СПокупателем;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации Тогда
		Возврат Перечисления.ВидыДоговоров.СПоставщиком;
	Иначе
		Возврат Перечисления.ВидыДоговоров.Прочее;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура РасшифровкаПлатежаПризнакАвансаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		Если СтрокаТабличнойЧасти.ПризнакАванса Тогда
			СтрокаТабличнойЧасти.Документ = Неопределено;
		Иначе
			СтрокаТабличнойЧасти.ДокументПланирования = Неопределено;
		КонецЕсли;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю")
		И ВестиРасчетыПоДокументам Тогда
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет")
		 ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам") Тогда
			СтрокаТабличнойЧасти.ПризнакАванса = Истина;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данного типа документа расчетов признак аванса всегда установлен.'"));
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Документ) <> Тип("ДокументСсылка.Взаимозачет") Тогда
			СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для данного типа документа расчетов нельзя установить признак аванса.'"));
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса , СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры // РасшифровкаПлатежаПризнакАвансаПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаДокументПриИзменении(Элемент)
	
	ВыполнитьДействияПриИзмененииДокументаРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти <> Неопределено И СтрокаТабличнойЧасти.СпособЗачета = СпособЗачетаАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоРасчетыСПокупателями = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю");
	
	СтруктураОтбор = Новый Структура();
	СтруктураОтбор.Вставить("Контрагент", Объект.Контрагент);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураОтбор.Вставить("Договор", СтрокаТабличнойЧасти.Договор);
	КонецЕсли;
	Если НЕ УчетПоКомпании Тогда
		СтруктураОтбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	СтруктураПараметры = Новый Структура("Отбор, ЭтоРасчетыСПокупателями, ТипДокумента",
		СтруктураОтбор,
		ЭтоРасчетыСПокупателями,
		ТипЗнч(Объект.Ссылка)
	);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыборДокументаРасчетов", СтруктураПараметры, Элемент);
	
КонецПроцедуры // РасшифровкаПлатежаДокументНачалоВыбора()

&НаКлиенте
Процедура РасшифровкаПлатежаДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьВыборДокументаРасчетов(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаРасчетовПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаСуммаРасчетовПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзменении(Элемент)
	
	РасшифровкаПлатежаКурсПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаКурсПриИзмененииФрагмент(ТекущиеДанные)
	
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, ТекущиеДанные, "Курс");
		
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаКурсПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКратностьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущиеДанные.СуммаПлатежа = 0 И ТекущиеДанные.СуммаРасчетов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежа.ТекущиеДанные, "Кратность");
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры // РасшифровкаПлатежаКратностьПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(СтрокаТабличнойЧасти);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
		
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры // РасшифровкаПлатежаСуммаПлатежаПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РасшифровкаПлатежаСтавкаНДСПриИзменении()

&НаКлиенте
Процедура РасшифровкаПлатежаСчетНаОплатуПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		РасшифровкаПлатежаСчетНаОплатуПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаПлатежаСчетНаОплатуПриИзмененииФрагмент(ТекущиеДанныеИдентификатор)
	
	ТекущиеДанные = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
	Если Объект.Контрагент.ВестиРасчетыПоЗаказам Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.СчетНаОплату) Тогда
			ТекущиеДанные.СпособЗачета = Перечисления.СпособыЗачетаИРаспределенияПлатежей.Вручную;
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Заказ) И
				ТипЗнч(ТекущиеДанные.СчетНаОплату) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") И
				ТипЗнч(ТекущиеДанные.СчетНаОплату.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				
				ТекущиеДанные.Заказ = ТекущиеДанные.СчетНаОплату.ДокументОснование;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаЗаказПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ИзменилиСуммуПлатежа = РасшифровкаПлатежаЗаказПриИзмененииФрагмент(Элементы.РасшифровкаПлатежа.ТекущиеДанные.ПолучитьИдентификатор());
		Если ИзменилиСуммуПлатежа И Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
			СуммаДокументаПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РасшифровкаПлатежаЗаказПриИзмененииФрагмент(ТекущиеДанныеИдентификатор)
	
	Возврат РасчетыРаботаСФормамиВызовСервера.РасшифровкаПлатежаЗаказПриИзмененииФрагмент(Объект, ТекущиеДанныеИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзмененииЗавершениеНаКлиенте(СтрокаТабличнойЧасти, ИмяКолонки = "СуммаПлатежа")
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор
		);
		
	Если СтрокаТабличнойЧасти.СуммаПлатежа = 0 Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = 0;
		СтрокаТабличнойЧасти.Курс = СтруктураДанные.ДоговорВалютаКурсКратность.Курс;
	ИначеЕсли Объект.ВалютаДенежныхСредств = СтруктураДанные.ВалютаРасчетов Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
	ИначеЕсли СтрокаТабличнойЧасти.СуммаРасчетов = 0 Тогда
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
	Иначе
		СтрокаТабличнойЧасти.Курс = ?(
			СтрокаТабличнойЧасти.СуммаРасчетов = 0 ИЛИ СтрокаТабличнойЧасти.СуммаПлатежа = 0,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс,
			СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
		);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
	
КонецПроцедуры // РасшифровкаПлатежаСуммаПлатежаПриИзменении()

&НаКлиенте
Процедура РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДокументыПланированияРасшифровкаПлатежа.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.СуммаРасчетов = ТекущаяСтрока.СуммаПлатежа;
	КонецЕсли;
	ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДекорацияПечатьНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзмененияРеквизитовПечати", ЭтотОбъект);
	ОткрытьФорму("Обработка.РеквизитыПечати.Форма.РеквизитыПечатиРасходИзКассы", Новый Структура("КонтекстПечати", Объект), ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале валюту.'"));
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкаПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	
	ПараметрыПодбора = Новый Структура(
		"АдресРасшифровкаПлатежаВХранилище,
		|Компания,
		|Дата,
		|Контрагент,
		|Ссылка,
		|ВидОперации,
		|ВалютаДенежныхСредств,
		|СуммаДокумента",
		АдресРасшифровкаПлатежаВХранилище,
		Компания,
		Объект.Дата,
		Объект.Контрагент,
		Объект.Ссылка,
		Объект.ВидОперации,
		Объект.ВалютаДенежныхСредств,
		Объект.СуммаДокумента
	);
	
	ОткрытьФорму("ОбщаяФорма.ФормаПодбораДолговПоставщикам", ПараметрыПодбора, , , , ,
		Новый ОписаниеОповещения("ПодборЗавершение", ЭтотОбъект, Новый Структура("АдресРасшифровкаПлатежаВХранилище",
		АдресРасшифровкаПлатежаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗавершение(Результат1, ДополнительныеПараметры) Экспорт
	
	АдресРасшифровкаПлатежаВХранилище = ДополнительныеПараметры.АдресРасшифровкаПлатежаВХранилище;
	
	Результат = Результат1;
	Если Результат = КодВозвратаДиалога.OK Тогда
		
		ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище);
		ИмяТабличнойЧасти = "РасшифровкаПлатежа";
		Для каждого СтрокаРасшифровкаПлатежа Из Объект.РасшифровкаПлатежа Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаРасшифровкаПлатежа.СтавкаНДС) Тогда
				СтрокаРасшифровкаПлатежа.СтавкаНДС = СтавкаНДСПоУмолчанию;
			КонецЕсли;
			РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, СтрокаРасшифровкаПлатежа);
			СтрокаРасшифровкаПлатежа.СпособЗачета = СпособЗачетаВручную;
		КонецЦикла;
		
		УставитьТекущуюСтраницу();
		
		Если Объект.РасшифровкаПлатежа.Количество() = 1 ИЛИ ИсходнаяСуммаРавнаНулю Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // Подбор()

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьПредупреждение(Неопределено,Нстр("ru='Не выбран документ основание.'"));
		Возврат;
	КонецЕсли;
	
	Если (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеДСПлан")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан"))
		И НЕ ДокументУтвержден(Объект.ДокументОснование) Тогда
		ВызватьИсключение НСтр("ru = 'Нельзя ввести перемещение денег на основании неутвержденного планового документа.'");
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект), НСтр(
		"ru = 'Документ будет полностью перезаполнен по ""Документу-основанию"". Продолжить выполнение операции?'"),
		РежимДиалогаВопрос.ДаНет, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		
		ЗаполнитьПоДокументу(Объект.ДокументОснование);
		
		Если Объект.РасшифровкаПлатежа.Количество() = 0
			И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
			ДобавитьПервуюСтрокуРасшифровкиНаКлиенте();
		КонецЕсли;
		
		ВидОперации = Объект.ВидОперации;
		ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
		ДатаДокумента = Объект.Дата;
		
		УставитьТекущуюСтраницу();
		ЗаполнитьПоОснованиюЗавершениеНаСервере();
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьПоОснованию()

&НаКлиенте
Процедура НапечататьЧек(Команда)
	
	Если Объект.ВалютаДенежныхСредств <> УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
		ТекстСообщения = НСтр("ru = 'Валюта оплаты отличается от национальной.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Чек уже пробит на оборудовании.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ПоказыватьПредупреждение = Ложь;
	Если НЕ УправлениеНебольшойФирмойКлиент.ПроверитьВозможностьПечатиЧека(ЭтотОбъект, ПоказыватьПредупреждение) Тогда
		Если ПоказыватьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удалось выполнить проведение документа'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключенияФискальногоРегистратораЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьЧекВыполнить()

&НаСервере
Функция ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР, ЭтоВозврат) 
	
	// Подготовка таблицы товаров
	ОбщиеПараметры = МенеджерОборудованияКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	РозничныеПродажиСервер.ДополнитьТоварамиПараметрыПриПробитииЧека(Объект, ОбщиеПараметры);
	СуммаСтрокЧека = РозничныеПродажиСервер.СуммаСтрокЧека(ОбщиеПараметры);
	
	// Общие параметры чека
	РеквизитыОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Организация, "НаименованиеПолное,ИНН,КПП");
	
	КассаККМ = Справочники.КассыККМ.ПолучитьКассуККМПоЭкземпляруОборудования(ИдентификаторУстройстваФР);
	Если НЕ ЗначениеЗаполнено(КассаККМ) Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена касса ККМ соответсвующая устройству %устройство%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%устройство%", ИдентификаторУстройстваФР);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
	КонецЕсли;

	СтруктураРеквизитов = Новый Структура("ЭлектронныйЧекSMSПередаютсяПрограммой1С,ЭлектронныйЧекEmailПередаютсяПрограммой1С,СерийныйНомер,Код,ПодключаемоеОборудование,СтруктурнаяЕдиница");
	СтруктураРеквизитов.Вставить("СпособФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.СпособФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ДопустимоеРасхождениеФорматноЛогическогоКонтроля", "ПодключаемоеОборудование.ДопустимоеРасхождениеФорматноЛогическогоКонтроля");
	СтруктураРеквизитов.Вставить("ТипОборудования", "ПодключаемоеОборудование.ТипОборудования");
	РеквизитыКассыККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КассаККМ, СтруктураРеквизитов);
	
	РеквизитыКассира = РозничныеПродажиСервер.ПолучитьРеквизитыКассира(Объект.Автор, Объект.ПодписьКассира);
	
	ОбщиеПараметры.ТипРасчета = ?(ЭтоВозврат,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств,
		Перечисления.ТипыРасчетаДенежнымиСредствами.РасходДенежныхСредств);
		
	ОбщиеПараметры.Электронно = Ложь;
	
	Если ЗначениеЗаполнено(Объект.Телефон) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекSMSПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СSMS = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательНомер = "+7" + РозничныеПродажиСервер.УбратьРазделителиВНомереТелефона(Объект.Телефон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресЭП) Тогда
		Если РеквизитыКассыККМ.ЭлектронныйЧекEmailПередаютсяПрограммой1С Тогда
			ОбщиеПараметры.Отправляет1СEmail = Истина;
		КонецЕсли;
		ОбщиеПараметры.ПокупательEmail = Объект.АдресЭП;
	КонецЕсли;
	
	СведенияОКонтрагенте = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "НаименованиеПолное,ИНН,ВидКонтрагента");
	Если СведенияОКонтрагенте.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо 
		ИЛИ ЗначениеЗаполнено(СведенияОКонтрагенте.ИНН) Тогда			
		ОбщиеПараметры.Получатель    = СведенияОКонтрагенте.НаименованиеПолное;
		ОбщиеПараметры.ПолучательИНН = СведенияОКонтрагенте.ИНН;		
	КонецЕсли;
	
	ОбщиеПараметры.ДокументОснование = Объект.Ссылка;
	ОбщиеПараметры.ТорговыйОбъект = РеквизитыКассыККМ.СтруктурнаяЕдиница;
	
	// Параметры необходимые для чека ЕНВД на принтере чеков
	ОбщиеПараметры.КассаККМ = КассаККМ;
	ОбщиеПараметры.Кассир = РеквизитыКассира.ИмяКассираИДолжность;
	ОбщиеПараметры.Вставить("ИмяКассира", РеквизитыКассира.ИмяКассира);
	ОбщиеПараметры.КассирИНН = РеквизитыКассира.КассирИНН;
	
	ОбщиеПараметры.ОрганизацияНазвание = РеквизитыОрганизация.НаименованиеПолное;
	ОбщиеПараметры.ОрганизацияИНН = РеквизитыОрганизация.ИНН;
	ОбщиеПараметры.ОрганизацияКПП = РеквизитыОрганизация.КПП;
	ОбщиеПараметры.НомерКассы     = "00001";
	ОбщиеПараметры.НомерЧека      = "1";
	ОбщиеПараметры.НомерСмены     = "1";
	
	АдресМагазина = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Объект.Организация, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"));
	
	СерийныйНомер = РеквизитыКассыККМ.СерийныйНомер;
	Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
		СерийныйНомер = "1";
	КонецЕсли;
	
	ОбщиеПараметры.АдресМагазина = АдресМагазина;
	ОбщиеПараметры.НаименованиеМагазина = Строка(Объект.Организация);
	ОбщиеПараметры.СерийныйНомер = СерийныйНомер;
	ОбщиеПараметры.СистемаНалогообложения = РозничныеПродажиСервер.ПолучитьТипСистемыНалогообложенияККТ(
		Объект.Организация,
		,
		Объект.Дата,
		Объект.СпециальныйНалоговыйРежим);
		
	Если РеквизитыКассыККМ.ТипОборудования = Перечисления.ТипыПодключаемогоОборудования.ККТ Тогда
		ОбщиеПараметры.СпособФорматноЛогическогоКонтроля = РеквизитыКассыККМ.СпособФорматноЛогическогоКонтроля;
		ОбщиеПараметры.ДопустимоеРасхождениеФорматноЛогическогоКонтроля = РеквизитыКассыККМ.ДопустимоеРасхождениеФорматноЛогическогоКонтроля;
		Если ФорматноЛогическийКонтрольКлиентСервер.НуженФорматноЛогическийКонтроль(ОбщиеПараметры) Тогда
			ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ОбщиеПараметры);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Наличные, НСтр("ru = 'Наличные'"), Объект.СуммаДокумента);
	ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	
	РазницаСумм = СуммаСтрокЧека - Объект.СуммаДокумента;
	Если РазницаСумм > 0 Тогда
		СтрокаОплаты = Новый Структура("ТипОплаты,Наименование,Сумма", Перечисления.ТипыОплатыККТ.Постоплата, НСтр("ru = 'Постоплата'"), РазницаСумм);
		ОбщиеПараметры.ТаблицаОплат.Добавить(СтрокаОплаты);
	КонецЕсли;
	
	Возврат ОбщиеПараметры;
	
КонецФункции // ПодготовитьДанныеДляПробитияЧека()

&НаКлиенте
Процедура ПодключенияФискальногоРегистратораЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю");
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР, ЭтоВозврат);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	Контекст = Новый Структура("КассаККМ", ОбщиеПараметры.КассаККМ);
	
	Оповещение = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект, Контекст);
	
	МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
		Оповещение, 
		УникальныйИдентификатор, 
		ОбщиеПараметры, 
		ИдентификаторУстройстваФР,
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	ЭтотОбъект.Доступность = Истина;
	
	Если РезультатВыполнения.Результат Тогда
		
		// Установить полученное значение номера чека реквизиту документа.
		Если РезультатВыполнения.ВыходныеПараметры <> Неопределено Тогда
			Объект.НомерСменыККМ = РезультатВыполнения.ВыходныеПараметры[0];
			Объект.НомерЧекаККМ = РезультатВыполнения.ВыходныеПараметры[1];
			Объект.КассаККМ = Параметры.КассаККМ;
		КонецЕсли;
		
		Объект.Дата = УправлениеНебольшойФирмойВызовСервера.ДатаСеанса();
		
		Если НЕ ЗначениеЗаполнено(Объект.НомерЧекаККМ) Тогда
			Объект.НомерЧекаККМ = 1;
		КонецЕсли;
		
		Модифицированность = Истина;
		
		РезультатПроведения = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		
	Иначе
		
		ТекстСообщения = НСтр(
			"ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном регистраторе.
			|Дополнительное описание:
			|%ДополнительноеОписание%'"
		);
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки
		);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	УстановитьДоступностьПечатиЧека();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровку(Команда)
	
	Если Объект.СуммаДокумента = 0 Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru='Укажите вначале сумму документа.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вначале валюту.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРасшифровкуЗавершение", ЭтотОбъект), НСтр(
		"ru='Расшифровка будет полностью перезаполнена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшифровкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Ответ = Результат;
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.РасшифровкаПлатежа.Очистить();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		
		ЗаполнитьРасшифровкуПлатежа();
		
	КонецЕсли;
	
	УставитьТекущуюСтраницу();
	
КонецПроцедуры // ЗаполнитьРасшифровку()

&НаКлиенте
Процедура ОбновитьКурсВТекущейСтрокеРасшифровки(Команда)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю") 
		И ЗначениеЗаполнено(ТекущиеДанные.Документ) И ТекущиеДанные.ПризнакАванса Тогда
		
		КурсКратностьДокументаРасчетов = РасчетыРаботаСФормамиВызовСервера.ПолучитьКурсКратностьДокументаРасчетов(ТекущиеДанные.Документ);
		ТекущиеДанные.Курс = КурсКратностьДокументаРасчетов.Курс;
		ТекущиеДанные.Кратность = КурсКратностьДокументаРасчетов.Кратность;
		
	Иначе
		СтруктураДанных = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(Объект.Дата, ТекущиеДанные.Договор);
		ТекущиеДанные.Курс = СтруктураДанных.ДоговорВалютаКурсКратность.Курс;
		ТекущиеДанные.Кратность = СтруктураДанных.ДоговорВалютаКурсКратность.Кратность;
	КонецЕсли;
	
	РасшифровкаПлатежаКурсПриИзмененииФрагмент(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонАдресЭППриИзменении(Элемент)
	
	УправлениеНебольшойФирмойКлиент.УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйРеквизит(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ПредопределенноеЗначение("Справочник.НаборыДополнительныхРеквизитовИСведений.Документ_РасходИзКассы"));
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", Ложь);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧека(Команда)
	
	Если Модифицированность Тогда
		Если Объект.Проведен Тогда
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет проведен. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Провести и продолжить'"));
		Иначе
			ТекстВопроса = НСтр("ru = 'Для выполнения команды ""Предварительный просмотр""
				|документ будет записан. Продолжить?'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК, НСтр("ru = 'Записать и продолжить'"));
		КонецЕсли;
		Обработчик = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаПродолжение", ЭтотОбъект);
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки);
	Иначе
		ПредварительныйПросмотрЧекаПродолжение(Неопределено, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.ОК Тогда
		Если Объект.Проведен Тогда
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Иначе
			РезультатЗаписи = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		КонецЕсли;
		Если Не РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПредварительныйПросмотрЧекаЗавершение", ЭтотОбъект);
		МассивОборудования = Новый Массив;
		МассивОборудования.Добавить("ФискальныйРегистратор");
		МассивОборудования.Добавить("ККТ");
		МассивОборудования.Добавить("ПринтерЧеков");
		МенеджерОборудованияКлиент.ПредложитьВыбратьУстройство(ОписаниеОповещения, МассивОборудования,
				НСтр("ru='Выберите оборудование'"), НСтр("ru='Оборудование не подключено.'"));
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрЧекаЗавершение(ИдентификаторУстройстваФР, Параметры) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ИдентификаторУстройстваФР = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Устройство для печати чеков не выбрано.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭтоВозврат = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю");
	
	ОбщиеПараметры = ПодготовитьДанныеДляПробитияЧека(ИдентификаторУстройстваФР, ЭтоВозврат);
	
	Если ОбщиеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметры.ДатаВремя = ТекущаяДата();
	
	УправлениеНебольшойФирмойКлиент.ПредпросмотрЧекаДенежныхДокументов(ОбщиеПараметры, ЭтаФорма, ИдентификаторУстройстваФР);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработатьИзмененияРеквизитовПечати(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПечатьДокументовУНФКлиент.ОбновитьЗначенияРеквизитовПечати(ЭтотОбъект, Результат.ИзмененныеРеквизиты);
		
		Если Результат.Свойство("Команда") Тогда
			
			Подключаемый_ВыполнитьКоманду(Результат.Команда);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТипаОснованияЗавершение(ВыбИмяФормы, Параметры) Экспорт
	
	Если ВыбИмяФормы<>Неопределено Тогда
		
		СтруктураПараметровОтбора = Новый Структура();
		Для каждого элОтбора Из ПараметрыВыбораДокументаОснования Цикл
			ИмяПоляОтбора = СтрЗаменить(элОтбора.Имя,"Отбор.","");
			СтруктураПараметровОтбора.Вставить(ИмяПоляОтбора, элОтбора.Значение);
		КонецЦикла;
		
		Если Объект.ВидОперации = ВидОперацииВыдачаЗаймаСотруднику И
			СтрНайти(ВыбИмяФормы.Значение, "ДоговорКредитаИЗайма") > 0 Тогда
			Если Не Объект.Подотчетник.Пустая() Тогда
				СтруктураПараметровОтбора.Вставить("Сотрудник", Объект.Подотчетник);
			КонецЕсли;
		Иначе
			Если НЕ Объект.Контрагент.Пустая() Тогда
				СтруктураПараметровОтбора.Вставить("Контрагент", Объект.Контрагент);
			КонецЕсли;
		КонецЕсли;
		ПараметрыОткрытияФормы = Новый Структура("Отбор", СтруктураПараметровОтбора);
		
		_ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыбратьОснованиеЗавершение", ЭтотОбъект);
		ОткрытьФорму(ВыбИмяФормы.Значение, ПараметрыОткрытияФормы, ЭтотОбъект, ,,,_ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОснованиеЗавершение(ВыбЗначение, Параметры) Экспорт

	Если ВыбЗначение<>Неопределено Тогда
		Объект.ДокументОснование = ВыбЗначение;
		Элементы.ДокументОснованиеНадпись.Заголовок = РаботаСФормойДокументаКлиентСервер.СформироватьНадписьДокументОснование(ВыбЗначение);
		Модифицированность = Истина;
		
		ЗаполнитьПоОснованиюНачало();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюНачало() Экспорт
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Возврат;
	КонецЕсли;
	// Конец МобильноеПриложение
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения, 
		НСтр("ru = 'Заполнить документ по выбранному основанию?'"), 
		РежимДиалогаВопрос.ДаНет, 0);

КонецПроцедуры

&НаСервере
Процедура КассаПриИзмененииФрагмент(ПредыдущаяВалюдаДС)
	
	ОбновитьВидимостьИОстаткиДС();
	
КонецПроцедуры // КассаПриИзменении()

&НаСервере
Процедура ОпределитьВидимостьНастроекУчетаВНалогообложении()
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Объект.Организация) Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
		
		Возврат;
	Иначе
		Элементы.ГруппаУчетВНУ.Видимость = Истина;
	КонецЕсли;
	
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Объект.Организация, Объект.Дата);
	ПлательщикУСН =  СистемаНалогообложенияСтруктура.ПлательщикУСН;
	
	Если Не ПлательщикУСН Тогда
		Элементы.ГруппаУчетВНУ.Видимость = Ложь;
	Иначе
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
			Элементы.УчитыватьВНУ.Видимость = Истина;
		Иначе
			Элементы.УчитыватьВНУ.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ГруппаУчетВНУ.Видимость = Элементы.УчитыватьВНУ.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиУчетаВНалогообложении()
	
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	Если ЗначениеЗаполнено(Объект.Статья) Тогда
		Объект.УчитыватьВНУ = СтатьяУчитываетсяВНУ(Объект.Статья, Объект.Организация, Объект.Дата);
	КонецЕсли;
	Объект.СпециальныйНалоговыйРежим = УправлениеНебольшойФирмойСервер.СпециальныйНалоговыйРежим(Объект.Организация,,Объект.Дата);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДляВыбораДокументаОснования()
	
СписокОснований = Новый СписокЗначений;
	
	СписокОснований.Добавить("Документ.ПриходнаяНакладная.ФормаВыбора", "Приходная накладная");
	
	// МобильноеПриложение
	Если НЕ МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		СписокОснований.Добавить("Документ.НачислениеНалогов.ФормаВыбора", "Начисление налогов");
		СписокОснований.Добавить("Документ.ЗаказПоставщику.ФормаВыбора", "Заказ поставщику");
		СписокОснований.Добавить("Документ.СчетНаОплатуПоставщика.ФормаВыбора", "Счет на оплату (полученный)");
		СписокОснований.Добавить("Документ.ДополнительныеРасходы.ФормаВыбора", "Дополнительные расходы");
		СписокОснований.Добавить("Документ.ПлатежнаяВедомость.ФормаВыбора", "Платежная ведомость");
		Если ПолучитьФункциональнуюОпцию("ПередачаТоваровНаКомиссию") Тогда
			СписокОснований.Добавить("Документ.ОтчетКомиссионера.ФормаВыбора", "Отчет комиссионера");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ПриемТоваровНаКомиссию") Тогда
			СписокОснований.Добавить("Документ.ОтчетКомитенту.ФормаВыбора", "Отчет комитенту");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			СписокОснований.Добавить("Документ.ПеремещениеДСПлан.ФормаВыбора", "Перемещение денег (план)");
			СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", "Заявка на расход денег");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("КредитыИЗаймы") Тогда
			СписокОснований.Добавить("Документ.НачисленияПоКредитамИЗаймам.ФормаВыбора", "Начисления по кредитам и займам");
			СписокОснований.Добавить("Документ.ДоговорКредитаИЗайма.ФормаВыбора", "Договор кредита (займа)");
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			СписокОснований.Добавить("Документ.ПередачаТоваровМеждуОрганизациями.ФормаВыбора", "Передача товаров между организациями");
		КонецЕсли;
		
	Конецесли;
	// Конец МобильноеПриложение
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя Тогда
		СписокОснований.Очистить();
		Если ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
			СписокОснований.Добавить("Документ.РасходДСПлан.ФормаВыбора", "Заявка на расход денег");
		КонецЕсли;
	КонецЕсли; 
	
	СписокОснований.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	
	Возврат СписокОснований;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатьюДДСПриСменеВидаОперации()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		И (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	ИначеЕсли (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации)
		И (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
	ИначеЕсли (Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей
		ИЛИ Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам) Тогда
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее;
	КонецЕсли;
	
	Если Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		И ( Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги) Тогда
		Объект.УчитыватьВНУ = Истина;
	Иначе
		Если ЗначениеЗаполнено(Объект.Статья) Тогда
			Объект.УчитыватьВНУ = Объект.Статья.УчитыватьВНУ;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

&НаСервере
Процедура УстановитьСтатьюДДС()
	
	СтруктураДанных = ПолучитьДанныеСтатьиДДС();
	
	Объект.Статья = СтруктураДанных.Статья;
	Объект.УчитыватьВНУ = СтруктураДанных.УчитыватьВНУ;
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

&НаСервере
Процедура ЗаполнитьИнформациюОСуммеИВалютеОснования()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Попытка
			ДокументОснованиеСумма = Объект.ДокументОснование.СуммаДокумента;
			ДокументОснованиеВалютаПредставление = Объект.ДокументОснование.ВалютаДокумента.СимвольноеПредставление;
		Исключение
			// Нет реквизита "СуммаДокумента" или "ВалютаДокумента".
			ДокументОснованиеСумма = 0;
			ДокументОснованиеВалютаПредставление = "";
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ДокОснование)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.Заполнить(ДокОснование);
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
	УстановитьВидимостьНалогообложениеНДС();
	УстановитьВидимостьРеквизитовРасчетов();
	
	Компания = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
	Курс = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Курс
	);
	Кратность = ?(
		СтруктураПоВалюте.Курс = 0,
		1,
		СтруктураПоВалюте.Кратность
	);
	
	ЗаполнитьИнформациюОСуммеИВалютеОснования();
	
КонецПроцедуры // ЗаполнитьПоДокументу()

&НаСервере
Функция ПоместитьРасшифровкаПлатежаВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(
		Объект.РасшифровкаПлатежа.Выгрузить(,
			"Договор,
			|ПризнакАванса,
			|Документ,
			|Заказ,
			|СуммаРасчетов,
			|Курс,
			|Кратность,
			|СпособЗачета,
			|СуммаПлатежа"
		),
		УникальныйИдентификатор
	);
	
КонецФункции // ПоместитьРасшифровкаПлатежаВХранилище()

&НаСервере
Процедура ПолучитьРасшифровкаПлатежаИзХранилища(АдресРасшифровкаПлатежаВХранилище, Очищать = Истина)
	
	ТаблицаРасшифровкаПлатежа = ПолучитьИзВременногоХранилища(АдресРасшифровкаПлатежаВХранилище);
	Если Очищать Тогда
		Объект.РасшифровкаПлатежа.Очистить();
	КонецЕсли;
	Для каждого СтрокаРасшифровкаПлатежа Из ТаблицаРасшифровкаПлатежа Цикл
		Строка = Объект.РасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаРасшифровкаПлатежа);
		Если НЕ Строка.Договор.Пустая() Тогда
			Строка.СтатьяДДС = Строка.Договор.СтатьяДДСПоУмолчанию;
		КонецЕсли;
		Если Строка.СпособЗачета.Пустая() 
			И (Объект.ВидОперации = ВидОперацииПоставщику ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации)Тогда
			Строка.СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Строка.Договор, Объект.Контрагент, Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьРасшифровкаПлатежаИзХранилища()

&НаСервере
Процедура ПересчитатьСуммыДокумента(Курс, Кратность, ПересчитатьСуммуПлатежа, ДополнительныеПараметры)
	
	Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
		Если СтрокаТабличнойЧасти.Договор.ВалютаРасчетов = Объект.ВалютаДенежныхСредств Тогда
			Если ПересчитатьСуммуПлатежа Тогда
				СтрокаТабличнойЧасти.СуммаПлатежа = СтрокаТабличнойЧасти.СуммаРасчетов;
				СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
				РасчетыРаботаСФормамиВызовСервера.РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
			Иначе
				СтрокаТабличнойЧасти.СуммаРасчетов = СтрокаТабличнойЧасти.СуммаПлатежа;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ПересчитатьСуммуПлатежа Тогда
			СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаРасчетов,
				СтрокаТабличнойЧасти.Курс,
				Курс,
				СтрокаТабличнойЧасти.Кратность,
				Кратность
			);
			СтрокаТабличнойЧасти.Аванс = ?(СтрокаТабличнойЧасти.ПризнакАванса, СтрокаТабличнойЧасти.СуммаПлатежа, 0);
			РасчетыРаботаСФормамиВызовСервера.РассчитатьСуммуНДСНаСервере(СтрокаТабличнойЧасти);
		Иначе
			СтрокаТабличнойЧасти.Курс = ?(
				СтрокаТабличнойЧасти.Курс = 0,
				1,
				СтрокаТабличнойЧасти.Курс
			);
			СтрокаТабличнойЧасти.Кратность = ?(
				СтрокаТабличнойЧасти.Кратность = 0,
				1,
				СтрокаТабличнойЧасти.Кратность
			);
			СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
				СтрокаТабличнойЧасти.СуммаПлатежа,
				Курс,
				СтрокаТабличнойЧасти.Курс,
				Кратность,
				СтрокаТабличнойЧасти.Кратность
			);
		КонецЕсли;
	КонецЦикла;
	
	// Если нужно, то пересчитаем суммы в ТЧ ДоговорыАвтоЗачетаДолгов.
	Если ПересчитатьСуммуПлатежа Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
	ПересчитатьИтогиПриИзмененииАвансаНаСервере();
	Если Объект.ВидОперации = ВидОперацииПомощника Тогда
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммыДокумента()

&НаКлиенте
Процедура ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств(СтруктураДанные, ТекстСообщения)
	
	КурсПередИзменением = Курс;
	КратностьПередИзменением = Кратность;
	
	Если ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств) Тогда
		Курс = ?(
			СтруктураДанные.ВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ВалютаКурсКратность.Курс
		);
		Кратность = ?(
			СтруктураДанные.ВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ВалютаКурсКратность.Кратность
		);
	КонецЕсли;
	
	// Если курс валюты не изменился или не заполнена валюта денежных средств
	// или документ не заполнен, то ничего не делаем.
	Если (Курс = КурсПередИзменением
		И Кратность = КратностьПередИзменением)
	 ИЛИ (НЕ ЗначениеЗаполнено(Объект.ВалютаДенежныхСредств)) 
	 ИЛИ (Объект.РасшифровкаПлатежа.Итог("СуммаРасчетов") = 0
	 И НЕ ЗначениеЗаполнено(Объект.СуммаДокумента)) Тогда
		
		// Обновить курсы расчетов
		// Если в расшифровке платежа есть курс <> 1, то предложим его перезаполнить.
		Если СтруктураДанные.Свойство("ОбновитьКурсыРасчетов") И СтруктураДанные.ОбновитьКурсыРасчетов Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы", ЭтотОбъект), СтруктураДанные.ОбновитьКурсыРасчетовТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		// Конец Обновить курсы расчетов
		
		Возврат;
	КонецЕсли; 
	
	ПараметрыВопроса = Новый Структура;
	ПараметрыВопроса.Вставить("КурсПередИзменением", КурсПередИзменением);
	ПараметрыВопроса.Вставить("КратностьПередИзменением", КратностьПередИзменением);
	
	// Обновить курсы расчетов
	Если СтруктураДанные.Свойство("ОбновитьКурсыРасчетов") Тогда
		ПараметрыВопроса.Вставить("ОбновитьКурсыРасчетов", СтруктураДанные.ОбновитьКурсыРасчетов);
		ПараметрыВопроса.Вставить("ОбновитьКурсыРасчетовТекстВопроса", СтруктураДанные.ОбновитьКурсыРасчетовТекстВопроса);
	КонецЕсли;
	// Конец Обновить курсы расчетов
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросОПересчетеСуммыПриИзмененииКурсаВалютыДенежныхСредствЗавершение", ЭтотОбъект, ПараметрыВопроса);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ПересчитатьСуммыПриИзмененииКурсаВалютыДенежныхСредств()

&НаКлиенте
Процедура ВопросОПересчетеСуммыПриИзмененииКурсаВалютыДенежныхСредствЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КурсПередИзменением = ДополнительныеПараметры.КурсПередИзменением;
		КратностьПередИзменением = ДополнительныеПараметры.КратностьПередИзменением;
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0 
		   И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда // для вида операции "Зарплата" пересчитывается только шапка.
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
				ПересчитатьСуммыДокумента(Курс, Кратность, Истина, ДополнительныеПараметры);
			// Прочие расчеты
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам")
				ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
				ПересчитатьСуммыДокумента(Курс, Кратность, Истина, ДополнительныеПараметры);
			// Конец Прочие расчеты
			Иначе
				СуммаДокументаРавнаИтогуСуммыПлатежа = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") = Объект.СуммаДокумента;
				
				Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл // для видов операций с планируемыми платежами пересчитываем сумму плана.
					СтрокаТабличнойЧасти.СуммаПлатежа = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
						СтрокаТабличнойЧасти.СуммаПлатежа,
						КурсПередИзменением,
						Курс,
						КратностьПередИзменением,
						Кратность
					);
					
					РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
				КонецЦикла;
					
				Если СуммаДокументаРавнаИтогуСуммыПлатежа Тогда
					Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				Иначе
					Объект.СуммаДокумента = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
						Объект.СуммаДокумента,
						КурсПередИзменением,
						Курс,
						КратностьПередИзменением,
						Кратность
					);
				КонецЕсли;
				
				ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
			КонецЕсли;
		Иначе
			Объект.СуммаДокумента = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
				Объект.СуммаДокумента,
				КурсПередИзменением,
				Курс,
				КратностьПередИзменением,
				Кратность
			);
		КонецЕсли;
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			ПересчитатьСуммыДокумента(Курс, Кратность, Ложь, ДополнительныеПараметры);
		КонецЕсли;
	КонецЕсли;

	// Обновить курсы расчетов
	Если ДополнительныеПараметры.Свойство("ОбновитьКурсыРасчетов")  И ДополнительныеПараметры.ОбновитьКурсыРасчетов Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы", ЭтотОбъект),
			ДополнительныеПараметры.ОбновитьКурсыРасчетовТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	// Конец Обновить курсы расчетов
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти)
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
		
КонецПроцедуры // РассчитатьСуммуНДСНаКлиенте()

&НаСервере
Функция ПолучитьДанныеКонтрагентПриИзменении(Контрагент, КонтрагентПередИзменением, Организация, Дата)
	
	ДоговорПоУмолчанию = ПолучитьДоговорПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"КонтрагентНаименованиеПолное",
		Контрагент.НаименованиеПолное
	);
	
	СтруктураДанные.Вставить(
		"КонтрагентПередИзменениемНаименованиеПолное",
		КонтрагентПередИзменением.НаименованиеПолное
	);
	
	СтруктураДанные.Вставить(
		"Договор",
		ДоговорПоУмолчанию
	);
	
	СтруктураДанные.Вставить(
		"ДоговорВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ДоговорПоУмолчанию.ВалютаРасчетов)
		)
	);
	
	СтруктураДанные.Вставить(
		"ВестиРасчетыПоДокументам",
		Контрагент.ВестиРасчетыПоДокументам
	);
	
	// Прочие расчеты
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		ДоговорКредитаЗаймаПоУмолчанию = ПолучитьДоговорКредитаЗаймаПоУмолчанию(Объект.Ссылка, Контрагент, Организация, Объект.ВидОперации);
		СтруктураДанные.Вставить(
			"ДоговорКредитаЗаймаПоУмолчанию",
			ДоговорКредитаЗаймаПоУмолчанию
		);
	КонецЕсли;
	// Конец Прочие расчеты
	
	УстановитьВидимостьРеквизитовРасчетов();
	
	СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", Контрагент.СтатьяДДСПоУмолчанию);
	Если ЗначениеЗаполнено(Контрагент.СтатьяДДСПоУмолчанию) Тогда
		СтруктураДанные.Вставить("УчитыватьВНУ", СтатьяУчитываетсяВНУ(Контрагент.СтатьяДДСПоУмолчанию, Организация, Дата));
	Иначе
		СтруктураДанных = ПолучитьДанныеСтатьиДДС();
		СтруктураДанные.Вставить("СтатьяДДСПоУмолчанию", СтруктураДанных.Статья);
		СтруктураДанные.Вставить("УчитыватьВНУ", СтруктураДанных.УчитыватьВНУ);
	КонецЕсли;
	
	СтруктураДанные.Вставить("СпособЗачета", РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(ДоговорПоУмолчанию, Контрагент, Ложь));
	СпособЗачетаПоУмолчаниюДляКонтрагента = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляКонтрагента(Объект.Контрагент, Ложь);
	СтруктураДанные.Вставить("СпособЗаполненияСтавкиНДС", Справочники.ДоговорыКонтрагентов.СпособЗаполненияСтавкиНДСПоДоговору(
			ДоговорПоУмолчанию));
	
	ОбновитьВидимостьИОстаткиВзаиморасчетов();
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ДанныеКИКонтрагента = УправлениеНебольшойФирмойСервер.ПолучитьДанныеКИКонтрагентаДляВыбораНаФорме(Контрагент, Элементы, ПоляКИДляОтправкиЧека());
		ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИКонтрагента);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчетПоПроектам") И ЗначениеЗаполнено(ДоговорПоУмолчанию) И НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		СтруктураДанные.Вставить("Проект", Справочники.Проекты.ПолучитьПроектПоДоговору(ДоговорПоУмолчанию));
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеКонтрагентПриИзменении()

&НаСервере
Процедура УстановитьВидимостьРеквизитовРасчетов()
	
	СтруктураРеквизитыРасчетов = РасчетыРаботаСФормамиВызовСервера.УстановитьВидимостьРеквизитовРасчетовФрагмент(ЭтотОбъект);
	
	// Прочие расчеты
	Элементы.ПрочиеРасчетыДоговор.Видимость = СтруктураРеквизитыРасчетов.ВестиРасчетыПоДоговорам;
	// Конец Прочие расчеты
	
КонецПроцедуры // УстановитьВидимостьРеквизитовРасчетов()

&НаСервере
Функция ПолучитьДанныеВалютаДенежныхСредствПриИзменении(Дата, ВалютаДенежныхСредств)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		РегистрыСведений.КурсыВалют.ПолучитьПоследнее(
			Дата,
			Новый Структура("Валюта", ВалютаДенежныхСредств)
		)
	);
	
	СтруктураДанные.Вставить("ВалютаДенежныхСредств", ВалютаДенежныхСредств);
	ОбновитьВидимостьИОстаткиДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеВалютаДенежныхСредствПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПодотчетникПриИзменении(Подотчетник, Дата)
	
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ПодотчетникНаименование", "");
	СтруктураДанные.Вставить("ДокументВид", "");
	СтруктураДанные.Вставить("ДокументСерия", "");
	СтруктураДанные.Вставить("ДокументНомер", "");
	СтруктураДанные.Вставить("ДокументДатаВыдачи", "");
	СтруктураДанные.Вставить("ДокументКемВыдан", "");
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Период,
	|	ДокументыФизическихЛицСрезПоследних.Физлицо,
	|	ПРЕДСТАВЛЕНИЕ(ДокументыФизическихЛицСрезПоследних.Физлицо) КАК ПодотчетникНаименование,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.СрокДействия,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения,
	|	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛицСрезПоследних.Представление,
	|	ДокументыФизическихЛицСрезПоследних.УдалитьВидДокумента
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&Дата, ) КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Подотчетник
	|	И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность";
	
	Запрос.УстановитьПараметр("Подотчетник", Подотчетник.ФизЛицо);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	ВыборкаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	СтруктураДанные.ПодотчетникНаименование = Подотчетник.Наименование;
	
	Если ВыборкаРезультатаЗапроса.Следующий() Тогда
	
		СтруктураДанные.ПодотчетникНаименование = ВыборкаРезультатаЗапроса.ПодотчетникНаименование;
		СтруктураДанные.ДокументВид = ВыборкаРезультатаЗапроса.ВидДокумента;
		СтруктураДанные.ДокументСерия = ВыборкаРезультатаЗапроса.Серия;
		СтруктураДанные.ДокументНомер = ВыборкаРезультатаЗапроса.Номер;
		СтруктураДанные.ДокументДатаВыдачи = ВыборкаРезультатаЗапроса.ДатаВыдачи;
		СтруктураДанные.ДокументКемВыдан = ВыборкаРезультатаЗапроса.КемВыдан;
		
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПодотчетникПриИзменении()

&НаСервере
Функция ПолучитьДанныеДатаПриИзменении(ДатаПередИзменением)
	
	РазностьДат = УправлениеНебольшойФирмойСервер.ПроверитьНомерДокумента(Объект.Ссылка, Объект.Дата, ДатаПередИзменением);
	ВалютаКурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", Объект.ВалютаДенежныхСредств));
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
		"РазностьДат",
		РазностьДат
	);
	СтруктураДанные.Вставить(
		"ВалютаКурсКратность",
		ВалютаКурсКратность
	);
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	ЗаполнитьИнформациюПоКредитуЗаймуНаСервере(); // Прочие расчеты
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДатаПриИзменении()

&НаСервере
Функция ПолучитьДанныеОрганизацияПриИзменении()
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("Компания", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Объект.Организация));
	СтруктураДанные.Вставить("ПодписьРуководителя", Объект.Организация.ПодписьРуководителя);
	СтруктураДанные.Вставить("ПодписьГлавногоБухгалтера", Объект.Организация.ПодписьГлавногоБухгалтера);
	
	// Касса по умолчанию
	УправлениеНебольшойФирмойСервер.ДобавитьВСтруктуруИнформациюОКассеПоУмолчаниюДляОрганизации(СтруктураДанные, Объект, Объект.ВалютаДенежныхСредств, "ВалютаДенежныхСредств");
	
	Если СтруктураДанные.Свойство("Касса") Тогда
		ОбновитьВидимостьИОстаткиДС(СтруктураДанные.Касса);
	Иначе
		ОбновитьВидимостьИОстаткиДС();
	КонецЕсли;
	
	ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеОрганизацияПриИзменении()

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении(Ведомость)
	
	ПараметрыВедомости = Новый Структура;
	ПараметрыВедомости.Вставить("Подразделение", Ведомость.СтруктурнаяЕдиница);
	ПараметрыВедомости.Вставить("СуммаПлатежа", Ведомость.Сотрудники.Итог("СуммаПлатежа"));
	
	Возврат ПараметрыВедомости;
	
КонецФункции // ПолучитьДанныеВыплатаЗаработнойПлатыВедомостьПриИзменении()

&НаСервере
Процедура ВидОперацииПриИзмененииНаСервере(ЗаполнятьНалогообложение = Истина)
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	
	УстановитьВидимостьПечатиЧека();
	
	// Прочие расчеты
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Объект.РасшифровкаПлатежа[0].СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	// Конец Прочие расчеты
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя Тогда
		Объект.Корреспонденция = ПланыСчетов.Управленческий.НераспределеннаяПрибыль;
		Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ЛичныеСредстваПредпринимателя;
		Если Объект.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Объект.Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ЗаполнятьНалогообложение Тогда
		ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС();
	КонецЕсли;
	
	УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации();
	УстановитьСтатьюДДСПриСменеВидаОперации();
	
КонецПроцедуры // ВидОперацииПриИзмененииНаСервере()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоУмолчанию()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
	ИначеЕсли Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоУмолчанию()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоОрганизациияНалогообложениеНДС()
	
	НалогообложениеПередИзменением = Объект.НалогообложениеНДС;
	
	Объект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(Объект.Организация,, Объект.Дата);
	
	Если (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации)
		И НЕ НалогообложениеПередИзменением = Объект.НалогообложениеНДС Тогда
		
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		
	Иначе
		
		ЗаполнитьСтавкуНДСПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура УстановитьВидимостьДокументыПланирования()
	
	Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь") Тогда
		Элементы.ДокументыПланирования.Видимость = Ложь;
	// Прочие расчеты
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
		Элементы.ДокументыПланирования.Видимость = Ложь;
	// Конец Прочие расчеты
	Иначе
		Элементы.ДокументыПланирования.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьНалогообложениеНДС()

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС(ВосстанавливатьСтавкиНДС = Истина)
	
	ЗаполнитьСтавкуНДСПоУмолчанию();
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		 ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Истина;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Истина;
			Элементы.СуммаНДС.Видимость = Истина;
			
		КонецЕсли;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
		
		Если ВосстанавливатьСтавкиНДС Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТабличнойЧасти.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию);
				СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.СуммаПлатежа - (СтрокаТабличнойЧасти.СуммаПлатежа) / ((СтавкаНДС + 100) / 100);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Ложь;
			Элементы.СуммаНДС.Видимость = Ложь;
			
		КонецЕсли;
		
		Если ВосстанавливатьСтавкиНДС Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
				СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти.СуммаНДС = 0;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимостьДокументыПланирования();
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура УстановитьВидимостьНалогообложениеНДС()
	
	Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Истина;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Истина;
			
		КонецЕсли;
		
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(Объект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		
	Иначе
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации Тогда
			
			Элементы.РасшифровкаПлатежаСтавкаНДС.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаСуммаНДС.Видимость = Ложь;
			
		КонецЕсли;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
		
	КонецЕсли;
	СтавкаНДСПоУмолчаниюЧисло = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДСПоУмолчанию);
	
КонецПроцедуры // УстановитьВидимостьНалогообложениеНДС()

&НаСервере
Процедура УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации(ПриСозданииНаСервере = Ложь)
	
	Элементы.РасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	Элементы.ПрочиеРасчетыСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	Элементы.РасшифровкаПлатежаПрочиеРасчетыСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	Элементы.РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	
	Элементы.Подвал.Видимость = Истина;
	
	Элементы.РасчетыСКонтрагентом.Видимость = Ложь;
	Элементы.РасчетыСПодотчетником.Видимость = Ложь;
	Элементы.ВыплатаЗаработнойПлатыСотруднику.Видимость = Ложь;
	Элементы.ВыплатыЗаработнойПлаты.Видимость = Ложь;
	Элементы.РасчетыПоНалогам.Видимость = Ложь;
	Элементы.РасчетыПрочие.Видимость = Ложь;
	Элементы.ПеремещениеВКассуККМ.Видимость = Ложь;
	
	Элементы.НалогообложениеНДС.Видимость = Ложь;
	Элементы.СуммаДокумента.Ширина = 14;
	
	Элементы.Подотчетник.Видимость = Ложь;
	Элементы.ГруппаКонтрагент.Видимость = Ложь;
	
	// Прочие расчеты
	Элементы.РасчетыПоКредитам.Видимость = Ложь;
	Элементы.РасчетыПоКредитам.Заголовок = НСтр("ru='Расчеты по кредитам'");
	Элементы.ДоговорЗаймаСотруднику.Видимость = Ложь;
	Элементы.ЗаполнитьПоДоговоруЗайма.Видимость = Ложь;
	Элементы.ДоговорКредита.Видимость = Ложь;
	Элементы.ЗаполнитьПоДоговоруКредита.Видимость = Ложь;
	Элементы.ГруппаИнформацияПоДоговору.Видимость = Ложь;
	Элементы.Сотрудник.Видимость = Ложь;
	// Конец Прочие расчеты
	Элементы.СчетОрганизации.Видимость = Ложь;
	
	Элементы.СуммаДокумента.КнопкаВыпадающегоСписка = Ложь;
	Элементы.РасчетыПрочиеКорреспонденция.Заголовок = НСтр("ru='Корреспонденция'");
	
	Элементы.ГруппаПомощникИВариантЗаполнения.Видимость = Ложь;
	
	//Если доступных документов основания нет, спрячем гиперссылку
	СписокОснований = ПолучитьСписокДляВыбораДокументаОснования();
	Элементы.ДокументОснованиеНадпись.Видимость = СписокОснований.Количество() > 0;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
		ИЛИ ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Истина;
		Элементы.РасшифровкаПлатежаПодбор.Видимость = Истина;
		Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Истина;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Поставщик'");
		
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		Элементы.СуммаПлатежа.Видимость = УчетВалютныхОпераций;
		Элементы.СуммаРасчетов.Видимость = НЕ УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		
		Элементы.НалогообложениеНДС.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость =Истина;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.ГруппаПомощникИВариантЗаполнения.Видимость = Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю") Тогда
		
		Элементы.РасчетыСКонтрагентом.Видимость = Истина;
		Элементы.РасшифровкаПлатежаПодбор.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаЗаполнитьРасшифровку.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Покупатель'");
		Элементы.НалогообложениеНДС.Видимость = Истина;
		
		НовыйМассив = Новый Массив();
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент");
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.РасшифровкаПлатежаСчетНаОплату.СвязиПараметровВыбора = НовыеСвязи;
		
		Элементы.СуммаПлатежа.Видимость = УчетВалютныхОпераций;
		Элементы.СуммаРасчетов.Видимость = НЕ УчетВалютныхОпераций;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Всего'");
		
		Элементы.СуммаНДС.Видимость = Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		// Зачет долгов
		Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаРучноеЗаполнение;
		Элементы.РасчетыСКонтрагентом.Заголовок = НСтр("ru = 'Распределение оплаты'");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Подотчетнику") Тогда
		
		Элементы.РасчетыСПодотчетником.Видимость = Истина;
		Элементы.Подотчетник.Видимость = Истина;
		Элементы.Подотчетник.Заголовок = НСтр("ru='Подотчетник'");
		Элементы.СуммаДокумента.Ширина = 13;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда
		
		Элементы.ВыплатаЗаработнойПлатыСотруднику.Видимость = Истина;
		Элементы.Подотчетник.Видимость = Истина;
		Элементы.Подотчетник.Заголовок = НСтр("ru='Сотрудник'");
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
		
		Элементы.ВыплатыЗаработнойПлаты.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = Ложь;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Истина;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Налоги") Тогда
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Получатель'");
		
		Элементы.РасчетыПоНалогам.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ") Тогда
		
		Элементы.ПеремещениеВКассуККМ.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
	// Прочие расчеты
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Прочее") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.СтраницаРасчетыСКонтрагентомСписком.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПервойСтроки.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НаРасходы") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		
		Элементы.РасчетыСПодотчетникомРасшифровкаПлатежаСуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.СтраницаРасчетыСКонтрагентомСписком.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПервойСтроки.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
		Элементы.РасчетыПрочиеКорреспонденция.Заголовок = НСтр("ru='Статья расходов'");
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = Ложь;
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Всего'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Контрагент'");
		Элементы.СтраницаРасчетыСКонтрагентомСписком.Видимость = Истина;
		Элементы.ПрочиеРасчетыДоговор.Видимость = Объект.Контрагент.ВестиРасчетыПоДоговорам;
		Элементы.ГруппаРеквизитыПервойСтроки.Видимость = Истина;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
		Если Объект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Идентификатор = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
			Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущаяСтрока = Идентификатор;
			РасчетыРаботаСФормамиВызовСервера.ЗаполнитьСписокВыбораВалютЭлементаФормы(Элементы.ПрочиеРасчетыКурс, Объект.РасшифровкаПлатежа[0].Договор, Объект.Дата);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику") Тогда
		
		Элементы.Сотрудник.Видимость = Истина;
		Элементы.РасчетыПоКредитам.Заголовок = НСтр("ru='Расчеты по займам'");
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Ложь;
		
		Элементы.ДоговорЗаймаСотруднику.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруЗайма.Видимость = Истина;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
		
		Элементы.ГруппаИнформацияПоДоговору.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
		
		Элементы.РасчетыПоКредитам.Видимость = Истина;
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.Контрагент.Заголовок = НСтр("ru='Банк'");
		Элементы.НалогообложениеНДС.Видимость = Истина;
		Элементы.РасшифровкаПлатежаРасчетыПоКредитам.Видимость = Истина;
		
		Элементы.ДоговорКредита.Видимость = Истина;
		Элементы.ЗаполнитьПоДоговоруКредита.Видимость = Истина;
		
		ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
		
		Элементы.ГруппаИнформацияПоДоговору.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма платежа'");
		Элементы.СуммаРасчетов.Видимость = Истина;
		Элементы.СуммаРасчетов.Заголовок = НСтр("ru='Сумма расчетов'");;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	// Конец Прочие расчеты
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Прочее") Тогда
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.СтраницаРасчетыСКонтрагентомСписком.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПервойСтроки.Видимость = Ложь;
		УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(Ложь);
		
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк") Тогда
		
		Элементы.СчетОрганизации.Видимость = Истина;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
		Элементы.СтраницаРасчетыСКонтрагентомСписком.Видимость = Ложь;
		Элементы.ГруппаРеквизитыПервойСтроки.Видимость = Ложь;
	Иначе
		
		Элементы.РасчетыПрочие.Видимость = Истина;
		
		Элементы.СуммаПлатежа.Видимость = ПолучитьФункциональнуюОпцию("ПлатежныйКалендарь");
		Элементы.СуммаПлатежа.Заголовок = НСтр("ru='Сумма (план)'");
		Элементы.СуммаПлатежаВалюта.Видимость = Элементы.СуммаПлатежа.Видимость;
		Элементы.СуммаРасчетов.Видимость = Ложь;
		Элементы.СуммаНДС.Видимость = Ложь;
		Элементы.ВыплатаЗаработнойПлатыИтогСуммаПлатежа.Видимость = Ложь;
		
	КонецЕсли;
	
	ДвижениеДенежныхСредствСервер.ОбработатьВидОперации(ЭтотОбъект);
	
	УстановитьВидимостьДокументыПланирования();
	
	// Зачет долгов
	НастроитьЭлементыРаспределенияДолговНаСервере(ПриСозданииНаСервере);
	// Конец Зачет долгов
	ОпределитьВидимостьНастроекУчетаВНалогообложении();
	
КонецПроцедуры // УстановитьВидимостьЭлементовВЗависимостиОтВидаОперации()

&НаСервере
Процедура ОбновитьКурсыРасчетовРасшифровкиПлатежаНаСервере()
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.РасшифровкаПлатежа Цикл
			
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
				Объект.Дата,
				СтрокаТабличнойЧасти.Договор
			);
			СтрокаТабличнойЧасти.Курс = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Курс
			);
			СтрокаТабличнойЧасти.Кратность = ?(
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
				1,
				СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
			);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти.СуммаПлатежа,
			Курс,
			СтрокаТабличнойЧасти.Курс,
			Кратность,
			СтрокаТабличнойЧасти.Кратность
		);
		
	КонецЦикла;
		
	Если Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаСервере();
		ЗаполнитьТаблицуПросмотраНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммы(КнопкаРезультат, ДополнительныеПараметры) Экспорт

	Если КнопкаРезультат = КодВозвратаДиалога.Да Тогда
		ОбновитьКурсыРасчетовРасшифровкиПлатежаНаСервере();
	КонецЕсли;

КонецПроцедуры // ОбновитьКурсВРасшифровкеПлатежаИПересчитатьСуммыЗавершение()

&НаКлиенте
Процедура ОбработатьВыборДокументаРасчетов(ДанныеДокумента)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		
		СтрокаТабличнойЧасти.Документ = ДанныеДокумента.Документ;
		Если ДанныеДокумента.УстановитьЗаказ Тогда
			СтрокаТабличнойЧасти.Заказ = ДанныеДокумента.Заказ;
		КонецЕсли;
		СтрокаТабличнойЧасти.СчетНаОплату = ДанныеДокумента.СчетНаОплату;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
			СтрокаТабличнойЧасти.Договор = ДанныеДокумента.Договор;
			РасчетыРаботаСФормамиКлиент.ОбработатьИзменениеДоговораКонтрагента(ЭтотОбъект, СтрокаТабличнойЧасти);
		КонецЕсли;
		
		ВыполнитьДействияПриИзмененииДокументаРасчетов();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборДокументаРасчетов()

&НаКлиенте
Процедура ВыполнитьДействияПриИзмененииДокументаРасчетов()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если Объект.ВидОперации = ВидОперацииПокупателю Тогда
		
		Если ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеВКассу")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ПоступлениеНаСчет")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ОперацияПоПлатежнымКартам")
			ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
			
			СтрокаТабличнойЧасти.ПризнакАванса = Истина;
			
			КурсКратностьДокументаРасчетов = РасчетыРаботаСФормамиВызовСервера.ПолучитьКурсКратностьДокументаРасчетов(СтрокаТабличнойЧасти.Документ);
			
			Если ЗначениеЗаполнено(КурсКратностьДокументаРасчетов) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, КурсКратностьДокументаРасчетов);
				РасшифровкаПлатежаКурсПриИзмененииФрагмент(СтрокаТабличнойЧасти);
			КонецЕсли;
			
		Иначе
			
			СтрокаТабличнойЧасти.ПризнакАванса = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ВидОперацииПоставщику
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		
		СтрокаТабличнойЧасти.ПризнакАванса = НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ);
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Документ) Тогда
			СтрокаТабличнойЧасти.СпособЗачета = СпособЗачетаВручную;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЭтоВзаимозачет = (ТипЗнч(СтрокаТабличнойЧасти.Документ) = Тип("ДокументСсылка.Взаимозачет"));
	
КонецПроцедуры // ВыполнитьДействияПриИзмененииДокументаРасчетов()

&НаСервере
Процедура ЗаполнитьРасшифровкуПлатежа(ТекущийОбъект = Неопределено)
	
	Документ = РеквизитФормыВЗначение("Объект");
	Документ.ЗаполнитьРасшифровкуПлатежа();
	ЗначениеВРеквизитФормы(Документ, "Объект");
	Модифицированность = Истина;
	
КонецПроцедуры // ЗаполнитьРасшифровкуПлатежа()

&НаСервереБезКонтекста
Функция ПолучитьВалютуПоУмолчаниюКассыНаСервере(Касса)
	
	Возврат Касса.ВалютаПоУмолчанию;
	
КонецФункции // ПолучитьВалютуПоУмолчаниюКассыНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации) Экспорт
	
	Если Не Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДокументУтвержден(ДокументОснование)
	
	Возврат ДокументОснование.СтатусУтвержденияПлатежа = Перечисления.СтатусыУтвержденияПлатежей.Утвержден;
	
КонецФункции // ДокументУтвержден()

&НаСервереБезКонтекста
Функция СтатьяУчитываетсяВНУ(Статья, Организация, Дата)
	СистемаНалогообложенияСтруктура = РегистрыСведений.СистемыНалогообложенияОрганизаций.ОпределитьСистемуНалогообложенияОрганизации(Организация, Дата);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Статья, "УчитыватьВНУ") И СистемаНалогообложенияСтруктура.ПлательщикУСН;
КонецФункции

&НаСервере
Процедура ОбновитьВидимостьИОстаткиВзаиморасчетов()
	
	Элементы.ОстатокВзаиморасчетов.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.Контрагент);
	ОстатокВзаиморасчетов = 0;
	
	Если НЕ Элементы.ОстатокВзаиморасчетов.Видимость Тогда
		//Только для новых объектов
		Элементы.Контрагент.АвтоМаксимальнаяШирина = Истина;
	Иначе
		Элементы.Контрагент.АвтоМаксимальнаяШирина = Ложь;
		Элементы.Контрагент.МаксимальнаяШирина = 22;
	КонецЕсли;
	
	Элементы.ОстатокВзаиморасчетов.Заголовок = РаботаСКонтрагентамиУНФ.ЗаголовокНадписиВзаиморасчетов(Объект.Контрагент, ОстатокВзаиморасчетов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьИОстаткиДС(Касса = Неопределено)
	
	Если Касса = Неопределено Тогда
		ТекущаяКасса = Объект.Касса;
	Иначе
		ТекущаяКасса = Касса;
	КонецЕсли;
	
	Элементы.ОстатокДенежныхСредств.Видимость = НЕ ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ТекущаяКасса);
	ОстатокДенежныхСредств = 0;

	Если НЕ Элементы.ОстатокДенежныхСредств.Видимость Тогда
		//Только для новых объектов
		Элементы.Касса.АвтоМаксимальнаяШирина = Истина;
		
		Если ТолькоПросмотр Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Элементы.Касса.АвтоМаксимальнаяШирина = Ложь;
		Элементы.Касса.МаксимальнаяШирина = 22;
	КонецЕсли;
	
	Элементы.ОстатокДенежныхСредств.Заголовок = ДвиженияДенежныхСредствВызовСервера.ЗаголовокНадписиОстатковДС(ТекущаяКасса, Объект.Организация, ОстатокДенежныхСредств, Объект.ВалютаДенежныхСредств);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиПриИзмененииАвансаНаКлиенте() Экспорт
	
	СуммаПлатежаАванс = Объект.РасшифровкаПлатежа.Итог("Аванс");
	СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СуммаЗачтено = СуммаПлатежаДляУсловногоОформления - СуммаПлатежаАванс;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиПриИзмененииАвансаНаСервере()
	
	СуммаПлатежаАванс = Объект.РасшифровкаПлатежа.Итог("Аванс");
	СуммаПлатежаДляУсловногоОформления = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СуммаЗачтено = СуммаПлатежаДляУсловногоОформления - СуммаПлатежаАванс;
	
	РассчитатьСуммуНДСПоУмолчаниюНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуНДСПоУмолчаниюНаСервере()
	
	ИтогоРазнесено = Объект.ДоговорыАвтоЗачетаДолгов.Итог("СуммаПлатежа");
	СуммаНДСПоУмолчанию = ИтогоРазнесено - (ИтогоРазнесено) / ((СтавкаНДСПоУмолчаниюЧисло + 100) / 100);
	
КонецПроцедуры

&НаСервере
Функция ПоляКИДляОтправкиЧека()
	
	ПоляКИ = Новый Соответствие;
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Элементы.АдресЭП.Имя);
	ПоляКИ.Вставить(Перечисления.ТипыКонтактнойИнформации.Телефон, Элементы.Телефон.Имя);
	
	Возврат ПоляКИ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоляКИДляОтправкиЧекаПоУмолчанию(ДанныеКИ)
	
	Если ДанныеКИ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.АдресЭП = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Объект.Телефон = ДанныеКИ.Получить(Перечисления.ТипыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСрокУплаты(ВидНалога, Дата)
	Возврат РегламентированнаяОтчетностьУСН.СрокУплатыПоНалогуИДате(ВидНалога, Дата);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьОтображениеПодсказки(Элементы, ВидОперации, Показать)
	
	Если ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") И
		 ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда
		Показать = Ложь;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГруппаПодсказкаАссистента",
		"Видимость",
		Показать);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеВнешнимВидомФормы

&НаСервере
Процедура УстановитьВидимостьПечатиЧека()
	
	ИспользоватьПО = ПолучитьФункциональнуюОпцию("ИспользоватьПодключаемоеОборудование");
	Если ИспользоватьПО
		И НЕ ТолькоПросмотр
		И (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее) Тогда
		НапечататьЧекВидимость = Истина;
	Иначе
		НапечататьЧекВидимость = Ложь;
	КонецЕсли;
	
	Элементы.НапечататьЧек.Видимость = НапечататьЧекВидимость;
	Элементы.НомерЧекаККМ.Видимость = НапечататьЧекВидимость;
	Элементы.ГруппаОтправкаЧека.Видимость = НапечататьЧекВидимость;
	Элементы.ПредварительныйПросмотрЧека.Видимость = НапечататьЧекВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПечатиЧека()
	
	Если Объект.НомерЧекаККМ <> 0 Тогда
		Элементы.ГруппаОтправкаЧека.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УставитьТекущуюСтраницу()
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		ДобавитьПервуюСтрокуРасшифровкиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры // УставитьТекущуюСтраницу()

&НаКлиенте
Процедура ОчиститьРеквизитыНеОтносящиесяКОперации()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
	ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю")
	ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации")Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Подотчетнику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Зарплата") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.РасшифровкаПлатежа.Очистить();
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользовательСистемы, "ОсновноеПодразделение");
			Объект.Подразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, СтруктурнаяЕдиницаПодразделение);
		КонецЕсли;
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Прочее") 
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя") Тогда
		
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НаРасходы") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПеремещениеВКассуККМ") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Налоги") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.Подразделение = Неопределено;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	// Прочие расчеты
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.Подразделение = Неопределено;
		Объект.НаправлениеДеятельности = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
		Объект.Корреспонденция = Неопределено;
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Заказ = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Объект.РасшифровкаПлатежа.Очистить();
		ДобавитьПервуюСтрокуРасшифровкиНаКлиенте();
	// Конец Прочие расчеты
		Объект.СчетОрганизации = Неопределено;
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВзносНаличнымиВБанк") Тогда
		Объект.Контрагент = Неопределено;
		Объект.Подотчетник = Неопределено;
		Объект.Документ = Неопределено;
		Объект.ВидНалога = Неопределено;
		Объект.ПериодРегистрации = Неопределено;
		Объект.КассаККМ = Неопределено;
		Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		Объект.ДоговорКредитаЗайма = Неопределено;
		Объект.Корреспонденция = Неопределено;
		Объект.ВыплатаЗаработнойПлаты.Очистить();
		Для каждого СтрокаТаблицы Из Объект.РасшифровкаПлатежа Цикл
			СтрокаТаблицы.Договор = Неопределено;
			СтрокаТаблицы.ПризнакАванса = Ложь;
			СтрокаТаблицы.Документ = Неопределено;
			СтрокаТаблицы.Заказ = Неопределено;
			СтрокаТаблицы.СчетНаОплату = Неопределено;
			СтрокаТаблицы.СтавкаНДС = Неопределено;
			СтрокаТаблицы.СуммаНДС = Неопределено;
			СтрокаТаблицы.ЭтоВзаимозачет = Ложь;
		КонецЦикла;
		Объект.СчетОрганизации = Неопределено;
	КонецЕсли;
	
	Корреспонденция = Объект.Корреспонденция;
	
КонецПроцедуры // ОчиститьРеквизитыНеОтносящиесяКОперации()

&НаСервере
Процедура УстановитьСвязиПараметровВыбораДоступныеТипы()
	
	// Прочие расчеты
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ПрочиеРасчеты") Тогда
		УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлементаСчетаКорреспонденции();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НаРасходы") Тогда
		УстановитьПараметрыВыбораНаРасходыНаСервереДляЭлементаСчетаКорреспонденции();
	Иначе
		УстановитьПараметрыВыбораПоМетаданнымДляЭлементаСчетаКорреспонденции();
	КонецЕсли;
	// Конец Прочие расчеты
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Поставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ДополнительныеРасходы"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомитенту"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетПереработчика"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПоставщику", , );
		Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПоставщика", , );
		Элементы.РасшифровкаПлатежаСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		Элементы.РасшифровкаПлатежаДокумент.Подсказка = "Оплачиваемый документ отгрузки товаров, работ и услуг контрагентом";

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.Покупателю") Тогда
		
		Массив = Новый Массив();
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеВКассу"));
		Массив.Добавить(Тип("ДокументСсылка.ПоступлениеНаСчет"));
		Массив.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		Массив.Добавить(Тип("ДокументСсылка.Взаимозачет"));
		Массив.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		Массив.Добавить(Тип("ДокументСсылка.ОтчетОПереработке"));
		Массив.Добавить(Тип("ДокументСсылка.ПередачаВА"));
		Массив.Добавить(Тип("ДокументСсылка.ПриходнаяНакладная"));
		Массив.Добавить(Тип("ДокументСсылка.РасходнаяНакладная"));
		
		ДопустимыеТипы = Новый ОписаниеТипов(Массив, , );
		Элементы.РасшифровкаПлатежаДокумент.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя", ,);
		Элементы.РасшифровкаПлатежаЗаказ.ОграничениеТипа = ДопустимыеТипы;
		
		ДопустимыеТипы = Новый ОписаниеТипов("ДокументСсылка.СчетНаОплату", , );
		Элементы.РасшифровкаПлатежаСчетНаОплату.ОграничениеТипа = ДопустимыеТипы;
		
		Элементы.РасшифровкаПлатежаДокумент.Подсказка = "Документ расчетов с контрагентом, по которому осуществляется возврат денежных средств";
		
	КонецЕсли;
	
	// Интеркампани
	Связи = Новый Массив;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.НашейОрганизации") Тогда
		Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		Связи.Добавить(Новый СвязьПараметраВыбора("ВидОперации", "Объект.ВидОперации", РежимИзмененияСвязанногоЗначения.НеИзменять));
	Иначе
		Связи.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
	КонецЕсли;
	Элементы.РасшифровкаПлатежаДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(Связи);
	// Конец Интеркампани
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции(ОчиститьАналитику = Ложь)
	
	Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Ложь;
	
	Если Объект.Корреспонденция.ТипСчета = Перечисления.ТипыСчетов.Расходы Тогда
		Элементы.НаправлениеДеятельности.Видимость = Истина;
		Элементы.Заказ.Видимость = Истина;
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользовательСистемы, "ОсновноеПодразделение");
			Объект.Подразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
		КонецЕсли;
	Иначе
		Если Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.Налоги // для ввода на основании
		   И Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Если НЕ ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов
			И (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги
		   ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику) Тогда
			Объект.НаправлениеДеятельности = Неопределено;
		КонецЕсли;
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты
			ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы Тогда
			Объект.Подразделение = Неопределено;
		КонецЕсли;
		Объект.Заказ = Неопределено;
		Элементы.НаправлениеДеятельности.Видимость = Ложь;
		Элементы.Заказ.Видимость = Ложь;
	КонецЕсли;
	
	// Прочие расчеты
	Если (Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Прочее 
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы) Тогда
		
		АналитикаСчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Корреспонденция, "АналитикаДоходовИРасходов");
		
		Если ОчиститьАналитику И ЗначениеЗаполнено(АналитикаСчета) Тогда
			Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа = Новый ОписаниеТипов(АналитикаСчета);
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = Строка(Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа);
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "";
			Объект.АналитикаПрочихДоходовИРасходов = Новый(АналитикаСчета);
		ИначеЕсли ЗначениеЗаполнено(АналитикаСчета) Тогда
			Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа = Новый ОписаниеТипов(АналитикаСчета);
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = Строка(Элементы.АналитикаПрочихДоходовИРасходов.ОграничениеТипа);
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "";
		Иначе // Очистить и не заполнена аналитика.
			Элементы.АналитикаПрочихДоходовИРасходов.Заголовок = "Аналитика расходов";
			Элементы.АналитикаПрочихДоходовИРасходов.ПодсказкаВвода = "<Не настроена у этого счета>";
			Элементы.АналитикаПрочихДоходовИРасходов.Доступность = Ложь;
			Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Истина;
			Объект.АналитикаПрочихДоходовИРасходов = Неопределено;
		КонецЕсли;
		
	Иначе
		Элементы.АналитикаПрочихДоходовИРасходов.Видимость = Ложь;
	КонецЕсли;
	// Конец Прочие расчеты
	
	УстановитьВидимостьДокументыПланирования();
	
КонецПроцедуры // УстановитьВидимостьРеквизитовВЗависимостиОтКорреспонденции()

&НаСервере
Процедура УстановитьВидимостьКурсаВалюты(ВалютаДенежныхСредств)
	
	Элементы.Курс.Видимость = (ВалютаДенежныхСредств <> Константы.НациональнаяВалюта.Получить());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДоступность(ИзмененВидОперации = Ложь)
	
	// Документ основание.
	НовыйМассив = Новый Массив();
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	ПараметрыВыбораДокументаОснования = НовыеПараметры;
	// Конец Документ основание.
	
	// МобильноеПриложение
	Если МобильноеПриложениеВызовСервера.НужноОграничитьФункциональность() Тогда
		Элементы.Статья.Видимость = Истина;
	// Конец МобильноеПриложение
	Иначе
		Элементы.Статья.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСтатьиДвиженияДенежныхСредств");
	КонецЕсли;
	
	Если ТолькоПросмотр И НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Элементы.ДокументОснованиеНадпись.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступность()

&НаСервере
Процедура НастроитьЭлементДоговораЗайма()
	
	Элементы.ДоговорЗаймаСотруднику.Доступность = НЕ Объект.Подотчетник.Пустая();
	Если Элементы.ДоговорЗаймаСотруднику.Доступность Тогда
		Элементы.ДоговорЗаймаСотруднику.ПодсказкаВвода = "";
	Иначе
		Элементы.ДоговорЗаймаСотруднику.ПодсказкаВвода = НСтр("ru = 'Чтобы выбрать договор, выберите сотрудника'");
	КонецЕсли;
	
	Элементы.ДоговорКредита.Доступность = НЕ Объект.Контрагент.Пустая();
	Если Элементы.ДоговорКредита.Доступность Тогда
		Элементы.ДоговорКредита.ПодсказкаВвода = "";
	Иначе
		Элементы.ДоговорКредита.ПодсказкаВвода = НСтр("ru = 'Чтобы выбрать договор, выберите банк'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьУсловноеОформлениеРасчетов(ЭтотОбъект, Перечисления.ВидыОперацийРасходИзКассы.Покупателю);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоДаннымКонтрагента()
	
	РасчетыРаботаСФормамиВызовСервера.УстановитьУсловноеОформлениеРасчетовПоДаннымКонтрагента(ЭтотОбъект, Перечисления.ВидыОперацийРасходИзКассы.Покупателю);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеОбъектов

&НаКлиенте
Процедура СохранитьДокументКакШаблон(Параметр) Экспорт
	
	ЗаполнениеОбъектовУНФКлиент.СохранитьДокументКакШаблон(Объект, ОтображаемыеРеквизиты(), Параметр);
	
КонецПроцедуры

&НаСервере
Функция ОтображаемыеРеквизиты()
	
	Возврат ЗаполнениеОбъектовУНФ.ОтображаемыеРеквизиты(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#Область ПрочиеРасчеты

#Область ПроцедурыОбработчикиСобытийРеквизитовШапки

&НаКлиенте
Процедура ДоговорЗаймаСотрудникуПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКредитаИлиЗайма();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораКредитаИлиЗайма()
	
	ДанныеДоговораЗаймаСотруднику = ДоговорКредитаЗаймаПриИзмененииНаСервере(Объект.ДоговорКредитаЗайма, Объект.Дата);
	Объект.ВалютаДенежныхСредств = ДанныеДоговораЗаймаСотруднику.ВалютаРасчетов;
	
	ЗаполнитьИнформациюПоКредитуЗаймуНаСервере();
	
	ВалютаДенежныхСредствПередИзменением = ВалютаДенежныхСредств;
	ВалютаДенежныхСредств = Объект.ВалютаДенежныхСредств;
	
	// Если валюта не изменилась, то ничего не делаем.
	Если ВалютаДенежныхСредств = ВалютаДенежныхСредствПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДенежныхСредствПриИзмененииФрагмент();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоговорКредитаЗаймаПриИзмененииНаСервере(ДоговорКредитаЗайма, Дата)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить("ВалютаРасчетов", ДоговорКредитаЗайма.ВалютаРасчетов);
	СтруктураДанные.Вставить("Контрагент", ДоговорКредитаЗайма.Контрагент);
	СтруктураДанные.Вставить("Сотрудник", ДоговорКредитаЗайма.Сотрудник);
	СтруктураДанные.Вставить("ЭтоДоговорЗайма", ДоговорКредитаЗайма.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику);
		
	Возврат СтруктураДанные;
	
КонецФункции

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	
	СтруктураДанные = ПолучитьДанныеСотрудникПриИзменении(Объект.Подотчетник, Объект.Дата, Объект.Организация);
	Объект.Выдать = СтруктураДанные.ПодотчетникНаименование;
	Объект.ПоДокументу =
		Строка(СтруктураДанные.ДокументВид)
	  + " серия "
	  + СтруктураДанные.ДокументСерия
	  + ", номер "
	  + СтруктураДанные.ДокументНомер
	  + ", выданный "
	  + Формат(СтруктураДанные.ДокументДатаВыдачи, "ДФ=dd.MM.yyyy")
	  + " "
	  + СтруктураДанные.ДокументКемВыдан;
	  
	Объект.ДоговорКредитаЗайма = СтруктураДанные.ДоговорКредитаЗайма;
	ОбработатьИзменениеДоговораКредитаИлиЗайма();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСотрудникПриИзменении(Сотрудник, Дата, Организация)
	
	СтруктураДанные = ПолучитьДанныеПодотчетникПриИзменении(Сотрудник, Дата);
	
	СтруктураДанные.Вставить("ДоговорКредитаЗайма", Документы.ДоговорКредитаИЗайма.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Сотрудник, Организация));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеПодотчетникПриИзменении()

&НаКлиенте
Процедура ВидНалогаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если СтрДлина(Текст) > 13 Тогда
		
		СтрокаПоискаПоКБК = СтрЗаменить(ПараметрыПолученияДанных.СтрокаПоиска, " ", "");
		
		Если СтрДлина(СтрокаПоискаПоКБК) <= 20 И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаПоискаПоКБК) Тогда
			
			// Строка поиска похожа на КБК. Код включает код подвида доходов.
			ДанныеВыбора = ДвиженияДенежныхСредствВызовСервера.ДанныеВыбораНалогаПоКБК(СтрокаПоискаПоКБК);
			
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ПроцедурыОбработчикиСобытийРеквизитовТабличнойЧасти

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСуммаРасчетовПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыПослеУдаления(Элемент)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		УставитьТекущуюСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежаПрочиеРасчеты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасчетыКурсОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = 0 Тогда
		СтандартнаяОбработка = Ложь;
		ОбработчикОповещенияОЗакрытии = Новый ОписаниеОповещения("КурсРасчетовОбработкаВыбораЗавершение", ЭтотОбъект);
		ПоказатьВводДаты(ОбработчикОповещенияОЗакрытии, ДатаДокумента, "Укажите дату курса валюты", ЧастиДаты.Дата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КурсРасчетовОбработкаВыбораЗавершение(ДатаКурса, ДополнительныеПараметры) Экспорт
	
	Если ДатаКурса <> Неопределено Тогда
		КурсНаДату = ПолучитьКурсВалютыНаСервере(ЭтаФорма.Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные.Договор, ДатаКурса);
		ЭтаФорма.Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные.Курс = КурсНаДату.Курс;
		ЭтаФорма.Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные.Кратность = КурсНаДату.Кратность;
		РасшифровкаПлатежаПрочиеРасчетыКурсПриИзменении(Элементы.ПрочиеРасчетыКурс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКурсВалютыНаСервере(Договор, ДатаКурса) Экспорт
	
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Договор.ВалютаРасчетов, ДатаКурса);
	
КонецФункции

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.СуммаРасчетов = 0,
		1,
		СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
	);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеДоговораКонтрагентаПрочиеРасчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеДоговораКонтрагентаПрочиеРасчеты()
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
		СтруктураДанные = РасчетыРаботаСФормамиВызовСервера.ПолучитьДанныеРасшифровкаПлатежаДоговорПриИзменении(
			Объект.Дата,
			СтрокаТабличнойЧасти.Договор,
			СтрокаТабличнойЧасти.ДокументПланирования,
			СтрокаТабличнойЧасти.СтатьяДДС
		);
		СтрокаТабличнойЧасти.Курс = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Курс
		);
		СтрокаТабличнойЧасти.Кратность = ?(
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность = 0,
			1,
			СтруктураДанные.ДоговорВалютаКурсКратность.Кратность
		);
		
		СтрокаТабличнойЧасти.СтатьяДДС = Неопределено; //Выводятся данные только одной строки, т.ч. статью будем брать из подвала.
	Иначе
		СтрокаТабличнойЧасти.СтатьяДДС = Неопределено;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СуммаРасчетов = УправлениеНебольшойФирмойКлиент.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.СуммаПлатежа,
		Курс,
		СтрокаТабличнойЧасти.Курс,
		Кратность,
		СтрокаТабличнойЧасти.Кратность
	);
	
	РасчетыРаботаСФормамиКлиент.ЗаполнитьСписокВыбораВалютЭлементаФормы(Элементы.ПрочиеРасчетыКурс, Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные.Договор, Объект.Дата);
	
КонецПроцедуры // ОбработатьИзменениеДоговораКонтрагента()

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.Контрагент.Пустая() Тогда
		СтандартнаяОбработка = Ложь;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru='Сначала выберите контрагента'");
		Сообщение.Поле = "Объект.Контрагент";
		Сообщение.Сообщить();
		
		Возврат;
	КонецЕсли;
	
	ОбработатьНачалоВыбораДоговораКонтрагентаПрочиеРасчеты(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНачалоВыбораДоговораКонтрагентаПрочиеРасчеты(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = РасчетыРаботаСФормамиВызовСервера.ПолучитьПараметрыФормыВыбора(Объект.Ссылка, Объект.Организация, Объект.Контрагент, СтрокаТабличнойЧасти.Договор, Объект.ВидОперации);
	Если ПараметрыФормы.КонтролироватьВыборДоговора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПрочиеРасчетыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаПрочиеРасчеты.ТекущиеДанные;
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаРасчетовПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКурсПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РасчетыРаботаСФормамиКлиент.ПредоплатаКурсНачалоВыбора(ЭтаФорма, Элемент, ДанныеВыбора, СтандартнаяОбработка, "РасшифровкаПлатежаРасчетыПоКредитам");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамКратностьПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РассчитатьСуммуПлатежаНаКлиенте(ЭтотОбъект, Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные);
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамСуммаПлатежаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.Курс = 0,
		1,
		СтрокаТабличнойЧасти.Курс
	);
	СтрокаТабличнойЧасти.Кратность = ?(
		СтрокаТабличнойЧасти.Кратность = 0,
		1,
		СтрокаТабличнойЧасти.Кратность
	);
	
	СтрокаТабличнойЧасти.Курс = ?(
		СтрокаТабличнойЧасти.СуммаРасчетов = 0,
		1,
		СтрокаТабличнойЧасти.СуммаПлатежа / СтрокаТабличнойЧасти.СуммаРасчетов * Курс
	);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
	КонецЕсли;
	
	РассчитатьСуммуНДСНаКлиенте(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытьПодсказкуНажатие(Элемент)
	ИзменитьОтображениеПодсказки(Элементы, Объект.ВидОперации, Ложь);
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДействияКоманд

&НаСервере
Процедура ЗаполнитьПоДоговоруЗаймаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма.ВалютаРасчетов КАК ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалПриход
		|ПОМЕСТИТЬ ВременнаяТаблицаВыданныеРанееСуммы
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Обороты(
		|			,
		|			,
		|			,
		|			ДоговорКредитаЗайма = &ДоговорКредитаЗайма
		|				И Организация = &Организация) КАК РасчетыПоКредитамИЗаймамОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма.ВалютаРасчетов,
		|	ВЫБОР
		|		КОГДА РасчетыПоКредитамИЗаймам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|			ТОГДА -РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
		|		ИНАЧЕ РасчетыПоКредитамИЗаймам.ОсновнойДолгВал
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам КАК РасчетыПоКредитамИЗаймам
		|ГДЕ
		|	РасчетыПоКредитамИЗаймам.Регистратор = &Ссылка
		|	И РасчетыПоКредитамИЗаймам.ДоговорКредитаЗайма = &ДоговорКредитаЗайма
		|	И РасчетыПоКредитамИЗаймам.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	СУММА(ВременнаяТаблицаВыданныеРанееСуммы.ОсновнойДолгВалПриход) КАК ОсновнойДолгВалПриход,
		|	ДоговорКредитаЗайма.СуммаДокумента
		|ИЗ
		|	ВременнаяТаблицаВыданныеРанееСуммы КАК ВременнаяТаблицаВыданныеРанееСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорКредитаИЗайма КАК ДоговорКредитаЗайма
		|		ПО ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов = ДоговорКредитаЗайма.ВалютаРасчетов
		|ГДЕ
		|	ДоговорКредитаЗайма.Ссылка = &ДоговорКредитаЗайма
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	ДоговорКредитаЗайма.СуммаДокумента";
	
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	Запрос.УстановитьПараметр("Организация", Компания);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.ВалютаДенежныхСредств = Выборка.ВалютаРасчетов;
		ТекстСообщения = "";
		Если Выборка.СуммаДокумента < Выборка.ОсновнойДолгВалПриход Тогда
			ТекстСообщения = "По договору займа уже выдано "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		ИначеЕсли Выборка.СуммаДокумента = Выборка.ОсновнойДолгВалПриход Тогда
			ТекстСообщения = "По договору займа уже выдана вся сумма "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		Иначе
			Объект.СуммаДокумента = Выборка.СуммаДокумента - Выборка.ОсновнойДолгВалПриход;
		КонецЕсли;
		
		Если ТекстСообщения <> "" Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Поле = "ДоговорКредитаЗайма";
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		Объект.СуммаДокумента = Объект.ДоговорКредитаЗайма.СуммаДокумента;
		Объект.ВалютаДенежныхСредств = Объект.ДоговорКредитаЗайма.ВалютаРасчетов;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруЗайма(Команда)
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Выберите договор");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДоговоруЗаймаНаСервере();
	СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруКредита(Команда)
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Выберите договор");
		Возврат;
	КонецЕсли;
	
	АдресРасшифровкиПлатежаВХранилище = ПоместитьРасшифровкаПлатежаВХранилище();
	ПараметрыОтбора = Новый Структура("
		|АдресРасшифровкиПлатежаВХранилище,
		|Организация,
		|Регистратор,
		|ИдентификаторФормыДокумента,
		|ВидОперации,
		|Дата,
		|Валюта,
		|ДоговорКредитаЗайма,
		|СуммаДокумента,
		|Контрагент,
		|СтавкаНДСПоУмолчанию,
		|СуммаПлатежа,
		|Курс,
		|Кратность,
		|Сотрудник",
		АдресРасшифровкиПлатежаВХранилище,
		Объект.Организация,
		Объект.Ссылка,
		УникальныйИдентификатор,
		Объект.ВидОперации,
		Объект.Дата,
		Объект.ВалютаДенежныхСредств,
		Объект.ДоговорКредитаЗайма,
		Объект.СуммаДокумента,
		Объект.Контрагент,
		СтавкаНДСПоУмолчанию,
		Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа"),
		Курс,
		Кратность,
		Объект.Подотчетник);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЗаполненияРасшифровкиПлатежаПоКредитамИЗаймам", 
						ПараметрыОтбора,
						ЭтотОбъект,,,,Новый ОписаниеОповещения("ЗаполнитьПоДоговоруКредитаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДоговоруКредитаЗавершение(РезультатЗаполнения, ПараметрыЗавершения) Экспорт

	Если ТипЗнч(РезультатЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьСуммуДокумента = Ложь;
		Если РезультатЗаполнения.Свойство("ОчищатьТабличнуюЧастьПриЗаполнении") И РезультатЗаполнения.ОчищатьТабличнуюЧастьПриЗаполнении Тогда
			Объект.РасшифровкаПлатежа.Очистить();
			ЗаполнитьСуммуДокумента = Истина;
		КонецЕсли;
		Если РезультатЗаполнения.Свойство("АдресРасшифровкиПлатежаВХранилище") Тогда
			ПолучитьРасшифровкаПлатежаИзХранилища(РезультатЗаполнения.АдресРасшифровкиПлатежаВХранилище, Ложь);
			
			Если Объект.РасшифровкаПлатежа.Количество() = 1 Тогда
				Объект.СуммаДокумента = Объект.РасшифровкаПлатежа[0].СуммаПлатежа;
			КонецЕсли;
		КонецЕсли;
		Если ЗаполнитьСуммуДокумента Тогда
			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СуммаДокументаПриИзменении(Элементы.СуммаДокумента);
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
Процедура УстановитьПараметрыВыбораПоУчетуПрочихРасчетовНаСервереДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.РасчетыПрочиеКорреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипСчета" Тогда
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Дебиторы);
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Кредиторы);
			
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ОтборПоТипуСчета)));
		Иначе
			ПараметрыВыбораЭлемента.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораНаРасходыНаСервереДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.РасчетыПрочиеКорреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	Для Каждого Параметр Из Элемент.ПараметрыВыбора Цикл
		Если Параметр.Имя = "Отбор.ТипСчета" Тогда
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.Расходы);
			ОтборПоТипуСчета.Добавить(Перечисления.ТипыСчетов.ПрочиеРасходы);
			
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("Отбор.ТипСчета", Новый ФиксированныйМассив(ОтборПоТипуСчета)));
		ИначеЕсли Параметр.Имя = "ЗаголовокСчета" Тогда
			ПараметрыВыбораЭлемента.Добавить(Новый ПараметрВыбора("ЗаголовокСчета", "Статья расходов"));
		Иначе
			ПараметрыВыбораЭлемента.Добавить(Параметр);
		КонецЕсли;
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораПоМетаданнымДляЭлементаСчетаКорреспонденции()

	Элемент = Элементы.РасчетыПрочиеКорреспонденция;
	
	ПараметрыВыбораЭлемента = Новый Массив;
	ОтборПоТипуСчета = Новый Массив;
	
	ПараметрыВыбораИзМетаданных = Объект.Ссылка.Метаданные().Реквизиты.Корреспонденция.ПараметрыВыбора;
	Для Каждого Параметр Из ПараметрыВыбораИзМетаданных Цикл
		ПараметрыВыбораЭлемента.Добавить(Параметр);
	КонецЦикла;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоКредитуЗаймуНаСервере()
	
	НастроитьЭлементДоговораЗайма();
	
	Если Объект.ДоговорКредитаЗайма.Пустая() Тогда
		Элементы.НадписьИнформацияПоКредиту.Заголовок = "<Выберите договор кредита (займа)>";
		Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = "";
		
		Элементы.НадписьИнформацияПоКредиту.ЦветТекста = ЦветаСтиля.ЦветРамки;
		Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = ЦветаСтиля.ЦветРамки;
		
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.ВыдачаЗаймаСотруднику") Тогда
		ЗаполнитьИнформациюПоЗаймуНаСервере();
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходИзКассы.РасчетыПоКредитам") Тогда
		ЗаполнитьИнформациюПоКредитуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоКредитуНаСервере();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.Период,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаОсновногоДолга,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаПроцентов,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.СуммаКомиссии,
		|	ГрафикПогашенияКредитовИЗаймовСрезПоследних.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление
		|ИЗ
		|	РегистрСведений.ГрафикПогашенияКредитовИЗаймов.СрезПоследних(&ДатаСрезаПоследних, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК ГрафикПогашенияКредитовИЗаймовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.ОсновнойДолгВалОстаток) КАК ОсновнойДолгВалОстаток,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление,
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.ПроцентыВалОстаток) КАК ПроцентыВалОстаток,
		|	СУММА(РасчетыПоКредитамИЗаймамОстатки.КомиссияВалОстаток) КАК КомиссияВалОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Остатки(, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК РасчетыПоКредитамИЗаймамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОстатки.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.Период,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаОсновногоДолга,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаПроцентов,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.СуммаКомиссии,
		|	ГрафикПогашенияКредитовИЗаймовСрезПервых.ДоговорКредитаЗайма.ВалютаРасчетов.Наименование КАК ВалютаРасчетовПредставление
		|ИЗ
		|	РегистрСведений.ГрафикПогашенияКредитовИЗаймов.СрезПервых(&ДатаСрезаПоследних, ДоговорКредитаЗайма = &ДоговорКредитаЗайма) КАК ГрафикПогашенияКредитовИЗаймовСрезПервых";
	
	Запрос.УстановитьПараметр("ДатаСрезаПоследних", ?(Объект.Дата = '00010101', НачалоДня(ТекущаяДата()), НачалоДня(Объект.Дата)));
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	
	МРезультатов = Запрос.ВыполнитьПакет();
	
	Если Объект.ДоговорКредитаЗайма.ВидДоговора = Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику Тогда
		Множитель = 1;
	Иначе
		Множитель = -1;
	КонецЕсли;
	
	ВыборкаГрафик = МРезультатов[0].Выбрать();
	ВыборкаГрафикБудущиеМесяцы = МРезультатов[2].Выбрать();
	
	НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Если ВыборкаГрафикБудущиеМесяцы.Следующий() Тогда
		
		Если НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДата(), Объект.Дата)) = НачалоМесяца(ВыборкаГрафикБудущиеМесяцы.Период) Тогда
			ДатаПлатежа = "" + Формат(ВыборкаГрафикБудущиеМесяцы.Период, "ДФ=dd.MM.yyyy");
		Иначе
			ДатаПлатежа = "" + Формат(ВыборкаГрафикБудущиеМесяцы.Период, "ДФ=dd.MM.yyyy") + " (не в тек. месяце)";
			НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
			
		НадписьИнформацияПоКредиту = "Дата платежа: "+ДатаПлатежа+". Сумма долга: "+Формат(ВыборкаГрафикБудущиеМесяцы.СуммаОсновногоДолга, "ЧДЦ=2; ЧН=0")+". Сумма %: "+
			Формат(ВыборкаГрафикБудущиеМесяцы.СуммаПроцентов, "ЧДЦ=2; ЧН=0")+
			". Комиссия: "+Формат(ВыборкаГрафикБудущиеМесяцы.СуммаКомиссии, "ЧДЦ=2; ЧН=0")+" (" + ВыборкаГрафикБудущиеМесяцы.ВалютаРасчетовПредставление +")";
		
	ИначеЕсли ВыборкаГрафик.Следующий() Тогда
		
		Если НачалоМесяца(?(Объект.Дата = '00010101', ТекущаяДата(), Объект.Дата)) = НачалоМесяца(ВыборкаГрафик.Период) Тогда
			ДатаПлатежа = "" + Формат(ВыборкаГрафик.Период, "ДФ=dd.MM.yyyy");
		Иначе
			ДатаПлатежа = "" + Формат(ВыборкаГрафик.Период, "ДФ=dd.MM.yyyy") + " (не в тек. месяце)";
			НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
			
		НадписьИнформацияПоКредиту = "Дата платежа: "+ДатаПлатежа+". Сумма долга: "+Формат(ВыборкаГрафик.СуммаОсновногоДолга, "ЧДЦ=2; ЧН=0")+". Сумма %: "+
			Формат(ВыборкаГрафик.СуммаПроцентов, "ЧДЦ=2; ЧН=0")+
			". Комиссия: "+Формат(ВыборкаГрафик.СуммаКомиссии, "ЧДЦ=2; ЧН=0")+" (" + ВыборкаГрафик.ВалютаРасчетовПредставление +")";
		
	Иначе
		
		НадписьИнформацияПоКредиту = "Дата платежа: <не определена>";
		
	КонецЕсли;
	
	ВыборкаОстатки = МРезультатов[1].Выбрать();
	Если ВыборкаОстатки.Следующий() Тогда
		
		НадписьОстатокДолгаПоКредиту = "Остаток долга: "+Формат(Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток, "ЧДЦ=2; ЧН=0")+". Сумма %: "+
			Формат(Множитель * ВыборкаОстатки.ПроцентыВалОстаток, "ЧДЦ=2; ЧН=0")+
			". Комиссия: "+Формат(Множитель * ВыборкаОстатки.КомиссияВалОстаток, "ЧДЦ=2; ЧН=0")+" (" + ВыборкаОстатки.ВалютаРасчетовПредставление +")";
			
		Если Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток >= 0 И (Множитель * ВыборкаОстатки.ПроцентыВалОстаток < 0 ИЛИ 
			Множитель * ВыборкаОстатки.КомиссияВалОстаток < 0) Тогда
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли;
		
		Если Множитель * ВыборкаОстатки.ОсновнойДолгВалОстаток < 0 Тогда
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		КонецЕсли;
	Иначе
		
		НадписьОстатокДолгаПоКредиту = "Остаток долга: <не определен> "
		
	КонецЕсли;
	
	Элементы.НадписьИнформацияПоКредиту.Заголовок = НадписьИнформацияПоКредиту;
	Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = НадписьОстатокДолгаПоКредиту;
	
	Элементы.НадписьИнформацияПоКредиту.ЦветТекста = НадписьИнформацияПоКредитуЦветТекста;
	Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = НадписьОстатокДолгаПоКредитуЦветТекста;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюПоЗаймуНаСервере()

	НадписьИнформацияПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветРамки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетыПоКредитамИЗаймамОбороты.ДоговорКредитаЗайма.ВалютаРасчетов КАК ВалютаРасчетов,
		|	РасчетыПоКредитамИЗаймамОбороты.ОсновнойДолгВалПриход
		|ПОМЕСТИТЬ ВременнаяТаблицаВыданныеРанееСуммы
		|ИЗ
		|	РегистрНакопления.РасчетыПоКредитамИЗаймам.Обороты(
		|			,
		|			,
		|			,
		|			ДоговорКредитаЗайма = &ДоговорКредитаЗайма
		|				И Организация = &Организация) КАК РасчетыПоКредитамИЗаймамОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	СУММА(ВременнаяТаблицаВыданныеРанееСуммы.ОсновнойДолгВалПриход) КАК ОсновнойДолгВалПриход,
		|	ДоговорКредитаЗайма.СуммаДокумента
		|ИЗ
		|	ВременнаяТаблицаВыданныеРанееСуммы КАК ВременнаяТаблицаВыданныеРанееСуммы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ДоговорКредитаИЗайма КАК ДоговорКредитаЗайма
		|		ПО ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов = ДоговорКредитаЗайма.ВалютаРасчетов
		|ГДЕ
		|	ДоговорКредитаЗайма.Ссылка = &ДоговорКредитаЗайма
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблицаВыданныеРанееСуммы.ВалютаРасчетов,
		|	ДоговорКредитаЗайма.СуммаДокумента";
	
	Запрос.УстановитьПараметр("ДоговорКредитаЗайма", Объект.ДоговорКредитаЗайма);
	Запрос.УстановитьПараметр("Организация", Компания);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		НадписьИнформацияПоКредиту = "Сумма займа: "+Выборка.СуммаДокумента+" ("+Выборка.ВалютаРасчетов+")";
		
		Если Выборка.СуммаДокумента < Выборка.ОсновнойДолгВалПриход Тогда
			НадписьОстатокДолгаПоКредиту = "Осталось выдать: "+(Выборка.СуммаДокумента-Выборка.ОсновнойДолгВалПриход)+" ("+Выборка.ВалютаРасчетов+")"+
				". Уже выдано "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		ИначеЕсли Выборка.СуммаДокумента = Выборка.ОсновнойДолгВалПриход Тогда
			НадписьОстатокДолгаПоКредиту = "Осталось выдать: 0 ("+Выборка.ВалютаРасчетов+")";
			НадписьОстатокДолгаПоКредитуЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		Иначе
			НадписьОстатокДолгаПоКредиту = "Осталось выдать: "+(Выборка.СуммаДокумента-Выборка.ОсновнойДолгВалПриход)+" ("+Выборка.ВалютаРасчетов+")"+
				". Уже выдано "+Выборка.ОсновнойДолгВалПриход+" ("+Выборка.ВалютаРасчетов+").";
		КонецЕсли;
	Иначе
		НадписьИнформацияПоКредиту = "Сумма займа: "+Объект.ДоговорКредитаЗайма.СуммаДокумента+" ("+Объект.ДоговорКредитаЗайма.ВалютаРасчетов+")";
		НадписьОстатокДолгаПоКредиту = "Осталось выдать: "+Объект.ДоговорКредитаЗайма.СуммаДокумента+" ("+Объект.ДоговорКредитаЗайма.ВалютаРасчетов+")";
	КонецЕсли;
	
	Элементы.НадписьИнформацияПоКредиту.Заголовок = НадписьИнформацияПоКредиту;
	Элементы.НадписьОстатокДолгаПоКредиту.Заголовок = НадписьОстатокДолгаПоКредиту;
	
	Элементы.НадписьИнформацияПоКредиту.ЦветТекста = НадписьИнформацияПоКредитуЦветТекста;
	Элементы.НадписьОстатокДолгаПоКредиту.ЦветТекста = НадписьОстатокДолгаПоКредитуЦветТекста;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговорКредитаЗаймаПоУмолчанию(Документ, Контрагент, Организация, ВидОперации)
	
	МенеджерДокумента = Документы.ДоговорКредитаИЗайма;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(?(ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам, 
		Перечисления.ВидыДоговоровКредитаИЗайма.КредитПолученный,
		Перечисления.ВидыДоговоровКредитаИЗайма.ДоговорЗаймаСотруднику));
	
	ДоговорКредитаЗаймаПоУмолчанию = МенеджерДокумента.ПолучитьДоговорКредитаИЗаймаПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Возврат ДоговорКредитаЗаймаПоУмолчанию;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область АвтоподборКонтактов

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_ОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	АвтоподборКонтактовКлиент.Подключаемый_АвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Параметры, Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Разобрать

&НаКлиенте
Процедура СуммаДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.СуммаДокумента = ВыбранноеЗначение;
	СуммаДокументаПриИзменении(Элемент);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокТабличныхЧастей(ВалютаСсылка)
	РасчетыРаботаСФормамиВызовСервера.УстановитьЗаголовкиКолонокТабличныхЧастей(ЭтотОбъект, ВалютаСсылка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОбАвансеВРасшифровкеПлатежа()
	
	Для каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		ТекущаяСтрока.Аванс = ?(ТекущаяСтрока.ПризнакАванса , ТекущаяСтрока.СуммаПлатежа, 0);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиБиблиотек

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПодотчетникомРасшифровкаПлатежаСчетНаОплатуПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыПланированияРасшифровкаПлатежа.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаРасчетыПоКредитамДокументПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РасшифровкаПлатежаРасчетыПоКредитам.ТекущиеДанные;
	СтруктураДанных = ПолучитьДанныеДокументаПланированияПриИзменении(ТекущиеДанные.ДокументПланирования);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументПланирования) Тогда
		ТекущиеДанные.СтатьяДДС = СтруктураДанных.СтатьяДДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюЗавершениеНаСервере()
	
	УстановитьСвязиПараметровВыбораДоступныеТипы();
	ВидОперацииПриИзмененииНаСервере(Ложь);
	
	Если (Объект.ВидОперации = ВидОперацииПоставщику ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации)И Объект.ВариантЗаполненияРасшифровки <> ВариантЗаполненияРасшифровкиВручную Тогда
		Объект.ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиВручную;
		НастроитьЭлементыРаспределенияДолговНаСервере();
	КонецЕсли;
	
	Если НЕ (ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РасходДСПлан")
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПеремещениеДСПлан")) Тогда
		
		УстановитьСтатьюДДС();
		Если НЕ Объект.Контрагент.Пустая() Тогда
			УстановитьСтатьиДДСВРасшифровкеПлатежа();
		КонецЕсли;
		
	КонецЕсли;
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьРеквизитыКурсИКратность(ЭтотОбъект);
	ОбновитьВидимостьИОстаткиДС();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтатьиДДС()
	
	СтруктураДляВозврата = Новый Структура;
	
	Если НЕ Объект.Контрагент.Пустая() И НЕ Объект.Контрагент.СтатьяДДСПоУмолчанию.Пустая() Тогда
		СтруктураДляВозврата.Вставить("Статья", Объект.Контрагент.СтатьяДДСПоУмолчанию);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Покупателю Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам);
	ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЛичныеСредстваПредпринимателя Тогда
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.ЛичныеСредстваПредпринимателя);
	Иначе
		СтруктураДляВозврата.Вставить("Статья", Справочники.СтатьиДвиженияДенежныхСредств.Прочее);
	КонецЕсли;
	
	Если Объект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.Прочее
		И ( Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Зарплата
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ЗарплатаСотруднику
		ИЛИ Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Налоги) Тогда
		СтруктураДляВозврата.Вставить("УчитыватьВНУ", Истина);
	Иначе
		Если ЗначениеЗаполнено(Объект.Статья) Тогда
			СтруктураДляВозврата.Вставить("УчитыватьВНУ", Объект.Статья.УчитыватьВНУ);
		Иначе
			СтруктураДляВозврата.Вставить("УчитыватьВНУ", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ПолучитьДанныеСтатьиДДС()

&НаСервереБезКонтекста
Функция ПолучитьДанныеДокументаПланированияПриИзменении(ДокументПланирования)
	
	СтруктураДанных = Новый Структура("СтатьяДДС", Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходДСПлан.СтатьяДвиженияДенежныхСредств
		|ИЗ
		|	Документ.РасходДСПлан КАК РасходДСПлан
		|ГДЕ
		|	РасходДСПлан.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументПланирования);
	
	Если ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.ПеремещениеДСПлан") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходДСПлан КАК РасходДСПлан", "Документ.ПеремещениеДСПлан КАК РасходДСПлан");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтруктураДанных.Вставить("СтатьяДДС", Выборка.СтатьяДвиженияДенежныхСредств);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервере
Процедура УстановитьСтатьиДДСВРасшифровкеПлатежа();
	
	Для Каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		Если Объект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.ПрочиеРасчеты Тогда
			ТекущаяСтрока.СтатьяДДС = Справочники.СтатьиДвиженияДенежныхСредств.ПустаяСсылка();
		ИначеЕсли Объект.ВидОперации <> Перечисления.ВидыОперацийРасходИзКассы.РасчетыПоКредитам Тогда
			ТекущаяСтрока.СтатьяДДС = РасчетыРаботаСФормамиВызовСервера.ПолучитьСтатьюДДСПоУмолчаниюДляСтрокиРасшифровки(ТекущаяСтрока.Договор,
				ТекущаяСтрока.ДокументПланирования,
				ТекущаяСтрока.СтатьяДДС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область Взаиморасчеты

#Область РаботаСФормойРаспределенияСуммыПлатежа

&НаКлиенте
Процедура РаспределитьСуммуПлатежаПослеРаспределения(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ДеревоРаспределенияСуммыПлатежа") Тогда
		
		СтруктураВидыИзменяемыхДокументов = РасчетыРаботаСФормамиКлиент.ЗаполнитьРасшировкуПлатежаДеньгиПоДеревуРаспределения(ЭтотОбъект, РезультатЗакрытия, ДопПараметры);
		ЗаполнитьРасшировкуПлатежаПоДеревуРаспределенияЗавершение(РезультатЗакрытия, ДопПараметры);
		
		РасчетыРаботаСФормамиКлиент.НастроитьЭлементыДляИзменяемыхДокументов(Истина, ЭтотОбъект, СтруктураВидыИзменяемыхДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРасшировкуПлатежаПоДеревуРаспределенияЗавершение(РезультатЗакрытия, ДопПараметры)
	
	// Если больше строк не осталось, то добавить одну строку с автораспределением всей суммы на основной договор.
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		Объект.РасшифровкаПлатежа.Добавить();
		Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
		Объект.РасшифровкаПлатежа[0].Договор = РезультатЗакрытия.ДоговорПоУмолчанию;
		Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент, Ложь);
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		РасшифровкаПлатежаСуммаПлатежаПриИзменении(Неопределено);
	КонецЕсли;
	
	Если Элементы.СтраницыРасчетовСКонтрагентом.ТекущаяСтраница <> Элементы.СтраницаПросмотр Тогда
		ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр;
		НастроитьЭлементыРаспределенияДолговНаСервере();
	КонецЕсли;
	ЗаполнитьТаблицуПросмотраНаКлиенте();
	
	Если Объект.СуммаДокумента = 0 Тогда
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РаспределитьСуммуПлатежа(Команда) Экспорт
	
	Если Объект.Контрагент.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вначале контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая()
		ИЛИ Объект.Дата <> ДатаПриСозданииНаСервере Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗаписатьИОткрытьФормуРаспределенияПлатежа", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, 
		НСтр("ru = 'Вызов Помощника возможен только после записи данных.
					|Данные будут записаны.'"),
		РежимДиалогаВопрос.ОКОтмена);
		Возврат;
		
	КонецЕсли;
	
	ОткрытьФормуРаспределенияПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИОткрытьФормуРаспределенияПлатежа(Ответ, ДополнительныеДанные) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат; // Запись не удалась, сообщения о причинах выводит платформа.
		КонецЕсли;
		ОткрытьФормуРаспределенияПлатежа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРаспределенияПлатежа()
	
	СтруктураПараметров = Новый Структура();
	СтруктураАдресов = ПолучитьСтруктуруАдресовВХранилище();
	СтруктураПараметров.Вставить("СтруктураАдресов", СтруктураАдресов);
	СтруктураПараметров.Вставить("ЭтоРасчетыСПоставщиком", Истина);
	СтруктураПараметров.Вставить("ВалютаДокумента", Объект.ВалютаДенежныхСредств);
	
	РасчетыРаботаСФормамиКлиент.ОткрытьФормуРаспределенияСуммыПлатежа(Истина, ЭтотОбъект, СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотра(Команда)
	ЗаполнитьТаблицуПросмотраНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПросмотраНаКлиенте(пПоДвижениям = Ложь)
	
	Если ВариантЗаполненияРасшифровки = ВариантЗаполненияРасшифровкиПросмотр
		И (Объект.ВидОперации = ВидОперацииПоставщику 
		ИЛИ Объект.ВидОперации = ВидОперацииНашейОрганизации) Тогда
		ЗаполнитьТаблицуПросмотраНаСервере(пПоДвижениям, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПросмотраНаСервере(пПоДвижениям = Ложь, пПроверилиНаКлиенте = Ложь)
	
	РасчетыРаботаСФормамиВызовСервера.ЗаполнитьТаблицуПросмотраВДенежномДокументеНаСервере(ЭтотОбъект, пПоДвижениям, пПроверилиНаКлиенте);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДляПросмотраОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если СтрНайти(Расшифровка, "ПереходитьВРежимРедактирования") <> 0 Тогда
		ВариантЗаполненияРасшифровки = СтруктураПараметровРасчетов.ВариантЗаполненияРасшифровкиВручную;
		ВариантЗаполненияРасшифровкиПриИзменении(Элементы.ВариантЗаполненияРасшифровки);
	КонецЕсли;
	
	РасчетыРаботаСФормамиКлиент.ТаблицаДляПросмотраОбработкаРасшифровки(ЭтотОбъект, Элемент, Расшифровка, СтандартнаяОбработка, СтруктураПараметровРасчетов);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеНадписиСписокИзменяемыхДокументовНажатие(Элемент, СтандартнаяОбработка)
	
	СписокСсылок = РасчетыРаботаСФормамиКлиент.ДанныеНадписиСписокИзменяемыхДокументовНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка, 2);
	Если СписокСсылок <> Неопределено Тогда
		ОписаниеОповещенияВыбораИзМеню = Новый ОписаниеОповещения("ДанныеНадписиСписокИзменяемыхДокументовНажатиеЗавершение", РасчетыРаботаСФормамиКлиент.ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещенияВыбораИзМеню, СписокСсылок, Элементы.НадписьДокументЗачетаПредоплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруАдресовВХранилище()
	
	СтруктураДляВозврата = Новый Структура();
	
	СтруктураДляВозврата.Вставить("АдресРасшифровкаПлатежаВХранилище",
		ПоместитьВоВременноеХранилище(
			Объект.РасшифровкаПлатежа.Выгрузить(),
			УникальныйИдентификатор
		)
	);
	
	СтруктураДляВозврата.Вставить("АдресТаблицаДокументовДляИзмененияВХранилище",
		ПоместитьВоВременноеХранилище(
			ТаблицаДокументовДляИзменения.Выгрузить(),
			УникальныйИдентификатор
		)
	);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыРаспределенияДолговНаСервере(ПриСозданииНаСервере = Ложь) Экспорт
	
	РасчетыРаботаСФормамиВызовСервера.НастроитьЭлементыРаспределенияСуммыНаСервере(ЭтотОбъект,
		?(ЭтотОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации,
			Перечисления.ВидыОперацийРасходИзКассы.НашейОрганизации,
			Перечисления.ВидыОперацийРасходИзКассы.Поставщику));
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСпособЗачетаПриИзменении(Элемент)
	
	РасчетыРаботаСФормамиКлиент.РасшифровкаПлатежаСпособЗачетаПриИзменении(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ВзаиморасчетыПриСозданииНаСервере()
	
	Если Объект.ВидОперации = ВидОперацииНашейОрганизации Тогда
		ВидОперацииПомощника = ВидОперацииНашейОрганизации;
	Иначе
		ВидОперацииПомощника = ВидОперацииПоставщику;
	КонецЕсли;
	
	ЗаполнитьИнформациюОСуммеИВалютеОснования();
	
	РасчетыРаботаСФормамиВызовСервера.ВзаиморасчетыДеньгиПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	// Выведем информацию о документе, в котором будет зачтена предоплата.
	Если ТаблицаДокументовДляИзменения.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа", 0.2, Истина);
	Иначе
		Элементы.ГруппаЗачетПредоплатыПоСтроке.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа()
	
	РасчетыРаботаСФормамиКлиент.Подключаемый_ОбработатьАктивизациюСтрокиРасшифровкиПлатежа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовДляИзмененияКартинка1Нажатие(Элемент, СтандартнаяОбработка)
	РасчетыРаботаСФормамиКлиент.ДанныеНадписиСписокИзменяемыхДокументовНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ДобавитьПервуюСтрокуРасшифровкиНаСервере()
	
	Объект.РасшифровкаПлатежа.Добавить();
	Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
	Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент, Ложь);
	Объект.РасшифровкаПлатежа[0].ПризнакАванса = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПервуюСтрокуРасшифровкиНаКлиенте()
	
	Объект.РасшифровкаПлатежа.Добавить();
	Объект.РасшифровкаПлатежа[0].СуммаПлатежа = Объект.СуммаДокумента;
	Объект.РасшифровкаПлатежа[0].СпособЗачета = РасчетыРаботаСФормамиВызовСервера.ПолучитьСпособЗачетаДляДоговора(Объект.РасшифровкаПлатежа[0].Договор, Объект.Контрагент, Ложь);
	Объект.РасшифровкаПлатежа[0].ПризнакАванса = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		ПересчитатьИтогиПриИзмененииАвансаНаКлиенте();
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.СпособЗачета.Пустая() Тогда
				ТекущиеДанные.СпособЗачета = СпособЗачетаПоУмолчаниюДляКонтрагента;
			КонецЕсли;
			
			Если НЕ Копирование Тогда
				РасчетыРаботаСФормамиКлиент.ЗаполнитьДоговорВНовойСтрокеРасшифровки(ЭтотОбъект, ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
