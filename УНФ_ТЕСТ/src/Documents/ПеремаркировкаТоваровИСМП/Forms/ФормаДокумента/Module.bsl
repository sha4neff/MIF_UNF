#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеПеремаркировкиТоваровИСМП.Тип;
	
	ЗаполнитьПредставлениеСертификации();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ДоступныеВидыПродукцииИС = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(, Ложь);
	
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "ТоварыНоваяХарактеристика", "Элементы.Товары.ТекущиеДанные.НоваяНоменклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "ТоварыМарка", "Элементы.Товары.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "ТоварыНоваяМарка", "Элементы.Товары.ТекущиеДанные.НоваяНоменклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "ТоварыМарка", "Элементы.Товары.ТекущиеДанные.Характеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "ТоварыНоваяМарка", "Элементы.Товары.ТекущиеДанные.НоваяХарактеристика");
	
	УстановитьУсловноеОформление();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВидимостьПодключаемыхКоманд") Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(
		ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки"
		И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияОбновитьКэшМаркируемойПродукции(
		ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр = ЭтотОбъект Тогда
		
		ОбновитьКэшМаркируемойПродукции();
		
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВидПродукцииУказан() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(ЭтотОбъект, Источник, Событие, Данные);
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ШтрихкодированиеИС.СохранитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьПредставленияНаФорме();
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	ЗаполнитьПредставлениеСертификации();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	СобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого СтрокаТовар Из Объект.Товары Цикл
		НомерСтроки = Объект.Товары.Индекс(СтрокаТовар) + 1;
		Если СтрокаТовар.ПричинаПеремаркировки = ПредопределенноеЗначение(
			"Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара") Тогда
			Если Не ЗначениеЗаполнено(СтрокаТовар.ДатаДокументаСертификации)
				Или Не ЗначениеЗаполнено(СтрокаТовар.ВидДокументаСертификации) 
				Или Не ЗначениеЗаполнено(СтрокаТовар.НомерДокументаСертификации) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'В строке %1 табличной части ""Товары "" не заполнены данные сертификата.'"),
					НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Товары", НомерСтроки, "Сертификация"),,
					Отказ);
			КонецЕсли;
					
			Если Не ЗначениеЗаполнено(СтрокаТовар.НовыйКодМаркировки) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'В строке %1 табличной части ""Товары "" не заполнен новый код маркировки.'"),
					НомерСтроки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Товары", НомерСтроки, "НовыйКодМаркировки"),,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТовар.ХарактеристикиИспользуются И Не ЗначениеЗаполнено(СтрокаТовар.Характеристика) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В строке %1 табличной части ""Товары "" не заполнена Характеристика.'"),
				НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Товары", НомерСтроки, "Характеристика"),,
				Отказ);
		КонецЕсли;
		
		Если СтрокаТовар.НоваяХарактеристикаИспользуется И Не ЗначениеЗаполнено(СтрокаТовар.НоваяХарактеристика) Тогда
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'В строке %1 табличной части ""Товары "" не заполнена Новая характеристика.'"),
				НомерСтроки);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"Объект.Товары", НомерСтроки, "НоваяХарактеристика"),,
				Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСМПКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОчиститьСообщения();

	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда

		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
				ЭтотОбъект, Новый Структура("НавигационнаяСсылкаФорматированнойСтроки",
				НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Перемаркировка товаров ИС МП"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

	ИначеЕсли Модифицированность Тогда

		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		ЭтотОбъект,
		Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Перемаркировка товаров ИС МП"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	ИначеЕсли ПроверитьЗаполнениеПоВидуДействия(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент, ПерезаполнитьПоОснованию = Ложь)
	
	Если ПерезаполнитьПоОснованию Тогда
		ПерезаполнитьПоОснованиюСервер();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВидПродукции");
	
	СобытияФормИСМПКлиент.ВидПродукцииПриИзменении(ЭтотОбъект, Элемент);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 И ВыбранноеЗначение <> Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		
		РежимДиалога = РежимДиалогаВопрос.ДаНет;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			РежимДиалога = Новый СписокЗначений;
			РежимДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
			РежимДиалога.Добавить(Истина, НСтр("ru = 'Перезаполнить'"));
			РежимДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалога);
		
	ИначеЕсли ВыбранноеЗначение = Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении организации табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацияПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыСертификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОткрытьФормуРедактированияСертификации(Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.Сертификация) Тогда

		ТекущиеДанные.ВидДокументаСертификации   = ПредопределенноеЗначение(
			"Перечисление.ВидыДокументовОбязательнойСертификацииИСМП.ПустаяСсылка");
		ТекущиеДанные.НомерДокументаСертификации = "";
		ТекущиеДанные.ДатаДокументаСертификации  = '00010101';

		Возврат;
	КонецЕсли;

	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.Сертификация);
	НайденныеСтроки = КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.ВидДокументаСертификации   = НайденныеСтроки[0].ВидСертификации;
		ТекущиеДанные.НомерДокументаСертификации = НайденныеСтроки[0].НомерСертификации;
		ТекущиеДанные.ДатаДокументаСертификации  = НайденныеСтроки[0].ДатаСертификации;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПричинаПеремаркировкиПриИзменении(Элемент)
	
	ИдентификаторСтроки = Элементы.Товары.ТекущаяСтрока;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	ПараметрыСтроки = Новый Структура();
	ПараметрыСтроки.Вставить("ВидСертификации",   ТекущиеДанные.ВидДокументаСертификации);
	ПараметрыСтроки.Вставить("ДатаСертификации",  ТекущиеДанные.ДатаДокументаСертификации);
	ПараметрыСтроки.Вставить("НомерСертификации", ТекущиеДанные.НомерДокументаСертификации);
		
	ДополнительныеПараметры = Новый Структура();
	ИдентификаторСтрокиМассив = Новый Массив();
	ИдентификаторСтрокиМассив.Добавить(ИдентификаторСтроки);
	ДополнительныеПараметры.Вставить("ИдентификаторыСтрок", ИдентификаторСтрокиМассив);
	
	ЗаполнениеСертификацииЗавершение(ПараметрыСтроки, ДополнительныеПараметры);
	
	ОбновитьКэшМаркируемойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено
		Или ( РедактированиеФормыНеДоступно И Не ДоступноРедактированиеНовогоКодаМаркировки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле <> Элементы.ТоварыСертификация Тогда
	
		ОткрытьФормуВводаКодовМаркировки(Элементы.Товары.ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоваяХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка, "НоваяНоменклатура");
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, Неопределено);
	
	ОбновитьКэшМаркируемойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоваяНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, Неопределено);
	
	ОбновитьКэшМаркируемойПродукции();
	
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(ТекущиеДанные.НоваяНоменклатура);
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка, "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ОбновитьКэшМаркируемойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФормуВводаКодовМаркировки(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСертификация Тогда
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Если Не ВидПродукцииУказан() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПеремаркировкаТоваровИСМП.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыСертификации(Команда)
	
	ОткрытьФормуРедактированияСертификации(Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#Область ПодключаемыеКоманды


//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКэшМаркируемойПродукции()
	
	ОбновитьКэшМаркируемойПродукцииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшМаркируемойПродукцииСервер()
	
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "ТоварыНоваяХарактеристика", "Объект.Товары.НоваяХарактеристикаИспользуется");
	СобытияФормИСМП.УстановитьУсловноеОформлениеПричинаПеремаркировки(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()

	ОбновитьКэшМаркируемойПродукцииСервер();

КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, ПараметрыЗаполнения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	СтатусИСМП = МенеджерОбъекта.СтатусПоУмолчанию();
	
	СтатусПроверкиИПодбора = ПроверкаИПодборПродукцииИСМП.СтатусПроверкиИПодбораДокумента(
		Объект.Ссылка, Объект.ВидПродукции);
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		ДальнейшееДействие = Новый Массив;
	Иначе
		ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	КонецЕсли;
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		ДальнейшееДействие = Новый Массив;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Объект.Ссылка);
		Запрос.УстановитьПараметр(
			"МассивДальнейшиеДействия", ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусИСМП = Выборка.Статус;
			
			Если СтатусПроверкиИПодбора <> Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
				
				ДальнейшееДействие = Новый Массив;
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗаблокируйтеКодыМаркировки);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПеремаркировку);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);
	
	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(СтатусИСМП, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусИСМП <> Перечисления.СтатусыОбработкиПеремаркировкиТоваровИСМП.Черновик
		И СтатусИСМП <> Перечисления.СтатусыОбработкиПеремаркировкиТоваровИСМП.БлокировкаКодовМаркировкиОшибкаПередачи
		И СтатусИСМП <> Перечисления.СтатусыОбработкиПеремаркировкиТоваровИСМП.ПеремаркировкаОшибкаПередачи;
	
	ДоступноРедактированиеНовогоКодаМаркировки = (СтатусИСМП = Перечисления.СтатусыОбработкиПеремаркировкиТоваровИСМП.КодыМаркировкиЗаблокированыДляПродажи);
	
	Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное.ТолькоПросмотр = РедактированиеФормыНеДоступно;
	Элементы.СтраницаТовары.ТолькоПросмотр                                      = РедактированиеФормыНеДоступно;
	Элементы.ТоварыЗаполнитьДокументыСертификации.Доступность                   = Не РедактированиеФормыНеДоступно;
	Элементы.ОткрытьПодборПодменю.Доступность                                   = Не РедактированиеФормыНеДоступно;
	Элементы.ПоискПоШтрихкоду.Доступность                                       = Не РедактированиеФормыНеДоступно;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗаблокироватьКодыМаркировки" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗаблокируйтеКодыМаркировки");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитеПеремаркировку" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПеремаркировку");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
	
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, ПараметрыЗаполнения)
	
	СобытияФормИСМППереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	
	ШтрихкодированиеИС.ВосстановитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ПеремаркировкаТоваровИСМП);
	
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект, Объект.ВидПродукции, "ТоварыНоваяНоменклатура");
	
	ОбновитьПредставленияНаФорме();
	
	ЗаполнитьПредставлениеСертификации();
	СоздатьКэшСертификацииСервер();
	
	Если Не ПодключенаОбработкаКодовМаркировки Тогда
		СобытияФормИСМП.ПодключитьОбработкуКодовМаркировки(ЭтотОбъект, Ложь);
		ПодключенаОбработкаКодовМаркировки = Истина;
	Иначе
		ПерезаполнитьДанныеФормы();
	КонецЕсли;
	
КонецПроцедуры

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Сертификация

&НаКлиенте
Процедура ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок)
	
	Если ТипЗнч(ИдентификаторыСтрок) = Тип("Массив") Тогда
		МассивСтрок = ИдентификаторыСтрок;
	Иначе
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(ИдентификаторыСтрок);
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидСертификации",
		ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИСМП.ПустаяСсылка"));
	ПараметрыОткрытия.Вставить("ДатаСертификации",  Дата('00010101'));
	ПараметрыОткрытия.Вставить("НомерСертификации", "");
	
	Если МассивСтрок.Количество() = 1 Тогда
		
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(МассивСтрок[0]);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВидСертификации",   ВыбраннаяСтрока.ВидДокументаСертификации);
		ПараметрыОткрытия.Вставить("ДатаСертификации",  ВыбраннаяСтрока.ДатаДокументаСертификации);
		ПараметрыОткрытия.Вставить("НомерСертификации", ВыбраннаяСтрока.НомерДокументаСертификации);
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", МассивСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнениеСертификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия, ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСертификации(
	ВидСертификации, НомерСертификации, ДатаСертификации, ПричинаПеремаркировки=Неопределено)
	
	Если ПричинаПеремаркировки = ПредопределенноеЗначение(
		"Перечисление.ПричиныПеремаркировкиТоваровИСМП.ИспорченоУтраченоСИКМ") Тогда
		Возврат "<не требуется>";
	КонецЕсли;
	
	ШаблонПредставлениеСертификата = "%1 №%2 от %3";
	
	Если ЗначениеЗаполнено(ВидСертификации)
		И ЗначениеЗаполнено(НомерСертификации)
		И ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		ПредставлениеСертификата = СтрШаблон(ШаблонПредставлениеСертификата,
			ВидСертификации, НомерСертификации, Формат(ДатаСертификации, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ПредставлениеСертификата;
	
КонецФункции

&НаСервере
Процедура СоздатьКэшСертификацииСервер()
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, СтрокаТовары.ВидДокументаСертификации,
			СтрокаТовары.НомерДокументаСертификации, СтрокаТовары.ДатаДокументаСертификации);
		
		СтрокаТовары.Сертификация = ПредставлениеСертификации(СтрокаТовары.ВидДокументаСертификации,
			СтрокаТовары.НомерДокументаСертификации, СтрокаТовары.ДатаДокументаСертификации);
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
	КонецЦикла;
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшСертификацииКлиентСервер(Форма, ВидСертификации, НомерСертификации, ДатаСертификации, Номенклатура = Неопределено)
	
	Если Не ЗначениеЗаполнено(ВидСертификации)
		И Не ЗначениеЗаполнено(НомерСертификации)
		И Не ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ВидСертификации, НомерСертификации, ДатаСертификации",
		ВидСертификации, НомерСертификации, ДатаСертификации);
		
	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.КэшСертификации.Добавить();
		НоваяСтрока.ВидСертификации   = ВидСертификации;
		НоваяСтрока.НомерСертификации = НомерСертификации;
		НоваяСтрока.ДатаСертификации  = ДатаСертификации;
		НоваяСтрока.Представление     = ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации);
		НоваяСтрока.Номенклатура      = Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСертификации()
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Строка.Сертификация = ПредставлениеСертификации(
			Строка.ВидДокументаСертификации,
			Строка.НомерДокументаСертификации,
			Строка.ДатаДокументаСертификации,
			Строка.ПричинаПеремаркировки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСертификацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидСертификации   = РезультатВыбора.ВидСертификации;
	НомерСертификации = РезультатВыбора.НомерСертификации;
	ДатаСертификации  = РезультатВыбора.ДатаСертификации;
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ДанныеСтроки.ПричинаПеремаркировки = ПредопределенноеЗначение(
			"Перечисление.ПричиныПеремаркировкиТоваровИСМП.ОшибкиОписанияТовара") Тогда
		
			ДанныеСтроки.ВидДокументаСертификации   = ВидСертификации;
			ДанныеСтроки.НомерДокументаСертификации = НомерСертификации;
			ДанныеСтроки.ДатаДокументаСертификации  = ДатаСертификации;
		
			ДанныеСтроки.Сертификация = ПредставлениеСертификации(
				ВидСертификации, НомерСертификации, ДатаСертификации, ДанныеСтроки.ПричинаПеремаркировки);
		
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьКэшСертификацииКлиентСервер(
		ЭтотОбъект, ВидСертификации, НомерСертификации, ДатаСертификации);
	
	ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода   = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                         = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования         = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода               = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеОбработкиШтрихкода  = ОписаниеОповещенияОбработкиКодаМаркировки();
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеВыполнитьДействие   = Новый ОписаниеОповещения("ОбработкаКодаМаркировкиВыполнитьДействие", ЭтотОбъект);
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеЗавершениеОбработки = НовоеОписаниеОповещенияЗавершенияОбработки();
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
	
	Если РезультатОбработкиШтрихкода.ДополнительныеПараметры <> Неопределено
		И РезультатОбработкиШтрихкода.ТипУпаковки <> ПредопределенноеЗначение(
		"Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
		РезультатОбработкиШтрихкода.Вставить("Номенклатура",             Неопределено);
		РезультатОбработкиШтрихкода.Вставить("Характеристика",           Неопределено);
		РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияИСМП", Ложь);
		РезультатОбработкиШтрихкода.ИспользоватьОбработкуНаКлиенте       = Истина;
		РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки      = Ложь;
		РезультатОбработкиШтрихкода.ОбработкаШтрихкодаБезМарки           = Истина;
		РезультатОбработкиШтрихкода.ДополнительныеПараметры.Свойство("Номенклатура",
			РезультатОбработкиШтрихкода.Номенклатура);
		РезультатОбработкиШтрихкода.ДополнительныеПараметры.Свойство("Характеристика",
			РезультатОбработкиШтрихкода.Характеристика);
		Для Каждого ВидПродукции Из РезультатОбработкиШтрихкода.ВидыПродукции Цикл
			РезультатОбработкиШтрихкода.Вставить("ВидПродукции", ВидПродукции);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОткрытьФормуВводаКодовМаркировки(ИсходныеДанныеСтроки)
	
	//&ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ПеремаркировкаТоваровИСМП.ФормаДокумента.Команда.ОткрытьФормуВводаКодовМаркировки");
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ВидПродукции", Объект.ВидПродукции);
	ПараметрыОткрытия.Вставить("Номенклатура");
	ПараметрыОткрытия.Вставить("Характеристика");
	ПараметрыОткрытия.Вставить("НоваяНоменклатура");
	ПараметрыОткрытия.Вставить("НоваяХарактеристика");
	ПараметрыОткрытия.Вставить("КодМаркировки");
	ПараметрыОткрытия.Вставить("НовыйКодМаркировки");
	ПараметрыОткрытия.Вставить("ПричинаПеремаркировки");
	ПараметрыОткрытия.Вставить("СпособВводаВОборот");
	ПараметрыОткрытия.Вставить("МаркировкаОстатков");
	ПараметрыОткрытия.Вставить("БлокировкаРедактированияСтарогоКода", Ложь);
	ПараметрыОткрытия.Вставить("БлокировкаРедактированияНовогоКода",  Ложь);
	
	Если РедактированиеФормыНеДоступно Тогда
		ПараметрыОткрытия.БлокировкаРедактированияСтарогоКода = РедактированиеФормыНеДоступно;
		ПараметрыОткрытия.БлокировкаРедактированияНовогоКода  = Не ДоступноРедактированиеНовогоКодаМаркировки;
	КонецЕсли;
	
	Если СохраненВыборПоМаркируемойПродукции Тогда
		ПараметрыОткрытия.Вставить("ДанныеВыбораПоМаркируемойПродукции", ДанныеВыбораПоМаркируемойПродукции);
	КонецЕсли;
	
	Если ТипЗнч(ИсходныеДанныеСтроки) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ИсходныеДанныеСтроки);
		
	ИначеЕсли ИсходныеДанныеСтроки <> Неопределено Тогда
		
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИсходныеДанныеСтроки);
		ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ДанныеСтроки);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИсходныеДанныеСтроки);
	
	КонецЕсли;
	
	ОписаниеОповещенияЗакрытиеФормыВводаКодаМаркировки = Новый ОписаниеОповещения(
		"ОповещениеЗакрытиеФормыВводаКода", ЭтотОбъект, ДополнительныеПараметры);
		
	ОткрытьФорму(
		"Обработка.РаботаСКМПриПеремаркировкеТоваровИСМП.Форма.ФормаВводаКодовМаркировки",
		ПараметрыОткрытия,
		ЭтотОбъект,,,, ОписаниеОповещенияЗакрытиеФормыВводаКодаМаркировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеЗакрытиеФормыВводаКода(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьКэшМаркируемойПродукции();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Или ДополнительныеПараметры.ИдентификаторСтроки = Неопределено Тогда
		ТекущиеДанные = Объект.Товары.Добавить();
	Иначе
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	ТекущиеДанные.Сертификация = ПредставлениеСертификации(
			ТекущиеДанные.ВидДокументаСертификации,
			ТекущиеДанные.НомерДокументаСертификации,
			ТекущиеДанные.ДатаДокументаСертификации,
			ТекущиеДанные.ПричинаПеремаркировки);
	
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(ТекущиеДанные.НоваяНоменклатура);
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция НовоеОписаниеОповещенияЗавершенияОбработки()
	
	ДополнительныеПараметрыУспешногоСканирования = Новый Структура();
	ДополнительныеПараметрыУспешногоСканирования.Вставить(
		"СохраненВыборПоМаркируемойПродукции", ЭтаФорма.СохраненВыборПоМаркируемойПродукции);
	ОписаниеОповещенияВводаШтрихкода = Новый ОписаниеОповещения(
		"ПослеУспешнойОбработкиШтрихкода", ЭтотОбъект, ДополнительныеПараметрыУспешногоСканирования);
	Возврат ОписаниеОповещенияВводаШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура ПослеУспешнойОбработкиШтрихкода(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Не (Результат.ИспользоватьОбработкуНаКлиенте)
		Или РедактированиеФормыНеДоступно Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВводаКодаМаркировки = Истина;
	
	Если Не Результат.ОбработкаШтрихкодаБезМарки
		И СохраненВыборПоМаркируемойПродукции Тогда
		
		ДанныеВыбора = ДанныеВыбораПоМаркируемойПродукции;
		
		Если ДанныеВыбора.Номенклатура = Результат.Номенклатура
			И ДанныеВыбора.Характеристика = Результат.Характеристика Тогда
			// Сканируем товар, настройки которого сохранили
			// Резервируем из пула код, при успешном резервировании добавляем в список
			
			ДополнительныеПараметрыОповещенияПотоковойПечати = Новый Структура();
			ДополнительныеПараметрыОповещенияПотоковойПечати.Вставить(
				"ДанныеВыбораПоМаркируемойПродукции", ДанныеВыбораПоМаркируемойПродукции);
			ДополнительныеПараметрыОповещенияПотоковойПечати.Вставить(
				"КодМаркировки", Результат.КодМаркировки);
			
			СтруктураПечатиЭтикетки =
				ПечатьЭтикетокИСМПКлиентСервер.СтруктураПечатиЭтикетки();
			СтруктураПечатиЭтикетки.Организация        = Объект.Организация;
			СтруктураПечатиЭтикетки.ВидПродукции       = Объект.ВидПродукции;
			СтруктураПечатиЭтикетки.Номенклатура       = Результат.Номенклатура;
			СтруктураПечатиЭтикетки.Характеристика     = Результат.Характеристика;
			СтруктураПечатиЭтикетки.ШтрихкодУпаковки   = Результат.КодМаркировки;
			СтруктураПечатиЭтикетки.СпособВводаВОборот = Результат.СпособВводаВОборот;
			СтруктураПечатиЭтикетки.Шаблон             = ДанныеВыбора.ШаблонМаркировки;
			СтруктураПечатиЭтикетки.МаркировкаОстатков = Результат.МаркировкаОстатков;
			
			ОписаниеОповещенияРаспечататьНовыйКодЗавершение = Новый ОписаниеОповещения(
				"ОповещениеРезультатПотоковойПечати", ЭтотОбъект, ДополнительныеПараметрыОповещенияПотоковойПечати);
			
			СтруктураПараметров = ПечатьЭтикетокИСМПКлиент.СтруктураПараметровПечатиНовогоКодаМаркировки(
				СтруктураПечатиЭтикетки, ЭтотОбъект, ОписаниеОповещенияРаспечататьНовыйКодЗавершение);
			СтруктураПараметров.Организация    = Объект.Организация;
			СтруктураПараметров.ВидПродукции   = Объект.ВидПродукции;
			СтруктураПараметров.Документ       = Объект.Ссылка;
			СтруктураПараметров.ШаблонЭтикетки = ДанныеВыбора.ШаблонЭтикетки;
			СтруктураПараметров.Шаблон         = СтруктураПечатиЭтикетки.Шаблон;
			СтруктураПараметров.СразуНаПринтер = ДанныеВыбора.СразуНаПринтер;
			СтруктураПараметров.Действие       = "УстановитьЭтикеткуИПечать";
			
			РезультатДляПечати = Новый Структура();
			РезультатДляПечати.Вставить("ДанныеВыбора", ДанныеВыбора);
			
			ПечатьЭтикетокИСМПКлиент.РаспечататьНовыйКодМаркировки(РезультатДляПечати, СтруктураПараметров);
			
			ОткрытьФормуВводаКодаМаркировки = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОткрытьФормуВводаКодаМаркировки Тогда
		ОткрытьФормуВводаКодовМаркировки(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеРезультатПотоковойПечати(ДанныеОтветаРезервированияИПечати, ДополнительныеПараметры) Экспорт
	
	Если ДанныеОтветаРезервированияИПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеОтветаРезервированияИПечати.РезультатРезервирования.Количество() Тогда
		
		СтрокаРезультата = ДанныеОтветаРезервированияИПечати.РезультатРезервирования.Получить(0);
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		ДанныеВыбора                         = ДополнительныеПараметры.ДанныеВыбораПоМаркируемойПродукции;
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, ДанныеВыбора);
		НоваяСтрокаТовары.КодМаркировки      = ДополнительныеПараметры.КодМаркировки;
		НоваяСтрокаТовары.НовыйКодМаркировки = СтрокаРезультата.ШтрихкодУпаковки;
		НоваяСтрокаТовары.МаркировкаОстатков = ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(
			ДополнительныеПараметры.КодМаркировки);
			
		СобытияФормИСМПКлиент.ОпределитьИспользованиеХарактеристик(
			ЭтотОбъект,
			НоваяСтрокаТовары,
			"Номенклатура", "ХарактеристикиИспользуются");
		СобытияФормИСМПКлиент.ОпределитьИспользованиеХарактеристик(
			ЭтотОбъект,
			НоваяСтрокаТовары,
			"НоваяНоменклатура", "НоваяХарактеристикаИспользуется");
		
		СписокНоменклатуры = Новый Массив;
		СписокНоменклатуры.Добавить(НоваяСтрокаТовары.НоваяНоменклатура);
		ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
		
		НоваяСтрокаТовары.Сертификация = ПредставлениеСертификации(
			НоваяСтрокаТовары.ВидДокументаСертификации,
			НоваяСтрокаТовары.НомерДокументаСертификации,
			НоваяСтрокаТовары.ДатаДокументаСертификации,
			НоваяСтрокаТовары.ПричинаПеремаркировки);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ПроверитьЗаполнениеПоВидуДействия(ВыполняемоеДействие)
	
	Отказ = Ложь;
	
	Если ВыполняемоеДействие = "ВыполнитеПеремаркировку" Тогда
		Для Каждого СтрокаТовар Из Объект.Товары Цикл
			НомерСтроки = Объект.Товары.Индекс(СтрокаТовар) + 1;
			Если Не ЗначениеЗаполнено(СтрокаТовар.НовыйКодМаркировки) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'В строке %1 табличной части ""Товары "" не заполнен новый код маркировки.'"),
					НомерСтроки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
						"Объект.Товары", НомерСтроки, "НовыйКодМаркировки"),,
					Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусИСМП();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не (ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора)) Тогда
		Возврат
	КонецЕсли;
	
	Объект.ДокументОснование = ДанныеВыбора;
	Модифицированность       = Истина;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДанныеФормы()
	
	ЗаполнитьПредставлениеСертификации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Истина)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
			"ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да
		Или РезультатВопроса = Истина Тогда
		
		Объект.ВидПродукции = ДополнительныеПараметры;
		Объект.Товары.Очистить();
		
		ВидПродукцииПриИзменении(Элементы.ВидПродукции, РезультатВопроса = Истина);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацияПриЗавершении(РезультатВопроса, НоваяОрганизация) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.Организация = НоваяОрганизация;
		Объект.Товары.Очистить();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Тогда
		СобытияФормИСМПКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма);
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВидПродукцииУказан()
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид продукции'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСертификатыНоменклатурыВКэш(Форма, СписокНоменклатуры)
	
	СертификатыНоменклатуры = ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры);
	
	Для Каждого КлючЗначение Из СертификатыНоменклатуры Цикл
		
		Номенклатура = КлючЗначение.Ключ;
		Для Каждого Сертификат Из КлючЗначение.Значение Цикл
			
			ОбновитьКэшСертификацииКлиентСервер(
				Форма, Сертификат.ВидСертификации, Сертификат.НомерСертификации, Сертификат.ДатаСертификации, Номенклатура);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры)
	
	СертификатыНоменклатуры = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры);
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

#КонецОбласти