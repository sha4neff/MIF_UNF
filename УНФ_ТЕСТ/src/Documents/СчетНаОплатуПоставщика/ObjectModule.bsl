#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Процедура - обработчик события ПриКопировании объекта.
//
Процедура ПриКопировании(ОбъектКопирования)
	
	Событие = Документы.Событие.ПустаяСсылка();
	РезервироватьДенежныеСредства = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаЗаполнения объекта.
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПоставщику")] = "ЗаполнитьПоЗаказуПоставщику";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения);
	
КонецПроцедуры

// Процедура - обработчик события ПередЗаписью объекта.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = Запасы.Итог("Всего");
	
	Если ЗначениеЗаполнено(Контрагент)
	И НЕ Контрагент.ВестиРасчетыПоДоговорам
	И НЕ ЗначениеЗаполнено(Договор) Тогда
		Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.СчетНаОплатуПоставщика.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьОплатаСчетовИЗаказов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДенежныеСредстваВРезерве(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка по резервам денежных средств
	Документы.СчетНаОплатуПоставщика.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаУдаленияПроведения объекта.
//
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для удаления проведения документа.
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей.
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.СчетНаОплатуПоставщика.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроверкиЗаполнения объекта.
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ЗапланироватьОплату
		И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Безналичные Тогда
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Касса");
		
	ИначеЕсли ЗапланироватьОплату
		И ТипДенежныхСредств = Перечисления.ТипыДенежныхСредств.Наличные Тогда
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "БанковскийСчет");
		
	Иначе
		
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Касса");
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "БанковскийСчет");
		
	КонецЕсли;
	
	Если ЗапланироватьОплату
		И ПлатежныйКалендарь.Количество() = 1
		И НЕ ЗначениеЗаполнено(ПлатежныйКалендарь[0].ДатаОплаты) Тогда
		
		ТекстСообщения = НСтр("ru = 'Поле ""Дата оплаты"" не заполнено.'");
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, ТекстСообщения, , , "ДатаОплаты", Отказ);
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ПлатежныйКалендарь.ДатаОплаты");
		
	КонецЕсли;
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		УправлениеНебольшойФирмойСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Договор");
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗаполненияДокумента

// Обработчик заполнения на основании документа ЗаказПоставщику.
//
// Параметры:
//  ДокументСсылкаЗаказПоставщику	 - ДокументСсылка.ЗаказПоставщику.
//
Процедура ЗаполнитьПоЗаказуПоставщику(ДокументСсылкаЗаказПоставщику) Экспорт
	
	Организация		= ДокументСсылкаЗаказПоставщику.Организация;
	ВалютаДокумента = ДокументСсылкаЗаказПоставщику.ВалютаДокумента;
	Договор			= ДокументСсылкаЗаказПоставщику.Договор;
	Контрагент		= ДокументСсылкаЗаказПоставщику.Контрагент;
	БанковскийСчет	= ДокументСсылкаЗаказПоставщику.Организация.БанковскийСчетПоУмолчанию;
	ВидЦенКонтрагента = ДокументСсылкаЗаказПоставщику.ВидЦенКонтрагента;
	НалогообложениеНДС = ДокументСсылкаЗаказПоставщику.НалогообложениеНДС;
	Если ВалютаДокумента = Константы.НациональнаяВалюта.Получить() Тогда
		Курс = ДокументСсылкаЗаказПоставщику.Курс;
		Кратность = ДокументСсылкаЗаказПоставщику.Кратность;
	Иначе
		СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаРасчетов));
		Курс = СтруктураПоВалюте.Курс;
		Кратность = СтруктураПоВалюте.Кратность;
	КонецЕсли;
	
	Организация		  = ДокументСсылкаЗаказПоставщику.Организация;
	СуммаВключаетНДС  = ДокументСсылкаЗаказПоставщику.СуммаВключаетНДС;
	ДокументОснование = ДокументСсылкаЗаказПоставщику;
	
	Запасы.Очистить();
	
	Для каждого ТекСтрокаЗапасы Из ДокументСсылкаЗаказПоставщику.Запасы Цикл
		НоваяСтрока = Запасы.Добавить();
		НоваяСтрока.Номенклатура		 = ТекСтрокаЗапасы.Номенклатура;
		НоваяСтрока.Характеристика		 = ТекСтрокаЗапасы.Характеристика;
		НоваяСтрока.Содержание			 = ТекСтрокаЗапасы.Содержание;
		НоваяСтрока.ЕдиницаИзмерения	 = ТекСтрокаЗапасы.ЕдиницаИзмерения;
		НоваяСтрока.Количество			 = ТекСтрокаЗапасы.Количество;
		НоваяСтрока.Цена				 = ТекСтрокаЗапасы.Цена;
		НоваяСтрока.ПроцентСкидкиНаценки = ТекСтрокаЗапасы.ПроцентСкидкиНаценки;
		НоваяСтрока.СуммаСкидкиНаценки	 = ТекСтрокаЗапасы.СуммаСкидкиНаценки;
		НоваяСтрока.Сумма				 = ТекСтрокаЗапасы.Сумма;
		НоваяСтрока.СтавкаНДС			 = ТекСтрокаЗапасы.СтавкаНДС;
		НоваяСтрока.СуммаНДС			 = ТекСтрокаЗапасы.СуммаНДС;
		НоваяСтрока.Всего				 = ТекСтрокаЗапасы.Всего;
	КонецЦикла;
	
	СуммаОплаты = Запасы.Итог("Всего");
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли