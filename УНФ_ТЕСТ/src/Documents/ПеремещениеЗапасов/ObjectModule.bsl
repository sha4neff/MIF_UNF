#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Если ПоложениеЗаказаПокупателя<>Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			СтрокаТабличнойЧасти.ЗаказПокупателя = ЗаказПокупателя;
		КонецЦикла;	
	Иначе
		ЗаказПокупателя = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Запасы, "ЗаказПокупателя");
	КонецЕсли;	
	
	Если НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
		
		Если СчетЗатрат.ТипСчета = Перечисления.ТипыСчетов.Расходы
			И (ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию) Тогда
			
			НаправлениеДеятельности = Справочники.НаправленияДеятельности.ОсновноеНаправление;
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры // ПередЗаписью()

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтратегияЗаполнения = Новый Соответствие;
	СтратегияЗаполнения[Тип("ДокументСсылка.АвансовыйОтчет")] = "ЗаполнитьПоАвансовомуОтчету";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказНаПроизводство")] = "ЗаполнитьПоЗаказуНаПроизводство";
	СтратегияЗаполнения[Тип("ДокументСсылка.ЗаказПокупателя")] = "ЗаполнитьПоЗаказуПокупателя";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПеремещениеПоЯчейкам")] = "ЗаполнитьПоПеремещениюПоЯчейкам";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходнаяНакладная")] = "ЗаполнитьПоПриходнойНакладной";
	СтратегияЗаполнения[Тип("ДокументСсылка.ПриходныйОрдер")] = "ЗаполнитьПоПриходномуОрдеру";
	СтратегияЗаполнения[Тип("ДокументСсылка.СборкаЗапасов")] = "ЗаполнитьПоСборкеЗапасов";
	СтратегияЗаполнения[Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС")] = "ЗаполнитьПоВходящейТранспортнойОперации";
	СтратегияЗаполнения[Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС")] = "ЗаполнитьПоИсходящейТранспортнойОперации";
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьДокумент(ЭтотОбъект, ДанныеЗаполнения, СтратегияЗаполнения, "ЗаказПокупателя");
	
	ЗаполнитьПодписиКладовщиков();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка наличия розничной цены.
	ПроверитьНаличиеРозничнойЦены(Отказ);
	
	Если Запасы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.ПередачаВЭксплуатацию
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы Тогда
		ПроверяемыеРеквизиты.Добавить("СчетЗатрат");
	КонецЕсли;
	
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаЗапасы.ЗаказПокупателя) И СтрокаЗапасы.Резерв > 0 Тогда
				
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, 
				"В строке указано количество резерва, но не указан заказ.",
				"Запасы",
				СтрокаЗапасы.НомерСтроки,
				"Резерв",
				Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) И СтрокаЗапасы.Резерв > 0 Тогда
				
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(ЭтотОбъект, 
				"В строке указано количество резерва, но не указан заказ.",
				"Запасы",
				СтрокаЗапасы.НомерСтроки,
				"Резерв",
				Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() 
		И (ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.СписаниеНаРасходы) Тогда
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если СтрокаЗапасы.Резерв > СтрокаЗапасы.Количество Тогда
				
				ТекстСообщения = НСтр("ru = 'В строке №%Номер% табл. части ""Запасы"" количество передаваемых в резерв позиций превышает общее количество запасов.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					ЭтотОбъект,
					ТекстСообщения,
					"Запасы",
					СтрокаЗапасы.НомерСтроки,
					"Резерв",
					Отказ
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Серийные номера
	Если НЕ (ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница,"ОрдерныйСклад") = Истина 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиницаПолучатель,"ОрдерныйСклад") = Истина) Тогда
		РаботаССерийнымиНомерами.ПроверкаЗаполненияСерийныхНомеров(Отказ, Запасы, СерийныеНомера, СтруктурнаяЕдиница, ЭтотОбъект);
	КонецЕсли;
	
	НоменклатураВДокументахСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, Отказ, Истина);
	
	// Подарочные сертификаты
	РаботаСПодарочнымиСертификатами.ПроверитьВозможностьИспользованияСертификатов(Отказ, ЭтотОбъект, "Запасы", "СтруктурнаяЕдиницаПолучатель", Истина);
	
	Если НЕ ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение Тогда
		
		ИменаТабличныхЧастей = Новый Массив;
		ИменаТабличныхЧастей.Добавить("Запасы");
		ИменаТабличныхЧастей.Добавить("Спецоснастка");
		ИменаТабличныхЧастей.Добавить("ИнвентарьИХозяйственныеПринадлежности");
		
		ГрузовыеТаможенныеДекларацииСервер.ПриОбработкеПроверкиЗаполнения(Отказ, ЭтотОбъект, ИменаТабличныхЧастей);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа
	Документы.ПеремещениеЗапасов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКРасходуСоСкладов(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыКПоступлениюНаСклады(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьЗапасыВРазрезеГТД(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьДоходыИРасходы(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСуммовойУчетВРознице(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьУправленческий(ДополнительныеСвойства, Движения, Отказ);

	// СерийныеНомера
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераГарантии(ДополнительныеСвойства, Движения, Отказ);
	УправлениеНебольшойФирмойСервер.ОтразитьСерийныеНомераОстатки(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.ПеремещениеЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	УправлениеНебольшойФирмойСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	УправлениеНебольшойФирмойСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	УправлениеНебольшойФирмойСервер.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.ПеремещениеЗапасов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьПоАвансовомуОтчету(АвансовыйОтчет) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АвансовыйОтчетЗапасы.Ссылка КАК ДокументОснование,
	|	АвансовыйОтчетЗапасы.Ссылка.Организация КАК Организация,
	|	АвансовыйОтчетЗапасы.ЗаказПокупателя КАК ЗаказПокупателя,
	|	АвансовыйОтчетЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	АвансовыйОтчетЗапасы.Ячейка КАК Ячейка
	|ИЗ
	|	Документ.АвансовыйОтчет.Запасы КАК АвансовыйОтчетЗапасы
	|ГДЕ
	|	АвансовыйОтчетЗапасы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АвансовыйОтчетЗапасы.Ссылка КАК Ссылка,
	|	АвансовыйОтчетЗапасы.НомерСтроки КАК НомерСтроки,
	|	АвансовыйОтчетЗапасы.Номенклатура КАК Номенклатура,
	|	АвансовыйОтчетЗапасы.Характеристика КАК Характеристика,
	|	АвансовыйОтчетЗапасы.Партия КАК Партия,
	|	АвансовыйОтчетЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	АвансовыйОтчетЗапасы.Количество КАК Количество,
	|	АвансовыйОтчетЗапасы.Сумма КАК Сумма,
	|	АвансовыйОтчетЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ИЗ
	|	Документ.АвансовыйОтчет.Запасы КАК АвансовыйОтчетЗапасы
	|ГДЕ
	|	АвансовыйОтчетЗапасы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", АвансовыйОтчет);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	
	Запасы.Загрузить(РезультатыЗапроса[1].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаПроизводство(ДанныеЗаполнения) Экспорт
	
	ДанныеЗаполненияВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ВидОперации");
	
	Если ДанныеЗаполненияВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Сборка Тогда
		ЗаполнитьПоЗаказуНаПроизводствоСборка(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДанныеЗаполненияВидОперации = Перечисления.ВидыОперацийЗаказНаПроизводство.Разборка Тогда
		ЗаполнитьПоЗаказуНаПроизводствоРазборка(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаказуПокупателя(ДокументСсылкаЗаказ) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.СтруктурнаяЕдиницаРезерв КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Ячейка КАК ЯчейкаПолучатель,
	|	ТаблицаДокумента.ОжидаетсяВыборВариантаКП,
	|	ТаблицаДокумента.Грузоотправитель,
	|	ТаблицаДокумента.Грузополучатель,
	|	ТаблицаДокумента.АдресДоставки
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧастьЗапасы.Ссылка КАК ЗаказПокупателя,
	|	ТабличнаяЧастьЗапасы.НомерСтроки,
	|	ТабличнаяЧастьЗапасы.Номенклатура,
	|	ТабличнаяЧастьЗапасы.Характеристика,
	|	ТабличнаяЧастьЗапасы.Партия,
	|	ТабличнаяЧастьЗапасы.ЕдиницаИзмерения,
	|	ТабличнаяЧастьЗапасы.Количество,
	|	ТабличнаяЧастьЗапасы.Резерв,
	|	ТабличнаяЧастьЗапасы.Содержание
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ТабличнаяЧастьЗапасы
	|ГДЕ
	|	ТабличнаяЧастьЗапасы.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Запас)");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаЗаказ);
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ДокументСсылкаЗаказ, Запрос.МенеджерВременныхТаблиц, Ложь);
	
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Ссылка КАК ДокументОснование", "&Ссылка КАК ЗаказПокупателя");
	КонецЕсли;
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	Если РезультатыЗапроса[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаШапка = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	ЗначенияРеквизитов = Новый Структура("ОжидаетсяВыборВариантаКП", ВыборкаШапка.ОжидаетсяВыборВариантаКП);
	Документы.ЗаказПокупателя.ПроверитьВозможностьВводаНаОснованииЗаказаПокупателя(ДокументСсылкаЗаказ, ЗначенияРеквизитов);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	
	Запасы.Загрузить(РезультатыЗапроса[1].Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьПоПеремещениюПоЯчейкам(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПеремещениеПоЯчейкам.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение) КАК ВидОперации,
	|	ПеремещениеПоЯчейкам.Организация КАК Организация,
	|	ПеремещениеПоЯчейкам.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ПеремещениеПоЯчейкам.Ячейка КАК Ячейка,
	|	ВЫБОР
	|		КОГДА ПеремещениеПоЯчейкам.СтруктурнаяЕдиница.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ПеремещениеПоЯчейкам.СтруктурнаяЕдиница.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ПеремещениеПоЯчейкам.СтруктурнаяЕдиница.ПолучательПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПолучатель,
	|	ВЫБОР
	|		КОГДА ПеремещениеПоЯчейкам.СтруктурнаяЕдиница.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ПеремещениеПоЯчейкам.СтруктурнаяЕдиница.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ПеремещениеПоЯчейкам.СтруктурнаяЕдиница.ЯчейкаПолучателяПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаПолучатель,
	|	ПеремещениеПоЯчейкам.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		СерийныеНомера КАК СерийныеНомера,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК Запасы
	|ИЗ
	|	Документ.ПеремещениеПоЯчейкам КАК ПеремещениеПоЯчейкам
	|ГДЕ
	|	ПеремещениеПоЯчейкам.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		Запасы.Загрузить(ВыборкаИзРезультатаЗапроса.Запасы.Выгрузить());
		ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "Запасы", "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
		
	КонецЕсли;

	РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоПриходнойНакладной(ДокументСсылкаПриходнаяНакладная) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("РезервированиеЗапасов", ПолучитьФункциональнуюОпцию("РезервированиеЗапасов"));
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылкаПриходнаяНакладная);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	// Заполним данные шапки документа.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Ссылка КАК ДокументОснование,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерВходящегоДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаВходящегоДокумента,
	|	ТаблицаДокумента.ВалютаДокумента КАК ВалютаДенежныхСредств,
	|	ТаблицаДокумента.Контрагент КАК Контрагент,
	|	ТаблицаДокумента.Договор КАК Договор,
	|	ТаблицаДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаДокумента.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ТаблицаДокумента.Ячейка КАК Ячейка,
	|	ТаблицаДокумента.Запасы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		ВЫБОР
	|			КОГДА НЕ &РезервированиеЗапасов
	|				ТОГДА ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			КОГДА ТаблицаДокумента.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ВозвратОтПереработчика), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПриемНаКомиссию))
	|				ТОГДА ТаблицаДокумента.Запасы.ЗаказПокупателя
	|			ИНАЧЕ ТаблицаДокумента.Запасы.Заказ
	|		КОНЕЦ КАК ЗаказПокупателя,
	|		Всего КАК Всего,
	|		Себестоимость КАК Себестоимость,
	|		СуммаРасходов КАК СуммаРасходов,
	|		Содержание КАК Содержание,
	|		СерийныеНомера КАК СерийныеНомера,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК Запасы
	|ИЗ
	|	Документ.ПриходнаяНакладная КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Запасы.Загрузить(Выборка.Запасы.Выгрузить());
	
	Если НЕ ЗначениеЗаполнено(ПоложениеЗаказаПокупателя) Тогда
		ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли; 
	Если ПолучитьФункциональнуюОпцию("РезервированиеЗапасов") И ПоложениеЗаказаПокупателя=Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
		Если Запасы.Количество()>0 Тогда
			ЗаказПокупателя = Запасы[0].ЗаказПокупателя;
		КонецЕсли; 
		Для каждого СтрокаТабличнойЧасти Из Запасы Цикл
			Если СтрокаТабличнойЧасти.ЗаказПокупателя<>ЗаказПокупателя Тогда
				ЗаказПокупателя = ЗаполнениеОбъектовУНФ.ЗначениеДляШапки(Запасы, "ЗаказПокупателя");
				ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
				СтрокаТабличнойЧасти.Резерв = СтрокаТабличнойЧасти.Количество;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДокументСсылкаПриходнаяНакладная);
	
КонецПроцедуры // ЗаполнитьПоПриходнаяНакладная()

Процедура ЗаполнитьПоПриходномуОрдеру(ДанныеЗаполнения) Экспорт
	
	Организация = ДанныеЗаполнения.Организация;
	ВидОперации = Перечисления.ВидыОперацийПеремещениеЗапасов.Перемещение;
	ДокументОснование = ДанныеЗаполнения.Ссылка;
	СтруктурнаяЕдиницаПолучатель = ДанныеЗаполнения.СтруктурнаяЕдиница;
	ЯчейкаПолучатель = ДанныеЗаполнения.Ячейка;
	
	Запасы.Очистить();
	Для каждого ТекСтрокаЗапасы Из ДанныеЗаполнения.Запасы Цикл
		НоваяСтрока = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаЗапасы);
	КонецЦикла;
	ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "Запасы", "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");

	РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПоСборкеЗапасов(ДанныеЗаполнения) Экспорт
	
	ДанныеЗаполненияВидОперации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ВидОперации");
	
	Если ДанныеЗаполненияВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка Тогда
		ЗаполнитьПоСборкеЗапасовСборка(ДанныеЗаполнения);
	КонецЕсли;
	
	Если ДанныеЗаполненияВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Разборка Тогда
		ЗаполнитьПоСборкеЗапасовРазборка(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение документа на основании входящей транспортной операции ВЕТИС.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоВходящейТранспортнойОперации(ДанныеЗаполнения) Экспорт
	
	Реквизиты = ИнтеграцияВЕТИСУНФ.ДанныеПрикладныхДокументовИзВходящейТранспортнойОперацииВЕТИС(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
		СтруктурнаяЕдиница = Реквизиты.ГрузоотправительПредприятие;
		
	КонецЕсли;
	
	Товары = Реквизиты.Товары.Выгрузить();
	ТоварыУточнение = Реквизиты.ТоварыУточнение.Выгрузить();
	
	Товары.Индексы.Добавить("ИдентификаторСтроки");
	
	Для Каждого СтрокаТовары Из ТоварыУточнение Цикл 
		
		ИсходнаяСтрока = Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки));
		Если ИсходнаяСтрока.Количество() = 0 Тогда 
			ИсходнаяСтрока = Новый Структура;
		Иначе 
			ИсходнаяСтрока = ИсходнаяСтрока[0];
			ИсходнаяСтрока.БылоУточнение = Истина;
		КонецЕсли;
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, ИсходнаяСтрока);
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, СтрокаТовары);
		
	КонецЦикла;
	
	Для Каждого СтрокаТовары Из Товары.НайтиСтроки(Новый Структура("БылоУточнение", Ложь)) Цикл
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, СтрокаТовары);
		
	КонецЦикла;
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "Запасы", "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
	
КонецПроцедуры

// Заполнение документа на основании исходящей транспортной операции ВЕТИС.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения документа
//	
Процедура ЗаполнитьПоИсходящейТранспортнойОперации(ДанныеЗаполнения) Экспорт
	
	Реквизиты = ИнтеграцияВЕТИСУНФ.ДанныеПрикладныхДокументовИзИсходящейТранспортнойОперацииВЕТИС(ДанныеЗаполнения);
	Реквизиты.Следующий();
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты);
		
	КонецЕсли;
	
	Товары = Реквизиты.Товары.Выгрузить();
	
	Запасы.Очистить();
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		НоваяСтрокаЗапасы = Запасы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗапасы, СтрокаТовары);
		
	КонецЦикла;
	
	ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "Запасы", "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
	
КонецПроцедуры

// Процедура заполняет табличную часть Запасы по остаткам на складе.
//
Процедура ЗаполнитьЗапасыПоОстаткамНаСкладе(ИмяТабличнойЧасти = "Запасы") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыНаСкладахОстатки.Организация КАК Организация,
	|	ЗапасыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗапасыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия КАК Партия,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыНаСкладахОстатки.Ячейка КАК Ячейка,
	|	СУММА(ЗапасыНаСкладахОстатки.КоличествоОстаток) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыНаСкладах.Организация КАК Организация,
	|		ЗапасыНаСкладах.Номенклатура КАК Номенклатура,
	|		ЗапасыНаСкладах.Характеристика КАК Характеристика,
	|		ЗапасыНаСкладах.Партия КАК Партия,
	|		ЗапасыНаСкладах.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыНаСкладах.Ячейка КАК Ячейка,
	|		ЗапасыНаСкладах.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.ЗапасыНаСкладах.Остатки(
	|				,
	|				Организация = &Организация
	|					И СтруктурнаяЕдиница = &СтруктурнаяЕдиница
	|					И Ячейка = &Ячейка) КАК ЗапасыНаСкладах
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасыНаСкладах.Организация,
	|		ДвиженияДокументаЗапасыНаСкладах.Номенклатура,
	|		ДвиженияДокументаЗапасыНаСкладах.Характеристика,
	|		ДвиженияДокументаЗапасыНаСкладах.Партия,
	|		ДвиженияДокументаЗапасыНаСкладах.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасыНаСкладах.Ячейка,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасыНаСкладах.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасыНаСкладах.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.ЗапасыНаСкладах КАК ДвиженияДокументаЗапасыНаСкладах
	|	ГДЕ
	|		ДвиженияДокументаЗапасыНаСкладах.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасыНаСкладах.Период <= &Период
	|		И ДвиженияДокументаЗапасыНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК ЗапасыНаСкладахОстатки
	|ГДЕ
	|	ЗапасыНаСкладахОстатки.КоличествоОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыНаСкладахОстатки.Организация,
	|	ЗапасыНаСкладахОстатки.Номенклатура,
	|	ЗапасыНаСкладахОстатки.Характеристика,
	|	ЗапасыНаСкладахОстатки.Партия,
	|	ЗапасыНаСкладахОстатки.СтруктурнаяЕдиница,
	|	ЗапасыНаСкладахОстатки.Ячейка,
	|	ЗапасыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	Запрос.УстановитьПараметр("Ячейка", Ячейка);
	
	ЭтотОбъект[ИмяТабличнойЧасти].Загрузить(Запрос.Выполнить().Выгрузить());
	ЗаполнениеОбъектовУНФ.ЗаполнитьТаблицуПоШапке(ЭтотОбъект, "Запасы", "ЗаказПокупателя", "ПоложениеЗаказаПокупателя");
	
КонецПроцедуры // ЗаполнитьЗапасыПоОстаткамНаСкладе()

// Процедура заполняет клонку Количество по резервам под заказ.
//
Процедура ЗаполнитьКолонкуРезервПоРезервам() Экспорт
	
	Запасы.ЗагрузитьКолонку(Новый Массив(Запасы.Количество()), "Резерв");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ВЫБОР
	|		КОГДА &ЗаказВШапке
	|			ТОГДА &Заказ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТаблицаЗапасы.ЗаказПокупателя ССЫЛКА Документ.ЗаказПокупателя
	|						И ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|					ТОГДА ТаблицаЗапасы.ЗаказПокупателя
	|				ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы";
	
	ЗаказВШапке = ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	Запрос.УстановитьПараметр("ТаблицаЗапасы", Запасы.Выгрузить());
	Запрос.УстановитьПараметр("ЗаказВШапке", ЗаказВШапке);
	Запрос.УстановитьПараметр("Заказ", ?(ЗначениеЗаполнено(ЗаказПокупателя), ЗаказПокупателя, Документы.ЗаказПокупателя.ПустаяСсылка()));
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА СтруктурныеЕдиницы.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ТаблицаЗапасы.Номенклатура.СчетУчетаЗатрат
	|		ИНАЧЕ ТаблицаЗапасы.Номенклатура.СчетУчетаЗапасов
	|	КОНЕЦ КАК СчетУчета,
	|	ТаблицаЗапасы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗапасы.Характеристика КАК Характеристика,
	|	ТаблицаЗапасы.Партия КАК Партия,
	|	ТаблицаЗапасы.ЗаказПокупателя КАК ЗаказПокупателя
	|ПОМЕСТИТЬ ВременнаяТаблицаЗапасыОтбор
	|ИЗ
	|	ВременнаяТаблицаЗапасы КАК ТаблицаЗапасы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы
	|		ПО (СтруктурныеЕдиницы.Ссылка = &СтруктурнаяЕдиница)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыОстатки.Организация КАК Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|	ЗапасыОстатки.Характеристика КАК Характеристика,
	|	ЗапасыОстатки.Партия КАК Партия,
	|	СУММА(ЗапасыОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗапасыОстатки.Организация КАК Организация,
	|		ЗапасыОстатки.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|		ЗапасыОстатки.СчетУчета КАК СчетУчета,
	|		ЗапасыОстатки.ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЗапасыОстатки.Номенклатура КАК Номенклатура,
	|		ЗапасыОстатки.Характеристика КАК Характеристика,
	|		ЗапасыОстатки.Партия КАК Партия,
	|		ЗапасыОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.Запасы.Остатки(
	|				,
	|				(Организация, СтруктурнаяЕдиница, СчетУчета, Номенклатура, Характеристика, Партия, ЗаказПокупателя) В
	|					(ВЫБРАТЬ
	|						&Организация,
	|						ТаблицаЗапасы.СтруктурнаяЕдиница,
	|						ТаблицаЗапасы.СчетУчета,
	|						ТаблицаЗапасы.Номенклатура,
	|						ТаблицаЗапасы.Характеристика,
	|						ТаблицаЗапасы.Партия,
	|						ТаблицаЗапасы.ЗаказПокупателя
	|					ИЗ
	|						ВременнаяТаблицаЗапасыОтбор КАК ТаблицаЗапасы
	|					ГДЕ
	|						ТаблицаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка))) КАК ЗапасыОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияДокументаЗапасы.Организация,
	|		ДвиженияДокументаЗапасы.СтруктурнаяЕдиница,
	|		ДвиженияДокументаЗапасы.СчетУчета,
	|		ДвиженияДокументаЗапасы.ЗаказПокупателя,
	|		ДвиженияДокументаЗапасы.Номенклатура,
	|		ДвиженияДокументаЗапасы.Характеристика,
	|		ДвиженияДокументаЗапасы.Партия,
	|		ВЫБОР
	|			КОГДА ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|			ИНАЧЕ -ЕСТЬNULL(ДвиженияДокументаЗапасы.Количество, 0)
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.Запасы КАК ДвиженияДокументаЗапасы
	|	ГДЕ
	|		ДвиженияДокументаЗапасы.Регистратор = &Ссылка
	|		И ДвиженияДокументаЗапасы.Период <= &Период
	|		И ДвиженияДокументаЗапасы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		И ДвиженияДокументаЗапасы.ЗаказПокупателя <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)) КАК ЗапасыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапасыОстатки.Организация,
	|	ЗапасыОстатки.СтруктурнаяЕдиница,
	|	ЗапасыОстатки.СчетУчета,
	|	ЗапасыОстатки.ЗаказПокупателя,
	|	ЗапасыОстатки.Номенклатура,
	|	ЗапасыОстатки.Характеристика,
	|	ЗапасыОстатки.Партия";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураДляПоиска = Новый Структура;
		Если НЕ ЗаказВШапке Тогда
			СтруктураДляПоиска.Вставить("ЗаказПокупателя", Выборка.ЗаказПокупателя);
		КонецЕсли;
		СтруктураДляПоиска.Вставить("Номенклатура", Выборка.Номенклатура);
		СтруктураДляПоиска.Вставить("Характеристика", Выборка.Характеристика);
		СтруктураДляПоиска.Вставить("Партия", Выборка.Партия);
		
		ВсегоОстаток = Выборка.КоличествоОстаток;
		МассивСтрокЗапасы = Запасы.НайтиСтроки(СтруктураДляПоиска);
		Для каждого СтрокаЗапасы Из МассивСтрокЗапасы Цикл
			
			ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток / СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			Если СтрокаЗапасы.Количество >= ВсегоОстаток Тогда
				СтрокаЗапасы.Резерв = ВсегоОстаток;
				ВсегоОстаток = 0;
			Иначе
				СтрокаЗапасы.Резерв = СтрокаЗапасы.Количество;
				ВсегоОстаток = ВсегоОстаток - СтрокаЗапасы.Количество;
				ВсегоОстаток = ?(ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения) = ТИП("СправочникСсылка.КлассификаторЕдиницИзмерения"), ВсегоОстаток, ВсегоОстаток * СтрокаЗапасы.ЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкуРезервПоРезервам()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПоЗаказуНаПроизводствоСборка(ДанныеЗаполнения)
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводство.Ссылка КАК ДокументОснование,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПолучатель,
	|	ЗаказНаПроизводство.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение) КАК ВидОперации,
	|	ЗаказНаПроизводство.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПроизводство.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводство.СтруктурнаяЕдиница.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ЗаказНаПроизводство.СтруктурнаяЕдиница.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ЗаказНаПроизводство.СтруктурнаяЕдиница.ЯчейкаИсточникаПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ЗаказНаПроизводство.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Резерв КАК Резерв,
	|		ЗаказПокупателя КАК ЗаказПокупателя,
	|		Партия КАК Партия
	|	) КАК Запасы
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запасы.Очистить();
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		
		ВыборкаЗапасы = ВыборкаИзРезультатаЗапроса.Запасы.Выбрать();
		Пока ВыборкаЗапасы.Следующий() Цикл
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоЗаказуНаПроизводствоРазборка(ДанныеЗаполнения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказНаПроизводство.Ссылка КАК ДокументОснование,
	|	ЗаказНаПроизводство.СтруктурнаяЕдиница КАК СтруктурнаяЕдиницаПолучатель,
	|	ЗаказНаПроизводство.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение) КАК ВидОперации,
	|	ЗаказНаПроизводство.ЗаказПокупателя КАК ЗаказПокупателя,
	|	ЗаказНаПроизводство.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ЗаказНаПроизводство.СтруктурнаяЕдиницаРезерв
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК СтруктурнаяЕдиница,
	|	ВЫБОР
	|		КОГДА ЗаказНаПроизводство.СтруктурнаяЕдиница.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ ЗаказНаПроизводство.СтруктурнаяЕдиница.ИсточникПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА ЗаказНаПроизводство.СтруктурнаяЕдиница.ЯчейкаИсточникаПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК Ячейка,
	|	ЗаказНаПроизводство.Продукция.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		Резерв КАК Резерв,
	|		ЗаказПокупателя КАК ЗаказПокупателя,
	|		Партия КАК Партия
	|	) КАК Продукция
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запасы.Очистить();
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		
		ВыборкаПродукция = ВыборкаИзРезультатаЗапроса.Продукция.Выбрать();
		Пока ВыборкаПродукция.Следующий() Цикл
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПродукция);
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоСборкеЗапасовСборка(ДанныеЗаполнения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СборкаЗапасов.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение) КАК ВидОперации,
	|	СборкаЗапасов.Организация КАК Организация,
	|	СборкаЗапасов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СборкаЗапасов.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	СборкаЗапасов.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиница,
	|	СборкаЗапасов.ЯчейкаПродукции КАК Ячейка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ПолучательПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПолучатель,
	|	ВЫБОР
	|		КОГДА СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ЯчейкаПолучателяПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаПолучатель,
	|	СборкаЗапасов.Продукция.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		ЗаказПокупателя КАК ЗаказПокупателя,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА СборкаЗапасов.Продукция.Ссылка.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ СборкаЗапасов.Продукция.Количество
	|		КОНЕЦ КАК Резерв,
	|		СерийныеНомера КАК СерийныеНомера,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК Продукция
	|ИЗ
	|	Документ.СборкаЗапасов КАК СборкаЗапасов
	|ГДЕ
	|	СборкаЗапасов.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запасы.Очистить();
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		
		ВыборкаПродукция = ВыборкаИзРезультатаЗапроса.Продукция.Выбрать();
		Пока ВыборкаПродукция.Следующий() Цикл
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПродукция);
		КонецЦикла;
		
		РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения, "Продукция", "СерийныеНомераПродукция");
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоСборкеЗапасовРазборка(ДанныеЗаполнения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СборкаЗапасов.Ссылка КАК ДокументОснование,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПеремещениеЗапасов.Перемещение) КАК ВидОперации,
	|	СборкаЗапасов.Организация КАК Организация,
	|	СборкаЗапасов.ЗаказПокупателя КАК ЗаказПокупателя,
	|	СборкаЗапасов.ПоложениеЗаказаПокупателя КАК ПоложениеЗаказаПокупателя,
	|	СборкаЗапасов.СтруктурнаяЕдиницаПродукции КАК СтруктурнаяЕдиница,
	|	СборкаЗапасов.ЯчейкаПродукции КАК Ячейка,
	|	ВЫБОР
	|		КОГДА СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ПолучательПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктурныеЕдиницы.ПустаяСсылка)
	|	КОНЕЦ КАК СтруктурнаяЕдиницаПолучатель,
	|	ВЫБОР
	|		КОГДА СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Склад)
	|				ИЛИ СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ПолучательПеремещения.ТипСтруктурнойЕдиницы = ЗНАЧЕНИЕ(Перечисление.ТипыСтруктурныхЕдиниц.Подразделение)
	|			ТОГДА СборкаЗапасов.СтруктурнаяЕдиницаПродукции.ЯчейкаПолучателяПеремещения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Ячейки.ПустаяСсылка)
	|	КОНЕЦ КАК ЯчейкаПолучатель,
	|	СборкаЗапасов.Запасы.(
	|		Номенклатура КАК Номенклатура,
	|		Характеристика КАК Характеристика,
	|		Партия КАК Партия,
	|		Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА СборкаЗапасов.Запасы.Ссылка.ЗаказПокупателя = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ТОГДА 0
	|			ИНАЧЕ СборкаЗапасов.Запасы.Количество
	|		КОНЕЦ КАК Резерв,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЗаказПокупателя КАК ЗаказПокупателя,
	|		СерийныеНомера КАК СерийныеНомера,
	|		КлючСвязи КАК КлючСвязи
	|	) КАК Запасы
	|ИЗ
	|	Документ.СборкаЗапасов КАК СборкаЗапасов
	|ГДЕ
	|	СборкаЗапасов.Ссылка = &ДокументОснование");
	
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	
	Запасы.Очистить();
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаИзРезультатаЗапроса);
		
		ВыборкаЗапасы = ВыборкаИзРезультатаЗапроса.Запасы.Выбрать();
		Пока ВыборкаЗапасы.Следующий() Цикл
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗапасы);
		КонецЦикла;
		
		РаботаССерийнымиНомерами.ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПодписиКладовщиков()
	
	Если ЗначениеЗаполнено(СтруктурнаяЕдиница) Тогда
		
		ПодписьКладовщикаОтправил = СтруктурнаяЕдиница.ПодписьМОЛ;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктурнаяЕдиницаПолучатель) Тогда
		
		ПодписьКладовщикаПолучил = СтруктурнаяЕдиницаПолучатель.ПодписьМОЛ;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаличиеРозничнойЦены(Отказ)
	
	Если СтруктурнаяЕдиницаПолучатель.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.Розница И
		СтруктурнаяЕдиницаПолучатель.ТипСтруктурнойЕдиницы <> Перечисления.ТипыСтруктурныхЕдиниц.РозницаСуммовойУчет Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("ТаблицаДокумента", Запасы);
	Запрос.УстановитьПараметр("РозничныйВидЦен", СтруктурнаяЕдиницаПолучатель.РозничныйВидЦен);
	Запрос.УстановитьПараметр("СписокНоменклатура", Запасы.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("СписокХарактеристика", Запасы.ВыгрузитьКолонку("Характеристика"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Характеристика КАК Характеристика,
	|	ТаблицаДокумента.Партия КАК Партия
	|ПОМЕСТИТЬ ПеремещениеЗапасовЗапасы
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПеремещениеЗапасовЗапасы.НомерСтроки КАК НомерСтроки,
	|	ПеремещениеЗапасовЗапасы.Номенклатура КАК Номенклатура,
	|	ПеремещениеЗапасовЗапасы.Характеристика КАК Характеристика,
	|	ПеремещениеЗапасовЗапасы.Партия КАК Партия
	|ПОМЕСТИТЬ ЗапасыСФильтром
	|ИЗ
	|	ПеремещениеЗапасовЗапасы КАК ПеремещениеЗапасовЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПеремещениеЗапасовЗапасы.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.ПодарочныйСертификат))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗапасыСФильтром.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ЗапасыСФильтром.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЗапасыСФильтром.Характеристика) КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ЗапасыСФильтром.Партия) КАК ПартияПредставление
	|ИЗ
	|	ЗапасыСФильтром КАК ЗапасыСФильтром
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				ВидЦен = &РозничныйВидЦен
	|					И Номенклатура В (&СписокНоменклатура)
	|					И Характеристика В (&СписокХарактеристика)) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ЗапасыСФильтром.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ЗапасыСФильтром.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|ГДЕ
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) = 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаРезультатаЗапроса = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаРезультатаЗапроса.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Для номенклатуры %ПредставлениеНоменклатуры% в строке %НомерСтроки% списка ""Запасы"" не установлена розничная цена!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(ВыборкаРезультатаЗапроса.НомерСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеНоменклатуры%",  УправлениеНебольшойФирмойСервер.ПредставлениеНоменклатуры(ВыборкаРезультатаЗапроса.НоменклатураПредставление, ВыборкаРезультатаЗапроса.ХарактеристикаПредставление, ВыборкаРезультатаЗапроса.ПартияПредставление));
		УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
		ЭтотОбъект,
		ТекстСообщения,
		"Запасы",
		ВыборкаРезультатаЗапроса.НомерСтроки,
		"Номенклатура",
		Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьНаличиеРозничнойЦены()

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли