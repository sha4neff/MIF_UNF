#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП.Тип;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДоступныеВидыПродукцииИС = ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыУпаковка");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;

	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ОтображатьКомандуТоварыПодготовитьПередатьСведенияОТоварах = Истина;
	Если Не ОбщегоНазначения.ЭтоWindowsКлиент()
		Или ОбщегоНазначения.ЭтоВебКлиент()
		Или ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОтображатьКомандуТоварыПодготовитьПередатьСведенияОТоварах = Ложь;
	КонецЕсли;
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоМаркировкаОстатков Тогда
		
		ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Товары""'");
		
		ЭтоШины                 = (Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Шины);
		ЭтоОбувь                = (Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Обувь);
		ЭтоЛегкаяПромышленность = (Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность);
		ЭтоФотоаппараты         = (Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Фотоаппараты);
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			Если СтрокаТовары.ПолноеОписаниеОстатков Тогда
				
				Если ЭтоФотоаппараты И Не ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
					
					ТекстСообщения = СтрШаблон(ШаблонСообщения, НСтр("ru = 'GTIN'"), СтрокаТовары.НомерСтроки);
					ОбщегоНазначения.СообщитьПользователю(
						ТекстСообщения,,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
							"Объект.Товары",
							СтрокаТовары.НомерСтроки,
							"GTIN"),,
						Отказ);
						
				КонецЕсли;
				
			Иначе
				
				Если ЭтоШины Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаТовары.Модель) Тогда
						ТекстСообщения = СтрШаблон(ШаблонСообщения, НСтр("ru = 'Модель'"), СтрокаТовары.НомерСтроки);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
								"Объект.Товары", СтрокаТовары.НомерСтроки, "Модель"),,
							Отказ);
					КонецЕсли;
					
				ИначеЕсли ЭтоОбувь Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаТовары.ЦелевойПол) Тогда
						ТекстСообщения = СтрШаблон(
							ШаблонСообщения,
							НСтр("ru = 'Целевой пол'"),
							СтрокаТовары.НомерСтроки);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
								"Объект.Товары", СтрокаТовары.НомерСтроки, "ЦелевойПол"),,
							Отказ);
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(СтрокаТовары.СпособВводаВОборот) Тогда
						ТекстСообщения = СтрШаблон(
							ШаблонСообщения,
							НСтр("ru = 'Способ ввода в оборот'"),
							СтрокаТовары.НомерСтроки);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,
							ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
								"Объект.Товары", СтрокаТовары.НомерСтроки, "СпособВводаВОборот"),,
							Отказ);
					КонецЕсли;
					
				ИначеЕсли ЭтоЛегкаяПромышленность Тогда
					
					КодТНВЭД = ИнтеграцияИСМПСлужебный.КодТНВЭДДляПередачиВИСМП(
						СтрокаТовары.КодТНВЭД,
						Объект.ВидПродукции);
					
					Если ЗначениеЗаполнено(КодТНВЭД) Тогда
						
						ИмяПоляПроверки   = "ЦелевойПол";
						ПредставлениеПоля = НСтр("ru = 'Целевой пол'");
						Если ИнтеграцияИСМПСлужебный.КодТНВЭДТребуетВозрастнуюКатегорию(КодТНВЭД) Тогда
							ИмяПоляПроверки   = "ВозрастнаяКатегория";
							ПредставлениеПоля = НСтр("ru = 'Возрастная категория'");
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(СтрокаТовары[ИмяПоляПроверки]) Тогда
							ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеПоля, СтрокаТовары.НомерСтроки);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,
								ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
									"Объект.Товары", СтрокаТовары.НомерСтроки, ИмяПоляПроверки),,
								Отказ);
						КонецЕсли;
						
						Если Не ЗначениеЗаполнено(СтрокаТовары.СпособВводаВОборот) Тогда
							ТекстСообщения = СтрШаблон(
								ШаблонСообщения,
								НСтр("ru = 'Способ ввода в оборот'"),
								СтрокаТовары.НомерСтроки);
							ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,
								ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
									"Объект.Товары", СтрокаТовары.НомерСтроки, "СпособВводаВОборот"),,
								Отказ);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	СобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, "ВидимостьПодключаемыхКоманд") Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
	Если ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		//Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВидПродукцииУказан() Или РедактированиеФормыНедоступно Или Не ПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(ЭтотОбъект, Источник, Событие, Данные);
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ОбновитьПредставленияНаФорме();
	
	РассчитатьЗависимыеПризнакиФормы();
	
	ЗаполнитьКоличествоЭмитированоВТоварах();
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	ЗаполнитьТаблицуПредставленийGTINОстатки();
	
	РазблокироватьДанныеФормыДляРедактирования();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	СобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Заказ на эмиссию кодов маркировки"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Заказ на эмиссию кодов маркировки"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

#Область ПроизводственныйОбъектАдрес

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	Объект.ПроизводственныйОбъектАдресСтрокой = ВыбранноеЗначение.Представление;
	КомментарийАдресаПроизводственногоОбъекта   = ВыбранноеЗначение.Комментарий;
	Объект.ПроизводственныйОбъектАдрес          = ВыбранноеЗначение.КонтактнаяИнформация;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.ПроизводственныйОбъектАдресСтрокой = "";
		КомментарийАдресаДоставки                   = "";
		Объект.ПроизводственныйОбъектАдрес          = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// реквизита ВидКонтактнойИнформацииАдресаДоставки.
	Объект.ПроизводственныйОбъектАдресСтрокой = Текст;
	Объект.ПроизводственныйОбъектАдрес = ЗначенияПолейКонтактнойИнформацииСервер(
		Текст, ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта, КомментарийАдресаДоставки);

КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> Объект.ПроизводственныйОбъектАдресСтрокой Тогда
		Объект.ПроизводственныйОбъектАдресСтрокой = Элемент.ТекстРедактирования;
		Объект.ПроизводственныйОбъектАдрес = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта);
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           Объект.ПроизводственныйОбъектАдрес);
	ПараметрыОткрытия.Вставить("Представление",           Объект.ПроизводственныйОбъектАдресСтрокой);
	ПараметрыОткрытия.Вставить("Комментарий",             КомментарийАдресаПроизводственногоОбъекта);
	
	// Переопределямый заголовок формы, по умолчанию отобразятся данные по ВидКонтактнойИнформации.
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Адрес доставки'"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	// Сбрасываем как представления, так и внутренние значения полей.
	Объект.ПроизводственныйОбъектАдресСтрокой = "";
	КомментарийАдресаПроизводственногоОбъекта   = "";
	Объект.ПроизводственныйОбъектАдрес          = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(ЭтотОбъект, ТекущиеДанные);
	
	ОбновитьДанныеФормыМаркировкаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокПриИзменении(Элемент)
	УстановитьОтборСтрок(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)

	ВидПродукцииПриИзмененииНаСервере(Ложь);
	
	ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыпускаВОборотПриИзменении(Элемент)
	
	ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
	
	Если Объект.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля") Тогда
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
	Иначе
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
	КонецЕсли;
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	Если ПредыдущийСпособВводаВОборот <> Объект.СпособВводаВОборот Тогда
		Если Не ЭтоМаркировкаОстатков
			И ПредыдущийСпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков") Тогда
			ОчиститьGTIN();
			Объект.БезУчетаНоменклатуры = Ложь;
		ИначеЕсли ЭтоМаркировкаОстатков
			И ПредыдущийСпособВводаВОборот <> ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков") Тогда
			ПроверитьОчиститьШаблонКодаМаркировки();
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущийСпособВводаВОборот = Объект.СпособВводаВОборот;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0
		И Объект.ВидПродукции <> ВыбранноеЗначение Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		РежимДиалога = РежимДиалогаВопрос.ДаНет;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			РежимДиалога = Новый СписокЗначений;
			РежимДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
			РежимДиалога.Добавить(Истина, НСтр("ru = 'Перезаполнить'"));
			РежимДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалога);
		
	ИначеЕсли ВыбранноеЗначение = Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ОчисткаGTINПриИзмененииНоменклатуры(ТекущиеДанные);
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ТекущиеДанные.GTIN = "";
	ТекущиеДанные.СпособФормированияСерийногоНомера = Неопределено;
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураХарактеристикаПриИзмененииСервер()
	
	ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	
	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ХарактеристикиИспользуются Тогда
		НоменклатураХарактеристикаУказана = (ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
			И ЗначениеЗаполнено(ДанныеСтроки.Характеристика));
	Иначе
		НоменклатураХарактеристикаУказана = ЗначениеЗаполнено(ДанныеСтроки.Номенклатура);
	КонецЕсли;
	
	ДополнительныеПоляПоиска = "";
	Если НоменклатураХарактеристикаУказана
		И ЗначениеЗаполнено(ДанныеСтроки.Шаблон) И ШаблонИспользуется() Тогда
		ДополнительныеПоляПоиска = "Шаблон";
	КонецЕсли;
	
	Если НоменклатураХарактеристикаУказана Тогда
		
		ВременнаяТаблица = Объект.Товары.Выгрузить(Новый Структура("НомерСтроки", ДанныеСтроки.НомерСтроки));
		ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамЗаказаНаЭмиссиюКодовМаркировкиСУЗ(
			ВременнаяТаблица, Объект, "СпособФормированияСерийногоНомера", ДополнительныеПоляПоиска);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВременнаяТаблица[0]);
		
		ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(ЭтотОбъект, ДанныеСтроки);
		Элементы.ТоварыGTIN.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийGTINДляВыбора(ТекущаяСтрока));
		РассчитатьЗависимыеПризнакиФормы();
		
	КонецЕсли;
	
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьДанныеФормыМаркировкаОстатковСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.СписокВыбора.ЗагрузитьЗначения(
		МассивЗначенийGTINДляВыбора(Элементы.Товары.ТекущаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦелевойПолПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.СписокВыбора.ЗагрузитьЗначения(
		МассивЗначенийGTINДляВыбора(Элементы.Товары.ТекущаяСтрока));

	Элементы.Товары.ТекущиеДанные.GTIN = "";
	
	ОбновитьСтатусыПриНеобходимости();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыМодельПриИзменении(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.Товары.ТекущиеДанные.GTIN = "";

	ОбновитьСтатусыПриНеобходимости();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыТоварныйЗнакПриИзменении(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.Товары.ТекущиеДанные.GTIN = "";

	ОбновитьСтатусыПриНеобходимости();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаименованиеПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.GTIN = "";
	
	ОбновитьСтатусыПриНеобходимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДПриИзменении(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.Товары.ТекущиеДанные.GTIN = "";

	ОбновитьСтатусыПриНеобходимости();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПолноеОписаниеОстатковПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если ТекущиеДанные.ПолноеОписаниеОстатков Тогда
		ТекущиеДанные.ЦелевойПол          = Неопределено;
		ТекущиеДанные.СпособВводаВОборот  = Неопределено;
		ТекущиеДанные.Модель              = Неопределено;
		ТекущиеДанные.ТоварныйЗнак        = Неопределено;
		ТекущиеДанные.ВозрастнаяКатегория = Неопределено;
		Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(ТекущиеДанные.GTIN) Тогда
			ТекущиеДанные.GTIN = "";
		КонецЕсли;
	Иначе
		Если Не ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(ТекущиеДанные.GTIN) Тогда
			ТекущиеДанные.GTIN = "";
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДанныеФормыМаркировкаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособВводаВОборотПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Товары.ТекущиеДанные.GTIN = "";
	
	ОбновитьСтатусыПриНеобходимости();
	
	ОбновитьДанныеФормыМаркировкаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозрастнаяКатегорияПриИзменении(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.Товары.ТекущиеДанные.GTIN = "";

	ОбновитьСтатусыПриНеобходимости();

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.КоличествоУпаковок = Цел(ТекущиеДанные.КоличествоУпаковок) Тогда
		ТекущиеДанные.КоличествоУпаковок = Цел(ТекущиеДанные.КоличествоУпаковок);
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособФормированияСерийногоНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СпособФормированияСерийногоНомера = ТекущиеДанные.СпособФормированияСерийногоНомера;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособФормированияСерийногоНомераПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если СпособФормированияСерийногоНомера = ТекущиеДанные.СпособФормированияСерийногоНомера Тогда
		Возврат;
	КонецЕсли;
	
	АвтоматическоеФормирование = ПредопределенноеЗначение(
		"Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически");
	Если ТекущиеДанные.СпособФормированияСерийногоНомера = АвтоматическоеФормирование Тогда
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
		НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросОбУдаленииСвязанныхСерийныхНомеровЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("ru = 'Все связанные серийные номера будут очищены. Продолжить?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
			
		КонецЕсли;
		
	Иначе
		
		ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораКодТНВЭД(Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонПриИзменении(Элемент)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	ТекущиеДанные.GTIN                              = "";
	ТекущиеДанные.СпособФормированияСерийногоНомера = Неопределено;
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер();
	ОпределитьФорматРедактированияСрокГодности();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСрокГодности Тогда
		ОпределитьФорматРедактированияСрокГодности();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ШаблонИспользуется()
	
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи")
		Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты") Тогда
		
		Возврат Не ЭтоМаркировкаОстатков;
		
	ИначеЕсли Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак")
		Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДоступныеGTIN(Команда)
	
	ОчиститьСообщения();
	
	ЗаполнитьДоступныеGTINНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПередатьСведенияОТоварах(Команда)

	Товары = Новый Массив;
	Для Каждого СтрокаТовары Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Новый Структура("Номенклатура, Характеристика, GTIN, КодТНВЭД");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Объект.Товары.НайтиПоИдентификатору(СтрокаТовары));
		Товары.Добавить(ДанныеСтроки);
	КонецЦикла;

	ОткрытьФорму("Обработка.ПодготовкаСведенийВКаталогGS46.Форма.Форма", 
		Новый Структура("Товары, Организация", Товары, Объект.Организация), ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	СобытияФормИСМПКлиент.ОтрытьФормуПечатиКодовМаркировок(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВиртуальнаяАгрегация(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Документ", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ВидПродукции", Объект.ВидПродукции);
	
	ОткрытьФорму(
		"Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма",
		ПараметрыОткрытия,
		ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	
	СобытияФормИСМПКлиентПереопределяемый.ВыгрузитьДанныеВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Если Не ВидПродукцииУказан() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОписанияОстатков(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	ОповещениеЗакрытияФормыЗаполненияОстатков = Новый ОписаниеОповещения(
		"Подключаемый_ЗаполнениеПараметровОстатковЗавершение", ЭтотОбъект, ВыделенныеСтроки);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ВидПродукции", Объект.ВидПродукции);
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
		ПараметрыОткрытия.Вставить("Наименование", Строка(ДанныеСтроки.Номенклатура));
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаЗаполненияТовары",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОповещениеЗакрытияФормыЗаполненияОстатков);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерийныеНомера(Команда)
	ОткрытьФормуВыбораСерий();
КонецПроцедуры

&НаКлиенте
Процедура СброситьПризнакПечати(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Сбросить признак печати для всех кодов маркировки по заказу?'");
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросСбросаПризнакаПечатиПриЗавершении", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
	ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	// Реквизит формы, контролирующий работу с адресом доставки.
	// Используемые поля аналогичны полям справочника ВидыКонтактнойИнформации.
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта = Новый Структура;
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("АдресТолькоРоссийский",        Истина);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("СкрыватьНеактуальныеАдреса",   Ложь);
	
	// Считываем данные из полей адреса в реквизиты для редактирования.
	Объект.ПроизводственныйОбъектАдресСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		Объект.ПроизводственныйОбъектАдрес);
	КомментарийАдресаПроизводственногоОбъекта = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(
		Объект.ПроизводственныйОбъектАдрес);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ВидПродукцииУказан()
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид продукции'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючСвязиСтатусаСтрок(ВидПродукции = Неопределено, Номенклатура = Неопределено)
	
	МассивКлючейСвязи = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		МассивКлючейСвязи.Добавить("GTIN");
	КонецЕсли;
	
	Возврат СтрСоединить(МассивКлючейСвязи, ", ");
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция МассивЗначенийGTINДляВыбора(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ВключатьGTINНаОстатки = ЭтоМаркировкаОстатков;
	Иначе
		ВключатьGTINНаОстатки = ЭтоМаркировкаОстатков И Не ТекущиеДанные.ПолноеОписаниеОстатков;
	КонецЕсли;
	
	Возврат ИнтеграцияИСМП.МассивЗначенийGTINДляВыбора(ТекущиеДанные, Объект, ВключатьGTINНаОстатки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКоличествоЭмитированоВТоварах()
	
	Если Не ОтобразитьКоличествоЭмитировано Тогда
		Возврат;
	КонецЕсли;
	
	НачалоGTIN           = ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков();
	ПустаяНоменклатура   = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	ПустаяХарактеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Запрос = Новый Запрос;
	Запрос.Текст ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ПулКодовМаркировкиСУЗ.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяНоменклатура
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.Номенклатура
		|	КОНЕЦ                                     КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ПулКодовМаркировкиСУЗ.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяХарактеристика
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.Характеристика
		|	КОНЕЦ                                     КАК Характеристика,
		|	ПулКодовМаркировкиСУЗ.Шаблон              КАК Шаблон,
		|	ПулКодовМаркировкиСУЗ.GTIN                КАК GTIN,
		|	СУММА(1)                                  КАК Количество,
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот        КАК СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.СрокГодности              КАК СрокГодности,
		|	ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
		|			ПО ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = Шапка.Ссылка
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ПулКодовМаркировкиСУЗ.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяНоменклатура
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ПулКодовМаркировкиСУЗ.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяХарактеристика
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.Характеристика
		|	КОНЕЦ,
		|	ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена,
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.СрокГодности,
		|	ПулКодовМаркировкиСУЗ.Шаблон,
		|	ПулКодовМаркировкиСУЗ.GTIN";
	
	Запрос.УстановитьПараметр("Ссылка",               Объект.Ссылка);
	Запрос.УстановитьПараметр("НачалоGTIN",           НачалоGTIN);
	Запрос.УстановитьПараметр("ПустаяНоменклатура",   ПустаяНоменклатура);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ПустаяХарактеристика);
	
	ЭмитированныеКоды = Запрос.Выполнить().Выгрузить();
	ЭмитированныеКоды.Индексы.Добавить("Номенклатура, Характеристика, Шаблон, GTIN");
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		СтрокаТовары.КоличествоЭмитировано = 0;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Шаблон",                    СтрокаТовары.Шаблон);
		СтруктураПоиска.Вставить("GTIN",                      СтрокаТовары.GTIN);
		СтруктураПоиска.Вставить("МаксимальнаяРозничнаяЦена", СтрокаТовары.МаксимальнаяРозничнаяЦена);
		СтруктураПоиска.Вставить("СпособВводаВОборот",        СтрокаТовары.СпособВводаВОборот);
		СтруктураПоиска.Вставить("СрокГодности",              СтрокаТовары.СрокГодности);
		
		Если Объект.БезУчетаНоменклатуры И СтрНачинаетсяС(СтрокаТовары.GTIN, НачалоGTIN) Тогда
			СтруктураПоиска.Вставить("Номенклатура",   ПустаяНоменклатура);
			СтруктураПоиска.Вставить("Характеристика", ПустаяХарактеристика);
		Иначе
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТовары.Характеристика);
		КонецЕсли;
		
		ПоискСтрок = ЭмитированныеКоды.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаЭмитировано Из ПоискСтрок Цикл
			
			Если СтрокаТовары.Количество = СтрокаТовары.КоличествоЭмитировано Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаЭмитировано.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЭмитировано.Количество < СтрокаТовары.Количество Тогда
				КоличествоПоСтроке = СтрокаЭмитировано.Количество;
			Иначе
				КоличествоПоСтроке = СтрокаТовары.Количество;
			КонецЕсли;
			
			СтрокаТовары.КоличествоЭмитировано = КоличествоПоСтроке;
			СтрокаЭмитировано.Количество       = СтрокаЭмитировано.Количество - КоличествоПоСтроке;
			
		КонецЦикла;
		
		СтрокаТовары.ЕстьОтличия = СтрокаТовары.КоличествоЭмитировано < СтрокаТовары.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыНаСервере()
	
	ДоступностьТрансграничнойТорговли = ИнтеграцияИСМПКлиентСервер.ДоступностьТрансграничнойТорговлиПоВидуПродукции(
		Объект.ВидПродукции);
	
	ДоступностьСпособаВвода = Новый Соответствие();
	ДоступностьСпособаВвода.Вставить(
		Перечисления.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля,
		ДоступностьТрансграничнойТорговли);
	ДоступностьСпособаВвода.Вставить(
		Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков,
		ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(Объект.ВидПродукции));
	
	Элементы.СброситьПризнакПечати.Видимость = ИнтеграцияИСМП.РазрешенаПовторнаяПечатьКодовМаркировки();
	
	Для Каждого КлючИЗначение Из ДоступностьСпособаВвода Цикл
		
		ЭлементВСпискеЗначений = Элементы.СпособВыпускаВОборот.СписокВыбора.НайтиПоЗначению(КлючИЗначение.Ключ);
		Если КлючИЗначение.Значение И ЭлементВСпискеЗначений = Неопределено Тогда
			Элементы.СпособВыпускаВОборот.СписокВыбора.Добавить(КлючИЗначение.Ключ);
		ИначеЕсли Не КлючИЗначение.Значение И ЭлементВСпискеЗначений <> Неопределено Тогда
			Элементы.СпособВыпускаВОборот.СписокВыбора.Удалить(ЭлементВСпискеЗначений);
			Если Элементы.СпособВыпускаВОборот.СписокВыбора.НайтиПоЗначению(Объект.СпособВводаВОборот) = Неопределено Тогда
				Объект.СпособВводаВОборот = Неопределено;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	ДатаОбязательнойМаркировки = ИнтеграцияИСМПКлиентСерверПовтИсп.ДатаОбязательнойМаркировкиПродукции(Объект.ВидПродукции);
	РеквизитыМетаданного       = Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Реквизиты;
	
	Элементы.ВвезенПослеДатыОбязательнойМаркировки.Заголовок = СтрШаблон(
		"%1 %2",
		РеквизитыМетаданного.ВвезенПослеДатыОбязательнойМаркировки.Синоним,
		Формат(ДатаОбязательнойМаркировки, "ДФ=dd.MM.yyyy;"));
		
	Элементы.ПриобретенПроизведенПослеДатыОбязательнойМаркировки.Заголовок = СтрШаблон(
		"%1 %2",
		РеквизитыМетаданного.ПриобретенПроизведенПослеДатыОбязательнойМаркировки.Синоним,
		Формат(ДатаОбязательнойМаркировки, "ДФ=dd.MM.yyyy;"));
	
	Элементы.БезУчетаНоменклатуры.Подсказка = НСтр(
		"ru = 'При упрощенном описании остатков (GTIN ""029..."") позволяет не указывать товарные позиции для заказа кодов маркировки.'");
	
	Элементы.ТоварыПолноеОписаниеОстатков.Формат               = НСтр("ru = 'БЛ=Упрощенное; БИ=Полное;'");
	Элементы.ТоварыПолноеОписаниеОстатков.ФорматРедактирования = Элементы.ТоварыПолноеОписаниеОстатков.Формат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормыМаркировкаОстатков()
	
	Если Не ЭтоМаркировкаОстатков Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеФормыМаркировкаОстатковСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыПриНеобходимости()
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗависимыеПризнакиФормы()
	
	СтатусПозволяетОтображатьЭмитировано = Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично
		Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
	
	ОтобразитьКоличествоЭмитировано = Не Объект.Ссылка.Пустая() И СтатусПозволяетОтображатьЭмитировано 
		И ВПулеЕстьКодыМаркировки(Объект.Ссылка);
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.ПолноеОписаниеОстатков = ЗначениеЗаполнено(СтрокаТовары.GTIN)
			И Не ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаТовары.GTIN);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВПулеЕстьКодыМаркировки(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &ЗаказНаЭмиссию";
	
	Запрос.УстановитьПараметр("ЗаказНаЭмиссию", Документ);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)

	Если Форма.ОтборСтрок = "НеПолучено" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ЕстьОтличия", Истина);
		Форма.Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Форма.Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчисткаGTINПриИзмененииНоменклатуры(ТекущиеДанные)
	
	Если Объект.БезУчетаНоменклатуры
		И ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(ТекущиеДанные.GTIN) Тогда
			Возврат;
	КонецЕсли;
	
	ТекущиеДанные.GTIN = "";
	ТекущиеДанные.СпособФормированияСерийногоНомера = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	ОтборСтрок      = "Все";
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ);
	ПредыдущийСпособВводаВОборот = Объект.СпособВводаВОборот;
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ОбновитьПредставленияНаФорме();
	
	НастроитьЭлементыФормыНаСервере();
	
	РассчитатьЗависимыеПризнакиФормы();
	
	ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
	
	ЗаполнитьТаблицуПредставленийGTINОстатки();
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	ЗаполнитьКоличествоЭмитированоВТоварах();
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если Не ПодключенаОбработкаКодовМаркировки Тогда
		СобытияФормИСМП.ПодключитьОбработкуКодовМаркировки(ЭтотОбъект, Ложь, КлючСвязиСтатусаСтрок(Объект.ВидПродукции));
		ПодключенаОбработкаКодовМаркировки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, ПараметрыЗаполнения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, ПараметрыЗаполнения)
	
	СобытияФормИСМППереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения);
	
	ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамЗаказаНаЭмиссиюКодовМаркировкиСУЗ(
		Объект.Товары, Объект, "СпособФормированияСерийногоНомера");
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	РассчитатьЗависимыеПризнакиФормы();
	
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
	
	ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормыМаркировкаОстатковСервер()
	
	ОбновитьСтатусИСМП();
	ЗаполнитьТаблицуПредставленийGTINОстатки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПредставленийGTINОстатки()
	
	Если ЭтоМаркировкаОстатков Тогда
		РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
			Объект.Товары, Объект.Организация, Объект.ВидПродукции);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	МенеджерОбъекта = ИнтеграцияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	Статус          = МенеджерОбъекта.СтатусПоУмолчанию();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбъектРасчета", Объект);
	
	ДопустимыеДействия = МенеджерОбъекта.ДопустимыеДействия(Объект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		Запрос.УстановитьПараметр(
			"МассивДальнейшиеДействия", ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Статус = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			
			ДальнейшиеДействияРегистр = Новый Массив;
			ДальнейшиеДействияРегистр.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшиеДействияРегистр.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшиеДействияРегистр.Добавить(Выборка.ДальнейшееДействие3);
			
			Для Каждого ДальнейшееДействиеРегиср Из ДальнейшиеДействияРегистр Цикл
				
				ДобавляемоеДействие = ДальнейшееДействиеРегиср;
				Если ДопустимыеДействия.Найти(ДобавляемоеДействие) = Неопределено Тогда
					Если ДобавляемоеДействие =
						Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки Тогда
						ДобавляемоеДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки;
					ИначеЕсли ДобавляемоеДействие =
						Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки Тогда
						ДобавляемоеДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки;
					КонецЕсли;
				КонецЕсли;
				
				Если ДальнейшееДействие.Найти(ДобавляемоеДействие) = Неопределено Тогда
					ДальнейшееДействие.Добавить(ДобавляемоеДействие);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	
	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(
		Статус,
		ДальнейшееДействие,
		ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = (Статус <> Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Черновик
		И Статус <> Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПGTINНаОстаткиПолучены
		И МенеджерОбъекта.СтатусыОшибок().Найти(Статус) = Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	// Реквизиты упрощенного описания остатков
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦелевойПол.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыМодель.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТоварныйЗнак.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСпособВводаВОборот.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВозрастнаяКатегория.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНаименование.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Упрощенное описание остатков табачной продукции
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТоварныйЗнак.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ВидПродукции.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	ВидыПродукцииТабак = Новый СписокЗначений();
	ВидыПродукцииТабак.Добавить(Перечисления.ВидыПродукцииИС.Табак);
	ОтборЭлемента.ПравоеЗначение = ВидыПродукцииТабак;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТоварныйЗнак.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Отсутствует>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Одежда ТНВЭД НЕ 63
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВозрастнаяКатегория.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТНВЭД.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = "63";
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Одежда ТНВЭД 63
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦелевойПол.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТНВЭД.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = "63";
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Молочная продукция, Срок годности
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеВСписке;

	СписокШаблонов = Новый СписокЗначений;
	СписокШаблонов.Добавить(Перечисления.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукция);
	СписокШаблонов.Добавить(Перечисления.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукция);
	ОтборЭлемента.ПравоеЗначение = СписокШаблонов;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Молочная продукция без указания сроков годности
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезУказанияСроковГодности;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Молочная продукция, Формат: ДФ=dd.MM.yyyy
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукция;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy;");

	// Молочная продукция скоропортящаяся, Формат: ДФ=dd.MM.yyyy
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукция;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM.yyyy HH:mm';");

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<запросите GTIN на остатки или выберите существующий>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите существующий GTIN>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.БезУчетаНоменклатуры.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.ПредставлениеGTINОстатки"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ВидПродукции.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = ВидыПродукцииТабак;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.БезУчетаНоменклатуры.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#Область ПредставлениеШаблонаКодаМаркировки
	
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ПредставленияШаблоновКодаМаркировки();
	Для Каждого ЭлементСписка Из ДоступныеШаблоны Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.Имя);
		
		ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
		ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = ЭлементСписка.Значение;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементСписка.Представление);
		
	КонецЦикла;
	
	#КонецОбласти
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНаименование.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНаименование.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНаименование.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		РассчитатьЗависимыеПризнакиФормы();
		ЗаполнитьКоличествоЭмитированоВТоварах();
		ОбновитьСтатусИСМП();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьДоступностьЭлементовФормы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ЭтоМаркировкаОстатков = Объект.СпособВводаВОборот
		= ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков");
	
	ЭтоЛегкаяПромышленность = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность");
	ЭтоМолочнаяПродукция    = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция");
	ЭтоОбувь                = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	ЭтоТабак                = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	ЭтоАльтернативныйТабак  = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
	ЭтоШины                 = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
	ЭтоТабачнаяПродукция    = (ЭтоТабак Или ЭтоАльтернативныйТабак);

	ЭтоТрансграничнаяТорговля = (Объект.СпособВводаВОборот = ПредопределенноеЗначение(
		"Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля"));
	
	Элементы.ТоварыМаксимальнаяРозничнаяЦена.Видимость = ЭтоТабак;
	Элементы.ГруппаМОТП.Видимость                      = (ЭтоТабачнаяПродукция И Не Форма.ЭтоМаркировкаОстатков);
	
	ВидПродукцииПодлежитМаркировкеОстатков = ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(Объект.ВидПродукции);
	
	Элементы.ТоварыПодготовитьПередатьСведенияОТоварах.Видимость           = ЭтоОбувь И Форма.ОтображатьКомандуТоварыПодготовитьПередатьСведенияОТоварах;
	Элементы.ТоварыКодТНВЭД.Видимость                                      = Форма.ЭтоМаркировкаОстатков;
	Элементы.ЗаполнитьПараметрыОписанияОстатков.Видимость                  = ВидПродукцииПодлежитМаркировкеОстатков И Форма.ЭтоМаркировкаОстатков;
	Элементы.БезУчетаНоменклатуры.Видимость                                = ВидПродукцииПодлежитМаркировкеОстатков И Форма.ЭтоМаркировкаОстатков И Не ЭтоАльтернативныйТабак;
	Элементы.ВвезенПослеДатыОбязательнойМаркировки.Видимость               = ВидПродукцииПодлежитМаркировкеОстатков И Форма.ЭтоМаркировкаОстатков И Не ЭтоТабачнаяПродукция;
	Элементы.ПриобретенПроизведенПослеДатыОбязательнойМаркировки.Видимость = ВидПродукцииПодлежитМаркировкеОстатков И Форма.ЭтоМаркировкаОстатков И Не ЭтоТабачнаяПродукция;
	Элементы.ТоварыПолноеОписаниеОстатков.Видимость                        = ВидПродукцииПодлежитМаркировкеОстатков И Форма.ЭтоМаркировкаОстатков И Не ЭтоТабак;
	Элементы.ТоварыНаименование.Видимость                                  = Форма.ЭтоМаркировкаОстатков И ЭтоТабачнаяПродукция;
	
	Если Форма.ЭтоМаркировкаОстатков Тогда
		Элементы.ТоварыЦелевойПол.Видимость          = ЭтоОбувь Или ЭтоЛегкаяПромышленность;
		Элементы.ТоварыСпособВводаВОборот.Видимость  = ЭтоОбувь Или ЭтоЛегкаяПромышленность;
		Элементы.ТоварыМодель.Видимость              = ЭтоШины;
		Элементы.ТоварыВозрастнаяКатегория.Видимость = ЭтоЛегкаяПромышленность;
		Элементы.ТоварыТоварныйЗнак.Видимость        = Не ЭтоОбувь;
	Иначе
		Элементы.ТоварыЦелевойПол.Видимость          = Ложь;
		Элементы.ТоварыСпособВводаВОборот.Видимость  = Ложь;
		Элементы.ТоварыТоварныйЗнак.Видимость        = ЭтоТабачнаяПродукция;
		Элементы.ТоварыМодель.Видимость              = Ложь;
		Элементы.ТоварыВозрастнаяКатегория.Видимость = Ложь;
	КонецЕсли;
	
	Если ЭтоМолочнаяПродукция Тогда
		Элементы.ТоварыШаблон.Заголовок = НСтр("ru = 'Шаблон КМ'");
	Иначе
		Элементы.ТоварыШаблон.Заголовок = НСтр("ru = 'Вид упаковки'");
	КонецЕсли;
	
	Элементы.ТоварыШаблон.СписокВыбора.Очистить();
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции);
	Для Каждого ЭлементСпискаЗначений Из ДоступныеШаблоны Цикл
		Элементы.ТоварыШаблон.СписокВыбора.Добавить(
			ЭлементСпискаЗначений.Значение, ЭлементСпискаЗначений.Представление);
	КонецЦикла;
	
	Элементы.ТоварыШаблон.Видимость       = Элементы.ТоварыШаблон.СписокВыбора.Количество() > 1;
	Элементы.ТоварыСрокГодности.Видимость = ЭтоМолочнаяПродукция;
	
	ЗависимыеОтСтатусаОбработкиЗаказа = Новый Массив;
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ГруппаШапка");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("Товары");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыКоманднаяПанельЕще");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыГруппаПодменюЗаполнить");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыГруппаТорговоеОборудование");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыУказатьСерийныеНомера");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ГруппаДоговор");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("Ответственный");
	
	ИнтеграцияИСКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма,
		ЗависимыеОтСтатусаОбработкиЗаказа, Не Форма.РедактированиеФормыНеДоступно);
	
	Элементы.ТоварыКоличествоЭмитировано.Видимость = Форма.ОтобразитьКоличествоЭмитировано;
	Элементы.ОтборСтрок.Видимость                  = Форма.ОтобразитьКоличествоЭмитировано;
	Элементы.Контрагент.Видимость                  = ЭтоТрансграничнаяТорговля;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВидимостьПодключаемыхКоманд") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ТекстОшибки = "";
	ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ДанныеШтрихкода);
	ОбработатьШтрихкоды(ДанныеШтрихкода, КэшированныеЗначения, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		
		ПараметрыОткрытия = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		
		Если ТипЗнч(ТекстОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытия.ТекстОшибкиФорматированнаяСтрока = ТекстОшибки;
		Иначе
			ПараметрыОткрытия.ТекстОшибки = ТекстОшибки;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытия);
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеДляОбработкиШтрихкодов.НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеСопоставленияНеизвестныхШтрихкодов", ЭтотОбъект);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ДанныеДляОбработкиШтрихкодов.НеизвестныеШтрихкоды, ЭтотОбъект, ОповещениеОЗакрытии);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСопоставленияНеизвестныхШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
		ОбработатьШтрихкоды(Результат.ЗарегистрированныеШтрихкоды[0], КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДопустимыйФорматШтрихкода(ДанныеШтрихкодов)
	
	Если Не ДанныеШтрихкодов.Свойство("ФорматBase64") Или Не ДанныеШтрихкодов.ФорматBase64 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкодов);
	Если НайтиНедопустимыеСимволыXML(ДанныеШтрихкодов.Штрихкод) > 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, КэшированныеЗначения, ТекстОшибки = "")
	
	Если Не ДопустимыйФорматШтрихкода(ДанныеШтрихкодов) Тогда
		ТекстОшибки = НСтр("ru = 'Недопустимый формат штрихкода'");
		Возврат;
	КонецЕсли;
	
	ВидыПродукции = Новый Массив;
	ВидыПродукции.Добавить(Объект.ВидПродукции);
	
	ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(ВидыПродукции);
	Если ЭтоМаркировкаОстатков Тогда
		ПараметрыЗаполнения.ЗаполнитьGTIN = Ложь;
	КонецЕсли;
	
	ДанныеДляОбработкиШтрихкодов = Неопределено;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Структура") Тогда
		ДанныеПоШтрихкодам = Новый Массив;
		ДанныеПоШтрихкодам.Добавить(ДанныеШтрихкодов);
	Иначе
		ДанныеПоШтрихкодам = ДанныеШтрихкодов;
	КонецЕсли;
	
	ШтрихкодированиеИСПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
		ЭтотОбъект, ДанныеПоШтрихкодам, ПараметрыЗаполнения, ДанныеДляОбработкиШтрихкодов);
	
	ШтрихкодированиеИСПереопределяемый.ОбработатьШтрихкоды(ЭтотОбъект, ДанныеДляОбработкиШтрихкодов, КэшированныеЗначения);
	
	ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
	
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, НовыйВидПродукции) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да
		Или РезультатВопроса = Истина Тогда
		
		Объект.ВидПродукции = НовыйВидПродукции;
		Объект.Товары.Очистить();
		ВидПродукцииПриИзмененииНаСервере(РезультатВопроса = Истина);
		ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
		
		ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
		СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидПродукцииПриИзмененииНаСервере(ПерезаполнитьПоОснованию)
	
	Если ПерезаполнитьПоОснованию И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПерезаполнитьПоОснованиюСервер();
	КонецЕсли;
	НастроитьЭлементыФормыНаСервере();
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции) Тогда
		Объект.ВвезенПослеДатыОбязательнойМаркировки               = Ложь;
		Объект.ПриобретенПроизведенПослеДатыОбязательнойМаркировки = Ложь;
		Если Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.АльтернативныйТабак Тогда
			Объект.БезУчетаНоменклатуры = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не (ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСерий()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.СпособФормированияСерийногоНомера <> ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
	
	СерийныеНомера = Новый Массив;
	Для Каждого Строка Из НайденныеСтроки Цикл
		СерийныеНомера.Добавить(Строка.СерийныйНомер);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СерийныеНомера",             СерийныеНомера);
	ПараметрыОткрытия.Вставить("Номенклатура",               ТекущиеДанные.Номенклатура);
	ПараметрыОткрытия.Вставить("Характеристика",             ТекущиеДанные.Характеристика);
	ПараметрыОткрытия.Вставить("ТребуемоеКоличествоНомеров", ТекущиеДанные.Количество);
	ПараметрыОткрытия.Вставить("ВидПродукции",               Объект.ВидПродукции);
	
	ОткрытьФорму("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаВыбораСерий", 
		ПараметрыОткрытия, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ФормаВыбораСерийЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбУдаленииСвязанныхСерийныхНомеровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ТекущиеДанные.СпособФормированияСерийногоНомера = СпособФормированияСерийногоНомера;
	Иначе
		ОчиститьСерийныеНомераПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки);
		ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыбораСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ОчиститьСерийныеНомераПоИдентификатору(ТекущиеДанные.ИдентификаторСтроки);
	
	Для Каждого Элемент Из Результат Цикл
		
		НоваяСтрокаСерии = Объект.СерийныеНомера.Добавить();
		НоваяСтрокаСерии.СерийныйНомер       = Элемент;
		НоваяСтрокаСерии.ИдентификаторСтроки = ТекущиеДанные.ИдентификаторСтроки;
		
	КонецЦикла;
	
	ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусУказанияСерийныхНомеров(Форма)
	
	Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		
		ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(Форма, СтрокаТовары);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(Форма, СтрокаТовары)
	
	Если Не ЗначениеЗаполнено(СтрокаТовары.СпособФормированияСерийногоНомера) Тогда
		СтрокаТовары.СпособФормированияСерийногоНомера = ПредопределенноеЗначение(
			"Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически")
	КонецЕсли;
	
	Если СтрокаТовары.СпособФормированияСерийногоНомера = ПредопределенноеЗначение(
		"Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически") Тогда
		СтрокаТовары.СтатусУказанияСерии = 2;
		Возврат
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
	НайденныеСтроки = Форма.Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = СтрокаТовары.Количество Тогда
		СтрокаТовары.СтатусУказанияСерии = 2;
	Иначе
		СтрокаТовары.СтатусУказанияСерии = 1;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСерийныеНомераПоИдентификатору(ИдентификаторСтроки)
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДляУдаления Из НайденныеСтроки Цикл
		
		Объект.СерийныеНомера.Удалить(СтрокаДляУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Ложь)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСбросаПризнакаПечатиПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СброситьПризнакПечатиКодовПоЗаказу(Объект.Ссылка);
		
	КонецЕсли;
	
	ТекстОповещения = СтрШаблон(НСтр("ru = 'Признак печати по заказу %1 снят.'"), Объект.Ссылка);
	ТекстЗаголовка  = НСтр("ru = 'Снятие признака печати.'");
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СброситьПризнакПечатиКодовПоЗаказу(Документ)
	РегистрыСведений.ПулКодовМаркировкиСУЗ.СброситьПризнакПечатиПоЗаказу(Документ);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьКодыМаркировки" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьGTINНаОстатки" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);

		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Тогда
		СобытияФормИСМПКлиентСервер.УправлениеДоступностьюЭлементовФормы(Форма);
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
	Элементы.ТоварыКоличествоУпаковок.ФорматРедактирования = "ЧДЦ=0;";
	Элементы.ТоварыКоличествоУпаковок.Формат = "ЧДЦ=0;";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступныеGTINНаКлиенте(ВызовПослеАвторизации = Ложь) Экспорт
	
	ТребуетсяОбновитьКлючСессии = ЗаполнитьДоступныеGTINНаСервере();
	
	Если ТребуетсяОбновитьКлючСессии = Истина Тогда
		Если ВызовПослеАвторизации Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось выполнить авторизацию.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Иначе
			ЗапроситьКлючСессииНачало();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииНачало()
	
	ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения("ЗапроситьКлючСессииЗавершение", ЭтотОбъект);
	
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции) Тогда
		ПараметрыЗапроса = ИнтерфейсМОТПКлиентСервер.ПараметрыЗапросаКлючаСессии(Объект.Организация);
	Иначе
		ПараметрыЗапроса = ИнтерфейсИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Объект.Организация);
	КонецЕсли;
	
	ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
		ПараметрыЗапроса, 
		ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		РезультатАвторизации = Результат[Объект.Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтказОтАвторизации Тогда
		Возврат;
	ИначеЕсли ОшибкаАвторизации Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	Иначе
		ЗаполнитьДоступныеGTINНаКлиенте(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДоступныеGTINНаСервере()
	
	СтруктураОтбораПустойGTIN = Новый Структура("GTIN", "");
	ТаблицаПроверки = Объект.Товары.Выгрузить(СтруктураОтбораПустойGTIN, "Номенклатура,Характеристика");
	Если ТаблицаПроверки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТаблицаПроверки.Свернуть("Номенклатура,Характеристика");
	ТаблицаПроверки.Индексы.Добавить("Номенклатура,Характеристика");

	ПроверяемыеGTIN = Новый Массив;
	СоответствиеGTIN = Новый Соответствие;
	
	ШтрихкодированиеИСМППереопределяемый.ЗаполнитьПроверяемыеGTIN(ТаблицаПроверки, ПроверяемыеGTIN, СоответствиеGTIN);
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.GTIN)
			И ЗначениеЗаполнено(СтрокаТовары.Номенклатура)
			И Не ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаТовары.GTIN) Тогда
				
			Если ПроверяемыеGTIN.Найти(СтрокаТовары.GTIN) = Неопределено Тогда
				ПроверяемыеGTIN.Добавить(СтрокаТовары.GTIN);
				СоответствиеGTIN.Вставить(СтрокаТовары.GTIN,
					Новый Структура(
						"Номенклатура,Характеристика", СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПроверкиПолная = Объект.Товары.Выгрузить(СтруктураОтбораПустойGTIN,"Номенклатура,Характеристика,Шаблон");
	ТаблицаПроверкиПолная.Свернуть("Номенклатура,Характеристика,Шаблон");
	ТаблицаПроверкиПолная.Индексы.Добавить("Номенклатура,Характеристика,Шаблон");
	
	ТаблицаПроверкиПолная.Колонки.Добавить("ЕстьGTIN",    Новый ОписаниеТипов("Булево"));
	ТаблицаПроверкиПолная.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	ТаблицаПроверкиПолная.Колонки.Добавить("ДоступныеGTIN");
	ТаблицаПроверкиПолная.Индексы.Добавить("Номенклатура,Характеристика,ВидУпаковки");
	
	
	Для Каждого СтрокаТаблицы Из ТаблицаПроверкиПолная Цикл
		СтрокаТаблицы.ВидУпаковки = ИнтеграцияИСМПСлужебныйКлиентСервер.ВидУпаковкиПоШаблонуКодаМаркировки(
			СтрокаТаблицы.Шаблон);
	КонецЦикла;
	
	Если ПроверяемыеGTIN.Количество() > 0 Тогда
		
		Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции) Тогда
			РезультатПроверки = ИнтерфейсМОТП.ДанныеПродукцииПоШтрихкодуEAN(ПроверяемыеGTIN, Объект.ВидПродукции);
		Иначе
			РезультатПроверки = ИнтерфейсИСМП.ДанныеПродукцииПоШтрихкодуEAN(ПроверяемыеGTIN, Объект.ВидПродукции);
		КонецЕсли;
		
		Если РезультатПроверки.ТребуетсяОбновлениеКлючаСессии Тогда
			Возврат Истина;
		ИначеЕсли РезультатПроверки.ДанныеПродукцииПоШтрихкодуEAN = Неопределено Тогда
			ОбщегоНазначения.СообщитьПользователю(РезультатПроверки.ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ДанныеПоШтрихкодам = ШтрихкодированиеИС.ДанныеПоШтрихкодамEAN(ПроверяемыеGTIN);
		РезультатПроверки  = РезультатПроверки.ДанныеПродукцииПоШтрихкодуEAN;
		
		ИНН = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Объект.Организация).ИНН;
		Для Каждого СтрокаGTIN Из СоответствиеGTIN Цикл
			
			GTIN = СтрокаGTIN.Ключ;
			ДанныеРезультата = РезультатПроверки.Получить(GTIN);
			Если ДанныеРезультата = Неопределено
				Или ДанныеРезультата.ИННПроизводителя <> ИНН
				Или ДанныеРезультата.ВидПродукции <> Объект.ВидПродукции
				Или (ШтрихкодированиеИСКлиентСервер.ЭтоВнутреннийШтрихкод(GTIN)
					И Не ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(GTIN)) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидУпаковки       = ДанныеРезультата.ТипУпаковки;
			ПоискСтрокиДанных = ДанныеПоШтрихкодам.Найти(GTIN, "ШтрихкодEAN");
			Если ПоискСтрокиДанных <> Неопределено
				И ЗначениеЗаполнено(ПоискСтрокиДанных.ВидУпаковкиИС) Тогда
				ВидУпаковки = ПоискСтрокиДанных.ВидУпаковкиИС;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,ВидУпаковки",
				СтрокаGTIN.Значение.Номенклатура,
				СтрокаGTIN.Значение.Характеристика,
				?(ЗначениеЗаполнено(ВидУпаковки), ВидУпаковки, Перечисления.ВидыУпаковокИС.Потребительская));
			
			СтрокиТаблицы = ТаблицаПроверкиПолная.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				
				Если Не СтрокаТаблицы.ЕстьGTIN Тогда
					СтрокаТаблицы.ЕстьGTIN = Истина;
					СтрокаТаблицы.ДоступныеGTIN = Новый Массив;
				КонецЕсли;
				СтрокаТаблицы.ДоступныеGTIN.Добавить(ШтрихкодированиеИСКлиентСервер.GTINПоШтрихкодуEAN(СтрокаGTIN.Ключ));
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого СтрокаДокумента Из Объект.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаДокумента.GTIN)
				Или (ЭтоМаркировкаОстатков И Не СтрокаДокумента.ПолноеОписаниеОстатков) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиТаблицы = ТаблицаПроверкиПолная.НайтиСтроки(
				Новый Структура(
					"Номенклатура, Характеристика,Шаблон",
					СтрокаДокумента.Номенклатура,
					СтрокаДокумента.Характеристика,
					СтрокаДокумента.Шаблон));
			
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				
				Если Не СтрокаТаблицы.ЕстьGTIN Тогда
					СтрокаДокумента.ТребуетсяГенерацияGTIN = Истина;
				ИначеЕсли СтрокаТаблицы.ДоступныеGTIN.Количество() И Не ЗначениеЗаполнено(СтрокаДокумента.GTIN) Тогда
					СтрокаДокумента.GTIN = СтрокаТаблицы.ДоступныеGTIN[0];
					ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(ЭтотОбъект, СтрокаДокумента);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.GTIN)
					И РезультатПроверки.Получить(СтрокаДокумента.GTIN) = Неопределено Тогда
					СтрокаДокумента.ТребуетсяГенерацияGTIN = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЭтоМаркировкаОстатков Тогда
	
		ТребуетсяОбновитьКлючСессии = ИнтеграцияИСМПСлужебный.ЗаполнитьGTINМаркировкиОстатков(
			Объект.Товары, Объект.Организация, Объект.ВидПродукции);
		
		Если ТребуетсяОбновитьКлючСессии Тогда
			Возврат Истина;
		КонецЕсли;
		
		ОбновитьДанныеФормыМаркировкаОстатковСервер();
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьФорматРедактированияСрокГодности()

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьСрокГодности = Ложь;
	ФорматДаты = "";

	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция") Тогда
		Если ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукция") Тогда
			ИспользоватьСрокГодности = Истина;
			ФорматДаты = "ДФ=dd.MM.yyyy;";
		ИначеЕсли ТекущиеДанные.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукция") Тогда
			ИспользоватьСрокГодности = Истина;
			ФорматДаты = "ДФ='dd.MM.yyyy HH:mm';";
		КонецЕсли;
	КонецЕсли;

	Если Не ИспользоватьСрокГодности И ЗначениеЗаполнено(ТекущиеДанные.СрокГодности) Тогда
		ТекущиеДанные.СрокГодности = Неопределено;
	КонецЕсли;

	Если Элементы.ТоварыСрокГодности.ФорматРедактирования <> ФорматДаты Тогда
		Элементы.ТоварыСрокГодности.ФорматРедактирования = ФорматДаты;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область РаботаСТСД

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, ДополнительныеПараметры) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = Новый Структура("Штрихкоды, Обработано, Всего", Штрихкоды, 0, Штрихкоды.Количество());
	ШтрихкодированиеИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД() Экспорт
	
	Если ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Всего Тогда
		ШтрихкодированиеИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		ЗагрузкаДанныхТСД = Неопределено;
	Иначе
		Штрихкод = ЗагрузкаДанныхТСД.Штрихкоды[ЗагрузкаДанныхТСД.Обработано];
		ЗагрузкаДанныхТСД.Обработано = ЗагрузкаДанныхТСД.Обработано + 1;
		ДанныеШтрихкода = Новый Структура("Штрихкод, Количество", Штрихкод, 1);
		ВводШтрихкодаЗавершение(ДанныеШтрихкода, Новый ОписаниеОповещения("ОбработатьОчереднойШтрихкод", ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчереднойШтрихкод(Результат, ДополнительныеПараметры) Экспорт
	ПодключитьОбработчикОжидания("ОбработатьПолученныеДанныеТСД", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеОбработкиШтрихкода = ОписаниеОповещенияОбработкиКодаМаркировки();
	ПараметрыЗавершенияВводаШтрихкода.ОповещениеВыполнитьДействие  = Новый ОписаниеОповещения("ОбработкаКодаМаркировкиВыполнитьДействие", ЭтотОбъект);
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	ИзмененныеСтроки  = РезультатОбработкиШтрихкода.ИзмененныеСтроки;
	ДобавленныеСтроки = РезультатОбработкиШтрихкода.ДобавленныеСтроки;
	
	Если ДобавленныеСтроки.Количество() = 0 И ИзмененныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		
		СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ДобавленнаяСтрока, Неопределено, Неопределено);
		
	КонецЦикла;
	
	Для Каждого ИзмененнаяСтрока Из ИзмененныеСтроки Цикл
		
		СобытияФормИСМППереопределяемый.ПриИзмененииКоличества(
			ЭтотОбъект, ИзмененнаяСтрока, Неопределено, Неопределено);
		
	КонецЦикла;
	
	ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
	
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиент.ПараметрыСканирования(ЭтотОбъект,, Объект.ВидПродукции);
	ШтрихкодированиеИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

#КонецОбласти

#Область Остатки

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Если ДополнительныеПараметры.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки")
		Или ДополнительныеПараметры.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки") Тогда
		Прочитать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнениеПараметровОстатковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСписка Из ДополнительныеПараметры Цикл
		
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(СтрокаСписка);
		
		Для Каждого КлючИзНачение Из Результат Цикл
			СтрокаТовары[КлючИзНачение.Ключ] = КлючИзНачение.Значение;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
			Продолжить;
		ИначеЕсли СтрокаТовары.ПолноеОписаниеОстатков Тогда
			Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаТовары.GTIN) Тогда
				СтрокаТовары.GTIN = "";
			КонецЕсли;
		Иначе
			СтрокаТовары.GTIN = "";
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьДанныеФормыМаркировкаОстатков();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьGTIN()
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.GTIN = "";
	КонецЦикла;
	ОбновитьСтатусИСМП();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОчиститьШаблонКодаМаркировки()
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если Элементы.ТоварыШаблон.СписокВыбора.НайтиПоЗначению(СтрокаТовары.Шаблон) = Неопределено Тогда
			Если Элементы.ТоварыШаблон.СписокВыбора.Количество() > 0 Тогда
				СтрокаТовары.Шаблон = Элементы.ТоварыШаблон.СписокВыбора[0].Значение;
			Иначе
				СтрокаТовары.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.ДокументОснование = Неопределено;
	ОчиститьGTIN();
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	ОбновитьДанныеФормыМаркировкаОстатков();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьФлагЭтоМаркировкаОстатков(Форма)
	
	МаркировкаОстатков = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков");
	
	Форма.ЭтоМаркировкаОстатков = (Форма.Объект.СпособВводаВОборот = МаркировкаОстатков);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(Форма, ТекущиеДанные)
	
	Если Форма.ЭтоМаркировкаОстатков И СтрНачинаетсяС(ТекущиеДанные.GTIN, "04") Тогда
		ТекущиеДанные.ЦелевойПол         = Неопределено;
		ТекущиеДанные.СпособВводаВОборот = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти