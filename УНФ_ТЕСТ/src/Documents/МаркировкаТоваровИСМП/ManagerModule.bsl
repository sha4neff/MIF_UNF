#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Если СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтруктураПараметров.ОбъектРасчета, "Операция, ОперацияНанесения");
		Иначе
			Реквизиты = СтруктураПараметров;
		КонецЕсли;
		Если Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
			Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию;
		ИначеЕсли ЗначениеЗаполнено(Реквизиты.ОперацияНанесения)
			Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Реквизиты.Операция) <> Неопределено Тогда
			Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ 
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетКПередаче);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ 
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОперацииВводаВОборот = Новый Массив;
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборот);
	
	ОперацииАгрегации = Новый Массив;
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.Агрегация);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
	
	ОперацииНанесенияКМ = Новый Массив;
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса);
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииВводаВОборот.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
			Статусы.Принят = ДополнительныеПараметры.Статус;
		Иначе
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот;
		КонецЕсли;
		
		Если ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяАгрегация", Ложь) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
		Иначе
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДокументСсылка,
				"ВидПродукции, Операция, Организация, ДокументОснование, Контрагент");
			Если ТребуетсяАгрегация(ДокументСсылка, Реквизиты) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииНанесенияКМ.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
			Статусы.Принят = ДополнительныеПараметры.Статус;
		Иначе
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены;
		КонецЕсли;
		
		Если ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяВводВОборот", Ложь) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяАгрегация", Ложь) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
		Иначе
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДокументСсылка,
				"ВидПродукции, Операция, Организация, ДокументОснование, Контрагент");
			Если ОперацииВводаВОборот.Найти(Реквизиты.Операция) <> Неопределено Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			ИначеЕсли ТребуетсяАгрегация(ДокументСсылка, Реквизиты) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииАгрегации.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ВидПродукции, Операция");
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Если ОперацииАгрегации.Найти(Реквизиты.Операция) <> Неопределено Тогда
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
		ИначеЕсли ОперацииНанесенияКМ.Найти(Реквизиты.Операция) <> Неопределено Тогда
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы;
		ИначеЕсли ОперацииВводаВОборот.Найти(Реквизиты.Операция) <> Неопределено Тогда
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
		Иначе
			ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	Иначе
		ВызватьИсключение ИнтеграцияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИСМП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ИСМП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИСМП.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - признак необходимости получения всех возможных операций
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияИСМП.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ИнтеграцияИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ВидПродукции, Операция, ОперацияНанесения");
	
	ОтчетыОбИспользовании = ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки();
	ОтчетыОбИспользовании.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
	
	Если ЛинейныйСписок
		Или ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(Реквизиты.ВидПродукции)
		Или ((Реквизиты.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция
			Или Реквизиты.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода)
			И (ОтчетыОбИспользовании.Найти(Реквизиты.Операция) <> Неопределено
				Или ЗначениеЗаполнено(Реквизиты.ОперацияНанесения))) Тогда
		
		ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 101,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПроизводственнуюЛинию);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 102,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОПередачеКМНаПринтер);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 103,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОПечатиКМ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 104,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОПотереРаспечатанныхКМ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 105,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
		
	КонецЕсли;
	
	Если ЛинейныйСписок
		Или (ОтчетыОбИспользовании.Найти(Реквизиты.Операция) = Неопределено
		И Реквизиты.Операция <> Перечисления.ВидыОперацийИСМП.Агрегация) Тогда
		
		ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборот);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 23,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 24,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 25,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 26,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
		
		ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 27,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
		
	КонецЕсли;
	
	ОперацияВПоследовательности = ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 4,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.Агрегация);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 41,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 42,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
	
	ИнтеграцияИС.ДобавитьОперациюВПоследовательность(Таблица, 43,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИСМП.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры, Ложь);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет Тогда
		
		Возврат ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры, Истина);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию Тогда
		
		Возврат АгрегацияJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

// Формирует JSON сообщения для ввода КМ в оборот
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИСМП.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры, ПередатьОтчетОНанесении = Ложь)
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка = &Ссылка
	|		И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		И Шапка.Ссылка = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.Номер                          КАК Номер,
	|	Шапка.Дата                           КАК Дата,
	|	Шапка.ДокументОснование              КАК ДокументОснование,
	|	
	|	Шапка.Организация                    КАК Организация,
	|	Представление(Шапка.Организация)     КАК ОрганизацияПредставление,
	|
	|	Шапка.Контрагент                     КАК Контрагент,
	|	Представление(Шапка.Контрагент)      КАК КонтрагентПредставление,
	|
	|	Шапка.Ответственный                  КАК Ответственный,
	|	Представление(Шапка.Ответственный)   КАК ОтветственныйПредставление,
	|	
	|	Шапка.ВидПродукции                   КАК ВидПродукции,
	|	Шапка.Операция                       КАК Операция,
	|	Шапка.ОперацияНанесения              КАК ОперацияНанесения,
	|	// Для обуви и одежды
	|	Шапка.ДатаПроизводства               КАК ДатаПроизводства,
	|	Шапка.ДатаДекларации                 КАК ДатаДекларации,
	|	Шапка.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|	Шапка.КодТаможенногоОргана           КАК КодТаможенногоОргана,
	|	Шапка.ПринятоеРешение                КАК ПринятоеРешение,
	|	Шапка.СтранаПроисхождения            КАК СтранаПроисхождения,
	|	Шапка.СтранаПроисхождения.Код        КАК СтранаЭкспортерКод,
	|	Шапка.ДатаИмпорта                    КАК ДатаИмпорта,
	|	Шапка.ДатаПервичногоДокумента        КАК ДатаПервичногоДокумента,
	|	Шапка.НомерПервичногоДокумента       КАК НомерПервичногоДокумента,
	|	// Для табачной продукции
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.ИдентификаторПроизводственнойЛинии   КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.ОтчетПроизводственнойЛинии           КАК ОтчетПроизводственнойЛинии,
	|	Шапка.Ссылка                               КАК Ссылка
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Серия              КАК Серия,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.GTIN               КАК GTIN,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	// Дополнительные реквизиты
	|	Товары.КодТНВЭД                               КАК КодТНВЭД,
	|	Товары.ДатаПроизводства                       КАК ДатаПроизводства,
	|	Товары.ВидДокументаСертификации               КАК ВидДокументаСертификации,
	|	Товары.НомерДокументаСертификации             КАК НомерДокументаСертификации,
	|	Товары.ДатаДокументаСертификации              КАК ДатаДокументаСертификации,
	|	ЕСТЬNULL(Товары.СтранаПроизводства.Код, """") КАК СтранаПроизводстваКод,
	|	Товары.ДатаДекларации                         КАК ДатаДекларации,
	|	Товары.РегистрационныйНомерДекларации         КАК РегистрационныйНомерДекларации,
	|	Товары.Цена                                   КАК Цена,
	|	Товары.СуммаНДС                               КАК СуммаНДС,
	|	Товары.ИдентификаторПроисхожденияВЕТИС        КАК ИдентификаторПроисхожденияВЕТИС
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|",
	"ДанныеОтчетаПроизводственнойЛинии");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или (Товары.Количество() = 0 И ДанныеОтчета.Количество() = 0) Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии      = Шапка.ПоследнийНомерВерсии + 1;
	ДатаПроизводства = ИнтеграцияИС.ДатаUTC(Шапка.ДатаПроизводства);
	ДатаДокумента    = ИнтеграцияИС.ДатаUTC(Шапка.Дата);
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	ОтчетыОбИспользовании = ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки();
	ОтчетыОбИспользовании.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
	
	ЭтоМолочнаяПродукция = (Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция);
	ЭтоУпакованнаяВода   = (Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода);
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка, НомерВерсии);
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(Шапка.ВидПродукции, Ложь, Истина)
		И ОтчетыОбИспользовании.Найти(Шапка.Операция) = Неопределено
		И Не ПередатьОтчетОНанесении Тогда
		
		// Заполнение данных по маркируемым товарам
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
		ПараметрыСканирования.ЗапрашиватьСтатусыИСМП        = Ложь;
		ПараметрыСканирования.ЗапрашиватьСпособВводаВОборот = Ложь;
		
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования);
		
		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ Тогда
			
			Если Не ЗначениеЗаполнено(ДатаПроизводства) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					НСтр("ru = 'Не заполнено поле ""Дата производства""'"));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
			КонецЕсли;
			
			document_description = Новый Структура;
			document_description.Вставить("production_type", "OWN_PRODUCTION");
			document_description.Вставить("production_date", ДатаПроизводства);
			
			document_description.Вставить("participant_inn", РеквизитыОрганизации.ИНН);
			document_description.Вставить("producer_inn",    РеквизитыОрганизации.ИНН);
			document_description.Вставить("owner_inn",       РеквизитыОрганизации.ИНН);
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("doc_type",             "Promotion_Inform_Selfmade");
			ТелоЗапроса.Вставить("document_description", document_description);
			ТелоЗапроса.Вставить("products",             Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
						СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции);
					СтрокаТЧ.Вставить(
						"uit_code",
						ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
					
					КодТНВЭД = СокрЛП(СтрокаТЧТовары.КодТНВЭД);
					
					Если Не ЗначениеЗаполнено(КодТНВЭД) Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""ТН ВЭД"" для номенклатуры %1.'"),
									ПараметрыОтбора.Номенклатура));
					ИначеЕсли СтрДлина(КодТНВЭД) <> 10 Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							НСтр("ru = 'Длина кода ТН ВЭД дожна составлять 10 цифр.'"));
					КонецЕсли;
					
					СтрокаТЧ.Вставить("tnved_code", КодТНВЭД);
					
					// Сертификация
					Если ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
						СтрокаТЧ.Вставить("certificate_document",        ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
						СтрокаТЧ.Вставить("certificate_document_number", СтрокаТЧТовары.НомерДокументаСертификации);
						СтрокаТЧ.Вставить("certificate_document_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					КонецЕсли;
					
					ТелоЗапроса.products.Добавить(СтрокаТЧ);
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"), ПараметрыОтбора.Номенклатура));
					
				Иначе
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"), ПараметрыОтбора.Номенклатура));
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС Тогда
			
			Если Не ЗначениеЗаполнено(Шапка.ДатаДекларации) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					НСтр("ru = 'Не заполнено поле ""Дата декларации""'"));
			КонецЕсли;
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" для организации'"), Шапка.Организация));
			КонецЕсли;
			
			document_description = Новый Структура;
			document_description.Вставить("participant_inn",    РеквизитыОрганизации.ИНН);
			document_description.Вставить("declaration_date",   ИнтеграцияИС.ДатаUTC(Шапка.ДатаДекларации));
			document_description.Вставить("declaration_number", Шапка.РегистрационныйНомерДекларации);
			document_description.Вставить("customs_code",       Шапка.КодТаможенногоОргана);
			document_description.Вставить("decision_code",      ИнтерфейсИСМПСлужебный.ПринятоеРешение(Шапка.ПринятоеРешение));
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("doc_type",             "GOODSIMPORT");
			ТелоЗапроса.Вставить("document_description", document_description);
			ТелоЗапроса.Вставить("products",             Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
						СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции, Ложь);
					СтрокаТЧ.Вставить(
						"uit_code",
						ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
					
					КодТНВЭД = СокрЛП(СтрокаТЧТовары.КодТНВЭД);
					
					Если Не ЗначениеЗаполнено(КодТНВЭД) Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""ТН ВЭД"" для номенклатуры %1.'"),
									ПараметрыОтбора.Номенклатура));
					ИначеЕсли СтрДлина(КодТНВЭД) <> 10 Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							НСтр("ru = 'Длина кода ТН ВЭД дожна составлять 10 цифр.'"));
					КонецЕсли;
					
					СтрокаТЧ.Вставить("tnved_code", КодТНВЭД);
					
					// Сертификация
					Если ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
						СтрокаТЧ.Вставить("certificate_document",        ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
						СтрокаТЧ.Вставить("certificate_document_number", СтрокаТЧТовары.НомерДокументаСертификации);
						СтрокаТЧ.Вставить("certificate_document_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					КонецЕсли;
					
					ТелоЗапроса.products.Добавить(СтрокаТЧ);
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				Иначе
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
			Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
			
			РеквизитыКонтрагента = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Контрагент);
			
			ТелоЗапроса = Новый Структура;
			
			Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору Тогда
				ТелоЗапроса.Вставить("producer_inn", РеквизитыОрганизации.ИНН);
				ТелоЗапроса.Вставить("owner_inn",    РеквизитыКонтрагента.ИНН);
				ТелоЗапроса.Вставить("producer",     Истина);
				ТелоЗапроса.Вставить("owner",        Ложь);
			ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
				ТелоЗапроса.Вставить("owner_inn",    РеквизитыОрганизации.ИНН);
				ТелоЗапроса.Вставить("producer_inn", РеквизитыКонтрагента.ИНН);
				ТелоЗапроса.Вставить("producer",     Ложь);
				ТелоЗапроса.Вставить("owner",        Истина);
			КонецЕсли;
			
			ТелоЗапроса.Вставить("products_list",    Новый Массив);
			ТелоЗапроса.Вставить("production_date",  ДатаПроизводства);
			ТелоЗапроса.Вставить("production_order", "CONTRACT_PRODUCTION");
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
						СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции);
					СтрокаТЧ.Вставить(
						"uit",
						ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
					
					КодТНВЭД = СокрЛП(СтрокаТЧТовары.КодТНВЭД);
					
					Если Не ЗначениеЗаполнено(КодТНВЭД) Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""ТН ВЭД"" для номенклатуры %1.'"),
									ПараметрыОтбора.Номенклатура));
					ИначеЕсли СтрДлина(КодТНВЭД) <> 10 Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							НСтр("ru = 'Длина кода ТН ВЭД дожна составлять 10 цифр.'"));
					КонецЕсли;
					
					СтрокаТЧ.Вставить("tnved_code", КодТНВЭД);
					СтрокаТЧ.Вставить("production_date", ДатаПроизводства);
					СтрокаТЧ.Вставить(
						"productName",
						ИнтеграцияИС.ПредставлениеНоменклатуры(
								СтрокаТЧМаркированныеТовары.Номенклатура,
								СтрокаТЧМаркированныеТовары.Характеристика,,
								СтрокаТЧМаркированныеТовары.Серия));
					
					// Сертификация
					Если ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
						СтрокаТЧ.Вставить("certificate_document",        ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
						СтрокаТЧ.Вставить("certificate_document_number", СтрокаТЧТовары.НомерДокументаСертификации);
						СтрокаТЧ.Вставить("certificate_document_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					КонецЕсли;
					
					ТелоЗапроса.products_list.Добавить(СтрокаТЧ);
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				Иначе
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
								ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц Тогда
			
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
			КонецЕсли;
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("participant_inn", РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("products_list",   Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				СтрокаТЧ = Новый Структура;
				РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции);
				СтрокаТЧ.Вставить(
					"uit",
					ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
				СтрокаТЧ.Вставить("product_receiving_date", ДатаДокумента);
			
				ТелоЗапроса.products_list.Добавить(СтрокаТЧ);
				
			КонецЦикла;
		
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
			
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
			КонецЕсли;
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("trade_participant_inn", РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("products_list",         Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				
				Если ЗначениеЗаполнено(СтрокаТЧМаркированныеТовары.Номенклатура) Тогда
					ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
					ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
					ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				Иначе
					
					ПримечаниеКРезультатуРазбора = Неопределено;
					ДанныеКодаМаркировки         = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
						СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции, ПримечаниеКРезультатуРазбора);
					
					Если ДанныеКодаМаркировки = Неопределено Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не удалось разобрать код маркировки %1:
									       |%2'"),
									СтрокаТЧМаркированныеТовары.Штрихкод,
									ПримечаниеКРезультатуРазбора.ТекстОшибки));
					Иначе
						ПараметрыОтбора.Вставить("GTIN", ДанныеКодаМаркировки.СоставКодаМаркировки.GTIN);
					КонецЕсли;
					
				КонецЕсли;
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
						СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции);
					
					СтрокаТЧ.Вставить(
						"ki",
						ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
					СтрокаТЧ.Вставить("kitu", "");
					
					// Таможенная декларация (необязательное)
					Если ЗначениеЗаполнено(СтрокаТЧТовары.РегистрационныйНомерДекларации) Тогда
						СтрокаТЧ.Вставить("declaration_number", СтрокаТЧТовары.РегистрационныйНомерДекларации);
						СтрокаТЧ.Вставить("declaration_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДекларации));
					КонецЕсли;
					
					// Страна (необязательное)
					Если ЗначениеЗаполнено(СтрокаТЧТовары.СтранаПроизводстваКод) Тогда
						СтрокаТЧ.Вставить("country", СтрокаТЧТовары.СтранаПроизводстваКод);
					КонецЕсли;
					
					// Сертификация (необязательное)
					Если ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
						СтрокаТЧ.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
						СтрокаТЧ.Вставить("certificate_number", СтрокаТЧТовары.НомерДокументаСертификации);
						СтрокаТЧ.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					КонецЕсли;
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					Если ЗначениеЗаполнено(СтрокаТЧМаркированныеТовары.Номенклатура) Тогда
						СообщениеОшибки = СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия));
					Иначе
						СообщениеОшибки = СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется GTIN %1.'"),
							ПараметрыОтбора.GTIN);
					КонецЕсли;
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, СообщениеОшибки);
					
				Иначе
					
					Если ЗначениеЗаполнено(СтрокаТЧМаркированныеТовары.Номенклатура) Тогда
						СообщениеОшибки = СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия));
					Иначе
						СообщениеОшибки = СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найден GTIN %1.'"),
							ПараметрыОтбора.GTIN);
					КонецЕсли;
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, СообщениеОшибки);
					
				КонецЕсли;
				
				ТелоЗапроса.products_list.Добавить(СтрокаТЧ);
				
			КонецЦикла;
		
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля Тогда
			
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" для организации: %1'"),
						Шапка.Организация));
			КонецЕсли;
			
			СведенияОКонтрагенте = Новый Структура();
			СведенияОКонтрагенте.Вставить("НалоговыйНомерВСтранеРегистрации", "");
			СведенияОКонтрагенте.Вставить("Наименование",                     "");
			
			ИнтеграцияИСПереопределяемый.ЗаполнитьСведенияОбОрганизации(
				Шапка.Контрагент,
				СведенияОКонтрагенте);
				
			Если Не ЗначениеЗаполнено(СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации) Тогда
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'Не заполнено поле ""Налоговый номер в стране регистрации"".
									   |Контрагент: %1'"),
							Шапка.Контрагент));
			КонецЕсли;
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("trade_participant_inn",   РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("import_date",             ИнтеграцияИС.ДатаUTC(Шапка.ДатаИмпорта));
			ТелоЗапроса.Вставить("exporter_name",           СведенияОКонтрагенте.Наименование);
			ТелоЗапроса.Вставить("primary_document_date",   ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
			ТелоЗапроса.Вставить("primary_document_number", Шапка.НомерПервичногоДокумента);
			ТелоЗапроса.Вставить("country_oksm",            КодСтраныЭкспортера(Шапка));
			ТелоЗапроса.Вставить("sender_tax_number",       СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации);
			ТелоЗапроса.Вставить("products_list",           Новый Массив);
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
				ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
				ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					СтрокаТЧ = Новый Структура;
					РезультатРазбора = ШтрихкодированиеИС.НоваяСтруктураОбработкиШтрихкода(
						СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции);
					СтрокаТЧ.Вставить(
						"ki",
						ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
					СтрокаТЧ.Вставить("cost",      СтрокаТЧТовары.Цена * 100);
					СтрокаТЧ.Вставить("vat_value", СтрокаТЧТовары.СуммаНДС * 100);
					
					КодТНВЭД = СокрЛП(СтрокаТЧТовары.КодТНВЭД);
					
					Если Не ЗначениеЗаполнено(КодТНВЭД) Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""ТН ВЭД"" для номенклатуры %1.'"),
									ПараметрыОтбора.Номенклатура));
					ИначеЕсли СтрДлина(КодТНВЭД) <> 10 Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							НСтр("ru = 'Длина кода ТН ВЭД дожна составлять 10 цифр.'"));
					КонецЕсли;
					
					СтрокаТЧ.Вставить("tnved_code", КодТНВЭД);
					
					// Сертификация
					Если ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
						СтрокаТЧ.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
						СтрокаТЧ.Вставить("certificate_number", СтрокаТЧТовары.НомерДокументаСертификации);
						СтрокаТЧ.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
					КонецЕсли;
					
					ТелоЗапроса.products_list.Добавить(СтрокаТЧ);
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				Иначе
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ИнтеграцияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия)));
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Неизвестная операция ввода в оборот: ""%1"".'"), Шапка.Операция));
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация", Ложь);
		Для Каждого СтрокаДерева Из РезультатПоиска.ДеревоУпаковок.Строки Цикл
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ПараметрыЗапроса.ТребуетсяАгрегация = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Истина;
		СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
		
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Операция                  = Шапка.Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли (ЭтоМолочнаяПродукция Или ЭтоУпакованнаяВода)
		И (ОтчетыОбИспользовании.Найти(Шапка.Операция) <> Неопределено 
		Или ПередатьОтчетОНанесении)Тогда
		
		ОперацияНанесения = ?(ЗначениеЗаполнено(Шапка.ОперацияНанесения), Шапка.ОперацияНанесения, Шапка.Операция);
		
		СтанцияУправленияЗаказами = Неопределено;
		ФорматОбмена              = Неопределено;
		НастройкиОбменаСУЗ = ДополнительныеПараметры.ПараметрыОбмена.НастройкиОбменаСУЗ;
		Для Каждого КлючИЗначение Из НастройкиОбменаСУЗ.ОбменНаСервере Цикл
			
			Организация     = КлючИЗначение.Ключ;
			НастройкаОбмена = КлючИЗначение.Значение;
			
			Если Организация <> Шапка.Организация Тогда
				Продолжить;
			КонецЕсли;
			
			Если НастройкаОбмена.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
				РезультатПроверки = ИнтерфейсСУЗ.ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбмена);
				Если РезультатПроверки.Доступен = Истина Тогда
					СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
					ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
				КонецЕсли;
			Иначе
				СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
				ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтанцияУправленияЗаказами = Неопределено Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не удалось определить активный СУЗ для организации %1.'"),
					Шапка.Организация));
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		Если ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Формат обмена с СУЗ версии v1 не поддерживается для вида продукции: %1'")
				, Шапка.ВидПродукции);
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстСообщения);
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		ТелоЗапроса = Новый Структура;
		
		// Обязательные реквизиты
		ТелоЗапроса.Вставить("usageType", ИнтерфейсСУЗСлужебный.ВидОтчетаОбИспользованииКодовМаркировки(ОперацияНанесения));
		ТелоЗапроса.Вставить("sntins",    Новый Массив);
		
		Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
			ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
		КонецЕсли;
		
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
		ПараметрыСканирования.ЗапрашиватьСтатусыИСМП = Ложь;
		ПараметрыСканирования.СсылкаНаОбъект = ДокументСсылка;
		
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования);
		
		ОписаниеТипаСтрока200 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная));
		ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50,  ДопустимаяДлина.Переменная));
		
		КодыМаркировки = Новый ТаблицаЗначений;
		КодыМаркировки.Колонки.Добавить("КодМаркировки",                   ОписаниеТипаСтрока200);
		КодыМаркировки.Колонки.Добавить("ХешСуммаКодаМаркировки",          ОписаниеТипаСтрока50);
		КодыМаркировки.Колонки.Добавить("НомерСтроки",                     Новый ОписаниеТипов("Число"));
		КодыМаркировки.Колонки.Добавить("ГрупповаяУпаковка",               Новый ОписаниеТипов("Булево"));
		КодыМаркировки.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
		КодыМаркировки.Колонки.Добавить("Скоропортящаяся",                 Новый ОписаниеТипов("Булево"));
		КодыМаркировки.Колонки.Добавить("ГоденДо",                         Новый ОписаниеТипов("Дата"));
		
		СоответствиеБлоков = Новый Соответствие;
		
		ИдентификаторыВЕТИС = Новый Массив;
		
		НомерСтроки = 0;
		Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
			НомерСтроки = НомерСтроки + 1;
			Если СтрокаТЧМаркированныеТовары.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаТЧ = КодыМаркировки.Добавить();
				СтрокаТЧ.КодМаркировки          = СтрокаТЧМаркированныеТовары.Штрихкод;
				СтрокаТЧ.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(СтрокаТЧ.КодМаркировки);
				СтрокаТЧ.НомерСтроки            = НомерСтроки;
				СтрокаТЧ.ИдентификаторПроисхожденияВЕТИС = СтрокаТЧМаркированныеТовары.ИдентификаторПроисхожденияВЕТИС;
				СтрокаТЧ.Скоропортящаяся                 = СтрокаТЧМаркированныеТовары.Скоропортящаяся;
				СтрокаТЧ.ГоденДо                         = СтрокаТЧМаркированныеТовары.ГоденДо;
				ИдентификаторыВЕТИС.Добавить(СтрокаТЧ.ИдентификаторПроисхожденияВЕТИС);
			КонецЕсли;
			СтрокаРодитель = СтрокаТЧМаркированныеТовары.СтрокаДерева.Родитель;
			Если СтрокаРодитель <> Неопределено Тогда
				Если СоответствиеБлоков[СтрокаРодитель.Штрихкод] = Неопределено Тогда
					СоответствиеБлоков.Вставить(СтрокаРодитель.Штрихкод, Истина);
					Если СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
						СтрокаТЧ = КодыМаркировки.Добавить();
						СтрокаТЧ.КодМаркировки          = СтрокаРодитель.Штрихкод;
						СтрокаТЧ.ХешСуммаКодаМаркировки = ИнтеграцияИС.ХешированиеДанныхSHA256(СтрокаТЧ.КодМаркировки);
						СтрокаТЧ.НомерСтроки            = НомерСтроки;
						СтрокаТЧ.ГрупповаяУпаковка      = Истина;
						СтрокаТЧ.ИдентификаторПроисхожденияВЕТИС = СтрокаТЧМаркированныеТовары.ИдентификаторПроисхожденияВЕТИС;
						СтрокаТЧ.Скоропортящаяся                 = СтрокаТЧМаркированныеТовары.Скоропортящаяся;
						СтрокаТЧ.ГоденДо                         = СтрокаТЧМаркированныеТовары.ГоденДо;
						ИдентификаторыВЕТИС.Добавить(СтрокаТЧ.ИдентификаторПроисхожденияВЕТИС);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.КодМаркировки                   КАК КодМаркировки,
		|	Т.ХешСуммаКодаМаркировки          КАК ХешСуммаКодаМаркировки,
		|	Т.НомерСтроки                     КАК НомерСтроки,
		|	Т.ГрупповаяУпаковка               КАК ГрупповаяУпаковка,
		|	Т.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
		|	Т.Скоропортящаяся                 КАК Скоропортящаяся,
		|	Т.ГоденДо                         КАК ГоденДо
		|ПОМЕСТИТЬ КодыМаркировки
		|ИЗ
		|	&КодыМаркировки КАК Т
		|ИНДЕКСИРОВАТЬ ПО
		|	КодМаркировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.ИдентификаторПроисхожденияВЕТИС                                 КАК ИдентификаторПроисхожденияВЕТИС,
		|	Т.ГоденДо                                                         КАК ГоденДо,
		|	Т.Скоропортящаяся                                                 КАК Скоропортящаяся,
		|	Т.КодМаркировки                                                   КАК КодМаркировки,
		|	ЕСТЬNULL(ПулКодовМаркировкиСУЗ.ПолныйКодМаркировки, НЕОПРЕДЕЛЕНО) КАК ПолныйКодМаркировки,
		|	Т.ГрупповаяУпаковка                                               КАК ГрупповаяУпаковка,
		|	Т.НомерСтроки                                                     КАК НомерСтроки
		|ИЗ
		|	КодыМаркировки КАК Т
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ПО ПулКодовМаркировкиСУЗ.КодМаркировки          = Т.КодМаркировки
		|		 И ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки = Т.ХешСуммаКодаМаркировки
		|ИТОГИ
		|	МАКСИМУМ(Скоропортящаяся)
		|ПО
		|	ИдентификаторПроисхожденияВЕТИС,
		|	ГоденДо";
		Запрос.Параметры.Вставить("КодыМаркировки", КодыМаркировки);
		
		ДанныеПоИдентификаторам = Неопределено;
		
		ВыборкаПоИдентификатору = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ПачкиСообщений           = Новый Массив();
		КоличествоКодовВСообщении = 30000;
		
		Пока ВыборкаПоИдентификатору.Следующий() Цикл
			
			Если ЭтоМолочнаяПродукция Тогда
				
				Если ДанныеПоИдентификаторам = Неопределено Тогда
					ДанныеПоИдентификаторам = ИнтеграцияИСМПВЕТИС.ДанныеИдентификаторовПроисхождения(ИдентификаторыВЕТИС);
				КонецЕсли;
				
				ДанныеПоИдентификатору = ДанныеПоИдентификаторам.Получить(ВыборкаПоИдентификатору.ИдентификаторПроисхожденияВЕТИС);
				
				ИдентификаторПримененияСтрокой = Строка(ДанныеПоИдентификатору.Идентификатор);
				
				Если ВыборкаПоИдентификатору.Скоропортящаяся Тогда
					ИмяПараметраГоденДо = "expDate72";
					ФорматДаты          = "ДФ=yyMMddHHmm";
				Иначе
					ИмяПараметраГоденДо = "expDate";
					ФорматДаты          = "ДФ=yyMMdd";
				КонецЕсли;
				
			КонецЕсли;
			
			ВыборкаПоСрокуГодности = ВыборкаПоИдентификатору.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСрокуГодности.Следующий() Цикл
				
				ГоденДоСтрокой = Формат(ВыборкаПоСрокуГодности.ГоденДо, ФорматДаты);
				
				ВыборкаДетальныеЗаписи = ВыборкаПоСрокуГодности.Выбрать();
				
				ТекущаяГруппа = Неопределено;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					Если ВыборкаДетальныеЗаписи.ПолныйКодМаркировки = Неопределено Тогда
						ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не найден полный код маркировки для кода %1.'"),
									ВыборкаДетальныеЗаписи.КодМаркировки));
							Продолжить;
					КонецЕсли;
					
					Если ТекущаяГруппа = Неопределено Или ТекущаяГруппа.Количество() >= КоличествоКодовВСообщении Тогда
						
						ТекущаяГруппа = Новый Массив();
						
						ДанныеСообщения = Новый Структура;
						ДанныеСообщения.Вставить("ГруппаКодов",     ТекущаяГруппа);
						Если ЭтоМолочнаяПродукция Тогда
							ДанныеСообщения.Вставить("Идентификатор",   ИдентификаторПримененияСтрокой);
							ДанныеСообщения.Вставить("ПараметрГоденДо", ИмяПараметраГоденДо);
							ДанныеСообщения.Вставить("ГоденДо",         ГоденДоСтрокой);
						КонецЕсли;
						
						ПачкиСообщений.Добавить(ДанныеСообщения);
						
					КонецЕсли;
					
					Base64ВШтрихкод = ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ВыборкаДетальныеЗаписи.ПолныйКодМаркировки);
					ТекущаяГруппа.Добавить(Base64ВШтрихкод);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация", Ложь);
		ПараметрыЗапроса.Вставить("ОперацияДокумента",  ОперацияНанесения);
		Для Каждого СтрокаДерева Из РезультатПоиска.ДеревоУпаковок.Строки Цикл
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				ПараметрыЗапроса.ТребуетсяАгрегация = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
			Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС Тогда
			ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот", Истина);
		КонецЕсли;
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса;
		
		АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
		АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
		АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
		АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		АбстрактноеСообщениеJSON.Операция                  = АбстрактнаяОперация;
		АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
		АбстрактноеСообщениеJSON.ТребуетсяПодписание       = Ложь;
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Для Каждого ДанныеСообщения Из ПачкиСообщений Цикл
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			СообщениеJSON.ЗагружатьДо       = АбстрактноеСообщениеJSON.Идентификатор;
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				ОперацияНанесения, ДокументСсылка, НомерВерсии);
			
			ТелоЗапроса = Новый Структура;
			
			// Обязательные реквизиты
			ТелоЗапроса.Вставить("usageType", ИнтерфейсСУЗСлужебный.ВидОтчетаОбИспользованииКодовМаркировки(ОперацияНанесения));
			ТелоЗапроса.Вставить("sntins",    Новый Массив);
			// Необязательные реквизиты
			ТелоЗапроса.Вставить("productionLineId", Шапка.ИдентификаторПроизводственнойЛинии);
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
				ТелоЗапроса.Вставить("productionOrderId", Шапка.ИдентификаторПроизводственногоЗаказа);
			КонецЕсли;
			
			Если ЭтоМолочнаяПродукция Тогда
				ТелоЗапроса.Вставить("accompanyingDocument",          ДанныеСообщения.Идентификатор);
				ТелоЗапроса.Вставить(ДанныеСообщения.ПараметрГоденДо, ДанныеСообщения.ГоденДо);
			КонецЕсли;
			
			Для Каждого ПолныйКодМаркировки Из ДанныеСообщения.ГруппаКодов Цикл
				ТелоЗапроса.sntins.Добавить(ПолныйКодМаркировки);
			КонецЦикла;
			
			ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
			
			СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
			СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.Версия              = НомерВерсии;
			СообщениеJSON.ТребуетсяПодписание = Ложь;
			СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
			
			СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
			СообщениеJSON.Операция                  = ОперацияНанесения;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции) Тогда
		
		СтанцияУправленияЗаказами = Неопределено;
		ФорматОбмена              = Неопределено;
		НастройкиОбменаСУЗ = ДополнительныеПараметры.ПараметрыОбмена.НастройкиОбменаСУЗ;
		Для Каждого КлючИЗначение Из НастройкиОбменаСУЗ.ОбменНаСервере Цикл
			
			Организация     = КлючИЗначение.Ключ;
			НастройкаОбмена = КлючИЗначение.Значение;
			
			Если Организация <> Шапка.Организация Тогда
				Продолжить;
			КонецЕсли;
			
			Если НастройкаОбмена.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
				РезультатПроверки = ИнтерфейсСУЗ.ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбмена);
				Если РезультатПроверки.Доступен = Истина Тогда
					СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
					ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
				КонецЕсли;
			Иначе
				СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
				ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтанцияУправленияЗаказами = Неопределено Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не удалось определить активный СУЗ для организации %1.'"),
					Шапка.Организация));
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		Если ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				НСтр("ru = 'Формат обмена с СУЗ версии v1 не поддерживается для табачной продукции'"));
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		ОписаниеТипаСтрока200 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная));
		ОписаниеТипаСтрока50  = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50,  ДопустимаяДлина.Переменная));
		
		КодыМаркировки = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле();
		
		ТребуетсяАгрегация      = Ложь;
		ПолныеКодыМаркировки    = Новый Соответствие();
		
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			
			КешДанныхРазбора                = Новый Соответствие;
			НастройкиРазбораКодаМаркировки  = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировки(Истина);
			ПроверятьАлфавитКодовМаркировки = Ложь;
			
			Для Каждого СтрокаДанныхОтчета Из ДанныеОтчета Цикл
				
				ДанныеРазбораШтрихкода = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
					СтрокаДанныхОтчета.ЗначениеШтрихкода, Шапка.ВидПродукции, КешДанныхРазбора,
					НастройкиРазбораКодаМаркировки, ПроверятьАлфавитКодовМаркировки);
				
				Если Не ЗначениеЗаполнено(ДанныеРазбораШтрихкода.ВидУпаковки) Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON, НСтр("ru = 'Некорректный формат данных отчета производственной линии'"));
					СообщенияJSON.Добавить(СообщениеJSON);
					Возврат СообщенияJSON;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанныхОтчета.ЗначениеШтрихкодаУпаковки) Тогда
					ТребуетсяАгрегация = Истина;
				КонецЕсли;
				
				Если ДанныеРазбораШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
					Или ДанныеРазбораШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
					
					ПолныеКодыМаркировки.Вставить(ДанныеРазбораШтрихкода.НормализованныйШтрихкод);
					ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
						ДанныеРазбораШтрихкода.НормализованныйШтрихкод,
						КодыМаркировки);
						
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДокументСсылка, Неопределено, Шапка.ВидПродукции);
			ПараметрыСканирования.ЗапрашиватьСтатусыИСМП = Ложь;
			
			РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
				ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
				ПараметрыСканирования);
			
			СоответствиеБлоков = Новый Соответствие;
			
			Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
				Если СтрокаТЧМаркированныеТовары.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					
					ПолныеКодыМаркировки.Вставить(СтрокаТЧМаркированныеТовары.Штрихкод);
					ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
						СтрокаТЧМаркированныеТовары,
						КодыМаркировки);
					
				КонецЕсли;
				СтрокаРодитель = СтрокаТЧМаркированныеТовары.СтрокаДерева.Родитель;
				Если СтрокаРодитель <> Неопределено Тогда
					Если СоответствиеБлоков[СтрокаРодитель.Штрихкод] = Неопределено Тогда
						СоответствиеБлоков.Вставить(СтрокаРодитель.Штрихкод, Истина);
						Если СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
							ПолныеКодыМаркировки.Вставить(СтрокаРодитель.Штрихкод);
							ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
								СтрокаРодитель,
								КодыМаркировки);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаДерева Из РезультатПоиска.ДеревоУпаковок.Строки Цикл
				Если СтрокаДерева.Строки.Количество() > 0 Тогда
					ТребуетсяАгрегация = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
			КодыМаркировки,
			"ПолныйКодМаркировки");
		Для Каждого СтрокаТаблицы Из РезультатПоискаВПуле Цикл
			ПолныеКодыМаркировки.Вставить(СтрокаТаблицы.КодМаркировки, СтрокаТаблицы.ПолныйКодМаркировки);
		КонецЦикла;
		
		КоличествоКодовВДокументе = 30000;
		
		ГруппыКодов   = Новый Массив;
		ТекущаяГруппа = Новый Массив;
		ГруппыКодов.Добавить(ТекущаяГруппа);
		
		ЕстьОшибки = Ложь;
		
		Для Каждого КлючИЗначение Из ПолныеКодыМаркировки Цикл
			КодМаркировки       = КлючИЗначение.Ключ;
			ПолныйКодМаркировки = КлючИЗначение.Значение;
			Если ПолныйКодМаркировки = Неопределено Тогда
				ЕстьОшибки = Истина;
				ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не найден полный код маркировки для кода %1.'"), КодМаркировки));
			Иначе
				Если ТекущаяГруппа.Количество() >= КоличествоКодовВДокументе Тогда
					ТекущаяГруппа = Новый Массив();
					ГруппыКодов.Добавить(ТекущаяГруппа);
				КонецЕсли;
				ТекущаяГруппа.Добавить(ШтрихкодированиеИСКлиентСервер.Base64ВШтрихкод(ПолныйКодМаркировки));
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОшибки Тогда
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация", ТребуетсяАгрегация);
		ПараметрыЗапроса.Вставить("ОперацияДокумента",  Шапка.Операция);
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса;
		
		АбстрактноеСообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		АбстрактноеСообщениеJSON.Организация               = Шапка.Организация;
		АбстрактноеСообщениеJSON.Документ                  = ДокументСсылка;
		АбстрактноеСообщениеJSON.ДокументОснование         = Шапка.ДокументОснование;
		АбстрактноеСообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		АбстрактноеСообщениеJSON.Операция                  = АбстрактнаяОперация;
		АбстрактноеСообщениеJSON.Версия                    = НомерВерсии;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
		АбстрактноеСообщениеJSON.ТребуетсяПодписание       = Ложь;
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Для Каждого ТекущаяГруппаКодов Из ГруппыКодов Цикл
			
			ТелоЗапроса = Новый Структура;
		
			// Обязательные реквизиты
			ТелоЗапроса.Вставить("usageType", ИнтерфейсСУЗСлужебный.ВидОтчетаОбИспользованииКодовМаркировки(Шапка.Операция));
			ТелоЗапроса.Вставить("sntins",    ТекущаяГруппаКодов);
			
			// Необязательные реквизиты
			ТелоЗапроса.Вставить("productionLineId",  Шапка.ИдентификаторПроизводственнойЛинии);
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
				ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
			КонецЕсли;
			
			СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
			СообщениеJSON.Организация       = Шапка.Организация;
			СообщениеJSON.Документ          = ДокументСсылка;
			СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				Шапка.Операция, ДокументСсылка, НомерВерсии);
			
			ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
			
			СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
			СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
			СообщениеJSON.Версия              = НомерВерсии;
			СообщениеJSON.ТребуетсяПодписание = Ложь;
			СообщениеJSON.ЗагружатьДо         = АбстрактноеСообщениеJSON.Идентификатор;
			СообщениеJSON.ПараметрыЗапроса    = Новый Структура();
			 
			СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
			СообщениеJSON.Операция                  = Шапка.Операция;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
		
	Иначе
		
		ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Неизвестный вид продукции для маркировки товаров: ""%1"".'"), Шапка.ВидПродукции));
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для агрегации КМ
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИСМП.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция АгрегацияJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.Агрегация;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Агрегация)
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция     КАК Операция,
	|	Шапка.ВидПродукции КАК ВидПродукции,
	|	// Табачная продукция
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.ИдентификаторПроизводственнойЛинии   КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.ОтчетПроизводственнойЛинии           КАК ОтчетПроизводственнойЛинии,
	|	
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|",
	"ДанныеОтчетаПроизводственнойЛинии");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	ЭтоОперацияАгрегация = Шапка.Операция = Перечисления.ВидыОперацийИСМП.Агрегация;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(Шапка.ВидПродукции, ЭтоОперацияАгрегация, ЭтоОперацияАгрегация) Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка, НомерВерсии);
		
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщениеJSON.ПараметрыЗапроса    = Новый Структура("ОрганизацияИНН", РеквизитыОрганизации.ИНН);
		
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Операция                  = Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
		СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции)
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		
		СообщениеJSON.Организация       = Шапка.Организация;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка, НомерВерсии);
		
		СтанцияУправленияЗаказами = Неопределено;
		ФорматОбмена              = Неопределено;
		НастройкиОбменаСУЗ = ДополнительныеПараметры.ПараметрыОбмена.НастройкиОбменаСУЗ;
		Для Каждого КлючИЗначение Из НастройкиОбменаСУЗ.ОбменНаСервере Цикл
			
			Организация     = КлючИЗначение.Ключ;
			НастройкаОбмена = КлючИЗначение.Значение;
			
			Если Организация <> Шапка.Организация Тогда
				Продолжить;
			КонецЕсли;
			
			Если НастройкаОбмена.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2 Тогда
				РезультатПроверки = ИнтерфейсСУЗ.ПроверитьДоступностьСУЗ_V2(Шапка.ВидПродукции, НастройкаОбмена);
				Если РезультатПроверки.Доступен = Истина Тогда
					СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
					ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
				КонецЕсли;
			Иначе
				СтанцияУправленияЗаказами = НастройкаОбмена.СтанцияУправленияЗаказами;
				ФорматОбмена              = НастройкаОбмена.ФорматОбмена;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтанцияУправленияЗаказами = Неопределено Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не удалось определить активный СУЗ для организации %1.'"),
					Шапка.Организация));
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		Если ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V1 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Формат обмена с СУЗ версии v1 не поддерживается для вида продукции: %1'"),
				Шапка.ВидПродукции);
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстСообщения);
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(ДокументСсылка);
		ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(ДанныеШапки, Неопределено, Шапка.ВидПродукции);
		
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			
			ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
			СоответствиеСтрокДереваУпаковок = Новый Соответствие;
			КешДанныхРазбора                = Новый Соответствие;
			НастройкиРазбораКодаМаркировки  = РазборКодаМаркировкиИССлужебныйКлиентСервер.НастройкиРазбораКодаМаркировки(Истина);
			ПроверятьАлфавитКодовМаркировки = Ложь;
			
			Штрихкоды = Новый Массив;
			Для Каждого СтрокаДанныхОтчета Из ДанныеОтчета Цикл
				Штрихкоды.Добавить(
					Новый Структура(
						"Штрихкод, ШтрихкодУпаковки",
						СтрокаДанныхОтчета.ЗначениеШтрихкода, СтрокаДанныхОтчета.ЗначениеШтрихкодаУпаковки));
			КонецЦикла;
			
			ГрупповаяОбработкаШтрихкодовИС.ДополнитьУпорядочитьДанныеТСД(Штрихкоды);
			
			Для Каждого СтрокаДанныхОтчета Из Штрихкоды Цикл
				
				ДанныеРазбораШтрихкода = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
					СтрокаДанныхОтчета.Штрихкод, Шапка.ВидПродукции, КешДанныхРазбора,
					НастройкиРазбораКодаМаркировки, ПроверятьАлфавитКодовМаркировки);
				
				Если Не ЗначениеЗаполнено(ДанныеРазбораШтрихкода.ВидУпаковки) Тогда
					
					ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON, НСтр("ru = 'Некорректный формат данных отчета производственной линии'"));
					СообщенияJSON.Добавить(СообщениеJSON);
					Возврат СообщенияJSON;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДанныхОтчета.ШтрихкодУпаковки) Тогда
					
					ДанныеРазбораШтрихкодаУпаковки = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкода(
						СтрокаДанныхОтчета.ШтрихкодУпаковки, Шапка.ВидПродукции, КешДанныхРазбора,
						НастройкиРазбораКодаМаркировки, ПроверятьАлфавитКодовМаркировки);
					
					Если ДанныеРазбораШтрихкодаУпаковки <> Неопределено
						И ЗначениеЗаполнено(ДанныеРазбораШтрихкодаУпаковки.НормализованныйШтрихкод) Тогда
						СтрокаДереваВерхнегоУровня = СоответствиеСтрокДереваУпаковок[ДанныеРазбораШтрихкодаУпаковки.НормализованныйШтрихкод];
					Иначе
						СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
					КонецЕсли;
					
				Иначе
					
					СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
					
				КонецЕсли;
				
				СтрокаДерева = СтрокаДереваВерхнегоУровня.Строки.Добавить();
				
				ДанныеРазбораИПримечание = КешДанныхРазбора[СтрокаДанныхОтчета.Штрихкод];
				ДанныеРазбора = ДанныеРазбораИПримечание.ДанныеРазбора;
				
				// Заполнение GTIN и EAN
				ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеРазбора.СоставКодаМаркировки);
				
				СтрокаДерева.Штрихкод             = ДанныеРазбора.НормализованныйКодМаркировки;
				СтрокаДерева.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
				СтрокаДерева.ВидУпаковки          = ДанныеРазбора.ВидУпаковки;
				СтрокаДерева.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
				СтрокаДерева.ВидПродукции         = Шапка.ВидПродукции;
				СтрокаДерева.ДанныеРазбора        = ДанныеРазбора;
				
				Если ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
				ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				ИначеЕсли ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
					И ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
				Иначе
					СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
				КонецЕсли;
				
				СтрокаДерева.НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
				ШтрихкодированиеМОТП.РассчитатьХэшСуммуНормализации(
					СтрокаДерева,
					СтрокаДерева.ДанныеРазбора);
				
				СоответствиеСтрокДереваУпаковок.Вставить(ДанныеРазбораШтрихкода.НормализованныйШтрихкод, СтрокаДерева);
				
			КонецЦикла;
			
			ДобавленныеСтроки  = Новый Массив;
			ДанныеПоШтрихкодам = ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
			
			ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
				ДанныеПоШтрихкодам.ДанныеКодовМаркировки, ДеревоУпаковок, ДобавленныеСтроки, ПараметрыСканирования);
			
			ШтрихкодированиеИС.ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДобавленныеСтроки, ПараметрыСканирования);
			
			РезультатПоиска = Новый Структура(
				"ДеревоУпаковок", ДеревоУпаковок);
			
		Иначе
			
			ЗаполнитьСведенияПоШтрихкодамEAN = Ложь;
			Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции) Тогда
				
				ПараметрыСканирования.ЗапрашиватьСтатусыИСМП = Ложь;
				
				// В отчете об агрегации для табачной продукции необходимо передавать емкость упаковки по данным GTIN
				// Как правило емкость блока - 10 пачек,
				// Емкость короба - 50 блоков.
				// Данные о емкости хранятся в учетной системе в виде коэффициентов упаковок (если реализовано)
				// и в служебном регистре сведений ОписаниеGTINИС
				ЗаполнитьСведенияПоШтрихкодамEAN = Истина;
				
			ИначеЕсли Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция
				Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
				
				ПараметрыСканирования.ЗапрашиватьСтатусыИСМП = Ложь;
				
				// В отчете об агрегации для молочной продукции необходимо использовать сведения о емкости упаковки по данным GTIN
				// Данные о емкости хранятся в учетной системе в виде коэффициентов упаковок (если реализовано)
				// и в служебном регистре сведений ОписаниеGTINИС.
				// В случае частичного заполнения агрегата в полях «aggregationUnitCapacity»
				// и «aggregatedItemsCount» необходимо передавать значение 1.
				ЗаполнитьСведенияПоШтрихкодамEAN = Истина;
				
			КонецЕсли;
			
			РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
				ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
				ПараметрыСканирования, ЗаполнитьСведенияПоШтрихкодамEAN);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
			ИнтеграцияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
		КонецЕсли;
		
		ТелоЗапроса = Новый Структура;
		
		// Обязательные реквизиты
		ТелоЗапроса.Вставить("participantId",    РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("aggregationUnits", Новый Массив);
		
		// Необязательные реквизиты
		ТелоЗапроса.Вставить("productionLineId",  Шапка.ИдентификаторПроизводственнойЛинии);
		Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
			ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
		КонецЕсли;
		
		ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииКМ.НачинаетсяСоСкобки       = Ложь;
		ПараметрыНормализацииКМ.ВключатьМРЦ              = Ложь;
		ПараметрыНормализацииКМ.ВключатьСрокГодности     = Истина;
		ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "Штрихкод";
		
		ЗаполнениеДанныхОбАгрегацииВСУЗ(РезультатПоиска.ДеревоУпаковок, ТелоЗапроса, Шапка.ВидПродукции, ПараметрыНормализацииКМ);
		
		ТекстСообщенияJSON = ИнтерфейсМОТПСлужебный.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		
		СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
		СообщениеJSON.Операция                  = Операция;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
		СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

Процедура ЗаполнениеДанныхОбАгрегацииВСУЗ(СтрокаДерева, ТелоЗапроса, ВидПродукции, ПараметрыНормализацииКМ)
	
	Если ТипЗнч(СтрокаДерева) <> Тип("ДеревоЗначений") Тогда
		КодМаркировкиУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			СтрокаДерева, ВидПродукции, ПараметрыНормализацииКМ);
	Иначе
		КодМаркировкиУпаковки = Неопределено;
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		Если КодМаркировкиУпаковки <> Неопределено Тогда
			ВложенныеКоды = Новый Массив;
		КонецЕсли;
		
		КоэффициентВложенныхЕдиниц = Неопределено;
		Для Каждого СтрокаДереваВложенная Из СтрокаДерева.Строки Цикл
			
			Если КоэффициентВложенныхЕдиниц = Неопределено Тогда
				КоэффициентВложенныхЕдиниц = СтрокаДереваВложенная.Коэффициент;
			ИначеЕсли КоэффициентВложенныхЕдиниц <> СтрокаДереваВложенная.Коэффициент Тогда
				// В упаковке содержится разная продукция
				КоэффициентВложенныхЕдиниц = 0;
			КонецЕсли;
			
			Если КодМаркировкиУпаковки <> Неопределено Тогда
				КодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДереваВложенная, ВидПродукции, ПараметрыНормализацииКМ);
				ВложенныеКоды.Добавить(КодМаркировки);
			КонецЕсли;
			
			ЗаполнениеДанныхОбАгрегацииВСУЗ(СтрокаДереваВложенная, ТелоЗапроса, ВидПродукции, ПараметрыНормализацииКМ);
			
		КонецЦикла;
		
		Если КодМаркировкиУпаковки <> Неопределено
			И ВложенныеКоды.Количество() > 0 Тогда
			
			ЕмкостьУпаковки = 0;
			Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ВидПродукции) Тогда
				
				ФактическоеКоличествоВложенныхЕдиниц = ВложенныеКоды.Количество();
				Если КоэффициентВложенныхЕдиниц <> Неопределено
					И КоэффициентВложенныхЕдиниц > 1 Тогда
					ЕмкостьУпаковки = СтрокаДерева.Коэффициент / КоэффициентВложенныхЕдиниц;
				ИначеЕсли КоэффициентВложенныхЕдиниц = 1 И СтрокаДерева.Коэффициент > 0 Тогда
					ЕмкостьУпаковки = СтрокаДерева.Коэффициент;
				Иначе
					ЕмкостьУпаковки = ФактическоеКоличествоВложенныхЕдиниц;
				КонецЕсли;
				Если ЕмкостьУпаковки = 0 Тогда
					ЕмкостьУпаковки = ФактическоеКоличествоВложенныхЕдиниц;
				КонецЕсли;
				
			ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция
				Или ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода Тогда
				
				ФактическоеКоличествоВложенныхЕдиниц = ВложенныеКоды.Количество();
				Если КоэффициентВложенныхЕдиниц <> Неопределено
					И КоэффициентВложенныхЕдиниц > 1 Тогда
					ЕмкостьУпаковки = СтрокаДерева.Коэффициент / КоэффициентВложенныхЕдиниц;
				ИначеЕсли КоэффициентВложенныхЕдиниц = 1 И СтрокаДерева.Коэффициент > 0 Тогда
					ЕмкостьУпаковки = СтрокаДерева.Коэффициент;
				Иначе
					ЕмкостьУпаковки = ФактическоеКоличествоВложенныхЕдиниц;
				КонецЕсли;
				
				Если ЕмкостьУпаковки = 0 Тогда
					ЕмкостьУпаковки = ФактическоеКоличествоВложенныхЕдиниц;
				ИначеЕсли ЕмкостьУпаковки <> ФактическоеКоличествоВложенныхЕдиниц Тогда
					// В случае частичного заполнения агрегата в полях «aggregationUnitCapacity»
					// и «aggregatedItemsCount» необходимо передавать значение 1.
					ФактическоеКоличествоВложенныхЕдиниц = 1;
					ЕмкостьУпаковки                      = 1;
				КонецЕсли;
				
			Иначе
				ФактическоеКоличествоВложенныхЕдиниц = ВложенныеКоды.Количество();
			КонецЕсли;
			
			Если ЕмкостьУпаковки < ФактическоеКоличествоВложенныхЕдиниц Тогда
				ЕмкостьУпаковки = ФактическоеКоличествоВложенныхЕдиниц;
			КонецЕсли;
			
			ДанныеОбАгрегации = Новый Структура;
			// На линии находится счетчик пачек и сканер, отсканированы могут быть не все пачки блока.
			// Поле заполняется емкостью упаковки, если количество sntins отличается от aggregatedItemsCount - расчитывается количество
			// серых пачек внутри агрегата в методах true-api
			ДанныеОбАгрегации.Вставить("aggregatedItemsCount",    ЕмкостьУпаковки);
			ДанныеОбАгрегации.Вставить("aggregationType",         "AGGREGATION");
			ДанныеОбАгрегации.Вставить("aggregationUnitCapacity", ЕмкостьУпаковки);
			ДанныеОбАгрегации.Вставить("sntins",                  ВложенныеКоды);
			ДанныеОбАгрегации.Вставить("unitSerialNumber",        КодМаркировкиУпаковки);
			
			ТелоЗапроса["aggregationUnits"].Добавить(ДанныеОбАгрегации);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура - параметры указания серий См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - Структура - параметры указания серий
//    См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Результат, Форма, ДанныеШтрихкода, ВложенныеШтрихкоды);
	Иначе
		
		ПараметрыЗаполнения = ПараметрыЗаполнения();
		
		Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
			
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыЗаполнения);
			
		КонецЕсли;
		
		Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
		Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(РезультатОбработки, Форма, ДанныеШтрихкода, ВложенныеШтрихкоды)
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
КонецПроцедуры

Функция ПараметрыЗаполнения()
	
	Возврат Новый Структура("ИзмененныеСтроки, ДобавленныеСтроки, РодительскийШтрихкод, ШтрихкодУточнения", Новый Массив, Новый Массив);
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения,
	УпаковкаВерхнегоУровня = Неопределено, УпаковкаУточнения = Неопределено)
	
	ЭтоМолочнаяПродукция = Форма.Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		Если ЭтоМолочнаяПродукция И УпаковкаУточнения = Неопределено И ЗначениеЗаполнено(СтрокаДерева.ИдентификаторПроисхожденияВЕТИС) Тогда
			УпаковкаУточненияСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаУточненияСтрокиДерева = УпаковкаУточнения;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ПараметрыЗаполнения.ШтрихкодУточнения = УпаковкаУточненияСтрокиДерева;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, ПараметрыЗаполнения);
			
		Иначе
			
			ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, СтрокаДерева, ПараметрыЗаполнения,
				УпаковкаВерхнегоУровняСтрокиДерева, УпаковкаУточненияСтрокиДерева);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыЗаполнения)
	
	ИсточникДанных = Форма.Объект;
	
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияМОТП(ДанныеШтрихкода.ВидПродукции) Тогда
		КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоПачек;
	ИначеЕсли ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции) Тогда
		КоличествоМаркируемыхЕдиниц = ДанныеШтрихкода.КоличествоВложенныхЕдиниц;
	КонецЕсли;

	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки;
	
	СпецификаОбработки = ?(ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция,
		ДанныеШтрихкода.ВидПродукции, "ДоступныКодыМаркировкиОстатков");
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, СпецификаОбработки);
	ОбновляемаяСтрока.Количество = КоличествоМаркируемыхЕдиниц;
	
	Если ПараметрыЗаполнения.РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = ПараметрыЗаполнения.РодительскийШтрихкод;
	КонецЕсли;
	
	Если СпецификаОбработки = Перечисления.ВидыПродукцииИС.МолочнаяПродукция Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковкиВЕТИС = ?(ПараметрыЗаполнения.ШтрихкодУточнения = Неопределено, 
			ДанныеШтрихкода.ШтрихкодУпаковки, ПараметрыЗаполнения.ШтрихкодУточнения);
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(
		Истина,
		Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура),
		ДанныеШтрихкода.ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукция);
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ОбновляемаяСтрока);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
		
		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
		КонецЦикла;
		
		ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
		
		Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
			КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
		КонецЕсли;
		
		Если КоличествоМаркируемойПродукции > 0 Тогда
			
			СтрокаТовары = НайденныеСтрокиТовары[0];
			СтрокаТовары.Количество = СтрокаТовары.Количество + КоличествоМаркируемойПродукции;
			СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемойПродукции;
			
			ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаТовары);
			Если ДобавленныеСтроки = Неопределено Тогда
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТовары);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		
		ПараметрыЗаполнения.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
	
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		
		РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
			ИсточникДанных.Товары, ИсточникДанных.Организация, ИсточникДанных.ВидПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователем
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействийИзмененныхСтрок = Новый Структура;
	СтруктураДействийИзмененныхСтрок.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныхСтрок.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	СтруктураДействийДобавленныхСтрок = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДействийИзмененныхСтрок, Ложь);
	//@skip-warning
	СтруктураДействийДобавленныхСтрок.Вставить("ЗаполнитьКодТНВЭД");
	
	ЗаполнятьДанныеВЕТИС = (ПараметрыОкончанияПроверки.ВидПродукцииИС = Перечисления.ВидыПродукцииИС.МолочнаяПродукция)
		И (ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(ДокументОбъект.Операция) <> Неопределено
		Или ЗначениеЗаполнено(ДокументОбъект.ОперацияНанесения));
	
	МассивОбработанныхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			СтрокаТаблицы.GTIN = Неопределено;
		КонецЕсли;
		
		ПараметрыОтбора = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина, Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицы);
		Если ЗаполнятьДанныеВЕТИС Тогда
			ПараметрыОтбора.Вставить("ИдентификаторПроисхожденияВЕТИС", СтрокаТаблицы.ИдентификаторПроисхожденияВЕТИС);
			ПараметрыОтбора.Вставить("СрокГодности",                    СтрокаТаблицы.СрокГодности);
		КонецЕсли;
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				СтрокаТовары.GTIN = Неопределено;
			КонецЕсли;
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			МассивОбработанныхСтрок.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
		КонецЕсли;
		
		ОбработатьСтрокуТабличнойЧасти(
			СтрокаТовары, ДокументОбъект,
			?(НайденныеСтроки.Количество(), СтруктураДействийИзмененныхСтрок, СтруктураДействийДобавленныхСтрок));
		
	КонецЦикла;
	
	// Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если СтрокаТовары.Количество = 0
		 Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураДействий)
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МаркировкаТоваровИСМПТовары.Номенклатура,
	|	МаркировкаТоваровИСМПТовары.Характеристика,
	|	МаркировкаТоваровИСМПТовары.Серия,
	|	МаркировкаТоваровИСМПТовары.Количество,
	|	МаркировкаТоваровИСМПТовары.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	&Скоропортящаяся КАК Скоропортящаяся,
	|	МаркировкаТоваровИСМПТовары.СрокГодности КАК ГоденДо,
	|	МаркировкаТоваровИСМПТовары.GTIN
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК МаркировкаТоваровИСМПТовары
	|ГДЕ
	|	МаркировкаТоваровИСМПТовары.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(Запрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Скоропортящаяся", "ЛОЖЬ");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции"),
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриМаркировкеТоваровИСМП.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.МаркировкаТоваровИСМП, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТребуетсяАгрегация(ДокументСсылка, Реквизиты)
	
	ТребуетсяАгрегация = Ложь;
	
	Шапка = Новый Структура;
	Шапка.Вставить("Ссылка",       ДокументСсылка);
	Шапка.Вставить("ВидПродукции", Реквизиты.ВидПродукции);
	Шапка.Вставить("Организация",  Реквизиты.Организация);
	Шапка.Вставить("Контрагент",   Реквизиты.Контрагент);
	Шапка.Вставить("ДокументОснование",  Реквизиты.ДокументОснование);
	Шапка.Вставить("Операция",           Реквизиты.Операция);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.ШтрихкодУпаковки КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК Т
		|ГДЕ
		|	Т.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	ШтрихкодыУпаковок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	
	// Заполнение данных по маркируемым товарам
	ПараметрыСканирования = ШтрихкодированиеИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	Если ПараметрыСканирования.Свойство("ЗапрашиватьСтатусыИСМП") Тогда
		ПараметрыСканирования.ЗапрашиватьСтатусыИСМП        = Ложь;
	КонецЕсли;
	Если ПараметрыСканирования.Свойство("ЗапрашиватьСпособВводаВОборот") Тогда
		ПараметрыСканирования.ЗапрашиватьСпособВводаВОборот = Ложь;
	КонецЕсли;
	
	РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		ШтрихкодыУпаковок,
		ПараметрыСканирования);
	
	Для Каждого СтрокаДерева Из РезультатПоиска.ДеревоУпаковок.Строки Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ТребуетсяАгрегация = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТребуетсяАгрегация;
	
КонецФункции

Функция КодСтраныЭкспортера(ДанныеШапки)
	
	Если ДанныеШапки.СтранаЭкспортерКод = "398" Тогда // Временное исправление ошибки ИСМП
		Возврат "487";
	Иначе
		Возврат ДанныеШапки.СтранаЭкспортерКод;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли