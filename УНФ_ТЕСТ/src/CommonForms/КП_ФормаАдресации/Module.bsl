
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
			
	Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
		ПрочитатьСтруктуруПараметровАдресации();
		
		Если Параметры.ЗначенияЗаполнения.Свойство("ТолькоПросмотр") И Параметры.ЗначенияЗаполнения.ТолькоПросмотр Тогда
			Элементы.ФормаЗаписатьИЗакрыть.Видимость=Ложь;
			Элементы.ФормаЗакрыть.КнопкаПоУмолчанию=Истина;
			Элементы.ГруппаКартинкаИАдресация.ТолькоПросмотр=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ЗаголовокФормы") Тогда
		ЭтаФорма.Заголовок=Параметры.ЗаголовокФормы;
	КонецЕсли;
	
	Если Параметры.Свойство("РабочаяГруппа") Тогда
		РабочаяГруппа=Параметры.РабочаяГруппа;
		Элементы.РабочаяГруппа.Видимость=Истина;
		Элементы.ГруппаТочкаАдресации.Видимость=Ложь;
		
	ИначеЕсли Параметры.Свойство("ИсполнительПеременная") Тогда
		ИсполнительПеременная=Параметры.ИсполнительПеременная;
		Элементы.ГруппаТочкаАдресации.Видимость=Ложь;
		Элементы.ДекорацияПеременнаяИсполнитель.Видимость=Истина;
		Элементы.ДекорацияПеременнаяИсполнитель.Заголовок="Срок выполнения для пользователя: "+СокрЛП(ИсполнительПеременная);
		Элементы.РабочаяГруппа.Видимость=Ложь;
		
	Иначе
		Элементы.РабочаяГруппа.Видимость=Ложь;
		Элементы.ГруппаТочкаАдресации.Видимость=Истина;
				
		Если Параметры.Свойство("ТолькоРолеваяАдресация") И Параметры.ТолькоРолеваяАдресация Тогда
			Элементы.ТипАдресации.Видимость=Ложь;
			ТипАдресации=1; //ролевая адресация;					
		КонецЕсли;
		
		Если Параметры.Свойство("ПоказыватьПараметрыЗадачи") И Параметры.ПоказыватьПараметрыЗадачи Тогда
			Элементы.ГруппаПараметрыЗадачи.Видимость=Истина;
		Иначе
			Элементы.ГруппаПараметрыЗадачи.Видимость=Ложь;
		КонецЕсли;
		
	КонецЕсли; //рабочая группа или точка адресации
	
	ИспользоватьРолевуюАдресацию=ПолучитьФункциональнуюОпцию("КП_ИспользоватьРолевуюАдресацию");

	Если ТипАдресации=1 И НЕ ИспользоватьРолевуюАдресацию Тогда
		Сообщить("Ранее была настроена ролевая адресация, но она отключена в настройках модуля. Включите её и измените исполнителя.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьОформлениеЭлементов();
	
	УстановитьОформлениеИсполнителей();
	
	УстановитьОформлениеТекстаЗадания();
	
	УстановитьВидимостьСрокаВыполнения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеЭлементов()
	Элементы.ГруппаРолеваяАдресация.Видимость=ИспользоватьРолевуюАдресацию;
	Элементы.ТипАдресации.Видимость=ИспользоватьРолевуюАдресацию;
	
КонецПроцедуры
	
&НаСервере
Процедура ПрочитатьСтруктуруПараметровАдресации()
	
	СтруктураПараметров=Параметры.ЗначенияЗаполнения;
	
	СтруктураПараметров.Свойство("ТочкаАдресации", ТочкаАдресации);
	СтруктураПараметров.Свойство("ОтчетИсполнителя", ОтчетИсполнителя);
	СтруктураПараметров.Свойство("СрокВыполненияЧасов", СрокВыполненияЧасов);
	СтруктураПараметров.Свойство("СрокВыполненияДатаВремя", СрокВыполненияДатаВремя);
	СтруктураПараметров.Свойство("НеИспользоватьГрафикРаботы", НеИспользоватьГрафикРаботы);
	СтруктураПараметров.Свойство("ИднИсполнителя", ИднИсполнителя);
			
	СрокВыполненияЧасовСМинутами=0;
	Если СтруктураПараметров.Свойство("СрокВыполненияЧасов") Тогда
		СрокВыполненияЧасовСМинутами=СтруктураПараметров.СрокВыполненияЧасов;
	Иначе
		СрокВыполненияЧасовСМинутами=0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокВыполненияДатаВремя) Тогда
		СрокВыполненияТипДата=1;
	КонецЕсли;
	
	СтруктураПараметров.Свойство("ИндивидуальныйТекстЗадания", ИндивидуальныйТекстЗадания);
	СтруктураПараметров.Свойство("ИндивидуальноеНаименованиеЗадания", ИндивидуальноеНаименованиеЗадания);
	
	ИспользоватьИндивидуальныйОтчетИсполнителя=ЗначениеЗаполнено(ОтчетИсполнителя);

	ИспользоватьИндивидуальныйТекстЗадания=НЕ ПустаяСтрока(ИндивидуальныйТекстЗадания);
	
	СрокВыполненияЧасов=Окр(СрокВыполненияЧасовСМинутами, 0, РежимОкругления.Окр15как10);
	СрокВыполненияМинутДесятчные=СрокВыполненияЧасовСМинутами-СрокВыполненияЧасов;
	СрокВыполненияМинут=60*СрокВыполненияМинутДесятчные;
	
	Если КП_Процессы.ЭтоТочкаРолевойАдресации(ТочкаАдресации) Тогда
		ТипАдресации=1;
		РольИсполнителя=ТочкаАдресации.РольИсполнителя;
		
		Если ЗначениеЗаполнено(РольИсполнителя.ТипыОсновногоОбъектаАдресации) Тогда
			ОсновнойОбъектАдресации=ТочкаАдресации.ОсновнойОбъектАдресации;
		Иначе
			ОсновнойОбъектАдресации=Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РольИсполнителя.ТипыДополнительногоОбъектаАдресации) Тогда
			ДополнительныйОбъектАдресации=ТочкаАдресации.ДополнительныйОбъектАдресации;
		Иначе
			ДополнительныйОбъектАдресации=Неопределено;
		КонецЕсли;
		
		НаименованиеТочкиАдресации=ТочкаАдресации.Наименование;
	Иначе
		ТипАдресации=0;
		Исполнитель=ТочкаАдресации;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьСтруктуруПараметровАдресации()
	СтруктураПараметров=Новый Структура;
	
	Если ТипАдресации=0 Тогда
		СтруктураПараметров.Вставить("ТочкаАдресации", Исполнитель);
		
	Иначе
		//ролевая адресация
		РолеваяАдресацияСсылка=КП_Процессы.ПолучитьЭлементРолевойАдресации(РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации, НаименованиеТочкиАдресации);
		Если РолеваяАдресацияСсылка=Неопределено Тогда
			РолеваяАдресацияСсылка=КП_Процессы.СоздатьЭлементРолевойАдресации(РольИсполнителя, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации, НаименованиеТочкиАдресации);
		КонецЕсли;
		СтруктураПараметров.Вставить("ТочкаАдресации", РолеваяАдресацияСсылка);
		
	КонецЕсли;
	
	Если ИспользоватьИндивидуальныйТекстЗадания Тогда
		СтруктураПараметров.Вставить("ИндивидуальныйТекстЗадания", ИндивидуальныйТекстЗадания);
	Иначе
		СтруктураПараметров.Вставить("ИндивидуальныйТекстЗадания", "");
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СрокВыполненияДатаВремя", "");
	
	Если СрокВыполненияТипДата=0 Тогда
		СрокВыполненияМинутДесятчные=СрокВыполненияЧасов+СрокВыполненияМинут/60;
	    СтруктураПараметров.Вставить("СрокВыполненияЧасов", СрокВыполненияМинутДесятчные);
		СтруктураПараметров.Вставить("СрокВыполненияДатаВремя", Дата("00010101"));
		
	Иначе
		СтруктураПараметров.Вставить("СрокВыполненияДатаВремя", СрокВыполненияДатаВремя);
		СтруктураПараметров.Вставить("СрокВыполненияЧасов", 0);
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НаименованиеТочкиАдресации", НаименованиеТочкиАдресации);
	СтруктураПараметров.Вставить("ИндивидуальноеНаименованиеЗадания", ИндивидуальноеНаименованиеЗадания);
	СтруктураПараметров.Вставить("НеИспользоватьГрафикРаботы", НеИспользоватьГрафикРаботы);
	
	Если ПустаяСтрока(ИднИсполнителя) Тогда
		ИднИсполнителя=КП_ОбщееСервер.СформироватьИднИсполнителя(СтруктураПараметров.ТочкаАдресации);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ИднИсполнителя", ИднИсполнителя);	
	
	Если ИспользоватьИндивидуальныйОтчетИсполнителя Тогда
		СтруктураПараметров.Вставить("ОтчетИсполнителя", ОтчетИсполнителя);
	Иначе
		СтруктураПараметров.Вставить("ОтчетИсполнителя", Неопределено);
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Процедура УстановитьОформлениеТекстаЗадания()
	Элементы.ИндивидуальныйТекстЗадания.Видимость=ИспользоватьИндивидуальныйТекстЗадания;
	Элементы.ИндивидуальноеНаименованиеЗадания.Видимость=Элементы.ИндивидуальныйТекстЗадания.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипАдресацииПриИзменении(Элемент)
	
	УстановитьОформлениеИсполнителей();
	УстановитьНаименованиеТочкиАдресации();
	
КонецПроцедуры

Процедура УстановитьОформлениеИсполнителей()
	
	Если ТипАдресации=0 Тогда
		РольИсполнителя=Неопределено;
		ОсновнойОбъектАдресации=Неопределено;
		ДополнительныйОбъектАдресации=Неопределено;
	Иначе
		Исполнитель=Неопределено;
		УстановитьТипыПолейАдресации();	
		
	КонецЕсли;
	
	Элементы.Исполнитель.Видимость=(ТипАдресации=0);
	Элементы.ГруппаРолеваяАдресация.Видимость=(ТипАдресации=1);
	Элементы.НаименованиеТочкиАдресации.Видимость=(ТипАдресации=1);
	
	Элементы.НаименованиеТочкиАдресации.ТолькоПросмотр=(ТипАдресации=0);
	
	Элементы.ДекорацияПоказатьДействующиеРоли.Видимость=(ТипАдресации=1 И ЗначениеЗаполнено(РольИсполнителя));
	
	УстановитьОтображениеОтчетаИсполнителя();
	
	УстановитьКартинкуОбъекта();
	
КонецПроцедуры

Процедура УстановитьНаименованиеТочкиАдресации()
	
	Если ТипАдресации=0 Тогда
		НаименованиеТочкиАдресации=СокрЛП(РольИсполнителя);
		
	Иначе
		
		НаименованиеТочкиАдресации=СокрЛП(РольИсполнителя);
		
		Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
			НаименованиеТочкиАдресации=НаименованиеТочкиАдресации+?(НаименованиеТочкиАдресации="", "", " | ")+СокрЛП(ОсновнойОбъектАдресации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
			НаименованиеТочкиАдресации=НаименованиеТочкиАдресации+?(НаименованиеТочкиАдресации="", "", " | ")+СокрЛП(ДополнительныйОбъектАдресации);
		КонецЕсли;
		
		Если ПустаяСтрока(НаименованиеТочкиАдресации) Тогда
			НаименованиеТочкиАдресации="";
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РольИсполнителяПриИзменении(Элемент)
	
	УстановитьТипыПолейАдресации();
	
	УстановитьКартинкуОбъекта();
	
	УстановитьНаименованиеТочкиАдресации();
	
	Элементы.ДекорацияПоказатьДействующиеРоли.Видимость=ЗначениеЗаполнено(РольИсполнителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойОбъектАдресацииПриИзменении(Элемент)
	УстановитьНаименованиеТочкиАдресации();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнйОбъектАдресацииПриИзменении(Элемент)
	УстановитьНаименованиеТочкиАдресации();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		НаименованиеТочкиАдресации=СокрЛП(Исполнитель);
		
	Иначе
		НаименованиеТочкиАдресации="<нет>";
		
	КонецЕсли;
	
	УстановитьКартинкуОбъекта();
		
КонецПроцедуры

Процедура УстановитьКартинкуОбъекта()
	
	Если ТипАдресации=0 Тогда	
		ДвоичныеДанные=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(Исполнитель); //	ПолучитьФотографиюПользователя(Исполнитель);	
	
		Если ДвоичныеДанные=Неопределено Тогда
			КартинкаОбъекта=Новый Картинка;
			Элементы.АдресКартинки.Видимость=Ложь;
			Элементы.КартинкаОбъекта.Видимость=Истина;
			Если ЗначениеЗаполнено(Исполнитель) Тогда
				Элементы.КартинкаОбъекта.ТекстНевыбраннойКартинки="Нет фото";
			КонецЕсли;
			
		Иначе
			АдресКартинки=ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			Элементы.КартинкаОбъекта.Видимость=Ложь;
			Элементы.АдресКартинки.Видимость=Истина;

		КонецЕсли;
		
	Иначе
		//картинка ролевой адресации
		Если ЗначениеЗаполнено(РольИсполнителя) Тогда
			КартинкаОбъекта=БиблиотекаКартинок.КП_РолеваяАдресацияБольшая;
		Иначе
			КартинкаОбъекта=Новый Картинка;
		КонецЕсли;
		
		Элементы.АдресКартинки.Видимость=Ложь;
		Элементы.КартинкаОбъекта.Видимость=Истина;
		
	КонецЕсли;		

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	ЭтаФорма.Закрыть(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ ЗначениеЗаполнено(РабочаяГруппа) И НЕ ЗначениеЗаполнено(ИсполнительПеременная) Тогда
		
		//проверим заполнение точки адресации
	
		Если (ТипАдресации=0 И НЕ ЗначениеЗаполнено(Исполнитель)) Тогда
		
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение1", ЭтотОбъект), НСтр("ru='Внимание! Не указан исполнитель, данные не будут записаны. Продолжить закрытие?';en='Unknown user, data will not be recorded. Do you want to continue closing?'"), РежимДиалогаВопрос.ДаНет, 60, ,КП_ОбщееКлиент.ЗаголовокДиалога());
            Возврат;
			
		ИначеЕсли (ТипАдресации=1 И НЕ ЗначениеЗаполнено(РольИсполнителя)) Тогда
		
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение", ЭтотОбъект), НСтр("ru='Внимание! Не указана роль исполнителя, данные не будут записаны. Продолжить закрытие?';en='User role is not specified, data will not be recorded. Do you want to continue closing?'"), РежимДиалогаВопрос.ДаНет, 60, ,КП_ОбщееКлиент.ЗаголовокДиалога());
            Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьИЗакрытьФрагмент1();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        ЭтаФорма.Закрыть(Неопределено);	
        Возврат;
    КонецЕсли;
    
    
    ЗаписатьИЗакрытьФрагмент1();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьФрагмент1()
    
    ЗаписатьИЗакрытьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        
        Возврат;
    Иначе
        ЭтаФорма.Закрыть(Неопределено);	
        Возврат;
    КонецЕсли;
    
    
    ЗаписатьИЗакрытьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьФрагмент()
    
    Перем СтруктураПараметров;
    
    СтруктураПараметров=СформироватьСтруктуруПараметровАдресации();
    ЭтаФорма.Закрыть(СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура СрокВыполненияМинутПриИзменении(Элемент)
	Если СрокВыполненияМинут>60 Тогда
		СрокВыполненияМинут=60;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйТекстЗаданияПриИзменении(Элемент)
	УстановитьОформлениеТекстаЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетИсполнителяПриИзменении(Элемент)
	УстановитьОтображениеОтчетаИсполнителя();
	
КонецПроцедуры

Процедура УстановитьОтображениеОтчетаИсполнителя()
	
	Элементы.ОтчетИсполнителя.Видимость=ИспользоватьИндивидуальныйОтчетИсполнителя;
	Элементы.ОтчетИсполнителяОписаниеДекорация.Видимость=(ЗначениеЗаполнено(ОтчетИсполнителя) И ИспользоватьИндивидуальныйОтчетИсполнителя);
	
	Если Элементы.ОтчетИсполнителяОписаниеДекорация.Видимость Тогда
		Элементы.ОтчетИсполнителяОписаниеДекорация.Заголовок=ОтчетИсполнителя.ОписаниеТребуемогоРезультата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьИндивидуальныйОтчетИсполнителяПриИзменении(Элемент)
	УстановитьОтображениеОтчетаИсполнителя();
	
КонецПроцедуры

Процедура УстановитьТипыПолейАдресации()
	
	Попытка
		Если НЕ РольИсполнителя.ТипыОсновногоОбъектаАдресации.Пустая() Тогда
			Элементы.ОсновнойОбъектАдресации.ОграничениеТипа=РольИсполнителя.ТипыОсновногоОбъектаАдресации.ТипЗначения;
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка установки типа основного объекта адресации (возможно данный тип отсутствует в базе данных).';en='Error type setting addressing the main subject (perhaps not in this type of database).'"));//+ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
		
	Попытка		
		Если НЕ РольИсполнителя.ТипыДополнительногоОбъектаАдресации.Пустая() Тогда
			Элементы.ДополнительныйОбъектАдресации.ОграничениеТипа=РольИсполнителя.ТипыДополнительногоОбъектаАдресации.ТипЗначения;
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка установки типа допонительного объекта адресации (возможно данный тип отсутствует в базе данных): ';")+ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	//установим наименование и видимость
	Если РольИсполнителя.ИспользуетсяСОбъектамиАдресации И ЗначениеЗаполнено(РольИсполнителя.ТипыОсновногоОбъектаАдресации.ТипЗначения) Тогда
		Элементы.ОсновнойОбъектАдресации.Видимость=Истина;
		Элементы.ОсновнойОбъектАдресации.Заголовок=РольИсполнителя.ТипыОсновногоОбъектаАдресации.ТипЗначения;
		Элементы.ОсновнойОбъектАдресации.Заголовок=?(Элементы.ОсновнойОбъектАдресации.Заголовок="Подразделения", "Подразделение", Элементы.ОсновнойОбъектАдресации.Заголовок);
		Элементы.ОсновнойОбъектАдресации.Заголовок=?(Элементы.ОсновнойОбъектАдресации.Заголовок="Организации", "Организация", Элементы.ОсновнойОбъектАдресации.Заголовок);
	Иначе
		Элементы.ОсновнойОбъектАдресации.Видимость=Ложь;
	КонецЕсли;
	
	Если РольИсполнителя.ИспользуетсяСОбъектамиАдресации И ЗначениеЗаполнено(РольИсполнителя.ТипыДополнительногоОбъектаАдресации.ТипЗначения) Тогда
		Элементы.ДополнительныйОбъектАдресации.Видимость=Истина;
		Элементы.ДополнительныйОбъектАдресации.Заголовок=РольИсполнителя.ТипыДополнительногоОбъектаАдресации.ТипЗначения;
		Элементы.ДополнительныйОбъектАдресации.Заголовок=?(Элементы.ДополнительныйОбъектАдресации.Заголовок="Подразделения", "Подразделение", Элементы.ДополнительныйОбъектАдресации.Заголовок);
		Элементы.ДополнительныйОбъектАдресации.Заголовок=?(Элементы.ДополнительныйОбъектАдресации.Заголовок="Организации", "Организация", Элементы.ДополнительныйОбъектАдресации.Заголовок);
		
	Иначе
		Элементы.ДополнительныйОбъектАдресации.Видимость=Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьДействующиеРолиНажатие(Элемент)
	//откроем список ролевой адресации
	
	ПараметрыОтбора=Новый Структура("РольИсполнителя", РольИсполнителя);
	
	Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
		ПараметрыОтбора.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
		ПараметрыОтбора.Вставить("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	КонецЕсли;
	
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФорму("РегистрСведений.КП_ИсполнителиРолей.ФормаСписка", ПараметрыФормы,,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаОбъектаНажатие(Элемент, СтандартнаяОбработка)
	АдресКартинкиНажатие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	Если ТипАдресации=0 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Изменить фотографию можно в дополнительных свойствах пользователя."
"Кнопка ""Дополнительные данные"" формы справочника ""Пользователи"".';en='You can change the photo for additional user properties."
"The ""additional information"" form guide ""Users"".'"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СрокВыполненияТипДатаПриИзменении(Элемент)
	УстановитьВидимостьСрокаВыполнения();
	
КонецПроцедуры

Процедура УстановитьВидимостьСрокаВыполнения()
	Если СрокВыполненияТипДата=0 Тогда
		//относительный срок
		Элементы.ГруппаСрокДатаИВремя.Видимость=Ложь;
		Элементы.ГруппаСрокВыполнения.Видимость=Истина;
			
	Иначе
		//точная дата и время
		Элементы.ГруппаСрокВыполнения.Видимость=Ложь;
		Элементы.ГруппаСрокДатаИВремя.Видимость=Истина;		
		
	КонецЕсли;

КонецПроцедуры
