///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если НЕ ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДоступностьТекущихОграничений = Истина;
	РедактированиеТекущихОграничений = Истина;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		// Просмотр и редактирование состава профилей и ограничений доступа.
		ОтборПрофилейТолькоТекущегоПользователя = Ложь;
		
	ИначеЕсли Параметры.Пользователь = Пользователи.АвторизованныйПользователь() Тогда
		// Просмотр своих профилей и отчета о правах доступа.
		ОтборПрофилейТолькоТекущегоПользователя = Истина;
		// Скрытие лишних сведений.
		Элементы.Профили.ТолькоПросмотр = Истина;
		Элементы.ПрофилиПометка.Видимость = Ложь;
		Элементы.Доступ.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
	Иначе
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаОтчетПраваДоступа.Видимость = Ложь;
		Элементы.ПраваИОграничения.Видимость = Ложь;
		Элементы.НедостаточноПравНаПросмотр.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Элементы.Профили.Заголовок = НСтр("ru = 'Профили внешнего пользователя'");
	Иначе
		Элементы.Профили.Заголовок = НСтр("ru = 'Профили пользователя'");
	КонецЕсли;
	
	ЗагрузитьДанные(ОтборПрофилейТолькоТекущегоПользователя);
	
	// Подготовка вспомогательных данных.
	УправлениеДоступомСлужебный.ПриСозданииНаСервереФормыРедактированияРазрешенныхЗначений(ЭтотОбъект, , "");
	
	Для каждого СвойстваПрофиля Из Профили Цикл
		ТекущаяГруппаДоступа = СвойстваПрофиля.Профиль;
		УправлениеДоступомСлужебныйКлиентСервер.ЗаполнитьСвойстваВидовДоступаВФорме(ЭтотОбъект);
	КонецЦикла;
	ТекущаяГруппаДоступа = "";
	
	ПрофильАдминистратор = Справочники.ПрофилиГруппДоступа.Администратор;
	
	// УНФ
	ПриСозданииНаСервереУНФ();
	// Конец УНФ
	
	// Определение необходимости настройки ограничений доступа.
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Элементы.Доступ.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено()
	   И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПользователиВМоделиСервиса") Тогда
		
		МодульПользователиСлужебныйВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("ПользователиСлужебныйВМоделиСервиса");
		ДействияСПользователемСервиса = МодульПользователиСлужебныйВМоделиСервиса.ПолучитьДействияСПользователемСервиса();
		
		ЗапретИзмененияАдминистративногоДоступа = НЕ ДействияСПользователемСервиса.ИзменениеАдминистративногоДоступа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ТипЗнч(ВладелецФормы) <> Тип("ФормаКлиентскогоПриложения")
	 Или ВладелецФормы.Окно <> Окно Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Права доступа (%1)'"), Строка(Параметры.Пользователь));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьОповещение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Проверка незаполненных и повторяющихся значений доступа.
	Ошибки = Неопределено;
	
	Для каждого СвойстваПрофиля Из Профили Цикл
		
		ТекущаяГруппаДоступа = СвойстваПрофиля.Профиль;
		УправлениеДоступомСлужебныйКлиентСервер.ОбработкаПроверкиЗаполненияНаСервереФормыРедактированияРазрешенныхЗначений(
			ЭтотОбъект, Отказ, Новый Массив, Ошибки);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ТекущаяСтрокаВидаДоступа = Элементы.ВидыДоступа.ТекущаяСтрока;
		ТекущаяСтрокаЗначенияДоступаПриОшибке = Элементы.ЗначенияДоступа.ТекущаяСтрока;
		
		Элементы.Профили.ТекущаяСтрока = СвойстваПрофиля.ПолучитьИдентификатор();
		ПриИзмененииТекущегоПрофиля(ЭтотОбъект, Ложь);
		
		Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидаДоступа;
		УправлениеДоступомСлужебныйКлиентСервер.ПриИзмененииТекущегоВидаДоступа(ЭтотОбъект, Ложь);
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	Иначе
		ТекущаяГруппаДоступа = ТекущийПрофиль;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуЗначенияДоступаПриОшибке()
	
	Если ТекущаяСтрокаЗначенияДоступаПриОшибке <> Неопределено Тогда
		Элементы.ЗначенияДоступа.ТекущаяСтрока = ТекущаяСтрокаЗначенияДоступаПриОшибке;
		ТекущаяСтрокаЗначенияДоступаПриОшибке = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрофили

&НаКлиенте
Процедура ПрофилиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПрофилиПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПометкаПриИзменении(Элемент)
	
	Отказ = Ложь;
	ТекущиеДанные = Элементы.Профили.ТекущиеДанные;
	
	// УНФ
	ПрофилиПометкаПриИзмененииУНФ(ТекущиеДанные, Отказ);
	// Конец УНФ
	
	Если ТекущиеДанные <> Неопределено
	   И НЕ ТекущиеДанные.Пометка Тогда
		// Проверка незаполненных и повторяющихся значений доступа
		// перед отключением профиля и отключением доступности его настройки.
		ОчиститьСообщения();
		Ошибки = Неопределено;
		УправлениеДоступомСлужебныйКлиентСервер.ОбработкаПроверкиЗаполненияНаСервереФормыРедактированияРазрешенныхЗначений(
			ЭтотОбъект, Отказ, Новый Массив, Ошибки);
		ТекущаяСтрокаЗначенияДоступаПриОшибке = Элементы.ЗначенияДоступа.ТекущаяСтрока;
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		ПодключитьОбработчикОжидания("УстановитьТекущуюСтрокуЗначенияДоступаПриОшибке", Истина, 0.1);
	КонецЕсли;
	
	Если Отказ Тогда
		ТекущиеДанные.Пометка = Истина;
	Иначе
		ПриИзмененииТекущегоПрофиля(ЭтотОбъект);
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.Профиль = ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.Администратор") Тогда
		
		ТребуетсяСинхронизацияССервисом = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыДоступа

&НаКлиенте
Процедура ВидыДоступаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеТекущихОграничений Тогда
		Элементы.ВидыДоступа.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаПриАктивизацииСтроки(
		ЭтотОбъект, Элемент);
		
	// УНФ
	ВидыДоступаПриАктивизацииСтрокиУНФ();
	//Конец УНФ
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииЯчейки(Элемент)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаПриАктивизацииЯчейки(
		ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаПриНачалеРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаПриОкончанииРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элемента ВсеРазрешеныПредставление таблицы формы ВидыДоступа.

&НаКлиенте
Процедура ВидыДоступаВсеРазрешеныПредставлениеПриИзменении(Элемент)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаВсеРазрешеныПредставлениеПриИзменении(
		ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаВсеРазрешеныПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ВидыДоступаВсеРазрешеныПредставлениеОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияДоступа

&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	УправлениеДоступомСлужебныйКлиент.ЗначенияДоступаПриИзменении(
		ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УправлениеДоступомСлужебныйКлиент.ЗначенияДоступаПриНачалеРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеДоступомСлужебныйКлиент.ЗначенияДоступаПриОкончанииРедактирования(
		ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ЗначениеДоступаНачалоВыбора(
		ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ЗначениеДоступаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ЗначениеДоступаОчистка(
		ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ЗначениеДоступаАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеДоступомСлужебныйКлиент.ЗначениеДоступаОкончаниеВводаТекста(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоПравамДоступа(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Параметры.Пользователь);
	
	ОткрытьФорму("Отчет.ПраваДоступа.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНеиспользуемыеВидыДоступа(Команда)
	
	ПоказыватьНеИспользуемыеВидыДоступаНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрофилиПометка.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Профили.Профиль");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ПрофилиГруппДоступа.Администратор;

	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрофилиПометка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПрофилиПрофильПредставление.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗапретИзмененияАдминистративногоДоступа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Профили.Профиль");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.ПрофилиГруппДоступа.Администратор;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// УНФ
	УстановитьУсловноеОформлениеУНФ();
	// Конец УНФ
	
КонецПроцедуры

// Продолжение обработчика события ПередЗакрытием.
&НаКлиенте
Процедура ЗаписатьИЗакрытьОповещение(Результат, Контекст) Экспорт
	
	ЗаписатьИзменения(Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Продолжение обработчика события ПередЗакрытием.
&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение(Отказ, Контекст) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзменения(ОбработкаПродолжения = Неопределено)
	
	Если СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().РазделениеВключено
	   И ТребуетсяСинхронизацияССервисом Тогда
		
		ПользователиСлужебныйКлиент.ЗапроситьПарольДляАутентификацииВСервисе(
			Новый ОписаниеОповещения("ЗаписатьИзмененияЗавершение", ЭтотОбъект, ОбработкаПродолжения),
			ЭтотОбъект,
			ПарольПользователяСервиса);
	Иначе
		ЗаписатьИзмененияЗавершение(Null, ОбработкаПродолжения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияЗавершение(НовыйПарольПользователяСервиса, ОбработкаПродолжения) Экспорт
	
	Если НовыйПарольПользователяСервиса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыйПарольПользователяСервиса <> Null Тогда
		ПарольПользователяСервиса = НовыйПарольПользователяСервиса;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ОтказПриЗаписиИзменений = Ложь;
	Попытка
		ЗаписатьИзмененияНаСервере(Отказ);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если ОтказПриЗаписиИзменений Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке),,,, Отказ);
		Иначе
			ВызватьИсключение;
		КонецЕсли;
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("УстановитьТекущуюСтрокуЗначенияДоступаПриОшибке", Истина, 0.1);
	
	Если ОбработкаПродолжения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОбработкаПродолжения, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьНеИспользуемыеВидыДоступаНаСервере()
	
	УправлениеДоступомСлужебный.ОбновитьОтображениеНеиспользуемыхВидовДоступа(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанные(ОтборПрофилейТолькоТекущегоПользователя)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Параметры.Пользователь);
	Запрос.УстановитьПараметр("ОтборПрофилейТолькоТекущегоПользователя",
	                           ОтборПрофилейТолькоТекущегоПользователя);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	ВЫБОР
	|		КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (НЕ(ГруппыДоступа.Пользователь <> &Пользователь
	|					И НЕ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
	|ГДЕ
	|	НЕ Профили.ПометкаУдаления
	|	И НЕ(&ОтборПрофилейТолькоТекущегоПользователя = ИСТИНА
	|				И ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	Профили.Ссылка.Наименование КАК ПрофильПредставление,
	|	Профили.Пометка КАК Пометка,
	|	Профили.ПерсональнаяГруппаДоступа КАК ГруппаДоступа
	|ИЗ
	|	Профили КАК Профили
	|
	|УПОРЯДОЧИТЬ ПО

	|	ПрофильПредставление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК ГруппаДоступа,
	|	ПрофилиВидыДоступа.ВидДоступа КАК ВидДоступа,
	|	ЕСТЬNULL(ГруппыДоступаВидыДоступа.ВсеРазрешены, ПрофилиВидыДоступа.ВсеРазрешены) КАК ВсеРазрешены,
	|	"""" КАК ВидДоступаПредставление,
	|	"""" КАК ВсеРазрешеныПредставление
	|ИЗ
	|	Профили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиВидыДоступа
	|		ПО Профили.Ссылка = ПрофилиВидыДоступа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаВидыДоступа.Ссылка
	|			И (ПрофилиВидыДоступа.ВидДоступа = ГруппыДоступаВидыДоступа.ВидДоступа)
	|ГДЕ
	|	НЕ ПрофилиВидыДоступа.Предустановленный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Профили.Ссылка.Наименование,
	|	ПрофилиВидыДоступа.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК ГруппаДоступа,
	|	ПрофилиВидыДоступа.ВидДоступа КАК ВидДоступа,
	|	0 КАК НомерСтрокиПоВиду,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа КАК ЗначениеДоступа,
	|	ГруппыДоступаЗначенияДоступа.ВключаяНижестоящие КАК ВключаяНижестоящие
	|ИЗ
	|	Профили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиВидыДоступа
	|		ПО Профили.Ссылка = ПрофилиВидыДоступа.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	|			И (ПрофилиВидыДоступа.ВидДоступа = ГруппыДоступаЗначенияДоступа.ВидДоступа)
	|ГДЕ
	|	НЕ ПрофилиВидыДоступа.Предустановленный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Профили.Ссылка.Наименование,
	|	ПрофилиВидыДоступа.НомерСтроки,
	|	ГруппыДоступаЗначенияДоступа.НомерСтроки";
	
	// УНФ
	ЗагрузитьДанныеМодифицироватьЗапросУНФ(Запрос);
	ЗагрузитьДанныеУстановитьПараметрыЗапросаУНФ(Запрос);
	// Конец УНФ
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗначениеВРеквизитФормы(РезультатыЗапроса[1].Выгрузить(), "Профили");
	ЗначениеВРеквизитФормы(РезультатыЗапроса[2].Выгрузить(), "ВидыДоступа");
	ЗначениеВРеквизитФормы(РезультатыЗапроса[3].Выгрузить(), "ЗначенияДоступа");
	
	// УНФ
	ЗагрузитьДанныеУНФ();
	// Конец УНФ
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияНаСервере(Отказ)
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Пользователи.НайтиНеоднозначныхПользователейИБ(Неопределено);
	
	// УНФ
	МодифицироватьВидыДоступаПрофиляДеньгиПередЗаписьюУНФ();
	ДобавитьВидыДоступаПрофиляСебестоимостьВОтчетеПродажиУНФ();
	ВыбранныеПрофилиУНФ = Профили.Выгрузить(, "Профиль, Пометка");
	ДобавитьДополнительныеПрофилиУНФ(ВыбранныеПрофилиУНФ);
	// Конец УНФ
	
	// Получение списка изменений.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Параметры.Пользователь);
	Запрос.УстановитьПараметр("Профили", ВыбранныеПрофилиУНФ);
	Запрос.УстановитьПараметр("ВидыДоступа", ВидыДоступа.Выгрузить(, "ГруппаДоступа, ВидДоступа, ВсеРазрешены"));
	
	ТаблицаЗначений = ЗначенияДоступа.Выгрузить(, "ГруппаДоступа, ВидДоступа, ЗначениеДоступа, ВключаяНижестоящие");
	ТаблицаЗначений.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число",,,
		Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	
	ГруппаДоступаВСтроке = Неопределено;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		Если ГруппаДоступаВСтроке <> Строка.ГруппаДоступа Тогда
			ГруппаДоступаВСтроке = Строка.ГруппаДоступа;
			ТекущийНомерСтроки = 1;
		КонецЕсли;
		Строка.НомерСтроки = ТекущийНомерСтроки;
		ТекущийНомерСтроки = ТекущийНомерСтроки + 1;
	КонецЦикла;
	Запрос.УстановитьПараметр("ЗначенияДоступа", ТаблицаЗначений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Профиль КАК Ссылка,
	|	Профили.Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	&Профили КАК Профили
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДоступа.ГруппаДоступа КАК Профиль,
	|	ВидыДоступа.ВидДоступа,
	|	ВидыДоступа.ВсеРазрешены
	|ПОМЕСТИТЬ ВидыДоступа
	|ИЗ
	|	&ВидыДоступа КАК ВидыДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияДоступа.ГруппаДоступа КАК Профиль,
	|	ЗначенияДоступа.ВидДоступа,
	|	ЗначенияДоступа.НомерСтроки,
	|	ЗначенияДоступа.ЗначениеДоступа,
	|	ЗначенияДоступа.ВключаяНижестоящие
	|ПОМЕСТИТЬ ЗначенияДоступа
	|ИЗ
	|	&ЗначенияДоступа КАК ЗначенияДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	ВЫБОР
	|		КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка
	|ПОМЕСТИТЬ ТекущиеПрофили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (НЕ(ГруппыДоступа.Пользователь <> &Пользователь
	|					И НЕ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор))))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
	|ГДЕ
	|	НЕ Профили.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаВидыДоступа.ВидДоступа,
	|	ГруппыДоступаВидыДоступа.ВсеРазрешены
	|ПОМЕСТИТЬ ТекущиеВидыДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаВидыДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаЗначенияДоступа.ВидДоступа,
	|	ГруппыДоступаЗначенияДоступа.НомерСтроки,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа,
	|	ГруппыДоступаЗначенияДоступа.ВключаяНижестоящие
	|ПОМЕСТИТЬ ТекущиеЗначенияДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиИзмененныхГрупп.Профиль
	|ПОМЕСТИТЬ ПрофилиИзмененныхГрупп
	|ИЗ
	|	(ВЫБРАТЬ
	|		Профили.Ссылка КАК Профиль
	|	ИЗ
	|		Профили КАК Профили
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|			ПО Профили.Ссылка = ТекущиеПрофили.Ссылка
	|	ГДЕ
	|		Профили.Пометка <> ТекущиеПрофили.Пометка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыДоступа.Профиль
	|	ИЗ
	|		ВидыДоступа КАК ВидыДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеВидыДоступа КАК ТекущиеВидыДоступа
	|			ПО ВидыДоступа.Профиль = ТекущиеВидыДоступа.Профиль
	|				И ВидыДоступа.ВидДоступа = ТекущиеВидыДоступа.ВидДоступа
	|				И ВидыДоступа.ВсеРазрешены = ТекущиеВидыДоступа.ВсеРазрешены
	|	ГДЕ
	|		ТекущиеВидыДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеВидыДоступа.Профиль
	|	ИЗ
	|		ТекущиеВидыДоступа КАК ТекущиеВидыДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВидыДоступа КАК ВидыДоступа
	|			ПО (ВидыДоступа.Профиль = ТекущиеВидыДоступа.Профиль)
	|				И (ВидыДоступа.ВидДоступа = ТекущиеВидыДоступа.ВидДоступа)
	|				И (ВидыДоступа.ВсеРазрешены = ТекущиеВидыДоступа.ВсеРазрешены)
	|	ГДЕ
	|		ВидыДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияДоступа.Профиль
	|	ИЗ
	|		ЗначенияДоступа КАК ЗначенияДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗначенияДоступа КАК ТекущиеЗначенияДоступа
	|			ПО ЗначенияДоступа.Профиль = ТекущиеЗначенияДоступа.Профиль
	|				И ЗначенияДоступа.ВидДоступа = ТекущиеЗначенияДоступа.ВидДоступа
	|				И ЗначенияДоступа.НомерСтроки = ТекущиеЗначенияДоступа.НомерСтроки
	|				И ЗначенияДоступа.ЗначениеДоступа = ТекущиеЗначенияДоступа.ЗначениеДоступа
	|				И ЗначенияДоступа.ВключаяНижестоящие = ТекущиеЗначенияДоступа.ВключаяНижестоящие
	|	ГДЕ
	|		ТекущиеЗначенияДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеЗначенияДоступа.Профиль
	|	ИЗ
	|		ТекущиеЗначенияДоступа КАК ТекущиеЗначенияДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияДоступа КАК ЗначенияДоступа
	|			ПО (ЗначенияДоступа.Профиль = ТекущиеЗначенияДоступа.Профиль)
	|				И (ЗначенияДоступа.ВидДоступа = ТекущиеЗначенияДоступа.ВидДоступа)
	|				И (ЗначенияДоступа.НомерСтроки = ТекущиеЗначенияДоступа.НомерСтроки)
	|				И (ЗначенияДоступа.ЗначениеДоступа = ТекущиеЗначенияДоступа.ЗначениеДоступа)
	|				И (ЗначенияДоступа.ВключаяНижестоящие = ТекущиеЗначенияДоступа.ВключаяНижестоящие)
	|	ГДЕ
	|		ЗначенияДоступа.ВидДоступа ЕСТЬ NULL ) КАК ПрофилиИзмененныхГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	СправочникПрофили.Наименование КАК ПрофильНаименование,
	|	Профили.Пометка,
	|	ТекущиеПрофили.ПерсональнаяГруппаДоступа
	|ИЗ
	|	ПрофилиИзмененныхГрупп КАК ПрофилиИзмененныхГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Профили КАК Профили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = Профили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = ТекущиеПрофили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК СправочникПрофили
	|		ПО (СправочникПрофили.Ссылка = ПрофилиИзмененныхГрупп.Профиль)";
	
		НачатьТранзакцию();
	Попытка
		ИзмененияГруппДоступа = Запрос.Выполнить().Выгрузить();
		
		Блокировка = Новый БлокировкаДанных;
		Для каждого Изменение Из ИзмененияГруппДоступа Цикл
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ГруппыДоступа");
			Если ЗначениеЗаполнено(Изменение.ПерсональнаяГруппаДоступа) Тогда
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Изменение.ПерсональнаяГруппаДоступа);
				ЗаблокироватьДанныеДляРедактирования(Изменение.ПерсональнаяГруппаДоступа);
			КонецЕсли;	
		КонецЦикла;
		Блокировка.Заблокировать();
		
		Для каждого Изменение Из ИзмененияГруппДоступа Цикл
			Если ЗначениеЗаполнено(Изменение.ПерсональнаяГруппаДоступа) Тогда
				ГруппаДоступаОбъект = Изменение.ПерсональнаяГруппаДоступа.ПолучитьОбъект();
				ГруппаДоступаОбъект.ПометкаУдаления = Ложь;
			Иначе
				// Создание персональной группы доступа.
				ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
				ГруппаДоступаОбъект.Родитель     = Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа();
				ГруппаДоступаОбъект.Наименование = Изменение.ПрофильНаименование;
				ГруппаДоступаОбъект.Пользователь = Параметры.Пользователь;
				ГруппаДоступаОбъект.Профиль      = Изменение.Профиль;
			КонецЕсли;
			
			Если Изменение.Профиль = Справочники.ПрофилиГруппДоступа.Администратор Тогда
				
				Если ТребуетсяСинхронизацияССервисом Тогда
					ГруппаДоступаОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса", ПарольПользователяСервиса);
				КонецЕсли;
				
				Если Изменение.Пометка Тогда
					Если ГруппаДоступаОбъект.Пользователи.Найти(Параметры.Пользователь, "Пользователь") = Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Параметры.Пользователь;
					КонецЕсли;
				Иначе
					ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(
						Параметры.Пользователь, "Пользователь");
					Если ОписаниеПользователя <> Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
						
						Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
							// Проверка пустого списка пользователей ИБ в группе доступа Администраторы.
							ОписаниеОшибки = "";
							УправлениеДоступомСлужебный.ПроверитьНаличиеПользователяИБВГруппеДоступаАдминистраторы(
								ГруппаДоступаОбъект.Пользователи, ОписаниеОшибки);
							
							Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
								ОтказПриЗаписиИзменений = Истина;
								Отказ = Истина;
								ВызватьИсключение
									НСтр("ru = 'Профиль Администратор должен быть хотя бы у одного пользователя,
									           |которому разрешен вход в программу.'");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли Изменение.Профиль = ПрофильВозвратыОтПокупателей Тогда
				ЗагрузитьЗначенияДоступаУНФ(ГруппаДоступаОбъект, Изменение.Пометка, Справочники.Контрагенты.ПустаяСсылка());
			ИначеЕсли Изменение.Профиль = ПрофильРедактированиеЦенДокументов Тогда
				ЗагрузитьЗначенияДоступаУНФ(ГруппаДоступаОбъект, Изменение.Пометка, Справочники.ВидыЦен.ПустаяСсылка());
			Иначе
				ГруппаДоступаОбъект.Пользователи.Очистить();
				Если Изменение.Пометка Тогда
					ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Параметры.Пользователь;
				КонецЕсли;
				
				Отбор = Новый Структура("ГруппаДоступа", Изменение.Профиль);
				ГруппаДоступаОбъект.ВидыДоступа.Загрузить(ВидыДоступа.Выгрузить(Отбор, "ВидДоступа, ВсеРазрешены"));
				ГруппаДоступаОбъект.ЗначенияДоступа.Загрузить(ЗначенияДоступа.Выгрузить(Отбор, "ВидДоступа, ЗначениеДоступа, ВключаяНижестоящие"));
			КонецЕсли;
			
			ГруппаДоступаОбъект.Записать();
			
		КонецЦикла;
		
		Для каждого Изменение Из ИзмененияГруппДоступа Цикл
			Если ЗначениеЗаполнено(Изменение.ПерсональнаяГруппаДоступа) Тогда
				РазблокироватьДанныеДляРедактирования(Изменение.ПерсональнаяГруппаДоступа);
			КонецЕсли;	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Для каждого Изменение Из ИзмененияГруппДоступа Цикл
			Если ЗначениеЗаполнено(Изменение.ПерсональнаяГруппаДоступа) Тогда
				РазблокироватьДанныеДляРедактирования(Изменение.ПерсональнаяГруппаДоступа);
			КонецЕсли;	
		КонецЦикла;
		ПарольПользователяСервиса = Неопределено;
		ВызватьИсключение;
	КонецПопытки;
	
	Модифицированность = Ложь;
	ТребуетсяСинхронизацияССервисом = Ложь;
	
	// УНФ
	МодифицироватьВидыДоступаПрофиляДеньгиПослеЗаписиУНФ();
	// Конец УНФ
	
	УправлениеДоступомСлужебный.ЗапуститьОбновлениеДоступа();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТекущегоПрофиля(Знач Форма, Знач ОбработкаНаКлиенте = Истина)
	
	Элементы    = Форма.Элементы;
	Профили     = Форма.Профили;
	ВидыДоступа = Форма.ВидыДоступа;
	
	Если ОбработкаНаКлиенте Тогда
		ТекущиеДанные = Элементы.Профили.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Профили.НайтиПоИдентификатору(
			?(Элементы.Профили.ТекущаяСтрока = Неопределено, -1, Элементы.Профили.ТекущаяСтрока));
	КонецЕсли;
	
	ДоступностьТекущихОграниченийБыло    = Форма.ДоступностьТекущихОграничений;
	РедактированиеТекущихОграниченийБыло = Форма.РедактированиеТекущихОграничений;
	
	Если ТекущиеДанные = Неопределено Тогда
		Форма.ТекущийПрофиль = Неопределено;
		Форма.ДоступностьТекущихОграничений = Ложь;
		Форма.РедактированиеТекущихОграничений = Ложь;
	Иначе
		Форма.ТекущийПрофиль = ТекущиеДанные.Профиль;
		Форма.ДоступностьТекущихОграничений    = ТекущиеДанные.Пометка;
		Форма.РедактированиеТекущихОграничений = ТекущиеДанные.Пометка
			И Форма.ТекущийПрофиль <> Форма.ПрофильАдминистратор
			И Не Форма.ТолькоПросмотр;
	КонецЕсли;
	
	ТребуетсяОбновитьОтображениеТекущихОграничений =
		    ДоступностьТекущихОграниченийБыло    <> Форма.ДоступностьТекущихОграничений
		Или РедактированиеТекущихОграниченийБыло <> Форма.РедактированиеТекущихОграничений
		Или ТребуетсяОбновитьОтображениеТекущихОграниченийУНФ();
	
	Если Форма.ТекущийПрофиль = Неопределено Тогда
		Форма.ТекущаяГруппаДоступа = "";
	Иначе
		Форма.ТекущаяГруппаДоступа = Форма.ТекущийПрофиль;
	КонецЕсли;
	
	Если Элементы.ВидыДоступа.ОтборСтрок = Неопределено
	 ИЛИ Элементы.ВидыДоступа.ОтборСтрок.ГруппаДоступа <> Форма.ТекущаяГруппаДоступа Тогда
		
		Если Элементы.ВидыДоступа.ОтборСтрок = Неопределено Тогда
			ОтборСтрок = Новый Структура;
		Иначе
			ОтборСтрок = Новый Структура(Элементы.ВидыДоступа.ОтборСтрок);
		КонецЕсли;
		ОтборСтрок.Вставить("ГруппаДоступа", Форма.ТекущаяГруппаДоступа);
		Элементы.ВидыДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
		ТекущиеВидыДоступа = ВидыДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", Форма.ТекущаяГруппаДоступа));
		Если ТекущиеВидыДоступа.Количество() = 0 Тогда
			Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура("ГруппаДоступа, ВидДоступа", Форма.ТекущаяГруппаДоступа, "");
			УправлениеДоступомСлужебныйКлиентСервер.ПриИзмененииТекущегоВидаДоступа(Форма, ОбработкаНаКлиенте);
		Иначе
			Элементы.ВидыДоступа.ТекущаяСтрока = ТекущиеВидыДоступа[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяОбновитьОтображениеТекущихОграничений Тогда
		Если ОбработкаНаКлиенте Тогда
			Форма.ПодключитьОбработчикОжидания("ОбновитьОтображениеТекущихОграниченийОбработчикОжидания", 0.1, Истина);
		Иначе
			ОбновитьОтображениеТекущихОграничений(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияПрофилиПриАктивизацииСтроки()
	
	ПриИзмененииТекущегоПрофиля(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеТекущихОграниченийОбработчикОжидания()
	
	ОбновитьОтображениеТекущихОграничений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтображениеТекущихОграничений(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.Доступ.Доступность                             =    Форма.ДоступностьТекущихОграничений;
	Элементы.ВидыДоступа.ТолькоПросмотр                     = НЕ Форма.РедактированиеТекущихОграничений;
	Элементы.ЗначенияДоступаПоВидуДоступа.Доступность       =    Форма.ДоступностьТекущихОграничений;
	Элементы.ЗначенияДоступа.ТолькоПросмотр                 = НЕ Форма.РедактированиеТекущихОграничений;
	Элементы.ВидыДоступаКонтекстноеМенюИзменить.Доступность =    Форма.РедактированиеТекущихОграничений;
	
	// УНФ
	ОбновитьОтображениеТекущихОграниченийУНФ(Форма);
	// Конец УНФ
	
КонецПроцедуры

#Область УНФ

&НаСервере
Процедура ПриСозданииНаСервереУНФ()
	
	ОграничиватьДоступНаУровнеЗаписей = УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей();
	ЗаполнитьСсылкиНаПрофилиУНФ();
	Элементы.ДоступДокументыПланированияДенег.Доступность = НЕ ДоступДенежныеДокументы;
	МодифицироватьВидыДоступаПрофиляДеньгиПриЗагрузкеУНФ();
	Элементы.НастройкаДополнительныхПравДеньги.Видимость = Ложь;
	Элементы.ГруппаРазделенныеПраваДеньги.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСсылкиНаПрофилиУНФ()
	
	ПрофильЗакупки = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных",
		УправлениеДоступомУНФ.ПрофильЗакупки().УИД);
		
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(ПрофильЗакупки),
		НСтр("ru = 'Не найден профиль ""Закупки""'"));
		
	ПрофильПродажи = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных",
		УправлениеДоступомУНФ.ПрофильПродажи().УИД);
		
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(ПрофильПродажи),
		НСтр("ru = 'Не найден профиль ""Продажи""'"));
		
	ПрофильДеньги = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных",
		УправлениеДоступомУНФ.ПрофильДеньги().УИД);
		
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(ПрофильДеньги),
		НСтр("ru = 'Не найден профиль ""Деньги""'"));
		
	ПрофильПланированиеДенег = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных",
		УправлениеДоступомУНФ.ПрофильДобавлениеИзменениеПодсистемыПланированиеДенег().УИД);
		
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(ПрофильПланированиеДенег),
		НСтр("ru = 'Не найден профиль ""Планирование денег""'"));
		
	ПрофильРабочееМестоКассира = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных",
		УправлениеДоступомУНФ.ПрофильРабочееМестоКассира().УИД);
		
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(ПрофильРабочееМестоКассира),
		НСтр("ru = 'Не найден профиль ""Рабочее место кассира""'"));
		
	ПрофильСебестоимостьВОтчетеПродажи = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных",
		УправлениеДоступомУНФ.ПрофильСебестоимостьВОтчетеПродажи().УИД);
		
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(ПрофильСебестоимостьВОтчетеПродажи),
		НСтр("ru = 'Не найден профиль ""Себестоимость в отчете Продажи""'"));
		
	ПрофильВозвратыОтПокупателей = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных",
		УправлениеДоступомУНФ.ПрофильВозвратыОтПокупателей().УИД);
		
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(ПрофильВозвратыОтПокупателей),
		НСтр("ru = 'Не найден профиль ""Возвраты от покупателей""'"));
		
	ПрофильРедактированиеЦенДокументов = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных",
		УправлениеДоступомУНФ.ПрофильРедактированиеЦенДокументов().УИД);
		
	ОбщегоНазначенияКлиентСервер.Проверить(ЗначениеЗаполнено(ПрофильРедактированиеЦенДокументов),
		НСтр("ru = 'Не найден профиль ""Редактирование цен документов""'"));
		
КонецПроцедуры

&НаСервере
Процедура МодифицироватьВидыДоступаПрофиляДеньгиПриЗагрузкеУНФ()
	
	// Удаляем профиль планирования из списка профилей
	ПрофилиПланирование = Профили.НайтиСтроки(Новый Структура("Профиль", ПрофильПланированиеДенег));
	Для Каждого СтрокаПрофиля Из ПрофилиПланирование Цикл
		ГруппаДоступаПрофильПланированиеДенег = СтрокаПрофиля.ГруппаДоступа;
		Профили.Удалить(СтрокаПрофиля);
	КонецЦикла;
	
	// Устанавливаем пометку для профиля "Деньги"
	ПрофилиДеньги = Профили.НайтиСтроки(Новый Структура("Профиль", ПрофильДеньги));
	Для Каждого СтрокаПрофиля Из ПрофилиДеньги Цикл
		СтрокаПрофиля.Пометка = ДоступДенежныеДокументы ИЛИ ДоступДокументыПланированияДенег;
	КонецЦикла;
	
	Если ДоступДокументыПланированияДенег И НЕ ДоступДенежныеДокументы Тогда
		
		// Очищаем старые значения
		ВидыДоступаДеньги = ВидыДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", ПрофильДеньги));
		Для Каждого СтрокаВидаДоступа Из ВидыДоступаДеньги Цикл
			ВидыДоступа.Удалить(СтрокаВидаДоступа);
		КонецЦикла;
		
		ЗначенияДоступаДеньги = ЗначенияДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", ПрофильДеньги));
		Для Каждого СтрокаЗначенияДоступа Из ЗначенияДоступаДеньги Цикл
			ЗначенияДоступа.Удалить(СтрокаЗначенияДоступа);
		КонецЦикла;
		
		// Копируем новые
		ВидыДоступаПланированиеДенег = ВидыДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", ПрофильПланированиеДенег));
		Для Каждого СтрокаВидаДоступа Из ВидыДоступаПланированиеДенег Цикл
			НовыйВидДоступа = ВидыДоступа.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйВидДоступа, СтрокаВидаДоступа);
			НовыйВидДоступа.ГруппаДоступа = ПрофильДеньги;
		КонецЦикла;
		
		ЗначенияДоступаПланированиеДенег = ЗначенияДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", ПрофильПланированиеДенег));
		Для Каждого СтрокаЗначения Из ЗначенияДоступаПланированиеДенег Цикл
			НоваяСтрокаЗначения = ЗначенияДоступа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначения, СтрокаЗначения);
			НоваяСтрокаЗначения.ГруппаДоступа = ПрофильДеньги;
		КонецЦикла;
		
	Иначе
	
		ВидыДоступаПланированиеДенег = ВидыДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа,ВидДоступа", ПрофильПланированиеДенег, Справочники.Пользователи.ПустаяСсылка()));
		Для Каждого СтрокаВидаДоступа Из ВидыДоступаПланированиеДенег Цикл
			НовыйВидДоступа = ВидыДоступа.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйВидДоступа, СтрокаВидаДоступа);
			НовыйВидДоступа.ГруппаДоступа = ПрофильДеньги;
		КонецЦикла;
		
		ЗначенияДоступаПланированиеДенег = ЗначенияДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа,ВидДоступа", ПрофильПланированиеДенег, Справочники.Пользователи.ПустаяСсылка()));
		Для Каждого СтрокаЗначения Из ЗначенияДоступаПланированиеДенег Цикл
			НоваяСтрокаЗначения = ЗначенияДоступа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначения, СтрокаЗначения);
			НоваяСтрокаЗначения.ГруппаДоступа = ПрофильДеньги;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПометкаПриИзмененииУНФ(ТекущиеДанные, Отказ)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Профиль = ПрофильДеньги Тогда
		ДоступДенежныеДокументы = ТекущиеДанные.Пометка;
		ДоступДокументыПланированияДенег = ТекущиеДанные.Пометка;
		Элементы.ДоступДокументыПланированияДенег.Доступность = НЕ ДоступДенежныеДокументы;
	КонецЕсли;

	Если Не ТекущиеДанные.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Профиль = ПрофильРабочееМестоКассира Тогда
		
		// Установили Строку с РМК в Истину, проверяем, что другие профили не заданы, 
		// если заданы, то запрашиваем их очистку
		
		СтрокиСПометками = Профили.НайтиСтроки(Новый Структура("Пометка", Истина));
		
		Если СтрокиСПометками.Количество() > 1 Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеУстановкиПометкиРМКУНФ", ЭтотОбъект, СтрокиСПометками);
			
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Для профиля рабочего места кассира выбор других профилей недоступен.
				|Очистить другие профили?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		// Установлен в Использовать профиль не РМК, попробуем найти, установлен ли профиль РМК
		// если установлен профиль РМК, то запрашиваем очистку этого профиля,
		// если не установлен
		
		СтрокаРМК = Профили.НайтиСтроки(Новый Структура("Профиль", ПрофильРабочееМестоКассира))[0];
		
		Если СтрокаРМК.Пометка Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеОчисткиПометкиРМКУНФ", ЭтотОбъект,
				Новый Структура("СтрокаРМК, СтрокаДанных", СтрокаРМК, ТекущиеДанные));
			
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru='Профиль рабочего места кассира не совместим с другими профилями.
				|Снять пометку с профиля рабочего места кассира?'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеУстановкиПометкиРМКУНФ(ОтветПользователя, СтрокиСПометками) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		ОтключитьВсеПрофилиКромеРМКУНФ(СтрокиСПометками);
	Иначе
		ОтключитьПрофильРМКУНФ(СтрокиСПометками);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсеПрофилиКромеРМКУНФ(СтрокиСПометками)
	
	Для Каждого ТекСтрока Из СтрокиСПометками Цикл
		Если ТекСтрока.Профиль <> ПрофильРабочееМестоКассира Тогда
			ТекСтрока.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ДоступДенежныеДокументы = Ложь;
	ДоступДокументыПланированияДенег = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьПрофильРМКУНФ(СтрокиСПометками)
	
	Для Каждого ТекСтрока Из СтрокиСПометками Цикл
		Если ТекСтрока.Профиль = ПрофильРабочееМестоКассира Тогда
			ТекСтрока.Пометка = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеОчисткиПометкиРМКУНФ(ОтветПользователя, Параметры) Экспорт
	
	Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
		Параметры.СтрокаРМК.Пометка = Ложь;
	Иначе
		Параметры.СтрокаДанных.Пометка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьОтображениеТекущихОграниченийУНФ(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.РазрешитьРедактированиеЦенВДокументах.Доступность = Форма.ДоступностьТекущихОграничений;
	Элементы.РазрешитьРедактированиеНоменклатуры.Доступность = Форма.ДоступностьТекущихОграничений;
	Элементы.РазрешитьВидимостьРасходовНаИсточникиПривлечения.Доступность = Форма.ДоступностьТекущихОграничений;
	
	Если Форма.ТекущийПрофиль = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.ТекущийПрофиль = Форма.ПрофильПродажи Тогда
		Элементы.РазрешитьРедактированиеЦенВДокументах.Видимость = Истина;
		Элементы.РазрешитьРедактированиеНоменклатуры.Видимость 	 = Истина;
		Элементы.РазрешитьВидимостьРасходовНаИсточникиПривлечения.Видимость = Истина;
	Иначе
		Элементы.РазрешитьРедактированиеЦенВДокументах.Видимость = Ложь;
		Элементы.РазрешитьРедактированиеНоменклатуры.Видимость 	 = Ложь;
		Элементы.РазрешитьВидимостьРасходовНаИсточникиПривлечения.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.ТекущийПрофиль = Форма.ПрофильДеньги Тогда
		Элементы.НастройкаДополнительныхПравДеньги.Видимость = Истина;
		Элементы.ГруппаРазделенныеПраваДеньги.Видимость 	 = Истина;
	Иначе
		Элементы.НастройкаДополнительныхПравДеньги.Видимость = Ложь;
		Элементы.ГруппаРазделенныеПраваДеньги.Видимость 	 = Ложь;
	КонецЕсли;
	
	ПоказатьВидыДоступа = НастройкаВидовДоступаДоступнаДляПрофиляУНФ(Форма);
	
	Элементы.ДекорацияРазделитель.Видимость = ПоказатьВидыДоступа;
	Элементы.Доступ.Видимость = ПоказатьВидыДоступа;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НастройкаВидовДоступаДоступнаДляПрофиляУНФ(Форма)
	
	Если Не Форма.ОграничиватьДоступНаУровнеЗаписей Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДоступныеВидыДоступа = Форма.ВидыДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", Форма.ТекущийПрофиль));
	Возврат ДоступныеВидыДоступа.Количество() > 0;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешитьРедактированиеНоменклатурыУНФ(Пользователь)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляРедактированиеНоменклатуры
	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляРедактированиеНоменклатуры" , УправлениеДоступомУНФ.ПрофильРедактированиеНоменклатуры().УИД);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();

КонецФункции

&НаСервереБезКонтекста
Функция РазрешитьРедактированиеЦенВДокументахУНФ(Пользователь)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляРедактированиеЦенДокументов
	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляРедактированиеЦенДокументов", УправлениеДоступомУНФ.ПрофильРедактированиеЦенДокументов().УИД);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();

КонецФункции

&НаСервереБезКонтекста
Функция РазрешитьВидимостьРасходовНаИсточникиПривлеченияУНФ(Пользователь)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляРедактированиеРасходовПоИсточникам
	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляРедактированиеРасходовПоИсточникам" , УправлениеДоступомУНФ.ПрофильРедактированиеРасходовПоИсточникам().УИД);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();

КонецФункции

&НаСервереБезКонтекста
Функция РазрешитьПроведениеДенежныхДокументовСверхРезерваУНФ(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляПроведениеДенежныхДокументовСверхРезерва
	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляПроведениеДенежныхДокументовСверхРезерва", УправлениеДоступомУНФ.ПрофильПроведениеДенежныхДокументовСверхРезерва().УИД);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступДенежныеДокументыУНФ(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	ГруппыДоступаПользователи.Ссылка.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляДеньги
	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляДеньги", УправлениеДоступомУНФ.ПрофильДеньги().УИД);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступДокументыПланированияДенегУНФ(Пользователь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступаПользователи.Пользователь
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|ГДЕ
	|	(ГруппыДоступаПользователи.Ссылка.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляДеньги
	|	ИЛИ ГруппыДоступаПользователи.Ссылка.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляДобавлениеИзменениеПодсистемыПланированиеДенег)
	|	И ГруппыДоступаПользователи.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляДеньги", УправлениеДоступомУНФ.ПрофильДеньги().УИД);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляДобавлениеИзменениеПодсистемыПланированиеДенег", УправлениеДоступомУНФ.ПрофильДобавлениеИзменениеПодсистемыПланированиеДенег().УИД);
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
КонецФункции

&НаСервере
Процедура МодифицироватьВидыДоступаПрофиляДеньгиПередЗаписьюУНФ()
	
	// Добавляем профиль планирования в списка профилей
	СтрокаПрофиляПланирование = Профили.Добавить();
	СтрокаПрофиляПланирование.Профиль = ПрофильПланированиеДенег;
	СтрокаПрофиляПланирование.ГруппаДоступа = ГруппаДоступаПрофильПланированиеДенег;
	СтрокаПрофиляПланирование.Пометка = ДоступДокументыПланированияДенег И НЕ ДоступДенежныеДокументы;
	
	// Устанавливаем пометку для профиля "Деньги"
	ПрофилиДеньги = Профили.НайтиСтроки(Новый Структура("Профиль", ПрофильДеньги));
	Для Каждого СтрокаПрофиля Из ПрофилиДеньги Цикл
		СтрокаПрофиля.Пометка = ДоступДенежныеДокументы;
	КонецЦикла;
	
	ОчиститьВидыИЗначенияДоступаУНФ(ПрофильПланированиеДенег);
	
	// Копируем новые
	ВидыДоступаДеньги = ВидыДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", ПрофильДеньги));
	Для Каждого СтрокаВидаДоступа Из ВидыДоступаДеньги Цикл
		НовыйВидДоступа = ВидыДоступа.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйВидДоступа, СтрокаВидаДоступа);
		НовыйВидДоступа.ГруппаДоступа = ПрофильПланированиеДенег;
	КонецЦикла;
	
	ЗначенияДоступаДеньги = ЗначенияДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", ПрофильДеньги));
	Для Каждого СтрокаЗначения Из ЗначенияДоступаДеньги Цикл
		НоваяСтрокаЗначения = ЗначенияДоступа.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗначения, СтрокаЗначения);
		НоваяСтрокаЗначения.ГруппаДоступа = ПрофильПланированиеДенег;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВидыДоступаПрофиляСебестоимостьВОтчетеПродажиУНФ()
	
	Если Не ПрофильПодключенУНФ(ПрофильЗакупки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПрофильПодключенУНФ(ПрофильПродажи) Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьВидыИЗначенияДоступаУНФ(ПрофильСебестоимостьВОтчетеПродажи);
	
	ВидыДоступаПродажи = ВидыДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", ПрофильПродажи));
	Для Каждого ТекВидДоступа Из ВидыДоступаПродажи Цикл
		Если ЭтоДопустимыйВидДоступаДляПрофиляУНФ(ТекВидДоступа.ВидДоступа) Тогда
			НовыйВидДоступа = ВидыДоступа.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйВидДоступа, ТекВидДоступа);
			НовыйВидДоступа.ГруппаДоступа = ПрофильСебестоимостьВОтчетеПродажи;
		КонецЕсли;
	КонецЦикла;
	
	ЗначенияДоступаПродажи = ЗначенияДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", ПрофильПродажи));
	Для Каждого ТекЗначениеДоступа Из ЗначенияДоступаПродажи Цикл
		Если ЭтоДопустимыйВидДоступаДляПрофиляУНФ(ТекЗначениеДоступа.ВидДоступа) Тогда
			НовоеЗначениеДоступа = ЗначенияДоступа.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеЗначениеДоступа, ТекЗначениеДоступа);
			НовоеЗначениеДоступа.ГруппаДоступа = ПрофильСебестоимостьВОтчетеПродажи;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтоДопустимыйВидДоступаДляПрофиляУНФ(ВидДоступа)
	
	Если ТипЗнч(ВидДоступа) = Тип("СправочникСсылка.Организации")
		Или ТипЗнч(ВидДоступа) = Тип("СправочникСсылка.Контрагенты") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПрофильПодключенУНФ(Знач Профиль)
	
	Для Каждого ТекПрофиль Из Профили.НайтиСтроки(Новый Структура("Профиль", Профиль)) Цикл
		Возврат ТекПрофиль.Пометка;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОчиститьВидыИЗначенияДоступаУНФ(Знач Профиль)
	
	ВидыДоступаУказанногоПрофиля = ВидыДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", Профиль));
	Для Каждого СтрокаВидаДоступа Из ВидыДоступаУказанногоПрофиля Цикл
		ВидыДоступа.Удалить(СтрокаВидаДоступа);
	КонецЦикла;
	
	ЗначенияДоступаУказанногоПрофиля = ЗначенияДоступа.НайтиСтроки(Новый Структура("ГруппаДоступа", Профиль));
	Для Каждого СтрокаЗначенияДоступа Из ЗначенияДоступаУказанногоПрофиля Цикл
		ЗначенияДоступа.Удалить(СтрокаЗначенияДоступа);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяОбновитьОтображениеТекущихОграниченийУНФ()
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьЗначенияДоступаУНФ(Знач ГруппаДоступаОбъект, Знач ИзменениеПометка, Знач ВидДоступа)
	
	ГруппаДоступаОбъект.Пользователи.Очистить();
	Если ИзменениеПометка Тогда
		ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Параметры.Пользователь;
	КонецЕсли;
	
	ИдентификаторПоставляемыхДанных = УправлениеДоступомУНФ.ПрофильПродажи().УИД;
	ПрофильПродажи = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных",
	ИдентификаторПоставляемыхДанных);
	
	Отбор = Новый Структура("ГруппаДоступа, ВидДоступа", ПрофильПродажи, ВидДоступа);
	
	ГруппаДоступаОбъект.ВидыДоступа.Загрузить(
		ВидыДоступа.Выгрузить(Отбор, "ВидДоступа, ВсеРазрешены"));
	
	ГруппаДоступаОбъект.ЗначенияДоступа.Загрузить(
	ЗначенияДоступа.Выгрузить(Отбор, "ВидДоступа, ЗначениеДоступа"));

КонецПроцедуры

&НаСервере
Процедура МодифицироватьВидыДоступаПрофиляДеньгиПослеЗаписиУНФ()
	
	// Удаляем профиль планирования из списка профилей
	ПрофилиПланирование = Профили.НайтиСтроки(Новый Структура("Профиль", ПрофильПланированиеДенег));
	Для Каждого СтрокаПрофиля Из ПрофилиПланирование Цикл
		ГруппаДоступаПрофильПланированиеДенег = СтрокаПрофиля.ГруппаДоступа;
		Профили.Удалить(СтрокаПрофиля);
	КонецЦикла;
	
	// Устанавливаем пометку для профиля "Деньги"
	ПрофилиДеньги = Профили.НайтиСтроки(Новый Структура("Профиль", ПрофильДеньги));
	Для Каждого СтрокаПрофиля Из ПрофилиДеньги Цикл
		СтрокаПрофиля.Пометка = ДоступДенежныеДокументы ИЛИ ДоступДокументыПланированияДенег;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеПрофилиУНФ(ВыбранныеПрофили)
	
	ПризнакиПрофилей = ПризнакиПрофилейУНФ(ВыбранныеПрофили);
	
	ДобавитьДополнительныйПрофильУНФ(ВыбранныеПрофили,
		УправлениеДоступомУНФ.ПрофильРедактированиеЦенДокументов().УИД,
		ПризнакиПрофилей.ЕстьПрофильПродажи И РазрешитьРедактированиеЦенВДокументах);
	
	ДобавитьДополнительныйПрофильУНФ(ВыбранныеПрофили,
		УправлениеДоступомУНФ.ПрофильРедактированиеНоменклатуры().УИД,
		ПризнакиПрофилей.ЕстьПрофильПродажи И РазрешитьРедактированиеНоменклатуры);
	
	ДобавитьДополнительныйПрофильУНФ(ВыбранныеПрофили,
		УправлениеДоступомУНФ.ПрофильРедактированиеРасходовПоИсточникам().УИД,
		ПризнакиПрофилей.ЕстьПрофильПродажи И РазрешитьВидимостьРасходовНаИсточникиПривлечения);
	
	ДобавитьДополнительныйПрофильУНФ(ВыбранныеПрофили,
		УправлениеДоступомУНФ.ПрофильВозвратыОтПокупателей().УИД,
		ПризнакиПрофилей.НуженДоступКВозвратамОтПокупателей);
	
	ДобавитьДополнительныйПрофильУНФ(ВыбранныеПрофили,
		УправлениеДоступомУНФ.ПрофильВозвратыПоставщикам().УИД,
		ПризнакиПрофилей.НуженДоступКВозвратамПоставщикам);
	
	ДобавитьДополнительныйПрофильУНФ(ВыбранныеПрофили,
		УправлениеДоступомУНФ.ПрофильСебестоимостьВОтчетеПродажи().УИД,
		ПризнакиПрофилей.ЕстьПрофильПродажи И ПризнакиПрофилей.ЕстьПрофильЗакупки);
	
	ДобавитьДополнительныйПрофильУНФ(ВыбранныеПрофили,
		УправлениеДоступомУНФ.ПрофильПроведениеДенежныхДокументовСверхРезерва().УИД,
		ПризнакиПрофилей.ЕстьПрофильДеньги И ПроведениеДенежныхДокументовСверхРезерва);
	
КонецПроцедуры

&НаСервере
Функция ПризнакиПрофилейУНФ(Знач ВыбранныеПрофили)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьПрофильДеньги", Ложь);
	Результат.Вставить("ЕстьПрофильПродажи", Ложь);
	Результат.Вставить("ЕстьПрофильЗакупки", Ложь);
	Результат.Вставить("НуженДоступКВозвратамОтПокупателей", Ложь);
	Результат.Вставить("НуженДоступКВозвратамПоставщикам", Ложь);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВыбранныеПрофили.Профиль,
	|	ВыбранныеПрофили.Пометка
	|ПОМЕСТИТЬ Вт_ВыбранныеПрофили
	|ИЗ
	|	&ВыбранныеПрофили КАК ВыбранныеПрофили
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Вт_ВыбранныеПрофили.Пометка КАК ЕстьПрофильАдминистратор,
	|	Вт_ВыбранныеПрофилиПродажи.Пометка КАК ЕстьПрофильПродажи,
	|	Вт_ВыбранныеПрофилиЗакупки.Пометка КАК ЕстьПрофильЗакупки,
	|	Вт_ВыбранныеПрофилиДеньги.Пометка КАК ЕстьПрофильДеньги
	|ИЗ
	|	Вт_ВыбранныеПрофили КАК Вт_ВыбранныеПрофили,
	|	Вт_ВыбранныеПрофили КАК Вт_ВыбранныеПрофилиЗакупки,
	|	Вт_ВыбранныеПрофили КАК Вт_ВыбранныеПрофилиПродажи,
	|	Вт_ВыбранныеПрофили КАК Вт_ВыбранныеПрофилиДеньги
	|ГДЕ
	|	Вт_ВыбранныеПрофили.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляАдминистратор
	|	И Вт_ВыбранныеПрофилиПродажи.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляПродажи
	|	И Вт_ВыбранныеПрофилиЗакупки.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляЗакупки
	|	И Вт_ВыбранныеПрофилиДеньги.Профиль.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляДеньги");
	
	Запрос.УстановитьПараметр("ВыбранныеПрофили", ВыбранныеПрофили);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляАдминистратор",
		УправлениеДоступомУНФ.ПрофильАдминистратор().УИД);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляПродажи", УправлениеДоступомУНФ.ПрофильПродажи().УИД);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляЗакупки", УправлениеДоступомУНФ.ПрофильЗакупки().УИД);
	Запрос.УстановитьПараметр("ИдентификаторПрофиляДеньги",  УправлениеДоступомУНФ.ПрофильДеньги().УИД);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ЕстьПрофильПродажи = Выборка.ЕстьПрофильПродажи;
	Результат.ЕстьПрофильЗакупки = Выборка.ЕстьПрофильЗакупки;
	Результат.ЕстьПрофильДеньги = Выборка.ЕстьПрофильДеньги;
	
	Если Выборка.ЕстьПрофильАдминистратор Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Выборка.ЕстьПрофильПродажи И Выборка.ЕстьПрофильЗакупки Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.НуженДоступКВозвратамОтПокупателей = Выборка.ЕстьПрофильПродажи;
	Результат.НуженДоступКВозвратамПоставщикам = Выборка.ЕстьПрофильЗакупки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьДополнительныйПрофильУНФ(Знач Профили, Знач ИдентификаторПоставляемыхДанных, Знач Пометка)
	
	НайденныйПрофиль = Справочники.ПрофилиГруппДоступа.НайтиПоРеквизиту("ИдентификаторПоставляемыхДанных",
		ИдентификаторПоставляемыхДанных);
	
	Если ЗначениеЗаполнено(НайденныйПрофиль) Тогда
		НоваяСтрока = Профили.Добавить();
		НоваяСтрока.Профиль = НайденныйПрофиль;
		НоваяСтрока.Пометка = Пометка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступДенежныеДокументыПриИзмененииУНФ(Элемент)
	
	Если ДоступДенежныеДокументы Тогда
		ДоступДокументыПланированияДенег = Истина;
	КонецЕсли;
	
	Элементы.ДоступДокументыПланированияДенег.Доступность = НЕ ДоступДенежныеДокументы;
	
	Если Элементы.Профили.ТекущиеДанные <> Неопределено Тогда
		Элементы.Профили.ТекущиеДанные.Пометка = ДоступДенежныеДокументы ИЛИ ДоступДокументыПланированияДенег;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступДокументыПланированияДенегПриИзмененииУНФ(Элемент)
	
	Если Элементы.Профили.ТекущиеДанные <> Неопределено Тогда
		Элементы.Профили.ТекущиеДанные.Пометка = ДоступДенежныеДокументы ИЛИ ДоступДокументыПланированияДенег;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтрокиУНФ()
	
	ТекущиеДанные = Элементы.ВидыДоступа.ТекущиеДанные;
	Элементы.ТекстВидДоступаНеИспользуется.Заголовок = НСтр("ru = 'В данный момент не используется, т.к. эта возможность отключена в программе.'");
	Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ВидДоступа = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка") Тогда
		Если ДоступДенежныеДокументы ИЛИ НЕ ДоступДокументыПланированияДенег Тогда
			Элементы.ТекстВидДоступаНеИспользуется.Видимость = Истина;
			Элементы.ТекстВидДоступаНеИспользуется.Заголовок = НСтр("ru = 'Можно установить для ограничения доступа только к документам планирования денег.'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеУНФ()
	
	ВидДоступа = НСтр("ru = 'Пользователи'");
	
	// Добавляем условное оформление для вида доступа "Пользователи" в профиле "Деньги"
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОбщая = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОбщая, "ВидыДоступа.ВидДоступаПредставление", ВидДоступа, ВидСравненияКомпоновкиДанных.Равно);
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаОбщая, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "ДоступДенежныеДокументы", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "ДоступДокументыПланированияДенег", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыДоступаВидДоступаПредставление");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ГруппаОбщая = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОбщая, "ВидыДоступа.ВидДоступаПредставление", ВидДоступа, ВидСравненияКомпоновкиДанных.Равно);
	ГруппаОтборов = РаботаСФормой.ДобавитьГруппуЭлементовОтбораКомпоновкиДанных(ГруппаОбщая, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "ДоступДенежныеДокументы", Истина, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаОтборов, "ДоступДокументыПланированияДенег", Ложь, ВидСравненияКомпоновкиДанных.Равно);
	РаботаСФормой.ДобавитьОформляемыеПоля(НовоеУсловноеОформление, "ВидыДоступаВсеРазрешеныПредставление");
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветТекста", ЦветаСтиля.ТекстВторостепеннойНадписи);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Текст", НСтр("ru = 'Все разрешены, без исключений'"));
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеМодифицироватьЗапросУНФ(Запрос)
	
	ИзменитьВхождениеВТекстеЗапросаУНФ(Запрос.Текст,
		"ГДЕ
		|	НЕ Профили.ПометкаУдаления
		|	И НЕ(&ОтборПрофилейТолькоТекущегоПользователя = ИСТИНА
		|				И ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL)",
		"ГДЕ
		|	НЕ Профили.ПометкаУдаления
		|	И НЕ(&ОтборПрофилейТолькоТекущегоПользователя = ИСТИНА
		|				И ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL)
		|	И НЕ Профили.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляРедактированиеЦенДокументов
		|	И НЕ Профили.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляРедактированиеНоменклатуры
		|	И НЕ Профили.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляВозвратыОтПокупателей
		|	И НЕ Профили.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляВозвратыПоставщикам
		|	И НЕ Профили.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляСинхронизацияДанных
		|	И НЕ Профили.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляСебестоимостьВОтчетеПродажи
		|	И НЕ Профили.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляПроведениеДенежныхДокументовСверхРезерва
		|	И НЕ Профили.ИдентификаторПоставляемыхДанных = &ИдентификаторПрофиляРедактированиеРасходовПоИсточникам");
	
	ИзменитьВхождениеВТекстеЗапросаУНФ(Запрос.Текст,
		"Профили.ПерсональнаяГруппаДоступа КАК ГруппаДоступа",
		"Профили.ПерсональнаяГруппаДоступа КАК ГруппаДоступа,
		|	"""" КАК ПрофильОписание,
		|	ВЫБОР
		|		КОГДА Профили.Ссылка.Наименование = ""Продажи""
		|			ТОГДА 100
		|		КОГДА Профили.Ссылка.Наименование = ""Закупки""
		|			ТОГДА 90
		|		КОГДА Профили.Ссылка.Наименование = ""Производство""
		|			ТОГДА 80
		|		КОГДА Профили.Ссылка.Наименование = ""Деньги""
		|			ТОГДА 70
		|		КОГДА Профили.Ссылка.Наименование = ""Зарплата""
		|			ТОГДА 60
		|		КОГДА Профили.Ссылка.Наименование = ""Налоги""
		|			ТОГДА 50
		|		КОГДА Профили.Ссылка.Наименование = ""Рабочее место кассира""
		|			ТОГДА 40
		|		КОГДА Профили.Ссылка.Наименование = ""Администратор""
		|			ТОГДА 30
		|		КОГДА Профили.Ссылка.Наименование = ""Только просмотр""
		|			ТОГДА 20
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Приоритет");
	
	ИзменитьВхождениеВТекстеЗапросаУНФ(Запрос.Текст,
		"УПОРЯДОЧИТЬ ПО
		|	ПрофильПредставление",
		"УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ,
		|	ПрофильПредставление");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьВхождениеВТекстеЗапросаУНФ(ТекстЗапроса, ПодстрокаПоиска, ПодстрокаЗамены)
	
	ДлинаТекстаЗапроса = СтрДлина(ТекстЗапроса);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПодстрокаПоиска, ПодстрокаЗамены);
	
	ОбщегоНазначенияКлиентСервер.Проверить(ДлинаТекстаЗапроса <> СтрДлина(ТекстЗапроса), 
		СтрШаблон(НСтр("ru = 'Не удалось изменить вхождение в тексте запроса:
			|%1'"), ПодстрокаПоиска));
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеУстановитьПараметрыЗапросаУНФ(Запрос)
	
	Запрос.УстановитьПараметр("ИдентификаторПрофиляРедактированиеЦенДокументов",
		УправлениеДоступомУНФ.ПрофильРедактированиеЦенДокументов().УИД);
		
	Запрос.УстановитьПараметр("ИдентификаторПрофиляРедактированиеНоменклатуры",
		УправлениеДоступомУНФ.ПрофильРедактированиеНоменклатуры().УИД);
		
	Запрос.УстановитьПараметр("ИдентификаторПрофиляВозвратыОтПокупателей",
		УправлениеДоступомУНФ.ПрофильВозвратыОтПокупателей().УИД);
		
	Запрос.УстановитьПараметр("ИдентификаторПрофиляВозвратыПоставщикам",
		УправлениеДоступомУНФ.ПрофильВозвратыПоставщикам().УИД);
		
	Запрос.УстановитьПараметр("ИдентификаторПрофиляСинхронизацияДанных",
		УправлениеДоступомУНФ.ПрофильСинхронизацияДанных().УИД);
		
	Запрос.УстановитьПараметр("ИдентификаторПрофиляСебестоимостьВОтчетеПродажи",
		УправлениеДоступомУНФ.ПрофильСебестоимостьВОтчетеПродажи().УИД);
		
	Запрос.УстановитьПараметр("ИдентификаторПрофиляПроведениеДенежныхДокументовСверхРезерва",
		УправлениеДоступомУНФ.ПрофильПроведениеДенежныхДокументовСверхРезерва().УИД);
		
	Запрос.УстановитьПараметр("ИдентификаторПрофиляРедактированиеРасходовПоИсточникам" ,
		УправлениеДоступомУНФ.ПрофильРедактированиеРасходовПоИсточникам().УИД);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеУНФ()
	
	РазрешитьРедактированиеЦенВДокументах 	 = РазрешитьРедактированиеЦенВДокументахУНФ(Параметры.Пользователь);
	РазрешитьРедактированиеНоменклатуры   	 = РазрешитьРедактированиеНоменклатурыУНФ(Параметры.Пользователь);
	РазрешитьВидимостьРасходовНаИсточникиПривлечения = РазрешитьВидимостьРасходовНаИсточникиПривлеченияУНФ(Параметры.Пользователь);
	
	ПроведениеДенежныхДокументовСверхРезерва = РазрешитьПроведениеДенежныхДокументовСверхРезерваУНФ(Параметры.Пользователь);
	ДоступДенежныеДокументы 				 = ДоступДенежныеДокументыУНФ(Параметры.Пользователь);
	ДоступДокументыПланированияДенег 		 = ДоступДокументыПланированияДенегУНФ(Параметры.Пользователь);
	
	УстановитьПривилегированныйРежим(Истина);
	Для каждого СвойстваПрофиля Из Профили Цикл
		
		СвойстваПрофиля.ПрофильОписание = Справочники.ПрофилиГруппДоступа.ПояснениеПоставляемогоПрофиля(СвойстваПрофиля.Профиль);
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
