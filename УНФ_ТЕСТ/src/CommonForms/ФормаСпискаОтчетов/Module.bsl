
#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняемаяКоманда;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Экспортный метод "Инициализировать" используется для того, чтобы список отчетов переоткрывался в уже открытой форме.
//
// Параметры:
//  Теги - Строка
//  ОграничиватьКоличествоОтображаемыхОтчетов - Булево
//
&НаСервере
Процедура Инициализировать(Теги = "", ОграничиватьКоличествоОтображаемыхОтчетов = Истина) Экспорт
	
	ИнициализироватьСервер(Теги, ОграничиватьКоличествоОтображаемыхОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресПустойКартинки = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПросмотрНедоступен, УникальныйИдентификатор);
	Параметры.Свойство("Ссылка", ПоОбъекту);
	
	Если Параметры.Свойство("Ссылка", ПоОбъекту) Тогда
		// Отчеты по объекту
		Если НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПоОбъекту)) И ТипЗнч(ПоОбъекту) <> Тип("Структура") Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Режим", "Видимость", Ложь);
	Иначе
		ЗагрузитьРежимИзНастроек();
	КонецЕсли;
	
	СлужебныеОтчеты.Очистить();
	СлужебныеОтчеты.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Отчеты.СлужебныйОтчетДобавлениеВПанельОтчетов));
	РазвернутьОтчетыДоВариантов(СлужебныеОтчеты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПараметрыЭкрана = ПолучитьИнформациюЭкрановКлиента();
	Если ЗначениеЗаполнено(ПараметрыЭкрана) Тогда
		ШиринаЭкрана = ПараметрыЭкрана[0].Ширина;
		ВысотаЭкрана = ПараметрыЭкрана[0].Высота;
	КонецЕсли; 
	
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВариантыОтчетов")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ВариантыДополнительныхОтчетов")
		Тогда
		ОбновитьОтображениеВарианта(ВыбранноеЗначение);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ОбновитьОтображениеВарианта(ВыбранноеЗначение.Вариант);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	ДанныеВыбора = НайтиТегиОтчеты(Текст, ЗначениеЗаполнено(ПоОбъекту));
	СтандартнаяОбработка = ДанныеВыбора.Количество()=0;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаПоиска = "";
		Если СлужебныеОтчеты.НайтиПоЗначению(ВыбранноеЗначение)<>Неопределено Тогда
			ОткрытьСлужебныйОтчет(ВыбранноеЗначение);
		Иначе
			ОткрытьОтчет(ВыбранноеЗначение);
		КонецЕсли; 
	ИначеЕсли ТипЗнч(ВыбранноеЗначение)=Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") Тогда 
		СтандартнаяОбработка = Ложь;
		СтрокаПоиска = "";
		ОткрытьДополнительныйОтчет(ВыбранноеЗначение);
	КонецЕсли; 
	
КонецПроцедуры
 
&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли; 
	Стр = НаложенныеФильтры.Добавить();
	Стр.Значение = СтрокаПоиска;
	Стр.Заголовок = СтрокаПоиска;
	Стр.Пользовательский = Истина;
	СтрокаПоиска = "";
	Если (Раздел = РазделИзбранные() И Избранное.Количество() = 0)
		ИЛИ (Раздел  = РазделПоследние() И История.Количество() = 0) Тогда
		Раздел = РазделВсеОтчеты();
	КонецЕсли;
	Если Раздел = РазделВнешние() Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Внешний", Истина);
		Если СписокОтчетов.НайтиСтроки(СтруктураОтбора).Количество()=0 Тогда
			Раздел = РазделВсеОтчеты();
		КонецЕсли;
	КонецЕсли;
	ОбновитьНаложенныеФильтры();
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделПриИзменении(Элемент)
	
	ОбновитьСписок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимКартинки(Команда)
	
	УстановитьРежимКартинкиНаСервере();
	
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимСписок(Команда)
	
	УстановитьРежимСписокНаСервере();
	
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеОтчетаПоИдентификатору(УИД)
	
	Результат = Новый Структура("Вариант, КлючВарианта, Отчет, Наименование, ИмяОтчета");
	
	НайденныеСтроки = СписокОтчетов.НайтиСтроки(Новый Структура("УИД", УИД));
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, НайденныеСтроки[0]);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ДанныеОтчетаПоВарианту(Вариант)
	
	Результат = Новый Структура("Вариант, КлючВарианта, Отчет, Наименование, ИмяОтчета");
	
	НайденныеСтроки = СписокОтчетов.НайтиСтроки(Новый Структура("Вариант", Вариант));
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат, НайденныеСтроки[0]);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеОтчетаПоВариантуИзБД(Вариант)
	
	Результат = Новый Структура("Вариант, КлючВарианта, Отчет, Наименование, ИмяОтчета");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вариант", Вариант);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Вариант,
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.Наименование КАК Наименование,
	|	ВариантыОтчетов.Отчет.Имя КАК ИмяОтчета
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Ссылка = &Вариант";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеОтчета = ДанныеОтчетаПоИдентификатору(СтрЗаменить(Элемент.Имя, "Образец", ""));
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.Вариант) Тогда
		Возврат;
	КонецЕсли;
	Если СлужебныеОтчеты.НайтиПоЗначению(ДанныеОтчета.Вариант)<>Неопределено Тогда
		ОткрытьСлужебныйОтчет(ДанныеОтчета.Вариант);
	ИначеЕсли ТипЗнч(ДанныеОтчета.Вариант)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		ОткрытьОтчет(ДанныеОтчета.Вариант);
	ИначеЕсли ТипЗнч(ДанныеОтчета.Вариант)=Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") Тогда
		ОткрытьДополнительныйОтчет(ДанныеОтчета.Вариант);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеОтчета = ДанныеОтчетаПоИдентификатору(СтрЗаменить(Элемент.Имя, "Образец", ""));
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	Если СлужебныеОтчеты.НайтиПоЗначению(ДанныеОтчета.Вариант)<>Неопределено Тогда
		ОткрытьСлужебныйОтчет(ДанныеОтчета.Вариант);
	ИначеЕсли ТипЗнч(ДанныеОтчета.Вариант) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		ОткрытьОтчет(ДанныеОтчета.Вариант);
	ИначеЕсли ТипЗнч(ДанныеОтчета.Вариант) = Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") Тогда
		ОткрытьДополнительныйОтчет(ДанныеОтчета.Вариант);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьФильтрНажатие(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Идентификатор = Элемент.Имя;
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИмяКнопки", Идентификатор);
	Строки = НаложенныеФильтры.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	Для каждого Стр Из Строки Цикл
		НаложенныеФильтры.Удалить(Стр);
	КонецЦикла; 
	ОбновитьНаложенныеФильтры();
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_Избранное(Команда)
	
	ИмяЭлемента = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	ДанныеОтчета = ДанныеОтчетаПоИдентификатору(СтрЗаменить(ИмяЭлемента, "Образец", ""));
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.Вариант) Тогда
		Возврат;
	КонецЕсли;
	Добавлен = Неопределено;
	ОбновитьИзбранное(ДанныеОтчета.Вариант, Команда.Имя, Добавлен);
	Если Добавлен = Истина Тогда
		Состояние(НСтр("ru = 'Отчет добавлен в избранное'"),,, БиблиотекаКартинок.БольшаяЖелтаяЗвезда);
	ИначеЕсли Добавлен=Ложь Тогда
		Состояние("Отчет удален из избранного",,, БиблиотекаКартинок.БольшаяСераяЗвезда);
	КонецЕсли;
	ОбновитьИнтерфейс();
	Если Добавлен = Ложь И Раздел = РазделИзбранные() Тогда
		ПодключитьОбработчикОжидания("ОбновитьСписок", 0.1, Истина);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НастройкаОтчета(Команда)
	
	ИмяЭлемента = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	ДанныеОтчета = ДанныеОтчетаПоИдентификатору(СтрЗаменить(ИмяЭлемента, "Образец", ""));
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("КлючОбъекта", ДанныеОтчета.Отчет);
	ПараметрыОткрытия.Вставить("Вариант", ДанныеОтчета.Вариант);
	ПараметрыОткрытия.Вставить("КлючТекущихНастроек", ДанныеОтчета.КлючВарианта);
	ПараметрыОткрытия.Вставить("РежимНастройки", Истина);
	Форма = ОткрытьФорму("ОбщаяФорма.СохранениеВариантаОтчетаУНФ", ПараметрыОткрытия, ЭтаФорма);
	Если Форма=Неопределено Тогда
		Состояние(НСтр("ru = 'Нет права редактирования настроек выбранного отчета'"));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УдалитьОтчет(Команда)
	
	ИмяЭлемента = Лев(Команда.Имя, Найти(Команда.Имя, "_")-1);
	ДанныеОтчета = ДанныеОтчетаПоИдентификатору(СтрЗаменить(ИмяЭлемента, "Образец", ""));
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.Вариант) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Вариант", ДанныеОтчета.Вариант);
	ПараметрыОткрытия.Вставить("РежимНастройки", Истина);
	ПараметрыОткрытия.Вставить("КлючОбъекта", ДанныеОтчета.Отчет);
	ПараметрыОткрытия.Вставить("КлючТекущихНастроек", ДанныеОтчета.КлючВарианта);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждениеУдаленияОтчета", ЭтотОбъект, ПараметрыОткрытия);
	
	ПоказатьВопрос(
	ОписаниеОповещения,
	СтрШаблон(НСтр("ru = 'Удалить отчет ""%1""?'"), ДанныеОтчета.Наименование),
	РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеУдаленияОтчета(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтчетНаСервере(Параметры.Вариант);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЕще(Команда)
	
	Если Не ЗначениеЗаполнено(КоличествоОтображаемыхОтчетов) Тогда
		Возврат;
	КонецЕсли;
	
	УИД = СписокОтчетов[КоличествоОтображаемыхОтчетов - 1].УИД;
	Если ИспользуетсяРежимКартинки() Тогда
		ТекущийЭлемент = Элементы[ИмяРеквизита(УИД)];
	Иначе
		ТекущийЭлемент = Элементы["Заглушка" + УИД];
	КонецЕсли;
	КоличествоОтображаемыхОтчетов = 0;
	
	ОбновитьЭлементыНаФорме(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтображениеСпискаОтчетов

&НаСервере
Процедура ОбновитьЭлементыНаФорме(УдалятьРеквизиты)
	
	ИзменитьРеквизитыФормы(УдалятьРеквизиты);
	
	УстановитьВидимостьКнопкиПоказатьЕще();
	
	Если СписокОтчетов.Количество() = 0 Тогда
		ПоказатьНадписьДляПустогоСписка();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьАдресаКартинок();
	
	Колонка = 0;
	
	УдалитьПодчиненныеЭлементыПоследнейГруппы(Колонка);
	
	ПолныеПраваНаВарианты = ВариантыОтчетов.ПолныеПраваНаВарианты();
	
	Для Каждого Стр Из СписокОтчетов Цикл
		
		Если СписокОтчетов.Индекс(Стр) >= КоличествоОтображаемыхОтчетов
			И КоличествоОтображаемыхОтчетов <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ Элементы.Найти("ГруппаОтчета" + Стр.УИД) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаГоризонтальная = НоваяГруппаДляДобавления(Колонка);
		ГруппаСРазделителем = НоваяГруппаСРазделителем(ГруппаГоризонтальная, Стр.УИД);
		ГруппаОтчета = НоваяГруппаОтчета(ГруппаСРазделителем, Стр);
		ПредставлениеОтчета = НовоеПредставлениеОтчета(ГруппаОтчета, Стр);
		ДобавитьКомандуИзбранное(ПредставлениеОтчета.КонтекстноеМеню, Стр);
		ДобавитьКомандуНастройкиОтчета(ПредставлениеОтчета.КонтекстноеМеню, Стр);
		ДобавитьКомандуУдалитьОтчет(ПредставлениеОтчета.КонтекстноеМеню, Стр, ПолныеПраваНаВарианты);
		
		Колонка = Колонка + 1;
		Если Колонка >= КоличествоОтчетовВСтроке() Тогда
			Колонка = 0;
		КонецЕсли;
		
		Если КэшЗначений.ЭтоМобильныйКлиент Тогда
			Продолжить;
		КонецЕсли;
		
		Если Колонка <> 0 Тогда
			ДекорацияОтступ = Элементы.Добавить("ДекорацияОтступ" + Стр.УИД, Тип("ДекорацияФормы"), ГруппаСРазделителем);
			ДекорацияОтступ.Вид = ВидДекорацииФормы.Надпись;
			ДекорацияОтступ.РастягиватьПоГоризонтали = Ложь;
			ДекорацияОтступ.Ширина = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Пока Колонка > 0 Цикл
		
		ИдентификаторЗаглушки = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		
		ГруппаЗаглушка = Элементы.Добавить("ГруппаЗаглушка" + ИдентификаторЗаглушки, Тип("ГруппаФормы"), НоваяГруппаСРазделителем(ГруппаГоризонтальная, ИдентификаторЗаглушки));
		ГруппаЗаглушка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЗаглушка.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаЗаглушка.ОтображатьЗаголовок = Ложь;
		ГруппаЗаглушка.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	
		ДекорацияОтступ = Элементы.Добавить("ДекорацияРазделитель" + ИдентификаторЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаглушка);
		ДекорацияОтступ.Вид = ВидДекорацииФормы.Картинка;
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		ДекорацияОтступ.Ширина = ШиринаПредставленияОтчета();
		Колонка = Колонка + 1;
		Если Колонка >= КоличествоОтчетовВСтроке() Тогда
			Колонка = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодчиненныеЭлементыПоследнейГруппы(Колонка)
	
	Если Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоследняяГруппа = Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы[Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы.Количество() - 1];
	
	// Удаляем заглушки
	МассивКУдалению = Новый Массив;
	Для Каждого ЭлементГруппы Из ПоследняяГруппа.ПодчиненныеЭлементы Цикл
		Если СтрНачинаетсяС(ЭлементГруппы.ПодчиненныеЭлементы[0].Имя, "ГруппаЗаглушка") Тогда
			МассивКУдалению.Добавить(ЭлементГруппы.ПодчиненныеЭлементы[0].ПодчиненныеЭлементы[0]);
			МассивКУдалению.Добавить(ЭлементГруппы.ПодчиненныеЭлементы[0]);
			МассивКУдалению.Добавить(ЭлементГруппы);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлементКУдалению Из МассивКУдалению Цикл
		Элементы.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
	// Определяем количество элементов в последней группе
	Колонка = ПоследняяГруппа.ПодчиненныеЭлементы.Количество();
	Если Колонка >= КоличествоОтчетовВСтроке() Тогда
		Колонка = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ШиринаПредставленияОтчета()
	
	Возврат 30;
	
КонецФункции

&НаСервере
Функция КоличествоОтчетовВСтроке()
	
	Если КэшЗначений.ЭтоМобильныйКлиент Тогда
		Возврат 1;
	Иначе
		Возврат 3;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ИмяРеквизита(Идентификатор)
	
	Возврат СтрШаблон("Образец%1", Идентификатор);
	
КонецФункции

&НаСервере
Процедура ИзменитьРеквизитыФормы(УдалятьРеквизиты)
	
	УдаляемыеРеквизиты = Новый Массив;
	Если УдалятьРеквизиты Тогда
		УдалитьЭлементыРекурсивно(Элементы.ГруппаСписокОтчетов, УдаляемыеРеквизиты);
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для каждого Стр Из СписокОтчетов Цикл
		
		Если Не ИспользуетсяРежимКартинки() Тогда
			Прервать;
		КонецЕсли;
		
		Если СписокОтчетов.Индекс(Стр) >= КоличествоОтображаемыхОтчетов
			И КоличествоОтображаемыхОтчетов <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если НЕ УдалятьРеквизиты
			И Элементы.Найти(ИмяРеквизита(Стр.УИД)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита(Стр.УИД), Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(0))));
		
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() > 0
		Или УдаляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКнопкиПоказатьЕще()
	
	ВидимостьКнопкиЕще = (СписокОтчетов.Количество() > КоличествоОтображаемыхОтчетов И КоличествоОтображаемыхОтчетов <> 0);
	
	Если Элементы.ПоказатьЕщеОтчеты.Видимость <> ВидимостьКнопкиЕще Тогда
		Элементы.ПоказатьЕщеОтчеты.Видимость = ВидимостьКнопкиЕще;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьНадписьДляПустогоСписка()
	
	ДекорацияНадпись = Элементы.Добавить("НадписьПустойСписок", Тип("ДекорацияФормы"), Элементы.ГруппаСписокОтчетов);
	ДекорацияНадпись.Вид = ВидДекорацииФормы.Надпись;
	ДекорацияНадпись.Заголовок = ТекстПодсказкиДляПустогоСписка();
	ДекорацияНадпись.РастягиватьПоГоризонтали = Истина;
	ДекорацияНадпись.РастягиватьПоВертикали = Истина;
	ДекорацияНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	ДекорацияНадпись.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	ДекорацияНадпись.ЦветТекста = ЦветаСтиля.НедоступныеДанныеЦвет;
	ДекорацияНадпись.Шрифт = Новый Шрифт(Новый Шрифт,, 12);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресаКартинок()
	
	Если Не ИспользуетсяРежимКартинки() Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Стр Из СписокОтчетов Цикл
		
		Если СписокОтчетов.Индекс(Стр) >= КоличествоОтображаемыхОтчетов
			И КоличествоОтображаемыхОтчетов <> 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(Стр.Образец)=Тип("Картинка") И НЕ Стр.Образец.Вид=ВидКартинки.Пустая Тогда
			Если ЭтоАдресВременногоХранилища(ЭтаФорма[ИмяРеквизита(Стр.УИД)]) И НЕ ЭтаФорма[ИмяРеквизита(Стр.УИД)]=АдресПустойКартинки Тогда
				ЭтаФорма[ИмяРеквизита(Стр.УИД)] = ПоместитьВоВременноеХранилище(Стр.Образец, ЭтаФорма[ИмяРеквизита(Стр.УИД)]);
			Иначе
				ЭтаФорма[ИмяРеквизита(Стр.УИД)] = ПоместитьВоВременноеХранилище(Стр.Образец, УникальныйИдентификатор);
			КонецЕсли; 
		Иначе
			ЭтаФорма[ИмяРеквизита(Стр.УИД)] = АдресПустойКартинки;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция НоваяГруппаДляДобавления(Знач Колонка)
	
	Если Колонка = 0 Тогда
		ИндексГруппы = Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы.Количество();
		ГруппаГоризонтальная = Элементы.Добавить("ГруппаГоризонтальная" + ИндексГруппы, Тип("ГруппаФормы"), Элементы.ГруппаСписокОтчетов);
		ГруппаГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаГоризонтальная.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ГруппаГоризонтальная.ОтображатьЗаголовок = Ложь;
		ГруппаГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		ГруппаГоризонтальная.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
		ГруппаГоризонтальная.РастягиватьПоВертикали = Ложь;
		ГруппаГоризонтальная.Объединенная = Ложь;
	Иначе
		ГруппаГоризонтальная = Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы[Элементы.ГруппаСписокОтчетов.ПодчиненныеЭлементы.Количество()-1];
	КонецЕсли;
	
	Возврат ГруппаГоризонтальная;
	
КонецФункции

&НаСервере
Функция НоваяГруппаСРазделителем(Знач ГруппаГоризонтальная, Знач ИдентификаторГруппы)
	
	ГруппаСРазделителем = Элементы.Добавить("ГруппаСРазделителем" + ИдентификаторГруппы, Тип("ГруппаФормы"), ГруппаГоризонтальная);
	ГруппаСРазделителем.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСРазделителем.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСРазделителем.ОтображатьЗаголовок = Ложь;
	ГруппаСРазделителем.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	
	Возврат ГруппаСРазделителем;
	
КонецФункции

&НаСервере
Функция НоваяГруппаОтчета(Знач ГруппаСРазделителем, Знач Стр)
	
	ГруппаОтчета = Элементы.Добавить("ГруппаОтчета" + Стр.УИД, Тип("ГруппаФормы"), ГруппаСРазделителем);
	ГруппаОтчета.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОтчета.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаОтчета.ШрифтЗаголовка = Новый Шрифт(Новый Шрифт,, 11);
	ГруппаОтчета.Заголовок = Стр.Наименование;
	ГруппаОтчета.ОтображатьЗаголовок = ИспользуетсяРежимКартинки();
	ГруппаОтчета.РастягиватьПоГоризонтали = Истина;
	ГруппаОтчета.РастягиватьПоВертикали = Ложь;
	ГруппаОтчета.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Возврат ГруппаОтчета;

КонецФункции

&НаСервере
Функция НовоеПредставлениеОтчета(Знач ГруппаОтчета, Знач Стр)
	
	Если ИспользуетсяРежимКартинки() Тогда
		Возврат НовоеПредставлениеОтчетаМиниатюра(ГруппаОтчета, Стр);
	Иначе
		Возврат НовоеПредставлениеОтчетаТекст(ГруппаОтчета, Стр);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НовоеПредставлениеОтчетаМиниатюра(Знач ГруппаОтчета, Знач Стр)
	
	ПредставлениеОтчета = Элементы.Добавить(ИмяРеквизита(Стр.УИД), Тип("ПолеФормы"), ГруппаОтчета);
	ПредставлениеОтчета.ПутьКДанным = ПредставлениеОтчета.Имя;
	ПредставлениеОтчета.Вид = ВидПоляФормы.ПолеКартинки;
	ПредставлениеОтчета.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПредставлениеОтчета.РазмерКартинки = РазмерКартинки.Пропорционально;
	ПредставлениеОтчета.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
	ПредставлениеОтчета.ЦветРамки = ЦветаСтиля.ЦветТекстаНевыбраннойКартинки;
	ПредставлениеОтчета.РастягиватьПоВертикали = Ложь;
	ПредставлениеОтчета.РастягиватьПоГоризонтали = Истина;
	ПредставлениеОтчета.Гиперссылка = Истина;
	ПредставлениеОтчета.Ширина = ШиринаПредставленияОтчета();
	ПредставлениеОтчета.Высота = Окр(25 / КоличествоОтчетовВСтроке() * ?(ШиринаЭкрана = 0, 1, (ШиринаЭкрана - 160) / 1209));
	ПредставлениеОтчета.УстановитьДействие("Нажатие", "Подключаемый_ПредставлениеНажатие");
	ПредставлениеОтчета.Подсказка = Стр.Описание;
	
	Возврат ПредставлениеОтчета;
	
КонецФункции

&НаСервере
Функция НовоеПредставлениеОтчетаТекст(Знач ГруппаОтчета, Знач Стр)
	
	ПредставлениеОтчета = Элементы.Добавить(ИмяРеквизита(Стр.УИД), Тип("ДекорацияФормы"), ГруппаОтчета);
	ПредставлениеОтчета.Вид = ВидДекорацииФормы.Надпись;
	ПредставлениеОтчета.Заголовок = ПредставлениеФорматированнаяСтрока(Стр);
	ПредставлениеОтчета.РастягиватьПоВертикали = Ложь;
	ПредставлениеОтчета.РастягиватьПоГоризонтали = Истина;
	ПредставлениеОтчета.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	ПредставлениеОтчета.Ширина = ШиринаПредставленияОтчета();
	ПредставлениеОтчета.Высота = 4;
	ПредставлениеОтчета.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ПредставлениеОбработкаНавигационнойСсылки");
	
	Заглушка = Элементы.Добавить("Заглушка" + Стр.УИД, Тип("ДекорацияФормы"), ГруппаОтчета);
	Заглушка.Вид = ВидДекорацииФормы.Картинка;
	Заглушка.РастягиватьПоВертикали = Ложь;
	Заглушка.РастягиватьПоГоризонтали = Истина;
	Заглушка.Ширина = 1;
	Заглушка.Высота = 1;
	Заглушка.Подсказка = Стр.Описание;
	
	Возврат ПредставлениеОтчета;
	
КонецФункции

&НаСервере
Функция ПредставлениеФорматированнаяСтрока(Стр)
	
	МассивСтрок = Новый Массив;
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Стр.Наименование, Новый Шрифт(, 12),,, "Сформировать"));
	
	Если ЗначениеЗаполнено(Стр.Описание) Тогда
		МассивСтрок.Добавить(Символы.ПС);
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Стр.Описание,, ЦветаСтиля.ПоясняющийТекст));
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

&НаСервере
Процедура ДобавитьКомандуИзбранное(КонтекстноеМеню, Знач Стр)
	
	Если ЗначениеЗаполнено(ПоОбъекту) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = ИмяРеквизита(Стр.УИД) + "_Избранное";
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Действие = "Подключаемый_Избранное";
	ОбновитьКомандуИзбранное(ИмяКоманды, Избранное.НайтиПоЗначению(Стр.Вариант) = Неопределено);
	Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), КонтекстноеМеню);
	Кнопка.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуНастройкиОтчета(КонтекстноеМеню, Знач Стр)
	
	ИмяКоманды = ИмяРеквизита(Стр.УИД) + "_НастройкиОтчета";
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Заголовок = НСтр("ru = 'Настройки отчета'");
	Команда.Картинка = БиблиотекаКартинок.Настройки;
	Команда.Действие = "Подключаемый_НастройкаОтчета";
	Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), КонтекстноеМеню);
	Кнопка.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьОтчет(КонтекстноеМеню, Стр, ПолныеПраваНаВарианты)
	
	Если Не Стр.Пользовательский Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Стр.АвторТекущийПользователь
		И Не ПолныеПраваНаВарианты Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "Образец" + Стр.УИД + "_УдалитьОтчет";
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Заголовок = НСтр("ru = 'Удалить'");
	Команда.Картинка = БиблиотекаКартинок.Удалить;
	Команда.Действие = "Подключаемый_УдалитьОтчет";
	Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), КонтекстноеМеню);
	Кнопка.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыРекурсивно(Группа, РеквизитыКУдалению)
	
	ЭлементыКУдалению = Новый Массив;
	Для каждого Элемент Из Группа.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			
			УдалитьЭлементыРекурсивно(Элемент, РеквизитыКУдалению);
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			
			РеквизитыКУдалению.Добавить(Элемент.ПутьКДанным);
			Значение = ЭтаФорма[Элемент.ПутьКДанным];
			Если ТипЗнч(Значение) = Тип("Строка")
				И ЭтоАдресВременногоХранилища(Значение)
				И Значение <> АдресПустойКартинки Тогда
				ПоместитьВоВременноеХранилище(Неопределено, Значение);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") 
			Или ТипЗнч(Элемент) = Тип("ДекорацияФормы") Тогда
			Для каждого Кнопка Из Элемент.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
				ЭлементыКУдалению.Добавить(Кнопка);
				Команды.Удалить(Команды[Кнопка.ИмяКоманды]);
			КонецЦикла;
		КонецЕсли;
		
		ЭлементыКУдалению.Добавить(Элемент);
		
	КонецЦикла;
	
	Для каждого Элемент Из ЭлементыКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандуИзбранное(ИмяКоманды, НеВИзбранном)
	
	Команда = Команды.Найти(ИмяКоманды);
	Если НеВИзбранном Тогда
		Команда.Заголовок = НСтр("ru = 'В избранное'");
		Команда.Картинка = БиблиотекаКартинок.БольшаяСераяЗвезда;
	Иначе
		Команда.Заголовок = НСтр("ru = 'Удалить из избранного'");
		Команда.Картинка = БиблиотекаКартинок.БольшаяЖелтаяЗвезда;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ТекстПодсказкиДляПустогоСписка()
	
	Если Раздел = РазделВсеОтчеты()
		Или Раздел = РазделВнешние()
		Или НаложенныеФильтры.Количество() > 0 Тогда
		
		Возврат НСтр("ru = 'Не найдены отчеты, отвечающие отбору.'");
		
	ИначеЕсли Раздел = РазделИзбранные() Тогда
		
		Возврат НСтр("ru = 'Пока ни один отчет не добавлен в избранное.'");
		
	ИначеЕсли Раздел = РазделПоследние() Тогда
		
		Возврат НСтр("ru = 'В этот список автоматически добавляются последние использованные отчеты. Список пока пуст.'");
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти 

#Область ОбщиеСерверныеПроцедурыИФункции

&НаСервере
Процедура ИнициализироватьСервер(Теги, ОграничиватьКоличествоОтображаемыхОтчетов)
	
	ОбновитьПараметрыФормы();
	
	Если ЗначениеЗаполнено(ПоОбъекту) Тогда
		// Отчеты по объекту
		Раздел = РазделВсеОтчеты();
		Элементы.Раздел.Видимость = Ложь;
	ИначеЕсли ПустаяСтрока(Теги) Тогда
		// Без отбора по тегам открываем избранные отчеты
		Раздел = РазделИзбранные();
		ОбновитьРазделИзбранное();
		Если Избранное.Количество()=0 Тогда
			Раздел = 0;
		КонецЕсли; 
	Иначе
		Раздел = РазделВсеОтчеты();
	КонецЕсли;
	
	НаложенныеФильтры.Очистить();
	Если НЕ ПустаяСтрока(Теги) Тогда
		ЗагрузитьТеги(Теги);
	КонецЕсли;
	ОбновитьОтображениеОтметокФильтров();
	
	УстановитьВидимостьИДостпность();
	ОбновитьСписокСервер(ОграничиватьКоличествоОтображаемыхОтчетов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыФормы()
	
	КэшЗначений = Новый Структура;
	
	СоответствиеОтчетов = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИдентификаторыОбъектовМетаданных.Ссылка,
	|	ИдентификаторыОбъектовМетаданных.Имя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|ГДЕ
	|	ИдентификаторыОбъектовМетаданных.ПолноеИмя ПОДОБНО ""Отчет.%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИдентификаторыОбъектовРасширений.Ссылка,
	|	ИдентификаторыОбъектовРасширений.Имя
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовРасширений КАК ИдентификаторыОбъектовРасширений
	|ГДЕ
	|	ИдентификаторыОбъектовРасширений.ПолноеИмя ПОДОБНО ""Отчет.%""";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеОтчетов.Вставить(Выборка.Ссылка, Выборка.Имя);
	КонецЦикла;
	КэшЗначений.Вставить("СоответствиеОтчетов", Новый ФиксированноеСоответствие(СоответствиеОтчетов));
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыДополнительныхОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|ГДЕ
	|	НЕ ВариантыДополнительныхОтчетов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.Отчет ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки";
	КэшЗначений.Вставить("ЕстьВнешниеОтчеты", НЕ Запрос.Выполнить().Пустой());
	
	ВариантИнтерфейса = ТекущийВариантИнтерфейсаКлиентскогоПриложения();
	КэшЗначений.Вставить("ВариантИнтерфейса", ВариантИнтерфейса);
	КэшЗначений.Вставить("ЭтоМобильныйКлиент", ОбщегоНазначения.ЭтоМобильныйКлиент());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИДостпность()
	
	Если КэшЗначений.ЕстьВнешниеОтчеты Тогда
		Элемент = Элементы.Раздел.СписокВыбора.НайтиПоЗначению("Внешние");
		Если Элемент = Неопределено Тогда
			Элементы.Раздел.СписокВыбора.Добавить("Внешние", НСтр("ru = 'Внешние'"));
		КонецЕсли; 
	Иначе
		Элемент = Элементы.Раздел.СписокВыбора.НайтиПоЗначению("Внешние");
		Если Элемент <> Неопределено Тогда
			Элементы.Раздел.СписокВыбора.Удалить(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИсторию()
	
	История.Очистить();
	СохраненнаяИстория = ХранилищеСистемныхНастроек.Загрузить("СписокОтчетов", "История");
	Если ТипЗнч(СохраненнаяИстория)=Тип("Массив") Тогда
		// Очищаем пустые строки и восстанавливаем историю
		УдалитьБитыеСсылки(СохраненнаяИстория); 
		История.ЗагрузитьЗначения(СохраненнаяИстория);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВариантСсылкаИзНавигационнойСсылкиИзбранного(СтрНавигационнаяСсылка)
	
	Если Не СтрНачинаетсяС(СтрНавигационнаяСсылка, "e1cib/app/Отчет.") <> 0 Тогда
		Возврат СсылкаИзНавигационнойСсылки(СтрНавигационнаяСсылка);
	КонецЕсли;
	
	ПолноеИмяОбъекта = СтрЗаменить(СтрНавигационнаяСсылка, "e1cib/app/", "");
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта);
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ИдентификаторОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	
	Возврат Справочники.ВариантыОтчетов.НайтиПоРеквизиту("Отчет", ИдентификаторОМ);
	
КонецФункции

&НаСервере
Функция СсылкаИзНавигационнойСсылки(СтрНавигационнаяСсылка)
	
	МенеджерВариантов = Неопределено;
	
	Если СтрНайти(СтрНавигационнаяСсылка, "Справочник.ВариантыОтчетов") <> 0 Тогда
		МенеджерВариантов = Справочники.ВариантыОтчетов;
	ИначеЕсли СтрНайти(СтрНавигационнаяСсылка, "Справочник.ВариантыДополнительныхОтчетов") <> 0 Тогда
		МенеджерВариантов = Справочники.ВариантыДополнительныхОтчетов;
	КонецЕсли;
	
	Если МенеджерВариантов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Позиция = СтрНайти(СтрНавигационнаяСсылка, "?ref=");
	Если Позиция = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УИДСсылки = Сред(СтрНавигационнаяСсылка, Позиция + 5, 32);
	УИДСтрока = СтрШаблон("%1-%2-%3-%4-%5", Прав(УИДСсылки, 8), Сред(УИДСсылки, 21, 4), Сред(УИДСсылки, 17, 4), Лев(УИДСсылки, 4), Сред(УИДСсылки, 5, 12));
	
	Если Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(УИДСтрока) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат МенеджерВариантов.ПолучитьСсылку(Новый УникальныйИдентификатор(УИДСтрока));
	
КонецФункции

&НаСервере
Процедура ОбновитьИзбранное(Вариант, ИмяКоманды, Добавление)
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Вариант);
	
	Добавление = Истина;
	
	ИзбранноеРаботыПользователя = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
	Если ИзбранноеРаботыПользователя = Неопределено Тогда
		ИзбранноеРаботыПользователя = Новый ИзбранноеРаботыПользователя;
	КонецЕсли;
	
	Для каждого Элемент Из ИзбранноеРаботыПользователя Цикл
		Если Элемент.НавигационнаяСсылка <> НавигационнаяСсылка Тогда
			Продолжить;
		КонецЕсли;
		Добавление = Ложь;
		НайденныйЭлемент = Элемент;
	КонецЦикла;
	
	Если Добавление Тогда
		Элемент = Новый ЭлементИзбранногоРаботыПользователя;
		Элемент.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Вариант);
		ИзбранноеРаботыПользователя.Добавить(Элемент);
	Иначе
		ИзбранноеРаботыПользователя.Удалить(ИзбранноеРаботыПользователя.Индекс(НайденныйЭлемент));
	КонецЕсли;
	ОбновитьКомандуИзбранное(ИмяКоманды, НЕ Добавление);
	
	ХранилищеСистемныхНастроек.Сохранить("Общее/ИзбранноеРаботыПользователя", "", ИзбранноеРаботыПользователя);
	
КонецПроцедуры
 
&НаСервере
Процедура ЗагрузитьТеги(Теги)
	
	Если ТипЗнч(Теги)=Тип("Строка") Тогда
		МассивТегов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Теги);
	ИначеЕсли ТипЗнч(Теги)=Тип("Массив") Тогда
		МассивТегов = Теги;
	ИначеЕсли ТипЗнч(Теги)=Тип("СписокЗначений") Тогда
		МассивТегов = Теги.ВыгрузитьЗначения();
	Иначе
		Возврат;
	КонецЕсли;
	
	Для каждого Тег Из МассивТегов Цикл
		Стр = НаложенныеФильтры.Добавить();
		Стр.Значение = СокрЛП(Тег);
		Стр.Заголовок = Стр.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаложенныеФильтры()
	
	ОбновитьОтображениеОтметокФильтров();
	ОбновитьСписокСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеОтметокФильтров()
	
	Если КэшЗначений.ЭтоМобильныйКлиент Тогда
		МаксимальнаяДлинаСтрокиОтметок = 25;
	ИначеЕсли КэшЗначений.ВариантИнтерфейса=ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		МаксимальнаяДлинаСтрокиОтметок = 65;
	Иначе
		МаксимальнаяДлинаСтрокиОтметок = 125;
	КонецЕсли; 
	
	МассивКУдалению = Новый Массив;
	Для каждого Элемент Из Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы Цикл
		Для каждого ПодЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			МассивКУдалению.Добавить(ПодЭлемент);
		КонецЦикла;
		МассивКУдалению.Добавить(Элемент);
	КонецЦикла; 
	
	Для каждого Элемент Из МассивКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	ТекущаяДлинаСтрокиОтметок = 0;
	
	ВысотаОтметкиФильтра = 1;
	Если КэшЗначений.ЭтоМобильныйКлиент Тогда
		ВысотаОтметкиФильтра = 0;
	КонецЕсли;
	
	Для каждого Стр Из НаложенныеФильтры Цикл
		
		Если ПустаяСтрока(Стр.ИмяКнопки) Тогда
			Стр.ИмяКнопки = "ОтметкаФильтра" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		КонецЕсли; 
		
		Если КэшЗначений.ВариантИнтерфейса=ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
			ДлинаЭлемента = Окр(СтрДлина(Стр.Заголовок)*0.8+4);
		Иначе
			ДлинаЭлемента = Окр(СтрДлина(Стр.Заголовок)*0.85+4);
		КонецЕсли; 
		
		Если Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество()=0 ИЛИ ТекущаяДлинаСтрокиОтметок+ДлинаЭлемента>МаксимальнаяДлинаСтрокиОтметок Тогда
			Индекс = Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество()+1;
			ГруппаСтрока = Элементы.Добавить("СтрокаОтметокФильтров_"+Индекс, Тип("ГруппаФормы"), Элементы.СтрокиОтметокФильтров);
			ГруппаСтрока.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаСтрока.ОтображатьЗаголовок = Ложь;
			ГруппаСтрока.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
			ГруппаСтрока.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаСтрока.РастягиватьПоГоризонтали = Истина;
			ГруппаСтрока.Высота = ВысотаОтметкиФильтра;
			ДекорацияНаполнитель = Элементы.Добавить("ДекорацияНаполнитель_"+Индекс, Тип("ДекорацияФормы"), ГруппаСтрока);
			ДекорацияНаполнитель.РастягиватьПоГоризонтали = Истина;
			ДекорацияНаполнитель.РастягиватьПоВертикали = Ложь;
			ДекорацияНаполнитель.Высота = ВысотаОтметкиФильтра;
			ТекущаяДлинаСтрокиОтметок = 0;
		Иначе
			ГруппаСтрока = Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы[Элементы.СтрокиОтметокФильтров.ПодчиненныеЭлементы.Количество()-1];
		КонецЕсли;
		
		ЭлементыЗаголовка = Новый Массив;
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(Стр.Заголовок));
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ОчиститьЗначение12х12, , , , Стр.ИмяКнопки));
		
		ЭлементОтметка = Элементы.Вставить(Стр.ИмяКнопки, Тип("ДекорацияФормы"), ГруппаСтрока, ГруппаСтрока.ПодчиненныеЭлементы[ГруппаСтрока.ПодчиненныеЭлементы.Количество()-1]);
		ЭлементОтметка.Вид = ВидДекорацииФормы.Надпись;
		ЭлементОтметка.Заголовок = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		ЭлементОтметка.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
		ЭлементОтметка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтметка.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		ЭлементОтметка.Ширина = ДлинаЭлемента;
		ЭлементОтметка.Высота = ВысотаОтметкиФильтра;
		ЭлементОтметка.РастягиватьПоГоризонтали = Ложь;
		ЭлементОтметка.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_УдалитьФильтрНажатие");
		
		ТекущаяДлинаСтрокиОтметок = ТекущаяДлинаСтрокиОтметок+ДлинаЭлемента;
	
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок()
	
	ОбновитьСписокСервер();
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСервер(ОграничиватьКоличествоОтображаемыхОтчетов = Истина)
	
	ЗаполнитьТаблицуОтчетов();
	
	Если ОграничиватьКоличествоОтображаемыхОтчетов Тогда
		ОграничитьКоличествоОтображаемыхОтчетов();
	КонецЕсли;
	
	ОбновитьЭлементыНаФорме(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОграничитьКоличествоОтображаемыхОтчетов()
	
	Если Раздел = РазделПоследние()
		Или Раздел = РазделИзбранные()
		Или ЕстьПользовательскиеФильтры() Тогда
		КоличествоОтображаемыхОтчетов = 21;
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Рекомендуемый", Истина);
	РекомендуемыеОтчеты = СписокОтчетов.НайтиСтроки(СтруктураОтбора);
	КоличествоОтображаемыхОтчетов = Мин(РекомендуемыеОтчеты.Количество(), 21);
	
КонецПроцедуры

&НаСервере
Функция ЕстьПользовательскиеФильтры()
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Пользовательский", Истина);
	
	Возврат НаложенныеФильтры.НайтиСтроки(СтруктураОтбора).Количество() > 0;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуОтчетов()
	
	Если Раздел = РазделПоследние() Тогда
		ОбновитьИсторию();
	КонецЕсли;
	
	ОбновитьРазделИзбранное();
	
	СписокОтчетов.Очистить();
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст = 
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Вариант,
	|	ВариантыОтчетов.Наименование КАК Порядок,
	|	0 КАК Рекомендуемый
	|ПОМЕСТИТЬ ВариантыОтчетов
	|{ВЫБРАТЬ
	|	Вариант.* КАК Ссылка}
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыДополнительныхОтчетов.Ссылка,
	|	ВариантыДополнительныхОтчетов.Наименование,
	|	0
	|{ВЫБРАТЬ
	|	Вариант.* КАК Ссылка}
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТабВариантыОтчетов.Вариант КАК Справочник.ВариантыОтчетов) КАК Вариант,
	|	ТабВариантыОтчетов.Порядок КАК Порядок,
	|	ВариантыОтчетов.Отчет КАК Отчет,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Отчет ССЫЛКА Справочник.ИдентификаторыОбъектовМетаданных
	|				ИЛИ ВариантыОтчетов.Отчет ССЫЛКА Справочник.ИдентификаторыОбъектовРасширений
	|			ТОГДА ВариантыОтчетов.Отчет.Имя
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяОтчета,
	|	ВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ВариантыОтчетов.Наименование КАК Наименование,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Автор = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АвторТекущийПользователь,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
	|			ТОГДА ЕСТЬNULL(ВариантыОтчетов.ПредопределенныйВариант.Описание, """")
	|		ИНАЧЕ ВариантыОтчетов.Описание
	|	КОНЕЦ КАК Описание,
	|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """") КАК Теги,
	|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Образец, НЕОПРЕДЕЛЕНО) КАК Образец,
	|	ВариантыОтчетов.Наименование + ПОДСТРОКА(ВЫБОР
	|			КОГДА ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
	|				ТОГДА ЕСТЬNULL(ВариантыОтчетов.ПредопределенныйВариант.Описание, """")
	|			ИНАЧЕ ВариантыОтчетов.Описание
	|		КОНЕЦ, 1, 1024) + ПОДСТРОКА(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """"), 1, 1024) КАК СтрокаПоиска,
	|	ЕСТЬNULL(ВариантыОтчетов.ПредопределенныйВариант.Включен, ИСТИНА) КАК Включен,
	|	ВЫБОР
	|		КОГДА ТабВариантыОтчетов.Рекомендуемый = 0
	|				ИЛИ НастройкиВариантовОтчетовУНФ.ИзмененаПользователем
	|			ТОГДА ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Рекомендуемый, ЛОЖЬ)
	|		ИНАЧЕ ТабВариантыОтчетов.Рекомендуемый
	|	КОНЕЦ КАК Рекомендуемый,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Отчет ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Внешний
	|ИЗ
	|	ВариантыОтчетов КАК ТабВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО ТабВариантыОтчетов.Вариант = ВариантыОтчетов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|		ПО ТабВариантыОтчетов.Вариант = НастройкиВариантовОтчетовУНФ.Вариант
	|ГДЕ
	|	ТабВариантыОтчетов.Вариант ССЫЛКА Справочник.ВариантыОтчетов
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.Отчет В(&ОтчетыПользователя)
	|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеПредопределенныеВарианты)
	|	И НЕ ТабВариантыОтчетов.Вариант В (&ОтключенныеВарианты)
	|	И (ВариантыОтчетов.ТолькоДляАвтора
	|				И ВариантыОтчетов.Автор = &ТекущийПользователь
	|			ИЛИ ВариантыОтчетов.Автор В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка))
	|			ИЛИ ВариантыОтчетов.Ссылка В
	|				(ВЫБРАТЬ
	|					НастройкиВариантовОтчетов.Вариант
	|				ИЗ
	|					РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетов
	|				ГДЕ
	|					НастройкиВариантовОтчетов.Пользователь = &ТекущийПользователь
	|					И НастройкиВариантовОтчетов.Подсистема В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовРасширений.ПустаяСсылка))
	|					И НастройкиВариантовОтчетов.Видимость))
	|{ГДЕ
	|	ВариантыОтчетов.Ссылка.* КАК Ссылка,
	|	(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """")) КАК Теги,
	|	ВариантыОтчетов.Описание,
	|	ВариантыОтчетов.Наименование,
	|	(ВЫБОР
	|			КОГДА ТабВариантыОтчетов.Рекомендуемый = 0
	|				ТОГДА ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Рекомендуемый, ЛОЖЬ)
	|			ИНАЧЕ ТабВариантыОтчетов.Рекомендуемый
	|		КОНЕЦ) КАК Рекомендуемый,
	|	ВариантыОтчетов.Отчет.*,
	|	(ВариантыОтчетов.Наименование + ПОДСТРОКА(ВЫБОР
	|				КОГДА ПОДСТРОКА(ВариантыОтчетов.Описание, 1, 1) = """"
	|					ТОГДА ЕСТЬNULL(ВариантыОтчетов.ПредопределенныйВариант.Описание, """")
	|				ИНАЧЕ ВариантыОтчетов.Описание
	|			КОНЕЦ, 1, 1024) + ПОДСТРОКА(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """"), 1, 1024)) КАК СтрокаПоиска,
	|	(ЕСТЬNULL(ВариантыОтчетов.ПредопределенныйВариант.Включен, ИСТИНА)) КАК Включен,
	|	(ВЫБОР
	|			КОГДА ВариантыОтчетов.Отчет ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК Внешний}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТабВариантыОтчетов.Вариант КАК Справочник.ВариантыДополнительныхОтчетов),
	|	ТабВариантыОтчетов.Порядок,
	|	ВариантыДополнительныхОтчетов.Отчет,
	|	"""",
	|	ВариантыДополнительныхОтчетов.ИдентификаторКоманды,
	|	ВариантыДополнительныхОтчетов.Наименование,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА ВариантыДополнительныхОтчетов.Автор = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	"""",
	|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """"),
	|	ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Образец, НЕОПРЕДЕЛЕНО),
	|	ВариантыДополнительныхОтчетов.Наименование + ПОДСТРОКА(ВариантыДополнительныхОтчетов.Описание, 1, 1024) + ПОДСТРОКА(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """"), 1, 1024),
	|	НЕ ВариантыДополнительныхОтчетов.Контекстный,
	|	ВЫБОР
	|		КОГДА ТабВариантыОтчетов.Рекомендуемый = 0
	|				ИЛИ НастройкиВариантовОтчетовУНФ.ИзмененаПользователем
	|			ТОГДА ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Рекомендуемый, ЛОЖЬ)
	|		ИНАЧЕ ТабВариантыОтчетов.Рекомендуемый
	|	КОНЕЦ,
	|	ИСТИНА
	|ИЗ
	|	ВариантыОтчетов КАК ТабВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|		ПО ТабВариантыОтчетов.Вариант = ВариантыДополнительныхОтчетов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|		ПО ТабВариантыОтчетов.Вариант = НастройкиВариантовОтчетовУНФ.Вариант
	|ГДЕ
	|	ТабВариантыОтчетов.Вариант ССЫЛКА Справочник.ВариантыДополнительныхОтчетов
	|	И НЕ ВариантыДополнительныхОтчетов.ПометкаУдаления
	|	И (НЕ ВариантыДополнительныхОтчетов.ТолькоДляАвтора
	|			ИЛИ ВариантыДополнительныхОтчетов.Автор = &ТекущийПользователь)
	|{ГДЕ
	|	(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """")) КАК Теги,
	|	ВариантыДополнительныхОтчетов.Наименование КАК Наименование,
	|	ВариантыДополнительныхОтчетов.Описание КАК Описание,
	|	(ВЫБОР
	|			КОГДА ТабВариантыОтчетов.Рекомендуемый = 0
	|				ТОГДА ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Рекомендуемый, ЛОЖЬ)
	|			ИНАЧЕ ТабВариантыОтчетов.Рекомендуемый
	|		КОНЕЦ) КАК Рекомендуемый,
	|	ВариантыДополнительныхОтчетов.Отчет.* КАК Отчет,
	|	ВариантыДополнительныхОтчетов.Ссылка.* КАК Ссылка,
	|	(ВариантыДополнительныхОтчетов.Наименование + ПОДСТРОКА(ВариантыДополнительныхОтчетов.Описание, 1, 1024) + ПОДСТРОКА(ЕСТЬNULL(НастройкиВариантовОтчетовУНФ.Теги, """"), 1, 1024)) КАК СтрокаПоиска,
	|	(НЕ ВариантыДополнительныхОтчетов.Контекстный) КАК Включен,
	|	(ИСТИНА) КАК Внешний}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Рекомендуемый УБЫВ,
	|	Порядок";
	
	ОтчетыПользователя = ВариантыОтчетов.ОтчетыТекущегоПользователя();
	ОтключенныеВарианты = ОтчетыУНФПовтИсп.ВариантыНедоступныеПоФО();
	
	Построитель.Параметры.Вставить("ОтчетыПользователя", ОтчетыПользователя);
	Построитель.Параметры.Вставить("ОтключенныеПредопределенныеВарианты", ОтключенныеВарианты);
	Построитель.Параметры.Вставить("ОтключенныеВарианты", ОтключенныеВарианты);
	Построитель.Параметры.Вставить("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	Если Раздел = РазделИзбранные() Тогда
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Избранное.ВыгрузитьЗначения());
		УстановитьОтборПостроителя(Построитель, "Ссылка", ВидСравнения.ВСписке, Список);
	КонецЕсли;
	
	Если Раздел = РазделВнешние() Тогда
		УстановитьОтборПостроителя(Построитель, "Внешний", ВидСравнения.Равно, Истина);
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ПоОбъекту) Тогда
		УстановитьОтборПостроителя(Построитель, "Включен", ВидСравнения.Равно, Истина);
	КонецЕсли;
	
	ДобавитьОтборыТеги(Построитель);
	
	Запрос = Построитель.ПолучитьЗапрос();
	
	Если Раздел = РазделПоследние() Тогда
		МодифицироватьЗапросИстория(Запрос);
	ИначеЕсли ЗначениеЗаполнено(ПоОбъекту) Тогда
		МодифицироватьЗапросКонтекстныеОтчеты(Запрос);
	КонецЕсли; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрОтчет = СписокОтчетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрОтчет, Выборка, "Отчет, ИмяОтчета, Вариант, КлючВарианта, Наименование, Теги, Описание, Пользовательский, АвторТекущийПользователь, Рекомендуемый, Внешний");
		Если ТипЗнч(СтрОтчет.Вариант) = Тип("СправочникСсылка.ВариантыОтчетов")
			Или ТипЗнч(СтрОтчет.Вариант) = Тип("СправочникСсылка.ВариантыДополнительныхОтчетов") Тогда
			СтрОтчет.УИД = СтрЗаменить(СтрОтчет.Вариант.УникальныйИдентификатор(), "-", "");
		Иначе
			СтрОтчет.УИД = СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		КонецЕсли; 
		Если ТипЗнч(Выборка.Образец) = Тип("ХранилищеЗначения") Тогда
			Образец = Выборка.Образец.Получить();
			СтрОтчет.Образец = Образец;
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьДоступность(СписокОтчетов);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРазделИзбранное()
	
	Избранное.Очистить();
	ИзбранноеРаботыПользователя = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
	Если ИзбранноеРаботыПользователя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Элемент Из ИзбранноеРаботыПользователя Цикл
		Вариант = ВариантСсылкаИзНавигационнойСсылкиИзбранного(Элемент.НавигационнаяСсылка);
		Если ЗначениеЗаполнено(Вариант) Тогда
			Избранное.Добавить(Вариант);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура МодифицироватьЗапросИстория(Запрос)
		
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	Таб.Вариант КАК Вариант,
	|	Таб.Порядок КАК Порядок, 
	|	0 КАК Рекомендуемый 
	|ПОМЕСТИТЬ ВариантыОтчетов
	|ИЗ
	|	&Таб КАК Таб"+Сред(Запрос.Текст, Найти(Запрос.Текст, ";"));
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Вариант", Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов,СправочникСсылка.ВариантыДополнительныхОтчетов"));
	Таб.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ии = 0;
	Для каждого Элемент Из История Цикл
		Стр = Таб.Добавить();
		Стр.Вариант = Элемент.Значение;
		Стр.Порядок = ии;
		ии = ии+1;
	КонецЦикла; 
	Запрос.УстановитьПараметр("Таб", Таб);
	
	// Для истории не сортируем по рекомендуемым
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Рекомендуемый УБЫВ,", "");
		
КонецПроцедуры

&НаСервере
Процедура МодифицироватьЗапросКонтекстныеОтчеты(Запрос)
	
	Если ТипЗнч(ПоОбъекту) = Тип("Структура") И ПоОбъекту.Свойство("Контекст") Тогда
		КонтекстОтчетов = ПоОбъекту.Контекст;
	Иначе
		КонтекстОтчетов = ПоОбъекту;
	КонецЕсли;
	Если ТипЗнч(КонтекстОтчетов) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Идентификатор = КонтекстОтчетов;
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(КонтекстОтчетов)) Тогда 
		Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КонтекстОтчетов.Метаданные());
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.Вариант КАК Вариант,
	|	Таб.Порядок КАК Порядок, 
	|	Таб.Рекомендуемый КАК Рекомендуемый 
	|ПОМЕСТИТЬ ВариантыОтчетов
	|ИЗ
	|	&Таб КАК Таб"+Сред(Запрос.Текст, Найти(Запрос.Текст, ";"));
	
	СоответствиеПолей = Новый Соответствие;
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Вариант", Новый ОписаниеТипов("СправочникСсылка.ВариантыОтчетов,СправочникСсылка.ВариантыДополнительныхОтчетов"));
	Таб.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	Таб.Колонки.Добавить("Рекомендуемый", Новый ОписаниеТипов("Булево"));
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст =
	"ВЫБРАТЬ
	|	ПривязкаПолейОтчетовУНФ.Вариант,
	|	ПривязкаПолейОтчетовУНФ.Поле,
	|	ПривязкаПолейОтчетовУНФ.СложныйАлгоритм КАК СложныйАлгоритм,
	|	ПривязкаПолейОтчетовУНФ.Рекомендуемый КАК Рекомендуемый
	|ИЗ
	|	РегистрСведений.ПривязкаПолейОтчетовУНФ КАК ПривязкаПолейОтчетовУНФ
	|{ГДЕ
	|	ПривязкаПолейОтчетовУНФ.Объект.*,
	|	ПривязкаПолейОтчетовУНФ.ДополнительныйРазрез.*}
	|
	|УПОРЯДОЧИТЬ ПО
	|	Рекомендуемый УБЫВ,
	|	ПривязкаПолейОтчетовУНФ.Вариант.Наименование";
	
	УстановитьОтборПостроителя(Построитель, "Объект", ВидСравнения.Равно, Идентификатор);
	ДобавитьОтборПоДополнительномуРазделителю(Построитель);
	
	Выборка = Построитель.ПолучитьЗапрос().Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОписаниеСвязи = Новый Структура;
		ОписаниеСвязи.Вставить("Поле", Выборка.Поле);
		ОписаниеСвязи.Вставить("СложныйАлгоритм", Выборка.СложныйАлгоритм);
		Если СоответствиеПолей.Получить(Выборка.Вариант) = Неопределено Тогда
			Стр = Таб.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Выборка);
			Стр.Порядок = Таб.Количество();
		КонецЕсли; 
		СоответствиеПолей.Вставить(Выборка.Вариант, ОписаниеСвязи);
	КонецЦикла;

	Запрос.УстановитьПараметр("Таб", Таб);
	СвязанныеПоля = Новый ФиксированноеСоответствие(СоответствиеПолей);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборПоДополнительномуРазделителю(Построитель)
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Неопределено);
	ДопРазрез = Неопределено;
	Если ТипЗнч(ПоОбъекту) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДопРазрез = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоОбъекту, "ТипНоменклатуры");
	ИначеЕсли ТипЗнч(ПоОбъекту) = Тип("СправочникСсылка.СтруктурныеЕдиницы") Тогда
		ДопРазрез = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоОбъекту, "ТипСтруктурнойЕдиницы");
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПоОбъекту))
		И НЕ ПоОбъекту.Метаданные().Реквизиты.Найти("ВидОперации")=Неопределено Тогда
		ДопРазрез = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПоОбъекту, "ВидОперации");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопРазрез) Тогда
		СписокТипов.Добавить(ДопРазрез);
		СписокТипов.Добавить(Новый(ТипЗнч(ДопРазрез)));
		УстановитьОтборПостроителя(Построитель, "ДополнительныйРазрез", ВидСравнения.ВСписке, СписокТипов);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборыТеги(Построитель)
	
	ОбновитьЗаголовок();
	
	Для каждого Стр Из НаложенныеФильтры Цикл
		Если ПустаяСтрока(Стр.Значение) Тогда
			Продолжить;
		КонецЕсли;
		УстановитьОтборПостроителя(Построитель, "СтрокаПоиска", ВидСравнения.Содержит, Стр.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовок()
	
	Если ЗначениеЗаполнено(ПоОбъекту) И ТипЗнч(ПоОбъекту) = Тип("Структура") И ПоОбъекту.Свойство("Контекст") Тогда
		
		Заголовок = СтрШаблон(НСтр("ru = 'Отчеты по: %1'"), ПоОбъекту.Контекст);
		
	ИначеЕсли ЗначениеЗаполнено(ПоОбъекту) Тогда
		
		Заголовок = СтрШаблон(НСтр("ru = 'Отчеты по: %1'"), ПоОбъекту);
		
	ИначеЕсли Раздел = РазделВсеОтчеты() Тогда
		
		Заголовок = НСтр("ru = 'Все отчеты'");
		
	ИначеЕсли Раздел = РазделИзбранные() Тогда
		
		Заголовок = НСтр("ru = 'Избранные отчеты'");
		
	ИначеЕсли Раздел = РазделПоследние() Тогда
		
		Заголовок = НСтр("ru = 'Последние отчеты'");
		
	ИначеЕсли Раздел = РазделВнешние() Тогда
		
		Заголовок = НСтр("ru = 'Внешние отчеты'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОтборПостроителя(Построитель, Поле, ВидСравнения, Значение)
	
	ЭлементОтбора = Построитель.Отбор.Добавить(Поле);
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	ЭлементОтбора.Значение = Значение;
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры 

&НаСервере
Процедура ПроверитьДоступность(ТаблицаОтчетов)
	
	МассивНедоступных = Новый Массив;
	
	Для Каждого Стр Из ТаблицаОтчетов Цикл
		
		Если ТипЗнч(Стр.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных")
			И ТипЗнч(Стр.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.Отчеты[КэшЗначений.СоответствиеОтчетов.Получить(Стр.Отчет)];
		Если НЕ ПравоДоступа("Просмотр", ОбъектМетаданных) Тогда
			МассивНедоступных.Добавить(Стр);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из МассивНедоступных Цикл
		ТаблицаОтчетов.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьБитыеСсылки(Массив)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылки", Массив);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Ссылка В(&Ссылки)
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВариантыДополнительныхОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|ГДЕ
	|	ВариантыДополнительныхОтчетов.Ссылка В(&Ссылки)
	|	И НЕ ВариантыДополнительныхОтчетов.ПометкаУдаления";
	МассивНайденных = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Количество = Массив.Количество();
	Для ии = 0 По Количество-1 Цикл
		Индекс = Количество-1-ии;
		Отчет = Массив[Индекс];
		Если МассивНайденных.Найти(Отчет)=Неопределено Тогда
			Массив.Удалить(Индекс);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция НайтиТегиОтчеты(Текст, КонтекстноеОткрытие)
	
	Список = Новый СписокЗначений;
	Если ПустаяСтрока(Текст) Тогда
		Возврат Список;
	КонецЕсли; 
	ОтчетыПользователя = ВариантыОтчетов.ОтчетыТекущегоПользователя();
	ОтключенныеПредопределенныеВарианты = ОтчетыУНФПовтИсп.ПредопределенныеВариантыНедоступныеПоФО();
	ОтключенныеВарианты = ОтчетыУНФПовтИсп.ВариантыНедоступныеПоФО();
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("КонтекстноеОткрытие", КонтекстноеОткрытие);
	Запрос.УстановитьПараметр("ОтчетыПользователя", ОтчетыПользователя);
	Запрос.УстановитьПараметр("ОтключенныеПредопределенныеВарианты", ОтключенныеПредопределенныеВарианты);
	Запрос.УстановитьПараметр("ОтключенныеВарианты", ОтключенныеВарианты);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 10
	|	1 КАК Порядок,
	|	ТегиОтчетов.Ссылка КАК Ссылка,
	|	ТегиОтчетов.Наименование КАК Представление
	|ИЗ
	|	Справочник.ТегиОтчетов КАК ТегиОтчетов
	|ГДЕ
	|	ТегиОтчетов.Наименование ПОДОБНО &Текст + ""%""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	2,
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетовУНФ КАК НастройкиВариантовОтчетовУНФ
	|		ПО (НастройкиВариантовОтчетовУНФ.Вариант = ВариантыОтчетов.Ссылка)
	|ГДЕ
	|	ВариантыОтчетов.Наименование ПОДОБНО ""%"" + &Текст + ""%""
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|	И ВариантыОтчетов.Отчет В(&ОтчетыПользователя)
	|	И НЕ ВариантыОтчетов.ПредопределенныйВариант В (&ОтключенныеПредопределенныеВарианты)
	|	И НЕ ВариантыОтчетов.Ссылка В (&ОтключенныеВарианты)
	|	И (ВариантыОтчетов.ТолькоДляАвтора
	|				И ВариантыОтчетов.Автор = &Пользователь
	|			ИЛИ ВариантыОтчетов.Автор В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка))
	|			ИЛИ ВариантыОтчетов.Ссылка В
	|				(ВЫБРАТЬ
	|					НастройкиВариантовОтчетов.Вариант
	|				ИЗ
	|					РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетов
	|				ГДЕ
	|					НастройкиВариантовОтчетов.Пользователь = &Пользователь
	|					И НастройкиВариантовОтчетов.Подсистема В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовМетаданных.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ИдентификаторыОбъектовРасширений.ПустаяСсылка))
	|					И НастройкиВариантовОтчетов.Видимость))
	|	И (ВариантыОтчетов.ПредопределенныйВариант.Включен
	|			ИЛИ ВариантыОтчетов.Пользовательский
	|			ИЛИ &КонтекстноеОткрытие
	|			ИЛИ ВариантыОтчетов.ТипОтчета = ЗНАЧЕНИЕ(Перечисление.ТипыОтчетов.Дополнительный))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	2,
	|	ВариантыДополнительныхОтчетов.Ссылка,
	|	ВариантыДополнительныхОтчетов.Наименование
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|ГДЕ
	|	ВариантыДополнительныхОтчетов.Наименование ПОДОБНО ""%"" + &Текст + ""%""
	|	И НЕ ВариантыДополнительныхОтчетов.ПометкаУдаления
	|	И (НЕ ВариантыДополнительныхОтчетов.ТолькоДляАвтора
	|			ИЛИ ВариантыДополнительныхОтчетов.Автор = &Пользователь)
	|	И НЕ &КонтекстноеОткрытие
	|	И НЕ ВариантыДополнительныхОтчетов.Контекстный
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|АВТОУПОРЯДОЧИВАНИЕ";
	Выборка = Запрос.Выполнить().Выбрать();
	ЕстьТочноеСовпадение = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Текст=Выборка.Представление Тогда
			ЕстьТочноеСовпадение = Истина;
		КонецЕсли; 
		Список.Добавить(Выборка.Ссылка, 
		СформироватьПредставлениеЭлементаСписка(Выборка.Представление, Текст),, 
		?(Выборка.Порядок=2, БиблиотекаКартинок.Отчет, БиблиотекаКартинок.Тег)); 
	КонецЦикла;
	Если НЕ ЕстьТочноеСовпадение Тогда
		Список.Вставить(0, Текст, """"+Текст+"""");
	КонецЕсли; 
	Возврат Список;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПредставлениеЭлементаСписка(Представление, Текст)
	
	Позиция = Найти(НРег(Представление), НРег(Текст));
	Если Позиция>0 Тогда
		ТекстДо = Лев(Представление, Позиция-1);
		ТекстЦентр = Сред(Представление, Позиция, СтрДлина(Текст));
		ТекстПосле = Сред(Представление, Позиция+СтрДлина(Текст));
		ВыделенныйТекст = Новый ФорматированнаяСтрока(ТекстЦентр, Новый Шрифт(Новый Шрифт,,, Истина), WebЦвета.ЗеленыйЛес);
		РезультатФункции = Новый ФорматированнаяСтрока(ТекстДо, ВыделенныйТекст, ТекстПосле);
	Иначе
		РезультатФункции = Представление;
	КонецЕсли; 
	
	Возврат РезультатФункции;
	
КонецФункции

&НаСервереБезКонтекста
Процедура РазвернутьОтчетыДоВариантов(СписокИдентификаторовОтчетов)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчеты", СписокИдентификаторовОтчетов.ВыгрузитьЗначения());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет В(&Отчеты)";
	СписокИдентификаторовОтчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьСлужебныйОтчет(Вариант)
	
	ОтчетыУНФВызовСервера.ДобавитьОтчетВИсторию(Вариант);
	
	ДанныеОтчета = ДанныеОтчетаПоВарианту(Вариант);
	Если НЕ ЗначениеЗаполнено(ДанныеОтчета.КлючВарианта) ИЛИ НЕ ЗначениеЗаполнено(ДанныеОтчета.ИмяОтчета) Тогда
		// Для случая, когда отчет открыт из строки поиска и его описание не хранится в таблице следует получить данные отчета
		// из БД
		ДанныеОтчета = ДанныеОтчетаПоВариантуИзБД(Вариант);
	КонецЕсли; 
	
	СтруктураОткрытия = Новый Структура;
	СтруктураОткрытия.Вставить("КлючВарианта", ДанныеОтчета.КлючВарианта);
	ОткрытьФорму("Отчет."+ДанныеОтчета.ИмяОтчета+".Форма", СтруктураОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчет(Вариант)
	
	ОтчетыУНФВызовСервера.ДобавитьОтчетВИсторию(Вариант);
	
	ПараметрыОткрытия = Новый Структура;
	Если НЕ СвязанныеПоля=Неопределено Тогда
		ОписаниеСвязи = СвязанныеПоля.Получить(Вариант);
		Если ОписаниеСвязи=Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ТипЗнч(ПоОбъекту) = Тип("Структура") Тогда
			ПараметрыОткрытия.Вставить("Отбор", Новый Структура);
			Для каждого КлючИЗначение Из ПоОбъекту Цикл
				Если КлючИЗначение.Ключ = "Контекст" Тогда
					Продолжить;
				КонецЕсли; 
				ПараметрыОткрытия.Отбор.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла; 
		Иначе
			ПараметрыОткрытия.Вставить("Контекст", ПоОбъекту);
			Если ОписаниеСвязи.СложныйАлгоритм Тогда
				ПараметрыОткрытия.Вставить("СложныйАлгоритм", ОписаниеСвязи.СложныйАлгоритм);
				ПараметрыОткрытия.Вставить("ПолеСвязи", ОписаниеСвязи.Поле);
			Иначе
				ОтборРасшифровки = Новый Соответствие;
				ОтборРасшифровки.Вставить(ОписаниеСвязи.Поле, ПоОбъекту);
				ПараметрыОткрытия.Вставить("ОтборРасшифровки", ОтборРасшифровки);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
	ВариантыОтчетовКлиент.ОткрытьФормуОтчета(ЭтаФорма, Вариант, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДополнительныйОтчет(Вариант)
	
	СуществующийЭлемент = История.НайтиПоЗначению(Вариант);
	Если НЕ СуществующийЭлемент=Неопределено Тогда
		История.Удалить(СуществующийЭлемент);
	КонецЕсли; 
	История.Вставить(0, Вариант);
	
	ВыполняемаяКоманда = ДанныеКомандыВнешнегоОтчета(Вариант);
	Если ЗначениеЗаполнено(ПоОбъекту) Тогда
		ВыполняемаяКоманда.ОбъектыНазначения = Новый Массив;
		ВыполняемаяКоманда.ОбъектыНазначения.Добавить(ПоОбъекту);
	КонецЕсли;
	
	Если ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ОткрытиеФормы") Тогда
		
		ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьОткрытиеФормыОбработки(ВыполняемаяКоманда, ВладелецФормы, ВыполняемаяКоманда.ОбъектыНазначения);
		
	ИначеЕсли ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ВызовКлиентскогоМетода") Тогда
		
		ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКлиентскийМетодОбработки(ВыполняемаяКоманда, ВладелецФормы, ВыполняемаяКоманда.ОбъектыНазначения);
		
	ИначеЕсли ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода")
		Или ВыполняемаяКоманда.ВариантЗапуска = ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.СценарийВБезопасномРежиме") Тогда
		
		ПараметрыВызоваСервера = Новый Структура;
		ПараметрыВызоваСервера.Вставить("ДополнительнаяОбработкаСсылка", ВыполняемаяКоманда.Ссылка);
		ПараметрыВызоваСервера.Вставить("ИдентификаторКоманды", ВыполняемаяКоманда.Идентификатор);
		ПараметрыВызоваСервера.Вставить("ОбъектыНазначения", ВыполняемаяКоманда.ОбъектыНазначения);
		
		РезультатФоновогоЗадания = ВыполнитьСерверныйМетодОбработкиНаСервере(ПараметрыВызоваСервера);
		
		Если РезультатФоновогоЗадания.Статус = "Выполнено" Тогда
			ПоказатьРезультатВыполненияОбработки();
		Иначе
			Если ВыполняемаяКоманда.ПоказыватьОповещение Тогда
				Состояние(НСтр("ru = 'Выполняется команда...'"),,, БиблиотекаКартинок.ДлительнаяОперация48);
			КонецЕсли;
			Обработчик = Новый ОписаниеОповещения("ФоновоеЗаданиеВыполнено", ЭтотОбъект, Истина);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
			ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатФоновогоЗадания, Обработчик, ПараметрыОжидания);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьСерверныйМетодОбработкиНаСервере(ПараметрыВызоваСервера)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
		"ДополнительныеОтчетыИОбработки.ВыполнитьКоманду",
		ПараметрыВызоваСервера,
		ПараметрыВыполнения);
		
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресРезультата;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьРезультатВыполненияОбработки()
	
	Если НЕ ЭтоАдресВременногоХранилища(ФоновоеЗаданиеАдресХранилища) Тогда
		Возврат;
	КонецЕсли; 
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	// Добавление оповещения в результат выполнения (если требуется).
	Если РезультатВыполнения = Неопределено Тогда
		РезультатВыполнения = Новый Структура;
	КонецЕсли;
	
	// Показать всплывающее оповещение.
	Если ВыполняемаяКоманда.ПоказыватьОповещение Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Команда выполнена'"),, ВыполняемаяКоманда.Представление);
	КонецЕсли;
	
	// Обновить форму владельца
	Попытка
		ВладелецФормы.Прочитать();
	Исключение
		// Действие не требуется.
	КонецПопытки;
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеВыполнено(Результат, ЗагрузитьРезультат) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
		
	Если Результат.Статус = "Выполнено" Тогда 
		ПоказатьРезультатВыполненияОбработки();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьОшибкиВыполнения(ИнформацияОбОшибке());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВыполнения(ИнформацияОбОшибке)
	
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
		ПодробноеПредставлениеОшибки = НСтр("ru = 'Ошибка при выполнении:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		Если ПустаяСтрока(ОписаниеОшибки) Тогда
			ОписаниеОшибки = ПодробноеПредставлениеОшибки;
			ПодробноеПредставлениеОшибки = "";
		КонецЕсли;
	Иначе
		ОписаниеОшибки = ИнформацияОбОшибке;
		ПодробноеПредставлениеОшибки = "";
	КонецЕсли;
	ТекстСообщения = ОписаниеОшибки + ?(ПустаяСтрока(ПодробноеПредставлениеОшибки), "", ": " + ПодробноеПредставлениеОшибки);
	
	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеКомандыВнешнегоОтчета(Вариант)
	
	ВыполняемаяКоманда = Новый Структура(
		"Ссылка, Представление, 
		|Идентификатор, ВариантЗапуска, ПоказыватьОповещение, 
		|Модификатор, ОбъектыНазначения, ЭтоОтчет, Вид");
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Вариант", Вариант);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка,
	|	ДополнительныеОтчетыИОбработкиКоманды.Идентификатор,
	|	ДополнительныеОтчетыИОбработкиКоманды.ВариантЗапуска,
	|	ДополнительныеОтчетыИОбработкиКоманды.Представление,
	|	ДополнительныеОтчетыИОбработкиКоманды.ПоказыватьОповещение,
	|	ДополнительныеОтчетыИОбработкиКоманды.Модификатор,
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Вид КАК Вид
	|ИЗ
	|	Справочник.ВариантыДополнительныхОтчетов КАК ВариантыДополнительныхОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
	|		ПО ВариантыДополнительныхОтчетов.Отчет = ДополнительныеОтчетыИОбработкиКоманды.Ссылка
	|			И ВариантыДополнительныхОтчетов.ИдентификаторКоманды = ДополнительныеОтчетыИОбработкиКоманды.Идентификатор
	|ГДЕ
	|	ВариантыДополнительныхОтчетов.Ссылка = &Вариант";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Ссылка) Тогда
		ЗаполнитьЗначенияСвойств(ВыполняемаяКоманда, Выборка);
		ВыполняемаяКоманда.ЭтоОтчет = Истина;
	КонецЕсли; 
	Возврат ВыполняемаяКоманда;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеВарианта(Вариант)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Вариант", Вариант);
	
	Строки = СписокОтчетов.НайтиСтроки(СтруктураОтбора);
	Если Строки.Количество()=0 Тогда
		Возврат;
	Иначе
		Стр = Строки[0];
	КонецЕсли;
	
	Если ИспользуетсяРежимКартинки() Тогда
		ОбновитьОтображениеМиниатюры(Вариант, Стр.УИД);
	Иначе
		ОбновитьОтображениеТекста(Вариант, Стр.УИД);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеМиниатюры(Вариант, УИД)
	
	Если ЭтоАдресВременногоХранилища(ЭтаФорма[ИмяРеквизита(УИД)])
		И НЕ ЭтаФорма[ИмяРеквизита(УИД)] = АдресПустойКартинки Тогда
		ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма[ИмяРеквизита(УИД)]);
	КонецЕсли;
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Вариант, "Наименование,Описание");
	Образец = ОтчетыУНФ.ОбразецВарианта(Вариант);
	Если Образец <> Неопределено Тогда
		ЭтаФорма[ИмяРеквизита(УИД)] = ПоместитьВоВременноеХранилище(Образец, УникальныйИдентификатор);
	Иначе
		ЭтаФорма[ИмяРеквизита(УИД)] = АдресПустойКартинки;
	КонецЕсли;
	Элементы["ГруппаОтчета" + УИД].Заголовок = СтруктураРеквизитов.Наименование;
	Элементы[ИмяРеквизита(УИД)].Подсказка = СтруктураРеквизитов.Описание;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеТекста(Вариант, УИД)
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Вариант, "Наименование,Описание");
	Элементы[ИмяРеквизита(УИД)].Заголовок = ПредставлениеФорматированнаяСтрока(СтруктураРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОтчетНаСервере(Вариант)
	
	Вариант.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
	ОбновитьСписокСервер();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазделВсеОтчеты()
	
	Возврат "ВсеОтчеты";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделИзбранные()
	
	Возврат "Избранные";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделПоследние()
	
	Возврат "Последние";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РазделВнешние()
	
	Возврат "Внешние";
	
КонецФункции

&НаСервере
Процедура УстановитьРежимКартинкиНаСервере()
	
	Режим = "РежимКартинки";
	
	Элементы.РежимКартинки.Пометка = Истина;
	Элементы.РежимСписок.Пометка = Ложь;
	
	ХранилищеСистемныхНастроек.Сохранить("ФормаСпискаОтчетов", "Режим", Режим);
	
	ОбновитьСписокСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимСписокНаСервере()
	
	Режим = "РежимСписок";
	
	Элементы.РежимСписок.Пометка = Истина;
	Элементы.РежимКартинки.Пометка = Ложь;
	
	ХранилищеСистемныхНастроек.Сохранить("ФормаСпискаОтчетов", "Режим", Режим);
	
	ОбновитьСписокСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРежимИзНастроек()
	
	Режим = ХранилищеСистемныхНастроек.Загрузить("ФормаСпискаОтчетов", "Режим");
	Элементы.РежимКартинки.Пометка = ИспользуетсяРежимКартинки();
	Элементы.РежимСписок.Пометка = Не Элементы.РежимКартинки.Пометка;
	
КонецПроцедуры

&НаСервере
Функция ИспользуетсяРежимКартинки()
	
	// Предотвращение OutOfMemoryError при отключении отбора в списке отчетов в режиме картинки.
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Режим) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Режим = "РежимКартинки";
	
КонецФункции

#КонецОбласти

#КонецОбласти
