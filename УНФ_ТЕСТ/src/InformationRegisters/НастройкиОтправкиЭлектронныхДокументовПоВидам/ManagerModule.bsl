#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы <> "ФормаЗаписи" Тогда
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = Неопределено;
	Если Не Параметры.Свойство("Ключ", КлючЗаписи)
		ИЛИ КлючЗаписи.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.СпособОбменаЭД КАК СпособОбменаЭД
		|ИЗ
		|	РегистрСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам КАК НастройкиОтправкиЭлектронныхДокументовПоВидам
		|ГДЕ
		|	НастройкиОтправкиЭлектронныхДокументовПоВидам.Отправитель = &Отправитель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Получатель = &Получатель
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.Договор = &Договор
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.ВидДокумента = &ВидДокумента
		|	И НастройкиОтправкиЭлектронныхДокументовПоВидам.ПрикладнойВидЭД = &ПрикладнойВидЭД";
	
	Запрос.УстановитьПараметр("Отправитель"    , КлючЗаписи.Отправитель);
	Запрос.УстановитьПараметр("Получатель"     , КлючЗаписи.Получатель);
	Запрос.УстановитьПараметр("Договор"        , КлючЗаписи.Договор);
	Запрос.УстановитьПараметр("ВидДокумента"   , КлючЗаписи.ВидДокумента);
	Запрос.УстановитьПараметр("ПрикладнойВидЭД", КлючЗаписи.ПрикладнойВидЭД);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебный.ЭтоВнутреннийЭДО(Выборка.СпособОбменаЭД) Тогда
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Отправитель", КлючЗаписи.Отправитель);
		Параметры.Вставить("Получатель",  КлючЗаписи.Получатель);
		ВыбраннаяФорма = КлючЗаписи.Метаданные().Формы.НастройкиОтправкиДокументовИнтеркампани;
	ИначеЕсли ОбменСКонтрагентамиСлужебный.ЭтоПрямойОбмен(Выборка.СпособОбменаЭД) Тогда
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Организация", КлючЗаписи.Отправитель);
		Параметры.Вставить("Контрагент",  КлючЗаписи.Получатель);
		Параметры.Вставить("Договор",     КлючЗаписи.Договор);
		ВыбраннаяФорма = КлючЗаписи.Метаданные().Формы.НастройкиОтправкиДокументовПрямойОбмен;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Формирует таблицу настроек отправки и заполняет ее данными по умолчанию
// 
// Возвращаемое значений:
//  Параметры - ТаблицаЗначений - таблица настроек.
//
Функция СоздатьНастройкиОтправкиДокументов() Экспорт
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипаЧисло  = Новый ОписаниеТипов("Число");
	
	ИсходящиеДокументы = Новый ТаблицаЗначений;
	
	ИсходящиеДокументы.Колонки.Добавить("ДокументУчета"                  , ОписаниеТипаСтрока);
	ИсходящиеДокументы.Колонки.Добавить("ДополнительныеНастройки"        , ОписаниеТипаСтрока);
	ИсходящиеДокументы.Колонки.Добавить("Приоритет"                      , ОписаниеТипаЧисло);

	ИсходящиеДокументы.Колонки.Добавить("ВидДокумента"                   , Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЭД"));
	ИсходящиеДокументы.Колонки.Добавить("ПрикладнойВидЭД"                , Метаданные.ОпределяемыеТипы.ПрикладныеВидыЭлектронныхДокументов.Тип);
	ИсходящиеДокументы.Колонки.Добавить("ВерсияФормата"                  , ОписаниеТипаСтрока);
	ИсходящиеДокументы.Колонки.Добавить("СпособОбменаЭД"                 , Новый ОписаниеТипов("ПеречислениеСсылка.СпособыОбменаЭД"));
	ИсходящиеДокументы.Колонки.Добавить("ИдентификаторОтправителя"       , ОписаниеТипаСтрока);
	ИсходящиеДокументы.Колонки.Добавить("ИдентификаторПолучателя"        , ОписаниеТипаСтрока);
	ИсходящиеДокументы.Колонки.Добавить("МаршрутПодписания"              , Новый ОписаниеТипов("СправочникСсылка.МаршрутыПодписания"));
	ИсходящиеДокументы.Колонки.Добавить("ТребуетсяОтветнаяПодпись"       , ОписаниеТипаБулево);
	ИсходящиеДокументы.Колонки.Добавить("ТребуетсяИзвещениеОПолучении"   , ОписаниеТипаБулево);
	ИсходящиеДокументы.Колонки.Добавить("ВыгружатьДополнительныеСведения", ОписаниеТипаБулево);
	ИсходящиеДокументы.Колонки.Добавить("Формировать"                    , ОписаниеТипаБулево);
	ИсходящиеДокументы.Колонки.Добавить("ВерсияФорматаУстановленаВручную", ОписаниеТипаБулево);
	ИсходящиеДокументы.Колонки.Добавить("ЗаполнениеКодаТовара"           , ОписаниеТипаСтрока);
	ИсходящиеДокументы.Колонки.Добавить("Отправитель"                    , Метаданные.ОпределяемыеТипы.Организация.Тип);
	ИсходящиеДокументы.Колонки.Добавить("Получатель"                     , Метаданные.ОпределяемыеТипы.УчастникЭДО.Тип);
	ИсходящиеДокументы.Колонки.Добавить("ДоговорКонтрагента"             , Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентом.Тип);
	ИсходящиеДокументы.Колонки.Добавить("АдресОтправителя"               , ОписаниеТипаСтрока);
	ИсходящиеДокументы.Колонки.Добавить("АдресПолучателя"                , ОписаниеТипаСтрока);
	ИсходящиеДокументы.Колонки.Добавить("ОбменБезПодписи"                , ОписаниеТипаБулево);
	
	ВидыЭлектронныхДокументов = ОбменСКонтрагентамиСлужебный.ИспользуемыеВидыЭлектронныхДокументов(Перечисления.НаправленияЭД.Исходящий);
	
	Для Каждого ЗначениеПеречисления Из ВидыЭлектронныхДокументов Цикл
		
		НоваяСтрока = ИсходящиеДокументы.Добавить();
		ОбменСКонтрагентамиСлужебный.ЗаполнитьНастройкуПоВидуЭлектронногоДокумента(НоваяСтрока, ЗначениеПеречисления);
		
	КонецЦикла;
	
	ПрикладныеВидыЭлектронныхДокументов = ОбменСКонтрагентамиСлужебный.ПрикладныеВидыЭлектронныхДокументов();
	Для Каждого ПрикладнойВид Из ПрикладныеВидыЭлектронныхДокументов Цикл
		
		НоваяСтрока = ИсходящиеДокументы.Добавить();
		ОбменСКонтрагентамиСлужебный.ЗаполнитьНастройкуПоПрикладномуВидуЭлектронногоДокумента(НоваяСтрока, ПрикладнойВид);
		
	КонецЦикла;
	
	УстановитьВариантыЗаполненияПолейПоУмолчанию(ИсходящиеДокументы);
	
	Возврат ИсходящиеДокументы;
	
КонецФункции

// Удаляет настройки отправки ЭДО
// 
//  Параметры - СписокЗначений - параметры учетной записи для удаления
//  АдресРезультата - Строка - путь временного хранилища
//
Процедура УдалитьНастройкиОтправкиЭДО(Параметры, АдресРезультата) Экспорт
	
	Организация        = Неопределено;
	Контрагент         = Неопределено;
	ДоговорКонтрагента = Неопределено;
	Результат          = Истина;
	
	Параметры.Свойство("Организация"       , Организация);
	Параметры.Свойство("Контрагент"        , Контрагент);
	Параметры.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ДоговорКонтрагента = Метаданные.ОпределяемыеТипы.ДоговорСКонтрагентом.Тип.ПривестиЗначение();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Отправитель.Установить(Организация);
	НаборЗаписей.Отбор.Получатель.Установить(Контрагент);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		НаборЗаписей.Отбор.Договор.Установить(ДоговорКонтрагента);
	КонецЕсли;
	
	НаборЗаписейЗаполнениеДопПолей = РегистрыСведений.НастройкиЗаполненияДополнительныхПолей.СоздатьНаборЗаписей();
	НаборЗаписейЗаполнениеДопПолей.Отбор.Отправитель.Установить(Организация);
	НаборЗаписейЗаполнениеДопПолей.Отбор.Получатель.Установить(Контрагент);
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		НаборЗаписейЗаполнениеДопПолей.Отбор.Договор.Установить(ДоговорКонтрагента);
	КонецЕсли;

	НачатьТранзакцию();
	
	Попытка
		// Попытка удаления. Управляемую блокировку устанавливать нет необходимости.
		НаборЗаписей.Записать();
		НаборЗаписейЗаполнениеДопПолей.Записать();
		
		ИмяРеквизитаИННКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
		ИмяРеквизитаКППКонтрагента = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("КППКонтрагента");
		
		ПараметрыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент,
			ИмяРеквизитаИННКонтрагента + ", " + ИмяРеквизитаКППКонтрагента);
		
		Параметры = Новый Структура();
		Параметры.Вставить("Контрагент", Контрагент);
		Параметры.Вставить("ИНН", ПараметрыКонтрагента[ИмяРеквизитаИННКонтрагента]);
		Параметры.Вставить("КПП", ПараметрыКонтрагента[ИмяРеквизитаКППКонтрагента]);
		Параметры.Вставить("АдресХранилища", Неопределено);
		Параметры.Вставить("СохранятьРезультатСразуПослеПроверки", Истина);
		Параметры.Вставить("ПолучатьРезультатПроверкиВебСервисом", Истина);
		
		ОбменСКонтрагентамиСлужебный.ПроверитьКонтрагентаФоновоеЗадание(Параметры);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Информация = ИнформацияОбОшибке();
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось удалить настройки отправки по:
                                      |Организация: %1,
                                      |Контрагент: %2,
                                      |Договор контрагента: %3.'"), Организация, Контрагент, ДоговорКонтрагента);
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Удаление настроек отправки ЭДО'"), ПодробноеПредставлениеОшибки(Информация), ТекстОшибки);
		Результат = Ложь;
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Удаляет настройки отправки интеркампани
// 
//  Параметры - СписокЗначений - параметры учетной записи для удаления
//  АдресРезультата - Строка - путь временного хранилища
//
Процедура УдалитьНастройкиИнтеркампани(Параметры, АдресРезультата) Экспорт
	
	Отправитель        = Неопределено;
	Получатель         = Неопределено;
	Результат          = Истина;
	
	Параметры.Свойство("Отправитель"       , Отправитель);
	Параметры.Свойство("Получатель"        , Получатель);
	
	НаборЗаписей = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Отправитель.Установить(Отправитель);
	НаборЗаписей.Отбор.Получатель.Установить(Получатель);
	
	НачатьТранзакцию();
	Попытка
		// Попытка удаления. Управляемую блокировку устанавливать нет необходимости.
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Информация = ИнформацияОбОшибке();
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не удалось удалить настройки интеркампани по:
                                      |Отправитель: %1,
                                      |Получатель: %2.'"), Отправитель, Получатель);
		
		ЭлектронноеВзаимодействие.ОбработатьОшибку(НСтр("ru = 'Удаление настроек интеркампани'"), ПодробноеПредставлениеОшибки(Информация), ТекстОшибки);
		Результат = Ложь;
		
	КонецПопытки;
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

// Записывает обновленные настройки отправки в регистр
// 
//  Настройки - Структура - настройки обмена для записи
Процедура ЗаписатьОбновленныеНастройки(Настройки) Экспорт
	
	Менеджер = РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьМенеджерЗаписи();
	Менеджер.Отправитель     = Настройки.Отправитель;
	Менеджер.Получатель      = Настройки.Получатель;
	Менеджер.Договор         = Настройки.Договор;
	Менеджер.ВидДокумента    = Настройки.ВидЭД;
	Менеджер.ПрикладнойВидЭД = Настройки.ПрикладнойВидЭД;
	Менеджер.Прочитать();
	Менеджер.ВерсияФормата                   = Настройки.ВерсияФормата;
	Менеджер.ИдентификаторОтправителя        = Настройки.ИдентификаторОрганизации;
	Менеджер.ИдентификаторПолучателя         = Настройки.ИдентификаторКонтрагента;
	Менеджер.МаршрутПодписания               = Настройки.МаршрутПодписания;
	Менеджер.ТребуетсяОтветнаяПодпись        = Настройки.ТребуетсяПодтверждение;
	Менеджер.ТребуетсяИзвещениеОПолучении    = Настройки.ТребуетсяИзвещение;
	Менеджер.ВыгружатьДополнительныеСведения = Настройки.ВыгружатьДополнительныеСведения;
	Менеджер.ВерсияФорматаУстановленаВручную = Настройки.ВерсияФорматаУстановленаВручную;
	Менеджер.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьВариантыЗаполненияПолейПоУмолчанию(ИсходящиеДокументы)
	
	Для Каждого СтрокаТаблицы Из ИсходящиеДокументы Цикл
		ВариантыЗаполнения = ОбменСКонтрагентамиВнутренний.ВариантыЗаполненияПолейЭлектронныхДокументов(
			СтрокаТаблицы.ВидДокумента, СтрокаТаблицы.ВерсияФормата);
		
		ЗначениеСвойства = Неопределено;
		Если ВариантыЗаполнения.Свойство("ТоварКод", ЗначениеСвойства) Тогда
			СтрокаТаблицы.ЗаполнениеКодаТовара = ЗначениеСвойства[0].Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
