
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Организация", Организация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкиВнутреннегоЭДО.Организация КАК Организация
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|ГДЕ
		|	НастройкиВнутреннегоЭДО.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЭтоНовый = РезультатЗапроса.Пустой();
	
	Элементы.Организация.ТолькоПросмотр = Не ЭтоНовый;
	ЕстьПравоНастройкиОбмена = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
	ТолькоПросмотр = Не ЕстьПравоНастройкиОбмена;
	Элементы.НастройкиПечатнаяФорма.Доступность = ЕстьПравоНастройкиОбмена;
	ЗаполнитьНастройки();
	УстановитьСвойстваПоляМаршрутПодписанияДляВнутреннегоЭДО(ЭтаФорма);
	УстановитьУсловноеОформление();
	УстановитьВидимостьМенюПечатныхФорм(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			ТекстПредупреждения = НСтр("ru = 'Настройки внутреннего электронного документооборота не сохранены.
										|Завершить работу с программой?'")
		Иначе
			Описание = Новый ОписаниеОповещения("ПередЗакрытиемОкнаФормы", ЭтотОбъект);
			ПоказатьВопрос(Описание, НСтр("ru = 'Настройки внутреннего электронного документооборота изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ЭтоНовый И ЕстьНастройкаПоОрганизации() Тогда
		ТекстСообщения = НСтр("ru = 'Настройка по данной организации уже существует'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый И Настройки.НайтиСтроки(Новый Структура("Формировать", 2)).Количество() = Настройки.Количество() Тогда
		ТекстСообщения = НСтр("ru = 'Не отмечено ни одной настройки'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	Счетчик = 0;
	Для каждого Настройка Из Настройки Цикл
		Если Настройка.Формировать = 1 Тогда
			Если Настройка.РасширенныйРежимНастройки Тогда
				Для каждого ПечатнаяФорма Из Настройка.ПечатныеФормы Цикл
					Если ПечатнаяФорма.Формировать = 1 И Не ЗначениеЗаполнено(ПечатнаяФорма.МаршрутПодписания) Тогда
						ТекстСообщения = НСтр("ru = 'Поле ""Маршрут подписания"" в настройках печатных форм не заполнено'");
						Поле = СтрШаблон("Настройки[%1].ПредставлениеПечатныхФорм", Счетчик);
						ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
					КонецЕсли;
				КонецЦикла;
			Иначе 
				Если Не ЗначениеЗаполнено(Настройка.МаршрутПодписания) Тогда
					ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Маршрут подписания'"));
					Поле = СтрШаблон("Настройки[%1].МаршрутПодписания", Счетчик);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
				КонецЕсли;
			КонецЕсли;
			Если Настройка.ПечатныеФормы.НайтиСтроки(Новый Структура("Формировать", 1)).Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Не выбрано ни одной печатной формы'");
				Поле = СтрШаблон("Настройки[%1].ПредставлениеПечатныхФорм", Счетчик);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			КонецЕсли;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидЭлектроннойПодписиПриИзменении(Элемент)
	
	Для каждого СтрокаНастроек Из Настройки Цикл
		Если СтрокаНастроек.МаршрутПодписания <> ПредопределенноеЗначение("Справочник.МаршрутыПодписания.УказыватьПриСоздании") Тогда
			СтрокаНастроек.МаршрутПодписания = ПредопределенноеЗначение("Справочник.МаршрутыПодписания.ПустаяСсылка");
		КонецЕсли;
		Для каждого ПечатнаяФорма Из СтрокаНастроек.ПечатныеФормы Цикл
			Если ПечатнаяФорма.МаршрутПодписания <> ПредопределенноеЗначение("Справочник.МаршрутыПодписания.УказыватьПриСоздании") Тогда
				ПечатнаяФорма.МаршрутПодписания = ПредопределенноеЗначение("Справочник.МаршрутыПодписания.ПустаяСсылка");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	УстановитьВидимостьМенюПечатныхФорм(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиМаршрутПодписанияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = МожноВыбиратьМаршрут();
	УстановитьСвойстваПоляМаршрутПодписанияДляВнутреннегоЭДО(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиМаршрутПодписанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
	Для каждого ПечатнаяФорма Из ТекущиеДанные.ПечатныеФормы Цикл
		ПечатнаяФорма.МаршрутПодписания = Элементы.Настройки.ТекущиеДанные.МаршрутПодписания;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройки

&НаКлиенте
Процедура НастройкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.НастройкиПечатнаяФорма И Элемент.ТекущиеДанные.Формировать = 1
		И МожноВыбиратьМаршрут() Тогда
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные.ПечатныеФормы.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОбменСКонтрагентамиСлужебныйКлиентСервер.СообщениеОбОтсутствииПечатныхФормДляВнутреннегоЭДО());
			Возврат;
		КонецЕсли;
		ПечатныеФормы = Новый Массив;
		Для каждого ПечатнаяФорма Из Элемент.ТекущиеДанные.ПечатныеФормы Цикл
			СвойстваСтруктуры = "Формировать, Идентификатор, Представление, МаршрутПодписания";
			ПечатнаяФормаСтруктура = Новый Структура(СвойстваСтруктуры);
			ЗаполнитьЗначенияСвойств(ПечатнаяФормаСтруктура, ПечатнаяФорма);
			ПечатныеФормы.Добавить(ПечатнаяФормаСтруктура);
		КонецЦикла;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПечатныеФормы", ПечатныеФормы);
		ПараметрыФормы.Вставить("ПечатнаяФормаПоУмолчанию", Элемент.ТекущиеДанные.ПечатнаяФормаПоУмолчанию);
		ПараметрыФормы.Вставить("ВидЭлектроннойПодписи", ВидЭлектроннойПодписи);
		ПараметрыФормы.Вставить("Организация", Организация);
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораПечатныхФорм", ЭтотОбъект);
		ОткрытьФорму("РегистрСведений.НастройкиВнутреннегоЭДО.Форма.ПечатныеФормы",
			ПараметрыФормы,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиФормироватьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
	Если ТекущиеДанные.Формировать = 2 Тогда
		ТекущиеДанные.Формировать = 0;
	КонецЕсли;
	Если ТекущиеДанные.Формировать = 0 Тогда
		Для каждого ПечатнаяФорма Из ТекущиеДанные.ПечатныеФормы Цикл
			ПечатнаяФорма.Формировать = ТекущиеДанные.Формировать;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	ВыполнитьКомандуЗаписать();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ВыполнитьКомандуЗаписать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьСоглашенияССотрудниками(Команда)
	
	ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
	
	Если ТекущиеДанные <> неопределено Тогда 
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Организация", Организация);
		ПараметрыОткрытияФормы.Вставить("СписокПользователей", СписокПодписантовМаршрута(ТекущиеДанные.МаршрутПодписания));
		
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормированиеУведомленияОбИспользованииПЭП",
		ПараметрыОткрытияФормы,
		ЭтаФорма,
		,
		,
		,
		,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПоложениеОбИспользованииПЭП(Команда)
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Организация", Организация);
		
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ФормированиеПоложенияОбИспользованииПЭП",
						ПараметрыОткрытияФормы,
						ЭтаФорма,
						,
						,
						,
						,
						РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	УдалитьНастройку();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция СписокПодписантовМаршрута(Маршрут) 
	
	Возврат ЭлектронноеВзаимодействиеСлужебный.ВозможныеПодписантыМаршрута(Маршрут);
	
КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПечатныхФорм(Настройка) 
	
	ПредставлениеПечатныхФорм = "";
	ОтмеченныеПечатныеФормы = Новый Массив;
	Для каждого ПечатнаяФорма Из Настройка.ПечатныеФормы Цикл
		Если ПечатнаяФорма.Формировать = 1 Тогда
			ОтмеченныеПечатныеФормы.Добавить(ПечатнаяФорма.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	КоличествоПечатныхФорм = ОтмеченныеПечатныеФормы.Количество();
	Если ЗначениеЗаполнено(Настройка.ПечатнаяФормаПоУмолчанию) Тогда
		Если КоличествоПечатныхФорм > 0 И ОтмеченныеПечатныеФормы.Найти(Настройка.ПечатнаяФормаПоУмолчанию) <> Неопределено Тогда
			КоличествоПечатныхФорм = КоличествоПечатныхФорм - 1;
		КонецЕсли;
		СтрокиПечатныхФорм  = Настройка.ПечатныеФормы.НайтиСтроки(Новый Структура("Идентификатор", Настройка.ПечатнаяФормаПоУмолчанию));
		Если СтрокиПечатныхФорм.Количество() Тогда
			ПредставлениеПечатнойФормыПоУмолчанию = СтрокиПечатныхФорм[0].Представление;
		Иначе 
			ПредставлениеПечатнойФормыПоУмолчанию = "";
		КонецЕсли;
		Если КоличествоПечатныхФорм = 0 Тогда
			ПредставлениеПечатныхФорм = ПредставлениеПечатнойФормыПоУмолчанию;
		Иначе 
			ШаблонПредставления = НСтр("ru = '%1 и еще %2'");
			ПредставлениеПечатныхФорм = СтрШаблон(ШаблонПредставления, ПредставлениеПечатнойФормыПоУмолчанию, КоличествоПечатныхФорм);
		КонецЕсли;
	Иначе 
		Если КоличествоПечатныхФорм = 0 Тогда
			ПредставлениеПечатныхФорм = НСтр("ru = 'Указать'");
		Иначе
			ПредставлениеПечатныхФорм = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru=';%1 форма;;%1 формы;%1 форм;%1 формы'"), 
				КоличествоПечатныхФорм,, "ЧДЦ=0");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПредставлениеПечатныхФорм;
	
КонецФункции 

&НаСервере
Процедура СохранитьНастройки() 
	
	Отказ = Ложь;
	ОбменСКонтрагентамиСлужебный.ЗаписатьНастройкиВнутреннегоЭДО(Организация, СформироватьНастройки(),, Отказ);
	Если Не Отказ Тогда
		ЭтоНовый = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПечатныхФорм(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		Модифицированность = Истина;
		ТекущиеДанные = Элементы.Настройки.ТекущиеДанные;
		ТекущиеДанные.ПечатныеФормы.Очистить();
		Для каждого ПечатнаяФорма Из РезультатЗакрытия.ПечатныеФормы Цикл
			НоваяСтрока = ТекущиеДанные.ПечатныеФормы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПечатнаяФорма);
		КонецЦикла; 
		ТекущиеДанные.ПечатнаяФормаПоУмолчанию = РезультатЗакрытия.ПечатнаяФормаПоУмолчанию;
		ТекущиеДанные.ПредставлениеПечатныхФорм = ПредставлениеПечатныхФорм(ТекущиеДанные);
		ТекущиеДанные.РасширенныйРежимНастройки = РезультатЗакрытия.РасширенныйРежимНастройки;
		Если Не РезультатЗакрытия.РасширенныйРежимНастройки И РезультатЗакрытия.ПечатныеФормы.Количество() Тогда
			ТекущиеДанные.МаршрутПодписания = РезультатЗакрытия.ПечатныеФормы[0].МаршрутПодписания;
		КонецЕсли;
		ЕстьОтметка = Ложь;
		Для каждого ЭлементСписка Из ТекущиеДанные.ПечатныеФормы Цикл
			Если ЭлементСписка.Формировать = 1 Тогда
				ЕстьОтметка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЕстьОтметка Тогда
			ТекущиеДанные.Формировать = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройки() 
	
	АктуальныеКомандыПечати = ОбменСКонтрагентамиСлужебныйПовтИсп.КомандыПечатиВнутреннихЭлектронныхДокументов();
	
	Если Не ЭтоНовый Тогда
		
		ЗаполнитьСуществующиеНастройки(АктуальныеКомандыПечати);
		
	КонецЕсли;
	
	Для каждого КлючИЗначение Из АктуальныеКомандыПечати Цикл
		ИдентификаторОбъектаУчета = КлючИЗначение.Ключ;
		КомандыПечати = КлючИЗначение.Значение;
		Строки = Настройки.НайтиСтроки(Новый Структура("ИдентификаторОбъектаУчета", ИдентификаторОбъектаУчета));
		Если Строки.Количество() = 0 Тогда
			СтрокаНастроек = Настройки.Добавить();
			СтрокаНастроек.Формировать = 2;
			СтрокаНастроек.ИдентификаторОбъектаУчета = ИдентификаторОбъектаУчета;
			СтрокаНастроек.ВидВнутреннегоДокумента = ИдентификаторОбъектаУчета;
		Иначе 
			СтрокаНастроек = Строки[0];
		КонецЕсли;
		
		Для каждого КомандаПечати Из КомандыПечати Цикл
			Отбор = Новый Структура("Идентификатор", КомандаПечати.Идентификатор);
			Если СтрокаНастроек.ПечатныеФормы.НайтиСтроки(Отбор).Количество() = 0 Тогда
				ПечатнаяФорма = СтрокаНастроек.ПечатныеФормы.Добавить();
				ПечатнаяФорма.Формировать = 2;
				ПечатнаяФорма.Идентификатор = КомандаПечати.Идентификатор;
				ПечатнаяФорма.Представление = КомандаПечати.Представление;
			КонецЕсли;
		КонецЦикла;
		СтрокаНастроек.ПредставлениеПечатныхФорм = ПредставлениеПечатныхФорм(СтрокаНастроек);
	КонецЦикла;
	
	Настройки.Сортировать("ИдентификаторОбъектаУчета");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуществующиеНастройки(АктуальныеКомандыПечати) 
	
	ПараметрыАктуализации = Новый Структура;
	ПараметрыАктуализации.Вставить("НеактуальныеВидыДокументов", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиВнутреннегоЭДО.Формировать КАК Формировать,
	|	НастройкиВнутреннегоЭДО.ВидПодписи КАК ВидПодписи,
	|	НастройкиВнутреннегоЭДО.МаршрутПодписания КАК МаршрутПодписания,
	|	НастройкиВнутреннегоЭДО.ЭтоОсновнойВидДокумента КАК ЭтоОсновнойВидДокумента,
	|	ВидыВнутреннихДокументовЭДО.ИдентификаторОбъектаУчета КАК ИдентификаторОбъектаУчета,
	|	ВидыВнутреннихДокументовЭДО.Наименование КАК ПредставлениеКомандыПечати,
	|	ВидыВнутреннихДокументовЭДО.ИдентификаторКомандыПечати КАК ИдентификаторКомандыПечати,
	|	ВидыВнутреннихДокументовЭДО.Ссылка КАК ВидВнутреннегоДокумента
	|ИЗ
	|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыВнутреннихДокументовЭДО КАК ВидыВнутреннихДокументовЭДО
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
	|			ПО ВидыВнутреннихДокументовЭДО.ИдентификаторОбъектаУчета = ИдентификаторыОбъектовМетаданных.Ссылка
	|		ПО НастройкиВнутреннегоЭДО.ВидВнутреннегоДокумента = ВидыВнутреннихДокументовЭДО.Ссылка
	|ГДЕ
	|	НастройкиВнутреннегоЭДО.Организация = &Организация
	|ИТОГИ ПО
	|	ИдентификаторОбъектаУчета,
	|	ИдентификаторКомандыПечати";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИдентификаторОбъектаУчета = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаИдентификаторОбъектаУчета.Следующий() Цикл
		АктуальныеКомандыПечатиОбъектаУчета = АктуальныеКомандыПечати[ВыборкаИдентификаторОбъектаУчета.ИдентификаторОбъектаУчета];
		Если АктуальныеКомандыПечатиОбъектаУчета = Неопределено Тогда
			ВыборкаИдентификаторКомандыПечати = ВыборкаИдентификаторОбъектаУчета.Выбрать(
				ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаИдентификаторКомандыПечати.Следующий() Цикл
				ВыборкаДетальныеЗаписи = ВыборкаИдентификаторКомандыПечати.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					ПараметрыАктуализации.НеактуальныеВидыДокументов.Добавить(
						ВыборкаДетальныеЗаписи.ВидВнутреннегоДокумента);
				ВидЭлектроннойПодписи = ВыборкаДетальныеЗаписи.ВидПодписи;
				КонецЦикла;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		СтрокаНастроек = Настройки.Добавить();
		СтрокаНастроек.ИдентификаторОбъектаУчета = ВыборкаИдентификаторОбъектаУчета.ИдентификаторОбъектаУчета;
		
		ВыборкаИдентификаторКомандыПечати = ВыборкаИдентификаторОбъектаУчета.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаИдентификаторКомандыПечати.Следующий() Цикл
			АктуальнаяПечатнаяФорма = АктуальныеКомандыПечатиОбъектаУчета.Найти(
				ВыборкаИдентификаторКомандыПечати.ИдентификаторКомандыПечати, "Идентификатор");
			Если АктуальнаяПечатнаяФорма = Неопределено Тогда
				ПечатнаяФорма = Неопределено;
			Иначе 
				ПечатнаяФорма = СтрокаНастроек.ПечатныеФормы.Добавить();
				ПечатнаяФорма.Идентификатор = ВыборкаИдентификаторКомандыПечати.ИдентификаторКомандыПечати;
			КонецЕсли;
			ВыборкаДетальныеЗаписи = ВыборкаИдентификаторКомандыПечати.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ПечатнаяФорма <> Неопределено И АктуальнаяПечатнаяФорма <> Неопределено Тогда
					ПечатнаяФорма.Формировать = ВыборкаДетальныеЗаписи.Формировать;
					ПечатнаяФорма.Представление = АктуальнаяПечатнаяФорма.Представление;
					ПечатнаяФорма.МаршрутПодписания = ВыборкаДетальныеЗаписи.МаршрутПодписания;
				КонецЕсли;
				СтрокаНастроек.ВидВнутреннегоДокумента = ВыборкаДетальныеЗаписи.ВидВнутреннегоДокумента;
				СтрокаНастроек.Формировать = СтрокаНастроек.Формировать Или ВыборкаДетальныеЗаписи.Формировать;
				СтрокаНастроек.МаршрутПодписания = ВыборкаДетальныеЗаписи.МаршрутПодписания;
				СтрокаНастроек.ПредставлениеПечатныхФорм = ПредставлениеПечатныхФорм(СтрокаНастроек);
				ВидЭлектроннойПодписи = ВыборкаДетальныеЗаписи.ВидПодписи;
				Если Не ЗначениеЗаполнено(СтрокаНастроек.ПечатнаяФормаПоУмолчанию)
					И ВыборкаДетальныеЗаписи.ЭтоОсновнойВидДокумента Тогда
					СтрокаНастроек.ПечатнаяФормаПоУмолчанию = ВыборкаДетальныеЗаписи.ИдентификаторКомандыПечати;
				КонецЕсли;
				Прервать; 
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Для каждого СтрокаНастроек Из Настройки Цикл
		ТаблицаПечатныхФорм = СтрокаНастроек.ПечатныеФормы.Выгрузить();
		ТаблицаПечатныхФорм.Свернуть("МаршрутПодписания");
		СтрокаНастроек.РасширенныйРежимНастройки = ТаблицаПечатныхФорм.Количество() > 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуЗаписать(Закрыть = Ложь) 
	
	Если ПроверитьЗаполнение() Тогда
		СохранитьНастройки();
		Модифицированность = Ложь;
		Оповестить("ОбновитьТекущиеДелаЭДО");
		Для каждого Настройка Из Настройки Цикл
			Если ЗначениеЗаполнено(Настройка.ПечатнаяФормаПоУмолчанию) Тогда
				ОбменСКонтрагентамиСлужебныйКлиент.ОповеститьОбИсправленииОшибкиНеустановленнойПоУмолчаниюПечатнойФормы(
					Организация, Настройка.ИдентификаторОбъектаУчета);
			КонецЕсли;
		КонецЦикла;
		Если Закрыть Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Настройки.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиВидДокумента");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиПечатнаяФорма");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиМаршрутПодписания");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Настройки.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиПечатнаяФорма");
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиМаршрутПодписания");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<расширенный режим>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Настройки.РасширенныйРежимНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиМаршрутПодписания");
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Настройки.РасширенныйРежимНастройки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Настройки.Формировать");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Настройки.МаршрутПодписания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("НастройкиМаршрутПодписания");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемОкнаФормы(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ВыполнитьКомандуЗаписать(Истина);
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСвойстваПоляМаршрутПодписанияДляВнутреннегоЭДО(Форма)
	
	ОбменСКонтрагентамиСлужебныйКлиентСервер.УстановитьСвойстваПоляМаршрутПодписанияДляВнутреннегоЭДО(Форма.Элементы.НастройкиМаршрутПодписания,
		Форма.ВидЭлектроннойПодписи, Форма.Организация, Истина);
	
КонецПроцедуры

&НаСервере
Функция СформироватьНастройки() 
	
	СохраняемыеНастройки = ОбменСКонтрагентамиСлужебный.НоваяТаблицаНастроекВнутреннегоЭДО();
	
	Для каждого Настройка Из Настройки Цикл
		Если Настройка.Формировать = 2 Тогда
			Продолжить;
		КонецЕсли;
		Для каждого ПечатнаяФорма Из Настройка.ПечатныеФормы Цикл
			Если ПечатнаяФорма.Формировать = 2 Тогда
				Продолжить;
			КонецЕсли;
			НоваяСтрока = СохраняемыеНастройки.Добавить();
			НоваяСтрока.Формировать = Настройка.Формировать = 1 И ПечатнаяФорма.Формировать = 1;
			НоваяСтрока.Организация = Организация;
			НоваяСтрока.ВидПодписи = ВидЭлектроннойПодписи;
			НоваяСтрока.МаршрутПодписания = ПечатнаяФорма.МаршрутПодписания;
			КомандаПечати = Новый Структура;
			КомандаПечати.Вставить("Идентификатор", ПечатнаяФорма.Идентификатор);
			КомандаПечати.Вставить("Представление", ПечатнаяФорма.Представление);
			НоваяСтрока.КомандаПечати = КомандаПечати;
			НоваяСтрока.ИдентификаторОбъектаУчета = Настройка.ИдентификаторОбъектаУчета;
			Если Настройка.ПечатнаяФормаПоУмолчанию = ПечатнаяФорма.Идентификатор Тогда
				НоваяСтрока.ЭтоОсновнойВидДокумента = Истина;
			КонецЕсли;
		КонецЦикла; 
	КонецЦикла;
	
	Возврат СохраняемыеНастройки;
	
КонецФункции 

&НаКлиенте
Функция МожноВыбиратьМаршрут() 
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Организация'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Организация",, Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВидЭлектроннойПодписи) Тогда
		ТекстСообщения = ЭлектронноеВзаимодействиеКлиентСервер.ТекстСообщения("Поле", "Заполнение", НСтр("ru = 'Вид электронной подписи'"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"ВидЭлектроннойПодписи",, Отказ);
	КонецЕсли;
			
	Возврат Не Отказ;
	
КонецФункции 

&НаКлиенте
Процедура УдалитьНастройку()
	
	Если ЭтоНовый Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Настройка еще на записана, удаление невозможно'"));
		Возврат; 
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Удалить настройку внутреннего документооборота?'");
	Описание = Новый ОписаниеОповещения("УдалитьНастройкуПослеВопроса", ЭтотОбъект);
	ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНастройкуПослеВопроса(Ответ, Контекст) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	УдалитьНастройкуНаСервере();
	
	Оповестить("ОбновитьТекущиеДелаЭДО");
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНастройкуНаСервере()
	
	НаборЗаписей = РегистрыСведений.НастройкиВнутреннегоЭДО.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Организация);
	
	НачатьТранзакцию();
	
	Попытка
		// Попытка удаления. Управляемую блокировку устанавливать нет необходимости.
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Удаление настройки внутреннего документооборота'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьМенюПечатныхФорм(Форма)
	
	Форма.Элементы.ГруппаФормированияПечатныхФорм.Видимость = 
		Форма.ВидЭлектроннойПодписи = ПредопределенноеЗначение("Перечисление.ВидыЭлектронныхПодписей.Простая");
	
КонецПроцедуры

&НаСервере
Функция ЕстьНастройкаПоОрганизации() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ
		|	РегистрСведений.НастройкиВнутреннегоЭДО КАК НастройкиВнутреннегоЭДО
		|ГДЕ
		|	НастройкиВнутреннегоЭДО.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Количество > 0;
	КонецЦикла;
	
КонецФункции 

#КонецОбласти