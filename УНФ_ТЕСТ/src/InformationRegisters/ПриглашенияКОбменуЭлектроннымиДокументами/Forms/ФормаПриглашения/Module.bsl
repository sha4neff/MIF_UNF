#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("Ключ") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = Параметры.Ключ;
	Параметры.Свойство("ПараметрыИсправленияОшибок", ПараметрыИсправленияОшибок);
	ЗаполнитьДанные(КлючЗаписи);
	
	НайденныйКонтрагент = Неопределено;
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", КонтрагентИНН, КонтрагентКПП, НайденныйКонтрагент);
	
	Если СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяСогласие Тогда
		Если Не ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
			Контрагент = НайденныйКонтрагент;
		КонецЕсли;
		
		Если СоздаватьКонтрагентовАвтоматически И Не ЗначениеЗаполнено(Контрагент) Тогда
			Элементы.ПредставлениеКонтрагента.Видимость = Истина;
			Элементы.Контрагент.Видимость = Ложь;
		Иначе 
			Элементы.ПредставлениеКонтрагента.Видимость = Ложь;
			Элементы.Контрагент.Видимость = Истина;
		КонецЕсли;
		Элементы.ДанныеКонтрагента.Видимость = Не Элементы.ПредставлениеКонтрагента.Видимость;
	Иначе 
		Элементы.ДанныеКонтрагента.Видимость = Ложь;
	КонецЕсли;
	
	НастроитьФорму();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПанельКонтекстныхНовостей);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	РеквизитКонтрагент = ПроверяемыеРеквизиты.Найти("Контрагент");
	Если Не Элементы.Контрагент.Видимость И РеквизитКонтрагент <> Неопределено Тогда
		ПроверяемыеРеквизиты.Удалить(РеквизитКонтрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ЭтоСобытиеИзмененияПриглашения(ИмяСобытия, Источник) Тогда
		ОбновитьФорму();
		ОповеститьОбИсправленииОшибок();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИдентификаторОрганизацииОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	КлючЗаписи = ОбменСКонтрагентамиСлужебныйКлиент.КлючУчетнойЗаписиЭДО(ИдентификаторОрганизации);
	ПараметрыФормы = Новый Структура("Ключ", КлючЗаписи);
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Принять(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда  
		Возврат; 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		
		Если ЗначениеЗаполнено(НайденныйКонтрагент) Тогда
			Контрагент = НайденныйКонтрагент;
		ИначеЕсли СоздаватьКонтрагентовАвтоматически Тогда
			РеквизитыКонтрагента = Новый Структура;
			РеквизитыКонтрагента.Вставить("Наименование", КонтрагентНаименование);
			РеквизитыКонтрагента.Вставить("ИНН"         , КонтрагентИНН);
			РеквизитыКонтрагента.Вставить("КПП"         , КонтрагентКПП);
			Контрагент = СоздатьНовогоКонтрагента(РеквизитыКонтрагента);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Контрагент) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не заполнен контрагент, создание приглашения невозможно'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьОтправкуОтветаНаПриглашение("Принять");
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ОтклонитьОтозватьПриглашение(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Отозвать(Команда)
	
	ОтклонитьОтозватьПриглашение(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	ОткрытьПомощникОтправкиПриглашения();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьОписание(Команда)
	
	БуферОбмена = СтрШаблон(
		"<!DOCTYPE html>
		|<html>
		|	<body onload='copy()'>
		|		<input id='input' type='text'/>
		|		<script>
		|			function copy() {
		|				var text = '%1';
		|				var ua = navigator.userAgent;
		|				if (ua.search(/MSIE/) > 0 || ua.search(/Trident/) > 0) {
		|					window.clipboardData.setData('Text', text);
		|				} else {
		|					var copyText = document.getElementById('input');
		|					copyText.value = text;
		|					copyText.select();
		|					document.execCommand('copy');
		|				}
		|			}
		|		</script>
		|	</body>
		|</html>", ОписаниеОшибки);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДанные(КлючПриглашения)
	
	СоздаватьКонтрагентовАвтоматически = Константы.СоздаватьКонтрагентовАвтоматическиБЭД.Получить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК Статус,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент КАК Контрагент,
		|	ПРЕДСТАВЛЕНИЕ(ПриглашенияКОбменуЭлектроннымиДокументами.Контрагент) КАК КонтрагентПредставление,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Наименование КАК КонтрагентНаименование,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИНН КАК КонтрагентИНН,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.КПП КАК КонтрагентКПП,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ОписаниеОшибки КАК ОписаниеОшибки,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ТекстПриглашения КАК ТекстПриглашения,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Email КАК ЭлектроннаяПочта,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ОператорЭДО КАК ОператорКонтрагента,
		|	УчетныеЗаписиЭДО.Организация КАК Организация,
		|	УчетныеЗаписиЭДО.ОператорЭДО КАК ОператорОрганизации,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ПричинаОтказа КАК ПричинаОтказа,
		|	ПриглашенияКОбменуЭлектроннымиДокументами.EmailОрганизации КАК EmailОрганизации
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|		ПО ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = УчетныеЗаписиЭДО.ИдентификаторЭДО
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОрганизации)
		|			И (ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторКонтрагента)";
	
	Запрос.УстановитьПараметр("ИдентификаторОрганизации", КлючПриглашения.ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("ИдентификаторКонтрагента", КлючПриглашения.ИдентификаторКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	СтатусПодключения          = Выборка.Статус;
	Контрагент                 = Выборка.Контрагент;
	КонтрагентНаименование     = ?(ЗначениеЗаполнено(Контрагент),
		Выборка.КонтрагентПредставление, Выборка.КонтрагентНаименование);
	КонтрагентИНН              = Выборка.КонтрагентИНН;
	КонтрагентКПП              = Выборка.КонтрагентКПП;
	ИдентификаторКонтрагента   = Выборка.ИдентификаторКонтрагента;
	Организация                = Выборка.Организация;
	ИдентификаторОрганизации   = Выборка.ИдентификаторОрганизации;
	ОписаниеОшибки             = Выборка.ОписаниеОшибки;
	ТекстПриглашения           = Выборка.ТекстПриглашения;
	ЭлектроннаяПочта           = Выборка.ЭлектроннаяПочта;
	ОператорКонтрагента        = Выборка.ОператорКонтрагента;
	ОператорОрганизации        = Выборка.ОператорОрганизации;
	ПричинаОтказаОтПриглашения = Выборка.ПричинаОтказа;
	EmailОрганизации           = Выборка.EmailОрганизации;
	
	СпособОбмена = ПолучитьСпособОбмена(ИдентификаторОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
	
	Если ЗначениеЗаполнено(КонтрагентКПП) Тогда
		Шаблон = НСтр("ru = '%1 (ИНН: %2 КПП: %3)'");
		ДанныеКонтрагента = СтрШаблон(Шаблон, КонтрагентНаименование, КонтрагентИНН, КонтрагентКПП);
	Иначе
		Шаблон = НСтр("ru = '%1 (ИНН: %2)'");
		ДанныеКонтрагента = СтрШаблон(Шаблон, КонтрагентНаименование, КонтрагентИНН);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ПредставлениеКонтрагента = Новый ФорматированнаяСтрока(КонтрагентНаименование,,,,ПолучитьНавигационнуюСсылку(Контрагент));
	Иначе 
		ПредставлениеКонтрагента = Новый ФорматированнаяСтрока(ДанныеКонтрагента);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеКонтрагента) Тогда
		Элементы.ДанныеКонтрагента.Видимость = Ложь;
	КонецЕсли;
	Элементы.ИдентификаторКонтрагента.Видимость = ИдентификаторКонтрагента <> КонтрагентИНН;
	
	Если СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяСогласие Тогда
		Элементы.Принять.Видимость   = Истина;
		Элементы.Принять.КнопкаПоУмолчанию = Истина;
		Элементы.Отклонить.Видимость = Истина;
		Элементы.Отозвать.Видимость = Ложь;
		
	ИначеЕсли СтатусПодключения = Перечисления.СтатусыПриглашений.Принято Тогда
		Элементы.Принять.Видимость   = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		Элементы.Отозвать.Видимость = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли СтатусПодключения = Перечисления.СтатусыПриглашений.ОжидаемСогласия Тогда
		Элементы.Принять.Видимость   = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		Элементы.Отозвать.Видимость = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
		
	Иначе
		Элементы.Принять.Видимость   = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		Элементы.Отозвать.Видимость = Ложь;
		Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Элементы.ОтправитьПовторно.Видимость = СтатусПодключения = Перечисления.СтатусыПриглашений.Отклонено
		ИЛИ СтатусПодключения = Перечисления.СтатусыПриглашений.Ошибка
		ИЛИ СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить;
	Если СтатусПодключения = Перечисления.СтатусыПриглашений.ТребуетсяОтправить Тогда
		Элементы.ОтправитьПовторно.Заголовок = НСтр("ru = 'Отправить'");
	Иначе
		Элементы.ОтправитьПовторно.Заголовок = НСтр("ru = 'Отправить повторно'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Элементы.ГруппаОписаниеОшибки.Видимость = Истина;
		Элементы.БуферОбмена.Видимость = Истина;
		Элементы.ДекорацияОписаниеОшибки.Заголовок = ОписаниеОшибки;
	Иначе
		Элементы.ГруппаОписаниеОшибки.Видимость = Ложь;
		Элементы.БуферОбмена.Видимость = Ложь;
	КонецЕсли;
	
	Если СтатусПодключения = Перечисления.СтатусыПриглашений.Ошибка
		Или СтатусПодключения = Перечисления.СтатусыПриглашений.Отклонено Тогда
		ЦветФона = ЦветаСтиля.ЦветОтклоненногоПриглашенияКЭДО;
	ИначеЕсли СтатусПодключения = Перечисления.СтатусыПриглашений.Принято Тогда
		ЦветФона = ЦветаСтиля.ЦветПринятогоПриглашенияКЭДО;
	Иначе
		ЦветФона = ЦветаСтиля.ЦветОбрабатываемогоПриглашенияКЭДО;
	КонецЕсли;
	
	Элементы.ГруппаСостояние.ЦветФона = ЦветФона;
	
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена() Тогда
		Элементы.ОтправитьПовторно.Видимость = Ложь;
		Элементы.Принять.Видимость = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		Элементы.Отозвать.Видимость = Ложь;
	КонецЕсли;
	
	СвязиПараметровВыбора = Новый Массив;
	ИмяРеквизитаИНН = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении("ИННКонтрагента");
	Если ИмяРеквизитаИНН <> Неопределено Тогда
		ИмяСвязи = СтрШаблон("Отбор.%1", ИмяРеквизитаИНН);
		СвязьПараметраВыбора = Новый СвязьПараметраВыбора(ИмяСвязи, "КонтрагентИНН");
		СвязиПараметровВыбора.Добавить(СвязьПараметраВыбора);
		Элементы.Контрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	КонецЕсли;
	
	Элементы.ПричинаОтказаОтПриглашения.Видимость = ЗначениеЗаполнено(ПричинаОтказаОтПриглашения)
		И СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Отклонено");
		
	Элементы.EmailОрганизации.Видимость = ЗначениеЗаполнено(EmailОрганизации);
	
	Если СтатусПодключения = ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ОжидаемСогласия")
		И ЗначениеЗаполнено(ОператорКонтрагента) Тогда
		
		СтатусПодключения = НСтр("ru = 'Настройка роуминга'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьНовогоКонтрагента(Знач РеквизитыКонтрагента)
	
	Возврат ОбменСКонтрагентамиСлужебный.НовыйКонтрагентПоРеквизитам(РеквизитыКонтрагента);
	
КонецФункции

&НаКлиенте
Процедура ОтклонитьОтозватьПриглашение(Команда)
	
	Если СтатусПодключения <> ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.Принято") Тогда
		НачатьОтправкуОтветаНаПриглашение(Команда.Имя);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ОтправитьОтветНаПриглашениеПослеВопроса", ЭтотОбъект, Команда.Имя);
		ТекстСообщения = 
			НСтр("ru = 'После разрыва связи с контрагентом больше не будет возможности обмениваться электронными документами с контрагентом.
				|Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаПриглашениеПослеВопроса(Результат, ИмяКоманды) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НачатьОтправкуОтветаНаПриглашение(ИмяКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтправкуОтветаНаПриглашение(Ответ)
	
	ОчиститьСообщения();
	
	Контекст = Новый Структура;
	Контекст.Вставить("Ответ", Ответ);
	Контекст.Вставить("ПричинаОтказаОтПриглашения", "");
	
	Оповещение = Новый ОписаниеОповещения("ПослеВводаПричиныОтказаОтПриглашения", ЭтотОбъект, Контекст);
	Если ОбменСКонтрагентамиСлужебныйКлиент.ТребуетсяУказаниеПричиныОтказаОтПриглашения(СпособОбмена)
		И (Ответ = "Отклонить" Или Ответ = "Отозвать") Тогда
		ДополнительныеПараметрыВводаСтроки = ОбменСКонтрагентамиСлужебныйКлиент.ДополнительныеПараметрыВводаСтроки();
		ДополнительныеПараметрыВводаСтроки.Многострочность = Истина;
		ДополнительныеПараметрыВводаСтроки.Обязательность = Истина;
		ДополнительныеПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причину отказа от приглашения'");
		ОбменСКонтрагентамиСлужебныйКлиент.ПоказатьВводСтрокиБЭД(Оповещение, ДополнительныеПараметрыВводаСтроки);
	Иначе
		ВыполнитьОбработкуОповещения(Оповещение, "");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПричиныОтказаОтПриглашения(РезультатВвода, Контекст) Экспорт
	
	Если РезультатВвода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Контекст.Ответ = "Отозвать" Тогда
		Элементы.Отозвать.Доступность = Ложь;
	Иначе
		Элементы.Принять.Доступность = Ложь;
		Элементы.Отклонить.Доступность = Ложь;
	КонецЕсли;
	
	Контекст.ПричинаОтказаОтПриглашения = РезультатВвода;
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьОтветНаПриглашениеПослеПолученияМаркера", ЭтотОбъект, Контекст);
	МассивИдентификаторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторОрганизации);
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(Оповещение, МассивИдентификаторов,,, КонтекстОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаПриглашениеПослеПолученияМаркера(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Соответствие = Неопределено;
	Маркер = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", Соответствие)
		И ТипЗнч(Соответствие) = Тип("Соответствие") Тогда
		
		СтСертификата = Соответствие.Получить(ИдентификаторОрганизации);
		Если ТипЗнч(СтСертификата) = Тип("Структура") Тогда
			СтСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Маркер) Тогда
		КонтекстОперации = Результат.КонтекстОперации;
		
		ОтказОтАутентификации = ОбменСКонтрагентамиСлужебныйКлиент.ПользовательОтказалсяОтАутентификации(Результат, ИдентификаторОрганизации);
		
		Если Контекст.Ответ = "Принять" Тогда
			Если ОтказОтАутентификации Тогда
				ШаблонОшибки = НСтр("ru = 'Аутентификация в сервисе не была выполнена. Принятие приглашения не было произведено.'");
			Иначе 
				ШаблонОшибки = НСтр("ru = 'При принятии приглашения возникли ошибки.'");
			КонецЕсли;
			КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'При принятии приглашения'");
		ИначеЕсли Контекст.Ответ = "Отклонить" Тогда
			Если ОтказОтАутентификации Тогда
				ШаблонОшибки = НСтр("ru = 'Аутентификация в сервисе не была выполнена. Отклонение приглашения не было произведено.'");
			Иначе 
				ШаблонОшибки = НСтр("ru = 'При отклонении приглашения возникли ошибки.'");
			КонецЕсли;
			КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'При отклонении приглашения'");
		ИначеЕсли Контекст.Ответ = "Отозвать" Тогда
			Если ОтказОтАутентификации Тогда
				ШаблонОшибки = НСтр("ru = 'Аутентификация в сервисе не была выполнена. Отзыв приглашения не был произведен.'");
			Иначе 
				ШаблонОшибки = НСтр("ru = 'При отзыве приглашения возникли ошибки.'");
			КонецЕсли;
			КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'При отзыве приглашения'");
		Иначе
			ШаблонОшибки = "";
		КонецЕсли;
		
		Если ОтказОтАутентификации Тогда
			ОписаниеОшибки = ШаблонОшибки;
		Иначе 
			ОписаниеОшибки = ШаблонОшибки + Символы.ПС
				+ НСтр("ru = 'Необходимо выполнить проверку учетной записи ЭДО.'");
		КонецЕсли;
		
		Результат = Новый Структура;
		Результат.Вставить("Статус",           "Ошибка");
		Результат.Вставить("ОписаниеОшибки",   ОписаниеОшибки);
		Результат.Вставить("КонтекстОперации", КонтекстОперации);
		
		ЗавершитьОтправкуОтветаНаПриглашение(Результат, Контекст);
		Возврат;
	КонецЕсли;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Маркер"             , Маркер);
	ПараметрыПроцедуры.Вставить("Идентификатор"      , ИдентификаторКонтрагента);
	ПараметрыПроцедуры.Вставить("ПриглашениеПринято" , Контекст.Ответ = "Принять");
	
	ПараметрыПроцедуры.Вставить("ИдентификаторКонтрагента"  , ИдентификаторКонтрагента);
	ПараметрыПроцедуры.Вставить("ИдентификаторОрганизации"  , ИдентификаторОрганизации);
	ПараметрыПроцедуры.Вставить("Получатель"                , Контрагент);
	ПараметрыПроцедуры.Вставить("ПричинаОтказаОтПриглашения", Контекст.ПричинаОтказаОтПриглашения);
	
	ДлительнаяОперация = ОтправитьОтветНаПриглашение(УникальныйИдентификатор, ПараметрыПроцедуры);
	Если ДлительнаяОперация.Статус <> "Выполняется" Тогда
		ЗавершитьОтправкуОтветаНаПриглашение(ДлительнаяОперация, Контекст);
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьОтправкуОтветаНаПриглашение", ЭтотОбъект, Контекст);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОжидание;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтправитьОтветНаПриглашение(Знач УникальныйИдентификатор, Знач ПараметрыПроцедуры)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Ответ на приглашение ЭДО'");
	
	ПараметрыПроцедуры.Вставить("СпособОбменаЭД" , ПолучитьСпособОбмена(ПараметрыПроцедуры.ИдентификаторОрганизации));
	ПараметрыПроцедуры.Вставить("ПараметрыОбновленияСтатусов", Неопределено);
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ОбменСКонтрагентамиСлужебный.ПринятьОтклонитьКонтактЧерезОператораЭДО", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОтправкуОтветаНаПриглашение(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроцедуры = Неопределено;
	Если Результат.Свойство("АдресРезультата") И ЗначениеЗаполнено(Результат.АдресРезультата) Тогда
		РезультатПроцедуры = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(РезультатПроцедуры) Тогда
		РезультатПроцедуры = Новый Структура("Результат", Истина);
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Или Не РезультатПроцедуры.Результат Тогда
		КонтекстОперации = Неопределено;
		Если Не Результат.Свойство("КонтекстОперации", КонтекстОперации) Тогда
			РезультатПроцедуры.Свойство("КонтекстОперации", КонтекстОперации);
		КонецЕсли;
		
		ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "ОписаниеОшибки",
			НСтр("ru = 'При отправке ответа на приглашение произошла ошибка.
				|Подробнее см. в журнале регистрации'"));
			
		Если ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьОшибки(КонтекстОперации) Тогда
			ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
		Иначе 
			ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
		КонецЕсли;
		
		Если Контекст.Ответ = "Отозвать" Тогда
			Элементы.Отозвать.Доступность = Истина;
		Иначе
			Элементы.Принять.Доступность   = Истина;
			Элементы.Отклонить.Доступность = Истина;
		КонецЕсли;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновная;
		Возврат;
	КонецЕсли;
	
	Если Контекст.Ответ = "Принять" Тогда
		Текст = НСтр("ru = 'Приглашение принято.
			|Теперь можно обмениваться с контрагентом электронными документами.'");
		Элементы.Принять.Видимость   = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		
	ИначеЕсли Контекст.Ответ = "Отклонить" Тогда
		Текст = НСтр("ru = 'Приглашение отклонено.
			|Теперь прием и отправка электронных документов невозможны.'");
		Элементы.Принять.Видимость   = Ложь;
		Элементы.Отклонить.Видимость = Ложь;
		
	ИначеЕсли Контекст.Ответ = "Отозвать" Тогда
		Текст = НСтр("ru = 'Приглашение отозвано.
			|Теперь прием и отправка электронных документов невозможны.'");
		Элементы.Отозвать.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.НадписьВыполнено.Заголовок = Текст;
	
	Элементы.Закрыть.КнопкаПоУмолчанию = Истина;
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаВыполнено;
	
	Оповестить("ОбновитьСостояниеПриглашений");
	ОповеститьОбИсправленииОшибок();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСпособОбмена(Идентификатор)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	УчетныеЗаписиЭДО.СпособОбменаЭД КАК СпособОбменаЭД
		|ИЗ
		|	РегистрСведений.УчетныеЗаписиЭДО КАК УчетныеЗаписиЭДО
		|ГДЕ
		|	УчетныеЗаписиЭДО.ИдентификаторЭДО = &ИдентификаторЭДО";
	
	Запрос.УстановитьПараметр("ИдентификаторЭДО", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.СпособОбменаЭД;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьПомощникОтправкиПриглашения()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	ПараметрыФормы.Вставить("Контрагент",  Контрагент);
	ПараметрыФормы.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	Если ИдентификаторКонтрагента <> КонтрагентИНН Тогда
		ПараметрыФормы.Вставить("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	ИначеЕсли ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		ПараметрыФормы.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	ИначеЕсли ЗначениеЗаполнено(ОператорКонтрагента) Тогда
		ПараметрыФормы.Вставить("ОператорКонтрагента", ОператорКонтрагента);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.Форма.ПомощникОтправкиПриглашения",
		ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФорму()
	
	КлючПриглашения = Новый Структура;
	КлючПриглашения.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	КлючПриглашения.Вставить("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	
	ЗаполнитьДанные(КлючПриглашения);
	
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоСобытиеИзмененияПриглашения(ИмяСобытия, Источник)
	
	КлючЗаписи = ОбменСКонтрагентамиСлужебныйКлиент.КлючЗаписиПриглашения(
		ИдентификаторОрганизации, ИдентификаторКонтрагента);
	
	Если ИмяСобытия = ОбменСКонтрагентамиСлужебныйКлиент.ИмяСобытияИзмененияОбъекта(КлючЗаписи)
		И Источник = КлючЗаписи Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область КонтекстныеПодсказки

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораКонтрагента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораКонтрагента(Контрагент); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораУчетнойЗаписиОрганизации(Организация); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;

	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Процедура ОповеститьОбИсправленииОшибок() 
	
	Если ЗначениеЗаполнено(ПараметрыИсправленияОшибок) Тогда
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОповеститьОбИсправленииОшибок(ПараметрыИсправленияОшибок.ИсправленныеОшибки);
		Оповестить("ОбменСКонтрагентами.ВыполненоУстранениеОшибок", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючЗаписи));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти