
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СформироватьПриОткрытии") Тогда
		Параметры.СформироватьПриОткрытии = Ложь;
	КонецЕсли;
	
	// Сохранение параметров открытия формы.
	ФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, Раздел, Подсистема, ПодсистемаПредставление");
	ЗаполнитьЗначенияСвойств(ФормаПараметры, Параметры);
	ФормаПараметры.Вставить("Отбор", Новый Структура);
	Если ТипЗнч(Параметры.Отбор) = Тип("Структура") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ФормаПараметры.Отбор, Параметры.Отбор, Истина);
		Параметры.Отбор.Очистить();
	КонецЕсли;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	СхемаКомпоновки = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	ОтчетПолноеИмя  = ОтчетМетаданные.ПолноеИмя();
	
	Если Параметры.Свойство("ДополнительнаяОбработкаСсылка") Тогда
		ОтчетСсылка = Параметры.ДополнительнаяОбработкаСсылка;
	ИначеЕсли Параметры.Свойство("Отчет") Тогда
		ОтчетСсылка = Параметры.Отчет;
	Иначе
		Информация = ВариантыОтчетов.ИнформацияОбОтчете(ОтчетПолноеИмя);
		ОтчетСсылка = Информация.Отчет;
	КонецЕсли; 
	
	НастройкиОтчета = ВариантыОтчетов.НастройкиФормыОтчета(ОтчетСсылка, КлючТекущегоВарианта, ОтчетОбъект);
	НастройкиОтчета.Вставить("РазрешеноВыбиратьВарианты", Истина);
	НастройкиОтчета.Вставить("СхемаМодифицирована", Ложь);
	НастройкиОтчета.Вставить("АдресСхемы",   СхемаКомпоновки);
	НастройкиОтчета.Вставить("КлючСхемы",    "");
	НастройкиОтчета.Вставить("Контекстный",  ТипЗнч(ФормаПараметры.Отбор) = Тип("Структура") И ФормаПараметры.Отбор.Количество() > 0);
	НастройкиОтчета.Вставить("ПолноеИмя",    ОтчетПолноеИмя);
	НастройкиОтчета.Вставить("Наименование", СокрЛП(ОтчетМетаданные.Представление()));
	НастройкиОтчета.Вставить("ОтчетСсылка",  ОтчетСсылка);
	НастройкиОтчета.Вставить("Внешний",      ТипЗнч(НастройкиОтчета.ОтчетСсылка) = Тип("Строка"));
	НастройкиОтчета.Вставить("Безопасный",   БезопасныйРежим() <> Ложь);
	ОбновитьИнформациюОВариантеОтчета();
	
	ВыводитьФактическиеПлатежи = Истина;
	
	ЗаполнитьОрганизацию();
	
	Отчет.ПериодПросроченныхПлатежей.Вариант = ВариантСтандартногоПериода.Последние7Дней;
	Отчет.ПериодБудущихПлатежей.Вариант = ВариантСтандартногоПериода.Следующие7Дней;
	Отчет.РабочаяДата = ТекущаяДата();
	
	// Тесная интеграция с подсистемами БСП.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		Если НЕ НастройкиОтчета.Свойство("ВариантСсылка") Тогда
			Если Параметры.Свойство("Ключ") И ТипЗнч(Параметры.Ключ)=Тип("СправочникСсылка.ВариантыОтчетов") Тогда
				НастройкиОтчета.Вставить("ВариантСсылка", Параметры.Ключ);
			Иначе
				НастройкиОтчета.Вставить("ВариантСсылка", Справочники.ВариантыОтчетов.ПустаяСсылка());
			КонецЕсли; 
		КонецЕсли; 
		МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		УбратьКартинкиКомандРекурсивно(Элементы.ГруппаОтправить.ПодчиненныеЭлементы);
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
// Процедура - обработчик события "ПриСохраненииВариантаНаСервере" формы.
//
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	НаименованиеТекущегоВарианта = ПредставлениеТекущегоВарианта;
	
КонецПроцедуры // ПриСохраненииВариантаНаСервере()

&НаСервере
// Процедура - обработчик события "ПриЗагрузкеВариантаНаСервере" формы.
//
Процедура ПриЗагрузкеВариантаНаСервере(Настройки)

	НаименованиеТекущегоВарианта = ПредставлениеТекущегоВарианта;
	ОбновитьИнформациюОВариантеОтчета();

КонецПроцедуры // ПриЗагрузкеВариантаНаСервере()

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Настройки)
	
	ВывестиОтчет();
	
КонецПроцедуры // ПриЗагрузкеПользовательскихНастроекНаСервере()

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	ВывестиОтчет(Истина);

КонецПроцедуры // ОбработкаОповещения()

&НаСервере
Процедура ПриСохраненииПользовательскихНастроекНаСервере(Настройки)
	ВариантыОтчетов.ПриСохраненииПользовательскихНастроекНаСервере(ЭтотОбъект, Настройки);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "Организация".
//
Процедура ОрганизацияПриИзменении(Элемент)

	ВывестиОтчет();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ОбработкаРасшифровки" поля "Результат".
//
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеПоляРасшифровки = ПолучитьЗначениеПоляРасшифровки(Расшифровка);
	
	Если ЗначениеЗаполнено(ЗначениеПоляРасшифровки) Тогда
		СтруктураПараметры = Новый Структура("Ключ", ЗначениеПоляРасшифровки.СсылкаДокумента);
		ОткрытьФорму(ЗначениеПоляРасшифровки.ИмяФормыДокумента, СтруктураПараметры);
	КонецЕсли;

КонецПроцедуры // РезультатОбработкаРасшифровки()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ПериодПросроченныхПлатежей".
//
Процедура ПериодПросроченныхПлатежейПриИзменении(Элемент)
	
	ВывестиОтчет();

КонецПроцедуры // ПериодПросроченныхПлатежейПриИзменении()

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ПериодБудущихПлатежей".
//
Процедура ПериодБудущихПлатежейПриИзменении(Элемент)
	
	ВывестиОтчет();
	
КонецПроцедуры // ПериодБудущихПлатежейПриИзменении()

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура выполняется при нажатии кнопки "Сформировать".
//
Процедура СформироватьВыполнить(Команда)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ФормированиеОтчёта_ПлатежныйКалендарь");
	// СтандартныеПодсистемы.ОценкаПроизводительности
	
	ВывестиОтчет();
	
КонецПроцедуры // СформироватьВыполнить()

&НаКлиенте
Процедура ОтправитьПоПочте(Команда)
	
	Если Результат.ВысотаТаблицы=0 Тогда
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Обработчик = Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
	Иначе
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВывестиОтчет();
		ПоказатьДиалогОтправкиПоПочте();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	ПостояннаяКоманда = ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя);
	Если ПостояннаяКоманда <> Неопределено И ЗначениеЗаполнено(ПостояннаяКоманда.Представление) Тогда
		МассивПодстрок = СтрРазделить(ПостояннаяКоманда.Представление, ".");
		КлиентскийМодуль = ОбщегоНазначенияКлиент.ОбщийМодуль(МассивПодстрок[0]);
		Обработчик = Новый ОписаниеОповещения(МассивПодстрок[1], КлиентскийМодуль, Команда);
		ВыполнитьОбработкуОповещения(Обработчик, ЭтотОбъект);
	Иначе
		ОтчетыКлиентПереопределяемый.ОбработчикКоманды(ЭтотОбъект, Команда, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьИнформациюОВариантеОтчета()
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ВариантНаименование", НаименованиеТекущегоВарианта);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка КАК ВариантСсылка,
	|	ВариантыОтчетов.ПредопределенныйВариант.КлючЗамеров КАК КлючЗамеров,
	|	ВариантыОтчетов.ПредопределенныйВариант КАК ПредопределенныйСсылка,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Пользовательский
	|				ИЛИ ВариантыОтчетов.Родитель.КлючВарианта ЕСТЬ NULL 
	|			ТОГДА ВариантыОтчетов.КлючВарианта
	|		ИНАЧЕ ВариантыОтчетов.Родитель.КлючВарианта
	|	КОНЕЦ КАК ИмяИсходногоВарианта,
	|	ВариантыОтчетов.Пользовательский КАК Пользовательский
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	Запрос.УстановитьПараметр("Отчет", НастройкиОтчета.ОтчетСсылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючТекущегоВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НастройкиОтчета.Вставить("ВариантСсылка",          Выборка.ВариантСсылка);
		НастройкиОтчета.Вставить("КлючЗамеров",            Выборка.КлючЗамеров);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Выборка.ПредопределенныйСсылка);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   ?(Выборка.Пользовательский, Выборка.ИмяИсходногоВарианта, КлючТекущегоВарианта));
		НастройкиОтчета.Вставить("Пользовательский",       Выборка.Пользовательский);
	Иначе
		НастройкиОтчета.Вставить("ВариантСсылка",          Неопределено);
		НастройкиОтчета.Вставить("КлючЗамеров",            Неопределено);
		НастройкиОтчета.Вставить("ПредопределенныйСсылка", Неопределено);
		НастройкиОтчета.Вставить("ИмяИсходногоВарианта",   Неопределено);
		НастройкиОтчета.Вставить("Пользовательский",       Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
// Процедура формирует платежный календарь.
//
Процедура ВывестиОтчет(НеВыводитьСообщения = Ложь)
	
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("НеВыводитьСообщения", НеВыводитьСообщения);
	
	СкомпоноватьРезультат();
	
КонецПроцедуры // ВывестиОтчет()

&НаСервере
// Процедура заполняет организацию в форме отчета.
//
Процедура ЗаполнитьОрганизацию()

	ВестиУчетПоКомпании = Константы.УчетПоКомпании.Получить();
	
	Если ВестиУчетПоКомпании Тогда
		Отчет.Организация = Справочники.Организации.ОрганизацияКомпания();
	Иначе
		ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			Отчет.Организация = ЗначениеНастройки;
		Иначе
			Отчет.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Элементы.Организация.Доступность = Не ВестиУчетПоКомпании;

КонецПроцедуры // ЗаполнитьОрганизацию()

&НаСервере
Процедура УбратьКартинкиКомандРекурсивно(КоллекцияЭлементов)
	
	Для каждого Элемент Из КоллекцияЭлементов Цикл
		Если ТипЗнч(Элемент)=Тип("КнопкаФормы") Тогда
			Элемент.Отображение = ОтображениеКнопки.Текст;
			Элемент.Картинка = Новый Картинка;
			Команда = Команды.Найти(Элемент.ИмяКоманды);
			Если Команда<>Неопределено Тогда
				Команда.Отображение = ОтображениеКнопки.Текст;
				Команда.Картинка = Новый Картинка;
			КонецЕсли; 
		ИначеЕсли ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
			УбратьКартинкиКомандРекурсивно(Элемент.ПодчиненныеЭлементы);
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры
 
&НаСервере
// Получает значение поля расшифровки.
//
Функция ПолучитьЗначениеПоляРасшифровки(Расшифровка)
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникНастроек);
		
	ДанныеРасшифровкиИзХранилища = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	
	// Создадим и инициализируем обработчик расшифровки.
	СтруктураРасшифровки = Новый Структура;
	
	ЭлементРасшифровки = ДанныеРасшифровкиИзХранилища.Элементы.Получить(Расшифровка);
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого ЗначениеПоляРасшифровки Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			Если ЗначениеПоляРасшифровки.Поле = "Документ"
			  И ЗначениеЗаполнено(ЗначениеПоляРасшифровки.Значение) Тогда
				СтруктураВозврата = Новый Структура;
				СтруктураВозврата.Вставить("ИмяФормыДокумента", "Документ." + ЗначениеПоляРасшифровки.Значение.Метаданные().Имя + ".ФормаОбъекта");
				СтруктураВозврата.Вставить("СсылкаДокумента", ЗначениеПоляРасшифровки.Значение);
				Возврат СтруктураВозврата;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции // ПолучитьЗначениеПоляРасшифровки()

&НаКлиенте
Процедура ПоказатьДиалогОтправкиПоПочте()
	Вложение = Новый Структура;
	Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор));
	Вложение.Вставить("Представление", НаименованиеТекущегоВарианта);
	
	СписокВложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Вложение);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями") Тогда
		МодульРаботаСПочтовымиСообщениямиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСПочтовымиСообщениямиКлиент");
		ПараметрыОтправки = МодульРаботаСПочтовымиСообщениямиКлиент.ПараметрыОтправкиПисьма();
		ПараметрыОтправки.Тема = НаименованиеТекущегоВарианта;
		ПараметрыОтправки.Вложения = СписокВложений;
		МодульРаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыОтправки);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
 
