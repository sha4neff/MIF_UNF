#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПриОпределенииНастроекОтчета(НастройкиОтчета, НастройкиВариантов) Экспорт
	
	НастройкиВариантов["Основной"].Теги = НСтр("ru = 'Деньги,План,Платежи'");
	
	НастройкиВариантов["Основной"].Рекомендуемый = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура - обработчик события "ОбработкаПроверкиЗаполнения".
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ПериодПросроченныхПлатежей.ДатаНачала > РабочаяДата Тогда
		ТекстОшибки = НСтр("ru='Период просроченных платежей не может быть больше текущей даты. Формирование отчета отменено.'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			Неопределено, // ОбъектИлиСсылка
			"ПериодПросроченныхПлатежей",
			"Отчет", // ПутьКДанным
			Отказ
		);
	КонецЕсли;

	Если ПериодБудущихПлатежей.ДатаОкончания < РабочаяДата Тогда
		ТекстОшибки = НСтр("ru='Период будущих платежей не может быть меньше текущей даты. Формирование отчета отменено.'");
		ОбщегоНазначения.СообщитьПользователю(
			ТекстОшибки,
			Неопределено, // ОбъектИлиСсылка
			"ПериодБудущихПлатежей",
			"Отчет", // ПутьКДанным
			Отказ
		);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПроверкиЗаполнения()

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	ДополнительныеСвойства = КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	Если ДополнительныеСвойства.Свойство("НеВыводитьСообщения") И ДополнительныеСвойства.НеВыводитьСообщения=Истина Тогда
		ПолучитьСообщенияПользователю(Истина);
	КонецЕсли;
	
	// Установим значения параметров коипоновки данных.
	ПараметрОрганизация = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Организация"));
	Если ПараметрОрганизация <> Неопределено Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			ПараметрОрганизация.Значение = УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация);
			ПараметрОрганизация.Использование = Истина;
		Иначе
			Организация = ПараметрОрганизация.Значение;
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрДатаНачала = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаНачала"));
	Если ПараметрДатаНачала <> Неопределено Тогда
		Если ЗначениеЗаполнено(ПериодПросроченныхПлатежей) Тогда
			ПараметрДатаНачала.Значение = ПериодПросроченныхПлатежей.ДатаНачала;
			ПараметрДатаНачала.Использование = Истина;
		ИначеЕсли ЗначениеЗаполнено(ПараметрДатаНачала.Значение) Тогда 
			ПериодПросроченныхПлатежей.ДатаНачала = ПараметрДатаНачала.Значение;
		Иначе
			ПериодПросроченныхПлатежей = Новый СтандартныйПериод(ВариантСтандартногоПериода.Последние7Дней);
			ПараметрДатаНачала.Значение = ПериодПросроченныхПлатежей.ДатаНачала;
			ПараметрДатаНачала.Использование = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрДатаОкончания = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДатаОкончания"));
	Если ПараметрДатаОкончания <> Неопределено Тогда
		Если ЗначениеЗаполнено(ПериодБудущихПлатежей) Тогда
			ПараметрДатаОкончания.Значение = КонецДня(ПериодБудущихПлатежей.ДатаОкончания);
			ПараметрДатаОкончания.Использование = Истина;
		ИначеЕсли ЗначениеЗаполнено(ПараметрДатаОкончания.Значение) Тогда 
			ПериодБудущихПлатежей.ДатаОкончания = КонецДня(ПараметрДатаОкончания.Значение);
		Иначе
			ПериодБудущихПлатежей = Новый СтандартныйПериод(ВариантСтандартногоПериода.Следующие7Дней);
			ПараметрДатаОкончания.Значение = КонецДня(ПериодБудущихПлатежей.ДатаОкончания);
			ПараметрДатаОкончания.Использование = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	ПараметрРабочаяДата = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РабочаяДата"));
	Если ПараметрРабочаяДата <> Неопределено Тогда
		Если ЗначениеЗаполнено(РабочаяДата) Тогда
			ПараметрРабочаяДата.Значение = РабочаяДата;
			ПараметрРабочаяДата.Использование = Истина;
		Иначе
			РабочаяДата = ПараметрРабочаяДата.Значение;
		КонецЕсли; 
	КонецЕсли;
	
	Для каждого ЭлементНастройки Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
	
		Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			Если ЭлементНастройки.Параметр = Новый ПараметрКомпоновкиДанных("ДатаНачалаОплата") Тогда
				ЭлементНастройки.Значение = ПериодПросроченныхПлатежей.ДатаНачала;
			ИначеЕсли ЭлементНастройки.Параметр = Новый ПараметрКомпоновкиДанных("ДатаОкончанияОплата") Тогда
				ЭлементНастройки.Значение = КонецДня(ПериодБудущихПлатежей.ДатаОкончания);
			ИначеЕсли ЭлементНастройки.Параметр = Новый ПараметрКомпоновкиДанных("ОрганизацияОплата") Тогда
				ЭлементНастройки.Значение = Организация;
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЦикла;
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыОтчета = ПодготовитьПараметрыОтчета(НастройкиКомпоновкиДанных);
	
	УправлениеНебольшойФирмойОтчеты.УстановитьМакетОформленияОтчета(НастройкиКомпоновкиДанных);
	УправлениеНебольшойФирмойОтчеты.ВывестиЗаголовокОтчета(ПараметрыОтчета, ДокументРезультат);
	
	// Подготовим и выведем отчет.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, 
		НастройкиКомпоновкиДанных,
		ДанныеРасшифровки
	);
	
	ТаблицаПлатежей = ПолучитьТаблицуПланируемыхПлатежей();
	ВнешниеНаборыДанных = Новый Структура("ТаблицаПлатежей", ТаблицаПлатежей);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(
		МакетКомпоновки,
		ВнешниеНаборыДанных,
		ДанныеРасшифровки
	);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.НачатьВывод();
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	ПроцессорВывода.ЗакончитьВывод();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ДокументРезультат.ФиксацияСлева = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует запрос по получению таблицы остатков планируемых платежей.
//
Функция ЗапросПоОстаткамПланируемыхПлатежей()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ПлатежныйКалендарьОплата.СчетНаОплату ССЫЛКА Документ.ПеремещениеДСПлан
	|			ТОГДА ПлатежныйКалендарьОплата.ТипДенежныхСредств
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ПустаяСсылка)
	|	КОНЕЦ КАК ТипДенежныхСредств,
	|	ПлатежныйКалендарьОплата.СчетНаОплату КАК СчетНаОплату,
	|	ПлатежныйКалендарьОплата.Статья КАК Статья,
	|	СУММА(ПлатежныйКалендарьОплата.СуммаОплатыОборот) КАК СуммаОплатыОборот
	|ПОМЕСТИТЬ ПлатежныйКалендарьОплата
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			Авто,
	|			Организация = &Организация
	|				И СтатусУтвержденияПлатежа = ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден)) КАК ПлатежныйКалендарьОплата
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПлатежныйКалендарьОплата.СчетНаОплату ССЫЛКА Документ.ПеремещениеДСПлан
	|			ТОГДА ПлатежныйКалендарьОплата.ТипДенежныхСредств
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ПустаяСсылка)
	|	КОНЕЦ,
	|	ПлатежныйКалендарьОплата.СчетНаОплату,
	|	ПлатежныйКалендарьОплата.Статья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ПлатежныйКалендарь.ПериодСекунда < &РабочаяДата
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПорядокПлатежа,
	|	ВЫБОР
	|		КОГДА ПлатежныйКалендарь.ПериодСекунда < &РабочаяДата
	|			ТОГДА &ПросроченныеПлатежи
	|		ИНАЧЕ &ЗапланированныеПлатежи
	|	КОНЕЦ КАК СтатусПлатежа,
	|	ПлатежныйКалендарь.ПериодДень КАК День,
	|	ПлатежныйКалендарь.ПериодСекунда КАК ДатаПлатежа,
	|	ПлатежныйКалендарь.Регистратор.Дата КАК ДатаДокумента,
	|	ПлатежныйКалендарь.Регистратор КАК Документ,
	|	ПлатежныйКалендарь.Валюта КАК Валюта,
	|	ПлатежныйКалендарь.Валюта КАК ВалютаПлатежа,
	|	ПлатежныйКалендарь.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ПлатежныйКалендарь.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ПлатежныйКалендарь.СчетНаОплату = НЕОПРЕДЕЛЕНО
	|				ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|				ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|				ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА ПлатежныйКалендарь.Статья.Представление
	|		ИНАЧЕ ПлатежныйКалендарь.СчетНаОплату.Представление
	|	КОНЕЦ КАК Платеж,
	|	ПлатежныйКалендарь.СтатусУтвержденияПлатежа КАК СтатусУтвержденияПлатежа,
	|	ЛОЖЬ КАК СтрокаТекущийОстаток,
	|	ЕСТЬNULL(ПлатежныйКалендарь.Регистратор.Контрагент.Представление, """") КАК КонтрагентПредставление,
	|	ПлатежныйКалендарь.Статья.Представление КАК СтатьяПредставление,
	|	ПОДСТРОКА(ПлатежныйКалендарь.Регистратор.Комментарий, 1, 100) КАК Комментарий,
	|	&ТекстИтога КАК ТекстИтога,
	|	ПОДСТРОКА("""", 1, 200) КАК ДанныеПлатежа,
	|	МАКСИМУМ(ПлатежныйКалендарь.СуммаОборот) КАК СуммаОборот,
	|	СУММА(ЕСТЬNULL(ПлатежныйКалендарьДвижения.СуммаОборот, 0)) КАК СуммаВсегоОборот,
	|	МАКСИМУМ(ЕСТЬNULL(ПлатежныйКалендарьОплата.СуммаОплатыОборот, 0)) КАК СуммаОплатыОборот,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ПлатежныйКалендарь.СуммаОборот) > 0
	|			ТОГДА ВЫБОР
	|					КОГДА СУММА(ЕСТЬNULL(ПлатежныйКалендарьДвижения.СуммаОборот, 0)) - МАКСИМУМ(ЕСТЬNULL(ПлатежныйКалендарьОплата.СуммаОплатыОборот, 0)) >= 0
	|						ТОГДА МАКСИМУМ(ПлатежныйКалендарь.СуммаОборот)
	|					КОГДА СУММА(ЕСТЬNULL(ПлатежныйКалендарьДвижения.СуммаОборот, 0)) + МАКСИМУМ(ПлатежныйКалендарь.СуммаОборот) - МАКСИМУМ(ЕСТЬNULL(ПлатежныйКалендарьОплата.СуммаОплатыОборот, 0)) < 0
	|						ТОГДА 0
	|					ИНАЧЕ СУММА(ЕСТЬNULL(ПлатежныйКалендарьДвижения.СуммаОборот, 0)) + МАКСИМУМ(ПлатежныйКалендарь.СуммаОборот) - МАКСИМУМ(ЕСТЬNULL(ПлатежныйКалендарьОплата.СуммаОплатыОборот, 0))
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СУММА(ЕСТЬNULL(ПлатежныйКалендарьДвижения.СуммаОборот, 0)) - МАКСИМУМ(ЕСТЬNULL(ПлатежныйКалендарьОплата.СуммаОплатыОборот, 0)) <= 0
	|					ТОГДА МАКСИМУМ(ПлатежныйКалендарь.СуммаОборот)
	|				КОГДА СУММА(ЕСТЬNULL(ПлатежныйКалендарьДвижения.СуммаОборот, 0)) + МАКСИМУМ(ПлатежныйКалендарь.СуммаОборот) - МАКСИМУМ(ЕСТЬNULL(ПлатежныйКалендарьОплата.СуммаОплатыОборот, 0)) > 0
	|					ТОГДА 0
	|				ИНАЧЕ СУММА(ЕСТЬNULL(ПлатежныйКалендарьДвижения.СуммаОборот, 0)) + МАКСИМУМ(ПлатежныйКалендарь.СуммаОборот) - МАКСИМУМ(ЕСТЬNULL(ПлатежныйКалендарьОплата.СуммаОплатыОборот, 0))
	|			КОНЕЦ
	|	КОНЕЦ КАК Сумма,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ПлатежныйКалендарь.Регистратор ССЫЛКА Документ.ПеремещениеДСПлан
	|					И ПлатежныйКалендарь.СуммаОборот < 0
	|				ТОГДА -ПлатежныйКалендарь.СуммаОборот
	|			ИНАЧЕ ПлатежныйКалендарь.СуммаОборот
	|		КОНЕЦ) КАК СуммаПлатежа,
	|	0 КАК СуммаПриход,
	|	0 КАК СуммаРасход,
	|	0 КАК НачальныйОстатокПоСчету,
	|	0 КАК КонечныйОстатокПоСчету,
	|	0 КАК НачальныйОстатокПоВалюте,
	|	0 КАК КонечныйОстатокПоВалюте,
	|	0 КАК НачальныйОстатокПоТипуДенежныхСредств,
	|	0 КАК КонечныйОстатокПоТипуДенежныхСредств
	|ИЗ
	|	РегистрНакопления.ПлатежныйКалендарь.Обороты(&ДатаНачала, &ДатаОкончания, Авто, Организация = &Организация) КАК ПлатежныйКалендарь
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПлатежныйКалендарь.Обороты(
	|				&ДатаНачала,
	|				&ДатаОкончания,
	|				Авто,
	|				Организация = &Организация
	|					И СтатусУтвержденияПлатежа = ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден)) КАК ПлатежныйКалендарьДвижения
	|		ПО (ПлатежныйКалендарь.ПериодСекунда > ПлатежныйКалендарьДвижения.ПериодСекунда
	|				ИЛИ ПлатежныйКалендарь.ПериодСекунда = ПлатежныйКалендарьДвижения.ПериодСекунда
	|					И ПлатежныйКалендарь.Регистратор > ПлатежныйКалендарьДвижения.Регистратор)
	|			И (ВЫБОР
	|				КОГДА (ПлатежныйКалендарьДвижения.СчетНаОплату = НЕОПРЕДЕЛЕНО
	|						ИЛИ ПлатежныйКалендарьДвижения.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|						ИЛИ ПлатежныйКалендарьДвижения.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|						ИЛИ ПлатежныйКалендарьДвижения.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						ИЛИ ПлатежныйКалендарьДвижения.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))
	|						И (ПлатежныйКалендарь.СчетНаОплату = НЕОПРЕДЕЛЕНО
	|							ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|							ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|							ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|							ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))
	|						И ПлатежныйКалендарьДвижения.Статья <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|						И ПлатежныйКалендарьДвижения.Статья = ПлатежныйКалендарь.Статья
	|					ТОГДА ИСТИНА
	|				КОГДА ПлатежныйКалендарьДвижения.СчетНаОплату <> НЕОПРЕДЕЛЕНО
	|						И ПлатежныйКалендарьДвижения.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|						И ПлатежныйКалендарьДвижения.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|						И ПлатежныйКалендарьДвижения.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						И ПлатежныйКалендарьДвижения.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						И ПлатежныйКалендарь.СчетНаОплату = ПлатежныйКалендарьДвижения.СчетНаОплату
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлатежныйКалендарьОплата КАК ПлатежныйКалендарьОплата
	|		ПО (ПлатежныйКалендарь.СтатусУтвержденияПлатежа = ЗНАЧЕНИЕ(Перечисление.СтатусыУтвержденияПлатежей.Утвержден))
	|			И (ВЫБОР
	|				КОГДА (ПлатежныйКалендарьОплата.СчетНаОплату = НЕОПРЕДЕЛЕНО
	|						ИЛИ ПлатежныйКалендарьОплата.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|						ИЛИ ПлатежныйКалендарьОплата.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|						ИЛИ ПлатежныйКалендарьОплата.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						ИЛИ ПлатежныйКалендарьОплата.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))
	|						И (ПлатежныйКалендарь.СчетНаОплату = НЕОПРЕДЕЛЕНО
	|							ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|							ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|							ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|							ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка))
	|						И ПлатежныйКалендарьОплата.Статья <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|						И ПлатежныйКалендарьОплата.Статья = ПлатежныйКалендарь.Статья
	|					ТОГДА ИСТИНА
	|				КОГДА ПлатежныйКалендарьОплата.СчетНаОплату <> НЕОПРЕДЕЛЕНО
	|						И ПлатежныйКалендарьОплата.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|						И ПлатежныйКалендарьОплата.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|						И ПлатежныйКалендарьОплата.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|						И ПлатежныйКалендарьОплата.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|						И ПлатежныйКалендарьОплата.СчетНаОплату <> ЗНАЧЕНИЕ(Документ.ПеремещениеДСПлан.ПустаяСсылка)
	|						И ПлатежныйКалендарь.СчетНаОплату = ПлатежныйКалендарьОплата.СчетНаОплату
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(ПлатежныйКалендарьОплата.СчетНаОплату) = ТИП(Документ.ПеремещениеДСПлан)
	|					ТОГДА ПлатежныйКалендарь.ТипДенежныхСредств = ПлатежныйКалендарьОплата.ТипДенежныхСредств
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ПлатежныйКалендарь.ПериодСекунда < &РабочаяДата
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ,
	|	ПлатежныйКалендарь.ПериодДень,
	|	ПлатежныйКалендарь.ПериодСекунда,
	|	ПлатежныйКалендарь.Регистратор,
	|	ПлатежныйКалендарь.Валюта,
	|	ПлатежныйКалендарь.БанковскийСчетКасса,
	|	ПлатежныйКалендарь.ТипДенежныхСредств,
	|	ВЫБОР
	|		КОГДА ПлатежныйКалендарь.СчетНаОплату = НЕОПРЕДЕЛЕНО
	|				ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплату.ПустаяСсылка)
	|				ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.СчетНаОплатуПоставщика.ПустаяСсылка)
	|				ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяСсылка)
	|				ИЛИ ПлатежныйКалендарь.СчетНаОплату = ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|			ТОГДА ПлатежныйКалендарь.Статья.Представление
	|		ИНАЧЕ ПлатежныйКалендарь.СчетНаОплату.Представление
	|	КОНЕЦ,
	|	ПлатежныйКалендарь.Регистратор.Дата,
	|	ПОДСТРОКА(ПлатежныйКалендарь.Регистратор.Комментарий, 1, 100),
	|	ПлатежныйКалендарь.Статья.Представление,
	|	ВЫБОР
	|		КОГДА ПлатежныйКалендарь.ПериодСекунда < &РабочаяДата
	|			ТОГДА &ПросроченныеПлатежи
	|		ИНАЧЕ &ЗапланированныеПлатежи
	|	КОНЕЦ,
	|	ПлатежныйКалендарь.СтатусУтвержденияПлатежа,
	|	ЕСТЬNULL(ПлатежныйКалендарь.Регистратор.Контрагент.Представление, """"),
	|	ПлатежныйКалендарь.Валюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокПлатежа,
	|	ПлатежныйКалендарь.ПериодДень,
	|	ПлатежныйКалендарь.ПериодСекунда,
	|	ПлатежныйКалендарь.Регистратор,
	|	ПлатежныйКалендарь.БанковскийСчетКасса";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("ДатаНачала", ПериодПросроченныхПлатежей.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ПериодБудущихПлатежей.ДатаОкончания));
	Запрос.УстановитьПараметр("РабочаяДата", РабочаяДата);
	Запрос.УстановитьПараметр("ПросроченныеПлатежи", НСтр("ru = 'Итого просроченные платежи'"));
	Запрос.УстановитьПараметр("ЗапланированныеПлатежи", НСтр("ru = 'Итого запланированные платежи'"));
	Запрос.УстановитьПараметр("ТекстИтога", НСтр("ru = 'Всего платежи'"));
	
	Возврат Запрос;

КонецФункции // ЗапросПоОстаткамПланируемыхПлатежей()

// Формирует запрос по получению фактических остатков денежных средств.
//
Функция ЗапросПоОстаткамДенежныхСредств()

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК ПорядокПлатежа,
	|	&СтатусПлатежа КАК СтатусПлатежа,
	|	&ТекстИтога КАК ТекстИтога,
	|	ДенежныеСредства.ТипДенежныхСредств,
	|	&РабочаяДата КАК День,
	|	&РабочаяДата КАК ДатаПлатежа,
	|	&Платеж КАК Платеж,
	|	ИСТИНА КАК СтрокаТекущийОстаток,
	|	ДенежныеСредства.БанковскийСчетКасса,
	|	ДенежныеСредства.Валюта,
	|	ДенежныеСредства.СуммаВалОстаток КАК КонечныйОстатокПоСчету,
	|	ДенежныеСредства.СуммаВалОстаток КАК КонечныйОстатокПоВалюте,
	|	ДенежныеСредства.СуммаВалОстаток КАК КонечныйОстатокПоТипуДенежныхСредств,
	|	0 КАК Сумма
	|ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(, Организация = &Организация) КАК ДенежныеСредства
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДенежныеСредства.БанковскийСчетКасса";
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", УправлениеНебольшойФирмойСервер.ПолучитьОрганизацию(Организация));
	Запрос.УстановитьПараметр("РабочаяДата", РабочаяДата);
	Запрос.УстановитьПараметр("СтатусПлатежа", НСтр("ru = 'Доступный остаток'"));
	Запрос.УстановитьПараметр("ТекстИтога", НСтр("ru = 'Всего платежи'"));
	Запрос.УстановитьПараметр("Платеж", НСтр("ru = 'Текущий остаток'"));
	
	Возврат Запрос;

КонецФункции // ЗапросПоОстаткамПланируемыхПлатежей()

// Формирует таблицу планируемых платежей.
//
Функция ПолучитьТаблицуПланируемыхПлатежей()

	Запрос = ЗапросПоОстаткамПланируемыхПлатежей();
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаПлатежей = РезультатЗапроса.Выгрузить();
	
	СоответствиеОстатокПоСчету = Новый Соответствие;
	СоответствиеОстатокПоВалюте = Новый Соответствие;
	СоответствиеОстатокПоТипуДенежныхСредств = Новый Соответствие;
	
	ЗапросПоОстаткам = ЗапросПоОстаткамДенежныхСредств();
	РезультатЗапросаПоОстаткам = ЗапросПоОстаткам.Выполнить();
	Выборка = РезультатЗапросаПоОстаткам.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаПлатежей.Вставить(0);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КлючСоответствия = Строка(Выборка.БанковскийСчетКасса) + Строка(Выборка.Валюта);
		СоответствиеОстатокПоСчету.Вставить(КлючСоответствия, Выборка.КонечныйОстатокПоСчету);
		
		КлючСоответствия = Строка(Выборка.Валюта);
		ОстатокПоВалюте = СоответствиеОстатокПоВалюте[КлючСоответствия];
		ОстатокПоВалюте = ?(ОстатокПоВалюте = Неопределено, 0, ОстатокПоВалюте);
		СоответствиеОстатокПоВалюте.Вставить(КлючСоответствия, ОстатокПоВалюте + Выборка.КонечныйОстатокПоВалюте);
		
		КлючСоответствия = Строка(Выборка.ТипДенежныхСредств) + Строка(Выборка.Валюта);
		ОстатокПоТипуДенежныхСредств = СоответствиеОстатокПоТипуДенежныхСредств[КлючСоответствия];
		ОстатокПоТипуДенежныхСредств = ?(ОстатокПоТипуДенежныхСредств = Неопределено, 0, ОстатокПоТипуДенежныхСредств);
		СоответствиеОстатокПоТипуДенежныхСредств.Вставить(КлючСоответствия, ОстатокПоТипуДенежныхСредств + Выборка.КонечныйОстатокПоТипуДенежныхСредств);
		
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из ТаблицаПлатежей Цикл
		
		Если СтрокаТаблицы.СтрокаТекущийОстаток Тогда
			
			КлючСоответствия = Строка(СтрокаТаблицы.ТипДенежныхСредств) + Строка(СтрокаТаблицы.Валюта);
			ОстатокПоТипуДенежныхСредств = СоответствиеОстатокПоТипуДенежныхСредств[КлючСоответствия];
			СтрокаТаблицы.КонечныйОстатокПоТипуДенежныхСредств = ОстатокПоТипуДенежныхСредств;
			
			КлючСоответствия = Строка(СтрокаТаблицы.Валюта);
			ОстатокПоВалюте = СоответствиеОстатокПоВалюте[КлючСоответствия];
			СтрокаТаблицы.КонечныйОстатокПоВалюте = ОстатокПоВалюте;
			
			Продолжить;
		КонецЕсли;
		
		ДанныеПлатежаСтрока = СтрокаТаблицы.КонтрагентПредставление
			+ ?(ПустаяСтрока(СтрокаТаблицы.СтатьяПредставление), "", ", " + СтрокаТаблицы.СтатьяПредставление)
			+ ?(ПустаяСтрока(СтрокаТаблицы.Комментарий), "", ", " + СтрокаТаблицы.Комментарий);
		
		Если Лев(ДанныеПлатежаСтрока, 1) = "," Тогда
			СтрокаТаблицы.ДанныеПлатежа = СокрЛП(Сред(ДанныеПлатежаСтрока, 2));
		Иначе
			СтрокаТаблицы.ДанныеПлатежа = СокрЛП(ДанныеПлатежаСтрока);
		КонецЕсли;
		
		// Если платеж полностью оплачен, он не должен выводится в отчет.
		Если СтрокаТаблицы.Сумма = 0
			И НЕ СтрокаТаблицы.СтрокаТекущийОстаток Тогда
			СтрокаТаблицы.Документ = NULL;
		КонецЕсли;
		
		Если СтрокаТаблицы.Сумма < 0 Тогда
			СтрокаТаблицы.СуммаРасход = -СтрокаТаблицы.Сумма;
		Иначе
			СтрокаТаблицы.СуммаПриход = СтрокаТаблицы.Сумма;
		КонецЕсли;
		
		// Рассчитаем текущий остаток по счету.
		КлючСоответствия = Строка(СтрокаТаблицы.БанковскийСчетКасса) + Строка(СтрокаТаблицы.Валюта);
		ОстатокПоСчету = СоответствиеОстатокПоСчету[КлючСоответствия];
		ОстатокПоСчету = ?(ОстатокПоСчету = Неопределено, 0, ОстатокПоСчету);
		СоответствиеОстатокПоСчету.Вставить(КлючСоответствия, ОстатокПоСчету + СтрокаТаблицы.Сумма);
		СтрокаТаблицы.НачальныйОстатокПоСчету = ОстатокПоСчету;
		СтрокаТаблицы.КонечныйОстатокПоСчету = ОстатокПоСчету + СтрокаТаблицы.Сумма;
		
		// Рассчитаем текущий остаток по валюте.
		КлючСоответствия = Строка(СтрокаТаблицы.Валюта);
		ОстатокПоВалюте = СоответствиеОстатокПоВалюте[КлючСоответствия];
		ОстатокПоВалюте = ?(ОстатокПоВалюте = Неопределено, 0, ОстатокПоВалюте);
		СоответствиеОстатокПоВалюте.Вставить(КлючСоответствия, ОстатокПоВалюте + СтрокаТаблицы.Сумма);
		СтрокаТаблицы.НачальныйОстатокПоВалюте = ОстатокПоВалюте;
		СтрокаТаблицы.КонечныйОстатокПоВалюте = ОстатокПоВалюте + СтрокаТаблицы.Сумма;
		
		// Рассчитаем текущий остаток по типу денежных средств.
		КлючСоответствия = Строка(СтрокаТаблицы.ТипДенежныхСредств) + Строка(СтрокаТаблицы.Валюта);
		ОстатокПоТипуДенежныхСредств = СоответствиеОстатокПоТипуДенежныхСредств[КлючСоответствия];
		ОстатокПоТипуДенежныхСредств = ?(ОстатокПоТипуДенежныхСредств = Неопределено, 0, ОстатокПоТипуДенежныхСредств);
		СоответствиеОстатокПоТипуДенежныхСредств.Вставить(КлючСоответствия, ОстатокПоТипуДенежныхСредств + СтрокаТаблицы.Сумма);
		СтрокаТаблицы.НачальныйОстатокПоТипуДенежныхСредств = ОстатокПоТипуДенежныхСредств;
		СтрокаТаблицы.КонечныйОстатокПоТипуДенежныхСредств = ОстатокПоТипуДенежныхСредств + СтрокаТаблицы.Сумма;
		
	КонецЦикла;
	
	Возврат ТаблицаПлатежей;
	
КонецФункции // ПолучитьТаблицуПланируемыхПлатежей()

Функция ПодготовитьПараметрыОтчета(НастройкиОтчета)
	
	НачалоПериода = ПериодПросроченныхПлатежей.ДатаНачала;
	КонецПериода = ПериодБудущихПлатежей.ДатаОкончания;
	ВыводитьЗаголовок = Ложь;
	Заголовок = "Платежный календарь";
	
	ПараметрВыводитьЗаголовок = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВыводитьЗаголовок"));
	Если ПараметрВыводитьЗаголовок <> Неопределено
		И ПараметрВыводитьЗаголовок.Использование Тогда
		
		ВыводитьЗаголовок = ПараметрВыводитьЗаголовок.Значение;
	КонецЕсли;
	
	ПараметрВывода = НастройкиОтчета.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
	Если ПараметрВывода <> Неопределено
		И ПараметрВывода.Использование Тогда
		Заголовок = ПараметрВывода.Значение;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода"            , НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода"             , КонецПериода);
	ПараметрыОтчета.Вставить("ВыводитьЗаголовок"        , ВыводитьЗаголовок);
	ПараметрыОтчета.Вставить("Заголовок"                , Заголовок);
	ПараметрыОтчета.Вставить("ИдентификаторОтчета"      , "ПлатежныйКалендарь");
	ПараметрыОтчета.Вставить("НастройкиОтчета", НастройкиОтчета);
		
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти 

#Область Инициализация

ЭтоОтчетУНФ = Истина;

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли