// Общий модуль (выполняется на стороне сервера) продукта "Конструктор процессов для 1С:УНФ"
// Разработчик Компания "Аналитика. Проекты и решения" +7 495 005-1653, https://kp-unf.ru

#Область СлужебныеПроцедурыИФункции

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "КП_Процессы";
	Описание.Версия = "2.7.0.34"; //26.12.2020 1.6.23.117

КонецПроцедуры

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре.
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.1";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ВыполнитьПервоначальноеЗаполнение";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.2";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.3";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.8";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.9";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.23";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ДобавитьОбновитьПрофильДоступаКПроцессам";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.26";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ПереходНа_1_1_0_26";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.27";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ПереходНа_1_1_0_27";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.0.29";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ПереходНа_1_1_0_29";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.0.1";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ПереходНа_2_5_0_1";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.0.2";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.0.7";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.0.13";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ПереходНа_2_5_0_13";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.0.15";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ПереходНа_2_5_0_15";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.0.17";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ПереходНа_2_5_0_17";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.0.30";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.0.32";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.0.45";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ПереходНа_2_5_0_45";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.6.0.7";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.6.0.12";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.7.0.4";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ПереходНа_2_7_0_4";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.7.0.5";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.ПереходНа_2_7_0_5";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.7.0.7";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.7.0.18";
	Обработчик.РежимВыполнения = "Оперативно";	
	Обработчик.Процедура = "КП_ОбновлениеПодсистемы.СтандартныйОбработчик";	
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	ВерсияКонфигурации = ОбновлениеИнформационнойБазы.ВерсияИБ(Метаданные.Имя);
	Если ВерсияКонфигурации = "0.0.0.0" Тогда		
		ИмяПодсистемы= "КП_Процессы";
		ВерсияПодсистемы= ОбновлениеИнформационнойБазы.ВерсияИБ(ИмяПодсистемы);
		
		Если ВерсияПодсистемы = "0.0.0.0" Тогда
			//поставим самую первую версию подсистемы для последующей выборки
			ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(ИмяПодсистемы, "1.1.0.0", Ложь);
			
		КонецЕсли;
		
	КонецЕсли;	
			
КонецПроцедуры

Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт

КонецПроцедуры

Процедура ПриПодготовкеМакетаОписанияОбновлений(ТабДокумент) Экспорт
	
	Попытка
		СписокОбновленныхВерсий=ПараметрыСеанса.КП_ДополнительныеПараметры.Получить();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ТипЗнч(СписокОбновленныхВерсий)<>Тип("СписокЗначений") Тогда
		Возврат;	
	КонецЕсли;
	
	Макет=ПолучитьОбщийМакет("КП_ОписаниеИзменений");
	
	Для Каждого ЭлементСписка Из СписокОбновленныхВерсий Цикл
		Отступ=Макет.ПолучитьОбласть("Отступ");
		ТабДокумент.Вывести(Отступ);
		
		ИмяВерсии=ЭлементСписка.Значение;
		ИмяВерсииМакета=СтрЗаменить(ИмяВерсии, ".", "_");
		
		Попытка
			Область=Макет.ПолучитьОбласть("Шапка"+ИмяВерсииМакета);
			ТабДокумент.Вывести(Область);
			Область=Макет.ПолучитьОбласть("Версия"+ИмяВерсииМакета);
			ТабДокумент.Вывести(Область);
		Исключение
			//области нет, информацию не выводим
		КонецПопытки;
				
	КонецЦикла; 
	
КонецПроцедуры

Функция ПроверкаИОбновление() Экспорт
	
	ПараметрыСеанса.КП_ДополнительныеПараметры=Новый ХранилищеЗначения(Новый СписокЗначений);
	
	Если НЕ КП_ОбщееСерверПС.ЭтоРольПолныеПрава() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Версия<>ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя, Истина) Тогда
		//выполняется процедура обновления всей конфигурации, а не только модуля
		//Возврат Ложь;
	КонецЕсли;
	
	ОписаниеПодсистемы=Новый Структура("Имя, Версия");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);

	//ТекущаяВерсияМодуля=ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(ОписаниеПодсистемы.Имя);
	ТекущаяВерсияМодуля=ОписаниеПодсистемы.Версия;
	
	Если ТекущаяВерсияМодуля="0.0.0.0" Тогда
		ВерсияИБ=ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(Метаданные.Имя, Истина);
		Если ВерсияИБ="0.0.0.0" Тогда
			//это первый запуск пустой базы, обновление будет выполнено в стандартном режиме
			//вместе с обновлением основных подсистем
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	ВерсияПодсистемыВИБ=ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(ОписаниеПодсистемы.Имя);
	Если ТекущаяВерсияМодуля<>"0.0.0.0" И ТекущаяВерсияМодуля=ВерсияПодсистемыВИБ Тогда
		//обновление не требуется
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеПодсистемы.Вставить("ОсновнойСерверныйМодуль", "КП_ОбновлениеПодсистемы");
	
	Модуль = ОбщегоНазначения.ОбщийМодуль(ОписаниеПодсистемы.ОсновнойСерверныйМодуль);

	ИтерацияОбновления = ОбновлениеИнформационнойБазыСлужебный.ИтерацияОбновления(
		ОписаниеПодсистемы.Имя, 
		ОписаниеПодсистемы.Версия, 
		ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления(), 
		Ложь);
		
	ИтерацияОбновления.ИмяОсновногоСерверногоМодуля = ОписаниеПодсистемы.ОсновнойСерверныйМодуль;
	ИтерацияОбновления.ОсновнойСерверныйМодуль = Модуль;
	ИтерацияОбновления.ПредыдущаяВерсия = ВерсияПодсистемыВИБ;
		
	Модуль.ПриДобавленииОбработчиковОбновления(ИтерацияОбновления.Обработчики);
	
	СтруктураХодаВыполнения=Новый Структура("ВыполненоОбработчиков, ВсегоОбработчиков", 0, ИтерацияОбновления.Обработчики.Количество());
	Параметры=Новый Структура("ХодВыполненияОбработчиков, ВФоне", СтруктураХодаВыполнения, Ложь);
	
	ОбработчикиОбновления=ИтерацияОбновления.Обработчики;
	
	ВерсияДоОбновленияИБВес=ОбновлениеИнформационнойБазыСлужебный.ВесВерсии(ВерсияПодсистемыВИБ);
	
	Для Каждого Обработчик Из ОбработчикиОбновления Цикл
		ИмяПроцедуры=Обработчик.Процедура;
		ВесВерсииОбработчика=ОбновлениеИнформационнойБазыСлужебный.ВесВерсии(Обработчик.Версия);
		Если ВесВерсииОбработчика<=ВерсияДоОбновленияИБВес Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			Выполнить(ИмяПроцедуры+"()");
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
		
	НаборЗаписей = РегистрыСведений.ВерсииПодсистем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяПодсистемы.Установить(ОписаниеПодсистемы.Имя);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись=НаборЗаписей.Добавить();
		Запись.Версия=ТекущаяВерсияМодуля;
		Запись.ИмяПодсистемы=ОписаниеПодсистемы.Имя;
		Запись.ВыполненаРегистрацияОтложенныхОбработчиков=Истина;
	КонецЕсли;
	
	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		ЗаписьРегистра.Версия=ТекущаяВерсияМодуля;
		ЗаписьРегистра.ВыполненаРегистрацияОтложенныхОбработчиков = Истина;
	КонецЦикла;
	НаборЗаписей.Записать();	
	
	//сформируем список выполненных обработчиков
	ВерсияПодсистемыВИБ=ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ(ОписаниеПодсистемы.Имя);
	ТекущаяВерсияИБВес=ОбновлениеИнформационнойБазыСлужебный.ВесВерсии(ВерсияПодсистемыВИБ);
	
	СписокВерсий=Новый СписокЗначений;
	Для Каждого Обработчик Из ИтерацияОбновления.Обработчики Цикл
		ВерсияОбработчикаВес=ОбновлениеИнформационнойБазыСлужебный.ВесВерсии(Обработчик.Версия);
		Если ВерсияОбработчикаВес>ВерсияДоОбновленияИБВес И ВерсияОбработчикаВес<=ТекущаяВерсияИБВес Тогда
			//обработчик выполнен
			СписокВерсий.Добавить(Обработчик.Версия);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыСеанса.КП_ДополнительныеПараметры=Новый ХранилищеЗначения(СписокВерсий);
	Возврат (СписокВерсий.Количество()>0);
	
КонецФункции

// Процедура выполняет переход на новую версию
Процедура СтандартныйОбработчик() Экспорт
	
	ЗаписьЖурналаРегистрации(
			"Конструктор процессов",
			УровеньЖурналаРегистрации.Предупреждение,
			"",
			"",
			"Стандартный обработчик обновления выполнен");
	
КонецПроцедуры

// Процедура выполняет перевоначальное заполнение
Процедура ВыполнитьПервоначальноеЗаполнение() Экспорт
	
	ЗаписьЖурналаРегистрации("Конструктор процессов", УровеньЖурналаРегистрации.Предупреждение,,,"Инициализация подсистемы при первом запуске");
	
	//включим подсистему
	Константы.КП_ФункциональнаяОпцияИспользоватьПодсистему.Установить(Истина);
	Константы.КП_ФункциональнаяОпцияИспользоватьРолевуюАдресацию.Установить(Истина);
	
	//установим основной календарь
	ОсновнойКалендарь=ПолучитьОсновнойКалендрьРФ();
	Константы.КП_ОсновнойКалендарь.Установить(ОсновнойКалендарь);
	
	//обновим справочник идентификаторов УНФ
	ЕстьИзменения = Ложь;
	ЕстьУдаленные = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьИзменения=Ложь;
	ЕстьУдаленные=Ложь;
	
	Справочники.ИдентификаторыОбъектовМетаданных.ВыполнитьОбновлениеДанных(ЕстьИзменения, ЕстьУдаленные,  Истина);
			
	//заполним список метаданных подсистемы
	Справочники.КП_СписокМетаданных.ОбновитьСоставМетаданных();
	
	ДобавитьОбновитьПрофильДоступаКПроцессам();
	
	ТребуемыйОсновнойРезультатОбъект=Справочники.КП_ТребуемыеРезультатыИсполнителей.Основной.ПолучитьОбъект();
	Справочники.КП_ТребуемыеРезультатыИсполнителей.ЗаполнитьСписокВидов(ТребуемыйОсновнойРезультатОбъект);	
		
	Справочники.ИдентификаторыОбъектовМетаданных.ОбновитьДанныеСправочника(ЕстьИзменения, ЕстьУдаленные);
	
	Константы.КП_ИспользоватьЦветовоеОформление.Установить(Истина);
	
	Сообщить("Выполнено подключение и начальное заполнение подсистемы ""Процессы"". 
		|Подсистема сейчас доступна пользователям с полными правами. Включить у других пользователей 
		|можно через настройку их прав доступа (пункт ""Права доступа"" в карточке ""Пользователя"". 
		|Полное отключение (а также включение) подсистемы производится 
		|в ""Компания \ Настройки\ Ещё больше возможностей \ Процессы"".");
		
	//Сообщить("Выполнено подключение и начальное заполнение подсистемы ""Процессы"".");
		
КонецПроцедуры

// Процедура выполняет добавление и обновления профиля доступа к процессам
Функция ДобавитьОбновитьПрофильДоступаКПроцессам() Экспорт
	
	ЕстьИзменения=Истина;
	ТолькоПроверка=Ложь;
	
	//ПользователиСлужебный.ОбновитьПараметрыРаботыПользователей(ЕстьИзменения, ТолькоПроверка);

	Справочники.ПрофилиГруппДоступа.ОбновитьОписаниеПоставляемыхПрофилей();
	Справочники.ПрофилиГруппДоступа.ОбновитьПоставляемыеПрофили(ЕстьИзменения);
	
	Возврат Истина;
	
КонецФункции

// Процедура выполняет переход на новую версию
Процедура ПереходНа_1_1_0_26() Экспорт 
	Справочники.КП_СписокМетаданных.ОбновитьСоставМетаданных();	
КонецПроцедуры

// Процедура выполняет переход на новую версию
Процедура ПереходНа_1_1_0_27() Экспорт 

	//дополним новыми видом наименования раздела точки КБП видов процессов
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ВладелецТочки ССЫЛКА Справочник.КП_ВидыПроцессов
	                    |	И КП_ТочкиПроцессов.ТипТочки = &ТипТочки");
	
	Запрос.УстановитьПараметр("ТипТочки", Перечисления.КП_ВидыТочекБизнесПроцесса.Действие);
	
	ТипФормы=0; //форма исполнения
	НаименованиеЭлемента="Раздел ""Реквизиты процесса""";
	СтруктураОтбора=Новый Структура("ЭлементФормы, ТипФормы", НаименованиеЭлемента, ТипФормы);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		
		ТочкаСсылка=Выборка.Ссылка;
		
		НайденныеСтроки=ТочкаСсылка.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТочкаОбъект=ТочкаСсылка.ПолучитьОбъект();

		НоваяСтрока=ТочкаОбъект.НаименованияЭлементовЗадач.Добавить();
		НоваяСтрока.ЭлементФормы=СтруктураОтбора.ЭлементФормы;
		НоваяСтрока.НаименованиеЭлемента="Реквизиты процесса";
		НоваяСтрока.ТипФормы=ТипФормы;
		НоваяСтрока.Видимость=Истина;
		
		Попытка
			ТочкаОбъект.Записать();
		Исключение
			КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	//дополним новыми видом наименования виды процессов
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ВидыПроцессов.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ВидыПроцессов КАК КП_ВидыПроцессов
	                    |ГДЕ
	                    |	КП_ВидыПроцессов.ПометкаУдаления = ЛОЖЬ");
		
	НаименованиеЭлемента="Исполнение: Раздел ""Реквизиты процесса""";
	СтруктураОтбора=Новый Структура("ЭлементФормы", НаименованиеЭлемента);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		
		ВидСсылка=Выборка.Ссылка;
		
		НайденныеСтроки=ВидСсылка.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВидОбъект=ВидСсылка.ПолучитьОбъект();

		НоваяСтрока=ВидОбъект.НаименованияЭлементовЗадач.Добавить();
		НоваяСтрока.ЭлементФормы=СтруктураОтбора.ЭлементФормы;
		НоваяСтрока.НаименованиеЭлемента="Реквизиты процесса";
		НоваяСтрока.Видимость=Истина;
		
		Попытка
			ВидОбъект.Записать();
		Исключение
			КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет переход на новую версию
Процедура ПереходНа_1_1_0_29() Экспорт 
	
	ТаблицаРасписания=Новый ТаблицаЗначений;
	
    КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Время);
    ОписаниеДаты = Новый ОписаниеТипов("Дата", , ,КвалификаторыДаты);   
	
	ТаблицаРасписания.Колонки.Добавить("ДеньНеделиНаименование", Новый ОписаниеТипов("Строка"));
	ТаблицаРасписания.Колонки.Добавить("ДеньНеделиНомер", Новый ОписаниеТипов("Число"));
	ТаблицаРасписания.Колонки.Добавить("ВремяНачалаРаботы", ОписаниеДаты);
	ТаблицаРасписания.Колонки.Добавить("ВремяОкончанияРаботы", ОписаниеДаты);
	ТаблицаРасписания.Колонки.Добавить("ВремяНачалаОбеда", ОписаниеДаты);
	ТаблицаРасписания.Колонки.Добавить("ВремяОкончанияОбеда", ОписаниеДаты);
	ТаблицаРасписания.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка"));
	
	Обработки.КП_Администрирование.ЗаполнитьРасписание(ТаблицаРасписания);
	
	ТаблицаДанные=Новый ХранилищеЗначения(ТаблицаРасписания);
	Константы.КП_ХранилищеРасписания.Установить(ТаблицаДанные);

КонецПроцедуры

// Функция возвращает основной производственный календарь России
// Возвращаемое значение: Ссылка на элемент справочника Календари
Функция ПолучитьОсновнойКалендрьРФ()
	ПроизводственныйКалендарь=Справочники.ПроизводственныеКалендари.НайтиПоКоду("РФ");
	Если НЕ ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                     |	Календари.Ссылка КАК Ссылка
	                     |ИЗ
	                     |	Справочник.Календари КАК Календари
	                     |ГДЕ
	                     |	Календари.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	                     |	И Календари.ПометкаУдаления = Ложь");
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет переход на новую версию
Процедура ПереходНа_2_5_0_1() Экспорт 

	ОсновнойКалендарь=ПолучитьОсновнойКалендрьРФ();
	Константы.КП_ОсновнойКалендарь.Установить(ОсновнойКалендарь);
	
	Константы.КП_ТекущиеДелаПоказыватьАвтора.Установить(Истина);
	
КонецПроцедуры

// Процедура выполняет переход на новую версию
Процедура ПереходНа_2_5_0_13() Экспорт 

	УдалитьФоновыеЗаданияРабочихПроцессов();
	
	РегСведений=РегистрыСведений.КП_СвязиОбъектов_Удалить.СоздатьНаборЗаписей();
	РегСведений.Прочитать();
	Попытка
		РегСведений.Очистить();
		РегСведений.Записать(Истина);
	Исключение
		КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки());
	КонецПопытки;
		
КонецПроцедуры

// Процедура выполняет переход на новую версию
Процедура ПереходНа_2_5_0_15() Экспорт 

	СписокШаблоновСообщения=КП_ОбщееСервер.ПолучитьСписокШаблоновПоТипуПараметра();
	
	Если СписокШаблоновСообщения.Количество()>0 Тогда
		Возврат;
	КонецЕсли;
	
	//создадим шаблон для события по задачам
	СпрШаблон=Справочники.ШаблоныСообщений.СоздатьЭлемент();
	СпрШаблон.Назначение="Задача";
	СпрШаблон.ПолноеИмяТипаПараметраВводаНаОсновании="Задача.КП_Задача";
	СпрШаблон.Наименование="Сообщение о задаче";
	СпрШаблон.ТемаПисьма="Новая задача [КП_Задача.Наименование]";
	СпрШаблон.ТипТекстаПисьма=Перечисления.СпособыРедактированияЭлектронныхПисем.HTML;
	СпрШаблон.ПредназначенДляВводаНаОсновании=Истина;
	СпрШаблон.ПредназначенДляЭлектронныхПисем=Истина;
	
	СпрШаблон.ТекстШаблонаПисьма="Новая задача ""[КП_Задача.Наименование]"" по процессу [КП_Задача.БизнесПроцесс]
		|Выполнить к дате: [КП_Задача.ДатаВыполненияПлан]
		|";
	
	СпрШаблон.ТекстШаблонаПисьмаHTML="<html>
		|<head>
		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"" />
		|<meta http-equiv=""X-UA-Compatible"" content=""IE=Edge"" />
		|<meta name=""format-detection"" content=""telephone=no"" />
		|<style type=""text/css"">
		|body{margin:0;padding:8px;}
		|p{line-height:1.15;margin:0;white-space:pre-wrap;}
		|ol,ul{margin-top:0;margin-bottom:0;}
		|img{border:none;}
		|li>p{display:inline;}
		|</style>
		|</head>
		|<body>
		|<p><span>Новая задача &quot;[КП_Задача.Наименование]&quot; по процессу [КП_Задача.БизнесПроцесс]</span></p>
		|<p>Выполнить к дате: [КП_Задача.ДатаВыполненияПлан]</p>
		|<p><br></p>
		|</body>
		|</html>";
	
	Попытка
		СпрШаблон.Записать();
	Исключение
		КП_ОбщееСервер.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
		
КонецПроцедуры

// Процедура выполняет переход на новую версию
Процедура ПереходНа_2_5_0_17() Экспорт 

	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_АвтозапускПроцессов.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Справочник.КП_АвтозапускПроцессов КАК КП_АвтозапускПроцессов
	                    |ГДЕ
	                    |	КП_АвтозапускПроцессов.ПометкаУдаления = Ложь
	                    |	И КП_АвтозапускПроцессов.Включено = Ложь");
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		СпрОбъект=Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.Включено=Истина;
		Попытка
			СпрОбъект.Записать();
		Исключение
			КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет переход на новую версию
Процедура ПереходНа_2_5_0_45() Экспорт 

	//раньше проверка перед автозапускам была простая - анализировалось есть ли
	//экземпляр процесса к которому прилагается объект-источник автозапуска
	//теперь данные хранятся в отдельном регистре сведений
	
	//сделаем выборку по видам метаданных автозапуска
	//затем найдем процессы, в которых есть ссылка на элемент вида метаданных автозапуска
	//и добавим такой процесс в регистр сведений, запретив повторное создание процесса по этому объекту
	
	//получим список элементов автозапуска для дальнейшего анализа
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	КП_АвтозапускПроцессов.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Справочник.КП_АвтозапускПроцессов КАК КП_АвтозапускПроцессов
	                    |ГДЕ
	                    |	КП_АвтозапускПроцессов.ПометкаУдаления = ЛОЖЬ");
	
	СписокАвтозапуска=Новый СписокЗначений;
	Выборка=запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокАвтозапуска.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Для Каждого ЭлементСписка Из СписокАвтозапуска Цикл
		
		АвтозапускСсылка=ЭлементСписка.Значение;
		ВидПроцессаАвтозапуска=АвтозапускСсылка.ВидПроцесса;
		
		//получим список прилагаемых к бизнес-процессам объектов (по виду процесса автозапуска)
		
		Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_СсылкиПроцессов.БизнесПроцесс КАК БизнесПроцесс,
	                    |	КП_СсылкиПроцессов.Объект КАК СсылкаПроцесса,
	                    |	КП_СсылкиПроцессов.БизнесПроцесс.ВидПроцесса КАК ВидПроцесса
	                    |ИЗ
	                    |	РегистрСведений.КП_СсылкиПроцессов КАК КП_СсылкиПроцессов
	                    |ГДЕ
	                    |	КП_СсылкиПроцессов.БизнесПроцесс.ВидПроцесса=&ВидПроцессаАвтозапуска
	                    |	И КП_СсылкиПроцессов.БизнесПроцесс.ПометкаУдаления = ЛОЖЬ
	                    |
	                    |");
	
		Запрос.УстановитьПараметр("ВидПроцессаАвтозапуска", ВидПроцессаАвтозапуска);
	
		Выборка=Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			//проверим каждый прилагаемый объект, на то, что его вид метаданных есть в элементе автозапуска	
			СсылкаПроцесса=Выборка.СсылкаПроцесса;
			ПолноеИмяВидаМетаданных=СсылкаПроцесса.Метаданные().ПолноеИмя();
			Если АвтозапускСсылка.ВидМетаданных.ПолноеНаименование<>ПолноеИмяВидаМетаданных Тогда 
				//автозапуск не использовался
				Продолжить;
			КонецЕсли;
			
			КП_Автозапуск.ЗаписатьАвтозапуск(АвтозапускСсылка, Выборка.БизнесПроцесс, СсылкаПроцесса);
			
		КонецЦикла;
		
	КонецЦикла; //элементы автозапуска
		
КонецПроцедуры

// Процедура выполняет переход на новую версию
Процедура ПереходНа_2_7_0_4() Экспорт 

	Константы.КП_ПоказыватьЗадачиВКалендаре.Установить(Истина);
		
КонецПроцедуры

// Процедура выполняет переход на новую версию
Процедура ПереходНа_2_7_0_5() Экспорт 

	Константы.КП_ИспользоватьЦветовоеОформление.Установить(Истина);
	Справочники.КП_ЦветаЭлементов.ЗаполнитьОсновныеЦвета();
		
КонецПроцедуры

// Процедура выполняет удаление фоновых заданий рабочих процессов
Процедура УдалитьФоновыеЗаданияРабочихПроцессов()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОбработкаПравилРабочихПроцессов);
	Если Не ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", Метаданные.РегламентныеЗадания.ОбработкаПравилРабочихПроцессов.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ПараметрыЗадания));
		
	Для Каждого Задание Из МассивЗаданий Цикл
		Задание.Параметры=Неопределено;
		Попытка
			Задание.Удалить();
		Исключение
			КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки(),"Обновление Конструктор процессов");
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры
	
#КонецОбласти
