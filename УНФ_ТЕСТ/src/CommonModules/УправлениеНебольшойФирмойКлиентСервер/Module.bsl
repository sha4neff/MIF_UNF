
// Процедура выполняет проверку корректности введенных ИНН и КПП
// Принимает на вход структуру
// Параметры передачи - структура
// Обязательные ключи структуры
//	СтранаРегистрации
//	ИНН
//	КПП
//	ЭтоЮрЛицо
//	ОшибокПоИННнет
//	ОшибокПоКППнет
// Дополнительные ключи структуры
//	ЦветВыделенияНекорректногоЗначения
//
// Возвращает структуру с переменным набором ключей 
// только со значениями соответствующими результату проверки.
Функция ПроверитьКорректностьИННКПП(Знач СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров.Свойство("ЦветВыделенияНекорректногоЗначения") Тогда
		ЦветВыделенияНекорректногоЗначения = СтруктураПараметров.ЦветВыделенияНекорректногоЗначения;
	Иначе
		ЦветВыделенияНекорректногоЗначения = Новый Цвет(225, 40, 40);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	
	Если СтруктураПараметров.ПроверитьИНН Тогда
		
		СтруктураВозврата.Вставить("ИННВведенКорректно",               Истина);
		СтруктураВозврата.Вставить("РасширенноеПредставлениеИНН",      СтруктураПараметров.ИНН);
		СтруктураВозврата.Вставить("НадписьПоясненияНекорректногоИНН", "");
		СтруктураВозврата.Вставить("ПустойИНН",                        Ложь);
		СтруктураВозврата.Вставить("ОшибокПоИННнет",                   СтруктураПараметров.ПроверитьИНН);
		
		ИНН      = СокрП(СтруктураПараметров.ИНН);
		ДлинаИНН = СтрДлина(ИНН);
		
		Если НЕ ЗначениеЗаполнено(ИНН) Тогда
			
			СтруктураВозврата.ИННВведенКорректно = Ложь;
			
			СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Неопределено;
			
			СтруктураВозврата.ПустойИНН = Истина;
			
			СтруктураВозврата.ОшибокПоИННнет = Ложь;
			
		КонецЕсли;
		
		Если СтруктураВозврата.ОшибокПоИННнет Тогда
			
			ЭтоЮрЛицо = Неопределено;
			СтруктураПараметров.Свойство("ЭтоЮрЛицо", ЭтоЮрЛицо);
			
			Если ЭтоЮрЛицо = Неопределено Тогда
				
				СтруктураВозврата.ИННВведенКорректно = Ложь;
				СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(НСтр("ru = 'Неизвестен вид контрагента. Укажите вид контрагента'"),,ЦветВыделенияНекорректногоЗначения);
				
				СтруктураВозврата.ОшибокПоИННнет = Ложь;
				
			КонецЕсли;
			
			Если СтруктураВозврата.ОшибокПоИННнет Тогда
				
				Если  ЭтоЮрЛицо И ДлинаИНН <> 10 Тогда
					
					СтруктураВозврата.ИННВведенКорректно = Ложь;
					
					СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(НСтр("ru = 'ИНН юридического лица должен состоять из 10 цифр'"),,ЦветВыделенияНекорректногоЗначения);
					
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|ИНН содержит не 10 цифр'");
					
					СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
					
					СтруктураВозврата.ОшибокПоИННнет = Ложь;
					
				ИначеЕсли НЕ ЭтоЮрЛицо  И ДлинаИНН <> 12 Тогда
					
					СтруктураВозврата.ИННВведенКорректно = Ложь;
					
					СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(НСтр("ru = 'ИНН физического лица должен состоять из 12 цифр'"),,ЦветВыделенияНекорректногоЗначения);
					
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|ИНН содержит не 12 цифр'");
					
					СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
					
					СтруктураВозврата.ОшибокПоИННнет = Ложь;
					
				ИначеЕсли Лев(ИНН, 2) = "00" Тогда
					
					СтруктураВозврата.ИННВведенКорректно = Ложь;
					
					СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(НСтр("ru = 'Первые две цифры ИНН не могут быть ""00""'"),,ЦветВыделенияНекорректногоЗначения);
					
					ТекстДляНекорректногоИНН = НСтр("ru = '%1
					|Первые две цифры ИНН не могут быть ""00""'");
					
					СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
					
					СтруктураВозврата.ОшибокПоИННнет = Ложь;
					
				КонецЕсли;
				
				Если СтруктураВозврата.ОшибокПоИННнет Тогда
					
					Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИНН) Тогда
						
						СтруктураВозврата.ИННВведенКорректно = Ложь;
						
						СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(НСтр("ru = 'ИНН должен включать только цифры'"),,ЦветВыделенияНекорректногоЗначения);
						
						ТекстДляНекорректногоИНН = НСтр("ru = '%1
						|ИНН содержит не только цифры'");
						
						СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
						
						СтруктураВозврата.ОшибокПоИННнет = Ложь;
						
					КонецЕсли;
					
					Если СтруктураВозврата.ОшибокПоИННнет Тогда
						
						Если ЭтоЮрЛицо Тогда
							
							КонтрольнаяСумма = 0;
							
							Для Н = 1 По 9 Цикл
								
								Если Н = 1 Тогда
									Множитель = 2;
								ИначеЕсли Н = 2 Тогда
									Множитель = 4;
								ИначеЕсли Н = 3 Тогда
									Множитель = 10;
								ИначеЕсли Н = 4 Тогда
									Множитель = 3;
								ИначеЕсли Н = 5 Тогда
									Множитель = 5;
								ИначеЕсли Н = 6 Тогда
									Множитель = 9;
								ИначеЕсли Н = 7 Тогда
									Множитель = 4;
								ИначеЕсли Н = 8 Тогда
									Множитель = 6;
								ИначеЕсли Н = 9 Тогда
									Множитель = 8;
								КонецЕсли;
								
								Цифра = Число(Сред(ИНН, Н, 1));
								КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
								
							КонецЦикла;
							
							КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
							
							Если КонтрольныйРазряд <> Число(Сред(ИНН, 10, 1)) ИЛИ КонтрольнаяСумма = 0 Тогда
								
								СтруктураВозврата.ИННВведенКорректно = Ложь;
								
								СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(НСтр("ru = 'ИНН юридического лица введен некорректно'"),,ЦветВыделенияНекорректногоЗначения);
								
								ТекстДляНекорректногоИНН = НСтр("ru = '%1
								|ИНН не соответствует формату'");
								
								СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
								
								СтруктураВозврата.ОшибокПоИННнет = Ложь;
								
							КонецЕсли;
							
						Иначе
							
							КонтрольнаяСумма11 = 0;
							КонтрольнаяСумма12 = 0;
							
							Для Н=1 По 11 Цикл
								
								// Расчет множителя для 11-го и 12-го разрядов
								Если Н = 1 Тогда
									Множитель11 = 7;
									Множитель12 = 3;
								ИначеЕсли Н = 2 Тогда
									Множитель11 = 2;
									Множитель12 = 7;
								ИначеЕсли Н = 3 Тогда
									Множитель11 = 4;
									Множитель12 = 2;
								ИначеЕсли Н = 4 Тогда
									Множитель11 = 10;
									Множитель12 = 4;
								ИначеЕсли Н = 5 Тогда
									Множитель11 = 3;
									Множитель12 = 10;
								ИначеЕсли Н = 6 Тогда
									Множитель11 = 5;
									Множитель12 = 3;
								ИначеЕсли Н = 7 Тогда
									Множитель11 = 9;
									Множитель12 = 5;
								ИначеЕсли Н = 8 Тогда
									Множитель11 = 4;
									Множитель12 = 9;
								ИначеЕсли Н = 9 Тогда
									Множитель11 = 6;
									Множитель12 = 4;
								ИначеЕсли Н = 10 Тогда
									Множитель11 = 8;
									Множитель12 = 6;
								ИначеЕсли Н = 11 Тогда
									Множитель11 = 0;
									Множитель12 = 8;
								КонецЕсли;
								
								Цифра = Число(Сред(ИНН, Н, 1));
								КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
								КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
								
							КонецЦикла;
							
							КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
							КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
							
							Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1)) ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) ИЛИ (КонтрольнаяСумма11 = 0 И КонтрольнаяСумма12 = 0) Тогда
								
								СтруктураВозврата.ИННВведенКорректно = Ложь;
								
								СтруктураВозврата.НадписьПоясненияНекорректногоИНН = Новый ФорматированнаяСтрока(НСтр("ru = 'ИНН физического лица введен некорректно'"),,ЦветВыделенияНекорректногоЗначения);
								
								ТекстДляНекорректногоИНН = НСтр("ru = '%1
								|ИНН не соответствует формату'");
								
								СтруктураВозврата.РасширенноеПредставлениеИНН = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоИНН, ИНН);
								
								СтруктураВозврата.ОшибокПоИННнет = Ложь;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПараметров.ПроверитьКПП Тогда
		
		СтруктураВозврата.Вставить("КППВВеденКорректно",               Истина);
		СтруктураВозврата.Вставить("РасширенноеПредставлениеКПП",      СтруктураПараметров.КПП);
		СтруктураВозврата.Вставить("НадписьПоясненияНекорректногоКПП", "");
		СтруктураВозврата.Вставить("ПустойКПП",                        Ложь);
		СтруктураВозврата.Вставить("ОшибокПоКППнет",                   СтруктураПараметров.ПроверитьКПП);
		
		Если СтруктураПараметров.СтранаРегистрации = ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
			
			ЭтоЮрЛицо = Неопределено;
			СтруктураПараметров.Свойство("ЭтоЮрЛицо", ЭтоЮрЛицо);
			
			Если ЭтоЮрЛицо = Неопределено Тогда
				
				СтруктураВозврата.КППВведенКорректно = Ложь;
				
				СтруктураВозврата.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(НСтр("ru = 'Неизвестен вид контрагента. Укажите вид контрагента'"),,ЦветВыделенияНекорректногоЗначения);
				
				СтруктураВозврата.ОшибокПоКППнет = Ложь;
				
			ИначеЕсли НЕ ЭтоЮрЛицо Тогда
				СтруктураВозврата.ОшибокПоКППнет = Ложь;
			КонецЕсли;
			
			Если СтруктураВозврата.ОшибокПоКППнет Тогда
				
				КПП = СокрП(СтруктураПараметров.КПП);
				ДлинаКПП = СтрДлина(КПП);
				
				Если НЕ ЗначениеЗаполнено(КПП) Тогда
					
					СтруктураВозврата.КППВВеденКорректно = Ложь;
					
					СтруктураВозврата.НадписьПоясненияНекорректногоКПП = Неопределено;
					
					СтруктураВозврата.ПустойКПП = Истина;
					
					СтруктураВозврата.ОшибокПоКППнет = Ложь;
					
				КонецЕсли;
				
				Если СтруктураВозврата.ОшибокПоКППнет Тогда
					
					Если ДлинаКПП <> 9 Тогда
						
						СтруктураВозврата.КППВВеденКорректно = Ложь;
						
						СтруктураВозврата.НадписьПоясненияНекорректногоКПП  = Новый ФорматированнаяСтрока(НСтр("ru = 'КПП должен содержать 9 цифр'"),,ЦветВыделенияНекорректногоЗначения);
						
						ТекстДляНекорректногоКПП = НСтр("ru = '%1
						|КПП содержит не 9 цифр'");
						
						СтруктураВозврата.РасширенноеПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоКПП, КПП);
						
						СтруктураВозврата.ОшибокПоКППнет = Ложь;
						
					КонецЕсли;
					
					Если СтруктураВозврата.ОшибокПоКППнет Тогда
						
						Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КПП) Тогда
							
							СтруктураВозврата.КППВВеденКорректно = Ложь;
							
							СтруктураВозврата.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(НСтр("ru = 'КПП должен включать только цифры'"),,ЦветВыделенияНекорректногоЗначения);
							
							ТекстДляНекорректногоКПП = НСтр("ru = '%1
							|КПП содержит не только цифры'");
							
							СтруктураВозврата.РасширенноеПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоКПП, КПП);
							
							СтруктураВозврата.ОшибокПоКППнет = Ложь;
							
						КонецЕсли;
						
						Если СтруктураВозврата.ОшибокПоКППнет Тогда
							
							КонтрольнаяЧасть = Сред(КПП, 5, 2);
							
							ПризнакОбособленногоПодразделения = КонтрольнаяЧасть = "02"//Постановка на учёт налогоплательщика — российской организации по месту нахождения ее обособленного подразделения в зависимости от вида подразделения 
							ИЛИ КонтрольнаяЧасть = "03" //Постановка на учёт налогоплательщика — российской организации по месту нахождения ее филиала, не исполняющего обязанности организации по уплате налогов и сборов 
							ИЛИ КонтрольнаяЧасть = "04" //Постановка на учёт налогоплательщика — российской организации по месту нахождения ее обособленного подразделения в зависимости от вида подразделения 
							ИЛИ КонтрольнаяЧасть = "05" //Постановка на учёт налогоплательщика — российской организации по месту нахождения ее обособленного подразделения в зависимости от вида подразделения
							ИЛИ КонтрольнаяЧасть = "30" //Российская организация — налоговый агент, не учтенная в качестве налогоплательщика
							ИЛИ КонтрольнаяЧасть = "31" //Постановка на учёт налогоплательщика — российской организации по месту нахождения обособленного подразделения, в отношении которого не проведена процедура оформления в соответствии с пунктом 3 статьи 55 Гражданского кодекса Российской Федерации, исполняющего обязанности организации по уплате налогов и сборов 
							ИЛИ КонтрольнаяЧасть = "32" //Постановка на учёт налогоплательщика — российской организации по месту нахождения обособленного подразделения, в отношении которого не проведена процедура оформления в соответствии с пунктом 3 статьи 55 Гражданского кодекса Российской Федерации, не исполняющего обязанности организации по уплате налогов и сборов 
							ИЛИ КонтрольнаяЧасть = "43" //Постановка на учёт российской организации по месту нахождения ее филиала (аналогично старым кодам «02», «03» — Письмо Минфина РФ от 02.06.2008 № ЧД-6-6/396@ «О применении кодов справочника СППУНО») 
							ИЛИ КонтрольнаяЧасть = "44" //Постановка на учёт российской организации по месту нахождения ее представительства (аналогично старым кодам «04», «05» — Письмо Минфина РФ от 02.06.2008 № ЧД-6-6/396@ «О применении кодов справочника СППУНО») 
							ИЛИ КонтрольнаяЧасть = "45";//Постановка на учёт российской организации по месту нахождения ее обособленного подразделения (аналогично старым кодам «31», «32» — Письмо Минфина РФ от 02.06.2008 № ЧД-6-6/396@ «О применении кодов справочника СППУНО»)
							
							ПризнакГоловногоПодразделения = КонтрольнаяЧасть = "01" 
							ИЛИ КонтрольнаяЧасть = "50" //По месту постановки на учёт в качестве крупнейшего налогоплательщика
							ИЛИ КонтрольнаяЧасть = "51" //Постановка на учёт отделений иностранных организаций 
							ИЛИ КонтрольнаяЧасть = "52" //Постановка на учёт отделений иностранных организаций в Российской Федерации, созданных филиалом этой иностранной организации в иностранном государстве 
							ИЛИ КонтрольнаяЧасть = "60" //Постановка на учёт посольств иностранных государств
							ИЛИ КонтрольнаяЧасть = "61" //Постановка на учёт консульств иностранных государств
							ИЛИ КонтрольнаяЧасть = "62" //Постановка на учёт представительств, приравненных к дипломатическим
							ИЛИ КонтрольнаяЧасть = "63" //Постановка на учёт международных организаций
							ИЛИ КонтрольнаяЧасть = "70" //Постановка на учёт иностранных и международных организаций, имеющих недвижимое имущество в Российской Федерации, за исключением транспортных средств, относящихся к недвижимому имуществу
							ИЛИ КонтрольнаяЧасть = "71" //Постановка на учёт иностранных и международных организаций, имеющих транспортные средства в Российской Федерации, не относящиеся к недвижимому имуществу
							ИЛИ КонтрольнаяЧасть = "72" //Постановка на учёт иностранных и международных организаций, имеющих морские транспортные средства в Российской Федерации
							ИЛИ КонтрольнаяЧасть = "73" //Постановка на учёт иностранных и международных организаций, имеющих речные транспортные средства в Российской Федерации
							ИЛИ КонтрольнаяЧасть = "74" //Постановка на учёт иностранных и международных организаций, имеющих воздушные транспортные средства в Российской Федерации
							ИЛИ КонтрольнаяЧасть = "75" //Постановка на учёт иностранных и международных организаций, имеющих космические объекты в Российской Федерации
							ИЛИ КонтрольнаяЧасть = "80" //Учет иностранных и международных организаций в связи с открытием в банках рублевых счетов типа «Т» (текущие)
							ИЛИ КонтрольнаяЧасть = "81" //Учет иностранных и международных организаций в связи с открытием счетов в банках типа «И» (инвестиционные)
							ИЛИ КонтрольнаяЧасть = "82" //учёт иностранных и международных организаций в связи с открытием счетов в банках типа «С» (специальные)
							ИЛИ КонтрольнаяЧасть = "83" //Учет иностранных и международных организаций в связи с открытием в банках счетов типа «Т» (текущие) в иностранной валюте
							ИЛИ КонтрольнаяЧасть = "84";//Учет иностранных и международных организаций в связи с открытием корреспондентских счетов в банках 
							
							Если НЕ ПризнакГоловногоПодразделения И НЕ ПризнакОбособленногоПодразделения Тогда
								
								СтруктураВозврата.КППВВеденКорректно = Ложь;
								
								СтруктураВозврата.НадписьПоясненияНекорректногоКПП = Новый ФорматированнаяСтрока(НСтр("ru = 'КПП не соответствует формату'"),,ЦветВыделенияНекорректногоЗначения);
								
								ТекстДляНекорректногоКПП = НСтр("ru = '%1
								|КПП не соответствует формату'");
								
								СтруктураВозврата.РасширенноеПредставлениеКПП = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДляНекорректногоКПП, КПП);
								
								СтруктураВозврата.ОшибокПоКППнет = Ложь;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции	

// Заполняет список значеий Приемник из списка значений Источник
//
Процедура ЗаполнитьСписокИзСписка(Источник,Приемник) Экспорт

	Приемник.Очистить();
	Для каждого ЭлСписка Из Источник Цикл
		Приемник.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;

КонецПроцедуры

// Функция получает элементы, присутствующие в каждом массиве
//
// Параметры:
//  Массив1	 - массив	 - первый массив
//  Массив2	 - массив	 - второй массив
// Возвращаемое значение:
//  массив - массив значений, содержащихся в двух массивах
Функция ПолучитьСовпадающиеЭлементыМассивов(Массив1, Массив2) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого Значение Из Массив1 Цикл
		Если Массив2.Найти(Значение) <> Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьКартинкуДляКомментария(ГруппаДополнительно, Комментарий) Экспорт
	
	Если ЗначениеЗаполнено(Комментарий) Тогда
		ГруппаДополнительно.Картинка = БиблиотекаКартинок.НаписатьSMS;
	Иначе
		ГруппаДополнительно.Картинка = Новый Картинка;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает набор пастельных цветов в порядке их взаимной контрастности
// Возвращаемое значение:
//  Массив - массив цветов для использования в сериях на диаграммах
Функция ЦветаСерийДиаграмм() Экспорт
	
	МассивЦветов = Новый Массив;
	
	МассивЦветов.Добавить(Новый Цвет(245, 152, 150));
	МассивЦветов.Добавить(Новый Цвет(142, 201, 249));
	МассивЦветов.Добавить(Новый Цвет(255, 202, 125));
	МассивЦветов.Добавить(Новый Цвет(178, 154, 218));
	МассивЦветов.Добавить(Новый Цвет(163, 214, 166));
	МассивЦветов.Добавить(Новый Цвет(244, 140, 175));
	МассивЦветов.Добавить(Новый Цвет(125, 221, 233));
	МассивЦветов.Добавить(Новый Цвет(255, 242, 128));
	МассивЦветов.Добавить(Новый Цвет(205, 145, 215));
	МассивЦветов.Добавить(Новый Цвет(125, 202, 194));
	
	Возврат МассивЦветов;
	
КонецФункции

// Функция преобразует строку к множественному числу
//
// Параметры: 
//  Слово1 - форма слова в ед числе      ("шкаф")
//  Слово2 - форма слова для числит 2-4  ("шкафа")
//  Слово3 - форма слова для числит 5-10 ("шкафов")
//  ЦелоеЧисло - целое число
//
// Возвращаемое значение:
//  строку - одну из строк в зависимости от параметра ЦелоеЧисло
//
// Описание:
//  Предназначена для формирования "правильной" подписи к числительным
//
Функция ФормаМножественногоЧисла(Слово1, Слово2, Слово3, Знач ЦелоеЧисло) Экспорт
	
	// Изменим знак целого числа, иначе отрицательные числа будут неправильно преобразовываться
	Если ЦелоеЧисло < 0 Тогда
		ЦелоеЧисло = -1 * ЦелоеЧисло;
	КонецЕсли;
	
	Если ЦелоеЧисло <> Цел(ЦелоеЧисло) Тогда 
		// для нецелых чисел - всегда вторая форма
		Возврат Слово2;
	КонецЕсли;
	
	// остаток
	Остаток = ЦелоеЧисло%10;
	Если (ЦелоеЧисло >10) И (ЦелоеЧисло<20) Тогда
		// для второго десятка - всегда третья форма
		Возврат Слово3;
	ИначеЕсли Остаток=1 Тогда
		Возврат Слово1;
	ИначеЕсли (Остаток>1) И (Остаток<5) Тогда
		Возврат Слово2;
	Иначе
		Возврат Слово3;
	КонецЕсли;

КонецФункции

// Рассчитывает ближайшую к указанной дату начала периода
//
// Параметры
// ДатаНачала          - дата, к которой будет рассчитана ближайшая дата начала периода
// Периодичность       - значение перечисления "Периодичность"
//
// Возвращаемое значение:
//   Дата
//   Дата начала ближайшего периода
//
Функция РассчитатьДатуНачалаБлижайшегоПериода(ДатаНачала, Периодичность) Экспорт
	
	ОдинДень = 86400;
	
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		
		БлижайшаяДата = ДатаНачала;
		
	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		Если ДатаНачала = НачалоНедели(ДатаНачала) Тогда
			БлижайшаяДата = ДатаНачала;
		Иначе
			БлижайшаяДата = КонецНедели(ДатаНачала) + ОдинДень;
		КонецЕсли;
		
	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада")) Тогда
		
		ДеньМесяца   = День(ДатаНачала);
		НачалоМесяца = НачалоМесяца(ДатаНачала);
		
		Если ДеньМесяца = 1 Или ДеньМесяца = 11 Или ДеньМесяца = 21 Тогда
			БлижайшаяДата = ДатаНачала;
		ИначеЕсли ДеньМесяца <= 10 Тогда // Первая декада
			БлижайшаяДата = НачалоМесяца + ОдинДень * 10;
		ИначеЕсли ДеньМесяца <= 20 Тогда // Вторая декада
			БлижайшаяДата = НачалоМесяца + ОдинДень * 20;
		Иначе // Третья декада
			БлижайшаяДата = КонецМесяца(НачалоМесяца) + ОдинДень;
		КонецЕсли;
		
	ИначеЕсли (Периодичность= ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")) Тогда
		
		Если ДатаНачала = НачалоМесяца(ДатаНачала) Тогда
			БлижайшаяДата = ДатаНачала;
		Иначе
			БлижайшаяДата = КонецМесяца(ДатаНачала) + ОдинДень;
		КонецЕсли;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")) Тогда
		
		Если ДатаНачала = НачалоКвартала(ДатаНачала) Тогда
			БлижайшаяДата = ДатаНачала;
		Иначе
			БлижайшаяДата = КонецКвартала(ДатаНачала) + ОдинДень;
		КонецЕсли;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие")) Тогда
		
		НачалоГода      = НачалоГода(ДатаНачала);
		НачалоПолугодия = ДобавитьМесяц(НачалоГода,6);
		
		Если ДатаНачала = НачалоПолугодия Или ДатаНачала = НачалоГода Тогда
			БлижайшаяДата = ДатаНачала;
		Иначе
			БлижайшаяДата = ?(ДатаНачала > НачалоПолугодия, КонецГода(ДатаНачала) + ОдинДень, НачалоПолугодия);
		КонецЕсли;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год")) Тогда
		
		Если ДатаНачала = НачалоГода(ДатаНачала) Тогда
			БлижайшаяДата = ДатаНачала;
		Иначе
			БлижайшаяДата = КонецГода(ДатаНачала) + ОдинДень;
		КонецЕсли;

	КонецЕсли;
	
	Возврат БлижайшаяДата;
	
КонецФункции // РассчитатьДатуНачалаБлижайшегоПериода()

// Рассчитывает дату окончания периода
//
// Параметры:
//   ДатаНачала          - дата начала, от которой будет рассчитана дата окончания периода
//   Периодичность      - значение перечисления "Периодичность"
//   КоличествоПериодов - количество повторов периода
//
// Возвращаемое значение:
//   Дата
//   Дата окончания периода
//
Функция РассчитатьДатуОкончанияПериода(ДатаНачала, Периодичность, КоличествоПериодов) Экспорт

	ОдинДень = 86400;

	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда 
		
		ДатаОкончания = ДатаНачала + ОдинДень * КоличествоПериодов;

	ИначеЕсли Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
		
		ДатаОкончания = ДатаНачала + ОдинДень * 7 * КоличествоПериодов;

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Декада")) Тогда
		
		ДеньМесяца = День(ДатаНачала);
		НачМесяца = НачалоМесяца(ДатаНачала);
		Если ДеньМесяца <= 10 Тогда
			НомерДекады = 1;
		ИначеЕсли ДеньМесяца <= 20 Тогда
			НомерДекады = 2;
		Иначе
			НомерДекады = 3;
		КонецЕсли;
			
		НомерДекады = НомерДекады + КоличествоПериодов;
		
		Если НомерДекады > 0 Тогда
			Месяцев = Цел((НомерДекады-1)/3);
		Иначе
			Месяцев = -1 - Цел((-НомерДекады)/3);
		КонецЕсли;
			
		НомерДекады = НомерДекады - 3*Месяцев;
		Дт = ДобавитьМесяц(НачМесяца, Месяцев) + (НомерДекады-1) * 10 * ОдинДень;

		Если КоличествоПериодов > 0 Тогда
			ДатаОкончания = Дт;
		
		Иначе 
			ДеньМесяца = День(Дт);

			Если ДеньМесяца <= 10 Тогда
				ДатаОкончания = КонецДня(НачалоМесяца(Дт) + ОдинДень * 9);
			ИначеЕсли ДеньМесяца <= 20 Тогда
				ДатаОкончания = КонецДня(НачалоМесяца(Дт) + ОдинДень * 19);
			Иначе
				ДатаОкончания = КонецМесяца(Дт);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли (Периодичность= ПредопределенноеЗначение("Перечисление.Периодичность.Месяц")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, КоличествоПериодов);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Квартал")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, 3 * КоличествоПериодов);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Полугодие")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, 6 * КоличествоПериодов);

	ИначеЕсли (Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Год")) Тогда
		
		ДатаОкончания = ДобавитьМесяц(ДатаНачала, 12 * КоличествоПериодов);

	КонецЕсли;
			
	Возврат КонецДня(ДатаОкончания-ОдинДень);

КонецФункции // РассчитатьДатуОкончанияПериода()

// Округляет число по заданному порядку.
//
// Параметры:
//  Число        - Число, которое необходимо округлить
//  ПорядокОкругления - Перечисления.ПорядкиОкругления - порядок округления
//  ОкруглятьВБольшуюСторону - Булево - округления в большую сторону.
//
// Возвращаемое значение:
//  Число        - результат округления.
//
Функция ОкруглитьЦену(Число, ПравилоОкругления, ОкруглятьВБольшуюСторону) Экспорт
	// Идентично УправлениеНебольшойФирмойСервер.ОкруглитьЦену(). Нужно для использования на клиенте без серверного вызова.
	
	Перем Результат; // Возвращаемый результат.
	
	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПравилоОкругления) Тогда
		ПорядокОкругления = ПредопределенноеЗначение("Перечисление.ПорядкиОкругления.Окр0_01");
	Иначе
		ПорядокОкругления = ПравилоОкругления;
	КонецЕсли;
	Порядок = Число(Строка(ПорядокОкругления));
	
	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал	= Число / Порядок;
	
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);
	
	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат	= Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе
			
			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал, 0, РежимОкругления.Окр15как20);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет соответстие реквизитов объекта параметрам отбора
//
// Параметры:
//  Объект			 - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ПараметрыОтбора	 - Соответствие - Условия отбора.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ОбъектСоответствуетПараметрамОтбора(Объект, ПараметрыОтбора) Экспорт
	
	СоответствуетОтбору = Истина;
	
	Для каждого ПараметрОтбора Из ПараметрыОтбора Цикл
		СоответствуетОтбору = (Объект[ПараметрОтбора.Ключ] = ПараметрОтбора.Значение);
		Если НЕ СоответствуетОтбору Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствуетОтбору;
	
КонецФункции

// Получает номер документа без лилирующих нулей. Используется в служебных механизмах, 
//  где номер документа должен отличаться от номера на печать.
//
// Параметры:
//    НомерОбъекта - Строка - номер или код объекта, который преобразуется для вывода на печать.
//    УдалитьПрефиксИнформационнойБазы - Булево - признак удаления префикса информационной базы.
//    УдалитьПользовательскийПрефикс - Булево - признак удаления пользовательского префикса.
//
// Возвращаемое значение:
//     Строка - Номер на печать.
//
Функция НомерДокументаБезЛидирующихНулей(Знач НомерОбъекта, УдалитьПрефиксИнформационнойБазы = Истина, УдалитьПользовательскийПрефикс = Истина) Экспорт
	
	// Удаляем пользовательские префиксы из номера объекта.
	Если УдалитьПользовательскийПрефикс Тогда
		
		НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьПользовательскиеПрефиксыИзНомераОбъекта(НомерОбъекта);
		
	КонецЕсли;
	
	// Удаляем лидирующие нули из номера объекта.
	НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерОбъекта);
	
	// Удаляем префикс организации и префикс информационной базы из номера объекта.
	НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(НомерОбъекта, Истина, УдалитьПрефиксИнформационнойБазы);
	
	Возврат НомерОбъекта;
	
КонецФункции // НомерДокументаБезЛидирующихНулей()

// Получает адрес публикации мобильного клиента в Google Play.
//
Функция ПолучитьАдресПубликацииМобильногоКлиентаВGooglePlay(ДляБраузера = Истина) Экспорт
	
	Если ДляБраузера Тогда
		Возврат "https://play.google.com/store/apps/details?id=com.e1c.SmallBusiness";
	Иначе
		Возврат "market://details?id=com.e1c.SmallBusiness";
	КонецЕсли;
	
КонецФункции

// Получает адрес публикации мобильного клиента в App Store.
//
Функция ПолучитьАдресПубликацииМобильногоКлиентаВAppStore(ДляБраузера = Истина) Экспорт
	
	Возврат ?(ДляБраузера, "https", "itms-apps") + "://apps.apple.com/us/app/1%D1%81-%D1%83%D0%BD%D1%84-%D0%B2-%D0%BE%D0%B1%D0%BB%D0%B0%D0%BA%D0%B5/id1440287699?l=ru&ls=1";
	
КонецФункции

// Возвращает признак того, что мобильный клиент запущен на Android.
//
Функция ЭтоAndroid() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Возврат (СтрНайти(СисИнфо.ВерсияОС, "Android") > 0);
	
КонецФункции

// Возвращает признак того, что мобильный клиент запущен на iOS.
//
Функция ЭтоiOS() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	Возврат (СтрНайти(СисИнфо.ВерсияОС, "pple") > 0);
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВЗАИМОДЕЙСТВИЯМИ

// Формирует структуру полей контактной информации типа Телефон или МобильныйТелефон по представлению телефона
//
// Параметры
//  Представление  - Строка - строковая информация с номером телефона
//
// Возвращаемое значение:
//   Структура   - сформированная структура
//
Функция ПреобразоватьНомерДляОтправкиSMS(знач Номер) Экспорт
	
	Результат = Новый Структура("НомерКорректен, НомерОтправки, СообщениеОбОшибке");
	
	// Очистка пользовательских разделителей
	ЗаменяемыеСимволы = "()- ";
	Для НомерСимвола = 1 По СтрДлина(ЗаменяемыеСимволы) Цикл
		Номер = СтрЗаменить(Номер, Сред(ЗаменяемыеСимволы, НомерСимвола, 1), "");
	КонецЦикла;
	
	// Телефонный код России 7 (вызов внутри страны начинается на 8), коды сотовых операторов начинаются на 9.
	Если Лев(Номер, 2) = "89" Тогда
		Номер = Сред(Номер, 2);
	ИначеЕсли Лев(Номер, 3) = "+79" Тогда
		Номер = Сред(Номер, 3);
	Иначе
		Результат.НомерКорректен = Ложь;
		Результат.СообщениеОбОшибке = НСтр("ru = 'Российские номера телефонов должны начинаться на +7 или 8, коды сотовых операторов должны начинаться на 9.'");
		Возврат Результат;
	КонецЕсли;
	
	// Телефонные номера России десятизначные
	Если СтрДлина(Номер) = 10
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Номер) Тогда
		
		Результат.НомерОтправки = "+7" + Номер;
		Результат.НомерКорректен = Истина;
	Иначе
		Результат.НомерКорректен = Ложь;
		Результат.СообщениеОбОшибке = НСтр("ru='Российские номера телефонов должны содержать 10 цифр.'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует представление периода события
// Используется в отчете "Календарь событий"
//
Функция ПредставлениеПериодаСобытия(Начало, Окончание) Экспорт
	
	НачалоСобытия =		Формат(Начало,		"ДФ='ддд дд МММ ЧЧ:мм'");
	ОкончаниеСобытия =	Формат(Окончание,	"ДФ='ддд дд МММ ЧЧ:мм'");
	
	Возврат НачалоСобытия + Символы.ПС + ОкончаниеСобытия;
	
КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКИМИ СПИСКАМИ

// Добавление группы отбора
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например
//                      Список.Отбор.Элементы или группа в отборе.
//  ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//  Представление строка - представление группы.
//
Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

// Процедура изменения элемента отбора в группе элементов отбора.
//
Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Процедура устанавливает отбор у динамического списка на равенство.
//
Процедура УстановитьОтборУДинамическогоСпискаНаРавенство(Отбор, ЛевоеЗначение, ПравоеЗначение) Экспорт
	
	ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение	 = ЛевоеЗначение;
	ЭлементОтбора.ВидСравнения	 = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	ЭлементОтбора.Использование  = Истина;
	
КонецПроцедуры // УстановитьОтборДляДинамическогоСписка()

// Удаляет элемент отбора динамического списка
//
// Параметры:
//  Список  - обрабатываемый динамический список,
//  ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	НаборЭлементов = Список.КомпоновщикНастроек.Настройки.Отбор;
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(НаборЭлементов,ИмяПоля);
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка
//
// Параметры:
//  Список			- обрабатываемый динамический список,
//  ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//  ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//  ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, Использование = Истина, ВидСравнения = Неопределено) Экспорт
	
	НаборЭлементов = Список.КомпоновщикНастроек.Настройки.Отбор;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НаборЭлементов,ИмяПоля,ПравоеЗначение,ВидСравнения,,Использование);
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Изменяет элемент отбора динамического списка
//
// Параметры:
//  Список         - обрабатываемый динамический список,
//  ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//  ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//  ПравоеЗначение - значение отбора,
//  Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено, ОтборПоПериоду = Ложь, БыстрыйДоступ = Ложь) Экспорт
	
	НаборЭлементов = Список.КомпоновщикНастроек.Настройки.Отбор;
	ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(НаборЭлементов,ИмяПоля,,ПравоеЗначение,ВидСравнения,Установить);
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// УНИКАЛЬНЫЙ ИДЕНТИФИКАТОР НАЧИСЛЕНИЯ

// До 31 марта 2014 год в реквизите "Назначение платежа" может указываться 
// уникальный идентификатор начисления.
// Уникальный идентификатор начисления указывается первым в реквизите «Назначение платежа» 
// и состоит из 23 знаков: первые три знака принимают значение «УИН», 
// знаки с 4 по 23 соответствуют значению уникального идентификатора начисления.
// Для выделения информации об уникальном идентификаторе начисления после уникального 
// идентификатора начислений используется символ «///».
// Например: «УИН12345678901234567890///».
// (В общем случае УИН может содержать не только цифры).

// Возвращает список статусов отправителя п/п на перечисление в бюджет
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями статуса отправителя
//
Функция СтатусыПлательщика(Период = Неопределено) Экспорт
	
	Статусы = Новый Соответствие; // Ключ - код, Значение - представление; используем соответствие, чтобы проще описывать изменения в версиях класссификатора
	
	// Старые правила
	
	Статусы.Вставить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо");
	Статусы.Вставить("02", "02 - налоговый агент");
	Статусы.Вставить("03", "03 - организация федеральной почтовой связи, оформившая расчетный документ на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами");
	Статусы.Вставить("04", "04 - налоговый орган");
	Статусы.Вставить("05", "05 - территориальные органы Федеральной службы судебных приставов");
	Статусы.Вставить("06", "06 - участник внешнеэкономической деятельности - юридическое лицо");
	Статусы.Вставить("07", "07 - таможенный орган");
	Статусы.Вставить("08", "08 - плательщик иных платежей, осуществляющий перечисление платежей в бюджетную систему Российской Федерации (кроме платежей, администрируемых налоговыми органами)");
	Статусы.Вставить("09", "09 - налогоплательщик (плательщик сборов) – индивидуальный предприниматель");
	Статусы.Вставить("10", "10 - налогоплательщик (плательщик сборов) – нотариус, занимающийся частной практикой");
	Статусы.Вставить("11", "11 - налогоплательщик (плательщик сборов) – адвокат, учредивший адвокатский кабинет");
	Статусы.Вставить("12", "12 - налогоплательщик (плательщик сборов) – глава крестьянского (фермерского) хозяйства");
	Статусы.Вставить("13", "13 - налогоплательщик (плательщик сборов) – иное физическое лицо – клиент банка (владелец счета)");
	Статусы.Вставить("14", "14 - налогоплательщик, производящий выплаты физическим лицам (п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации)");
	Статусы.Вставить("15", "15 - кредитная организация, оформившая расчетный документ на общую сумму на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами без открытия банковского счета");
	Статусы.Вставить("16", "16 - участник внешнеэкономической деятельности - физическое лицо");
	Статусы.Вставить("17", "17 - участник внешнеэкономической деятельности - индивидуальный предприниматель");
	Статусы.Вставить("18", "18 - плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей");
	Статусы.Вставить("19", "19 - организации, оформившие расчетный документ на перечисление на счет органа Федерального казначейства денежных средств, удержанных из заработка (дохода) должника - физического лица в счет погашения задолженности по таможенным платежам");
	Статусы.Вставить("20", "20 - кредитная организация, оформившая расчетный документ по каждому платежу физического лица на перечисление таможенных платежей, уплачиваемых физическими лицами без открытия банковского счета");
	
	Если ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Период) Тогда 
		
		Статусы.Вставить("03", "03 - организация федеральной почтовой связи, составившая распоряжение по каждому платежу физического лица");
		Статусы.Вставить("08", "08 - юридическое лицо (индивидуальный предприниматель), уплачивающее страховые взносы и иные платежи");
		Статусы.Вставить("14", "14 - налогоплательщик, производящий выплаты физическим лицам");
		Статусы.Вставить("15", "15 - кредитная организация (филиал кредитной организации), платежный агент, организация федеральной почтовой связи, составившие платежное поручение на общую сумму с реестром");
		Статусы.Вставить("19", "19 - организации, переводящие средства, удержанные из заработной платы на основании исполнительного документа");
		Статусы.Вставить("20", "20 - кредитная организация (филиал кредитной организации), платежный агент, составившие распоряжение по каждому платежу физического лица");
		Статусы.Вставить("21", "21 - ответственный участник консолидированной группы налогоплательщиков");
		Статусы.Вставить("22", "22 - участник консолидированной группы налогоплательщиков");
		Статусы.Вставить("23", "23 - органы контроля за уплатой страховых взносов");
		Статусы.Вставить("24", "24 - физическое лицо, уплачивающее страховые взносы и иные платежи");
		Статусы.Вставить("25", "25 - банки – гаранты, составившие распоряжение о переводе денежных средств в бюджетную систему Российской Федерации за плательщика суммы налога на добавленную стоимость, излишне полученной им (зачтенной ему) в результате возмещения налога на добавленную стоимость в заявительном порядке, а также по уплате акцизов, исчисленных по операциям реализации подакцизных товаров за пределы территории Российской Федерации, и акцизов в размере авансового платежа акцизов по алкогольной и (или) подакцизной спиртосодержащей продукции");
		Статусы.Вставить("26", "26 - учредители (участники) должника, собственники имущества должника – унитарного предприятия или третьи лица, составившие распоряжение на погашение задолженности по обязательным платежам, включенным в реестр требований кредиторов, в ходе процедур, применяемых в деле о банкротстве");
		
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	Для каждого КлючИЗначение Из Статусы Цикл
		Список.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Список.СортироватьПоЗначению();
	
	Возврат УпаковатьСоответствиеВСписокЗначений(Статусы);
	
КонецФункции

Функция УпаковатьСоответствиеВСписокЗначений(Соответствие)
	
	Список = Новый СписокЗначений;
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Список.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Список.СортироватьПоЗначению();
	Возврат Список;
	
КонецФункции

Функция НачалоПримененияИдентификатораПлатежа() Экспорт
	
	// Указание ЦБ РФ N 3025-У от 15 июля 2013 г.
	
	Возврат '20140331';
	
КонецФункции

Функция РаспознатьВНазначенииПлатежаУИН(Знач НазначениеПлатежа)
	
	// До 2014 года УИН мог указываться в конце назначения платежа - "///УИН0"
	
	Описание = Новый Структура;
	Описание.Вставить("Описание", ""); // Строка, содержащая описание УИН (23, 26 знаков или больше)
	Описание.Вставить("Значение", ""); // Собственно УИН (строка не более 20 знаков)
	
	Сигнатура                 = "УИН";
	Разделитель               = "///";
	МаксимальнаяДлинаЗначения = ДлинаУИН();
	
	ДлинаСигнатуры   = СтрДлина(Сигнатура);
	ДлинаРазделителя = СтрДлина(Разделитель);
	
	РазбираемаяСтрока = СокрЛ(НазначениеПлатежа);
	ДлинаОписания = СтрДлина(НазначениеПлатежа) - СтрДлина(РазбираемаяСтрока);
	
	Если Лев(РазбираемаяСтрока, ДлинаСигнатуры) <> Сигнатура Тогда
		// УИН не обнаружен
		Возврат Описание;
	КонецЕсли;
	
	РазбираемаяСтрока = Сред(РазбираемаяСтрока, ДлинаСигнатуры + 1); // Убираем сигнатуру
	ДлинаОписания = ДлинаОписания + ДлинаСигнатуры;
	
	ПозицияРазделителя = СтрНайти(РазбираемаяСтрока, Разделитель); // в идеальном случае - 21
	Если ПозицияРазделителя = 0 Тогда
		ДлинаЗначения     = СтрДлина(РазбираемаяСтрока);
		ДлинаОписания     = ДлинаОписания + ДлинаЗначения;
	Иначе
		ДлинаЗначения     = ПозицияРазделителя - 1;
		ДлинаОписания     = ДлинаОписания + ДлинаЗначения + ДлинаРазделителя;
		РазбираемаяСтрока = Лев(РазбираемаяСтрока, ДлинаЗначения);
	КонецЕсли;
	
	// Убедимся, что значение содержит УИН - 1 символ "0" или 20 символов
	РазбираемаяСтрока = СтрЗаменить(РазбираемаяСтрока, " ", "");
	Если СтрДлина(РазбираемаяСтрока) > МаксимальнаяДлинаЗначения Тогда
		// УИН не обнаружен - слишком много символов 
		Возврат Описание;
	КонецЕсли;
	
	// УИН обнаружен
	Описание.Вставить("Описание", Лев(НазначениеПлатежа, ДлинаОписания));
	Описание.Вставить("Значение", РазбираемаяСтрока);
	Возврат Описание;
	
КонецФункции

Функция ДлинаУИН()
	
	Возврат 20;
	
КонецФункции

Функция СигнатураУИН()
	
	Возврат "УИН";
	
КонецФункции

Функция РазделительУИН()
	
	Возврат "///";
	
КонецФункции

Функция ОписаниеУИН(Знач ИдентификаторПлатежа)
	
	Если ПустаяСтрока(ИдентификаторПлатежа) Тогда
		Возврат "";
	КонецЕсли;
	
	НормативнаяДлина = ДлинаУИН();
	ФактическаяДлина = СтрДлина(ИдентификаторПлатежа);
	
	Если ФактическаяДлина > НормативнаяДлина Тогда
		ИдентификаторПлатежа = Лев(ИдентификаторПлатежа, НормативнаяДлина);
	Иначе
		ИдентификаторПлатежа = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(
			ИдентификаторПлатежа,
			НормативнаяДлина,
			" ",
			"Справа");
	КонецЕсли;
	
	Возврат СигнатураУИН() + ИдентификаторПлатежа + РазделительУИН();
	
КонецФункции

Функция НачалоДействияНовыхПравилРеквизитовПлатежаВБюджет() Экспорт
	
	// Приказ Минфина №107н от 12.11.2013
	Возврат '20140204'; // Также эта дата (номер года) указана в текстах сообщений в этом модуле.
	
КонецФункции

Функция ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Период) Экспорт
	
	НачалоДействияНовыхПравилРеквизитовПлатежаВБюджет = НачалоДействияНовыхПравилРеквизитовПлатежаВБюджет();
	
	Возврат Период = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Период)
		ИЛИ Период >= НачалоДействияНовыхПравилРеквизитовПлатежаВБюджет();
	
КонецФункции

Процедура ЗаменитьВНазначенииПлатежаУИН(НазначениеПлатежа, Знач ИдентификаторПлатежа, Знач Дата = Неопределено, Знач ПеречислениеВБюджет = Истина) Экспорт
	
	// Заменим (добавим) УИН (уникальный идентификатор начисления)
	// С 01 января 2014 по 30 марта 2014 он указывается в назначении платежа
	Если Дата <> Неопределено 
		И Дата < НачалоДействияНовыхПравилРеквизитовПлатежаВБюджет() Тогда
		// УИН не применяется
		Возврат;
	КонецЕсли;
	
	НазначениеПлатежаУИН = РаспознатьВНазначенииПлатежаУИН(НазначениеПлатежа);
	
	Если НЕ ПеречислениеВБюджет 
	   ИЛИ (Дата <> Неопределено
		  И Дата >= НачалоПримененияИдентификатораПлатежа()) Тогда
		ИдентификаторПлатежа = "";
	КонецЕсли;
	
	Если Дата <> Неопределено 
		И Дата >= НачалоПримененияИдентификатораПлатежа() Тогда
		// УИН не следует указывать в назначении платежа, надо удалить
		ИдентификаторПлатежа = "";
	ИначеЕсли СокрЛП(НазначениеПлатежаУИН.Значение) = СокрЛП(ИдентификаторПлатежа) Тогда
		// Все и так хорошо
		Возврат;
	КонецЕсли;
	
	ОписаниеУИН = ОписаниеУИН(ИдентификаторПлатежа);
	
	Если ЗначениеЗаполнено(НазначениеПлатежаУИН.Описание) Тогда
		// Удалим старое описание
		НазначениеПлатежа = СтрЗаменить(НазначениеПлатежа, НазначениеПлатежаУИН.Описание, "");
	КонецЕсли;
	
	НазначениеПлатежа = ОписаниеУИН + НазначениеПлатежа;
	
КонецПроцедуры

Функция ОснованияПлатежа(ВидПеречисления, Период = Неопределено) Экспорт
	
	ОснованияПлатежа = Новый СписокЗначений;
		
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		ОснованияПлатежа = ОснованияНалоговогоПлатежа(Период);
	ИначеЕсли ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ОснованияПлатежа = ОснованияТаможенногоПлатежа(Период);
	Иначе
		ОснованияПлатежа.Добавить(НезаполненноеЗначение(), НСтр("ru = '0 - значение не заполняется'"));
	КонецЕсли;
	
	Возврат ОснованияПлатежа;
	
КонецФункции

Функция ОснованияНалоговогоПлатежа(Период = Неопределено)
	
	Основания = Новый СписокЗначений;
	
	Основания.Добавить("ТП", "ТП - платежи текущего года");
	Основания.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим периодам");
	Основания.Добавить("ТР", "ТР - погашение задолженности по требованию налогового органа об уплате налогов (сборов)");
	Основания.Добавить("АП", "АП - погашение задолженности по акту проверки");
	Основания.Добавить("АР", "АР - погашение задолженности по исполнительному документу");
	Основания.Добавить("БФ", "БФ - текущий платеж физического лица – клиента банка (владельца счета), уплачиваемый со своего банковского счета");
	Основания.Добавить("РС", "РС - погашение рассроченной задолженности");
	Основания.Добавить("ОТ", "ОТ - погашение отсроченной задолженности");
	Основания.Добавить("РТ", "РТ - погашение реструктурируемой задолженности");
	Основания.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию");
	
	Если ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Период) Тогда
		Основания.Добавить("ИН", "ИН – погашение инвестиционного налогового кредита");
		Основания.Добавить("ПБ", "ПБ – погашение должником задолженности в ходе процедур, применяемых в деле о банкротстве");
		Основания.Добавить("ТЛ", "ТЛ – погашение учредителем (участником) должника, собственником имущества должника – унитарного предприятия или третьим лицом задолженности в ходе процедур, применяемых в деле о банкротстве");
		Основания.Добавить("ЗТ", "ЗТ – погашение текущей задолженности в ходе процедур, применяемых в деле о банкротстве");
	Иначе
		Основания.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления");
	КонецЕсли;
	
	Основания.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение");
	
	Возврат Основания;
	
КонецФункции

Функция ОснованияТаможенногоПлатежа(Период = Неопределено)
	
	Основания = Новый СписокЗначений;
	
	Если ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Период) Тогда
		Основания.Добавить("ДЕ", "ДЕ - декларация на товары");
	Иначе
		Основания.Добавить("ДЕ", "ДЕ - таможенная декларация");
	КонецЕсли;
	Основания.Добавить("ПО", "ПО - таможенный приходный ордер");
	Если Не ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Период) Тогда
		Основания.Добавить("КВ", "КВ - постановление-квитанция (при уплате штрафа)");
	КонецЕсли;
	Если ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Период) Тогда
		Основания.Добавить("КТ", "КТ - корректировка таможенной стоимости, таможенных платежей или декларации на товары");
	Иначе
		Основания.Добавить("КТ", "КТ - форма корректировки таможенной стоимости и таможенных платежей");
	КонецЕсли;
	Основания.Добавить("ИД", "ИД - исполнительный документ");
	Основания.Добавить("ИП", "ИП - инкассовое поручение");
	Основания.Добавить("ТУ", "ТУ - требование об уплате таможенных платежей");
	Основания.Добавить("БД", "БД - документы финансово-хозяйственной деятельности");
	Основания.Добавить("ИН", "ИН - документ инкассации");
	Основания.Добавить("КП", "КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке");
	Основания.Добавить("00", "00 - иные случаи");

	Основания.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение");
	
	Возврат Основания;
	
КонецФункции 

Функция НезаполненноеЗначение() Экспорт
	
	// При невозможности указать конкретное значение, указывается ноль "0".
	// Наличие незаполненных реквизитов не допускается.
	
	Возврат "0";
КонецФункции

Функция ТипыПлатежа(ВидПеречисления, Период = Неопределено) Экспорт
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.НалоговыйПлатеж") Тогда
		ТипыПлатежа = ТипыНалоговогоПлатежа(Период);
	ИначеЕсли ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ТаможенныйПлатеж") Тогда
		ТипыПлатежа = ТипыТаможенногоПлатежа(Период);
	Иначе
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), НСтр("ru = '0 - значение не заполняется'"));
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипыНалоговогоПлатежа(Период = Неопределено)
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Период) Тогда
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - все, кроме пени и процентов");
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени");
		ТипыПлатежа.Добавить("ПЦ", "ПЦ - уплата процентов");
	Иначе
		ТипыПлатежа.Добавить("НС", "НС - уплата налога или сбора");
		ТипыПлатежа.Добавить("ПЛ", "ПЛ - уплата платежа");
		ТипыПлатежа.Добавить("ГП", "ГП - уплата пошлины");
		ТипыПлатежа.Добавить("ВЗ", "ВЗ - уплата взноса");
		ТипыПлатежа.Добавить(ТипПлатежаАванс(), "АВ - уплата аванса или предоплата (в том числе декадные платежи)");
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени");
		ТипыПлатежа.Добавить("ПЦ", "ПЦ - уплата процентов");
		ТипыПлатежа.Добавить(ТипПлатежаНалоговыйШтраф(), "СА - налоговые санкции, установленные Налоговым кодексом РФ");
		ТипыПлатежа.Добавить(ТипПлатежаАдминистративныйШтраф(), "АШ - административные штрафы");
		ТипыПлатежа.Добавить(ТипПлатежаИнойШтраф(), "ИШ - иные штрафы, установленные соответствующими нормативными актами");
		ТипыПлатежа.Добавить(НезаполненноеЗначение(),  "0 - невозможно указать конкретное значение");
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипыТаможенногоПлатежа(Период = Неопределено)
	
	ТипыПлатежа = Новый СписокЗначений;
	
	Если ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Период) Тогда
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - текущий платеж");
		
		ТипыПлатежа.Добавить("ШТ", "ШТ - уплата штрафа");
		ТипыПлатежа.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности");
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени");
	Иначе
		ТипыПлатежа.Добавить("ТП", "ТП - текущий платеж");
		
		ТипыПлатежа.Добавить("ШТ", "ШТ - уплата штрафа");
		ТипыПлатежа.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности");
		ТипыПлатежа.Добавить(ТипПлатежаПени(), "ПЕ - уплата пени");
		
		ТипыПлатежа.Добавить(НезаполненноеЗначение(), "0 - невозможно указать конкретное значение");
	КонецЕсли;
	
	Возврат ТипыПлатежа;
	
КонецФункции

Функция ТипПлатежаАванс() Экспорт
	
	Возврат "АВ";
	
КонецФункции

Функция ТипПлатежаПени() Экспорт
	
	Возврат "ПЕ";
	
КонецФункции

Функция ЭтоТипПлатежаШтраф(ТипПлатежа) Экспорт
	
	Возврат ТипПлатежа = ТипПлатежаНалоговыйШтраф() 
		Или ТипПлатежа = ТипПлатежаАдминистративныйШтраф()
		Или ТипПлатежа = ТипПлатежаИнойШтраф();
	
КонецФункции

Функция ТипПлатежаНалоговыйШтраф()
	
	Возврат "СА";
	
КонецФункции

Функция ТипПлатежаАдминистративныйШтраф()
	
	Возврат "АШ";
	
КонецФункции

Функция ТипПлатежаИнойШтраф()
	
	Возврат "ИШ";
	
КонецФункции

Функция ДопускаетсяПустойКБК(ВидПеречисления, НомерСчетаПолучателя, Период) Экспорт
	
	Возврат ВидПеречисления = ПредопределенноеЗначение("Перечисление.ВидыПеречисленийВБюджет.ИнойПлатеж")
		И ЭтоСчетИсполнителяГосуслуг(НомерСчетаПолучателя, Период);
	
КонецФункции

Функция ЭтоСчетИсполнителяГосуслуг(Знач НомерСчета, Период)
	
	Если НЕ ДействуютНовыеПравилаРеквизитовПлатежаВБюджет(Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрДлина(СокрП(НомерСчета)) <> 20 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	БалансовыйСчет       = Лев(НомерСчета, 5);
	ПризнакЛицевогоСчета = Сред(НомерСчета, 14, 1);
	
	// п.2 Приложения 4 к 107н
	Возврат (БалансовыйСчет = "40302")
		Или (БалансовыйСчет = "40501" И ПризнакЛицевогоСчета = "2")
		Или (БалансовыйСчет = "40601" И (ПризнакЛицевогоСчета = "1" Или ПризнакЛицевогоСчета = "3"))
		Или (БалансовыйСчет = "40701" И (ПризнакЛицевогоСчета = "1" Или ПризнакЛицевогоСчета = "3"))
		Или (БалансовыйСчет = "40503" И ПризнакЛицевогоСчета = "4")
		Или (БалансовыйСчет = "40603" И ПризнакЛицевогоСчета = "4")
		Или (БалансовыйСчет = "40703" И ПризнакЛицевогоСчета = "4");
	
КонецФункции

// Получает значения параметров из строки.
// По аналогии с СтроковыеФункцииКлиентСервер.ЗапуститьВыполнениеВФоне() БСП 2.2.5. Добавлен параметр "Разделитель".
//
// Параметры:
//  СтрокаПараметров - Строка - строка, содержащая параметры, каждый из которых представляет собой
//                              фрагмент вида <Имя параметра>=<Значение>, где:
//                                Имя параметра - имя параметра; 
//                                Значение - его значение. 
//                              Фрагменты отделяются друг от друга символами ';'.
//                              Если значение содержит пробельные символы, то оно должно быть заключено в двойные
//                              кавычки (").
//                              Например:
//                               "File=""c:\InfoBases\Trade""; Usr=""Director"";"
//
// Возвращаемое значение:
//  Структура - структура параметров, где ключ - имя параметра, значение - значение параметра.
//
Функция ПолучитьПараметрыИзСтроки(Знач СтрокаПараметров, Знач Разделитель = ";") Экспорт
	
	Результат = Новый Структура;
	
	СимволДвойныеКавычки = Символ(34); // (")
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПараметров, Разделитель);
	
	Для Каждого СтрокаПараметра Из МассивПодстрок Цикл
		
		ПозицияПервогоЗнакаРавенства = СтрНайти(СтрокаПараметра, "=");
		
		// Получаем имя параметра
		ИмяПараметра = СокрЛП(Лев(СтрокаПараметра, ПозицияПервогоЗнакаРавенства - 1));
		
		// Получаем значение параметра.
		ЗначениеПараметра = СокрЛП(Сред(СтрокаПараметра, ПозицияПервогоЗнакаРавенства + 1));
		
		Если  Лев(ЗначениеПараметра, 1) = СимволДвойныеКавычки
			И Прав(ЗначениеПараметра, 1) = СимволДвойныеКавычки Тогда
			
			ЗначениеПараметра = Сред(ЗначениеПараметра, 2, СтрДлина(ЗначениеПараметра) - 2);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяПараметра) Тогда
			
			Результат.Вставить(ИмяПараметра, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТолькоЦифрыИзСтроки(ВходящаяСтрока) Экспорт
	
	Результат = "";
	
	Для Итератор = 1 По СтрДлина(ВходящаяСтрока) Цикл
		
		Символ = Сред(ВходящаяСтрока, Итератор, 1);
		
		Если ЭтоЦифра(Символ) Тогда
			Результат = Результат + Символ;
		КонецЕсли;
		
	КонецЦикла;
	
	Return Результат;
	
КонецФункции

Функция ЭтоЦифра(Символ) Экспорт
	
	Возврат (КодСимвола(Символ) >= КодСимвола("0")) И (КодСимвола(Символ) <= КодСимвола("9"))
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////// 
// РАСШИРЕНИЕ СТАНДАРТНЫХ ВОЗМОЖНОСТЕЙ РАБОТЫ С ПЕРИОДАМИ

Функция ПредыдущийПлавающийПериод(Период) Экспорт
	
	Если ТипЗнч(Период) = Тип("Структура") И Период.Вариант = "Последние7ДнейНеСчитаяТекущего" Тогда
		ДатаНачала = НачалоДня(ТекущаяДата());
		Возврат Новый СтандартныйПериод(ДатаНачала - 14 * 86400, ДатаНачала - 7 * 86400 - 1); 
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.Сегодня Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.Вчера);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлаяНеделяДоТакогоЖеДняНедели);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйМесяцДоТакойЖеДаты);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйКварталДоТакойЖеДаты);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлоеПолугодиеДоТакойЖеДаты);
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода Тогда
		Возврат Новый СтандартныйПериод(ВариантСтандартногоПериода.ПрошлыйГодДоТакойЖеДаты);
	Иначе
		ПродолжительностьСекунд = (КонецДня(Период.ДатаОкончания) - Период.ДатаНачала + 1);
		Возврат Новый СтандартныйПериод(Период.ДатаНачала - ПродолжительностьСекунд, Период.ДатаНачала - 1); 
	КонецЕсли; 
	
КонецФункции
 
Функция АналогичныйПериодПрошлогоГода(Период) Экспорт
	
	Если ТипЗнч(Период) = Тип("Структура") И Период.Вариант = "Последние7ДнейНеСчитаяТекущего" Тогда
		ДатаНачала = НачалоДня(ТекущаяДата()) - 7 * 86400;
		ДатаОкончания = НачалоДня(ТекущаяДата()) - 1;
	Иначе
		ДатаНачала = Период.ДатаНачала;
		ДатаОкончания = Период.ДатаОкончания;
	КонецЕсли;
	
	Год = Год(ДатаНачала);
	Месяц = Месяц(ДатаНачала);
	День = День(ДатаНачала);
	ЭтотГодВисокосный = (День(КонецМесяца(Дата(Год, 2, 1))) = 29);
	ПрошлыйГодВисокосный = (День(КонецМесяца(Дата(Год - 1, 2, 1))) = 29);
	Если Месяц = 2 И День = 29 И ЭтотГодВисокосный Тогда
		День = 28;
	ИначеЕсли Месяц = 2 И День = 28 И ПрошлыйГодВисокосный Тогда
		День = 29;
	КонецЕсли; 
	ГодКонца = Год(ДатаОкончания);
	МесяцКонца = Месяц(ДатаОкончания);
	ДеньКонца = День(ДатаОкончания);
	ЭтотГодВисокосный = (День(КонецМесяца(Дата(ГодКонца, 2, 1))) = 29);
	ПрошлыйГодВисокосный = (День(КонецМесяца(Дата(ГодКонца - 1, 2, 1))) = 29);
	Если МесяцКонца = 2 И ДеньКонца = 29 И ЭтотГодВисокосный Тогда
		ДеньКонца = 28;
	ИначеЕсли МесяцКонца = 2 И ДеньКонца = 28 И ПрошлыйГодВисокосный Тогда
		ДеньКонца = 29;
	КонецЕсли; 
	
	Если Период.Вариант = ВариантСтандартногоПериода.Сегодня Тогда
		Дата = Дата(Год - 1, Месяц, День);
		Возврат Новый СтандартныйПериод(НачалоДня(Дата), КонецДня(Дата));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтойНедели Тогда
		ПродолжительностьСекунд = НачалоДня(ДатаОкончания) - НачалоНедели(ДатаОкончания);
		Неделя = НеделяГода(ДатаНачала);
		ДеньНедели = ДеньНедели(Дата(Год - 1, 1, 1));
		НомерДня = 7 * (Неделя - 1) - ДеньНедели + 1;
		Дата = Дата(Год - 1, 1, 1) + НомерДня * 86400;
		Возврат Новый СтандартныйПериод(НачалоНедели(Дата), КонецДня(Дата + ПродолжительностьСекунд));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоМесяца Тогда
		Возврат Новый СтандартныйПериод(Дата(Год - 1, Месяц, 1), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоКвартала Тогда
		Дата = ДобавитьМесяц(Дата(Год - 1, 1, 1), Месяц - 1);
		Возврат Новый СтандартныйПериод(НачалоКвартала(Дата), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоПолугодия Тогда
		Если Месяц < 7 Тогда
			Возврат Новый СтандартныйПериод(Дата(Год - 1, 1, 1), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
		Иначе
			Возврат Новый СтандартныйПериод(ДобавитьМесяц(Дата(Год - 1, 1, 1), 6), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
		КонецЕсли; 
	ИначеЕсли Период.Вариант = ВариантСтандартногоПериода.СНачалаЭтогоГода Тогда
		Возврат Новый СтандартныйПериод(Дата(Год - 1, 1, 1), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	Иначе
		Возврат Новый СтандартныйПериод(Дата(Год - 1, Месяц, День), КонецДня(Дата(ГодКонца - 1, МесяцКонца, ДеньКонца)));
	КонецЕсли; 
	
КонецФункции

Функция Последние7ДнейНеСчитаяТекущего() Экспорт
	
	ДатаНачала = НачалоДня(ТекущаяДата());
	Возврат Новый СтандартныйПериод(ДатаНачала - 7 * 86400, ДатаНачала - 1); 
	
КонецФункции

#Область БанковскиеИдентификационныеКоды

Функция ДлинаБИК()
	
	// п. 2.2 Положения 
	Возврат 9;
	
КонецФункции

Функция ПроверитьДлинуБИК(БИК) Экспорт
	
	Возврат СтрДлина(СокрЛП(БИК)) = ДлинаБИК();
	
КонецФункции

Функция ЭтоБИКБанкаРФ(КодБанка) Экспорт
	
	Если Лев(КодБанка, 2) = "04" И ПроверитьДлинуБИК(КодБанка) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область БанковскиеСчета

Функция ТипНомерСчета() Экспорт
	
	Возврат Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(ДлинаНомераСчета()));
	
КонецФункции

Функция ДлинаНомераСчета() Экспорт
	
	Возврат 20;
	
КонецФункции

Функция ПроверитьДлинуНомераСчета(НомерСчета) Экспорт
	
	Возврат СтрДлина(НомерСчета) = ДлинаНомераСчета();
	
КонецФункции

Функция ПроверитьБуквенноЦифровыеСимволы(СтрокаСимволов)
	
	ПроверитьРазрешенныеСимволы = Истина;
	
	Для ИндексСимвола = 1 По СтрДлина(СтрокаСимволов) Цикл
		
		СимволКода = ВРег(Сред(СтрокаСимволов, ИндексСимвола, 1));
		
		Если СтрНайти("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ", СимволКода) = 0 Тогда
			ПроверитьРазрешенныеСимволы = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПроверитьРазрешенныеСимволы; 
	
КонецФункции

// Проверяет допустимо ли производить проверки банковского счета по переданным параметрам.
// Для иностранных банков наличие кода банка необязательно.
//
// Параметры:
//  НомерСчета       - Строка - номер проверяемого счета.
//  КодБанка         - Строка - код банка проверяемого счета.
//  ЯвляетсяБанкомРФ - Булево - признак российского банка.
// 
// Возвращаемое значение:
//  Булево - признак того, что проверки счета допустимы.
//
Функция ПропуститьПроверкуРеквизитовСчета(НомерСчета, КодБанка, ЯвляетсяБанкомРФ) Экспорт
	
	Если ЯвляетсяБанкомРФ Тогда
		ПропуститьПроверку = ПустаяСтрока(НомерСчета) Или ПустаяСтрока(КодБанка);
	Иначе
		ПропуститьПроверку = ПустаяСтрока(НомерСчета);
	КонецЕсли;
	
	Возврат ПропуститьПроверку;
	
КонецФункции

// Проверяет правильность заполнения номера счета и возвращает в параметре текст сообщения.
//
// Параметры:
//  НомерСчета     - Строка - номер проверяемого счета.
//  КодБанка       - Строка - клиринговый код банка для проверяемого счета.
//  ЯвляетсяБанкомРФ      - Булево - признак российского банка.
//  ТекстСообщения - Строка - в параметр передается текст сообщения об ошибке, если проверка не пройдена.
// 
// Возвращаемое значение:
//  Булево - Результат проверки номера счета, если Ложь тогда счет некорректный.
//
Функция НомерСчетаКорректен(НомерСчета, КодБанка, ЯвляетсяБанкомРФ, ТекстСообщения = "") Экспорт
	
	Если ПропуститьПроверкуРеквизитовСчета(НомерСчета, КодБанка, ЯвляетсяБанкомРФ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекстСообщения = "";
	
	НомерСчетаКорректен = Ложь;
	
	Если ЯвляетсяБанкомРФ Тогда
		
		Если Не ПроверитьДлинуНомераСчета(НомерСчета) Тогда
			ТекстСообщения = НСтр("ru = 'Номер счета должен состоять из 20 цифр'");
		ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерСчета) Тогда
			ТекстСообщения = НСтр("ru = 'В номере счета должны быть только цифры'");
		Иначе
			НомерСчетаКорректен = Истина;
		КонецЕсли;
		
	Иначе
		
		Если Не ПроверитьРазрешенныеСимволыСчета(НомерСчета) Тогда
			ТекстСообщения = НСтр("ru = 'Разрешены только буквы от A до Z и цифры'");
		Иначе
			НомерСчетаКорректен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСчетаКорректен;
	
КонецФункции

#Область МеждународныеБанковскиеСчета

Функция ТипМеждународныйНомерСчета() Экспорт
	
	Возврат Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(МаксимальнаяДлинаМеждународногоНомераСчета()));
	
КонецФункции

Функция МаксимальнаяДлинаМеждународногоНомераСчета() Экспорт
	
	Возврат 34;
	
КонецФункции

// Функция проверяет код счета на наличие разрешенных символов.
// Источник ISO 20022 и MT103.
//
// Параметры:
//  НомерСчета - Строка - код IBAN.
// 
// Возвращаемое значение:
//  Булево - Признак того, что проверка пройдена.
//
Функция ПроверитьРазрешенныеСимволыСчета(НомерСчета) Экспорт
	
	Возврат ПроверитьБуквенноЦифровыеСимволы(НомерСчета);
	
КонецФункции

#КонецОбласти

#Область SWIFTКоды

// Получает код страны из SWIFT согласно ISO 9362.
//
// Параметры:
//  СВИФТБИК - Строка - код SWIFT BIC.
// 
// Возвращаемое значение:
//  Строка -  Код страны SWIFT.
//
Функция КодСтраныSWIFT(СВИФТБИК) Экспорт
	
	Возврат Сред(СВИФТБИК,5,2);
	
КонецФункции

// Функция проверяет соответствие строки банковскому коду SWIFT.
//
// Параметры:
//  ПроверяемаяСтрока - Строка - строка которую, требуется проверить на соответствие SWIFT коду.
// 
// Возвращаемое значение:
//  Булево - если Истина - строка соответствует формату SWIFT. 
//
Функция СтрокаСоответствуетФорматуSWIFT(ПроверяемаяСтрока) Экспорт
	
	Если ПроверитьДлинуSWIFT(ПроверяемаяСтрока) И ПроверитьРазрешенныеСимволыSWIFT(ПроверяемаяСтрока) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция возвращает признак корректности длины SWIFT.
// Согласно ISO 9362 центральные офисы банков имет длину 8 символов,
// а подразделения банков - 11 символов (3 дополнительных символа для номера филиала)
//
// Параметры:
//  СВИФТБИК - Строка - код SWIFT BIC.
// 
// Возвращаемое значение:
//  Булево -  Признак того, что длина корректная.
//
Функция ПроверитьДлинуSWIFT(СВИФТБИК) Экспорт
	
	ДлинаКода = СтрДлина(СВИФТБИК);
	ДлинаДляЦО = 8; 
	ДлинаДляФилиала = 11;
	
	Возврат ДлинаКода = ДлинаДляЦО Или ДлинаКода = ДлинаДляФилиала;
	
КонецФункции

// Функция проверяет код SWIFT на наличие разрешенных символов.
//  Источник: ISO 9362:2014 - BIC Implementation. Changes and impacts. (стр. 6).
//  Контроль всего кода выполняем на буквенно-цифровые символы, т.к.
//  стандарт не рекомендует выполнять проверки согласно конкретным разрешенным символам в отдельных разрядах SWIFT.
//
// Параметры:
//  СВИФТБИК - Строка - код SWIFT BIC.
// 
// Возвращаемое значение:
//  Булево - Признак того, что проверка пройдена.
//
Функция ПроверитьРазрешенныеСимволыSWIFT(СВИФТБИК) Экспорт
	
	Возврат ПроверитьБуквенноЦифровыеСимволы(СВИФТБИК);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработкаТабличнойЧасти

Процедура РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета) Экспорт

	Если ПараметрыРасчета.Свойство("РассчитатьСуммуСкидки")=Неопределено И ПараметрыРасчета.Свойство("РассчитатьПроцентСкидки")=Неопределено Тогда
		ПараметрыРасчета.Вставить("РассчитатьСуммуСкидки", Истина);
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("Кратность") И СтрокаТабличнойЧасти.Свойство("Коэффициент") Тогда
		КоличествоСтроки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Коэффициент;
	Иначе
		КоличествоСтроки = СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.Сумма = КоличествоСтроки * СтрокаТабличнойЧасти.Цена;
	
	Если ПараметрыРасчета.Свойство("СброситьФлагСкидкиРассчитаны") И ПараметрыРасчета.СброситьФлагСкидкиРассчитаны
		И СтрокаТабличнойЧасти.Свойство("ПроцентАвтоматическойСкидки")
		Тогда
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		Если ПараметрыРасчета.Свойство("РассчитатьПроцентСкидки") И ПараметрыРасчета.РассчитатьПроцентСкидки И СтрокаТабличнойЧасти.Сумма > 0 Тогда //Если ввел сумму скидки
			Если СтрокаТабличнойЧасти.СуммаСкидкиНаценки >= СтрокаТабличнойЧасти.Сумма Тогда
				СтрокаТабличнойЧасти.СуммаСкидкиНаценки = СтрокаТабличнойЧасти.Сумма;
				СтрокаТабличнойЧасти.Сумма = 0;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100;
			Иначе
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Окр(100*СтрокаТабличнойЧасти.СуммаСкидкиНаценки / (КоличествоСтроки * СтрокаТабличнойЧасти.Цена), 2);
			КонецЕсли;
		Иначе  //Если ввел процент скидки или по-умолчанию, если указан процент и сумма, пересчитываем сумму скидки из процента
			СтрокаТабличнойЧасти.СуммаСкидкиНаценки = Окр(КоличествоСтроки * СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100, 2);
		КонецЕсли;
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаСкидкиНаценки;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("СуммаСкидки") Тогда
		СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.СуммаСкидкиНаценки;
	КонецЕсли; 
	
	РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

Процедура РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, ПараметрыРасчета) Экспорт
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(ПараметрыРасчета.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
									  
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ПараметрыРасчета.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуНДС()

#КонецОбласти

#Область Контрагенты

Функция ВыделитьИзНаименованияОПФ(КлассификаторОПФ, знач НаименованиеОрганизации) Экспорт
	
	НаименованиеОрганизации = СокрЛП(НаименованиеОрганизации);
	Результат = Новый Структура("НаименованиеБезОПФ, КраткаяФорма, ПолнаяФорма", НаименованиеОрганизации, "", "");
	
	// Поиск по полной организационно-правовой форме
	Для Каждого ДанныеОПФ Из КлассификаторОПФ Цикл
		Если СтрНайти(НаименованиеОрганизации, ДанныеОПФ.ПолнаяФорма) > 0 Тогда
			Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
			Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
			Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(СтрЗаменить(НаименованиеОрганизации, ДанныеОПФ.ПолнаяФорма, "")));
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	// Поиск по краткой организационно-правовой форме
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НаименованиеОрганизации);
	Для Каждого Слово Из МассивСлов Цикл
		Для Каждого ДанныеОПФ Из КлассификаторОПФ Цикл
			Если Не ПустаяСтрока(ДанныеОПФ.КраткаяФорма) И ВРег(СокрЛП(Слово)) = ВРег(ДанныеОПФ.КраткаяФорма) Тогда
				Результат.КраткаяФорма = ДанныеОПФ.КраткаяФорма;
				Результат.ПолнаяФорма = ДанныеОПФ.ПолнаяФорма;
				Результат.НаименованиеБезОПФ = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(СтрЗаменить(НаименованиеОрганизации, Слово, "")));
				Возврат Результат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодчиненныеТабличныеЧасти

// Заполняет ключ связи таблиц документа или обработки
//
Процедура ЗаполнитьКлючСвязи(ТабличнаяЧасть, СтрокаТабличнойЧасти, ИмяРеквизитаСвязи, ВремКлючСвязи = 0) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяРеквизитаСвязи]) Тогда
		Если ВремКлючСвязи = 0 Тогда
			Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
				Если ВремКлючСвязи < СтрокаТЧ[ИмяРеквизитаСвязи] Тогда
					ВремКлючСвязи = СтрокаТЧ[ИмяРеквизитаСвязи];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтрокаТабличнойЧасти[ИмяРеквизитаСвязи] = ВремКлючСвязи + 1;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет строки по ключу связи в таблице документа или обработки
//
Процедура УдалитьСтрокиПоКлючуСвязи(ТабличнаяЧасть, СтрокаТабличнойЧасти, ИмяРеквизитаСвязи = "КлючСвязи") Экспорт
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяРеквизитаСвязи, СтрокаТабличнойЧасти[ИмяРеквизитаСвязи]);
	
	УдаляемыеСтроки = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаТаблицы Из УдаляемыеСтроки Цикл
		
		ТабличнаяЧасть.Удалить(СтрокаТаблицы);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив найденных строк по заданному ключу связи
Функция СтрокиПоКлючуСвязи(ТабличнаяЧасть, КлючСвязи, ИмяРеквизитаСвязи = "КлючСвязи") Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить(ИмяРеквизитаСвязи, КлючСвязи);
	Возврат ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	
КонецФункции

#КонецОбласти 

// Создает структуру для дальнейшего заполнения и
// передачи в функцию получения реквизитов кассира
//
// Возвращаемое значение:
//  Структура - содержит:
//   * КассаККМ      - Неопределено
//   * Ответственный - Неопределено
//   * Автор         - Неопределено
//
Функция СформироватьСтруктуруДляПроверкиКассира() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("КассаККМ", Неопределено);
	Результат.Вставить("Ответственный", Неопределено);
	Результат.Вставить("Автор", Неопределено);
	
	Возврат Результат
	
КонецФункции