#Область ШтрихкодированиеИСПереопределяемый

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых
// (на любом уровне вложенности, в т.ч. частично) находится продукция требуемого вида.
//
// Параметры:
//  ШтрихкодыДляПроверки - Массив - проверяемые элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
//  ВидыПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
//
// Возвращаемое значение:
//  Массив - Массив - подходящие элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
Процедура ВыделитьШтрихкодыСодержащиеВидыПродукции(ШтрихкодыУпаковок, ВидыПродукции) Экспорт
	
	ШтрихкодыДляПроверки	= ШтрихкодыУпаковок;
	
	Если НЕ ШтрихкодыДляПроверки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьАлкогольную = Истина;
	ПроверятьТабачную    = Истина;
	ПроверятьОбувную     = Истина;
	
	Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		ПроверятьВидыПродукции = ОбщегоНазначения.СкопироватьРекурсивно(ВидыПродукции, Ложь);
	ИначеЕсли ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ПроверятьВидыПродукции = Новый Массив;
		ПроверятьВидыПродукции.Добавить(ВидыПродукции);
	ИначеЕсли ВидыПродукции = Неопределено Тогда
		
		ПроверятьВидыПродукции = Новый Массив;
		ПроверятьВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
		ПроверятьВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Табак);
		ПроверятьВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Обувь);
		ПроверятьВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Шины);
		
	КонецЕсли;
	
	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПроверятьВидыПродукции", ПроверятьВидыПродукции);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	ШтрихкодыУпаковок.Номенклатура.ВидПродукцииИС В (&ПроверятьВидыПродукции)
	|		КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Создание и заполнение массива Результат на основании соответствия РезультатПроверки
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// возвращаемое значение: массив Результат
	ШтрихкодыУпаковок = Результат;
	
КонецПроцедуры

// Заполняет соответствие штрихкодов данными по номенклатуре, характеристике, маркируемой продукции.
//
// Параметры:
//  Штрихкоды            - Соответствие - Спискок штрихкодов.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
Процедура ЗаполнитьИнформациюПоШтрихкодам(Штрихкоды, КэшированныеЗначения) Экспорт
	
	СписокШтрихкодов = Новый Массив;
	Для Каждого КлючЗначение Из Штрихкоды Цикл
		СписокШтрихкодов.Добавить(Новый Структура("Штрихкод", КлючЗначение.Ключ));
	КонецЦикла;
	
	ДанныеПоШтрихкодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СписокШтрихкодов);
	
	Для Каждого КлючЗначение Из ДанныеПоШтрихкодам Цикл
		Если Штрихкоды[КлючЗначение.Ключ] <> Неопределено Тогда
			Штрихкоды[КлючЗначение.Ключ].Номенклатура         = КлючЗначение.Значение.Номенклатура;
			Штрихкоды[КлючЗначение.Ключ].Характеристика       = КлючЗначение.Значение.Характеристика;
			Штрихкоды[КлючЗначение.Ключ].МаркируемаяПродукция = КлючЗначение.Значение.МаркируемаяПродукция;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В функции нужно реализовать подготовку данных для дальнейшей обработки штрихкодов.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа, в которой происходит обработка,
//  ДанныеШтрихкодов - Массив - полученные штрихкоды,
//  ПараметрыЗаполнения - (См. ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти).
//
// Возвращаемое значение:
//  Структура - подготовленные данные.
Процедура ПодготовитьДанныеДляОбработкиШтрихкодов(Форма, ДанныеШтрихкодов, ПараметрыЗаполнения, СтруктураДействий) Экспорт
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСИзмененнымиСтроками  = Новый Структура;
	
	Если ПараметрыЗаполнения.ЗаполнитьКодТНВЭД Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьКодТНВЭД");
	КонецЕсли;
		
	Если ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц Тогда
		
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьКоличествоЕдиниц");
		
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПересчитатьСумму Тогда
		
		СтруктураДействийСДобавленнымиСтроками.Вставить("ПересчитатьСумму");
		СтруктураДействийСИзмененнымиСтроками.Вставить("ПересчитатьСумму");
		
	КонецЕсли;
	
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакЕдиницаИзмерения",
		Новый Структура("Номенклатура", "ЕдиницаИзмерения"));
	
	Если ШтрихкодированиеИС.ПрисутствуетАлкогольнаяПродукция(ПараметрыЗаполнения.ВидыПродукцииИС) Тогда
		
		ПараметрыЗаполненияНоменклатурыЕГАИС = Новый Структура;
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ЗаполнитьФлагАлкогольнаяПродукция", Ложь);
		ПараметрыЗаполненияНоменклатурыЕГАИС.Вставить("ИмяКолонки", "АлкогольнаяПродукция");
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьНоменклатуруЕГАИС", ПараметрыЗаполненияНоменклатурыЕГАИС);
		
		Если ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьИндексАкцизнойМарки");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ШтрихкодированиеИС.ПрисутствуетОбувнаяПродукция(ПараметрыЗаполнения.ВидыПродукцииИС)
		Или ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ПараметрыЗаполнения.ВидыПродукцииИС) Тогда
		
		Если ПараметрыЗаполнения.ЗаполнитьGTIN Тогда
			СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьGTINВСтроке",
			
			Новый Структура("ДобавлятьЛидирующиеНули", Истина));
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураДействий = ИнтеграцияМОТПУНФКлиентСервер.ПараметрыОбработкиШтрихкодов();
	
	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ТолькоТовары                           = Истина;
	СтруктураДействий.ШтрихкодыВТЧ                           = ПараметрыЗаполнения.ШтрихкодыВТЧ;
	СтруктураДействий.МаркируемаяПродукцияВТЧ                = ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ;
	
КонецПроцедуры

// Процедура обрабатывает введенные штрихкоды:
// 1. Добавляет введенные штрихкоды в табличную часть документа;
// 2. Вызывает помощник создания штрихкода, если он не был найден.
// Параметры:
//  Форма - УправляемаяФорма - форма для которой будут обработаны введенные штрихкоды.
//  Объект - ДанныеФормыСтруктура - объект формы.
//  СтруктураПараметров - Структура - структура формируется функцией ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов()
//                                    и заполняется данными из формы.
//  КэшированныеЗначения - Структура - кэш формы.
Процедура ОбработатьШтрихкоды(Форма, ДанныеДляОбработки, КэшированныеЗначения) Экспорт
	
	Если Форма.Элементы.Найти("ЗапасыНоменклатура") <> Неопределено Тогда
		ИмяПоляНоменклатура = "ЗапасыНоменклатура";
	ИначеЕсли Форма.Элементы.Найти("ТоварыНоменклатура") <> Неопределено Тогда
		ИмяПоляНоменклатура = "ТоварыНоменклатура";
	Иначе
		Возврат;
	КонецЕсли;
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеДляОбработки.Штрихкоды) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеДляОбработки.Штрихкоды;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеДляОбработки.Штрихкоды);
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	СтруктураДанные = Новый Структура("МассивШтрихкодов, ВидОперации, Организация,ВидЦен, Дата, ВалютаДокумента,
									  |СуммаВключаетНДС, ВидСкидкиНаценки, НалогообложениеНДС, ПараметрыВыбора,
									  |ПроцентСкидкиПоДисконтнойКарте, ДисконтнаяКарта");
	
	ЗаполнитьЗначенияСвойств(СтруктураДанные, Объект);
	
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("ПараметрыВыбора", Форма.Элементы[ИмяПоляНоменклатура].ПараметрыВыбора);
	
	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
			И ДанныеШтрихкода.Количество() = 0 Тогда
			
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
			
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры.Найти(ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры) = Неопределено Тогда
			
			СтруктураШтрихкода = Новый Структура;
			СтруктураШтрихкода.Вставить("Штрихкод", ТекШтрихкод.Штрихкод);
			СтруктураШтрихкода.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ТипНоменклатуры);
			СтруктураШтрихкода.Вставить("ЭтоНабор", ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЭтоНабор);
			
			ШтрихкодыНекорректногоТипа.Добавить(СтруктураШтрихкода);
			
		Иначе
			
			МассивСтрокТЧ = Объект.Товары.НайтиСтроки(
				Новый Структура("Номенклатура,Характеристика,Упаковка",
					ДанныеШтрихкода.Номенклатура,
					ДанныеШтрихкода.Характеристика,
					ДанныеШтрихкода.ЕдиницаИзмерения));
					
			Если МассивСтрокТЧ.Количество() = 0 Тогда
				
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.Номенклатура = ДанныеШтрихкода.Номенклатура;
				НоваяСтрока.Характеристика = ДанныеШтрихкода.Характеристика;
				НоваяСтрока.Количество = ТекШтрихкод.Количество;
				НоваяСтрока.КоличествоУпаковок = ТекШтрихкод.Количество;
				НоваяСтрока.Упаковка = ?(ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения), ДанныеШтрихкода.ЕдиницаИзмерения, ДанныеШтрихкода.СтруктураДанныеНоменклатуры.ЕдиницаИзмерения);
				НоваяСтрока.GTIN = ТекШтрихкод.Штрихкод;
				
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НоваяСтрока, "ХарактеристикиИспользуются") Тогда
					Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
						НоваяСтрока.ХарактеристикиИспользуются = НоваяСтрока.Номенклатура.ИспользоватьХарактеристики;
					КонецЕсли;
				КонецЕсли;
				
				Форма.Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
			Иначе
				
				НоваяСтрока = МассивСтрокТЧ[0];
				НоваяСтрока.Количество = НоваяСтрока.Количество + ТекШтрихкод.Количество;
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
				
				Форма.Элементы.Товары.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если НеизвестныеШтрихкоды.Количество() Тогда
		ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды);
	КонецЕсли;
	
	Если ШтрихкодыНекорректногоТипа.Количество() Тогда
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
КонецПроцедуры

// Возвращается контрагентов по списку ИНН.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * ИНН
//   * Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В(&КоллекцияИНН)");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет в таблице данные по штрихкодам EAN.
// 
// Параметры:
//  ДанныеПоШтрихкодамEAN - ТаблицаЗначений - передается с обязательной колонкой ШтрихкодEAN, возвращает:
//   * Номенклатура
//   * ПредставлениеНоменклатуры
//   * Характеристика
//   * ШтрихкодEAN
Процедура ЗаполнитьДанныеПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN) Экспорт
	
	МассивШтрихкодов = ДанныеПоШтрихкодамEAN.ВыгрузитьКолонку("ШтрихкодEAN");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Штрихкод КАК ШтрихкодEAN,
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ШтрихкодыНоменклатуры.Партия
	|	КОНЕЦ КАК Серия,
	|	"""" КАК ПредставлениеНоменклатуры,
	|	ВЫБОР
	|		КОГДА ШтрихкодыНоменклатуры.Номенклатура.ТабачнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Табак)
	|		КОГДА ШтрихкодыНоменклатуры.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПродукции
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Штрихкод В(&Штрихкоды)");
	
	НоменклатураВДокументахСервер.ПреобразоватьТекстЗапросаРегистрШтрихкодыНоменклатуры(Запрос.Текст);
	
	Запрос.УстановитьПараметр("Штрихкоды", МассивШтрихкодов);
	
	ДанныеПоШтрихкодамEAN = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаДанных Из ДанныеПоШтрихкодамEAN Цикл
		СтрокаДанных.ПредставлениеНоменклатуры = УправлениеНебольшойФирмойСервер.ПредставлениеНоменклатуры(СтрокаДанных.Номенклатура, СтрокаДанных.Характеристика);
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при определении необходимости выбора серий.
// 
// Параметры:
//  ДанныеШтрихкода       - Структура - данные штрихкода.
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
//  ТребуетсяВыбор        - Булево - исходящий, признак необходимости выбора серии.
Процедура ОпределитьНеобходимостьВыбораСерииДляДанныхШтрихкода(ДанныеШтрихкода, ПараметрыСканирования, ТребуетсяВыбор) Экспорт
	
	ТребуетсяВыбор = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьШтрихкодыУпаковокДокумента(Документ, ШтрихкодыУпаковок) Экспорт
	
	ШтрихкодыУпаковок = Документ.ШтрихкодыУпаковок.ВыгрузитьКолонку("ЗначениеШтрихкода");
	
КонецПроцедуры

// В процедуре необходимо реализовать заполнение таблицы ДанныеПоEAN на основании заполненной колонки ШтрихкодEAN.
// 
// Параметры:
//  ДанныеПоШтрихкодамEAN - ТаблицаЗначений - передается с обязательной колонкой ШтрихкодEAN, возвращает:
//   * Номенклатура - ОпределяемыйТип.Номенклатура
//   * ПредставлениеНоменклатуры - Строка - Представление номенклатуры
//   * Характеристика - ОпределяемыйТип.Характеристика
//   * ШтрихкодEAN - Строка - Штрихкод
//   * ВидПродукцииИС - ПеречислениеСсылка.ВидыПродукцииИС - Вид продукции
//   * Маркируемая - Булево - Признак маркируемой продукции
Процедура ПриЗаполненииИнформацииПоШтрихкодамEAN(ДанныеПоШтрихкодамEAN) Экспорт
	
	МассивШтрихкодов = Новый Массив;
	
	ДанныеПоШтрихкодамEAN.Колонки.Добавить("ПреобразованныйШтрихкод", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(200)));
	Для Каждого СтрокаШтрихкода Из ДанныеПоШтрихкодамEAN Цикл
		
		СтруктураШтрихкода = Новый Структура("Штрихкод, Количество", СтрокаШтрихкода.ШтрихкодEAN, 1);
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(СтруктураШтрихкода);
		СтрокаШтрихкода.ПреобразованныйШтрихкод = СтруктураШтрихкода.Штрихкод;
		
		МассивШтрихкодов.Добавить(СтруктураШтрихкода);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодамСоответствие = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(МассивШтрихкодов);
	
	ДанныеПоШтрихкодам = Новый ТаблицаЗначений;
	ДанныеПоШтрихкодам.Колонки.Добавить("Штрихкод",			Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	ДанныеПоШтрихкодам.Колонки.Добавить("Номенклатура",		Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ДанныеПоШтрихкодам.Колонки.Добавить("Характеристика",	Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ДанныеПоШтрихкодам.Колонки.Добавить("Партия",			Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	
	Для Каждого Штрихкод Из ДанныеПоШтрихКодамСоответствие Цикл
		
		Для Каждого НоменклатураСоответствия Из Штрихкод.Значение Цикл
			
			НоваяСтрока = ДанныеПоШтрихкодам.Добавить();
			Если ЗначениеЗаполнено(Штрихкод.Значение) Тогда
				НоваяСтрока.Штрихкод		= Штрихкод.Ключ;
				НоваяСтрока.Номенклатура	= НоменклатураСоответствия.Номенклатура;
				НоваяСтрока.Характеристика	= НоменклатураСоответствия.Характеристика;
				НоваяСтрока.Партия			= ?(ЗначениеЗаполнено(НоменклатураСоответствия.Партия), НоменклатураСоответствия.Партия, Неопределено);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеПоШтрихкодамEAN.ШтрихкодEAN КАК ШтрихкодEAN,
	|	ДанныеПоШтрихкодамEAN.ПреобразованныйШтрихкод КАК ПреобразованныйШтрихкод,
	|	ДанныеПоШтрихкодамEAN.Номенклатура КАК Номенклатура,
	|	ДанныеПоШтрихкодамEAN.ПредставлениеНоменклатуры КАК ПредставлениеНоменклатуры,
	|	ДанныеПоШтрихкодамEAN.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ДанныеПоШтрихкодамEAN
	|ИЗ
	|	&ДанныеПоШтрихкодамEAN КАК ДанныеПоШтрихкодамEAN
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоШтрихкодам.Штрихкод КАК Штрихкод,
	|	ДанныеПоШтрихкодам.Номенклатура КАК Номенклатура,
	|	ДанныеПоШтрихкодам.Характеристика КАК Характеристика,
	|	ДанныеПоШтрихкодам.Партия КАК Партия
	|ПОМЕСТИТЬ ДанныеПоШтрихкодам
	|ИЗ
	|	&ДанныеПоШтрихкодам КАК ДанныеПоШтрихкодам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПоШтрихкодам.Номенклатура КАК Номенклатура,
	|	ДанныеПоШтрихкодам.Характеристика КАК Характеристика,
	|	ДанныеПоШтрихкодам.Партия КАК Серия,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	ПРЕДСТАВЛЕНИЕ(ДанныеПоШтрихкодам.Номенклатура) КАК ПредставлениеНоменклатуры,
	|	ДанныеПоШтрихкодамEAN.ШтрихкодEAN КАК ШтрихкодEAN,
	|	ДанныеПоШтрихкодам.Номенклатура.ВидПродукцииИС КАК ВидПродукции,
	|	(НЕ ДанныеПоШтрихкодам.Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка))
	|			ИЛИ (НЕ ДанныеПоШтрихкодам.Номенклатура.ВидАлкогольнойПродукции = ЗНАЧЕНИЕ(Справочник.ВидыАлкогольнойПродукции.ПустаяСсылка)
	|				И ДанныеПоШтрихкодам.Номенклатура.ВидАлкогольнойПродукции.Маркируемый) КАК МаркируемаяПродукция,
	|	0 КАК Коэффициент,
	|	ЛОЖЬ КАК ТребуетсяОбработкаШтрихкода,
	|	НЕОПРЕДЕЛЕНО КАК ДанныеШтрихкода
	|ИЗ
	|	ДанныеПоШтрихкодамEAN КАК ДанныеПоШтрихкодамEAN
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоШтрихкодам КАК ДанныеПоШтрихкодам
	|		ПО ДанныеПоШтрихкодамEAN.ПреобразованныйШтрихкод = ДанныеПоШтрихкодам.Штрихкод";
	
	ОпределениеМаркируемаяПродукция = ИнтеграцияИСУНФ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса("ДанныеПоШтрихкодам.Номенклатура");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОпределениеПризнакаМаркируемаяПродукция", ОпределениеМаркируемаяПродукция);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеПоШтрихкодамEAN", ДанныеПоШтрихкодамEAN);
	Запрос.УстановитьПараметр("ДанныеПоШтрихкодам", ДанныеПоШтрихкодам);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеПоШтрихкодамEAN.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДанныеПоШтрихкодамEAN.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре необходимо реализовать заполнение колонки Штрихкод на основании заполненных колонок Номенклатура и Характеристика.
//
// Параметры:
//  ДанныеПоШтрихкодамEAN - ТаблицаЗначений - содержит колонки:
//   * Номенклатура   - ОпределяемыйТип.Номенклатура               - входящий.
//   * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - входящий.
//   * Штрихкод       - Строка                                     - исходящий.
Процедура ЗаполнитьШтрихкоды(ДанныеПоШтрихкодам, ИмяКолонкиЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ДанныеПоШтрихкодам);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ Входящие
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Входящие.Номенклатура КАК Номенклатура,
	|	Входящие.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод
	|ИЗ
	|	Входящие КАК Входящие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО (ШтрихкодыНоменклатуры.Номенклатура = Входящие.Номенклатура)
	|			И (ШтрихкодыНоменклатуры.Характеристика = Входящие.Характеристика)
	|
	|СГРУППИРОВАТЬ ПО
	|	Входящие.Номенклатура,
	|	Входящие.Характеристика";
	
	НоменклатураВДокументахСервер.ПреобразоватьТекстЗапросаРегистрШтрихкодыНоменклатуры(Запрос.Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ИсходныеСтроки = ДанныеПоШтрихкодам.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Выборка.Номенклатура, Выборка.Характеристика));
		Для Каждого ЗаполняемаяСтрока Из ИсходныеСтроки Цикл
			ЗаполняемаяСтрока[ИмяКолонкиЗаполнения] = Выборка.Штрихкод;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// В процедуре необходимо реализовать проверку необходимости выбора серии для номенклатуры.
// 
// Параметры:
//  ДанныеДляРасчетаСерии  - Структура - Данные для расчета серий.
//  ПараметрыУказанияСерий - Структура - Параметры указания серий 
//  ТребуетсяВыбор         - Булево - исходящий, признак необходимости выбора серии
// 	(ПараметрыСканирования.ПараметрыУказанияСерий).
//
Процедура ПриОпределинииНеобходимостиВыбораСерии(ДанныеДляРасчетаСерии, ПараметрыУказанияСерий, ТребуетсяВыбор) Экспорт
	
	Если ДанныеДляРасчетаСерии.Свойство("Номенклатура") И ЗначениеЗаполнено(ДанныеДляРасчетаСерии.Номенклатура) Тогда
		ТребуетсяВыбор = ДанныеДляРасчетаСерии.Номенклатура.ИспользоватьПартии И ДанныеДляРасчетаСерии.Номенклатура.ПроверятьЗаполнениеПартий;
	Иначе
		ТребуетсяВыбор = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПодборПродукцииМОТППереопределяемый

// Возвращает через второй параметр признак наличия табачной продукции.
//
// Параметры:
//  Коллекция             - ДанныеФормыКоллекция - ТЧ с товарами.
//  ЕстьТабачнаяПродукция - Булево - Исходящий, признак наличия табачной продукции.
Процедура ЕстьТабачнаяПродукцияВКоллекции(Коллекция, ЕстьТабачнаяПродукция) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТовары", Коллекция.Выгрузить(, "Номенклатура"));

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВремТаблТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьТабачнаяПродукция
	|ИЗ
	|	ВремТаблТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТабачнаяПродукция";
	Результат = Запрос.Выполнить();
	
	ЕстьТабачнаяПродукция = НЕ Результат.Пустой();
	
КонецПроцедуры

// Возвращает через второй параметр таблицу товаров документа.
//
// Параметры:
//  Контекст             - УправляемаяФорма, ДокументСсылка - контекст определения типа документа.
//  ТаблицаТабачнойПродукции - ТаблицаЗначений - Исходящий, таблица с товарами документа.
Процедура ПриОпределенииТабачнойПродукцииДокумента(Контекст, ТаблицаТабачнойПродукции) Экспорт
	
	ТаблицаТабачнойПродукции = ТаблицаТабачнойПродукции();
	
	Если ИнтеграцияМОТПУНФКлиентСервер.ЭтоДокументПриобретения(Контекст) Тогда
		ВыборкаТабачнойПродукции = ВыборкаТабачнойПродукцииПриобретениеТоваровУслуг(Контекст);
		Пока ВыборкаТабачнойПродукции.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаТабачнойПродукции.Добавить(), ВыборкаТабачнойПродукции);
		КонецЦикла;
	ИначеЕсли ИнтеграцияМОТПУНФКлиентСервер.ЭтоДокументРеализации(Контекст) Тогда
		ВыборкаТабачнойПродукции = ВыборкаТабачнойПродукцииРеализацияТоваровУслуг(Контекст);
		Пока ВыборкаТабачнойПродукции.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаТабачнойПродукции.Добавить(), ВыборкаТабачнойПродукции);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Предназначена для реализации функциональности по отражению результатов проверки и подбора в документе, из которого
// была вызвана соответствующая форма.
// 
// Параметры:
//  ПараметрыОкончанияСканирования - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора).
Процедура ОтразитьРезультатыСканированияВДокументе(ПараметрыОкончанияСканирования) Экспорт
	
	ТипПроверяемогоДокумента = ТипЗнч(ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
	
	Если ТипПроверяемогоДокумента = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		
		ОтразитьРезультатыПроверкиИПодбораВДокументеПоступления(ПараметрыОкончанияСканирования);
		
	ИначеЕсли ТипПроверяемогоДокумента = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		
		ОтразитьРезультатыПроверкиИПодбораВИсходящемДокументе(ПараметрыОкончанияСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция, ТаблицаЗначений - таблица для заполнения.
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ХарактеристикиИспользуются", Ложь);
	СтруктураРеквизитов.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		СтруктураРеквизитов.ХарактеристикиИспользуются = СтрокаТЧ.Номенклатура.ИспользоватьХарактеристики;
		СтруктураРеквизитов.ТипНоменклатуры = СтрокаТЧ.Номенклатура.ТипНоменклатуры;
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураРеквизитов);
	КонецЦикла;
	
КонецПроцедуры

// Определяет параметры указания серий для товаров, указанных в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма с товарами, для которой необходимо определить параметры указания серий.
//  ПараметрыУказанияСерий - Структура - заполняемые параметры указания серий, состав полей структуры задается в функции
//                                       НоменклатураКлиентСервер.ПараметрыУказанияСерий.
Процедура ЗаполнитьПараметрыУказанияСерий(Форма, ПараметрыУказанияСерий) Экспорт
	
	ПараметрыУказанияСерий = ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта                  = Форма.ИмяФормы;
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтотОбъект";
	
	ПараметрыУказанияСерий.ИмяТЧТовары       = "ПодобраннаяМаркируемаяПродукция";
	ПараметрыУказанияСерий.ИмяТЧСерии        = "ПодобраннаяМаркируемаяПродукция";
	ПараметрыУказанияСерий.ИмяПоляСклад      = "Склад";
	ПараметрыУказанияСерий.ИмяПоляКоличество = "Количество";
	
	ПараметрыУказанияСерий.ИменаПолейДополнительные.Добавить("КоличествоПодобрано");

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьПараметрыУказанияСерийВиртуальнаяАгрегацияУпаковокИСМП(Объект) Экспорт
	
	ПараметрыУказанияСерий = ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта                  = Объект.ИмяФормы;
	ПараметрыУказанияСерий.ИмяИсточникаЗначенийВФормеОбъекта = "ЭтотОбъект";
	
	ПараметрыУказанияСерий.ИмяТЧТовары       = "СоставУпаковки";
	ПараметрыУказанияСерий.ИмяТЧСерии        = "СоставУпаковки";
	ПараметрыУказанияСерий.ИмяПоляСклад      = "Склад";
	ПараметрыУказанияСерий.ИмяПоляКоличество = "Количество";
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры = Истина;
	КонецЕсли;
	
	ПараметрыУказанияСерий.Дата = ТекущаяДатаСеанса();
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

Процедура ЗаполнитьСтатусыУказанияСерий(Форма, ПараметрыУказанияСерий) Экспорт
	
	Если Не ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		
		Для Каждого СтрокаТЧ Из Форма[ПараметрыУказанияСерий.ИмяТЧТовары] Цикл
			СтрокаТЧ.СтатусУказанияСерий = 0;
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Форма[ПараметрыУказанияСерий.ИмяТЧТовары] Цикл
		
		Если Не СтрокаТЧ.Номенклатура.ИспользоватьПартии Тогда
			СтрокаТЧ.СтатусУказанияСерий = 0;
		Иначе
			СтрокаТЧ.СтатусУказанияСерий = 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает через параметр наличие права на добавление элементов справочника СерииНоменклатуры
//
// Параметры:
//  ПравоДобавлениеСерий - Булево - исходящий, наличие права на добавление.
Процедура ОпределитьПравоДобавлениеСерий(ПравоДобавлениеСерий) Экспорт
	
	ПравоДобавлениеСерий = ПравоДоступа("Добавление", Метаданные.Справочники.ПартииНоменклатуры);
	
КонецПроцедуры

// Заполняет специфику интеграции формы проверки и подбора в конкретную форму.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой настраиваются параметры интеграции.
//  ПараметрыИнтеграции - (См.ПроверкаИПодборПродукцииМОТП.ПараметрыИнтеграцииФормыПроверкиИПодбора).
Процедура ПриОпределенииПараметровИнтеграцииФормыПроверкиИПодбора(Форма, ПараметрыИнтеграции, ВидПродукции) Экспорт
	
	ЭтоРасходнаяНакладная = СтрНачинаетсяС(Форма.ИмяФормы, "Документ.РасходнаяНакладная");
	
	ПараметрыИнтеграции.ИспользоватьБезМаркируемойПродукции = ЭтоРасходнаяНакладная;
	ПараметрыИнтеграции.БлокироватьТабличнуюЧастьТоварыПриПроверке = Истина;
	ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена = Истина;
	ПараметрыИнтеграции.ИспользоватьСтатусПроверкиПодбораДокумента = Истина;
	ПараметрыИнтеграции.ИнформацияДляПользователяОБлокировке = НСтр("ru = 'Редактирование запрещено. Проводится проверка табачной продукции'");
	ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора = Ложь;
	ПараметрыИнтеграции.ИмяПоследующегоЭлементаФормы = "Запасы";
	ПараметрыИнтеграции.ИмяСледующейКолонки = "ЗапасыКоличество";
	ПараметрыИнтеграции.ИмяТабличнойЧастиТовары = "Запасы";
	ПараметрыИнтеграции.ИмяРодительскойГруппыФормы = "ГруппаЗапасы";
	ПараметрыИнтеграции.ИмяЭлементаФормыТовары = "Запасы";
	ПараметрыИнтеграции.ИмяТабличнойЧастиСерии = "";
	
	Если ИнтеграцияИСМПУНФКлиентСервер.ЭтоДокументПоНаименованию(Форма, "РасходнаяНакладная") Тогда
	
		ПараметрыИнтеграции.ИмяРодительскойГруппыФормы                 = "ГруппаЗапасы";
		ПараметрыИнтеграции.РазмещатьЭлементыИнтерфейса                = Истина;
		ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора  = Истина;
		ПараметрыИнтеграции.ИспользоватьБезМаркируемойПродукции        = Истина;
		ПараметрыИнтеграции.БлокироватьТабличнуюЧастьТоварыПриПроверке = Ложь;
		ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена        = Ложь;
		ПараметрыИнтеграции.ЕстьПравоИзменение                         = ПравоДоступа("Изменение", Форма.Объект.Ссылка.Метаданные());
		
	ИначеЕсли ИнтеграцияИСМПУНФКлиентСервер.ЭтоДокументПоНаименованию(Форма, "ПриходнаяНакладная") Тогда
		
		ПараметрыИнтеграции.ИмяРодительскойГруппыФормы                 = "ГруппаЗапасы";
		ПараметрыИнтеграции.РазмещатьЭлементыИнтерфейса                = Истина;
		ПараметрыИнтеграции.ЕстьПравоИзменение                         = ПравоДоступа("Изменение", Форма.Объект.Ссылка.Метаданные());
		ПараметрыИнтеграции.ЭтоДокументПриобретения                    = Истина;
		ПараметрыИнтеграции.ЕстьЭлектронныйДокумент                    = ЭлектронноеВзаимодействиеИСМП.ДокументСвязанСЭлектронным(Форма.Объект.Ссылка);
		ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора  = Истина;
		ПараметрыИнтеграции.БлокироватьТабличнуюЧастьТоварыПриПроверке = ПараметрыИнтеграции.ЕстьЭлектронныйДокумент;
		ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена        = ПараметрыИнтеграции.ЕстьЭлектронныйДокумент;
		
	ИначеЕсли ИнтеграцияИСМПУНФКлиентСервер.ЭтоДокументПоНаименованию(Форма, "ЗаказПоставщику") Тогда
		
		ПараметрыИнтеграции.ИмяРодительскойГруппыФормы                 = "ГруппаЗапасы";
		ПараметрыИнтеграции.РазмещатьЭлементыИнтерфейса                = Ложь;
		ПараметрыИнтеграции.ЕстьПравоИзменение                         = ПравоДоступа("Изменение", Форма.Объект.Ссылка.Метаданные());
		ПараметрыИнтеграции.ЭтоДокументПриобретения                    = Ложь;
		ПараметрыИнтеграции.ЕстьЭлектронныйДокумент                    = Ложь;
		ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора  = Ложь;
		ПараметрыИнтеграции.БлокироватьТабличнуюЧастьТоварыПриПроверке = Ложь;
		ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена        = Ложь;
		ПараметрыИнтеграции.ИспользоватьСтатусПроверкиПодбораДокумента = Ложь;
		
	ИначеЕсли ИнтеграцияИСМПУНФКлиентСервер.ЭтоДокументПоНаименованию(Форма, "ЗаказНаПроизводство") Тогда
		
		ПараметрыИнтеграции.ИмяТабличнойЧастиТовары                    = "Продукция";
		ПараметрыИнтеграции.ИмяЭлементаФормыТовары                     = "Продукция";
		ПараметрыИнтеграции.ИмяПоследующегоЭлементаФормы               = "Продукция";
		ПараметрыИнтеграции.ИмяРодительскойГруппыФормы                 = "ТЧпродукция";
		ПараметрыИнтеграции.ИмяСледующейКолонки                        = "ПродукцияКоличество";
		ПараметрыИнтеграции.РазмещатьЭлементыИнтерфейса                = Ложь;
		ПараметрыИнтеграции.ЕстьПравоИзменение                         = ПравоДоступа("Изменение", Форма.Объект.Ссылка.Метаданные());
		ПараметрыИнтеграции.ЭтоДокументПриобретения                    = Ложь;
		ПараметрыИнтеграции.ЕстьЭлектронныйДокумент                    = Ложь;
		ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора  = Ложь;
		ПараметрыИнтеграции.БлокироватьТабличнуюЧастьТоварыПриПроверке = Ложь;
		ПараметрыИнтеграции.ИспользоватьСтатусПроверкаЗавершена        = Ложь;
		ПараметрыИнтеграции.ИспользоватьСтатусПроверкиПодбораДокумента = Ложь;
		
	ИначеЕсли СтрНачинаетсяС(Форма.ИмяФормы,"Документ.ЧекККМ.Форма.ФормаДокумента_РМК")
		Или СтрНачинаетсяС(Форма.ИмяФормы,"Документ.ЧекККМ.Форма.ФормаДокумента")
		Или СтрНачинаетсяС(Форма.ИмяФормы,"Документ.ЧекККМВозврат.Форма.ФормаДокумента") Тогда
		
		ПараметрыИнтеграции.ИспользоватьКолонкуСтатусаПроверкиПодбора  = Истина;
		ПараметрыИнтеграции.ИспользоватьСтатусПроверкиПодбораДокумента = Ложь;
		ПараметрыИнтеграции.ИмяТабличнойЧастиШтрихкодыУпаковок         = "АкцизныеМарки";
		ПараметрыИнтеграции.ИмяКолонкиШтрихкодУпаковки                 = "АкцизнаяМарка";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтеграцияИСМППереопределяемый

// Заполняет переданную таблицу данные из ТЧ документа.
// 
// Параметры:
// 	Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
// 	ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//
Процедура СформироватьТаблицуТабачнойПродукцииДокумента(Документ, ТаблицаПродукции) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА Запасы.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ Запасы.Партия
	|	КОНЕЦ КАК Серия,
	|	Запасы.Количество КАК Количество
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&Запасы КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабличнаяЧасть КАК ТабличнаяЧасть
	|		ПО СправочникНоменклатура.Ссылка = ТабличнаяЧасть.Номенклатура
	|			И (СправочникНоменклатура.ТабачнаяПродукция)");
	Запрос.УстановитьПараметр("Запасы", Документ.Запасы.Выгрузить());
	
	ТаблицаПродукции = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронноеВзаимодействиеМОТППереопределяемый

Процедура ПроверитьМаркируемуюПродукциюДокумента(Ссылка, Отказ) Экспорт
	
	ТипДокумента = ТипЗнч(Ссылка);
	
	Если (ТипДокумента = Тип("ДокументСсылка.РасходнаяНакладная") И НЕ СуществуетОтгрузкаТоваровИСМПВведеннаяНаОснованииДокумента(Ссылка))
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
		Отказ = Отказ ИЛИ НЕ ЭлектронноеВзаимодействиеИСМП.ДанныеДокументаСоответствуютДаннымУпаковок(Ссылка);
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеМОТППереопределяемый

// В процедуре необходимо реализовать заполнение таблицы "ОстаткиМаркируемойПродукции". На основании данных таблицы
// будет происходить контроль остатков, если в параметрах сканирования будет заполнено свойство 
// "ОперацияКонтроляАкцизныхМарок" значением  "Продажа" или "Возврат". Первая продажа или возврат контролю не подлежит.
// Если сформирован документ продажи - контроля выполнено не будет, даже если по данным таблицы
// "ОстаткиМаркируемойПродукции" марки нет в наличии. Повторно выполнить продажу той же марки система не даст.
// Если процедура не будет заполнена - никакого контроля выполняться не будет.
// 
// Параметры:
//  ОстаткиМаркируемойПродукции - (См. ШтрихкодированиеМОТП.ИнициализацияТаблицыПроверкиОстатков).
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования).
Процедура ПриОпределенииОстатковМаркируемойПродукции(ОстаткиМаркируемойПродукции, ПараметрыСканирования) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаркируемаяПродукция.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	МаркируемаяПродукция.Доступно КАК Доступно
	|ПОМЕСТИТЬ ВТМаркируемаяПродукция
	|ИЗ
	|	&МаркируемаяПродукция КАК МаркируемаяПродукция
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ШтрихкодУпаковки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧекККМАкцизныеМарки.АкцизнаяМарка КАК ШтрихкодУпаковки,
	|	-1 КАК Доступно
	|ПОМЕСТИТЬ ДанныеДокументов
	|ИЗ
	|	ВТМаркируемаяПродукция КАК ВТМаркируемаяПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМ.АкцизныеМарки КАК ЧекККМАкцизныеМарки
	|		ПО ВТМаркируемаяПродукция.ШтрихкодУпаковки = ЧекККМАкцизныеМарки.АкцизнаяМарка
	|ГДЕ
	|	ЧекККМАкцизныеМарки.Ссылка.Организация = &Организация
	|	И ЧекККМАкцизныеМарки.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЧекККМВозвратАкцизныеМарки.АкцизнаяМарка,
	|	1
	|ИЗ
	|	ВТМаркируемаяПродукция КАК ВТМаркируемаяПродукция
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.АкцизныеМарки КАК ЧекККМВозвратАкцизныеМарки
	|		ПО ВТМаркируемаяПродукция.ШтрихкодУпаковки = ЧекККМВозвратАкцизныеМарки.АкцизнаяМарка
	|ГДЕ
	|	ЧекККМВозвратАкцизныеМарки.Ссылка.Организация = &Организация
	|	И ЧекККМВозвратАкцизныеМарки.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТМаркируемаяПродукция.ШтрихкодУпаковки,
	|	ВТМаркируемаяПродукция.Доступно
	|ИЗ
	|	ВТМаркируемаяПродукция КАК ВТМаркируемаяПродукция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	СУММА(ДанныеДокументов.Доступно) КАК Доступно
	|ИЗ
	|	ДанныеДокументов КАК ДанныеДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокументов.ШтрихкодУпаковки";
	
	Запрос.УстановитьПараметр("Организация",          ПараметрыСканирования.Организация);
	Запрос.УстановитьПараметр("МаркируемаяПродукция", ОстаткиМаркируемойПродукции);
	
	ОстаткиМаркируемойПродукции = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Заполняет код маркировки после добавления товаров в чек ККМ
// через команду 'Акцизные марки'
Процедура ЗаполнитьКодыМаркировкиВЗапасах(Запасы, Штрихкоды) Экспорт
	
	ИспользованныеШтрихкоды = Новый Массив;
	
	Для Каждого СтрокаЗапаса Из Запасы Цикл
		Для Каждого СтрокаШтрихкода Из Штрихкоды Цикл
			
			Если ИспользованныеШтрихкоды.Найти(СтрокаШтрихкода.Штрихкод) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ШтрихкодУпаковки = СтрокаШтрихкода.ШтрихкодУпаковки;
			Если ШтрихкодУпаковки.Номенклатура = СтрокаЗапаса.Номенклатура
				И ШтрихкодУпаковки.Характеристика = СтрокаЗапаса.Характеристика
				И ПартияРавнаСерии(ШтрихкодУпаковки.Серия, СтрокаЗапаса.Партия)
				И КоличествоШтрихкодовСоответствует(СтрокаЗапаса.Количество, ШтрихкодУпаковки.Количество) Тогда
				
				СтрокаЗапаса.КодМаркировки = СтрокаШтрихкода.Штрихкод;
				ИспользованныеШтрихкоды.Добавить(СтрокаШтрихкода.Штрихкод);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьКешШтрихкодовУпаковок(Форма, ОбновлениеТаблицыТоваров = Ложь) Экспорт
	
	ПараметрыИнтеграцииФормыПроверки = ПроверкаИПодборПродукцииМОТП.ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма);
	
	Если НЕ ПараметрыИнтеграцииФормыПроверки.ИспользоватьКолонкуСтатусаПроверкиПодбора Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ПараметрыИнтеграцииФормыПроверки.ИмяРеквизитаФормыОбъект;
	ТабличнаяЧастьТовары = Форма[Объект][ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиТовары];
	
	ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧастьТовары);
	
	Для Каждого СтрокаТовары Из Форма.ДанныеШтрихкодовУпаковокГосИС Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.Серия) Тогда
			СтрокаТовары.Серия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Партия");
	СтруктураПоискаМОТП = Новый Структура("Номенклатура,Характеристика,Серия");
	
	Если ОбновлениеТаблицыТоваров Тогда
		ТабличнаяЧастьШтрихкоды = Форма[Объект][ПараметрыИнтеграцииФормыПроверки.ИмяТабличнойЧастиШтрихкодыУпаковок];
		УдалитьСвязанныеШтрихкодыУпаковок = Новый Соответствие;
		УдалитьСтрокиШтрихкодов = Новый Массив;
		// Удалились товары
		Для Каждого СтрокаТовары Из Форма.ДанныеШтрихкодовУпаковокГосИС Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТовары.Количество() = 0 Тогда
				Для Каждого ЭлементСписка Из СтрокаТовары.ШтрихкодыУпаковок Цикл
					УдалитьСвязанныеШтрихкодыУпаковок.Вставить(ЭлементСписка.Значение, Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		Если (УдалитьСвязанныеШтрихкодыУпаковок.Количество()) Тогда
			// Удалим все упаковки верхнего уровня где они есть из ТЧ
			Для Каждого СтрокаШтрихкоды Из ТабличнаяЧастьШтрихкоды Цикл
				Если УдалитьСвязанныеШтрихкодыУпаковок.Получить(СтрокаШтрихкоды.ШтрихкодУпаковки)=Истина Тогда
					УдалитьСтрокиШтрихкодов.Добавить(СтрокаШтрихкоды);
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаУдалить Из УдалитьСтрокиШтрихкодов Цикл
				ТабличнаяЧастьШтрихкоды.Удалить(СтрокаУдалить);
			КонецЦикла;
			ПроверкаИПодборПродукцииМОТП.ЗаполнитьКешШтрихкодовУпаковок(Форма);
		КонецЕсли;
		
	КонецЕсли;
	 
	Для Каждого СтрокаТовары Из ТабличнаяЧастьТовары Цикл
		Если СтрокаТовары.МаркируемаяПродукцияГосИС Тогда
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
			ЗаполнитьЗначенияСвойств(СтруктураПоискаМОТП, СтрокаТовары);
			СтруктураПоискаМОТП.Серия = СтрокаТовары.Партия;
			СтрокиКеша = Форма.ДанныеШтрихкодовУпаковокГосИС.НайтиСтроки(СтруктураПоискаМОТП);
			СтрокиТовары = ТабличнаяЧастьТовары.НайтиСтроки(СтруктураПоиска);
			КоличествоПоКлючу = 0;
			Для Каждого СтрокаПоКлючу Из СтрокиТовары Цикл
				КоличествоПоКлючу = КоличествоПоКлючу + СтрокаПоКлючу.Количество;
			КонецЦикла;
			Если СтрокиКеша.Количество() = 0 Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			ИначеЕсли КоличествоПоКлючу = СтрокиКеша[0].Количество Тогда
				СтрокаТовары.СтатусПроверкиГосИС = 1;
			Иначе
				СтрокаТовары.СтатусПроверкиГосИС = 2;
			КонецЕсли;
		Иначе
			СтрокаТовары.СтатусПроверкиГосИС = 0;
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

// Заполняет переданную таблицу данные из ТЧ документа.
// Не заменяет пустую ссылку партии на неопределено.
// Параметры:
// 	Документ - ДокументСсылка - Документ из ТЧ которого будет происходить заполнение.
// 	ТаблицаПродукции - ТаблицаЗначений - Таблица для заполнения данными из документа.
//
Процедура СформироватьТаблицуТабачнойПродукцииДокумента_Партия(Документ, ТаблицаПродукции) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Запасы.Номенклатура КАК Номенклатура,
	|	Запасы.Характеристика КАК Характеристика,
	|	Запасы.Партия КАК Серия,
	|	Запасы.Количество КАК Количество
	|ПОМЕСТИТЬ ТабличнаяЧасть
	|ИЗ
	|	&Запасы КАК Запасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабличнаяЧасть КАК ТабличнаяЧасть
	|		ПО СправочникНоменклатура.Ссылка = ТабличнаяЧасть.Номенклатура
	|			И (СправочникНоменклатура.ТабачнаяПродукция)");
	Запрос.УстановитьПараметр("Запасы", Документ.Запасы.Выгрузить());
	
	ТаблицаПродукции = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОповеститьОНенайденныхШтрихкодах(НеизвестныеШтрихкоды)
	
	Для Каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа)
	
	Для Каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначения.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

Функция КоличествоШтрихкодовСоответствует(КоличествоТоваров, КоличествоШтрихкодов)
	
	Если КоличествоШтрихкодов = 0 И КоличествоТоваров = 1 Тогда
		Возврат Истина;
	Иначе
		Возврат КоличествоШтрихкодов = КоличествоТоваров;
	КонецЕсли;
	
КонецФункции

Функция ПартияРавнаСерии(Серия, Партия)
	
	Если Серия = Неопределено Тогда
		СерияДляСравнения = Справочники.ПартииНоменклатуры.ПустаяСсылка();
	Иначе
		СерияДляСравнения = Серия;
	КонецЕсли;
	
	Возврат Партия = СерияДляСравнения;
	
КонецФункции

Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрокаТовары, СтруктураДанные)
	
	НоваяСтрокаТовары.Сумма = (НоваяСтрокаТовары.Цена*НоваяСтрокаТовары.Количество);
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаТовары.СтавкаНДС);
	
	НоваяСтрокаТовары.СуммаНДС = ?(СтруктураДанные.СуммаВключаетНДС,
								   НоваяСтрокаТовары.Сумма - (НоваяСтрокаТовары.Сумма) / ((СтавкаНДС + 100) / 100),
								   НоваяСтрокаТовары.Сумма * СтавкаНДС / 100);
									  
	НоваяСтрокаТовары.Всего = НоваяСтрокаТовары.Сумма + ?(СтруктураДанные.СуммаВключаетНДС, 0, НоваяСтрокаТовары.СуммаНДС);
	
КонецПроцедуры

Процедура ЗаполнитьПризнакМаркируемаяПродукцияГосИС(ТабличнаяЧасть)
	
	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если СтрокаТабличнойЧасти.МаркируемаяПродукцияГосИС Тогда
			СтрокаТабличнойЧасти.СтатусПроверкиГосИС = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Структура параметров указания серий, возвращаемая соответствующей процедурой модуля менеджера документа (обработки).
// Содержит свойства:
//
// ОБЯЗАТЕЛЬНЫЕ:
//	ИспользоватьСерииНоменклатуры - признак, нужно ли в документе заполнять статусы указания серий 
//	ПоляСвязиСерий - массив с именами реквизитов ТЧ Товары и ТЧ Серии, по которым устанавливается
//					 связь между табличными частями (поля связи "Номенклатура" и "Характеристика" 
//					 присутствуют всегда, их отдельно указывать не нужно)
//	СкладскиеОперации - массив значений ПеречислениеСсылка.СкладскиеОперации - складские операции, оформляемые документом
//	ПолноеИмяОбъекта - Строка - полное имя объекта. Например, Документ.РеализацияТоваровУслуг.
//	
//
// НЕОБЯЗАТЕЛЬНЫЕ:
//	ТолькоПросмотр - признак того, что серии в документе можно только просматривать (значение по умолчанию ЛОЖЬ)
//	ТоварВШапке - признак, что параметры указания серий определены для товара в шапке (иначе - для товара в ТЧ) (значение по умолчанию ЛОЖЬ)
//	БлокироватьДанныеФормы - признак того, что перед открытием форму указания серий, нужно заблокировать форму документа (значение по умолчанию ИСТИНА)
//								если ТолькоПросмотр = Истина, то данные формы не блокируются.
//
//	ИмяТЧТовары - имя табличной части со списком товаров (значение по умолчанию - "Товары")
//	ИмяТЧСерии - имя табличной части со списком серий (значение по умолчанию - "Серии")
//	ИмяПоляКоличество - имя поля в ТЧ "Товары", в котором пользователь редактирует количество (значение по умолчанию - "КоличествоУпаковок")
//	ИмяПоляСклад     - имя реквизита склада (значение по умолчанию - "Склад")
//	ИмяПоляПомещение - имя реквизита помещения, если не задано, значит в документе нет помещений
//	ИмяПоляДокументаРаспоряжения - Строка - если серии указываются в расходном ордере, то в этом параметре записывается имя поля распоряжения на отгрузку.
//											если серии указываются в накладной на поступление, то в этом параметре записывается имя поле распоряжения на 
//												поступление.
//											Значение поля используются для отображения остатков в формах.
//
//	ЭтоОрдер - признак того, что документ является ордером (значение по умолчанию ЛОЖЬ)
//	ЭтоЗаказ - признак того, что документ является заказом (значение по умолчанию ЛОЖЬ)
//	ЭтоНакладная - признак того, что документ является накладной (значение по умолчанию ЛОЖЬ).
//
//	ТолькоСерииДляСебестоимости - нужно указывать только серии, по которым ведется учет себестоимости (значение по умолчанию ЛОЖЬ)
//	ПланированиеОтгрузки - использование параметра политики указания серий "УказыватьПриПланированииОтгрузки" (значение по умолчанию ЛОЖЬ)
//	ПланированиеОтбора   - использование параметра политики указания серий "УказыватьПриПланированииОтбора" (значение по умолчанию ЛОЖЬ)
//	ПроверкаОтбора       - на адресном складе перед проверкой должны быть заполнены все серии, по которым ведется учет остатков
//	ФактОтбора - использование параметра политики указания серий "УказыватьПоФактуОтбора" (значение по умолчанию ЛОЖЬ)
//	ПодготовкаОрдера - параметр указывает, что ордер находится в статусе, когда происходит подготовка ордера и указание серий не обязательна (значение по умолчанию ЛОЖЬ)
//	ИменаПолейСтатусУказанияСерий - Массив - если в объекте несколько полей со статусом указания серий, то нужно добавить их имена в этот массив (значение по умолчанию пустой массив)
//	ИменаПолейДляОпределенияРаспоряжения - Массив - имена полей для определение распоряжения, по которому отображаются остатки в форме подбора серий
//													имена полей табличной части указываются в формате Товары_ДокументРезерваСерий (значение по умолчанию пустой массив)
//	ИспользоватьАдресноеХранение - Булево -  на складе, по которому оформлен документ, используется адресное хранение (значение по умолчанию ЛОЖЬ)
//	ИмяИсточникаЗначенийВФормеОбъекта - Строка - значение по умолчанию "Объект", если данные хранятся в реквизитах формы, то нужно указать "ЭтоФорма"
//	ОтборПроверяемыхСтрок
//	ТолькоСерииСУчетомОстатков - Булево - необходимо указывать серии только тогда, когда по ним ведется учет остатков. (значение по умолчанию - ЛОЖЬ)
//	ОсобеннаяПроверкаСтатусовУказанияСерий - Булево - признак, что в модуле менеджера объявлена процедура ТекстЗапросаПроверкиЗаполненияСерий(ПараметрыУказанияСерий)(значение по умолчанию - ЛОЖЬ)
//	ПараметрыЗапроса - Структура - содержит параметры запроса, используемые в функции ТекстЗапросаЗаполненияСтатусовУказанияСерий.
//	СерииПриПланированииОтгрузкиУказываютсяВТЧСерии - Булево - значение по умолчанию - ЛОЖЬ.
//
// Возвращаемое значение:
//	Структура.
//
Функция ПараметрыУказанияСерий() Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИспользоватьСерииНоменклатуры",Ложь);
	СтруктураПараметров.Вставить("УчитыватьСебестоимостьПоСериям",Ложь);
	СтруктураПараметров.Вставить("СкладскиеОперации",Новый Массив); 
	СтруктураПараметров.Вставить("ПоляСвязи", Новый Массив);
	СтруктураПараметров.Вставить("ПолноеИмяОбъекта", "");
	
	СтруктураПараметров.Вставить("ТолькоПросмотр",Ложь);
	СтруктураПараметров.Вставить("ТоварВШапке",Ложь);
	СтруктураПараметров.Вставить("БлокироватьДанныеФормы",Истина);
	СтруктураПараметров.Вставить("ИмяТЧТовары","Товары");
	СтруктураПараметров.Вставить("ИмяТЧСерии","Серии");
	СтруктураПараметров.Вставить("ИмяПоляКоличество","Количество");
	СтруктураПараметров.Вставить("ИмяПоляСклад","Склад");
	СтруктураПараметров.Вставить("ИмяПоляСкладОтправитель",Неопределено);
	СтруктураПараметров.Вставить("ИмяПоляСкладПолучатель",Неопределено);
	СтруктураПараметров.Вставить("ИмяПоляПомещение",Неопределено);
	СтруктураПараметров.Вставить("ЭтоОрдер",Ложь);
	СтруктураПараметров.Вставить("ЭтоЗаказ",Ложь);      
	СтруктураПараметров.Вставить("ЭтоНакладная",Ложь);
	СтруктураПараметров.Вставить("ТолькоСерииДляСебестоимости",Ложь);
	СтруктураПараметров.Вставить("ПланированиеОтгрузки",Ложь);
	СтруктураПараметров.Вставить("ПланированиеОтбора",Ложь);
	СтруктураПараметров.Вставить("ПроверкаОтбора",Ложь);
	СтруктураПараметров.Вставить("ФактОтбора",Ложь);                                    
	СтруктураПараметров.Вставить("ПодготовкаОрдера",Ложь);
	СтруктураПараметров.Вставить("РегистрироватьСерии", Истина);
	СтруктураПараметров.Вставить("Дата",Дата(1,1,1));
	СтруктураПараметров.Вставить("ИменаПолейСтатусУказанияСерий",Новый Массив);
	СтруктураПараметров.Вставить("ИменаПолейДляОпределенияРаспоряжения",Новый Массив);
	СтруктураПараметров.Вставить("ИменаПолейДополнительные",Новый Массив);
	СтруктураПараметров.Вставить("ИспользоватьАдресноеХранение",Ложь);
	СтруктураПараметров.Вставить("ИмяИсточникаЗначенийВФормеОбъекта","Объект");
	СтруктураПараметров.Вставить("ОтборПроверяемыхСтрок", Неопределено);
	СтруктураПараметров.Вставить("ТолькоСерииСУчетомОстатков", Ложь);             
	СтруктураПараметров.Вставить("ОсобеннаяПроверкаСтатусовУказанияСерий", Ложь);
	СтруктураПараметров.Вставить("НужноОкруглятьКоличество", Истина);
	СтруктураПараметров.Вставить("ПараметрыЗапроса", Новый Структура);
	СтруктураПараметров.Вставить("СерииПриПланированииОтгрузкиУказываютсяВТЧСерии", Ложь);
	СтруктураПараметров.Вставить("ИспользуютсяТоварныеМеста", Ложь);
	СтруктураПараметров.Вставить("СерииМогутУказыватьсяВТаблицеУточнений", Ложь);
	
	СтруктураПараметров.Вставить("ОперацияДокумента", Неопределено);
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Переносит результат проверки и подбора табачной продукции в исходящий документ.
//   Общая схема:
//    * Обновляет табличную часть "Штрихкоды упаковок" актуальными штрихкодами упаковок табачной продукции,
//    * Обновляет табличную часть "Запасы" актуальной табачной продукцией,
//    * Перезаписывает документ.
//   Недостача табачной продукции списывается с первых найденных товарных строк с тем же ключом
//     (номенклатура / характеристика / партия).
//   Излишки прибавляются к первой найденной строке с тем же ключом, а если ее нет в документе - строка добавляется
//     с параметрами заполнения по умолчанию для документа.
//
// Параметры:
//   ПараметрыОкончанияСканирования - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
//
Процедура ОтразитьРезультатыПроверкиИПодбораВИсходящемДокументе(ПараметрыОкончанияСканирования)
	
	ДокументОбъект = ПараметрыОкончанияСканирования.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(
		ДокументОбъект,
		ПараметрыОкончанияСканирования.ТаблицаШтрихкодовВерхнегоУровня,
		ПараметрыОкончанияСканирования.ВидПродукцииИС);
	
	ТаблицаТабачнойПродукции = ПараметрыОкончанияСканирования.ТаблицаПодобраннойПровереннойПродукции;

	Запрос = Новый Запрос;
	ТаблицаТовары = ДокументОбъект.Запасы.Выгрузить();
	
	Запрос.УстановитьПараметр("Товары", ТаблицаТовары);

	Запрос.УстановитьПараметр("Подобрано", ТаблицаТабачнойПродукции);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Партия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Подобрано.Номенклатура КАК Номенклатура,
	|	Подобрано.Характеристика КАК Характеристика,
	|	Подобрано.Серия КАК Серия,
	|	Подобрано.КоличествоПодобрано КАК Количество
	|ПОМЕСТИТЬ Подобрано
	|ИЗ
	|	&Подобрано КАК Подобрано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Партия,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ ТоварыСПризнакомТабачнаяПродукция
	|ИЗ
	|	Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = Товары.Номенклатура)
	|			И НЕ СправочникНоменклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫБОР
	|		КОГДА Товары.Серия = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|		ИНАЧЕ ЕСТЬNULL(Товары.Серия, ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка))
	|	КОНЕЦ,
	|	-Товары.Количество
	|ИЗ
	|	Подобрано КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Партия КАК Партия,
	|	СУММА(Товары.Количество) КАК Недостача
	|ИЗ
	|	ТоварыСПризнакомТабачнаяПродукция КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Партия
	|
	|ИМЕЮЩИЕ
	|	СУММА(Товары.Количество) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Недостача УБЫВ";
	
	ВыборкаРасхождения = Запрос.Выполнить().Выбрать();
	Если ВыборкаРасхождения.Количество() = 0 Тогда
		
		Если ДокументОбъект.Проведен Тогда
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			КонецПопытки;
			
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	КлючПоиска      = "Номенклатура, Характеристика, Партия";

	ТаблицаТовары.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Индексы.Добавить(КлючПоиска);
	
	СтруктураПоиска = Новый Структура(КлючПоиска);
	
	Пока ВыборкаРасхождения.Следующий() Цикл
		
		Недостача = ВыборкаРасхождения.Недостача;

		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаРасхождения);
		
		СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		Если Недостача>0 И СтрокиТовары.Количество() = 0 Тогда
			СтруктураПоиска.Партия = Справочники.ПартииНоменклатуры.ПустаяСсылка();
			СтрокиТовары = ТаблицаТовары.НайтиСтроки(СтруктураПоиска);
		КонецЕсли;
		
		Если Недостача>0 Тогда
			Для Каждого СтрокаТаблицыТовары Из СтрокиТовары Цикл
				
				Списать = СтрокаТаблицыТовары.Количество;
				Списать = Мин(Списать, Недостача);
				
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Списать;
				Недостача = Недостача - Списать;
				СтрокаТаблицыТовары.Удалить = СтрокаТаблицыТовары.Количество = 0;
				
				Если Не СтрокаТаблицыТовары.Удалить Тогда
					РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицыТовары, Новый Структура("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС));
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокиТовары.Количество() > 0 Тогда
				
				СтрокаТаблицыТовары = СтрокиТовары[0];
				СтрокаТаблицыТовары.Количество = СтрокаТаблицыТовары.Количество - Недостача;
				РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТаблицыТовары, Новый Структура("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС));
				
			Иначе
				
				НоваяСтрокаТовары = ТаблицаТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтруктураПоиска);
				НоваяСтрокаТовары.Количество = - Недостача;
				НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ДокументОбъект, "Запасы", НоваяСтрокаТовары);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаТовары = ТаблицаТовары.Скопировать(Новый Структура("Удалить", Ложь));
	
	ДокументОбъект.Запасы.Загрузить(ТаблицаТовары);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	
КонецПроцедуры

// Переносит результат проверки и подбора табачной продукции во входящий документ.
//   Общая схема:
//    * Заполняет серии номенклатуры в документе, при необходимости создавая их,
//    * При использовании актов расхождений - создает акт, иначе
//    * Обновляет табличные части "Запасы" и "Штрихкоды упаковок" актуальной табачной продукцией,
//    * Перезаписывает документ.
//
// Параметры:
//   ПараметрыОкончанияСканирования - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
//
Процедура ОтразитьРезультатыПроверкиИПодбораВДокументеПоступления(ПараметрыОкончанияСканирования)
	ДокументОбъект = ПараметрыОкончанияСканирования.ПроверяемыйДокумент.ПолучитьОбъект();
	
	Если Не ПараметрыОкончанияСканирования.СоздаватьАктОРасхождениях Тогда
		
		ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияСканирования.ТаблицаШтрихкодовВерхнегоУровня);
		
		ПровереннаяИПодобраннаяПродукция = ПараметрыОкончанияСканирования.ТаблицаПодобраннойПровереннойПродукции;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПодобраннаяПродукция.Номенклатура        КАК Номенклатура,
		|	ПодобраннаяПродукция.Характеристика      КАК Характеристика,
		|	ПодобраннаяПродукция.Серия               КАК Серия, 
		|	ПодобраннаяПродукция.Количество          КАК Количество,
		|	ПодобраннаяПродукция.КоличествоПодобрано КАК КоличествоПодобрано
		|ПОМЕСТИТЬ ПодобраннаяПродукция
		|ИЗ
		|	&ПодобраннаяПродукция КАК ПодобраннаяПродукция
		|;
		|///////////////////////////////////////////////////////////////////////////1
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПодобраннаяПродукция.Номенклатура               КАК Номенклатура,
		|	ПодобраннаяПродукция.Характеристика             КАК Характеристика,
		|	ПодобраннаяПродукция.Серия						КАК Серия,
		|	СУММА(ПодобраннаяПродукция.КоличествоПодобрано) КАК КоличествоПодобрано
		|ИЗ
		|	ПодобраннаяПродукция КАК ПодобраннаяПродукция
		|СГРУППИРОВАТЬ ПО
		|	ПодобраннаяПродукция.Номенклатура,
		|	ПодобраннаяПродукция.Характеристика,
		|	ПодобраннаяПродукция.Серия
		|;
		|///////////////////////////////////////////////////////////////////////////2
		|";
		
		Запрос.УстановитьПараметр("ПроверяемыйДокумент",  ПараметрыОкончанияСканирования.ПроверяемыйДокумент);
		Запрос.УстановитьПараметр("ПодобраннаяПродукция", ПровереннаяИПодобраннаяПродукция);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ПровереннаяПродукцияГруппированная = Результат[1].Выгрузить();
		
		Если ДокументОбъект.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке Тогда
			Склад = ДокументОбъект.СтруктурнаяЕдиница;
		ИначеЕсли ДокументОбъект.Запасы.Количество() > 0 Тогда
			Склад = ДокументОбъект.Запасы[0].СтруктурнаяЕдиница;
		КонецЕсли;
		
		Для Каждого СтрокаПодобраннойПродукции Из ПровереннаяПродукцияГруппированная Цикл
			
			ПараметрыПоискаПоДокументу = Новый Структура;
			ПараметрыПоискаПоДокументу.Вставить("Номенклатура",			СтрокаПодобраннойПродукции.Номенклатура);
			ПараметрыПоискаПоДокументу.Вставить("Характеристика",		СтрокаПодобраннойПродукции.Характеристика);
			ПараметрыПоискаПоДокументу.Вставить("Партия",				?(ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Серия),
																		СтрокаПодобраннойПродукции.Серия,
																		Справочники.ПартииНоменклатуры.ПустаяСсылка()));
			
			НайденныеСтрокиДокумента = ДокументОбъект.Запасы.НайтиСтроки(ПараметрыПоискаПоДокументу);
			
			Если НайденныеСтрокиДокумента.Количество() > 0 Тогда
				
				РаспределитьПодобранноеНаСуществующиеСтроки(ДокументОбъект,
															СтрокаПодобраннойПродукции,
															НайденныеСтрокиДокумента);
				
			Иначе
				
				ДобавитьНовуюСтрокуМаркированнойПродукции(ДокументОбъект,
														  СтрокаПодобраннойПродукции,
														  Склад);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОчиститьСтрокиСНулевымКоличеством(ДокументОбъект);
		
	КонецЕсли;
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура РаспределитьПодобранноеНаСуществующиеСтроки(ДокументОбъект, СтрокаПодобраннойПродукции, НайденныеСтрокиДокумента)
	
	КоличествоКРаспределению = СтрокаПодобраннойПродукции.КоличествоПодобрано;
		
	НомерСтроки = 1;
	КоличествоСтрок = НайденныеСтрокиДокумента.Количество();
	
	Для Каждого НайденнаяСтрокаДокумента Из НайденныеСтрокиДокумента Цикл
		
		ОбрабатываемаяСтрока = ДокументОбъект.Запасы[НайденнаяСтрокаДокумента.НомерСтроки-1];
		
		Если ОбрабатываемаяСтрока.Количество < КоличествоКРаспределению Тогда
			
			Если КоличествоСтрок <> НомерСтроки Тогда
				КоличествоКРаспределению = КоличествоКРаспределению - ОбрабатываемаяСтрока.Количество;
			Иначе
				ОбрабатываемаяСтрока.Количество = КоличествоКРаспределению;
				КоличествоКРаспределению = 0;
			
				РассчитатьСуммуВСтрокеТабличнойЧасти(ОбрабатываемаяСтрока, Новый Структура("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС));
				
			КонецЕсли;
			
		Иначе
			
			ОбрабатываемаяСтрока.Количество = КоличествоКРаспределению;
			КоличествоКРаспределению = 0;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ОбрабатываемаяСтрока, Новый Структура("СуммаВключаетНДС", ДокументОбъект.СуммаВключаетНДС));
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовуюСтрокуМаркированнойПродукции(ДокументОбъект, СтрокаПодобраннойПродукции, Склад)
	
	НоваяСтрока = ДокументОбъект.Запасы.Добавить();

	НоваяСтрока.Номенклатура		= СтрокаПодобраннойПродукции.Номенклатура;
	НоваяСтрока.Характеристика		= СтрокаПодобраннойПродукции.Характеристика;
	НоваяСтрока.Партия				= СтрокаПодобраннойПродукции.Серия;
	НоваяСтрока.Количество			= СтрокаПодобраннойПродукции.КоличествоПодобрано;
	НоваяСтрока.СтруктурнаяЕдиница	= Склад;
	
	НоменклатураВДокументахСервер.ЗаполнитьДанныеВСтрокеТабличнойЧасти(ДокументОбъект, "Запасы", НоваяСтрока)
	
КонецПроцедуры

Процедура ОчиститьСтрокиСНулевымКоличеством(ДокументОбъект)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Количество", 0);
	
	НайденныеСтроки = ДокументОбъект.Запасы.НайтиСтроки(ПараметрыПоиска);
	
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		ДокументОбъект.Запасы.Удалить(НайденнаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Переносит таблицу штрихкодов верхнего уровня в документ
//   Удаляет из табличной части "ШтрихкодыУпаковок" документа отсутствующие табачные (содержащие внутри хотя бы 1 шт 
//   табачной продукции) штрихкоды верхнего уровня
//   Добавляет в табличную часть "ШтрихкодыУпаковок" документа отсутствующие там фактические штрихкоды
//   Не меняет прочие (например алкогольные) штрихкоды
// 
// Параметры:
//  ДокументОбъект                  - ДокументОбъект  - документ для изменения
//  ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - таблица с колонкой "ШтрихкодУпаковки" (фактические)
Процедура ОтразитьИзмененияТабличнойЧастиШтрихкодыУпаковок(ДокументОбъект, ТаблицаШтрихкодовВерхнегоУровня, ВидПродукцииИС) Экспорт
	
	ШтрихкодыДляПроверки = ДокументОбъект.ШтрихкодыУпаковок.Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	Для Каждого ЭлементВНаличии Из ТаблицаШтрихкодовВерхнегоУровня Цикл
		ЭлементМассива = ШтрихкодыДляПроверки.Найти(ЭлементВНаличии.ШтрихкодУпаковки);
		Если ЭлементМассива<>Неопределено Тогда
			ШтрихкодыДляПроверки.Удалить(ЭлементМассива);
		Иначе
			ДокументОбъект.ШтрихкодыУпаковок.Добавить().ШтрихкодУпаковки = ЭлементВНаличии.ШтрихкодУпаковки;
		КонецЕсли;
	КонецЦикла;
	
	ШтрихкодыСодержащиеМаркируемуюПродукцию = ИнтеграцияИСУНФ.ШтрихкодыСодержащиеВидыПродукции(ШтрихкодыДляПроверки, ВидПродукцииИС);
	
	Для Каждого ЭлементОтсутствует Из ШтрихкодыСодержащиеМаркируемуюПродукцию Цикл
		ДокументОбъект.ШтрихкодыУпаковок.Удалить(ДокументОбъект.ШтрихкодыУпаковок.Найти(ЭлементОтсутствует, "ШтрихкодУпаковки"));
	КонецЦикла;
	
КонецПроцедуры

Функция ШтрихкодыСодержащиеТабачнуюПродукцию(Знач ШтрихкодыДляПроверки)
	
	Если НЕ ШтрихкодыДляПроверки.Количество() Тогда
		Возврат ШтрихкодыДляПроверки;
	КонецЕсли;
	
	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|	    (&ПроверятьТабачную И ШтрихкодыУпаковок.Номенклатура.ТабачнаяПродукция)
	|		КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		Запрос.УстановитьПараметр("ПроверятьТабачную", Истина);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ВыборкаТабачнойПродукцииПриобретениеТоваровУслуг(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	ПриходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	ПриходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ПриходнаяНакладнаяЗапасы.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ПриходнаяНакладнаяЗапасы.Партия
	|	КОНЕЦ КАК Серия,
	|	ПриходнаяНакладнаяЗапасы.Количество КАК Количество
	|ИЗ
	|	Документ.ПриходнаяНакладная.Запасы КАК ПриходнаяНакладнаяЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПриходнаяНакладнаяЗапасы.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ПриходнаяНакладнаяЗапасы.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ПриходнаяНакладнаяЗапасы.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И (СправочникНоменклатура.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.ЕдиницаИзмерения)
	|ГДЕ
	|	ПриходнаяНакладнаяЗапасы.Ссылка = &ДокументСсылка
	|	И СправочникНоменклатура.ТабачнаяПродукция";
	
	НоменклатураВДокументахСервер.ПреобразоватьТекстЗапросаРегистрШтрихкодыНоменклатуры(Запрос.Текст);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выбрать();
	
КонецФункции

Функция ВыборкаТабачнойПродукцииРеализацияТоваровУслуг(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК GTIN,
	|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА РасходнаяНакладнаяЗапасы.Партия = ЗНАЧЕНИЕ(Справочник.ПартииНоменклатуры.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РасходнаяНакладнаяЗапасы.Партия
	|	КОНЕЦ КАК Серия,
	|	РасходнаяНакладнаяЗапасы.Количество КАК Количество
	|ИЗ
	|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО РасходнаяНакладнаяЗапасы.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО РасходнаяНакладнаяЗапасы.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И РасходнаяНакладнаяЗапасы.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И (СправочникНоменклатура.ЕдиницаИзмерения = ШтрихкодыНоменклатуры.ЕдиницаИзмерения)
	|ГДЕ
	|	РасходнаяНакладнаяЗапасы.Ссылка = &ДокументСсылка
	|	И СправочникНоменклатура.ТабачнаяПродукция";
	
	НоменклатураВДокументахСервер.ПреобразоватьТекстЗапросаРегистрШтрихкодыНоменклатуры(Запрос.Текст);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выбрать();
	
КонецФункции

Функция ТаблицаТабачнойПродукции()
	
	ТаблицаТабачнойПродукции = Новый ТаблицаЗначений();
	ТаблицаТабачнойПродукции.Колонки.Добавить("GTIN",			Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ТаблицаТабачнойПродукции.Колонки.Добавить("Номенклатура",	Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТабачнойПродукции.Колонки.Добавить("Характеристика",	Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаТабачнойПродукции.Колонки.Добавить("Серия",			Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаТабачнойПродукции.Колонки.Добавить("Количество",		Новый ОписаниеТипов("Число"));
	
	Возврат ТаблицаТабачнойПродукции;
	
КонецФункции

Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	// Преобразование весовых штрихкодов.
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		РегистрыСведений.ШтрихкодыНоменклатуры.ПреобразоватьВесовойШтрихкод(ТекШтрихкод);
		
	КонецЦикла;
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодам(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		ДанныеШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() <> 0 Тогда
			
			СтруктураДанныеНоменклатуры = Новый Структура();
			СтруктураДанныеНоменклатуры.Вставить("ВидОперации", СтруктураДанные.ВидОперации);
			СтруктураДанныеНоменклатуры.Вставить("Организация", СтруктураДанные.Организация);
			СтруктураДанныеНоменклатуры.Вставить("Номенклатура", ДанныеШтрихкода.Номенклатура);
			СтруктураДанныеНоменклатуры.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
			СтруктураДанныеНоменклатуры.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
			СтруктураДанныеНоменклатуры.Вставить("НалогообложениеНДС", СтруктураДанные.НалогообложениеНДС);
			Если ЗначениеЗаполнено(СтруктураДанные.ВидЦен) Тогда
				СтруктураДанныеНоменклатуры.Вставить("ДатаОбработки", СтруктураДанные.Дата);
				СтруктураДанныеНоменклатуры.Вставить("ВалютаДокумента", СтруктураДанные.ВалютаДокумента);
				СтруктураДанныеНоменклатуры.Вставить("СуммаВключаетНДС", СтруктураДанные.СуммаВключаетНДС);
				СтруктураДанныеНоменклатуры.Вставить("ВидЦен", СтруктураДанные.ВидЦен);
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
					И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
				Иначе
					СтруктураДанныеНоменклатуры.Вставить("Коэффициент", 1);
				КонецЕсли;
				СтруктураДанныеНоменклатуры.Вставить("ВидСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки);
			КонецЕсли;
			
			// ДисконтныеКарты
			СтруктураДанныеНоменклатуры.Вставить("ПроцентСкидкиПоДисконтнойКарте", СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
			СтруктураДанныеНоменклатуры.Вставить("ДисконтнаяКарта", СтруктураДанные.ДисконтнаяКарта);
			// Конец ДисконтныеКарты
			
			ДанныеШтрихкода.Вставить("СтруктураДанныеНоменклатуры", ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанныеНоменклатуры));
			
			Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
				ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
	Для каждого парам Из СтруктураДанные.ПараметрыВыбора Цикл
		Если парам.Имя = "Отбор.ТипНоменклатуры" Тогда
			Если ТипЗнч(парам.Значение)=Тип("ФиксированныйМассив") Тогда
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", парам.Значение);
			Иначе
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(парам.Значение);
				СтруктураДанные.Вставить("ОтборТипНоменклатуры", МассивТипов);
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

Функция ЭтоПродажа(ВидОперации)
	
	Возврат ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю");
	
КонецФункции

Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	// Наборы
	Если НЕ СтруктураДанные.Свойство("ЕдиницаИзмерения") Тогда
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаИзмерения);
	КонецЕсли; 
	Если НЕ СтруктураДанные.Свойство("Коэффициент") Тогда
		Если ТипЗнч(СтруктураДанные.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			СтруктураДанные.Вставить("Коэффициент", СтруктураДанные.ЕдиницаИзмерения.Коэффициент);
		Иначе
			СтруктураДанные.Вставить("Коэффициент", 1);
		КонецЕсли; 
	КонецЕсли;
	// Конец Наборы
	
	СтруктураДанные.Вставить("СтранаПроисхождения", СтруктураДанные.Номенклатура.СтранаПроисхождения);
	СтруктураДанные.Вставить("ЭтоЗапас", (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"))
									ИЛИ (СтруктураДанные.Номенклатура.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.ПодарочныйСертификат")));
	
	Если СтруктураДанные.Свойство("НалогообложениеНДС") 
		И НЕ СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ОблагаетсяНДС") Тогда
		
		Если СтруктураДанные.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС") Тогда
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС());
		Иначе
			СтруктураДанные.Вставить("СтавкаНДС", УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль());
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураДанные.Номенклатура.ВидСтавкиНДС) Тогда
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Номенклатура.ВидСтавкиНДС));
	Иначе
		СтруктураДанные.Вставить("СтавкаНДС", Справочники.СтавкиНДС.СтавкаНДС(СтруктураДанные.Организация.ВидСтавкиНДСПоУмолчанию));
	КонецЕсли;
	
	// Характеристики
	СтруктураДанные.Вставить("ИспользоватьХарактеристики",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",Ложь);
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьХарактеристики
		Тогда
		ЗначенияПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура);
		
		Если Не ЗначенияПоУмолчанию = Неопределено
			Тогда
			ХарактеристикаПоУмолчанию = ЗначенияПоУмолчанию;
		КонецЕсли;
		
		Если НЕ СтруктураДанные.Свойство("Характеристика") Тогда
			СтруктураДанные.Вставить("Характеристика",ХарактеристикаПоУмолчанию);
		Иначе
			СтруктураДанные.Характеристика = ?(ЗначениеЗаполнено(СтруктураДанные.Характеристика), СтруктураДанные.Характеристика, ХарактеристикаПоУмолчанию);
		КонецЕсли;
		
		СтруктураДанные.Вставить("ИспользоватьХарактеристики",Истина);
		СтруктураДанные.Вставить("ПроверятьЗаполнениеХарактеристики",СтруктураДанные.Номенклатура.ПроверятьЗаполнениеХарактеристики);
	КонецЕсли; 
	// Конец Характеристики
	
	Если СтруктураДанные.Свойство("ВидЦен") Тогда
		Цена = УправлениеНебольшойФирмойСервер.ПолучитьЦенуНоменклатурыПоВидуЦен(СтруктураДанные);
		СтруктураДанные.Вставить("Цена", Цена);
	Иначе
		СтруктураДанные.Вставить("Цена", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ВидСкидкиНаценки") 
		И ЗначениеЗаполнено(СтруктураДанные.ВидСкидкиНаценки) Тогда
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", СтруктураДанные.ВидСкидкиНаценки.Процент);
	Иначе	
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", 0);
	КонецЕсли;
	
	Если СтруктураДанные.Свойство("ПроцентСкидкиПоДисконтнойКарте") 
		И ЗначениеЗаполнено(СтруктураДанные.ДисконтнаяКарта) Тогда
		ТекПроцент = СтруктураДанные.ПроцентСкидкиНаценки;
		СтруктураДанные.Вставить("ПроцентСкидкиНаценки", ТекПроцент + СтруктураДанные.ПроцентСкидкиПоДисконтнойКарте);
	КонецЕсли;
	
	// Серийные номера
	СтруктураДанные.Вставить("ИспользоватьСерийныеНомера", СтруктураДанные.Номенклатура.ИспользоватьСерийныеНомера);
	// Серийные номера
	
	СтруктураДанные.Вставить("ЭтоАлкогольнаяПродукция", СтруктураДанные.Номенклатура.АлкогольнаяПродукция);
	
	СтруктураДанные.Вставить("ВесЕдиницыТовара", СтруктураДанные.Номенклатура.Вес);
	СтруктураДанные.Вставить("ОбъемЕдиницыТовара", СтруктураДанные.Номенклатура.Объем);
	
	СтруктураДанные.Вставить("Склад", СтруктураДанные.Номенклатура.Склад);
	СтруктураДанные.Вставить("Ячейка", СтруктураДанные.Номенклатура.Ячейка);
	
	// Наборы
	Если СтруктураДанные.Свойство("ВидОперации") И ЭтоПродажа(СтруктураДанные.ВидОперации) Тогда
		НаборыСервер.ДобавитьИнформациюОНабореПриПолученииДанныхНоменклатуры(СтруктураДанные);
	Иначе
		СтруктураДанные.Вставить("ЭтоНабор", СтруктураДанные.Номенклатура.ЭтоНабор);
	КонецЕсли; 
	// Конец Наборы
	
	//Партии
	СтруктураДанные.Вставить("ИспользоватьПартии",Ложь);
	СтруктураДанные.Вставить("ПроверятьЗаполнениеПартий",Ложь);
	
	Если НЕ СтруктураДанные.Свойство("Партия") Тогда
		СтруктураДанные.Вставить("Партия", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанные.Номенклатура) И СтруктураДанные.Номенклатура.ИспользоватьПартии
		Тогда
		СтатусПартии = НоменклатураВДокументахСервер.СоответствиеВидаОпреацииИлиХозОперацииСтатусуПартии(, СтруктураДанные.ВидОперации);
		ЗначенияПартииПоУмолчанию = НоменклатураВДокументахСервер.ЗначенияПартийНоменклатурыПоУмолчанию(СтруктураДанные.Номенклатура,СтатусПартии);
		
		ПартияПоУмолчанию = Справочники.ПартииНоменклатуры.ПустаяСсылка();
		
		Если Не ЗначенияПартииПоУмолчанию = Неопределено
			Тогда
			ПартияПоУмолчанию = ЗначенияПартииПоУмолчанию;
		КонецЕсли;
		
		СтруктураДанные.Партия = ?(ЗначениеЗаполнено(СтруктураДанные.Партия), СтруктураДанные.Партия, ПартияПоУмолчанию);
		
		СтруктураДанные.ПроверятьЗаполнениеПартий = СтруктураДанные.Номенклатура.ПроверятьЗаполнениеПартий;
		СтруктураДанные.ИспользоватьПартии = Истина;
	
	КонецЕсли;
	// Конец Партии
	
	Возврат СтруктураДанные;
	
КонецФункции

Функция СуществуетОтгрузкаТоваровИСМПВведеннаяНаОснованииДокумента(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.ОтгрузкаТоваровИСМП) КАК СвязанныйДокументОтгрузкаТоваровИСМП
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&Документ) КАК СвязанныеДокументы
		|ГДЕ
		|	СвязанныеДокументы.Ссылка ССЫЛКА Документ.ОтгрузкаТоваровИСМП";
	
	Запрос.УстановитьПараметр("Документ", Документ);
	
	Результат = НЕ Запрос.Выполнить().Пустой();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти