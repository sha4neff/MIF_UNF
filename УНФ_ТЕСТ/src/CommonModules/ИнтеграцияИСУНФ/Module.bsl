#Область ИнтеграцияИСПереопределяемый

// Заполняет в табличной части служебные реквизиты, например: признак использования характеристик номенклатуры, артикул.
//
// Параметры:
//  Форма - УправляемаяФорма - Форма.
//  ТабличнаяЧасть - ДанныеФормыКоллекция - таблица для заполнения.
//
Процедура ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, ТабличнаяЧасть) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ТабличнаяЧасть.Выгрузить(, "НомерСтроки, Номенклатура");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаТоваров.Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|				ИЛИ ТаблицаТоваров.Номенклатура.АлкогольнаяПродукция
	|					И ТаблицаТоваров.Номенклатура.ВидАлкогольнойПродукции.Маркируемый
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МаркируемаяПродукция,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА НЕ ТаблицаТоваров.Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА ТаблицаТоваров.Номенклатура.ВидПродукцииИС
	|	КОНЕЦ КАК ВидПродукцииИС,
	|	ТаблицаТоваров.Номенклатура.ИспользоватьХарактеристики КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеНоменклатуры = Новый Структура;
		ДанныеНоменклатуры.Вставить("МаркируемаяПродукция",			Выборка.МаркируемаяПродукция);
		ДанныеНоменклатуры.Вставить("ВидПродукцииИС",				Выборка.ВидПродукцииИС);
		ДанныеНоменклатуры.Вставить("ХарактеристикиИспользуются",	Выборка.ХарактеристикиИспользуются);
		
		СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ДанныеНоменклатуры);
		
	КонецЦикла;
	
	ИнтеграцияВЕТИСУНФВызовСервера.ЗаполнитьПризнакиИспользованияХарактеристикВЕТИС(Форма);
	
КонецПроцедуры

// Проверяет заполнение характеристик в таблице значений.
//
// Параметры:
//  ТаблицаТоваров - ТаблицаЗначений - таблица для проверки с колонками: Номенклатура, Характеристика.
//  Отказ - Булево - Истина - характеристики заполнены в требуемых строках, в противном случае - Ложь.
//
Процедура ПроверитьЗаполнениеХарактеристикВТаблицеЗначений(ТаблицаТоваров, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользоватьХарактеристики
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользоватьХарактеристики";

	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров", ТаблицаТоваров);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			Отказ = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В процедуре требуется определить признак использования характеристик 
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования характеристик (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеХарактеристик(Использование, Номенклатура) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		Использование = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики");
	Иначе
		Использование = Номенклатура.ИспользоватьХарактеристики;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется определить признак использования серий
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования серий (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеСерий(Использование, Номенклатура) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		ФОСерии = ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера");
		ФОПартии = ПолучитьФункциональнуюОпцию("ИспользоватьПартии");
		Использование = ФОСерии ИЛИ ФОПартии;
	ИначеЕсли Номенклатура.ПодконтрольнаяПродукцияВЕТИС
		ИЛИ Номенклатура.ТабачнаяПродукция
		ИЛИ Номенклатура.ОбувнаяПродукция Тогда
		Использование = Номенклатура.ИспользоватьПартии;
	ИначеЕсли Номенклатура.ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция Тогда
		Использование = Номенклатура.ИспользоватьСерийныеНомера;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре требуется определить признак использования упаковок для номенклатуры.
//   * для номенклатуры, если передана номенклатура,
//   * в программе, если не передана.
//
// Параметры:
//   Использование - Булево - Признак использования упаковок (для номенклатуры или общий)
//   Номенклатура - ОпределяемыйТип.Номенклатура, Неопределено - Ссылка на элемент номенклатуры.
//
Процедура ИспользованиеУпаковок(Использование, Номенклатура) Экспорт
	
	Использование = ПолучитьФункциональнуюОпцию("УчетВРазличныхЕдиницахИзмерения");
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными из информационной базы.
//
// Параметры:
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  Сведения - Структура - структура с реквизитами организации, которые требуется заполнить,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ЗаполнитьСведенияОбОрганизации(Организация, Сведения, ДатаСведений = Неопределено) Экспорт
	
	Если ДатаСведений = Неопределено Тогда
		ДатаСведений = ТекущаяДатаСеанса();
	КонецЕсли;
	
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Организация, ДатаСведений);
	ЗаполнитьЗначенияСвойств(Сведения, СведенияОбОрганизации);
	
	Если СведенияОбОрганизации.Свойство("ПолноеНаименование") Тогда
		Сведения.Вставить("Наименование", СведенияОбОрганизации.ПолноеНаименование);
	Иначе
		Сведения.Вставить("Наименование", СведенияОбОрганизации.Представление);
	КонецЕсли;
	
	Если Сведения.Свойство("НалоговыйНомерВСтранеРегистрации") Тогда
		Если ТипЗнч(Организация) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если Организация.СтранаРегистрации <> ПредопределенноеЗначение("Справочник.СтраныМира.Россия") Тогда
				Сведения.НалоговыйНомерВСтранеРегистрации = Организация.РегистрационныйНомер;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать заполнение структуры данными ИНН/КПП из информационной базы.
//
// Параметры:
//   Сведения    - Структура - структура с реквизитами организации/контрагента, которые требуется заполнить,
//   Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - ссылка на 
//     собственную организацию или контрагента
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектЕГАИС - ссылка на торговый объект для определения КПП.
//
Процедура ЗаполнитьИННКПППоОрганизацииКонтрагенту(Сведения, Организация, ТорговыйОбъект = Неопределено) Экспорт
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП");
	Сведения.Вставить("ИНН", Реквизиты.ИНН);
	Сведения.Вставить("КПП", Реквизиты.КПП);
	
КонецПроцедуры

// Заполняет представление руководителя организации.
//
// Параметры:
//  ПредставлениеРуководителя - (см. ИнтеграцияИС.ДанныеРуководителяОрганизации) - заполняемая структура представления
//  Организация - ОпределяемыйТип.ОрганизацияКонтрагентГосИС - ссылка на собственную организацию или контрагента,
//  ДатаСведений - Дата - дата, на которую требуется получить информацию.
//
Процедура ОпределитьДанныеРуководителяОрганизации(ПредставлениеРуководителя, Организация, ДатаСведений) Экспорт
	
	Если ТипЗнч(Организация) =  Тип("СправочникСсылка.Организации") Тогда
		
		ДанныеРуководителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ПодписьРуководителя");
		ПредставлениеРуководителя.Вставить("Руководитель", Строка(ДанныеРуководителя.ФизическоеЛицо));
		ПредставлениеРуководителя.Вставить("Должность", Строка(ДанныеРуководителя.Должность));
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации предприятия по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомой организации,
//  КПП - Строка - КПП искомой организации.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС - найденная организация,
//  Неопределено - организация не найдена.
//
Процедура ЗаполнитьОрганизациюПоИННКПП(Организация, ИНН, КПП) Экспорт
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Организации", ИНН, КПП, Организация);
	
КонецПроцедуры

// В процедуре нужно реализовать поиск контрагента по ИНН и/или КПП.
//
// Параметры:
//  ИНН - Строка - ИНН искомого контрагента,
//  КПП - Строка - КПП искомого контрагента.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.ОрганизацияКонтрагентГосИС, ОпределяемыйТип.КонтрагентГосИС - найденный контрагент,
//  Неопределено - контрагент не найден.
//
Процедура ЗаполнитьКонтрагентаПоИННКПП(Контрагент, ИНН, КПП) Экспорт
	
	ИмяСправочника = "Контрагенты";
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП(ИмяСправочника, ИНН, КПП, Контрагент);
	
КонецПроцедуры

// Настраивает подключаемое оборудование в форме,
// устанавливает флаг ИспользоватьПодключаемоеОборудование в форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой необходимо настроить подключаемое оборудование,
//  ПрефиксыЭлементовФормы - Строка - строка имен табличных частей, разделенных запятыми, в которых нужно настроить
//                                    видимость команд.
//
Процедура НастроитьПодключаемоеОборудование(Форма, ПрефиксыЭлементовФормы) Экспорт
	
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	
	Если ЗначениеЗаполнено(ПрефиксыЭлементовФормы) Тогда
		МассивПрефиксыЭлементовФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПрефиксыЭлементовФормы, ",");
	Иначе
		МассивПрефиксыЭлементовФормы = Новый Массив;
		МассивПрефиксыЭлементовФормы.Добавить(ПрефиксыЭлементовФормы);
	КонецЕсли;
	
	Форма.ИспользоватьПодключаемоеОборудование = ИспользоватьПодключаемоеОборудование;
	
	Для Каждого Префикс Из МассивПрефиксыЭлементовФормы Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			Префикс + "ВыгрузитьДанныеВТСД",
			"Видимость",
			ИспользоватьПодключаемоеОборудование);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет параметры интеграции с библиотеками ГосИС по входящему объекту.
// 
// Параметры:
//  ПараметрыИнтеграции - Структура - См. ИнтеграцияИС.ПараметрыИнтеграцииВФорме.
//  ОбъектМетаданных - Метаданные - Метаданные объекта.
//
Процедура ЗаполнитьПараметрыИнтеграцииВФормеПоОбъекту(ПараметрыИнтеграции, ОбъектМетаданных) Экспорт
	
	ОбъектыИнтеграцииВЕТИС = Новый Массив;
	ИнтеграцияВЕТИСПереопределяемый.ЗаполнитьОбъектыМетаданныхИнтеграции(ОбъектыИнтеграцииВЕТИС);
	Если ОбъектыИнтеграцииВЕТИС.Найти(ОбъектМетаданных) <> Неопределено Тогда
		ПараметрыИнтеграции.ИменаПодсистем = "ВетИС";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров возможных получателей печатных форм при отправке по электронной почте.
//
// Параметры:
// 		ПараметрыОтправки - Структура - содержит параметры отправки сформированных печатных форм
// 		ДанныеОбъектовПечати - Массив,Соответствие - данные о печатаемых объектах
// 		КоллекцияПечатныхФорм - ТаблицаЗначений - содержит информацию о формируемых печатных формах.
//
Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм)  Экспорт
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыОтправки(ПараметрыОтправки, ДанныеОбъектовПечати, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// см ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Документ,
	                                           Статус = Неопределено,
	                                           ЕстьОшибкиПроведен = Ложь,
	                                           ЕстьОшибкиСтатус = Ложь,
	                                           МассивДопустимыхСтатусов = Неопределено,
	                                           СоглашениеДоступноВнешнемуПользователю = Неопределено) Экспорт
	
	Если ЕстьОшибкиПроведен Тогда
		ТекстОшибки = НСтр("ru='Документ %Документ% не проведен. Ввод на основании непроведенного документа запрещен.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", Документ);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Возвращаяет представление объекта.
// 
// Параметры:
// 	Представление - Строка - Исходящий параметр со значением представления.
// 	ПараметрОбъект - Строка, Объект - Наименование типа объекта либо сам объект.
//
Процедура УстановитьПредставлениеОбъекта(Представление, ПараметрОбъект) Экспорт
	
	Если ПараметрОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = ?(ТипЗнч(ПараметрОбъект) = Тип("Строка"), Метаданные.НайтиПоПолномуИмени(ПараметрОбъект), ПараметрОбъект);
	
	СтруктураПредставления = Новый Структура("ПредставлениеОбъекта");
	ЗаполнитьЗначенияСвойств(СтруктураПредставления, МетаданныеОбъекта);
	Если Не ПустаяСтрока(СтруктураПредставления.ПредставлениеОбъекта) Тогда
		Представление = СтруктураПредставления.ПредставлениеОбъекта;
	Иначе
		Представление = МетаданныеОбъекта.Представление();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет представление строки номенклатуры.
//
// Параметры:
//   Представление  - Строка                                     - представление для заполнения,
//   Номенклатура   - ОпределяемыйТип.Номенклатура               - ссылка на номенклатуру,
//   Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - ссылка на характеристику номенклатуры,
//   Упаковка       - ОпределяемыйТип.Упаковка                   - ссылка на упаковку.
//   Серия          - ОпределяемыйТип.СерияНоменклатуры          - ссылка на серию номенклатуры.
//
Процедура ЗаполнитьПредставлениеНоменклатуры(Представление, Номенклатура, Характеристика, Упаковка, Серия) Экспорт
	
	Представление = УправлениеНебольшойФирмойСервер.ПолучитьПредставлениеНоменклатурыДляПечати(Номенклатура, Характеристика,, Серия);
	
КонецПроцедуры

// Проверяет наличие права создания контрагента у текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право создания контрагента, Ложь в обратном случае.
//
Процедура ПравоСозданияКонтрагента(ДоступРазрешен) Экспорт
	
	ДоступРазрешен = ПравоДоступа("Добавление", Метаданные.Справочники.Контрагенты);
	
КонецПроцедуры

// См. ОбщийМодуль.ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту()
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Если НастройкиФормы.ИмяФормы = "Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма" Тогда
		Обработки.ГенерацияШтрихкодовУпаковок.ПриОпределенииКомандПодключенныхКОбъекту(Команды);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//   Параметры  - Структура        - выходной, параметры указания серий, состав полей определен в функции
//                                 НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   ТипОбъекта - ОбъектМетаданных - Тип объекта коллекции объектов метаданных.
//   Объект     - Структура        - Структура значений реквизитов объекта, необходимых для заполнения параметров
//                                   указания серий.
//
Процедура ЗаполнитьПараметрыУказанияСерий(Параметры, ТипОбъекта, Объект) Экспорт
	
	Если ТипОбъекта = Метаданные.Документы.ПроизводственнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект)
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ВходящаяТранспортнаяОперацияВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ИнвентаризацияПродукцииВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Документы.ЗапросСкладскогоЖурналаВЕТИС Тогда
		
		Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборТабачнойПродукцииМОТП
		ИЛИ ТипОбъекта = Метаданные.Обработки.ПроверкаИПодборПродукцииИСМП  Тогда
		
		ИнтеграцияМОТПУНФ.ЗаполнитьПараметрыУказанияСерий(Объект, Параметры);
		
	ИначеЕсли ТипОбъекта = Метаданные.Обработки.ВиртуальнаяАгрегацияУпаковокИСМП Тогда
		
		Параметры = ИнтеграцияМОТПУНФ.ЗаполнитьПараметрыУказанияСерийВиртуальнаяАгрегацияУпаковокИСМП(Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры указания серий для товаров, указанных в объекте.
//
// Параметры:
//   Параметры       - Структура - выходной, особенности указания серий в объекте, состав полей определен в функции
//                                 НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//   Объект          - Объект, ДанныеФормыСтруктура - Объект, для формы которого нужно сформировать параметры
//                                 указания серий.
//   МенеджерОбъекта - Менеджер  - Менеджер объекта, для формы которого нужно сформировать параметры указания серий.
//
Процедура ЗаполнитьПараметрыУказанияСерийФормыОбъекта(Параметры, Объект, МенеджерОбъекта) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка") Тогда
		
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ПроизводственнаяОперацияВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийПроизводственнаяОперацияВЕТИС(Объект)
			
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИсходящаяТранспортнаяОперацияВЕТИС(Объект);
			
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВходящаяТранспортнаяОперацияВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийВходящаяТранспортнаяОперацияВЕТИС(Объект);
			
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ИнвентаризацияПродукцииВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийИнвентаризацияПродукцииВЕТИС(Объект);
			
		ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗапросСкладскогоЖурналаВЕТИС") Тогда
			
			Параметры = ИнтеграцияВЕТИСУНФВызовСервера.ПараметрыУказанияСерийЗапросСкладскогоЖурналаВЕТИС(Объект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// В процедуре необходимо сформировать соответствие по коллекции ИНН. Ключ - ИНН, значение - Контрагент.
//
// Параметры:
//  КоллекцияИНН - Массив - Список ИНН.
//  Соответствие - Соответствие - Соответсвие вида:
//   * ИНН
//   * Контрагент
Процедура ЗаполнитьСоответствиеИННКонтрагентам(КоллекцияИНН, Соответствие) Экспорт
	
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Контрагент,
	|	Контрагенты.ИНН КАК ИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН В(&КоллекцияИНН)");
	Запрос.УстановитьПараметр("КоллекцияИНН", КоллекцияИНН);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Соответствие.Вставить(Выборка.ИНН, Выборка.Контрагент);
	КонецЦикла;
	
КонецПроцедуры

// В процедуре требуется определить признак использования видов номенклатуры.
//
// Параметры:
//  Использование - Булево - Признак использования видов номенклатуры в программе.
//
Процедура ИспользованиеВидовНоменклатуры(Использование) Экспорт
	
	Использование = Истина;
	
КонецПроцедуры

// Обрабатывает строку табличной части в соостветствии с переданной структурой действий.
//
// Параметры:
//  СтрокаТабличнойЧасти - Структура, СтрокаТабличнойЧасти, ДокументСтрокаТабличнойЧасти - обрабатываемая строка.
//  СтруктураДействий - структура - структура выполняемых действий.
Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий) Экспорт
	
	ТипСтрокиТабличнойЧасти = ТипЗнч(СтрокаТабличнойЧасти);
	
	Если ТипСтрокиТабличнойЧасти = Тип("Структура") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СкопироватьРекурсивно(СтрокаТабличнойЧасти, Ложь);
	ИначеЕсли ТипСтрокиТабличнойЧасти = Тип("СтрокаТаблицыЗначений") Тогда
		СтрокаТабличнойЧастиСтруктурой = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТабличнойЧасти);
	ИначеЕсли Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти) <> Неопределено Тогда
		СтрокаТабличнойЧастиСтруктурой = Новый Структура();
		ПодстрокиИмени = СтрРазделить(Метаданные.НайтиПоТипу(ТипСтрокиТабличнойЧасти).ПолноеИмя(), ".");
		
		Если ПодстрокиИмени.Количество() = 4 Тогда
			РеквизитыСтроки = Метаданные.Документы[ПодстрокиИмени[1]].ТабличныеЧасти[ПодстрокиИмени[3]].Реквизиты;
			Для Каждого РеквизитСтроки Из РеквизитыСтроки Цикл
				СтрокаТабличнойЧастиСтруктурой.Вставить(РеквизитСтроки.Имя, СтрокаТабличнойЧасти[РеквизитСтроки.Имя]);
			КонецЦикла;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧастиСтруктурой.Вставить("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Запас);
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		Если СтрокаТабличнойЧастиСтруктурой.Количество = 0 Тогда
			СтрокаТабличнойЧастиСтруктурой.КоличествоУпаковок = 0;
		Иначе
			Коэффициент = ?(ТипЗнч(СтрокаТабличнойЧастиСтруктурой.Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения"), СтрокаТабличнойЧастиСтруктурой.Упаковка.Коэффициент, 1);
			Если Коэффициент <> 0 Тогда
				СтрокаТабличнойЧастиСтруктурой.КоличествоУпаковок = СтрокаТабличнойЧастиСтруктурой.Количество / Коэффициент;
			Иначе
				ТекстИсключения = НСтр("ru = 'При попытке пересчета количества в %ЕдИзмерения% превышена допустимая разрядность.'");
				ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ЕдИзмерения%", СтрокаТабличнойЧастиСтруктурой.Упаковка);
				
				СтрокаТабличнойЧастиСтруктурой.Количество = 0;
				СтрокаТабличнойЧастиСтруктурой.КоличествоУпаковок = 0;
				СтрокаТабличнойЧастиСтруктурой.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка");
				
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТабличнойЧастиСтруктурой);
	
КонецПроцедуры

// В функции требуется определить право на регистрацию нового штрихкода для текущего пользователя.
//
// Параметры:
//  ДоступРазрешен - Булево - Истина, если есть право на регистрацию штрихкода. Ложь - в противном случае.
//
Процедура ПравоРегистрацииШтрихкодовНоменклатуры(ДоступРазрешен) Экспорт
	
	ДоступРазрешен = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ШтрихкодыНоменклатуры);
	
КонецПроцедуры

Процедура ПриОпределенииМенеджераОбъектаПоПолномуИмени(МенеджерОбъекта, ПолноеИмя) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	
КонецПроцедуры

Процедура ПриОпределенииМенеджераОбъектаПоСсылке(МенеджерОбъекта, Ссылка) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Ссылка.Метаданные().ПолноеИмя());
	
КонецПроцедуры

// В процедуре нужно реализовать поиск организации в прикладном объекте.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - найденная организация
//  Объект      - Произвольный                - объект в котором производится поиск
//
Процедура ПриОпределенииОрганизацииИзПрикладногоОбъекта(Организация, Объект) Экспорт
	
	Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Организация");
	
КонецПроцедуры

Процедура ПриЗаполненииТекстаЗапросаПризнакаМаркируемаяПродукцияПоНоменклатуре(ТекстЗапроса, ИмяТаблицыНоменклатура, ИмяПоляНоменклатура) Экспорт
	
	ТекстЗапроса = СтрШаблон(
		"ВЫБРАТЬ
		|	Товары.%1 КАК Номенклатура,
		|	%3 КАК Маркируемый
		|ИЗ %2 КАК Товары",
		ИмяПоляНоменклатура,
		ИмяТаблицыНоменклатура,
		ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(
			СтрШаблон("Товары.%1",ИмяПоляНоменклатура)));
	Возврат;
	
КонецПроцедуры
#КонецОбласти

#Область СобытияФормИСПереопределяемый

// Вызывается после записи объекта на сервере.
//
// Параметры:
//  Форма - УправляемаяФорма - источник вызова
Процедура ПослеЗаписиНаСервереФормыПрикладногоОбъекта(Форма) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
		
		МодифицироватьИнициализироватьФормуРМК(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Серверные обработчики БГосИС элементов прикладных форм
//
// Параметры:
//   Форма                   - УправляемаяФорма - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента"
		Или Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
		
		Если Элемент = "Запасы" Тогда
			
			ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека(), Истина);
			ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ПомощникНового" Тогда
		
		Если Элемент = "Назначение" Тогда
			
			Если Форма.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляАкцизныхМарок Тогда
				Форма.ДляЧего = Документы.ЗапросАкцизныхМарокЕГАИС.ПустаяСсылка();
				Форма.Элементы.ДляЧего.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗапросАкцизныхМарокЕГАИС");
				Форма.Элементы.ДляЧего.Видимость = Истина;
			ИначеЕсли Форма.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляШтрихкодовУпаковок Тогда
				Форма.ДляЧего = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
				Форма.Элементы.ДляЧего.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров");
				Форма.Элементы.ДляЧего.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаРедактированияШаблонаЭтикетокИЦенников" Тогда
		
		Если Элемент = "Назначение" Тогда
			
			Если Форма.Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляАкцизныхМарок Тогда
				Если ДополнительныеПараметры.ОчищатьНазначение ИЛИ Форма.Объект.ДляЧего = Неопределено Тогда
					Форма.Объект.ДляЧего = Документы.ЗапросАкцизныхМарокЕГАИС.ПустаяСсылка();
				КонецЕсли;
				Форма.Элементы.ДляЧего.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗапросАкцизныхМарокЕГАИС");
			ИначеЕсли Форма.Объект.Назначение = Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляШтрихкодовУпаковок Тогда
				Если ДополнительныеПараметры.ОчищатьНазначение ИЛИ Форма.Объект.ДляЧего = Неопределено Тогда
					Форма.Объект.ДляЧего = Справочники.ШтрихкодыУпаковокТоваров.ПустаяСсылка();
				КонецЕсли;
				Форма.Элементы.ДляЧего.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров");
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при открытии формы конфигурации.
//   Выполняется определение необходимости встраивания подсистем (с учетом их наличия) в форму.
//
// Параметры:
//   Форма            - УправляемаяФорма - форма конфигурации
//   МодулиИнтеграции - Массив           - используемые модули интеграции
//
Процедура ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиИнтеграции) Экспорт
	
	Модули = Новый Соответствие;
	
	ИмяФормы = Форма.ИмяФормы;
	Если ИмяФормы = "Документ.РасходнаяНакладная.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПриходнаяНакладная.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЗаказПоставщику.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.СборкаЗапасов.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.СписаниеЗапасов.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПересортицаЗапасов.Форма.ФормаДокумента"
		Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
			Модули.Вставить("СобытияФормГИСМ");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяФормы = "Документ.РасходнаяНакладная.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ПриходнаяНакладная.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента"
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК"
		Или ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента" Тогда
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
			Модули.Вставить("СобытияФормИСМП");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ПомощникНового"
		Или ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаРедактированияШаблонаЭтикетокИЦенников" Тогда
			Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции") Тогда
				Модули.Вставить("СобытияФормЕГАИС");
			КонецЕсли;
			Если ПолучитьФункциональнуюОпцию("ВестиУчетТабачнойПродукцииМОТП")
				Или ПолучитьФункциональнуюОпцию("ВестиУчетОбувнойПродукцииИСМП") Тогда
					Модули.Вставить("СобытияФормИСМП");
			КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") 
		И ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура") Тогда
		
		Если ИнтеграцияЕГАИС.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормЕГАИС");
		КонецЕсли;
		
		Если ИнтеграцияВЕТИС.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормВЕТИС");
		КонецЕсли;
		
		Если ИнтеграцияИСМП.ИспользуетсяИнтеграцияВФормеДокументаОснования(Форма, Форма.Объект) Тогда
			Модули.Вставить("СобытияФормИСМП");
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Модули Цикл
		МодулиИнтеграции.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Если Форма.ИмяФормы = "Справочник.ШаблоныЭтикетокИЦенников.Форма.ФормаРедактированияШаблонаЭтикетокИЦенников" Тогда
		
		Форма.Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляШтрихкодовУпаковок);
		Если Форма.ПараметрыИнтеграцииГосИС.Получить("ЕГАИС")<>Неопределено Тогда
			Форма.Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляАкцизныхМарок);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
				Форма.Элементы.Назначение.СписокВыбора.Добавить(Перечисления.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаКодМаркировкиИСМП);
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Документ.РасходнаяНакладная.Форма.ФормаДокумента"
		ИЛИ Форма.ИмяФормы = "Документ.ПриходнаяНакладная.Форма.ФормаДокумента" Тогда
		ИнициализироватьКешТекущейСтроки(Форма, "Запасы");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода по владельцу
//
// Параметры:
//	Форма						- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода				- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымХарактеристики	- Строка			- Путь к данным текущего значения в форме.
//
Процедура УстановитьСвязиПараметровВыбораПоВладельцу(Форма, ИмяПоляВвода, ПутьКДаннымХарактеристики) Экспорт
	
	СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", ПутьКДаннымХарактеристики));
	
	Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- УправляемаяФорма	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к данным текущей номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода, ПутьКДаннымНоменклатуры) Экспорт
	
	Если ИмяПоляВвода = "ТоварыХарактеристика"
		Или ИмяПоляВвода = "Характеристика" Тогда
		
		СвязиПараметровВыбора = ОбщегоНазначения.СкопироватьРекурсивно(
			Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора, Ложь);
		СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", ПутьКДаннымНоменклатуры));
		
		Форма.Элементы[ИмяПоляВвода].СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступомИСПереопределяемый

// Одноименная процедура для заполнения текста органичения подсистемы БСП Управление доступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//  
// Параметры:
// 	МетаданныеОбъекта - Метаданные - метаданные вызывающего объекта.
// 	Ограничение - Структура - Структура ограничения:
// 	 * Текст - Строка - Текст ограничения.
//
Процедура ПриЗаполненииОграниченияДоступа(МетаданныеОбъекта, Ограничение) Экспорт
	
	Если Метаданные.Документы.МаркировкаТоваровИСМП = МетаданныеОбъекта
		Или Метаданные.Документы.ВыводИзОборотаИСМП = МетаданныеОбъекта
		Или Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ = МетаданныеОбъекта
		Или Метаданные.Документы.ПеремаркировкаТоваровИСМП = МетаданныеОбъекта
		Или Метаданные.Документы.СписаниеКодовМаркировкиИСМП = МетаданныеОбъекта Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
		
	ИначеЕсли Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ = МетаданныеОбъекта
		Или Метаданные.РегистрыСведений.НастройкиОбменаСУЗ = МетаданныеОбъекта
		Или Метаданные.РегистрыСведений.ОчередьСообщенийИСМП = МетаданныеОбъекта Тогда
		
		Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодированиеИСПереопределяемый

// В данной процедуре требуется переопределить текст запроса, определяющий свойства маркируемой продукции.
// Номенклатура для запроса лежит во временной таблице "ДанныеШтрихкодовУпаковок". (ДанныеШтрихкодовУпаковок.Номенклатура).
// "ВидПродукции". Поле "Номенклатура" желательно индексировать.
//   Колонки временной таблицы "ДанныеШтрихкодовУпаковок":
//    * Номенклатура   - ОпределяемыйТип.Номенклатура
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры
//    * Серия          - ОпределяемыйТип.СерияНоменклатуры
//   Ожидаемые действия:
//   * Создание временной таблицы "СвойстваМаркируемойПродукции" с колонками:
//     ** Номенклатура         - ОпределяемыйТип.Номенклатура
//     ** МаркируемаяПродукция - Булево
//     ** ВидПродукции         - ПеречислениеСсылка.ВидыПродукцииИС.
// Параметры:
//  ТекстЗапросаСвойстваМаркируемойПродукции - Строка - Переопределяемый текст запроса.
Процедура ПриОпределенииТекстаЗапросаСвойствМаркируемойПродукции(ТекстЗапросаСвойстваМаркируемойПродукции) Экспорт
	
	ТекстЗапросаСвойстваМаркируемойПродукции =
	"ВЫБРАТЬ
	|	ДанныеШтрихкодовУпаковок.Номенклатура КАК Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика КАК Характеристика,
	|	МАКСИМУМ(ЕСТЬNULL(ДанныеШтрихкодовУпаковок.Номенклатура.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
	|			ИЛИ НЕ ДанныеШтрихкодовУпаковок.Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)) КАК МаркируемаяПродукция,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура = НЕОПРЕДЕЛЕНО
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА НЕ ДанныеШтрихкодовУпаковок.Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ВидПродукцииИС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидПродукции
	|ПОМЕСТИТЬ СвойстваМаркируемойПродукции
	|ИЗ
	|	ДанныеШтрихкодовУпаковок КАК ДанныеШтрихкодовУпаковок
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеШтрихкодовУпаковок.Номенклатура,
	|	ДанныеШтрихкодовУпаковок.Характеристика,
	|	ВЫБОР
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура = НЕОПРЕДЕЛЕНО
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ДанныеШтрихкодовУпаковок.Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА НЕ ДанныеШтрихкодовУпаковок.Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ТОГДА ДанныеШтрихкодовУпаковок.Номенклатура.ВидПродукцииИС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";
	
КонецПроцедуры

// В случае учета серий в данной процедуре необходимо реализовать заполнение таблицы значений "ДанныеТаблицыТовары",
// содержащей колонки: "Номенклатура", "Характеристика", "Серия", "Количество". Таблицу необходимо положить во временное
// хранилище, адрес хранилища - в ПараметрыСканирования.ДанныеТаблицыТовары. Если учет серий не ведется - заполнение не требуется.
// 
// Параметры:
//  Форма - УправляемаяФорма - Форма, для которой происходит обработка штрихкодов.
//  ДанныеТаблицыТовары - См. ШтрихкодированиеИС.ИнициализицияТаблицыДанныхДокумента.
//  ПараметрыСканирования - См. ШтрихкодированиеИСКлиент.ПараметрыСканирования.
//  СтандартнаяОбработка - Булево, Ложь - если требуется заполнение таблицы в данной процедуре, Истина - заполнение произойдет
//      по стандартному алгоритму.
Процедура ПриФормированииДанныхТабличнойЧастиТовары(Форма, ДанныеТаблицыТовары, ПараметрыСканирования, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// В этой процедуре при необходимости следует реализовать дополнительные проверки на ошибки данных по штрихкодам.
// 
// Параметры:
//  Форма - УправляемаяФорма - Форма, для которой выполняется обработка штрихкодов.
//  ДанныеПоШтрихкодам - (См. ШтрихкодированиеИС.ИнициализацияДанныхПоШтрихкодам). 
//  ПараметрыСканирования - (См. ШтрихкодированиеИСКлиент.ПараметрыСканирования и ШтрихкодированиеИС.ПараметрыСканирования).
//  ЕстьОшибки - Булево - Истина, если выявлена ошибка.
Процедура ПриПроверкеДанныхПоШтрихкодам(ДанныеПоШтрихкодам, ПараметрыСканирования, ЕстьОшибки) Экспорт
	
	Если ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN.Колонки.Найти("Серия") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаEAN Из ДанныеПоШтрихкодам.ИнформацияПоШтрихкодамEAN Цикл
		Если ЗначениеЗаполнено(СтрокаEAN.Серия) Тогда
			
			Для Каждого КлючИЗначение Из ДанныеПоШтрихкодам.ОбработанныеШтрихкоды Цикл
				Если СтрНайти(КлючИЗначение.Ключ, СтрокаEAN.ШтрихкодEAN) = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(КлючИЗначение.Значение.Серия) Тогда
					Продолжить;
				КонецЕсли;
				
				КлючИЗначение.Значение.Серия = СтрокаEAN.Серия;
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из ДанныеПоШтрихкодам.НеобработанныеШтрихкоды Цикл
				Если СтрНайти(КлючИЗначение.Ключ, СтрокаEAN.ШтрихкодEAN) = 0 Тогда
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(КлючИЗначение.Значение.Серия) Тогда
					Продолжить;
				КонецЕсли;
				
				КлючИЗначение.Значение.Серия = СтрокаEAN.Серия;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Возвращает поля поиска номенклутары (и характеристикик) анализируя признак использования серий.
// 
// Параметры:
// 	ИспользоватьСерии - Булево - Признак использования серий.
// Возвращаемое значение:
// 	Структура - Описание:
//   * Серия - ОпределяемыйТип.СерияНоменклатуры - Пустое значение серии.
//   * Характеристика  - ОпределяемыйТип.Характеристика - Пустое значение характеристики.
//   * Номенклатура - ОпределяемыйТип.Номенклатура - Пустоне значение номенклатуры.
//
Функция ПоляДляПоискаМаркируемойПродукции(ИспользоватьСерии=Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура",   ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
	Результат.Вставить("Характеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));

	Если ИспользоватьСерии Тогда
		Результат.Вставить("Партия", Справочники.ПартииНоменклатуры.ПустаяСсылка());
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Процедура ОпределитьВидПродукцииТекстаЗапроса(ТекстЗапроса, ПутьКПолюНоменклатура = "Номенклатура", ИмяПараметра = "&ОпределениеВидаПродукции") Экспорт
	
	ОпределениеВидаПродукции = СтрШаблон(" ВЫБОР
	|		КОГДА %1 = Неопределено
	|			ТОГДА Неопределено
	|		КОГДА %1.АлкогольнаяПродукция
	|			ТОГДА Значение(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		КОГДА %1.ТабачнаяПродукция
	|			ТОГДА Значение(Перечисление.ВидыПродукцииИС.Табак)
	|		КОГДА %1.ОбувнаяПродукция
	|			ТОГДА Значение(Перечисление.ВидыПродукцииИС.Обувь)
	|		ИНАЧЕ Неопределено
	|	КОНЕЦ ", ПутьКПолюНоменклатура);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ИмяПараметра, ОпределениеВидаПродукции);
	
КонецПроцедуры

Функция ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура) Экспорт
	
	ОпределениеШаблон = "
						|	ЕСТЬNULL(%1.ВидАлкогольнойПродукции.Маркируемый, ЛОЖЬ)
						|	ИЛИ 
						|	ВЫБОР
						|		КОГДА %1.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
						|			ТОГДА ЛОЖЬ
						|		ИНАЧЕ ИСТИНА
						|	КОНЕЦ";
	
	Возврат СтрШаблон(ОпределениеШаблон, ПутьКПолюНоменклатура);
	
КонецФункции

// Добавляет на форму РМК (чека ККМ, чека на возврат) реквизиты ГосИС
//
// Параметры:
//   Форма - УправляемаяФорма - ФормаДокументаРМК
//
Процедура МодифицироватьИнициализироватьФормуРМК(Форма) Экспорт
	
	Если ПроверитьМодификацияФормыВыполнена(Форма) Тогда
		ИнициализироватьФормуРМК(Форма,
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИспользуетсяРегистрацияРозничныхПродажВЕГАИС"),
			ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП"));
		Возврат;
	КонецЕсли;
	
	ЕстьЕГАИС = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	ЕстьИСМП = ИнтеграцияИСМПКлиентСерверПовтИсп.ВестиУчетМаркируемойПродукции();
	
#Область Реквизиты
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Реквизит = Новый РеквизитФормы("АдресСоответствияАкцизныхМарок", Новый ОписаниеТипов("Строка"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ИспользоватьАкцизныеМарки", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ТребуетсяПересчетМарокПослеУдаленияСтрок", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	Реквизит = Новый РеквизитФормы("ДанныеВыбораПоМаркируемойПродукции", Новый ОписаниеТипов);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Если ЕстьЕГАИС Или ЕстьИСМП Тогда
		ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
		ПроверкаИПодборПродукцииИС.ДобавитьТаблицуШтрихкодовУпаковок(Форма, ПараметрыИнтеграцииГосИС, ДобавляемыеРеквизиты);
		ПроверкаИПодборПродукцииИС.ДополнитьТаблицуТоваров(Форма, ПараметрыИнтеграцииГосИС, "Объект.Запасы", ДобавляемыеРеквизиты);
		
		Если ЕстьЕГАИС Тогда
			ПараметрыИнтеграцииГосИС.Вставить(
				Перечисления.ВидыПродукцииИС.Алкогольная,
				ПроверкаИПодборПродукцииИСМП.ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма, Перечисления.ВидыПродукцииИС.Алкогольная));
		КонецЕсли;

		Если ЕстьИСМП Тогда
			Для Каждого ВидПродукцииИС Из ИнтеграцияИСМПКлиентСерверПовтИсп.УчитываемыеВидыМаркируемойПродукции() Цикл
				ПараметрыИнтеграцииГосИС.Вставить(
					ВидПродукцииИС,
					ПроверкаИПодборПродукцииИСМП.ПараметрыИнтеграцииФормыПроверкиИПодбора(Форма, ВидПродукцииИС));
			КонецЦикла;
		КонецЕсли;
		
		Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	КонецЕсли;
	
	Если ЕстьЕГАИС Тогда
		
		Колонка = Новый РеквизитФормы("СопоставлениеАлкогольнаяПродукция", Новый ОписаниеТипов("Строка"), "Объект.Запасы");
		ДобавляемыеРеквизиты.Добавить(Колонка);
		
	КонецЕсли;
	
	Если ЕстьИСМП Тогда
		Реквизит = Новый РеквизитФормы("КонтролироватьСтатусыКодовМаркировкиВРознице", Новый ОписаниеТипов("Булево"));
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
#КонецОбласти
	
	ЭлементыФормы = Форма.Элементы;
	
#Область Команды

	ИмяКомандыАкцизныеМарки = "ПроверитьАкцизныеМарки";
	КомандаФормы = Форма.Команды.Добавить(ИмяКомандыАкцизныеМарки);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьПереопределяемуюКоманду";
	КомандаФормы.Заголовок = НСтр("ru = 'Акцизные марки'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Истина;

	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК" Тогда
		Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.БоковаяПанельКоманд);
		Кнопка.ИмяКоманды				= ИмяКомандыАкцизныеМарки;
		Кнопка.Ширина					= 10;
		Кнопка.Высота					= 4;
		Кнопка.ВысотаЗаголовка			= 2;
		Кнопка.РастягиватьПоВертикали	= Ложь;
		Кнопка.ТолькоВоВсехДействиях	= Ложь;
	ИначеЕсли Форма.ИмяФормы = "Документ.ЧекККМВозврат.Форма.ФормаДокумента" Тогда
		Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.Запасы.КоманднаяПанель);
		Кнопка.ИмяКоманды            = ИмяКомандыАкцизныеМарки;
		Кнопка.ТолькоВоВсехДействиях = Ложь;
	Иначе
		Кнопка = ЭлементыФормы.Добавить(ИмяКомандыАкцизныеМарки, Тип("КнопкаФормы"), ЭлементыФормы.ЗапасыКоманднаяПанельКоманды);
		Кнопка.ИмяКоманды            = ИмяКомандыАкцизныеМарки;
		Кнопка.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;
	
#КонецОбласти
	
#Область Элементы
	
	Если Форма.ИмяФормы = "Документ.ЧекККМ.Форма.ФормаДокумента_РМК" Тогда
		РодительКартинкиНабора = ЭлементыФормы.ГруппаРеквизитов;
	Иначе
		РодительКартинкиНабора = ЭлементыФормы.Запасы;
	КонецЕсли;
	
	ПутьКРеквизиту = "Объект.Запасы.СтатусПроверкиГосИС";
	КолонкаИнтерфейса = Форма.Элементы.Вставить(
		"ЗапасыСтатусПроверкиГосИС",
		Тип("ПолеФормы"),
		РодительКартинкиНабора,
		ЭлементыФормы.ЗапасыКартинкаНабора);
	КолонкаИнтерфейса.ПутьКДанным = ПутьКРеквизиту;
	КолонкаИнтерфейса.Вид = ВидПоляФормы.ПолеКартинки;
	КолонкаИнтерфейса.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	КолонкаИнтерфейса.КартинкаЗначений = БиблиотекаКартинок.МаркируемаяПродукцияТЧ;
	КолонкаИнтерфейса.КартинкаШапки = БиблиотекаКартинок.МаркируемаяПродукцияШапка;
	
#КонецОбласти
	
#Область Инициализация

	ИнициализироватьФормуРМК(Форма, ЕстьЕГАИС, ЕстьИСМП);
	
#КонецОбласти
	
#Область Интерфейс
	
	ЭлементыФормы.ЗапасыСтатусПроверкиГосИС.Видимость = Форма.ИспользоватьАкцизныеМарки;
	ЭлементыФормы.ПроверитьАкцизныеМарки.Видимость    = Форма.ИспользоватьАкцизныеМарки И ЕстьИСМП;
	
	#КонецОбласти

КонецПроцедуры

// Проверяет соответствие количества маркируемой продукции из ТЧ Товары к количеству акцизных марок ТЧ АкцизныеМарки
//
// Параметры:
//   Объект - ДокументОбъект - форма документа для проверки.
//   Отказ  - Булево - Отказ из вызывающего метода.
//   НаДату - Дата - дата для определения обязательности маркировки.
//          - Неопределено - на текущую дату сеанса.
//
Процедура ПроверитьЗаполнениеАкцизныхМарок(Объект, Отказ, НаДату = Неопределено) Экспорт
	
	Ошибки = Неопределено;
	
	ИмяТаблицыАкцизныеМарки = "АкцизныеМарки";
	ПолеТаблицыАкцизныеМарки = "АкцизнаяМарка";
	
	Если НЕ ИнтеграцияИС.ЕстьРеквизитТабЧастиОбъекта(ПолеТаблицыАкцизныеМарки, Объект.Ссылка.Метаданные(), ИмяТаблицыАкцизныеМарки) Тогда
		ИмяТаблицыАкцизныеМарки = "ШтрихкодыУпаковок";
		ПолеТаблицыАкцизныеМарки = "ШтрихкодУпаковки";
	КонецЕсли;
	
	ВидыПродукцииИС = Новый Массив;
	Если НаДату = Неопределено Тогда
		
		Для Каждого ВидПродукцииИС Из ИнтеграцияИСМП.ВидыПродукцииОбязательнойМаркировки() Цикл
			ВидыПродукцииИС.Добавить(ВидПродукцииИС);
		КонецЦикла;
		
	Иначе
		
		Для Каждого ВидПродукцииИС Из ИнтеграцияИСМПВызовСервера.УчитываемыеВидыМаркируемойПродукции(НаДату, Ложь) Цикл
			ВидыПродукцииИС.Добавить(ВидПродукцииИС);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ВидыПродукцииИС.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросМаркируемыхТоваров = Новый Запрос;
	ЗапросМаркируемыхТоваров.УстановитьПараметр("Ссылка", Объект.Запасы.Выгрузить().ВыгрузитьКолонку("Номенклатура")); 
	ЗапросМаркируемыхТоваров.УстановитьПараметр("ВидыПродукцииИС", ВидыПродукцииИС);
	
	ЗапросМаркируемыхТоваров.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&Ссылка)
	|	И Номенклатура.ВидПродукцииИС В (&ВидыПродукцииИС)";
	ПроверяемыеТовары = ЗапросМаркируемыхТоваров.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	МаркированныеТовары = ЭлектронноеВзаимодействиеИСМП.Содержимое(
		Объект[ИмяТаблицыАкцизныеМарки].Выгрузить().ВыгрузитьКолонку(ПолеТаблицыАкцизныеМарки));
	МаркированныеТовары.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	
	Для Каждого СтрокаТовары Из Объект.Запасы Цикл
		ПроверяемСтроку = ПроверяемыеТовары.Найти(СтрокаТовары.Номенклатура);
		Если ПроверяемСтроку<>Неопределено Тогда
			
			ОтборПоПолямЗапасы = Новый Структура;
			ОтборПоПолямЗапасы.Вставить("Номенклатура",   Метаданные.ОпределяемыеТипы["Номенклатура"].Тип.ПривестиЗначение());
			ОтборПоПолямЗапасы.Вставить("Характеристика", Метаданные.ОпределяемыеТипы["ХарактеристикаНоменклатуры"].Тип.ПривестиЗначение());
			ОтборПоПолямЗапасы.Вставить("Партия", Метаданные.ОпределяемыеТипы["СерияНоменклатуры"].Тип.ПривестиЗначение());
			
			ЗаполнитьЗначенияСвойств(ОтборПоПолямЗапасы, СтрокаТовары);
			
			ОтборПоПолямМарки = ОбщегоНазначения.СкопироватьРекурсивно(ОтборПоПолямЗапасы);
			ОтборПоПолямМарки.Вставить("Серия", ОтборПоПолямМарки.Партия);
			ОтборПоПолямМарки.Удалить("Партия");
			Если Не ЗначениеЗаполнено(ОтборПоПолямМарки.Серия) Тогда
				ОтборПоПолямМарки.Серия = Метаданные.ОпределяемыеТипы["СерияНоменклатуры"].Тип.ПривестиЗначение();
			КонецЕсли;
			
			СтрокиАкцизныхМарок = МаркированныеТовары.НайтиСтроки(ОтборПоПолямМарки);
			СтрокиТоваров       = Объект.Запасы.НайтиСтроки(ОтборПоПолямЗапасы);
			
			КоличествоМарок = 0;
			Для Каждого СтрокаМарка Из СтрокиАкцизныхМарок Цикл 
				КоличествоМарок = КоличествоМарок + СтрокаМарка.Количество;
			КонецЦикла;
			
			КоличествоЕдиницТоваров = 0;
			Для Каждого СтрокаТовар Из СтрокиТоваров Цикл 
				КоличествоЕдиницТоваров = КоличествоЕдиницТоваров + СтрокаТовар.Количество;
			КонецЦикла;
			
			Если КоличествоМарок <> КоличествоЕдиницТоваров Тогда
				
				Шаблон = НСтр("ru = 'Для %1 должно быть указано марок - %2, а указано - %3.';
								|en = '%2 labels must be specified for %1. The number specified is %3.'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					СтрокаТовары.Номенклатура,
					КоличествоЕдиницТоваров,
					КоличествоМарок);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
					Ошибки,
					"Объект.Товары[%1].Номенклатура",
					ТекстОшибки,
					"",
					СтрокаТовары.НомерСтроки-1);
	
			КонецЕсли;
			ПроверяемыеТовары.Удалить(ПроверяемСтроку);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

Функция ВидыПродукцииВЗапасах(Запасы) Экспорт
	
	Результат = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Номенклатура.АлкогольнаяПродукция
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Алкогольная)
	|		ИНАЧЕ Номенклатура.ВидПродукцииИС
	|	КОНЕЦ КАК ВидПродукцииИС
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&СписокНоменклатуры)
	|	И (НЕ Номенклатура.ВидПродукцииИС = ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.ПустаяСсылка)
	|			ИЛИ Номенклатура.АлкогольнаяПродукция)";
	
	Запрос.УстановитьПараметр("СписокНоменклатуры", Запасы.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Результат.НайтиПоЗначению(Выборка.ВидПродукцииИС) = Неопределено Тогда
			Результат.Добавить(Выборка.ВидПродукцииИС,
					СинонимПеречисления(Выборка.ВидПродукцииИС));
		КонецЕсли;
	КонецЦикла;
	
	Если Результат.Количество() = 0 Тогда
		Для Каждого ЗначениеПеречисления Из Перечисления.ВидыПродукцииИС Цикл
			Результат.Добавить(ЗначениеПеречисления, СинонимПеречисления(ЗначениеПеречисления))
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт
	
	// ВЕТИС
	СписокОбъектов.Добавить(Документы.ВходящаяТранспортнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Документы.ЗапросСкладскогоЖурналаВЕТИС);
	СписокОбъектов.Добавить(Документы.ИнвентаризацияПродукцииВЕТИС);
	СписокОбъектов.Добавить(Документы.ИсходящаяТранспортнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Документы.ПроизводственнаяОперацияВЕТИС);
	СписокОбъектов.Добавить(Справочники.ВетеринарноСопроводительныйДокументВЕТИС);
	// Конец ВЕТИС
	
	// ГИСМ
	СписокОбъектов.Добавить(Документы.МаркировкаТоваровГИСМ);
	СписокОбъектов.Добавить(Документы.ПеремаркировкаТоваровГИСМ);
	// Конец ГИСМ
	
	// ЕГАИС
	СписокОбъектов.Добавить(Документы.АктПостановкиНаБалансЕГАИС);
	СписокОбъектов.Добавить(Документы.АктСписанияЕГАИС);
	СписокОбъектов.Добавить(Документы.ВозвратИзРегистра2ЕГАИС);
	СписокОбъектов.Добавить(Документы.ОтчетЕГАИС);
	СписокОбъектов.Добавить(Документы.ПередачаВРегистр2ЕГАИС);
	СписокОбъектов.Добавить(Документы.ЧекЕГАИС);
	СписокОбъектов.Добавить(Документы.ЧекЕГАИСВозврат);
	// Конец ЕГАИС
	
	// ИСМП
	СписокОбъектов.Добавить(Документы.ВыводИзОборотаИСМП);
	СписокОбъектов.Добавить(Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ);
	СписокОбъектов.Добавить(Документы.МаркировкаТоваровИСМП);
	СписокОбъектов.Добавить(Документы.ПеремаркировкаТоваровИСМП);
	СписокОбъектов.Добавить(Документы.СписаниеКодовМаркировкиИСМП);
	СписокОбъектов.Добавить(Документы.ОтгрузкаТоваровИСМП);
	// Конец ИСМП
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Создает фиксированную структуру, содержащую свойства одноименные колонкам таблицы формы.
//
//  Параметры:
//   - Форма - УправляемаяФорма - форма, содержащая таблицу и служебный реквизит,
//                                имя которого образовано именем таблицы с префиксом "Кеш".
//    ИмяТабличнойЧасти - Строка - имя таблицы формы, текущие данные которой необходимо скопировать в служебный реквизит
//                                 формы.
//		Имя служебного реквизита должно состоять из префикса Кеш и имени табличной части.
//
Процедура ИнициализироватьКешТекущейСтроки(Форма, ИмяТабличнойЧасти, ПутьКТабличнойЧасти = "Объект") Экспорт

	Если ЗначениеЗаполнено(ПутьКТабличнойЧасти) Тогда
		МассивРеквизитовФормы = Форма.ПолучитьРеквизиты(ПутьКТабличнойЧасти + "." + ИмяТабличнойЧасти);
	Иначе
		МассивРеквизитовФормы = Форма.ПолучитьРеквизиты(ИмяТабличнойЧасти);
	КонецЕсли;
	
	РезультатСтруктура = Новый Структура;
	Для Каждого РеквизитФормы Из МассивРеквизитовФормы Цикл
		РезультатСтруктура.Вставить(РеквизитФормы.Имя, Истина);
	КонецЦикла;

	Форма[ИмяТабличнойЧасти + "КешТекущейСтроки"] = Новый ФиксированнаяСтруктура(РезультатСтруктура);

КонецПроцедуры

Функция НастройкиИсточникаКешаЧека() Экспорт
	
	Результат = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок();
	
	Результат.Штрихкоды =        "АкцизныеМарки";
	Результат.ШтрихкодУпаковки = "АкцизнаяМарка";
	Результат.Товары           = "Запасы";
	
	Возврат Результат;
	
КонецФункции

// Выделяет из переданного массива штрихкодов упаковок элементы, в составе которых (на любом уровне вложенности, 
//   в т.ч. частично) находится продукция требуемого вида
// 
// Параметры:
//   ШтрихкодыДляПроверки - Массив - проверяемые элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
//   ВидыПродукции - Массив, ПеречислениеСсылка.ВидыПродукцииИС, Неопределено - Вид отбираемой продукции.
// Возвращаемое значение:
//   Массив - Массив - подходящие элементы типа СправочникСсылка.ШтрихкодыУпаковокТоваров.
Функция ШтрихкодыСодержащиеВидыПродукции(Знач ШтрихкодыДляПроверки, Знач ВидыПродукции = Неопределено) Экспорт
	
	Если НЕ ШтрихкодыДляПроверки.Количество() Тогда
		Возврат ШтрихкодыДляПроверки;
	КонецЕсли;
	
	ПодходящиеВидыПродукции = Новый Массив();
	Если ТипЗнч(ВидыПродукции) = Тип("Массив") Тогда
		ПодходящиеВидыПродукции = ВидыПродукции;
	ИначеЕсли ТипЗнч(ВидыПродукции) = Тип("ПеречислениеСсылка.ВидыПродукцииИС") Тогда
		ПодходящиеВидыПродукции.Добавить(ВидыПродукции);
	КонецЕсли;

	РезультатПроверки = Новый Соответствие;
	Для Каждого ЭлементМассива Из ШтрихкодыДляПроверки Цикл
		РезультатПроверки.Вставить(ЭлементМассива, Ложь);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПодходящиеВидыПродукции", ПодходящиеВидыПродукции);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Штрихкод,
	|		ЕСТЬNULL(ШтрихкодыУпаковок.Номенклатура.ВидПродукцииИС В (&ПодходящиеВидыПродукции), ЛОЖЬ) КАК ПодходящаяПродукция
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ЕстьВложенныеШтрихкоды
	|		ПО ЕстьВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.Ссылка
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)
	|	И ЕстьВложенныеШтрихкоды.Ссылка ЕСТЬ NULL
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШтрихкодыУпаковок.Ссылка КАК Родитель,
	|	ШтрихкодыУпаковок.Штрихкод
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковок
	|	ГДЕ ШтрихкодыУпаковок.Ссылка В (&ШтрихкодУпаковки)";
	
	
	КешВложенности = Новый Соответствие;
	
	ОбходТаблицы = Истина;
	
	Пока ОбходТаблицы Цикл
		
		Запрос.УстановитьПараметр("ШтрихкодУпаковки", ШтрихкодыДляПроверки);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		СоставУпаковки = МассивРезультатов[0].Выбрать();
		ВложенныеЗаписи = МассивРезультатов[1].Выбрать();
		НуженОбходДочерних = ВложенныеЗаписи.Количество();
	
		Пока СоставУпаковки.Следующий() Цикл
			ИсходныйШтрихкод = КешВложенности.Получить(СоставУпаковки.Штрихкод);
			Если ИсходныйШтрихкод = Неопределено Тогда
				ИсходныйШтрихкод = СоставУпаковки.Штрихкод;
			КонецЕсли;
			
			РезультатПроверки[ИсходныйШтрихкод] = РезультатПроверки[ИсходныйШтрихкод] ИЛИ СоставУпаковки.ПодходящаяПродукция;
		КонецЦикла;
		
		Если НуженОбходДочерних Тогда
			ШтрихкодыДляПроверки = Новый Массив;
			Пока ВложенныеЗаписи.Следующий() Цикл
				ИсходныйШтрихкод = КешВложенности.Получить(ВложенныеЗаписи.Родитель);
				Если ИсходныйШтрихкод = Неопределено Тогда
					ИсходныйШтрихкод = ВложенныеЗаписи.Родитель;
				КонецЕсли;
				КешВложенности.Вставить(ВложенныеЗаписи.Штрихкод, ИсходныйШтрихкод);
				ШтрихкодыДляПроверки.Добавить(ВложенныеЗаписи.Штрихкод);
			КонецЦикла;
		Иначе
			ОбходТаблицы = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	Результат = Новый Массив;
	Для Каждого КлючИЗначение Из РезультатПроверки Цикл
		Если КлючИЗначение.Значение Тогда
			Результат.Добавить(КлючИЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура УдалитьСтрокиАкцизныхМарокПоВидуПродукции(АкцизныеМарки, ВидПродукции) Экспорт
	
	СписокАкцизныхМарокНаУдаление = ШтрихкодыСодержащиеВидыПродукции(АкцизныеМарки.Выгрузить().ВыгрузитьКолонку("АкцизнаяМарка"), ВидПродукции);
	
	Для Каждого АкцизнаяМарка Из СписокАкцизныхМарокНаУдаление Цикл
		
		УдаляемыеСтроки = АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", АкцизнаяМарка));
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			АкцизныеМарки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьСтрокиЗапасовПоВидуПродукции(Запасы, ВидПродукции) Экспорт
	
	ИмяПоляОтбора = XMLСтрока(ВидПродукции) + "Продукция";
	
	ОтборПоВидуПродукции = Новый Структура(ИмяПоляОтбора, 1);
	УдаляемыеСтроки = Запасы.НайтиСтроки(ОтборПоВидуПродукции);
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		Запасы.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, Знач СтрокаДерева, СтрокиРезультат = Неопределено)
	
	Если СтрокиРезультат <> Неопределено Тогда
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Найденные = ТЧАкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", СтрокаДерева.ШтрихкодУпаковки));
	
	Если Найденные.Количество() > 0 Тогда
		СтрокиРезультат = Найденные;
		Возврат СтрокиРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДерева.Родитель) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат СтрокиТЧАкцизныеМаркиПодходящиеДляШтрихкодаУпаковки(ТЧАкцизныеМарки, СтрокаДерева.Родитель, СтрокиРезультат);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьФормуРМК(Форма, ЕстьЕГАИС, ЕстьИСМП)
	
	Если ЕстьИСМП Тогда
		Форма.КонтролироватьСтатусыКодовМаркировкиВРознице = ИнтеграцияИСМПКлиентСерверПовтИсп.КонтролироватьСтатусыКодовМаркировкиВРознице();
		Форма.ИспользоватьАкцизныеМарки = Истина;
	КонецЕсли;
	
	Если ЕстьЕГАИС Тогда
		
		Если Форма.ИспользуетсяРегистрацияРозничныхПродажВЕГАИС Тогда
			Форма.ИспользоватьАкцизныеМарки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизитыВКоллекции(Форма, Форма.Объект.Запасы);
	
	ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека(), Истина);
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма, НастройкиИсточникаКешаЧека());
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(Форма);
	
КонецПроцедуры

Функция ПроверитьМодификацияФормыВыполнена(Форма)
	
	Если Форма.ПараметрыИнтеграцииГосИС.Получить("Инициализация")<> Неопределено Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ПараметрыИнтеграцииГосИС = Новый Соответствие(Форма.ПараметрыИнтеграцииГосИС);
	ПараметрыИнтеграцииГосИС.Вставить("Инициализация", Истина);
	Форма.ПараметрыИнтеграцииГосИС = Новый ФиксированноеСоответствие(ПараметрыИнтеграцииГосИС);
	Возврат Ложь;
	
КонецФункции

Функция СинонимПеречисления(ЗначениеПеречисления)
	
	ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
	ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Синоним;
	
КонецФункции

#КонецОбласти