// Общий модуль (выполняется на стороне сервера) модуля "Конструктор процессов для 1С:УНФ"
// Разработчик Компания "Аналитика. Проекты и решения" +7 495 005-1653, https://kp-unf.ru

#Область СлужебныеПроцедурыИФункции

// Функция определяет возможность создания файла. 
// Возвращаемое значение: Если тип хранения установлен в томах на диске, 
// то определяется наличие томов, если томов нет, то возвращается Ложь. Если тип храненения установлен не в томах
// на диске, либо есть созданные тома, то возвращается Истина
Функция МожноСоздаватьФайлы() Экспорт
	
	//Если Константы.ТипХраненияФайлов.Получить()=Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
	Если Константы.ХранитьФайлыВТомахНаДиске.Получить() Тогда
		//проверим есть ли созданные тома в системе
		Выборка=Справочники.ТомаХраненияФайлов.Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция формирует и возвращает имя файла из полного пути, переданного в аргументе функции
// Возвращаемое значение: Строка с именем файла
Функция ПолучитьИмяФайлаИзПути(ПолныйПутьФайла) Экспорт
	
	ИмяФайла=ПолучитьПравуюЧастьСтрокиОтделеннойСимволом(ПолныйПутьФайла, "\", "/");
	Возврат ИмяФайла;
	
КонецФункции

// Функция возвращает часть переданной в аргументе строки от конца строки и до символа отделения
// В аргументах функции передается исходная строка, а так же один или несколько искомых символов отделения
Функция ПолучитьПравуюЧастьСтрокиОтделеннойСимволом(ИсходнаяСтрока, СимволОтделения1, СимволОтделения2="") Экспорт
	
	//Если СимволОтделения2="" Тогда
	//	СимволОтделения1="";
	//КонецЕсли;
	
	ДлинаСтроки=СтрДлина(ИсходнаяСтрока);
	Для н=0 По ДлинаСтроки Цикл
		СимволСтроки=Сред(ИсходнаяСтрока, ДлинаСтроки-н, 1);
		Если СимволСтроки=СимволОтделения1 ИЛИ СимволСтроки=СимволОтделения2 Тогда
			Возврат Прав(ИсходнаяСтрока, н);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

// Функция удаляет последний символ строки, если он совпадает с переданным удаляемым символом
// В аргументах функции передается исходная строка и удаляемый символ
Функция УдалитьПоследнийСимвол(ИсходнаяСтрока, УдаляемыйСимвол) Экспорт
	
	НомерСимвола=СтрДлина(ИсходнаяСтрока);
	ПоследнийСимвол=Сред(ИсходнаяСтрока, НомерСимвола, 1);
	
	Если ПоследнийСимвол=УдаляемыйСимвол Тогда
		Возврат Лев(ИсходнаяСтрока, НомерСимвола-1); //вернем на один символ меньше
	Иначе
		Возврат ИсходнаяСтрока; //вернем оригинал
	КонецЕсли;

КонецФункции

// Функция получает данные источника для последущего вывода (экспорта) в табличный документ
// В аргументах функции передается ссылка на источник данных, ссылка на объект из которого нужно получить данные,
// имя источика данных и данные объекта
Функция ПолучитьДанныеИсточника(СсылкаНаИсточникДанных, СсылкаНаОбъект, ИмяИсточника="", Знач ДанныеОбъекта=Неопределено) Экспорт
	
	Перем РезультатВыполнения; //переменная для выполнения текстов функций
	Перем ДокументСсылка; //переменная для выполнения текстов функций
	
	Объект=СсылкаНаОбъект.Ссылка.ПолучитьОбъект();
	ТипДанных=СсылкаНаИсточникДанных.ТипДанныхТега;
	
	ИмяРеквизита=СокрЛП(СсылкаНаИсточникДанных.Реквизит);			
	ИмяДополнения=СокрЛП(СсылкаНаИсточникДанных.Дополнение);
	
	ДанныеИсточника="";

	Если ТипДанных=Перечисления.КП_ТипыДанныхТегов.РеквизитДокумента Тогда
		//получаем реквизит объекта
		Попытка
			Если ЗначениеЗаполнено(ИмяДополнения) Тогда
				//ДанныеИсточника=Объект[ИмяРеквизита][ИмяДополнения];
				ДанныеИсточника=ПолучитьДополнениеОбъекта(Объект[ИмяРеквизита], ИмяДополнения);
			Иначе
				Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
					ДанныеИсточника=Объект[ИмяРеквизита];
				КонецЕсли;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения));
			Возврат Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.ПараметрБизнесПроцесса Тогда
		
		Если ИмяРеквизита="ТекстПроцесса" Тогда
			ХранилищеОбъекта=Объект.ХранилищеТекстаПроцесса.Получить();
			Если ТипЗнч(ХранилищеОбъекта)=Тип("ФорматированныйДокумент") Тогда
				ДанныеИсточника=ХранилищеОбъекта.ПолучитьТекст();	
			Иначе
				ДанныеИсточника=Неопределено;
			КонецЕсли;
		
		ИначеЕсли КП_ОбщееСерверПС.ЭтоРеквизитМетаданныхБизнесПроцесса(ИмяРеквизита) Тогда
			
			Попытка
				ДанныеИсточника=Объект[ИмяРеквизита];
				Если ЗначениеЗаполнено(ИмяДополнения) Тогда
					//ДанныеИсточника=ДанныеИсточника[ИмяДополнения];
					ДанныеИсточника=ПолучитьДополнениеОбъекта(ДанныеИсточника, ИмяДополнения);
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения));
				Возврат Неопределено;
			КонецПопытки;
						
		Иначе
			Попытка
				
				ПараметрБизнесПроцесса=ПланыВидовХарактеристик.КП_ПараметрыПроцессов.НайтиПоКоду(СокрЛП(ИмяРеквизита));
				Если НЕ ЗначениеЗаполнено(ПараметрБизнесПроцесса) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Не найден параметр бизнес-процесса: ';")+ИмяРеквизита);
					Возврат Неопределено;
				КонецЕсли;
				
				ЗначениеПараметра=КП_Процессы.ПолучитьЗначениеПараметраПроцесса(СсылкаНаОбъект, ПараметрБизнесПроцесса);
				Если ЗначениеЗаполнено(ИмяДополнения) Тогда
					ДанныеИсточника=ЗначениеПараметра[ИмяДополнения];
				КонецЕсли;
				
				
				СтруктураКБП=КП_Процессы.ПолучитьСтруктуруПараметровКБП(СсылкаНаОбъект);
				Если ЗначениеЗаполнено(ИмяДополнения) Тогда
					//ДанныеИсточника=СтруктураКБП[ИмяРеквизита][ИмяДополнения];
					ДанныеИсточника=ПолучитьДополнениеОбъекта(СтруктураКБП[ИмяРеквизита], ИмяДополнения);
				Иначе
					ДанныеИсточника=СтруктураКБП[ИмяРеквизита];
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения));
				Возврат Неопределено;
			КонецПопытки;
			
		КонецЕсли;

	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.ПараметрЗадачиИсполнителя Тогда
		
		Если ИмяРеквизита="ТекстЗадачи" Тогда
			ХранилищеОбъекта=Объект.ХранилищеТекстаЗадания.Получить();
			Если ТипЗнч(ХранилищеОбъекта)=Тип("ФорматированныйДокумент") Тогда
				ДанныеИсточника=ХранилищеОбъекта.ПолучитьТекст();	
			Иначе
				ДанныеИсточника=Неопределено;
			КонецЕсли;
			
		ИначеЕсли ИмяРеквизита="ТекстРезультата" Тогда
			ХранилищеОбъекта=Объект.ХранилищеТекстовогоРезультата.Получить();
			Если ТипЗнч(ХранилищеОбъекта)=Тип("ФорматированныйДокумент") Тогда
				ДанныеИсточника=ХранилищеОбъекта.ПолучитьТекст();	
			Иначе
				ДанныеИсточника=Неопределено;
			КонецЕсли;

		ИначеЕсли КП_ОбщееСерверПС.ЭтоРеквизитМетаданныхЗадачи(ИмяРеквизита) Тогда
			Попытка	
				ДанныеИсточника=Объект[ИмяРеквизита];
				Если ЗначениеЗаполнено(ИмяДополнения) Тогда
					//ДанныеИсточника=ДанныеИсточника[ИмяДополнения];
					ДанныеИсточника=ПолучитьДополнениеОбъекта(ДанныеИсточника, ИмяДополнения);
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения));
				Возврат Неопределено;
			КонецПопытки;

		Иначе
			Попытка
				ПараметрЗадачи=ПланыВидовХарактеристик.КП_ПараметрыЗадач.НайтиПоКоду(СокрЛП(ИмяРеквизита));
				Если НЕ ЗначениеЗаполнено(ПараметрЗадачи) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Не найден параметр задачи: ';")+ИмяРеквизита);
					Возврат Неопределено;
				КонецЕсли;
				ЗначениеПараметра=КП_ЗадачиПроцессов.ПолучитьЗначениеПараметраЗадачи(СсылкаНаОбъект, ПараметрЗадачи);
				Если ЗначениеЗаполнено(ИмяДополнения) Тогда
					ДанныеИсточника=ЗначениеПараметра[ИмяДополнения];
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения));
				Возврат Неопределено;
			КонецПопытки;
			
		КонецЕсли;
							
	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.ДополнительныйРеквизит Тогда
		
		//получим дополнительный реквизит документа по его имени
		//ДопРеквизит=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяРеквизита);
		ДопРеквизит=НайтиДополнительныйРеквизитДокумента(СсылкаНаОбъект, ИмяРеквизита);
		
		Если ДопРеквизит=Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДопРеквизит) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		МассивСтрокДопРеквизитов=СсылкаНаОбъект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("ДополнительныйРеквизит", ДопРеквизит));
		
		Если МассивСтрокДопРеквизитов.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не найден дополнительный реквизит ';")+СокрЛП(ДопРеквизит));
			ДанныеИсточника="<ошибка>";
			Возврат ДанныеИсточника;
		Иначе
			СтрокаДопРеквизита=МассивСтрокДопРеквизитов[0];
		КонецЕсли;
		
		Попытка
			ДанныеИсточника=СтрокаДопРеквизита.ЗначениеРеквизита;
			Если ЗначениеЗаполнено(ИмяДополнения) Тогда
				ДанныеИсточника=СтрокаДопРеквизита.ЗначениеРеквизита[ИмяДополнения];
			КонецЕсли;
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения));
			Возврат Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.ИсточникДанных Тогда
		ИсточникДанныхОснование=СсылкаНаИсточникДанных.ИсточникДанныхОснование;	
		//получим данные источника основания
		РезультатИсточникаОснования=ПолучитьДанныеИсточника(ИсточникДанныхОснование, СсылкаНаОбъект, ИмяИсточника, ДанныеОбъекта);
		
		Если НЕ ЗначениеЗаполнено(РезультатИсточникаОснования) Тогда
			//дальше получать значения из него смысла нет
			Возврат Неопределено;
		КонецЕсли;
		
		//получаем реквизит источника
		Попытка
			Если ЗначениеЗаполнено(ИмяДополнения) Тогда
				//ДанныеИсточника=РезультатИсточникаОснования[ИмяРеквизита][ИмяДополнения];
				ДанныеИсточника=ПолучитьДополнениеОбъекта(РезультатИсточникаОснования[ИмяРеквизита], ИмяДополнения);
			Иначе
				Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
					ДанныеИсточника=РезультатИсточникаОснования[ИмяРеквизита];
				КонецЕсли;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения));
			Возврат Неопределено;
		КонецПопытки;

		Возврат ДанныеИсточника;
		
	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.Функция Тогда
				
		Попытка
			ТекстФункции=СформироватьТекстВнешнейФункции(СсылкаНаИсточникДанных.ФункцияПолученияДанных.ТекстФункции);
			РезультатВыполнения="<>";
			ДокументСсылка=СсылкаНаОбъект.Ссылка;
			Выполнить(ТекстФункции);
			
			ДанныеИсточника=РезультатВыполнения;
			//посмотрим, нет ли уточнения
			Если ЗначениеЗаполнено(ИмяДополнения) Тогда
				ДанныеИсточника=ПолучитьДополнениеОбъекта(РезультатВыполнения[ИмяРеквизита], ИмяДополнения);
			Иначе
				Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
					ДанныеИсточника=РезультатВыполнения[ИмяРеквизита];
				КонецЕсли;
			КонецЕсли;
			
			Возврат ДанныеИсточника;
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения программной функции для передачи данных в шаблон: '; en='Error in program function: ';")+ОписаниеОшибки()+Символы.ПС+СокрЛП(ТекстФункции));
			Возврат Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.Константа Тогда
		//получаем константу
		
		Попытка
			Если ЗначениеЗаполнено(ИмяДополнения) Тогда
				//ДанныеИсточника=Константы[ИмяРеквизита].Получить()[ИмяДополнения];
				ДанныеИсточника=ПолучитьДополнениеОбъекта(Константы[ИмяРеквизита].Получить(), ИмяДополнения);
			Иначе
				Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
					ДанныеИсточника=Константы[ИмяРеквизита].Получить();
				КонецЕсли;
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения));
			Возврат Неопределено;
		КонецПопытки;
		
	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.Системное Тогда
		//получаем системное значение
		Попытка
			ДанныеИсточника=ПолучитьСистемноеЗначение(ИмяРеквизита);
			Если ЗначениеЗаполнено(ИмяДополнения) Тогда
				//ДанныеИсточника=ДанныеИсточника[ИмяДополнения];
				ДанныеИсточника=ПолучитьДополнениеОбъекта(ДанныеИсточника, ИмяДополнения);
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения));			
			Возврат Неопределено
		КонецПопытки;
		
		Возврат ДанныеИсточника;
		
	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.ПрограммнаяТаблицаЗначений Тогда
		ИмяТабличнойЧасти="ТаблицаЗначений";
		ПрограммнаяТаблица=ПолучитьПрограммнуюТаблицуЗначенийДляПечатиШаблона(СсылкаНаИсточникДанных, СсылкаНаОбъект.Ссылка);
		
		Если ПрограммнаяТаблица.Колонки.Найти("НомерСтроки")=Неопределено Тогда
			ПрограммнаяТаблица.Колонки.Добавить("НомерСтроки");
			НомерСтроки=1;
			Для Каждого СтрокаТЧ Из ПрограммнаяТаблица Цикл
				СтрокаТЧ.НомерСтроки=НомерСтроки;
				НомерСтроки=НомерСтроки+1;
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ПрограммнаяТаблица Цикл
			
			Если ЗначениеЗаполнено(ИмяДополнения) Тогда
				//ДанныеИсточника=СтрокаТЧ[ИмяРеквизита][ИмяДополнения];
				ДанныеИсточника=ПолучитьДополнениеОбъекта(СтрокаТЧ[ИмяРеквизита], ИмяДополнения);
			Иначе
				ДанныеИсточника=СтрокаТЧ[ИмяРеквизита];
			КонецЕсли;
			
			ДанныеИсточника=КП_ОбщееСервер.ПрименитьФункциюПреобразования(ДанныеИсточника, СсылкаНаИсточникДанных);				
			
			Если НЕ ДанныеОбъекта.Свойство(ИмяТабличнойЧасти) Тогда
				//если нет объекта табличной части в структуре, добавим
				ДанныеОбъекта.Вставить(ИмяТабличнойЧасти, Новый Массив);
			КонецЕсли;
			
			//рекизиты табличной части храним в структуре
			//если структура уже есть (были ранее обработанные реквизиты), 
			//то добавим в структуру новый, если не было ранее, то создадим структуру
			
			Если ДанныеОбъекта[ИмяТабличнойЧасти].Количество()<(СтрокаТЧ.НомерСтроки) Тогда
				НоваяСтрока=Истина;
				СтруктураРеквизитовСтрокиТЧ=Новый Структура;
			Иначе
				НоваяСтрока=Ложь;
				//уже есть данные по этой строке таблчной части, найдем нужную структуру реквизитов
				СтруктураРеквизитовСтрокиТЧ=ДанныеОбъекта[ИмяТабличнойЧасти][СтрокаТЧ.НомерСтроки-1];
			КонецЕсли;
			//добавим реквизит в структуру	
			СтруктураРеквизитовСтрокиТЧ.Вставить(ИмяИсточника, СокрЛП(ДанныеИсточника));
			
			Если НоваяСтрока Тогда
				//добавим набор реквизитов строки табличной части в данные объекта						
				ДанныеОбъекта[ИмяТабличнойЧасти].Добавить(СтруктураРеквизитовСтрокиТЧ);
			Иначе
				//изменим структуру 
				ДанныеОбъекта[ИмяТабличнойЧасти][СтрокаТЧ.НомерСтроки-1]=СтруктураРеквизитовСтрокиТЧ;
			КонецЕсли;
			
		КонецЦикла; //по программной таблице
		
	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.ТабличнаяЧасть Тогда
		
		ИмяТабличнойЧасти=КП_ОбщееСервер.ПолучитьИмяТЧПоПредставлению(СсылкаНаИсточникДанных.ТабличнаяЧасть);
		
		Если ИмяТабличнойЧасти="" Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		//с табличной частью есть два варианта, выбор одной строк или создание массива строк
		//сначала обработаем первый вариант
		
		Если СсылкаНаИсточникДанных.НомерСтрокиТабличнойЧасти>0 Тогда
			//получим простой параметр выбранной строки по её номеру
		
			Попытка
				СтрокаТЧ=Объект[ИмяТабличнойЧасти][СсылкаНаИсточникДанных.НомерСтрокиТабличнойЧасти-1];
				Если ЗначениеЗаполнено(ИмяДополнения) Тогда
					//ДанныеИсточника=СтрокаТЧ[ИмяРеквизита][ИмяДополнения];
					ДанныеИсточника=ПолучитьДополнениеОбъекта(СтрокаТЧ[ИмяРеквизита], ИмяДополнения);
				Иначе
					Если ЗначениеЗаполнено(ИмяРеквизита) Тогда
						ДанныеИсточника=СтрокаТЧ[ИмяРеквизита];
					КонецЕсли;
				КонецЕсли;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения));
				Возврат Неопределено;
			КонецПопытки;
			
			Возврат ДанныеИсточника;
			
		КонецЕсли;
		
		//второй вариант, получение массива данных всех строк
		Попытка
			//в структуру ДанныеОбъекта должен быть добавлен элемент 
			//с наименованием табличной части и имеющим в своем составе массив структур элементов табличной части
			
			//соответственно для первого источника по ТЧ в выборке мы добавим элемент с названием ТЧ в структуру ДанныеОбъекта
			//для следующих источников по ТЧ найдем этот элемент (по имени ТЧ) и добавим в массив новый источник
			
			Если ДанныеОбъекта=Неопределено Тогда
				ДанныеОбъекта=Новый Структура;
			КонецЕсли;

			//цикл по строкам табличной части
			Для Каждого СтрокаТЧ Из Объект[ИмяТабличнойЧасти] Цикл				
				Если ЗначениеЗаполнено(ИмяДополнения) Тогда
					//ДанныеИсточника=СтрокаТЧ[ИмяРеквизита][ИмяДополнения];
					ДанныеИсточника=ПолучитьДополнениеОбъекта(СтрокаТЧ[ИмяРеквизита], ИмяДополнения);
				Иначе
					ДанныеИсточника=СтрокаТЧ[ИмяРеквизита];
				КонецЕсли;
				
				ДанныеИсточника=КП_ОбщееСервер.ПрименитьФункциюПреобразования(ДанныеИсточника, СсылкаНаИсточникДанных);				
				
				Если НЕ ДанныеОбъекта.Свойство(ИмяТабличнойЧасти) Тогда
					//если нет объекта табличной части в структуре, добавим
					ДанныеОбъекта.Вставить(ИмяТабличнойЧасти, Новый Массив);
				КонецЕсли;
				
				//рекизиты табличной части храним в структуре
				//если структура уже есть (были ранее обработанные реквизиты), 
				//то добавим в структуру новый, если не было ранее, то создадим структуру
				
				Если ДанныеОбъекта[ИмяТабличнойЧасти].Количество()<(СтрокаТЧ.НомерСтроки) Тогда
					НоваяСтрока=Истина;
					СтруктураРеквизитовСтрокиТЧ=Новый Структура;
				Иначе
					НоваяСтрока=Ложь;
					//уже есть данные по этой строке таблчной части, найдем нужную структуру реквизитов
					СтруктураРеквизитовСтрокиТЧ=ДанныеОбъекта[ИмяТабличнойЧасти][СтрокаТЧ.НомерСтроки-1];
				КонецЕсли;
				//добавим реквизит в структуру	
				СтруктураРеквизитовСтрокиТЧ.Вставить(ИмяИсточника, СокрЛП(ДанныеИсточника));
				
				Если НоваяСтрока Тогда
					//добавим набор реквизитов строки табличной части в данные объекта						
					ДанныеОбъекта[ИмяТабличнойЧасти].Добавить(СтруктураРеквизитовСтрокиТЧ);
				Иначе
					//изменим структуру 
					ДанныеОбъекта[ИмяТабличнойЧасти][СтрокаТЧ.НомерСтроки-1]=СтруктураРеквизитовСтрокиТЧ;
				КонецЕсли;
				
			КонецЦикла;				
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка передачи данных в шаблон. Источник: ';")+ИмяРеквизита+?(ИмяДополнения="", "", "."+ИмяДополнения)+": "+ОписаниеОшибки());
			Возврат Неопределено;
		КонецПопытки;
				
	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.ТаблицаБизнесПроцесса Тогда
		
		ИмяТабличнойЧасти=КП_Процессы.ПолучитьИмяТаблицыПроцесса(СсылкаНаИсточникДанных.ТабличнаяЧасть);
		
		Если ИмяТабличнойЧасти="ДокументыИПрочиеОбъекты" Тогда
			ТаблицаПроцесса=КП_ОбщееСерверПСВызов.ПолучитьТаблицуОбъектовБизнесПроцесса(СсылкаНаОбъект);
							
		ИначеЕсли ИмяТабличнойЧасти="РецензииКонтролеровВТочке" Тогда
			ТочкаВидаПроцесса=СсылкаНаИсточникДанных.ТочкаТаблицыБизнесПроцесса;
			//найдем точку в экземпляре процесса
			ТочкаКБП=КП_Процессы.НайтиТочкуЭкземпляраПоТочкеОснованию(ТочкаВидаПроцесса, СсылкаНаОбъект);
			ТаблицаПроцесса=КП_ОбщееСерверПСВызов.ПолучитьТаблицуРецензийКонтролеровБизнесПроцесса(СсылкаНаОбъект, ТочкаКБП);
			
			
		ИначеЕсли ИмяТабличнойЧасти="РезультатыИсполнителейВТочке" Тогда
			//построим таблицу результатов исполнителей, в которых в колонках будут значения
			//исполнителя и значения его парамеров (по одной колонке на каждый параметр)
			//сортировка таблицы по исполнителю
			//затем получим значение нужной колонки таблицы по имени реквизита источника данных
			
			//получим таблицу в которой в строках будут исполнители,
			//в колонках параметры ПВХ, а в ячейках значения параметров
			//дополним таблицу колонкой Исполнитель
			
			ТочкаВидаПроцесса=СсылкаНаИсточникДанных.ТочкаТаблицыБизнесПроцесса;
			ТочкаКБП=КП_Процессы.НайтиТочкуЭкземпляраПоТочкеОснованию(ТочкаВидаПроцесса, СсылкаНаОбъект);
			ТаблицаПроцесса=КП_ОбщееСерверПСВызов.ПолучитьТаблицуРезультатовИсполнителейБизнесПроцесса(СсылкаНаОбъект, ТочкаКБП);
			
			//теперь у нас есть таблица вида Исполнитель|ПараметрРезультата1|ПараметрРезультатаN
			//выберем нужные строки
			
		КонецЕсли;
		
		Если СсылкаНаИсточникДанных.НомерСтрокиТабличнойЧасти>0 Тогда
			
			//единственная строка
			НомерСтроки=Макс(СсылкаНаИсточникДанных.НомерСтрокиТабличнойЧасти-1, 0);
			Если ТаблицаПроцесса.Количество()<(НомерСтроки+1) Тогда
				Возврат "<нет данных>";
			КонецЕсли;
			
			СтрокаТаблицы=ТаблицаПроцесса[НомерСтроки];
			Если ПустаяСтрока(ИмяДополнения) Тогда
				ДанныеИсточника=СтрокаТаблицы[ИмяРеквизита];
			Иначе
				//ДанныеИсточника=СтрокаТаблицы[ИмяРеквизита][ИмяДополнения];
				ДанныеИсточника=ПолучитьДополнениеОбъекта(СтрокаТаблицы[ИмяРеквизита], ИмяДополнения);
			КонецЕсли;
			
			Возврат ДанныеИсточника;
			
		Иначе
			//массив строк таблицы	
			НомерСтроки=1;
			Для Каждого СтрокаТЧ Из ТаблицаПроцесса Цикл
				
				Если ПустаяСтрока(ИмяДополнения) Тогда
					ДанныеИсточника=СтрокаТЧ[ИмяРеквизита];
				Иначе
					ДанныеИсточника=ПолучитьДополнениеОбъекта(СтрокаТЧ[ИмяРеквизита], ИмяДополнения);
				КонецЕсли;
					
				ДанныеИсточника=КП_ОбщееСервер.ПрименитьФункциюПреобразования(ДанныеИсточника, СсылкаНаИсточникДанных);				
				
				Если ДанныеОбъекта=Неопределено Тогда
					ДанныеОбъекта=Новый Структура;
				КонецЕсли;
				
				Если НЕ ДанныеОбъекта.Свойство(ИмяТабличнойЧасти) Тогда
					//если нет объекта табличной части в структуре, добавим
					ДанныеОбъекта.Вставить(ИмяТабличнойЧасти, Новый Массив);
				КонецЕсли;
				
				//рекизиты табличной части храним в структуре
				//если структура уже есть (были ранее обработанные реквизиты), 
				//то добавим в структуру новый, если не было ранее, то создадим структуру
				
				Если ДанныеОбъекта[ИмяТабличнойЧасти].Количество()<(НомерСтроки) Тогда
					НоваяСтрока=Истина;
					СтруктураРеквизитовСтрокиТЧ=Новый Структура;
				Иначе
					НоваяСтрока=Ложь;
					//уже есть данные по этой строке таблчной части, найдем нужную структуру реквизитов
					СтруктураРеквизитовСтрокиТЧ=ДанныеОбъекта[ИмяТабличнойЧасти][НомерСтроки-1];
				КонецЕсли;
				
				//добавим реквизит в структуру	
				СтруктураРеквизитовСтрокиТЧ.Вставить(ИмяИсточника, СокрЛП(ДанныеИсточника));
				
				Если НоваяСтрока Тогда
					//добавим набор реквизитов строки табличной части в данные объекта						
					ДанныеОбъекта[ИмяТабличнойЧасти].Добавить(СтруктураРеквизитовСтрокиТЧ);
				Иначе
					//изменим структуру 
					ДанныеОбъекта[ИмяТабличнойЧасти][НомерСтроки-1]=СтруктураРеквизитовСтрокиТЧ;
				КонецЕсли;
				
				НомерСтроки=НомерСтроки+1;
				
			КонецЦикла;
				
			//закончим определение данных
			Возврат ДанныеИсточника;
		
		КонецЕсли; //строка или таблица
			
				
	ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.ПеременнаяБизнесПроцесса Тогда
		РеквизитПроцесса=КП_Процессы.ПолучитьРеквизитВидаПоИмени(СсылкаНаОбъект.ВидПроцесса, ИмяРеквизита);
		ДанныеИсточника=КП_Процессы.ПолучитьЗначениеРеквизитаПроцесса(СсылкаНаОбъект, РеквизитПроцесса);
		Если ЗначениеЗаполнено(ИмяДополнения) Тогда
			//ДанныеИсточника=ДанныеИсточника[ИмяДополнения];
			ДанныеИсточника=ПолучитьДополнениеОбъекта(ДанныеИсточника, ИмяДополнения);
		КонецЕсли;
		
	Иначе
		//Результаты исполнителей, Рецензии контролеров
		
	КонецЕсли;
	
	Возврат ДанныеИсточника;
	
КонецФункции

// Функция возвращает программно-сформированную таблицу значений для печати шаблона документа
Функция ПолучитьПрограммнуюТаблицуЗначенийДляПечатиШаблона(СсылкаНаИсточникДанных, СсылкаНаДокумент)
	
	ФункцияПолученияДанных=СсылкаНаИсточникДанных.ФункцияПолученияДанных;
	ТекстФункции=СформироватьТекстВнешнейФункции(ФункцияПолученияДанных.ТекстФункции);
	ПрограммнаяТаблицаЗначений=КП_ОбщееСерверПСВызов.ВыполнитьТекстФункции(ТекстФункции, СсылкаНаДокумент);

	Возврат ПрограммнаяТаблицаЗначений;
	
КонецФункции

// Функция формирует и возвращает текст внешней функции
Функция СформироватьТекстВнешнейФункции(ИсходныйТекстФункции)
	
	Если Найти(НРег(ИсходныйТекстФункции), "возврат ")=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения функции получения данных, оператор ""Возврат "" с результатом выполнения не найден.';en='Error of the function data acquisition operator ""Return"" with the result of the not found.'"));
		Возврат "";
	КонецЕсли;
	
	ТекстФункции=ОбработатьВозвратыВТекстеФункции(ИсходныйТекстФункции, "РезультатВыполнения");
	
	Возврат ТекстФункции;

КонецФункции

// Функция возвращает системное значение текущего сеанса 
// В аргументе функции передается имя системного значения
Функция ПолучитьСистемноеЗначение(ИмяСистемногоЗначения)
	
	Если ИмяСистемногоЗначения="ТекущаяДата" Тогда
		Возврат ТекущаяДата();
		
	ИначеЕсли ИмяСистемногоЗначения="ПолноеИмяПользователя" Тогда
		Возврат ПолноеИмяПользователя()
		
	ИначеЕсли ИмяСистемногоЗначения="ИмяКомпьютера" Тогда
		Возврат ИмяКомпьютера();
		
	КонецЕсли;
	
	Возврат "";

КонецФункции

// Функция выполняет преобразование исходных данных 
// Параметры:
//		ИсходныеДанные - исходные данные для преобразования
//		ИсточникДанных - источник данных для преобразовния
// Возвращаемое значение: Преобразованные функцией данные (строка)
Функция ПрименитьФункциюПреобразования(ИсходныеДанные, ИсточникДанных) Экспорт
	
	Если ТипЗнч(ИсточникДанных)=Тип("СправочникСсылка.КП_БиблиотекаИсточниковДанных") Тогда
		//код выполняется, если источник данных является ссылкой на библиотеку данных
		ФункцияПреобразования=ИсточникДанных.ФункцияПреобразования; //присвоение имени переменной
		ПадежПреобразования=ИсточникДанных.ПадежПреобразования;
		СтрокаФормата=ИсточникДанных.СтрокаФормата;
	Иначе 
		//код выполняется, если источник данных не является ссылкой на библиотеку данных
		ФункцияПреобразования=ИсточникДанных.ИсточникДанных.ФункцияПреобразования; //присвоение имени переменной
		ПадежПреобразования=ИсточникДанных.ИсточникДанных.ПадежПреобразования;
		СтрокаФормата=ИсточникДанных.ИсточникДанных.СтрокаФормата;
	КонецЕсли;
	
	Если ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.СокрЛП Тогда
		ПреобразованныеДанные=СокрЛП(ИсходныеДанные);	
		
	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.Форматирование Тогда
		Если ПустаяСтрока(СтрокаФормата) Тогда
			ПреобразованныеДанные=ИсходныеДанные;
		Иначе
			ПреобразованныеДанные=Формат(ИсходныеДанные, СтрокаФормата);
		КонецЕсли;
		
	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.ПадежПолноеФИО Тогда
		ПреобразованныеДанные=КП_ОбщееСервер.ПадежПолноеФИО(ИсходныеДанные, ПадежПреобразования);
		
	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.ЧислоПрописью Тогда
		Попытка
			СтрокаФорматаЧисла = "Л = ru_RU; ДП = Истина";
			//ПараметрыПредметаЧисла="гривна, гривны, гривен, м, копейка, копейки, копеек, ж, 2"; Украинские гривны
			ПараметрыПредметаЧисла="рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"; //Российские рубли
			ПреобразованныеДанные=ЧислоПрописью(ИсходныеДанные, СтрокаФорматаЧисла, ПараметрыПредметаЧисла);
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка преобразования в число прописью ';")+СокрЛП(ИсходныеДанные));
			ПреобразованныеДанные=ИсходныеДанные;
		КонецПопытки
		
	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.ПадежКраткоеФИО Тогда
		ПреобразованныеДанные=КП_ОбщееСервер.ПадежКраткоеФИО(ИсходныеДанные, ПадежПреобразования);
		
	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.ПадежКраткоеИОФ Тогда
		ПреобразованныеДанные=КП_ОбщееСервер.ПадежКраткоеИОФ(ИсходныеДанные, ПадежПреобразования);
		
	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.ПадежПредмет Тогда
		ПреобразованныеДанные=КП_ОбщееСервер.ПадежПредмет(ИсходныеДанные, ПадежПреобразования);

	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.ИОФ Тогда
		ПреобразованныеДанные=КП_ОбщееСервер.ПадежКраткоеИОФ(ИсходныеДанные, Перечисления.КП_Падежи.Именительный);
	
	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.ФИО Тогда
		ПреобразованныеДанные=КП_ОбщееСервер.ПадежКраткоеФИО(ИсходныеДанные, Перечисления.КП_Падежи.Именительный);
		
	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.ФИмяОтчество Тогда
		ПреобразованныеДанные=КП_ОбщееСервер.ФИмяОтчество(ИсходныеДанные);
		
	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.ИмяОтчествоФ Тогда
		ПреобразованныеДанные=КП_ОбщееСервер.ИмяОтчествоФ(ИсходныеДанные);
		
	ИначеЕсли ФункцияПреобразования=Перечисления.КП_ФункцииПреобразованияТегов.ЧислоПрописьюБезВалюты Тогда
		Попытка
			ИсходноеЧисло=Число(ИсходныеДанные);
			Если Цел(ИсходноеЧисло)=ИсходноеЧисло Тогда
				ПреобразованныеДанные=ЧислоПрописью(ИсходноеЧисло);
				ПреобразованныеДанные=СокрЛП(СтрЗаменить(ПреобразованныеДанные,"00",""));
			Иначе
				ПреобразованныеДанные=ЧислоПрописью(ИсходноеЧисло);
			КонецЕсли;
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка преобразования в число прописью (без валюты) ';")+СокрЛП(ИсходныеДанные));
			ПреобразованныеДанные=ИсходныеДанные;
		КонецПопытки
		
	Иначе
		ПреобразованныеДанные=ИсходныеДанные;	
	КонецЕсли;
	
	Возврат ПреобразованныеДанные;
	
КонецФункции

// Функция возвращает структуру контактной информации организации
// В аргументе функции передается ссылка на организацию для которого получаются контактные данные
Функция ПолучитьСтруктуруКонтактнойИнформацииОрганизации(СсылкаНаОбъект) Экспорт

	СтруктураКИ=Новый Структура;
	
	СтруктураКИ.Вставить("Наименование", СсылкаНаОбъект.Наименование);
	СтруктураКИ.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное);
	СтруктураКИ.Вставить("ИНН", СсылкаНаОбъект.ИНН);
	СтруктураКИ.Вставить("КПП", СсылкаНаОбъект.КПП);
	СтруктураКИ.Вставить("ОКПО", СсылкаНаОбъект.КодПоОКПО);
	СтруктураКИ.Вставить("ОГРН", СсылкаНаОбъект.аКодОГРН);

	СтруктураКИ.Вставить("Телефон", ПолучитьКонтактнуюИнформациюОрганизации(СсылкаНаОбъект, "Телефон"));
	СтруктураКИ.Вставить("ЭлПочта", ПолучитьКонтактнуюИнформациюОрганизации(СсылкаНаОбъект, "ЭлПочта"));
	СтруктураКИ.Вставить("Город", ПолучитьКонтактнуюИнформациюОрганизации(СсылкаНаОбъект, "Город"));
	СтруктураКИ.Вставить("Страна", ПолучитьКонтактнуюИнформациюОрганизации(СсылкаНаОбъект, "Страна"));
	СтруктураКИ.Вставить("Регион", ПолучитьКонтактнуюИнформациюОрганизации(СсылкаНаОбъект, "Регион"));
	СтруктураКИ.Вставить("ПочтовыйАдрес", ПолучитьКонтактнуюИнформациюОрганизации(СсылкаНаОбъект, "ПочтовыйАдрес"));
	СтруктураКИ.Вставить("ФактическийАдрес", ПолучитьКонтактнуюИнформациюОрганизации(СсылкаНаОбъект, "ФактическийАдрес"));
	СтруктураКИ.Вставить("ЮридическийАдрес", ПолучитьКонтактнуюИнформациюОрганизации(СсылкаНаОбъект, "ЮридическийАдрес"));
	СтруктураКИ.Вставить("ВебСтраница", ПолучитьКонтактнуюИнформациюОрганизации(СсылкаНаОбъект, "ВебСтраница"));
	
	СтруктураКИ.Вставить("ОКОГУ", СсылкаНаОбъект.аКодОКОГУ);
	СтруктураКИ.Вставить("ОКВЭД", СсылкаНаОбъект.аКодОКВЭД);
	СтруктураКИ.Вставить("ОКФС", СсылкаНаОбъект.аКодОКФС);
	СтруктураКИ.Вставить("ОКОПФ", СсылкаНаОбъект.аКодОКОПФ);
	СтруктураКИ.Вставить("ОКТМО", СсылкаНаОбъект.аКодОКТМО);
	СтруктураКИ.Вставить("ОКАТО", СсылкаНаОбъект.КодПоОКАТО);
	СтруктураКИ.Вставить("УставнойКапиталРублей", СсылкаНаОбъект.аУставнойКапиталРублей);
	СтруктураКИ.Вставить("ДатаРегистрации", СсылкаНаОбъект.аДатаРегистрации);
	
	//получим данные о расчетном счете по-умолчанию
	СтруктураРС=ПолучитьСтруктуруРасчетногоСчета(СсылкаНаОбъект.БанковскийСчетПоУмолчанию);
	
	СтруктураКИ.Вставить("БанкРасчетныйСчет", СтруктураРС.РасчетныйСчет);
	СтруктураКИ.Вставить("БанкНаименованиеСчета", СтруктураРС.НаименованиеСчета);
	СтруктураКИ.Вставить("БанкБИК", СтруктураРС.БанкБИК);
	СтруктураКИ.Вставить("БанкГород", СтруктураРС.БанкГород);
	СтруктураКИ.Вставить("БанкКоррСчет", СтруктураРС.БанкКоррСчет);
	СтруктураКИ.Вставить("БанкНаименование", СтруктураРС.БанкНаименование);
	
	//получим структуру действующих ответственных лиц предприятия
	СтруктураОтвЛиц=ПолучитьСтруктуруОтветственныхЛицОрганизации(СсылкаНаОбъект, ТекущаяДата());
	СтруктураКИ.Вставить("Руководитель", СтруктураОтвЛиц.Руководитель);
	СтруктураКИ.Вставить("ГлавныйБухгалтер", СтруктураОтвЛиц.ГлавныйБухгалтер);
	СтруктураКИ.Вставить("Кассир", СтруктураОтвЛиц.Кассир);
	СтруктураКИ.Вставить("Кладовщик", СтруктураОтвЛиц.Кладовщик);
	
	СтруктураКИ.Вставить("ДолжностьРуководителя", СтруктураОтвЛиц.ДолжностьРуководителя);
	СтруктураКИ.Вставить("ДолжностьГлавногоБухгалтера", СтруктураОтвЛиц.ДолжностьГлавногоБухгалтера);
	СтруктураКИ.Вставить("ДолжностьКассира", СтруктураОтвЛиц.ДолжностьКассира);
	СтруктураКИ.Вставить("ДолжностьКладовщика", СтруктураОтвЛиц.ДолжностьКладовщика);
	
	СтрокаРасчетныхСчетов=ПолучитьРасчетныеСчетаОрганизации(СсылкаНаОбъект);
	СтруктураКИ.Вставить("СтрокаРасчетныхСчетов", СтрокаРасчетныхСчетов);
	
	СтрокаУчредителей=ПолучитьУчредителейОрганизации(СсылкаНаОбъект);
	СтруктураКИ.Вставить("СтрокаУчредителей", СтрокаУчредителей);

	Возврат СтруктураКИ;
	
КонецФункции

// Функция возвращает структуру контактной информации контрагента
// В аргументе функции передается ссылка на контрагента для которого получаются контактные данные
Функция ПолучитьСтруктуруКонтактнойИнформацииКонтрагента(СсылкаНаОбъект) Экспорт
	
	СтруктураКИ=Новый Структура;
	
	СтруктураКИ.Вставить("Наименование", СсылкаНаОбъект.Наименование);
	СтруктураКИ.Вставить("НаименованиеПолное", СсылкаНаОбъект.НаименованиеПолное);
	СтруктураКИ.Вставить("ИНН", СсылкаНаОбъект.ИНН);
	СтруктураКИ.Вставить("КПП", СсылкаНаОбъект.КПП);
	СтруктураКИ.Вставить("ОКПО", СсылкаНаОбъект.КодПоОКПО);
	СтруктураКИ.Вставить("ОГРН", СсылкаНаОбъект.КодОГРН);
	
	СтруктураКИ.Вставить("Телефон", ПолучитьКонтактнуюИнформациюКонтрагент(СсылкаНаОбъект, "Телефон"));
	СтруктураКИ.Вставить("ЭлПочта", ПолучитьКонтактнуюИнформациюКонтрагент(СсылкаНаОбъект, "ЭлПочта"));
	СтруктураКИ.Вставить("Город", ПолучитьКонтактнуюИнформациюКонтрагент(СсылкаНаОбъект, "Город"));
	СтруктураКИ.Вставить("Страна", ПолучитьКонтактнуюИнформациюКонтрагент(СсылкаНаОбъект, "Страна"));
	СтруктураКИ.Вставить("Регион", ПолучитьКонтактнуюИнформациюКонтрагент(СсылкаНаОбъект, "Регион"));
	СтруктураКИ.Вставить("ПочтовыйАдрес", ПолучитьКонтактнуюИнформациюКонтрагент(СсылкаНаОбъект, "ПочтовыйАдрес"));
	СтруктураКИ.Вставить("ФактическийАдрес", ПолучитьКонтактнуюИнформациюКонтрагент(СсылкаНаОбъект, "ФактическийАдрес"));
	СтруктураКИ.Вставить("ЮридическийАдрес", ПолучитьКонтактнуюИнформациюКонтрагент(СсылкаНаОбъект, "ЮридическийАдрес"));
	СтруктураКИ.Вставить("ВебСтраница", ПолучитьКонтактнуюИнформациюКонтрагент(СсылкаНаОбъект, "ВебСтраница"));
	
	//получим данные о расчетном счете по-умолчанию
	СтруктураРС=ПолучитьСтруктуруРасчетногоСчета(СсылкаНаОбъект.БанковскийСчетПоУмолчанию);
	
	СтруктураКИ.Вставить("БанкРасчетныйСчет", СтруктураРС.РасчетныйСчет);
	СтруктураКИ.Вставить("БанкНаименованиеСчета", СтруктураРС.НаименованиеСчета);
	СтруктураКИ.Вставить("БанкБИК", СтруктураРС.БанкБИК);
	СтруктураКИ.Вставить("БанкГород", СтруктураРС.БанкГород);
	СтруктураКИ.Вставить("БанкКоррСчет", СтруктураРС.БанкКоррСчет);
	СтруктураКИ.Вставить("БанкНаименование", СтруктураРС.БанкНаименование);
	
	//добавим реквизиты
	СтруктураКИ.Вставить("Руководитель", СсылкаНаОбъект.РуководительКонтрагента);
	
	ДолжностьРуководителя=СокрЛП(СсылкаНаОбъект.РуководительКонтрагента.аДолжностьСтрокой);
	Если ПустаяСтрока(ДолжностьРуководителя) Тогда
		ДолжностьРуководителя=СокрЛП(СсылкаНаОбъект.РуководительКонтрагента.аДолжность);
		Если ПустаяСтрока(ДолжностьРуководителя) Тогда
			ДолжностьРуководителя=СокрЛП(СсылкаНаОбъект.РуководительКонтрагента.РольКонтактногоЛица);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураКИ.Вставить("ДолжностьРуководителя", ДолжностьРуководителя);
	
	Возврат СтруктураКИ;
	
КонецФункции

// Функция возвращает контактную информацию организации. В аргументе функции передается ссылка 
// на организацию и название контактной информации.
Функция ПолучитьКонтактнуюИнформациюОрганизации(СсылкаНаОбъект, НазваниеКИ) Экспорт
	
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
	
	//определим параметры извлечения контактной информации из базы данных
	
	Если НазваниеКИ="Телефон" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ЭлПочта" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="Страна" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="Регион" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ПочтовыйАдрес" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ФактическийАдрес" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ЮридическийАдрес" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ВебСтраница" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
		ВидКонтактнойИнформации=ПолучитьВидКонтактнойИнформацииПоТипу(ТипКонтактнойИнформации, ГруппаВидовКИ);
		Если НЕ ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="Город" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокаРеквизита="Город";
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		
	КонецЕсли;

	//найдем нужную строку в табличной части
	СтруктураКИ=Новый Структура("Тип, Вид", ТипКонтактнойИнформации, ВидКонтактнойИнформации);
	МассивСтрокКИ=СсылкаНаОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураКИ);
	
	Если МассивСтрокКИ.Количество()=0 Тогда
		//ни чего не найдено
		Возврат Неопределено;
	КонецЕсли;
	
	Если НазваниеКИ="Телефон" ИЛИ НазваниеКИ="ЭлПочта" ИЛИ НазваниеКИ="Город" ИЛИ НазваниеКИ="Страна" ИЛИ НазваниеКИ="Регион" Тогда
		ЗначениеКИ=МассивСтрокКИ[0][СтрокаРеквизита];
	ИначеЕсли НазваниеКИ="ПочтовыйАдрес" ИЛИ НазваниеКИ="ФактическийАдрес" ИЛИ НазваниеКИ="ЮридическийАдрес" Тогда
		ЗначениеКИ=МассивСтрокКИ[0].Представление;
	КонецЕсли;
	
	Возврат ЗначениеКИ;
		
КонецФункции

// Функция возвращает контактную информацию контрагента. В аргументе функции передается 
// ссылка на контрагента и название контактной информации.
Функция ПолучитьКонтактнуюИнформациюКонтрагент(СсылкаНаОбъект, НазваниеКИ) Экспорт
	
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
	
	//определим параметры извлечения контактной информации из базы данных
	
	Если НазваниеКИ="Телефон" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ЭлПочта" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="Страна" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="Регион" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ПочтовыйАдрес" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ФактическийАдрес" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ЮридическийАдрес" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ВебСтраница" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.ВебСтраница;
		ВидКонтактнойИнформации=ПолучитьВидКонтактнойИнформацииПоТипу(ТипКонтактнойИнформации, ГруппаВидовКИ);
		Если НЕ ЗначениеЗаполнено(ВидКонтактнойИнформации) Тогда
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли НазваниеКИ="Город" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес;
		СтрокаРеквизита="Город";
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
	КонецЕсли;

	//найдем нужную строку в табличной части
	СтруктураКИ=Новый Структура("Тип, Вид", ТипКонтактнойИнформации, ВидКонтактнойИнформации);
	МассивСтрокКИ=СсылкаНаОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураКИ);
	
	Если МассивСтрокКИ.Количество()=0 Тогда
		//ни чего не найдено
		Возврат Неопределено;
	КонецЕсли;
	
	Если НазваниеКИ="Телефон" ИЛИ НазваниеКИ="ЭлПочта" ИЛИ НазваниеКИ="Город" ИЛИ НазваниеКИ="Страна" ИЛИ НазваниеКИ="Регион" Тогда
		ЗначениеКИ=МассивСтрокКИ[0][СтрокаРеквизита];
	ИначеЕсли НазваниеКИ="ПочтовыйАдрес" ИЛИ НазваниеКИ="ФактическийАдрес" ИЛИ НазваниеКИ="ЮридическийАдрес" Тогда
		ЗначениеКИ=МассивСтрокКИ[0].Представление;
	КонецЕсли;
	
	Возврат ЗначениеКИ;
		
КонецФункции

// Функция возвращает структуру расчетного счета, переданного как ссылка в аргументе функции
Функция ПолучитьСтруктуруРасчетногоСчета(СсылкаНаОбъект) Экспорт
	
	РасчетныйСчет=СсылкаНаОбъект.НомерСчета;
	НаименованиеСчета=СсылкаНаОбъект.Наименование;
	Банк=СсылкаНаОбъект.Банк;
	БанкНаименование=Банк.Наименование;
	БанкБИК=Банк.Код;
	БанкКоррСчет=Банк.КоррСчет;
	БанкГород=Банк.Город;
	ДатаОткрытия=СсылкаНаОбъект.ДатаОткрытия;
	ДатаЗакрытия=СсылкаНаОбъект.ДатаЗакрытия;
	
	СтруктураРС=Новый Структура;
	СтруктураРС.Вставить("РасчетныйСчет", РасчетныйСчет);
	СтруктураРС.Вставить("НаименованиеСчета", НаименованиеСчета);
	СтруктураРС.Вставить("БанкБИК", БанкБИК);
	СтруктураРС.Вставить("БанкГород", БанкГород);
	СтруктураРС.Вставить("БанкКоррСчет", БанкКоррСчет);
	СтруктураРС.Вставить("БанкНаименование", БанкНаименование);
	СтруктураРС.Вставить("ДатаОткрытия", ДатаОткрытия);
	СтруктураРС.Вставить("ДатаЗакрытия", ДатаЗакрытия);
	
	Возврат СтруктураРС;
	
КонецФункции

// Функция возвращает вид контактной информации по переданному в аргументе типу и группе контактной информации
Функция ПолучитьВидКонтактнойИнформацииПоТипу(ТипКонтактнойИнформации, ГруппаВидовКИ)
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                     |	ВидыКонтактнойИнформации.Ссылка
	                     |ИЗ
	                     |	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	                     |ГДЕ
	                     |	ВидыКонтактнойИнформации.ПометкаУдаления = ЛОЖЬ
	                     |	И ВидыКонтактнойИнформации.Родитель = &ГруппаВидовКИ
	                     |	И ВидыКонтактнойИнформации.Тип = &Тип");
						 
	Запрос.УстановитьПараметр("Тип", ТипКонтактнойИнформации);
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает структуру отвественных лиц организации. В аргументах функции передается организация и дата,
// на которую получается информация об ответсветнных лицах
Функция ПолучитьСтруктуруОтветственныхЛицОрганизации(Организация, ДатаДействия)
	
	СтруктураОтвЛиц=Новый Структура;
	СтруктураОтвЛиц.Вставить("Руководитель", Неопределено);
	СтруктураОтвЛиц.Вставить("ГлавныйБухгалтер", Неопределено);
	СтруктураОтвЛиц.Вставить("Кассир", Неопределено);
	СтруктураОтвЛиц.Вставить("Кладовщик", Неопределено);
	СтруктураОтвЛиц.Вставить("ДолжностьРуководителя", "");
	СтруктураОтвЛиц.Вставить("ДолжностьГлавногоБухгалтера", "");
	СтруктураОтвЛиц.Вставить("ДолжностьКассира", "");
	СтруктураОтвЛиц.Вставить("ДолжностьКладовщика", "");
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ОтветственныеЛицаСрезПоследних.Сотрудник,
	                    |	ОтветственныеЛицаСрезПоследних.Должность,
	                    |	ОтветственныеЛицаСрезПоследних.ТипОтветственногоЛица
	                    |ИЗ
	                    |	РегистрСведений.ОтветственныеЛица.СрезПоследних КАК ОтветственныеЛицаСрезПоследних
	                    |ГДЕ
	                    |	ОтветственныеЛицаСрезПоследних.Организация = &Организация");
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ТипОтветственногоЛица=Перечисления.ТипыОтветственныхЛиц.Руководитель Тогда
			СтруктураОтвЛиц.Руководитель=Выборка.Сотрудник;
			СтруктураОтвЛиц.ДолжностьРуководителя=Выборка.Должность;
		ИначеЕсли Выборка.ТипОтветственногоЛица=Перечисления.ТипыОтветственныхЛиц.ГлавныйБухгалтер Тогда
			СтруктураОтвЛиц.ГлавныйБухгалтер=Выборка.Сотрудник;
			СтруктураОтвЛиц.ДолжностьГлавногоБухгалтера=Выборка.Должность;
		ИначеЕсли Выборка.ТипОтветственногоЛица=Перечисления.ТипыОтветственныхЛиц.Кассир Тогда
			СтруктураОтвЛиц.Кассир=Выборка.Сотрудник;
			СтруктураОтвЛиц.ДолжностьКассира=Выборка.Должность;
		ИначеЕсли Выборка.ТипОтветственногоЛица=Перечисления.ТипыОтветственныхЛиц.Кладовщик Тогда
			СтруктураОтвЛиц.Кладовщик=Выборка.Сотрудник;
			СтруктураОтвЛиц.ДолжностьКладовщика=Выборка.Должность;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураОтвЛиц;
	
КонецФункции

// Функция возвращает список подразделений сотрудника, переданного в аргументе функции
Функция ПолучитьСписокПодразделенийСотрудника(Сотрудник, ТолькоПервое=Ложь) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ПодразделенияСостав.Ссылка
	                    |ИЗ
	                    |	Справочник.Подразделения.Сотрудники КАК ПодразделенияСостав
	                    |ГДЕ
	                    |	ПодразделенияСостав.Ссылка.ПометкаУдаления = ЛОЖЬ
	                    |	И ПодразделенияСостав.Пользователь = &Пользователь");
						
	Если ТолькоПервое Тогда
		Запрос.Текст=СтрЗаменить(Запрос.Текст, "РАЗРЕШЕННЫЕ", "РАЗРЕШЕННЫЕ ПЕРВЫЕ 1");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Пользователь", Сотрудник);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если ТолькоПервое Тогда
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Справочники.Подразделения.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	//сформируем список подразделений
	
	СписокПодразделений=Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		Пользователь=Выборка.Ссылка;
		Если СписокПодразделений.НайтиПоЗначению(Пользователь)=Неопределено Тогда
			СписокПодразделений.Добавить(Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПодразделений;
	
КонецФункции

// Функция возвращает структуру, содержащую список параметров информационной базы, переданной в аргументе функции
Функция ПолучитьПраметрыИнформационнойБазы(ИнфБаза) Экспорт
	
	СтруктураПараметров=Новый Структура("СерверныйРежим, Пользователь, Пароль, ИмяСервера, БазаСервера, ПутьКФайловойБазе");
	
	СтруктураПараметров.СерверныйРежим=(ИнфБаза.СерверныйРежим=0);
	СтруктураПараметров.Пользователь=ИнфБаза.Пользователь;
	СтруктураПараметров.Пароль=ИнфБаза.Пароль;
	СтруктураПараметров.ИмяСервера=ИнфБаза.ИмяСервера;
	СтруктураПараметров.БазаСервера=ИнфБаза.ИмяБазыДанных;
	СтруктураПараметров.ПутьКФайловойБазе=ИнфБаза.ПутьКФайловойБазе;
	
	Возврат СтруктураПараметров;

КонецФункции

// Функция формирует и возвращает структуру внешней ссылки на объект, переданный в аргументе функции
Функция СформироватьСтруктуруСсылки(СсылкаНаОбъект) Экспорт
	ВнешниеМетаданные=СсылкаНаОбъект.ВнешниеМетаданные;
	
	СтруктураОбъекта=Новый Структура("ИнформационнаяБаза, ИмяМетаданных, ВидМетаданных, ПредставлениеМетаданных, ДатаАктуальности, НомерКод, Платформа81", СсылкаНаОбъект.ВнешниеМетаданные.ИнформационнаяБаза, СсылкаНаОбъект.ВнешниеМетаданные.ИмяМетаданных, СсылкаНаОбъект.ВнешниеМетаданные.ВидМетаданных, СсылкаНаОбъект.ВнешниеМетаданные.Наименование, СсылкаНаОбъект.ДатаАктуальности, СсылкаНаОбъект.НомерКод, ВнешниеМетаданные.ИнформационнаяБаза.Платформа81);
	
	Если ВнешниеМетаданные.ИспользоватьФормыПоУмолчанию Тогда
		СтруктураОбъекта.Вставить("ФормаСписка", "");	
		СтруктураОбъекта.Вставить("ФормаОбъекта", "");
	Иначе
		СтруктураОбъекта.Вставить("ФормаСписка", ВнешниеМетаданные.НаименованиеФормыСписка);	
		СтруктураОбъекта.Вставить("ФормаОбъекта", ВнешниеМетаданные.НаименованиеФормыОбъекта);

	КонецЕсли;
	
	СтруктураОбъекта.Вставить("ВнешниеМетаданные", СсылкаНаОбъект.ВнешниеМетаданные);
	СтруктураОбъекта.Вставить("ЭтоСсылкаНаОбъект", (СсылкаНаОбъект.СсылкаНаСписок=0));
	
	Возврат СтруктураОбъекта;
	
КонецФункции

// Функция возвращает структуру параметров внешней информационной базы данных
// В аргументах функции передается ссылка на элемент справочника внешних информационных баз
Функция ПолучитьПараметрыИнформационнойБазы(ИнфБаза) Экспорт
	
	СтруктураПараметров=Новый Структура("СерверныйРежим, Пользователь, Пароль, ИмяСервера, БазаСервера, ПутьКФайловойБазе, ВерсияПлатформы, ВариантАвторизации");
	
	СтруктураПараметров.СерверныйРежим=(ИнфБаза.СерверныйРежим=0);
	СтруктураПараметров.Пользователь=ИнфБаза.Пользователь;
	СтруктураПараметров.Пароль=ИнфБаза.Пароль;
	СтруктураПараметров.ИмяСервера=ИнфБаза.ИмяСервера;
	СтруктураПараметров.БазаСервера=ИнфБаза.ИмяБазыДанных;
	СтруктураПараметров.ПутьКФайловойБазе=ИнфБаза.ПутьКФайловойБазе;
	
	Если ИнфБаза.ТипПлатформы=Перечисления.аТипыПлатформы.Предприятие81 Тогда
		СтруктураПараметров.ВерсияПлатформы="8.1";
		
	ИначеЕсли ИнфБаза.ТипПлатформы=Перечисления.аТипыПлатформы.Предприятие82 Тогда
		СтруктураПараметров.ВерсияПлатформы="8.2";
		
	ИначеЕсли ИнфБаза.ТипПлатформы=Перечисления.аТипыПлатформы.Предприятие83 Тогда
		СтруктураПараметров.ВерсияПлатформы="8.3";
		
	КонецЕсли;

	СтруктураПараметров.ВариантАвторизации=ИнфБаза.ВариантАвторизации;
	
	Возврат СтруктураПараметров;

КонецФункции

// Процедура устанавливает или снимает отбор в динамическом списке. В аргументах процедуры передается: 
// динамический список, имя необходимого отбора, значение отбора и флаг использования (истина или ложь)
Процедура УстановитьОтбор(ДинСписок, ИмяОтбора, ЗначениеОтбора, ФлагИспользования=Истина) Экспорт
	
	ПолеОтбора=Новый ПолеКомпоновкиДанных(ИмяОтбора);
	НашлиЭлемент=Ложь;
	ЭлементыОтбора=ДинСписок.Отбор.Элементы;
	
	Для Каждого ЭлементОтбораДанных Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбораДанных)<>Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбораДанных.ЛевоеЗначение=ПолеОтбора Тогда //нашли нужный отбор, установим значения
			НашлиЭлемент=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ НашлиЭлемент Тогда
		ЭлементОтбораДанных = ДинСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ПолеОтбора;
	КонецЕсли;
	
	ЭлементОтбораДанных.ПравоеЗначение=ЗначениеОтбора;
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.Использование = ФлагИспользования;
	
КонецПроцедуры

// Процедура группирует динмический список (а так же отключает группировку)
// В аргументах процедуры передаются: динамический список имя группировки и флаг использования (истина или ложь)
Процедура СгруппироватьСписок(ДинСписок, РеквизитГруппировки, ФлагИспользования=Истина) Экспорт
	
	ПолеГруппировки=Новый ПолеКомпоновкиДанных(РеквизитГруппировки);
	НашлиЭлемент=Ложь;
	
	ЭлементыГруппировки=ДинСписок.Группировка.Элементы;
	
	Для Каждого ЭлементГруппировки Из ЭлементыГруппировки Цикл
		Если ТипЗнч(ЭлементГруппировки)<>Тип("ПолеГруппировкиКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементГруппировки.Поле=ПолеГруппировки Тогда	
			НашлиЭлемент=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если НЕ НашлиЭлемент Тогда
		Если ЗначениеЗаполнено(РеквизитГруппировки) Тогда
			//создадим
			ЭлементГруппировки = ДинСписок.Группировка.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ЭлементГруппировки.Поле =ПолеГруппировки;
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не заполнено имя элемента группировки.';en='Name of grouping type is not set.'"));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементГруппировки.Использование=ФлагИспользования;
	
КонецПроцедуры

// Процедура отключает группировку динамического списка, переданного в аргументе
Процедура ОключитьГруппировкиСписка(ДинСписок) Экспорт
	
	ДинСписок.Группировка.Элементы.Очистить();
	
КонецПроцедуры

// Функция возвращает картинку изображения ожидания
Функция ПолучитьКартинкуОжидания() Экспорт
	
	Картинка=БиблиотекаКартинок.аКартинкаОжидания;
	Возврат Картинка;
	
КонецФункции	

// Функция возвращет бланк корпоративного документа указанного в виде документа или, если там не указан шаблон, 
// то в константах.
Функция ПолучитьБланкКорпоративногоДокумента(СсылкаНаДокумент=Неопределено) Экспорт
	
	Если СсылкаНаДокумент=Неопределено Тогда
		ШаблонБланка=Константы.КП_ШаблонПечатиДокумента.Получить();
	Иначе
		ВидДокумента=СсылкаНаДокумент.ВидДокумента;
		Если ЗначениеЗаполнено(ВидДокумента.ШаблонПечатиВидаДокумента) Тогда
			ШаблонБланка=ВидДокумента.ШаблонПечатиВидаДокумента;
		Иначе
			ШаблонБланка=Константы.КП_ШаблонПечатиДокумента.Получить();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ШаблонБланка;
	
КонецФункции

// Функция возвращет бланк корпоративного процесса указанного в виде бизнес-процесса или, 
// если там не указан шаблон, то в константах.
Функция ПолучитьБланкКорпоративногоПроцесса(СсылкаНаЭкземплярПроцесса) Экспорт
	
	Если СсылкаНаЭкземплярПроцесса=Неопределено Тогда
		ШаблонБланка=Константы.КП_ШаблонПечатиПроцесса.Получить();
	Иначе
		ВидБизнесПроцесса=СсылкаНаЭкземплярПроцесса.ВидПроцесса;
		//Если ЗначениеЗаполнено(ВидБизнесПроцесса.ШаблонПечатиВидаПроцесса) Тогда
		//	ШаблонБланка=ВидДокумента.ШаблонПечатиВидаПроцесса;
		//Иначе
			ШаблонБланка=Константы.КП_ШаблонПечатиПроцесса.Получить();
		//КонецЕсли;
	КонецЕсли;
	
	Возврат ШаблонБланка;
	
КонецФункции

// Функция возвращет значение текущего отбора динамического списка. В аргументах передается динамический 
// список и имя отбора.
Функция ПолучитьЗначениеОтбора(ДинСписок, ИмяОтбора) Экспорт
	
	ПолеОтбора=Новый ПолеКомпоновкиДанных(ИмяОтбора);
	НашлиЭлемент=Ложь;
	ЭлементыОтбора=ДинСписок.Отбор.Элементы;
	
	Для Каждого ЭлементОтбораДанных Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбораДанных)<>Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбораДанных.ЛевоеЗначение=ПолеОтбора Тогда
			Если ЭлементОтбораДанных.Использование Тогда
				Возврат ЭлементОтбораДанных.ПравоеЗначение
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат Неопределено;
	
КонецФункции

// Функция формирует и возвращет идентификатор на основании переданной в аргументе даты, а так же времени
Функция ПолучитьИдентификаторНаОснованииДатыВремени(ДатаИВремя) Экспорт 
	
	Возврат Формат(ДатаИВремя, "ДФ=yyyyMMddhhmmss");
	
КонецФункции

// Функция возвращает расширение переданного в аргументе полного имени файла
Функция ПолучитьРасширениеФайла(ИмяФайла) Экспорт
	
	Возврат СокрЛП(КП_ОбщееСервер.ПолучитьПравуюЧастьСтрокиОтделеннойСимволом(ИмяФайла, "."));

КонецФункции

// Функция возвращает Истина, если в ссылке не содержится признак сбоя, в противном случае возвращается Ложь
Функция СсылкаКорректная(СсылкаНаОбъект) Экспорт
	
	Если Найти(СокрЛП(СсылкаНаОбъект), "<Объект не найден>")>0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция возвращает первое слово переданной в аргументе строки
Функция ПолучитьПервоеСлово(ПолнаяСтрока) Экспорт
	
	ПервыйПробел=Найти(ПолнаяСтрока, " ");
	
	Если ПервыйПробел=0 Тогда
		Возврат ПолнаяСтрока;
	Иначе
		Возврат СокрЛП(Лев(ПолнаяСтрока, ПервыйПробел-1));
	КонецЕсли;
	
КонецФункции

// Функция возвращает результат слождения даты и времени, переданных в аргументах функции
Функция СложитьДатуИВремя(ИсходнаяДата, ДобавляемоеВремя) Экспорт
	
	Если ТипЗнч(ДобавляемоеВремя)=Тип("Число") Тогда
		Возврат ИсходнаяДата+ДобавляемоеВремя;
		
	Иначе
		Возврат ИсходнаяДата+(ДобавляемоеВремя-НачалоДня(ДобавляемоеВремя));
		
	КонецЕсли;
	
КонецФункции

// Функция возвращает разницу в днях между датами, переданными в аргументах функции
Функция РазницаДней(Дата1, Дата2) Экспорт
	Если НЕ ЗначениеЗаполнено(Дата2) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипЗнч(Дата2)=Тип("Число") Тогда
		РазницаСекунд=Дата1-(Дата1-Дата2);
		РазницаДней=РазницаСекунд/60/60/24;
		Возврат РазницаДней;
		
	Иначе //обе даты
		Если НЕ ЗначениеЗаполнено(Дата2) Тогда
			Возврат 999;
		КонецЕсли;
		РазницаСекунд=Дата1-Дата2;
		РазницаДней=РазницаСекунд/60/60/24;
		Возврат РазницаДней;
		
	КонецЕсли;
КонецФункции

// Функция завершает исходное предложение точкой, если точка уже присутствует в конце исходной строки, 
// то возвращается исходная строка. В аргументе функции передается исходная строка.
Функция ЗавершитьПредложение(СтрокаПредложения) Экспорт
	
	ДополненноеПредложение=СокрЛП(СтрокаПредложения);
	
	Если ПустаяСтрока(ДополненноеПредложение) Тогда
		Возврат ДополненноеПредложение;
	КонецЕсли;
	
	ПоследнийСимвол=Прав(ДополненноеПредложение, 1);
	
	Если ПоследнийСимвол="." ИЛИ ПоследнийСимвол="!" ИЛИ ПоследнийСимвол="?" Тогда
		Возврат ДополненноеПредложение+" ";
	Иначе
		Возврат ДополненноеПредложение+". ";
	КонецЕсли;
	
КонецФункции

// Функция возвращает преобразованное имя табличной части корпоративного документа
// В аргументе функции передается исходное название табличной части документа
Функция ПолучитьИмяТЧПоПредставлению(ВыбраннаяТЧ) Экспорт
	
	Если ВыбраннаяТЧ="Организации и подразделения" Тогда
		Возврат "ОрганизацииПодразделения";
		
	ИначеЕсли ВыбраннаяТЧ="Контрагенты и договоры" Тогда
		Возврат "КонтрагентыДоговоры";
		
	ИначеЕсли ВыбраннаяТЧ="Произвольная таблица" Тогда
		Возврат "ПроизвольнаяТаблица";
		
	ИначеЕсли ВыбраннаяТЧ="Дополнительные реквизиты" Тогда
		Возврат "ДополнительныеРеквизиты";
		
	ИначеЕсли ВыбраннаяТЧ="Список получателей" Тогда
		Возврат "СписокПолучателей";
		
	ИначеЕсли ВыбраннаяТЧ="Пользователи" Тогда
		Возврат "Сотрудники";
		
	Иначе
		Возврат ВыбраннаяТЧ;
	КонецЕсли;
		
КонецФункции

// Функция возвращает преобразованную в нужный падеж строку ФИО
// В аргуметах функции передается исходное ФИО и нужный падеж
Функция ПадежПолноеФИО(СтрокаФИО, Падеж) Экспорт
	
	Если Падеж=Перечисления.КП_Падежи.Именительный Тогда
		НомерПадежа=1;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Дательный Тогда
		НомерПадежа=3;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Предложный Тогда
		НомерПадежа=6;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Родительный Тогда
		НомерПадежа=2;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Творительный Тогда
		НомерПадежа=5;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Винительный Тогда
		НомерПадежа=4;
	Иначе
		Возврат СтрокаФИО;
	КонецЕсли;
		
	СтрокаРезультат=Падеж(СокрЛП(СтрокаФИО), НомерПадежа);
	Возврат СтрокаРезультат;
	
Конецфункции

// Функция возвращает преобразованную в нужный падеж строку ФИО сокращая при этом ФИО до инициалов
// В аргуметах функции передается исходное ФИО и нужный падеж
Функция ПадежКраткоеФИО(СтрокаФИО, Падеж) Экспорт
	
	Если Падеж=Перечисления.КП_Падежи.Именительный Тогда
		НомерПадежа=-1;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Дательный Тогда
		НомерПадежа=-3;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Предложный Тогда
		НомерПадежа=-6;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Родительный Тогда
		НомерПадежа=-2;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Творительный Тогда
		НомерПадежа=-5;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Винительный Тогда
		НомерПадежа=-4;
	Иначе
		Возврат СтрокаФИО;
	КонецЕсли;
		
	СтрокаРезультат=Падеж(СокрЛП(СтрокаФИО), НомерПадежа);
	Возврат СтрокаРезультат;
	
Конецфункции

// Функция возвращает преобразованную в нужный падеж строку ФИО сокращая при этом ФИО до инициалов
// В аргуметах функции передается исходное ФИО и нужный падеж
Функция ПадежКраткоеИОФ(СтрокаФИО, Падеж) Экспорт
	
	Если Падеж=Перечисления.КП_Падежи.Именительный Тогда
		НомерПадежа=-1;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Дательный Тогда
		НомерПадежа=-3;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Предложный Тогда
		НомерПадежа=-6;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Родительный Тогда
		НомерПадежа=-2;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Творительный Тогда
		НомерПадежа=-5;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Винительный Тогда
		НомерПадежа=-4;
	Иначе
		Возврат СтрокаФИО;
	КонецЕсли;
		
	СтрокаРезультат=Падеж(СокрЛП(СтрокаФИО), НомерПадежа, , "231");
	Возврат СтрокаРезультат;
	
Конецфункции

// Функция возвращает преобразованную в нужный падеж строку названия предмета или должности
// В аргуметах функции передается исходное название или должность и нужный падеж
Функция ПадежПредмет(СтрокаПредмет, Падеж) Экспорт
	Если Падеж=Перечисления.КП_Падежи.Винительный Тогда
		НомерПадежа=-4;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Дательный Тогда
		НомерПадежа=-3;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Предложный Тогда
		НомерПадежа=-6;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Родительный Тогда
		НомерПадежа=-2;
	ИначеЕсли Падеж=Перечисления.КП_Падежи.Творительный Тогда
		НомерПадежа=-5;
	Иначе
		Возврат СтрокаПредмет;
	КонецЕсли;
		
	СтрокаРезультат=ПадежП(СокрЛП(СтрокаПредмет), НомерПадежа);
	
	//функция возвращает всю строку в нижнем регистре, поэтому заменим первую букву, 
	////что бы оставить её в нижнем регистре
	
	ПерваяБуква=Лев(СтрокаПредмет, 1);	
	
	Возврат ПерваяБуква+Прав(СтрокаРезультат, СтрДлина(СтрокаРезультат)-1);
	
	
Конецфункции

// Функция возвращает падеж и, при необходимости, производит преобразвование до инициалов
// Параметры:
// 	z1 - фамилия имя отчество например Железняков Юрий Юрьевич
// 	z2 - Падеж ( по  умолчанию = 2 - родительный)
// 		2 - родительный  ( нет кого?    ) Железнякова Юрия Юрьевича     
// 		3 - дательный    ( кому?        ) Железнякову Юрию Юрьевичу 
// 		4 - винительный  ( вижу кого?   ) Железнякова Юрия Юрьевича  
// 		5 - творительный ( кем?         ) Железняковым Юрием Юрьевичем    
// 		6 - предложный   ( о ком?       ) Железнякове Юрии Юрьевиче 
// 	Если задать Z2 меньше 0, то на выходе получим от -1=Железняков Ю. Ю. до -6=Железнякове Ю. Ю.
// 	z3 - параметр Пол может не указываться, но при наличии фамилий с 
// 	инициалами точное определение пола невозможно, поэтому предлагается задавать пол этим
// 	параметром  1 - мужской 2 - женский  
//	z5 - Служебный параметр
// 	---------------------------------------------------------------------------------------
// 	Если Падеж(Фио ,1 ,3),       то на выходе получим Фамилия Имя Отчество и т.д.
// 	Если Падеж(Фио ,1 ,3,"1" ),  то                   Фамилия 
// 	Если Падеж(Фио ,1 ,3,"2" ),  то                   Имя 
// 	Если Падеж(Фио ,1 ,3,"3" ),  то                   Отчество 
// 	Если Падеж(Фио, 1 ,3,"12" ), то                   Фамилия Имя 
// 	Если Падеж(Фио, 1 ,3,"23" ), то                   Имя Отчество 
//	Если Падеж(Фио,-1 ,3,"231" ),то                   И. О. Фамилия 
// 	Если Падеж(Фио,-1 ,3,"23" ), то                   И. О.  
//
// Возвращаемое значение: Преобразованное в нужный падеж Ф.И.О.
Функция Падеж(z1,z2=2,z3=3,z4="123",z5=1) Экспорт
	Если ВСтрокеЕстьАнглийскиеСимволы(z1) Тогда
		//преобразование не производим
		Возврат z1;
	КонецЕсли;
	
	z6=Нрег(Прав(СокрП(z1),4));
	z7=Прав(z6,1);
	Результат=?(z5<4,Падеж(СокрЛП(СтрЗаменить(Сред(z1,Найти(z1+" "," ")+1),".",". ")),z2,z3,СтрЗаменить(z4,z5,ПадежС(?((z5=3)и(z7="ы"),z1,Лев(z1,Найти(z1+" "," ")-1)),z2,Сред("ча"+z7,?(z3=3,?(z6="оглы",1,?(z6="кызы",1,3)),z3),1),z5)+" "),z5+1),z4);
	Возврат СокрЛП(Результат);
	
КонецФункции

// Функция выполняет преобразование в нужный падеж Ф.И.О.
// Параметры:
// 	z1 - фамилия имя отчество например Железняков Юрий Юрьевич
// 	z2 - Падеж ( по  умолчанию = 2 - родительный)
// 	z3 - Пол
// 	z4 - Служебный параметр
// Возвращаемое значение: Строка с нужным падежом
Функция ПадежС(z1,Знач z2=2,Знач z3="*",z4=0) Экспорт
	z5=Найти(z1,"-");
	z6=?(z5=0,"","-"+ПадежС(Сред(z1,z5+1,СтрДлина(z1)-z5+1),z2,z3,z4));
	//z1=НРег(?(z5=0,z1,Лев(z1,z5-1)));
	z1=Строка(?(z5=0,z1,Лев(z1,z5-1)));
	z7=Прав(z1,3);
	z8=Прав(z7,2);
	z9=Прав(z8,1);
	z1НРег=НРег(z1);
	z5НРег=НРег(z5);
	z7НРег=НРег(z7);
	z8НРег=НРег(z8);
	z9НРег=НРег(z9);
	z5=СтрДлина(z1);
	//za=Найти("ая ия ел ок яц ий па да ца ша ба та га ка",z8);
	za=Найти("ая ия ел ок яц ий па да ца ша ба та га ка",z8НРег);
	//zb=Найти("аеёийоуэюяжнгхкчшщ",Лев(z7,1));
	zb=Найти("аеёийоуэюяжнгхкчшщ",Лев(z7НРег,1));
	zc=Макс(z2,-z2);
	//zd=?(za=4,5,Найти("айяь",z9));
	zd=?(za=4,5,Найти("айяь",z9НРег));
	zd=?((zc=1)или(z9=".")или((z4=2)и(Найти("оиеу"+?(z3="ч","","бвгджзклмнпрстфхцчшщъ"),z9)>0))или((z4=1)и(Найти("мия мяэ лия кия жая лея",z7)>0)),9,?((zd=4)и(z3="ч"),2,?(z4=1,?(Найти("оеиую",z9)+Найти("их ых аа еа ёа иа оа уа ыа эа юа яа",z8НРег)>0,9,?(z3<>"ч",?(za=1,7,?(z9="а",?(za>18,1,6),9)),?(((Найти("ой ый",z8НРег)>0)и(z5>4)и(Найти("опой вбой",Прав(z1НРег,4))=0))или((zb>10)и(za=16)),8,zd))),zd)));
	ze=Найти("лец нёк вей бей дец пец мец нец рец вец аец иец ыец бер",z7НРег);
	//zf=?((zd=8)и(zc<>5),?((zb>15)или(Найти("жий ний",z7НРег)>0),"е","о"),?(z1="лев","ьв",?((Найти("аеёийоуэюя",Сред(z1,z5-3 ,1))=0)и((zb>11)или(zb=0))и(ze<>49),"",?(za=7,"л",?(za=10,"к",?(za=13,"йц",?(ze=0,"",?(ze<16,"ь"+?(ze=1,"ц",?(ze=5,"к","")),?(ze<41,"ц",?(ze<53,"йц","р"))))))))));
	zf=?((zd=8)и(zc<>5),?((zb>15)или(Найти("жий ний",z7НРег)>0),"е","о"),?(z1="лев","ьв",?((Найти("аеёийоуэюя",Сред(z1НРег,z5НРег-3 ,1))=0)и((zb>11)или(zb=0))и(ze<>49),"",?(za=7,"л",?(za=10,"к",?(za=13,"йц",?(ze=0,"",?(ze<16,"ь"+?(ze=1,"ц",?(ze=5,"к","")),?(ze<41,"ц",?(ze<53,"йц","р"))))))))));
	zf=?((zd=9)или((z4=3)и(Прав(z1,1)="ы")),z1,Лев(z1,z5-?((zd>6)или(zf<>""),2,?(zd>0,1,0)))+zf+СокрП(Сред("а у а "+?((z8="ич")или(z8="ыш"),"е",?((z8="ов")or(z8="ин"),"ы","о"))+"ме "+?(Найти("гжкхш",Лев(z8,1))>0,"и","ы")+" е у ойе я ю я ем"+?(za=16,"и","е")+" и е ю ейе и и ь ьюи и и ю ейи ойойу ойойойойуюойойгомуго"+?((zf="е")или(za=16)или((zb>12)и(zb<16)),"и","ы")+"мм",10*zd+2*zc-3,2)));
	//Возврат ?(""=z1,"",?(z4>0,ВРег(Лев(zf,1))+?((z2<0)и(z4>1),".",Сред(zf,2)),zf)+z6);
	Возврат ?(""=z1,"",?(z4>0,Строка(Лев(zf,1))+?((z2<0)и(z4>1),".",Сред(zf,2)),zf)+z6);
КонецФункции

// Функция выполняет преобразование в нужный падеж названия предмета или должности
// 	z1 - фамилия имя отчество например Железняков Юрий Юрьевич
// 	z2 - Падеж ( по  умолчанию = 2 - родительный)
// 	z3 - Пол
// Возвращаемое значение: Строка с нужным падежом предмета
Функция ПадежП(Знач z1,Знач z2,z3=0) Экспорт
	//проверим на исключения
	Если НРег(z1)="защиты" тогда
		Возврат "защиты";
	КонецЕсли;
	
	z1=СокрЛП(z1);z4=Найти(z1+" "," ")+1;z5=Лев(z1,z4-2);z6=Прав(z5,2);
	z7=?((Найти("ая ий ый",z6)>0)и(Найти("ющий нный",Сред(z1,z4-5,4))=0)и(z3=0),"1","*");
	//Возврат НРег(?((z6="ая")или(Прав(z6,1)="а"),ПадежС(z5,z2,z7,1)+" "+ПадежС(Сред(z1,z4),z2),ПадежС(z5,z2,"ч",1)+?((z6="ий")и(Найти(z1," ")=0),""," "+?(z7="1",ПадежП(Сред(z1,z4),z2,Число(z7)),Сред(z1,z4)))));
	Возврат Строка(?((z6="ая")или(Прав(z6,1)="а"),ПадежС(z5,z2,z7,1)+" "+ПадежС(Сред(z1,z4),z2),ПадежС(z5,z2,"ч",1)+?((z6="ий")и(Найти(z1," ")=0),""," "+?(z7="1",ПадежП(Сред(z1,z4),z2,Число(z7)),Сред(z1,z4)))));
	
КонецФункции

// Функция находит и возвращает предопределенное регламентное задание по его наименованию, переданному в аргументе
// Параметры:
//		НаименованиеЗадания - строковое имя задания
// Возвращаемое значение: Структура, содержащая параметры найденного регламентированного задания
Функция ПолучитьРегламентноеЗадание(НаименованиеЗадания) Экспорт
	
	РеглЗадание=РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания[НаименованиеЗадания]); 
	
	СтруктураРеглЗадания=Новый Структура;
	
	Если РеглЗадание=Неопределено Тогда
		Возврат СтруктураРеглЗадания;
	КонецЕсли;
	
	СтруктураРеглЗадания.Вставить("Идентификатор", РеглЗадание.УникальныйИдентификатор);
	СтруктураРеглЗадания.Вставить("Расписание", РеглЗадание.Расписание);
	СтруктураРеглЗадания.Вставить("Наименование", РеглЗадание.Наименование);
	
	Возврат СтруктураРеглЗадания;
	
КонецФункции

// Функция возвращает список сотрудников подразделения, подразделение передается в аргументе функции
// Параметры:
//		Подразделение - подразделение по которому нужно получить список
// Возвращаемое значение: Список значений, содержащий набор сотрудников указанного подразделения
Функция ПолучитьСписокСотрудниковПодразделения(Подразделение) Экспорт
	
	СписокСотрудников=Новый СписокЗначений;
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ПодразделенияСостав.Пользователь
	                    |ИЗ
	                    |	Справочник.Подразделения.Сотрудники КАК ПодразделенияСостав
	                    |ГДЕ
	                    |	ПодразделенияСостав.Ссылка = &Подразделение");
						
	Запрос.УстановитьПараметр("Подразделение", Подразделение);					
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		Пользователь=Выборка.Пользователь;
		Если СписокСотрудников.НайтиПоЗначению(Пользователь)=Неопределено Тогда
			СписокСотрудников.Добавить(Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокСотрудников;
	
КонецФункции

// Процедура устанавливает или снимает отбор в динамическом списке по переданному списку. 
// Параметры:
//	ДинСписок - инамический список 
//	ИмяОтбора - имя необходимого отбора
//	ЗначениеОтбора - значение отбора и флаг использования (истина или ложь)
//	ФлагИспользования - Истина, для установки отбора и Ложь для отключения
Процедура УстановитьОтборПоСписку(ДинСписок, ИмяОтбора, ЗначениеОтбора, ФлагИспользования=Истина, ВидСравненияВОтборе=Неопределено) Экспорт
	
	Если ВидСравненияВОтборе=Неопределено Тогда
		ВидСравненияВОтборе=ВидСравненияКомпоновкиДанных.ВСписке;
		
	КонецЕсли;
		
	
	ПолеОтбора=Новый ПолеКомпоновкиДанных(ИмяОтбора);
	НашлиЭлемент=Ложь;
	ЭлементыОтбора=ДинСписок.Отбор.Элементы;
	
	Для Каждого ЭлементОтбораДанных Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбораДанных)<>Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если ЭлементОтбораДанных.ЛевоеЗначение=ПолеОтбора Тогда //нашли нужный отбор, установим значения
			НашлиЭлемент=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если НЕ НашлиЭлемент Тогда
		ЭлементОтбораДанных = ДинСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = ПолеОтбора;
	КонецЕсли;
	
	ЭлементОтбораДанных.ПравоеЗначение=ЗначениеОтбора;
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияВОтборе;
	ЭлементОтбораДанных.Использование = ФлагИспользования;
	
КонецПроцедуры

// Функция производит разбор строки и формирование массива
// Важно - функция рекурсивная
// Возвращаемое значение: массив строк
Функция РазборСтроки(Знач ИсходнаяСтрока, МассивСтрок, Разделитель) Экспорт
	
    ПозицияСтроки=Найти(ИсходнаяСтрока, Разделитель);
	
    Если ПозицияСтроки=0 Тогда
        МассивСтрок.Добавить(ИсходнаяСтрока);
        Возврат МассивСтрок;
		
    Иначе
        МассивСтрок.Добавить(Сред(ИсходнаяСтрока,1,ПозицияСтроки-1));
        Возврат РазборСтроки(Сред(ИсходнаяСтрока, ПозицияСтроки+СтрДлина(Разделитель), СтрДлина(ИсходнаяСтрока)-ПозицияСтроки-СтрДлина(Разделитель) + 1), МассивСтрок, Разделитель);
	КонецЕсли;
	
КонецФункции

// Процедура обрабатывает текст сообщений об ошибке и выводит его пользователю
Процедура СообщитьОбОшибке(ТекстОшибки) Экспорт
	
	//найдем последнее двоеточие в строке
	
	ДлинаСтроки=СтрДлина(ТекстОшибки)-1;
	
	НомерПоследнегоДвоеточия=0; 
	
	Для НомерСимвола=0 По ДлинаСтроки Цикл
		Если Сред(ТекстОшибки, ДлинаСтроки-НомерСимвола, 1)=":" Тогда
			НомерПоследнегоДвоеточия=ДлинаСтроки-НомерСимвола;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСообщения=СокрЛП(Сред(ТекстОшибки, НомерПоследнегоДвоеточия+1));
	
	СообщениеПользователю=Новый СообщениеПользователю;
    СообщениеПользователю.Текст="Ошибка: "+СтрокаСообщения;
    СообщениеПользователю.Сообщить();	
	
КонецПроцедуры

// Процедура перезаписывает справочники ГруппыДоступа и ПрофилиГруппДоступа для обновления прав доступа
Процедура ОбновитьЭлементыСправочниковПравДоступа() Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                     |	ГруппыДоступа.Ссылка
	                     |ИЗ
	                     |	Справочник.ГруппыДоступа КАК ГруппыДоступа
	                     |ГДЕ
	                     |	ГруппыДоступа.ПометкаУдаления = ЛОЖЬ");
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект=Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			СпрОбъект.Записать();
		Исключение
			КП_ОбщееСервер.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                     |	ГруппыДоступа.Ссылка
	                     |ИЗ
	                     |	Справочник.ПрофилиГруппДоступа КАК ГруппыДоступа
	                     |ГДЕ
	                     |	ГруппыДоступа.ПометкаУдаления = ЛОЖЬ");
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		СпрОбъект=Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			СпрОбъект.Записать();
		Исключение
			КП_ОбщееСервер.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры

// Используется для первого обращения к базе данных при запуске системы
Процедура ЗаполнитьКэшТекстовПравДоступа() Экспорт
	
	Возврат;
	
КонецПроцедуры

// Удаляет ссылку на объект из личных папок пользователей
// Обычно используется при удалении объекта
Функция ПометитьОбъектВЛичнойПапкеНаУдаление(СсылкаНаОбъект) Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ЛичныеПапкиПользователей.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ЛичныеПапкиПользователей КАК КП_ЛичныеПапкиПользователей
	                    |ГДЕ
	                    |	КП_ЛичныеПапкиПользователей.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ЛичныеПапкиПользователей.СсылкаНаОбъект = &СсылкаНаОбъект");
	Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ЛичнаяПапкаОбъект=Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			ЛичнаяПапкаОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			КП_ОбщееСервер.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;

	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция удаляет теги исходного текста
Функция УдалитьHTMLТегИзТекста(ИсходныйТекст, НазваниеТега) Экспорт
	
	ТекстРезультат=ИсходныйТекст;
	
	ТекстРезультат=СтрЗаменить(ТекстРезультат, "<"+НазваниеТега+">", "");
	ТекстРезультат=СтрЗаменить(ТекстРезультат, "</"+НазваниеТега+">", "");
	
	НазваниеТега=ВРег(НазваниеТега);
	
	ТекстРезультат=СтрЗаменить(ТекстРезультат, "<"+НазваниеТега+">", "");
	ТекстРезультат=СтрЗаменить(ТекстРезультат, "</"+НазваниеТега+">", "");
	
	Возврат ТекстРезультат;
	
КонецФункции

// Функция проверяет похоодит ли релиз платформы для запуска конфигурации
// Возвращаемое значение: Булевое
Функция РелизПлатформыПодходит(МинимальныйРелиз) Экспорт
	
	//проверим версию платформы
	ИнформацияОСистеме=Новый СистемнаяИнформация;
	ТекущийРелиз=ИнформацияОСистеме.ВерсияПриложения;
	
	КалькуляцияТребуемогоРелиза=ПолучитьКалькуляциюРелиза(МинимальныйРелиз);
	КалькуляцияТекущегоРелиза=ПолучитьКалькуляциюРелиза(ТекущийРелиз);
	
	Если КалькуляцияТекущегоРелиза<КалькуляцияТребуемогоРелиза Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция выполняет расчет числа релиза на основе его строкового представления
// Функция используется для сравнения разных релизов на больше-меньше
// Параметры: СтрокаРелиза - исходная строка релиза
// Возвращаемое значение: Число
Функция ПолучитьКалькуляциюРелиза(СтрокаРелиза)
	
	КоличествоСимволов=СтрДлина(СтрокаРелиза);
	НомерЧастиРелиза=1;
	СтрокаЧисла="";
	КалькуляцияРелиза=0;
	Для НомерСимвола=1 По КоличествоСимволов Цикл
		СимволСтроки=Сред(СтрокаРелиза, НомерСимвола, 1);
		Если СимволСтроки="." Тогда
			ЧислоСтрокиЧисла=Число(СтрокаЧисла);
			Если НомерЧастиРелиза=1 Тогда
				Множитель=1000000;
			ИначеЕсли НомерЧастиРелиза=2 Тогда
				Множитель=100000;
			ИначеЕсли НомерЧастиРелиза=3 Тогда
				Множитель=1000;
			ИначеЕсли НомерЧастиРелиза=4 Тогда
				Множитель=1;
			КонецЕсли;				
			
			КалькуляцияРелиза=КалькуляцияРелиза+ЧислоСтрокиЧисла*Множитель;
			НомерЧастиРелиза=НомерЧастиРелиза+1;
			СтрокаЧисла="";
			
		Иначе
			СтрокаЧисла=СтрокаЧисла+СимволСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаЧисла) Тогда
		ЧислоСтрокиЧисла=Число(СтрокаЧисла);
		КалькуляцияРелиза=КалькуляцияРелиза+ЧислоСтрокиЧисла*1;
	КонецЕсли;
	
	Возврат КалькуляцияРелиза; 
	
КонецФункции

// Функция формирует и возвращает полное наименование элемента справчника
// Параметры: СсылкаНаСправочник - содержит ссылку на элемент справочника
// Возвращаемое значение: Строка
Функция ПолучитьПолноеНаименованиеЭлементаСправочника(СсылкаНаСправочник) Экспорт
	Если ЗначениеЗаполнено(СсылкаНаСправочник) Тогда
		Возврат СтрЗаменить(СсылкаНаСправочник.ПолноеНаименование(), "/", "\");
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Функция получает двоичные данные фотографии пользователя
// Параметры: СсылкаНаПользователя - содержит ссылку на пользователя
// Возвращаемое значение: ДвоичныеДанные или Неопределено
Функция ПолучитьДанныеФотографииПользователя(СсылкаНаПользователя) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаПользователя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	//найдем запись в регистре
	РегистрДанных = РегистрыСведений.КП_ДанныеПользователей;
	
	//проверим, есть ли запись в регистре
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ДанныеПользователей.Фотография
	                    |ИЗ
	                    |	РегистрСведений.КП_ДанныеПользователей КАК КП_ДанныеПользователей
	                    |ГДЕ
	                    |	КП_ДанныеПользователей.Пользователь = &Пользователь");
						
	Запрос.УстановитьПараметр("Пользователь", СсылкаНаПользователя);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		ХранилищеКартинки=Выборка.Фотография;
		Если ХранилищеКартинки<>Неопределено Тогда
			Возврат ХранилищеКартинки.Получить();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

// Функция получает фотографию пользователя
// Параметры: Пользователь - содержит ссылку на пользователя
// Возвращаемое значение: Картинка или Неопределено
Функция ПолучитьФотографиюПользователя(Пользователь) Экспорт
	ДвоичныеДанныеФотографии=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(Пользователь);
		//фотография пользователя
	Если ДвоичныеДанныеФотографии=Неопределено Тогда
		//Фотография=Новый Картинка;
		Фотография=БиблиотекаКартинок.КП_Исполнитель;
	Иначе
		Фотография=Новый Картинка(ДвоичныеДанныеФотографии, Истина);
	КонецЕсли;

	Возврат Фотография;
		
КонецФункции

// Функция создает новую структуру на основе исходной, переданной в аргументе
Функция СоздатьКопиюСтруктуры(ИсходнаяСтруктура) Экспорт
	
	НоваяСтруктура=Новый Структура;
	
	Для Каждого ЭлементИсходнойСтруктуры Из ИсходнаяСтруктура Цикл
		НоваяСтруктура.Вставить(ЭлементИсходнойСтруктуры.Ключ, ЭлементИсходнойСтруктуры.Значение);
		
	КонецЦикла;
	
	Возврат НоваяСтруктура;
	
КонецФункции

// Функция проверяет переданный в параметре тип на его простоту
// Параметры: ТипЗначения - содержит ссылку на тип значения
// Возвращаемое значение: Истина или Ложь
Функция ЭтоПростойТип(ТипЗначения) Экспорт
	Если ТипЗначения=Тип("Число")
		ИЛИ ТипЗначения=Тип("Строка")
		ИЛИ ТипЗначения=Тип("Булево")
	Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция формирует и возвращает строку длительности времени
// Параметры: ДатаНачало - начало даты, ДатаОкончание - окончание даты, 
// ПроцессСсылка -  ссылка на бизнес-процесс
// Возвращаемое значение: Строка
Функция ПолучитьСтрокуДлительности(ДатаНачало, ДатаОкончание, ПроцессСсылка=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаНачало) И ЗначениеЗаполнено(ПроцессСсылка) Тогда
		//возможная ситуация со старыми процессами
		ДатаНачало=КП_Процессы.ПолучитьДатуПервойЗаписиЖурнала(ПроцессСсылка);
	КонецЕсли;
	
	ВыводитьСекунды=Ложь;
	
	ДлительностьСекунд=ДатаОкончание-ДатаНачало;
	
	ДлинаМинуты=60;
	ДлинаЧаса=ДлинаМинуты*60;
	ДлинаДня=ДлинаЧаса*24;
	ДлинаНедели=ДлинаДня*7;
	ДлинаГода=ДлинаДня*365; //в этой версии функции не учитываются високосные
	
	//расчитаем длину исходя из полученной разницы в секундах
	
	ОстатокСекунд=ДлительностьСекунд;
	КоличествоЛет=Цел(ОстатокСекунд/ДлинаГода);
	
	//неделя считается с любого дня, а не с воскресенья (т.е. со среды по среду будет одна неделя и ноль дней)
	ОстатокСекунд=ОстатокСекунд-КоличествоЛет*ДлинаГода;
	КоличествоНедель=Цел(ОстатокСекунд/ДлинаНедели);
	
	ОстатокСекунд=ОстатокСекунд-КоличествоНедель*ДлинаНедели;
	КоличествоДней=Цел(ОстатокСекунд/ДлинаДня);
	
	ОстатокСекунд=ОстатокСекунд-КоличествоДней*ДлинаДня;
	КоличествоЧасов=Цел(ОстатокСекунд/ДлинаЧаса);
	
	ОстатокСекунд=ОстатокСекунд-КоличествоЧасов*ДлинаЧаса;
	КоличествоМинут=Цел(ОстатокСекунд/ДлинаМинуты);
	
	ОстатокСекунд=ОстатокСекунд-КоличествоМинут*ДлинаМинуты;
	
	КоличествоСекунд=ОстатокСекунд;
	
	//сформируем строку
	
	СтрокаРазницы="";
	
	Если КоличествоЛет>0 Тогда
		СтрокаРазницы=СтрокаРазницы+Формат(КоличествоЛет, "ЧН=; ЧГ=")+" г. ";
	КонецЕсли;
	
	Если КоличествоНедель>0 Тогда
		СтрокаРазницы=СтрокаРазницы+Формат(КоличествоНедель, "ЧН=; ЧГ=")+" нед. ";
	КонецЕсли;
	
	Если КоличествоДней>0 Тогда
		СтрокаРазницы=СтрокаРазницы+Формат(КоличествоДней, "ЧН=; ЧГ=")+" дн. ";
	КонецЕсли;
	
	СтрокаРазницы=СтрокаРазницы+Формат(КоличествоЧасов, "ЧЦ=2; ЧДЦ=0; ЧН=; ЧВН=")+" ч. ";
	
	СтрокаРазницы=СтрокаРазницы+Формат(КоличествоМинут, "ЧЦ=2; ЧДЦ=0; ЧН=; ЧВН=")+" мин. ";
	
	Если ВыводитьСекунды Тогда
		СтрокаРазницы=СтрокаРазницы+Формат(КоличествоСекунд, "ЧЦ=2; ЧДЦ=0; ЧН=; ЧВН=")+" с. ";
	КонецЕсли;
	
	Возврат СокрЛП(СтрокаРазницы);

КонецФункции

// Функция формирует текст xml-файла профиля группы
// Параметры: ПрофильГруппы - содержит ссылку на элемент справочника
// Возвращаемое значение: Строка
Функция ПолучитьXMLПрофиляГруппы(ПрофильГруппы) Экспорт
	
	ВерсияФайла=5.1;
	
    ЗаписьXML=Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(); //вывод будет идти в строку, а не файл
	
	СписокСоответствийМетаданных=Новый СписокЗначений;
	
	СтрокаДаты=Формат(ТекущаяДата(), "ДЛФ=DDT");
	СтрокаВерсии=СокрЛП(ВерсияФайла);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выгрузка профиля групп доступа: ';")+СокрЛП(ПрофильГруппы.Наименование));
    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Версия файла: ';")+Формат(ВерсияФайла, "ЧДЦ=2; ЧРД=."));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата: ';")+СтрокаДаты);	
	
	ИнформацияОСистеме=Новый СистемнаяИнформация;
	СтрокаВерсииПлатформы=СокрЛП(ИнформацияОСистеме.ВерсияПриложения);
	СтрокаРелиза=СокрЛП(Метаданные.Версия);
	
	//сформируем xml-файл
	
	ЗаписьXML=Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("root");
	ЗаписьXML.ЗаписатьАтрибут("webLibrary", "http://документооборот.net");
	ЗаписьXML.ЗаписатьАтрибут("type", "rules_profile");
	ЗаписьXML.ЗаписатьАтрибут("version", СтрокаВерсии);
	ЗаписьXML.ЗаписатьАтрибут("platform", СтрокаВерсииПлатформы);
	ЗаписьXML.ЗаписатьАтрибут("release", СтрокаРелиза);
	ЗаписьXML.ЗаписатьАтрибут("date", СтрокаДаты);
	ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(ПрофильГруппы.Наименование));
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("rules_profile");
	
	Попытка
    	ЗаписатьXML(ЗаписьXML, ПрофильГруппы.Ссылка.ПолучитьОбъект());
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат "";
		
	КонецПопытки;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //rules_profile
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //root
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выгрузка завершена.';en='Unloading completed.'"));

	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Функция выполняет удаление неподходящих символов из исходной строки
// Параметры: ИсходнаяСтрока - содержит исходную строку
// Возвращаемое значение: Строка
Функция УдалитьИсключительныеСимволыИзИмени(ИсходнаяСтрока) Экспорт
	
	НоваяСтрока="";
	КоличествоСимволов=СтрДлина(ИсходнаяСтрока);
	
	Для НомерСимвола=1 По КоличествоСимволов Цикл
		СимволСтроки=Сред(ИсходнаяСтрока, НомерСимвола, 1);
		Если СимволСтроки=" " Тогда
			НоваяСтрока=НоваяСтрока+СимволСтроки;
			Продолжить;
			
		КонецЕсли;
		
		КодСимволаСтроки=КодСимвола(СимволСтроки);
		
		Если КодСимволаСтроки>=97 И КодСимволаСтроки<=1103 Тогда //между латинской a и русской я
			НоваяСтрока=НоваяСтрока+СимволСтроки;
			
		ИначеЕсли КодСимволаСтроки>=48 И КодСимволаСтроки<=57 Тогда //цифры
			НоваяСтрока=НоваяСтрока+СимволСтроки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Функция формирует уникальный идентификатор исполнителя для получения возможности
// работать с одинаковыми исполнителями в одной табличной части бизнес-процессов,
// также можно использовать левую часть идентфикатора (до точки) для отслеживания исходного
// исполнителя, используемого при формировании идентификатора
// например, может быть полезно если исполнитель был заменен по 
// замещению сотрудников или была ролевая адресация
// 		Параметры: ТочкаАдресации - ссылка ролевую адресацию или на пользователя
// Возвращаемое значение: Строка
Функция СформироватьИднИсполнителя(ТочкаАдресации, БезСлучайнойЧасти=Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТочкаАдресации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЛеваяЧасть=Формат(ТочкаАдресации.УникальныйИдентификатор(), "ЧЦ=36; ЧН=; ЧВН=; ЧГ=");
	
	Если БезСлучайнойЧасти Тогда
		ЧислоСЧ=0;
		
	Иначе
		ГенераторСЧ=КП_ОбщееСерверПС.ПолучитьГСЧ();
		ЧислоСЧ=ГенераторСЧ.СлучайноеЧисло();
		
	КонецЕсли;
	
	ПраваяЧасть=Формат(ЧислоСЧ,"ЧЦ=13; ЧН=; ЧВН=; ЧГ="); 
	
	Возврат Лев(ЛеваяЧасть+"."+ПраваяЧасть, 50);
	
КонецФункции

// Функция проверяет является ли переданное в аргументе значение 
// реквизитом дополнительных свойств
// Параметр: РеквизитПроцесса - содержит ссылку на проверяемый элемент
// Возвращаемое значение: Истина или Ложь
Функция ЭтоРеквизитДополнительныхСвойств(РеквизитПроцесса) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РеквизитПроцесса) Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Попытка
		ЭтоРеквизитСвойство=РеквизитПроцесса.ТипРеквизита.ПринадлежитЭлементу(Справочники.КП_СписокМетаданных.Свойства)
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЭтоРеквизитСвойство=Ложь;
	КонецПопытки;
	
	Возврат ЭтоРеквизитСвойство;
		
КонецФункции

// Функция формирует и возвращает строку контактных данных пользователя
// Параметры: ТочкаАдресации - содержит ролевую адресацию или пользователя
// Возвращаемое значение: Строка
Функция ПолучитьСтрокуКонтактныхДанныхПользователя(ТочкаАдресации) Экспорт
	
	СтрокаКонтактныхДанных="";
		
	Если НЕ ЗначениеЗаполнено(ТочкаАдресации) Тогда
		Возврат СтрокаКонтактныхДанных;
		
	КонецЕсли;
	
	Если НЕ КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ТочкаАдресации) Тогда
		//ролевая адресация
		СтрокаАдресации=СокрЛП(ТочкаАдресации.РольИсполнителя);
		СтрокаАдресации=СтрокаАдресации+?(ЗначениеЗаполнено(ТочкаАдресации.ОсновнойОбъектАдресации), Символы.ПС+СокрЛП(ТочкаАдресации.ОсновнойОбъектАдресации), "");
		СтрокаАдресации=СтрокаАдресации+?(ЗначениеЗаполнено(ТочкаАдресации.ДополнительныйОбъектАдресации), Символы.ПС+СокрЛП(ТочкаАдресации.ДополнительныйОбъектАдресации), "");
		
		Возврат СтрокаАдресации;
		
	КонецЕсли;
	
	Пользователь=ТочкаАдресации;
	
	Телефон=Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
	СтрокаТелефона=СокрЛП(УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Пользователь, Телефон));
	
	ЭлПочта=Справочники.ВидыКонтактнойИнформации.EmailПользователя;
	СтрокаЭлПочты=СокрЛП(УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Пользователь, ЭлПочта));
	
	СтрокаКонтактныхДанных=СтрокаТелефона;
	
	Если НЕ ПустаяСтрока(СтрокаЭлПочты) Тогда
		СтрокаКонтактныхДанных=СтрокаКонтактныхДанных+?(ПустаяСтрока(СтрокаКонтактныхДанных), "", Символы.ПС)+СтрокаЭлПочты;
		
	КонецЕсли;
	
	Возврат СтрокаКонтактныхДанных;
	
КонецФункции

// Функция получает значение реквизита объекта 
// Параметры:
// 	Объект - объект для получения значения реквизита
// 	ИмяРеквизита - строка с именем реквизита
// Возвращаемое значение: Значение реквизита объекта
Функция ПолучитьЗначениеРеквизитаОбъекта(Объект, ИмяРеквизита) Экспорт
	Попытка
		ЗначениеРеквизита=Объект[ИмяРеквизита];
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ЗначениеРеквизита=Неопределено;
	КонецПопытки;
	
	Возврат ЗначениеРеквизита;
	
КонецФункции

// Функция ищет дополнительный реквизит документа
// Параметры:
// 	СсылкаНаОбъект - Ссылка на объект
// 	ИмяРеквизита - Имя реквизита
// Возвращаемое значение: Ссылка на дополнительный реквизит
Функция НайтиДополнительныйРеквизитДокумента(СсылкаНаОбъект, ИмяРеквизита)
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                     |	КП_КорпоративныйДокументДополнительныеРеквизиты.ДополнительныйРеквизит КАК ДополнительныйРеквизит
	                     |ИЗ
	                     |	Документ.КП_КорпоративныйДокумент.ДополнительныеРеквизиты КАК КП_КорпоративныйДокументДополнительныеРеквизиты
	                     |ГДЕ
	                     |	КП_КорпоративныйДокументДополнительныеРеквизиты.Ссылка = &Документ
	                     |	И КП_КорпоративныйДокументДополнительныеРеквизиты.ДополнительныйРеквизит.ПометкаУдаления = ЛОЖЬ
	                     |	И КП_КорпоративныйДокументДополнительныеРеквизиты.ДополнительныйРеквизит.Наименование = &Наименование");
						 
	Запрос.УстановитьПараметр("Документ", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("Наименование", ИмяРеквизита);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДополнительныйРеквизит;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция получает список рабочих групп пользователя
// Параметры:
// 	Пользователь - Пользователь
// Возвращаемое значение: Список рабочих групп пользователя
Функция ПолучитьСписокРабочихГруппПользователя(Пользователь) Экспорт

	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	КП_РабочиеГруппыСотрудники.Ссылка КАК РабочаяГруппа
	                    |ИЗ
	                    |	Справочник.КП_РабочиеГруппы.Сотрудники КАК КП_РабочиеГруппыСотрудники
	                    |ГДЕ
	                    |	КП_РабочиеГруппыСотрудники.Ссылка.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_РабочиеГруппыСотрудники.ТочкаАдресации = &ТочкаАдресации");
						
	Запрос.УстановитьПараметр("ТочкаАдресации", Пользователь);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокРабочихГрупп=Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		РабочаяГруппа=Выборка.РабочаяГруппа;
		Если СписокРабочихГрупп.НайтиПоЗначению(РабочаяГруппа)=Неопределено Тогда
			СписокРабочихГрупп.Добавить(РабочаяГруппа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокРабочихГрупп;

КонецФункции

// Функция получает пользователя по идентификатору
// Параметры:
// 	ИдентификаторПользователя - Идентификатор пользователя
// Возвращаемое значение: Ссылка на пользователя
Функция ПолучитьПользователяПоИдентификатору(ИдентификаторПользователя) Экспорт
	
	УникальнаяСсылка=Новый УникальныйИдентификатор(ИдентификаторПользователя);
	
	НайденнаяСсылка=Справочники.Пользователи.ПолучитьСсылку(УникальнаяСсылка);
	
	Возврат НайденнаяСсылка;
	
КонецФункции

// Функция получает контактную информацию пользователя
// Параметры:
// 	СсылкаНаОбъект - Ссылка на объект
// 	НазваниеКИ - Название контактной информации
// Возвращаемое значение: Строка
Функция ПолучитьКонтактнуюИнформациюПользователя(СсылкаНаОбъект, НазваниеКИ) Экспорт
	
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации.СправочникОрганизации;
	
	//определим параметры извлечения контактной информации из базы данных
	
	Если НазваниеКИ="Телефон" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.ТелефонПользователя;
		СтрокаРеквизита="Представление";
	ИначеЕсли НазваниеКИ="ЭлПочта" Тогда
		ТипКонтактнойИнформации=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
		ВидКонтактнойИнформации=Справочники.ВидыКонтактнойИнформации.EmailПользователя;
		СтрокаРеквизита="Представление";
	КонецЕсли;

	//найдем нужную строку в табличной части
	СтруктураКИ=Новый Структура("Тип, Вид", ТипКонтактнойИнформации, ВидКонтактнойИнформации);
	МассивСтрокКИ=СсылкаНаОбъект.КонтактнаяИнформация.НайтиСтроки(СтруктураКИ);
	
	Если МассивСтрокКИ.Количество()=0 Тогда
		//ни чего не найдено
		Возврат Неопределено;
		
	КонецЕсли;
	
	ЗначениеКИ=МассивСтрокКИ[0][СтрокаРеквизита];
	
	Возврат ЗначениеКИ;
		
КонецФункции

// Функция запаковывает файлы в zip архив
// Параметры:
// 	ПутьККаталогуФайлов - Путь к каталогу файлов
// 	ИмяАрхивногоФайла - Имя архивного файла
// 	ПарольДляАрхива - Пароль для архива
// Возвращаемое значение: Булево
Функция ЗапаковатьФайлыВZipАрхив(ПутьККаталогуФайлов, ИмяАрхивногоФайла, ПарольДляАрхива="") Экспорт
	
	ПутьКАрхиву=КП_ОбщееСервер.УдалитьПоследнийСимвол(ПутьККаталогуФайлов, "\")+"\"+ИмяАрхивногоФайла;
	
	НовыйАрхив=Новый ЗаписьZipФайла(ПутьКАрхиву, ПарольДляАрхива, "Передача файлов ГОСТ 53898-2010", МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Оптимальный, МетодШифрованияZIP.Zip20);
	
	//получим список xml-файлов в каталоге
	МассивФайлов=НайтиФайлы(ПутьККаталогуФайлов, "*.xml", Ложь);
	
	Для НомерФайла=0 По МассивФайлов.Количество()-1 Цикл
		ПутьКФайлу=МассивФайлов[НомерФайла].ПолноеИмя;
		НовыйАрхив.Добавить(ПутьКФайлу, РежимСохраненияПутейZIP.НеСохранятьПути, РежимОбработкиПодкаталоговZIP.НеОбрабатывать);
			
	КонецЦикла;
	
	Попытка
		НовыйАрхив.Записать();
		
	Исключение
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция получает структуру внешнего объекта
// Параметры:
// 	СсылкаНаОбъект - Ссылка на объект
// Возвращаемое значение: Структура
Функция ПолучитьСтруктуруВнешнегоОбъекта(СсылкаНаОбъект) Экспорт
	СтруктураОбъекта=Новый Структура("ИнформационнаяБаза, ИмяМетаданных, ВидМетаданных, ПредставлениеМетаданных, Платформа81", СсылкаНаОбъект.ИнформационнаяБаза, СсылкаНаОбъект.ИмяМетаданных, СсылкаНаОбъект.ВидМетаданных, СсылкаНаОбъект.Наименование, СсылкаНаОбъект.ИнформационнаяБаза.Платформа81);
	Если СсылкаНаОбъект.ИспользоватьФормыПоУмолчанию Тогда
		СтруктураОбъекта.Вставить("ФормаСписка", "");
		СтруктураОбъекта.Вставить("ФормаОбъекта", "");
	Иначе		
		СтруктураОбъекта.Вставить("ФормаСписка", СсылкаНаОбъект.НаименованиеФормыСписка);
		СтруктураОбъекта.Вставить("ФормаОбъекта", СсылкаНаОбъект.НаименованиеФормыОбъекта);
	КонецЕсли;
	
	Возврат СтруктураОбъекта;
	
КонецФункции

// Функция получает имя вида внешних метаданных
// Параметры:
// 	ВидМетаданных - Вид метаданных
// Возвращаемое значение: Строка
Функция ИмяВидаВнешнихМетаданных(ВидМетаданных) Экспорт
	Если ВидМетаданных=Перечисления.КП_ВидыМетаданных.ЖурналыДокументов Тогда
		Возврат "ЖурналыДокументов";
	ИначеЕсли ВидМетаданных=Перечисления.КП_ВидыМетаданных.ПланыСчетов Тогда
		Возврат "ПланыСчетов";
	ИначеЕсли ВидМетаданных=Перечисления.КП_ВидыМетаданных.ЖурналыДокументов Тогда
		Возврат "ЖурналыДокументов";
	Иначе
		Возврат СокрЛП(ВидМетаданных);
	КонецЕсли;
КонецФункции

// Функция определяет, используется ли корпоративный чат
// Параметры:
// 	 Нет
// Возвращаемое значение: Булево
Функция КорпоративныйЧатИспользуется() Экспорт
	Возврат Константы.аКорпоративныйЧатИспользование.Получить();
	
КонецФункции

// Функция получает реквизит объекта
// Параметры:
// 	СсылкаНаОбъект - Ссылка на объект
// 	ИмяРеквизита - Имя реквизита
// Возвращаемое значение: Ссылка на реквизит объекта
Функция ПолучитьРеквизитОбъекта(СсылкаНаОбъект, ИмяРеквизита) Экспорт
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ЗначениеРеквизита=СсылкаНаОбъект[ИмяРеквизита];
	Исключение
		ЗначениеРеквизита=Неопределено;
	КонецПопытки;
	
	Возврат ЗначениеРеквизита;
		
КонецФункции

// Функция получает значение списка по представлению
// Параметры:
// 	Список - Список значений
// 	Представление - Представление
// Возвращаемое значение: Элемент списка
Функция ПолучитьЗначениеСпискаПоПредставлению(Список, Представление) Экспорт
	Для Каждого ЭлементСписка Из Список Цикл
		Если ЭлементСписка.Представление=Представление Тогда
			Возврат ЭлементСписка.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Функция получает количество месяцев в периоде
// Параметры:
// 	ДатаНачало - Дата начала
// 	ДатаОкончание - Дата окончания
// Возвращаемое значение: Число
Функция ПолучитьКоличествоМесяцев(ДатаНачало, ДатаОкончание) Экспорт
	РазницаСекунд=ДатаОкончание-ДатаНачало;
	РазницаДней=РазницаСекунд/60/60/24;
	РазницаМесяцев=Цел(РазницаДней/30);
	
	Возврат РазницаМесяцев;
	
КонецФункции

// Функция получает параметр объекта
// Параметры:
// 	ОбъектСсылка - Объект ссылка
// 	ПараметрОбъекта - Параметр объекта
// 	ДатаПараметра - Дата параметра
// Возвращаемое значение: Ссылка на параметр объекта
Функция ПолучитьПараметрОбъекта(ОбъектСсылка, ПараметрОбъекта, ДатаПараметра=Неопределено) Экспорт
	
	Если ДатаПараметра=Неопределено Тогда
		ДатаПараметра=ТекущаяДата();
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                    |	КП_ПараметрыОбъектовСрезПоследних.ЗначениеПараметра
	                    |ИЗ
	                    |	РегистрСведений.КП_ПараметрыОбъектов.СрезПоследних(
	                    |			&ДатаПараметра,
	                    |			Объект = &Объект
	                    |				И ПараметрОбъекта = &ПараметрОбъекта) КАК КП_ПараметрыОбъектовСрезПоследних");
						
	Запрос.УстановитьПараметр("ДатаПараметра", ДатаПараметра);
	Запрос.УстановитьПараметр("ПараметрОбъекта", ПараметрОбъекта);
	Запрос.УстановитьПараметр("Объект", ОбъектСсылка);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеПараметра;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает представление срока выполнения
// Параметры:
// 	ЧасыМинутыЧисло - Часы минуты число
// 	ДатаВремя=Неопределено - Дата время = неопределено
// 	НеИспользоватьГрафикРаботы - Не использовать график работы
// Возвращаемое значение: Строка
Функция ПолучитьПредставлениеСрокаВыполнения(ЧасыМинутыЧисло, ДатаВремя=Неопределено, НеИспользоватьГрафикРаботы=Истина) Экспорт
	
	Если ЗначениеЗаполнено(ДатаВремя) Тогда
		//выведем дату и время без секунд
		СтрокаВремени=Формат(ДатаВремя, "ДФ='dd.MM.yy HH:mm'");
		Возврат СтрокаВремени;
		
	КонецЕсли;
	
	//получим срок в часах и минутах
		
	Часы=Окр(ЧасыМинутыЧисло, 0, РежимОкругления.Окр15как10);
	МинутыДесятичные=ЧасыМинутыЧисло-Часы;
	Минуты=60*МинутыДесятичные;
	
	Если Часы<=99 Тогда
		СтрокаЧасы=Формат(Часы,  "ЧЦ=2; ЧН=; ЧВН=");
	Иначе
		СтрокаЧасы=СокрЛП(Часы);
	КонецЕсли;
	
	СтрокаМинуты=Формат(Минуты,  "ЧЦ=2; ЧН=; ЧВН=");
	
	СтрокаВремени=СтрокаЧасы+":"+СтрокаМинуты;
	
	Если НЕ НеИспользоватьГрафикРаботы Тогда
		СтрокаВремени=СтрокаВремени+" (по графику)";

	КонецЕсли;
	
	Возврат СтрокаВремени;
	
КонецФункции

// Функция определяет есть ли в строке английские символы
// Параметры:
// 	ИсходнаяСтрока - Исходная строка
// Возвращаемое значение: Булево
Функция ВСтрокеЕстьАнглийскиеСимволы(ИсходнаяСтрока)
	НомерПоследнегоСимвола=СтрДлина(ИсходнаяСтрока)-1;
	Для НомерСимвола=0 По НомерПоследнегоСимвола Цикл
		КодСтроки=КодСимвола(Сред(ИсходнаяСтрока, НомерСимвола, 1));
		
		Если 
			(КодСтроки>=65 И КодСтроки<=90) //A-Z
			ИЛИ 
			(КодСтроки>=97 И КодСтроки<=122) //a-z
		Тогда
			Возврат Истина;
			
		Конецесли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Функция получает шрифт пользователя
// Параметры:
// 	Пользователь - Пользователь
// Возвращаемое значение: Шрифт
Функция ПолучитьШрифтПользователя() Экспорт
	ШрифтФорматированногоТекста=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("НастройкиПользователя", "ШрифтФорматированногоТекста");
	Если ШрифтФорматированногоТекста=Неопределено Тогда
		ШрифтФорматированногоТекста=ШрифтыСтиля.КП_ШрифтФорматированногоТекста;
	КонецЕсли;
	
	Возврат ШрифтФорматированногоТекста;
	
КонецФункции

// Функция получает расчетные счета организации
// Параметры:
// 	СсылкаНаОбъект - Ссылка на объект
// Возвращаемое значение: Строка
Функция ПолучитьРасчетныеСчетаОрганизации(СсылкаНаОбъект) Экспорт

	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	БанковскиеСчета.Ссылка
	                    |ИЗ
	                    |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                    |ГДЕ
	                    |	БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
	                    |	И БанковскиеСчета.Владелец = &Владелец");
						
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	СтрокаСчетов="";
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		РасчетныйСчет=Выборка.Ссылка;
		СтруктураРС=ПолучитьСтруктуруРасчетногоСчета(РасчетныйСчет);
		
		СтрокаСчета="расч. счет: "+СокрЛП(СтруктураРС.РасчетныйСчет)+"; ";
		
		Если ЗначениеЗаполнено(СтруктураРС.ДатаОткрытия) Тогда
			СтрокаСчета=СтрокаСчета+"Открыт: "+Формат(СтруктураРС.ДатаОткрытия, "ДФ=dd.MM.yyyy")+"; ";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтруктураРС.ДатаЗакрытия) Тогда
			СтрокаСчета=СтрокаСчета+"Закрыт: "+Формат(СтруктураРС.ДатаЗакрытия, "ДФ=dd.MM.yyyy")+"; ";
		КонецЕсли;
		
		СтрокаСчета=СтрокаСчета+"Банк: "+СокрЛП(СтруктураРС.БанкНаименование)+"; ";
		СтрокаСчета=СтрокаСчета+"Банк: "+СокрЛП(СтруктураРС.БанкНаименование)+"; ";
		СтрокаСчета=СтрокаСчета+"корр. счет: "+СокрЛП(СтруктураРС.БанкКоррСчет)+"; ";
		СтрокаСчета=СтрокаСчета+"БИК: "+СокрЛП(СтруктураРС.БанкБИК)+"; ";
		
		СтрокаСчетов=СтрокаСчетов+?(СтрокаСчетов="", "", Символы.ПС+Символы.ПС)+СтрокаСчета;
				
	КонецЦикла;
	
	Возврат СтрокаСчетов;
	
КонецФункции

// Функция получает учредителей организации
// Параметры:
// 	СсылкаНаОбъект - Ссылка на объект
// Возвращаемое значение: Строка
Функция ПолучитьУчредителейОрганизации(СсылкаНаОбъект) Экспорт

	СтруктураКИ=Новый Структура;
	
	СтрокаУчредителей="";
	
	Для Каждого СтрокаТЧ Из СсылкаНаОбъект.Учредители Цикл
		СтрокаУчредителя=СокрЛП(СтрокаТЧ.Учредитель);
		СтрокаУчредителя=СтрокаУчредителя+" "+Формат(СтрокаТЧ.ПроцентДоли, "ЧЦ=3; ЧДЦ=0; ЧН=; ЧГ=")+"%; ";
		
		СтрокаУчредителей=СтрокаУчредителей+?(СтрокаУчредителей="", "", Символы.ПС)+СтрокаУчредителя;
				
	КонецЦикла;
	
	Возврат СтрокаУчредителей;
	
КонецФункции

// Функция получает значение перечисления по представлению
// Параметры:
// 	НаименованиеПеречисления - Наименование перечисления
// 	Представление - Представление
// Возвращаемое значение: Значение перечисления
Функция ПолучитьЗначениеПеречисленияПоПредставлению(НаименованиеПеречисления, Представление) Экспорт

	Для НомерЗначения=0 По Перечисления[НаименованиеПеречисления].Количество()-1 Цикл
		
		ЗначениеПеречисления=Перечисления[НаименованиеПеречисления][НомерЗначения];
		ПредставлениеЗначения=СокрЛП(ЗначениеПеречисления);
		
		Если ПредставлениеЗначения=Представление Тогда
			Возврат ЗначениеПеречисления;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Функция получает дополнение объекта
// Параметры:
// 	ИсходныйОбъект - Исходный объект
// 	СтрокаДополнения - Строка дополнения
// Возвращаемое значение: Значение дополнения
Функция ПолучитьДополнениеОбъекта(ИсходныйОбъект, СтрокаДополнения) Экспорт
	
	Если ИсходныйОбъект=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Найти(СтрокаДополнения, ".")=0 Тогда
		Попытка
			Возврат ИсходныйОбъект[СтрокаДополнения];
		Исключение
			Возврат Неопределено;
		КонецПопытки
	КонецЕсли;
	
	//разобъем строку по точкам
	СписокДополнений=Новый СписокЗначений;
	МногострочнаяСтрока = СтрЗаменить(СтрокаДополнения, ".",Символы.ПС);
	Для НомерСтроки= 1 по СтрЧислоСтрок(МногострочнаяСтрока) Цикл
  	 	ДополнениеСтрока=СтрПолучитьСтроку(МногострочнаяСтрока, НомерСтроки);
		СписокДополнений.Добавить(ДополнениеСтрока);
	КонецЦикла;
	
	ТекущийОбъект=ИсходныйОбъект;
	Попытка
		Для Каждого ЭлементСписка Из СписокДополнений Цикл
			ИмяДополнения=ЭлементСписка.Значение;
			ТекущийОбъект=ТекущийОбъект[ИмяДополнения];			
		КонецЦикла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТекущийОбъект;
   
КонецФункции

// Функция получает из ФИО имя и отчество перед фамилией
// Параметры:
// 	Объект - Объект
// 	Фамилия - Фамилия
// 	Имя - Имя
// 	Отчество - Отчество
// Возвращаемое значение: Строка
Функция ИмяОтчествоФ(Объект, Фамилия="", Имя="", Отчество="") Экспорт //ИмяОтчество
	
	//отделим последнее слово, вернув первые символы без крайних пробелов
	ПолноеФИО=СокрЛП(Объект);
	ДлинаСтроки=СтрДлина(ПолноеФИО);
	Для Н=0 По ДлинаСтроки-1 Цикл
		НомерСимвола=ДлинаСтроки-Н;
		СимволСтроки=Сред(ПолноеФИО, НомерСимвола, 1);
		Если СимволСтроки=" " Тогда
			//нашли начало фамилии
			ИмяОтчество=СокрЛП(Лев(ПолноеФИО, НомерСимвола));
			Возврат ИмяОтчество;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолноеФИО; 
	
КонецФункции 

// Функция получает из ФИО имя отчество после фамилии
// Параметры:
// 	Объект - Объект
// 	Фамилия - Фамилия
// 	Имя - Имя
// 	Отчество - Отчество
// Возвращаемое значение: Строка
Функция ФИмяОтчество(Объект, Фамилия="", Имя="", Отчество="") Экспорт //ИмяОтчество
	
	//отделим первое слово, вернув первые символы без крайних пробелов
	ПолноеФИО=СокрЛП(Объект);
	ДлинаСтроки=СтрДлина(ПолноеФИО);
	Для НомерСимвола=0 По ДлинаСтроки-1 Цикл
		СимволСтроки=Сред(ПолноеФИО, НомерСимвола, 1);
		Если СимволСтроки=" " Тогда
			//нашли окончание фамилии
			ИмяОтчество=СокрЛП(Сред(ПолноеФИО, НомерСимвола));
			Возврат ИмяОтчество;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПолноеФИО; 
	
КонецФункции

// Функция ищет символ по номеру
// Параметры:
// 	ИсходныйТекст - Исходный текст
// 	Символ - Символ
// 	НомерСимвола - Номер символа
// Возвращаемое значение: Строка
Функция НайтиСимволПоНомеру(ИсходныйТекст, Символ, НомерСимвола) Экспорт
	НайденнаяПозиция=Найти(ИсходныйТекст, Символ);
	Если НайденнаяПозиция=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ИндексСимвола=НайденнаяПозиция;
	НомерНайденногоСимвола=1;
	
	ОстатокТекста=ИсходныйТекст;
	
	//теперь будем искать другие символы
	Пока НайденнаяПозиция>0 И НомерНайденногоСимвола<НомерСимвола Цикл
		//выделим остаток необработанного текста
		ОстатокТекста=Сред(ОстатокТекста, НайденнаяПозиция+1);
		
		//найдем в остатке символ
		НайденнаяПозиция=Найти(ОстатокТекста, Символ);
		
		//увеличим общий индекс по всему тексту
		ИндексСимвола=ИндексСимвола+НайденнаяПозиция;
		
		НомерНайденногоСимвола=НомерНайденногоСимвола+1;
		
	КонецЦикла;
	
	Возврат ИндексСимвола;
	
КонецФункции

// Функция получает список из строки
// Параметры:
// 	ЗначСтр - Значение строки
// 	Разделитель - Разделитель
// Возвращаемое значение: Список значений
Функция ПолучитьСписокИзСтроки(Знач Стр, Разделитель = ",") Экспорт
	СЗ = Новый СписокЗначений;
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.Добавить(Стр);
				Возврат СЗ;
			КонецЕсли;
			СЗ.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.Добавить(Стр);
				Возврат СЗ;
			КонецЕсли;
			СЗ.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
КонецФункции 

// Функция проверяет находится ли система в режиме отладки
// Параметры:
// 	Пользователь - Пользователь
// Возвращаемое значение: Булево
Функция ЭтоРежимОтладки(Пользователь) Экспорт
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	РежимОтладкиЗначение=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("НастройкиПользователя", "РежимОтладки", , СокрЛП(Пользователь));
	
	Если ТипЗнч(РежимОтладкиЗначение)=Тип("Булево") Тогда
		 Возврат РежимОтладкиЗначение;
		 
	Иначе
		 Возврат Ложь;
		 
	КонецЕсли;
	
КонецФункции

// Функция определяет можно ли использовать инстранные наименования 
// в формах бизнес-процессов
Функция ИспользоватьИностранныеНаименованияВФормахПроцессов() Экспорт
	Возврат Ложь;
КонецФункции

// Функция находит и возвращает контрагента по указанным параметрам
Функция НайтиКонтрагентаПоИННКПП(ИНН, КПП) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	Контрагенты.Ссылка
	                    |ИЗ
	                    |	Справочник.Контрагенты КАК Контрагенты
	                    |ГДЕ
	                    |	Контрагенты.КПП = &КПП
	                    |	И Контрагенты.ИНН = &ИНН
	                    |	И Контрагенты.ЭтоГруппа = ЛОЖЬ");
						
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Функция находит и получает документ по его номеру
Функция ПолучитьДокументПоНомеру(НомерДокумента, ДатаДокумента=Неопределено) Экспорт
	Если ДатаДокумента=Неопределено Тогда
		//Возврат Документы.КП_КорпоративныйДокумент.НайтиПоНомеру(НомерДокумента);
		Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		                    |	КП_КорпоративныйДокумент.Ссылка
		                    |ИЗ
		                    |	Документ.КП_КорпоративныйДокумент КАК КП_КорпоративныйДокумент
		                    |ГДЕ
		                    |	КП_КорпоративныйДокумент.Номер = &Номер");
							
		Запрос.УстановитьПараметр("Номер", НомерДокумента);
		Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		Возврат Документы.КП_КорпоративныйДокумент.НайтиПоНомеру(НомерДокумента, ДатаДокумента);
	КонецЕсли;
	
КонецФункции

// Функция возвращает связь реквизита и плана видов характеристик
Функция ПолучитьСвязьРеквизитаСПВХ(РеквизитПроцесса) Экспорт
	Возврат РеквизитПроцесса.ТипРеквизита.СвязьСПВХ;
	
КонецФункции

// Функия возвращает наименование объекта по переданной ссылке на объект
Функция ПолучитьНаименованиеОбъекта(ОбъектСсылка) Экспорт
	Если ТипЗнч(ОбъектСсылка)=Тип("ДокументСсылка.КП_КорпоративныйДокумент") Тогда
		Возврат СокрЛП(ОбъектСсылка.НаименованиеДокумента);
		
	ИначеЕсли ТипЗнч(ОбъектСсылка)=Тип("БизнесПроцессСсылка.КП_БизнесПроцесс") Тогда
		Возврат СокрЛП(ОбъектСсылка.Наименование);
		
	ИначеЕсли ТипЗнч(ОбъектСсылка)=Тип("ЗадачаСсылка.КП_Задача") Тогда
		Возврат СокрЛП(ОбъектСсылка.Наименование);
		
	Иначе
		Возврат СокрЛП(ОбъектСсылка);
		
	КонецЕсли;
	
КонецФункции

// Функция формирует список пользователей объекта
Функция ПолучитьСписокПользователейОбъекта(Объект) Экспорт
	
	Если КП_ОбщееСерверПС.ЭтоЗадачаБизнесПроцесса(Объект) Тогда
		СписокПользователей=Новый СписокЗначений;
		СписокПользователей.Добавить(Объект.Исполнитель);
		СписокПользователей.Добавить(Объект.БизнесПроцесс.Контролер);
		СписокПользователей.Добавить(Объект.БизнесПроцесс.Автор);

	ИначеЕсли КП_ОбщееСерверПС.ЭтоЭкземплярБизнесПроцесса(Объект) Тогда
		СписокПользователей=КП_Процессы.ПолучитьСписокОсновныхИсполнителейПроцесса(Объект);
		СписокПользователей.Добавить(Объект.Контролер);
		СписокПользователей.Добавить(Объект.Автор);
	
	КонецЕсли;
	
	Возврат СписокПользователей;
	
КонецФункции

// Функция формирует описание объекта по типу метаданных
Функция ПолучитьОписаниеТипаПоТипуМетаданных(ТипМетаданныхСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТипМетаданныхСсылка) Тогда
		Возврат Неопределено;
	
	ИначеЕсли ТипМетаданныхСсылка.Родитель=Справочники.КП_СписокМетаданных.МетаданныеДокументы Тогда
		НазваниеТипа=ТипМетаданныхСсылка.ПолноеНаименование;
		НазваниеТипа=СтрЗаменить(НазваниеТипа, "Документ.", "ДокументСсылка.");
		ОграничениеТипаРеквизита=Новый ОписаниеТипов(НазваниеТипа);
		
	ИначеЕсли ТипМетаданныхСсылка.Родитель=Справочники.КП_СписокМетаданных.МетаданныеСправочники Тогда
		НазваниеТипа=ТипМетаданныхСсылка.ПолноеНаименование;
		НазваниеТипа=СтрЗаменить(НазваниеТипа, "Справочник.", "СправочникСсылка.");
		ОграничениеТипаРеквизита=Новый ОписаниеТипов(НазваниеТипа);
		
	ИначеЕсли ТипМетаданныхСсылка.Родитель=Справочники.КП_СписокМетаданных.Числа Тогда
		КвалификаторЧисла=Новый КвалификаторыЧисла(ТипМетаданныхСсылка.РеквизитДлина, ТипМетаданныхСсылка.РеквизитТочность, ДопустимыйЗнак.Любой);
		ОграничениеТипаРеквизита=Новый ОписаниеТипов("Число", КвалификаторЧисла);
		
	ИначеЕсли ТипМетаданныхСсылка=Справочники.КП_СписокМетаданных.Числа Тогда
		КвалификаторЧисла=Новый КвалификаторыЧисла(10, 2, ДопустимыйЗнак.Любой);
		ОграничениеТипаРеквизита=Новый ОписаниеТипов("Число", КвалификаторЧисла);
		
	ИначеЕсли ТипМетаданныхСсылка.Родитель=Справочники.КП_СписокМетаданных.Строки Тогда
		КвалификаторСтроки=Новый КвалификаторыСтроки(ТипМетаданныхСсылка.РеквизитДлина);
		ОграничениеТипаРеквизита=Новый ОписаниеТипов("Строка", , КвалификаторСтроки);
		
	ИначеЕсли ТипМетаданныхСсылка=Справочники.КП_СписокМетаданных.Дата Тогда
		КвалификаторДаты=Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		ОграничениеТипаРеквизита=Новый ОписаниеТипов("Дата", ,КвалификаторДаты);
		
	ИначеЕсли ТипМетаданныхСсылка=Справочники.КП_СписокМетаданных.Булево Тогда
		КвалификаторЧисла=Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Любой);
		ОграничениеТипаРеквизита=Новый ОписаниеТипов("Булево", КвалификаторЧисла);
		
	ИначеЕсли ТипМетаданныхСсылка.ПринадлежитЭлементу(Справочники.КП_СписокМетаданных.Свойства) Тогда
		НазваниеТипа="СправочникСсылка.ЗначенияСвойствОбъектов";
		ОграничениеТипаРеквизита=Новый ОписаниеТипов(НазваниеТипа);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не определен тип ""';en='Type is not defined ""'")+СокрЛП(ТипМетаданныхСсылка));
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ОграничениеТипаРеквизита;
	
КонецФункции

// Функция проверяет, является ли реквизит числом
Функция ЭтоРеквизитЧисло(ТипМетаданныхСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТипМетаданныхСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ТипМетаданныхСсылка.Родитель=Справочники.КП_СписокМетаданных.Числа 
		ИЛИ ТипМетаданныхСсылка.ПринадлежитЭлементу(Справочники.КП_СписокМетаданных.Числа)
		ИЛИ ТипМетаданныхСсылка=Справочники.КП_СписокМетаданных.Числа
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция проверяет, является ли реквизит датой
Функция ЭтоРеквизитДата(ТипМетаданныхСсылка) Экспорт
	Если НЕ ЗначениеЗаполнено(ТипМетаданныхСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (ТипМетаданныхСсылка=Справочники.КП_СписокМетаданных.Дата);
	
КонецФункции

// Функция проверяет, является ли реквизит булевым
Функция ЭтоРеквизитБулево(ТипМетаданныхСсылка) Экспорт
	Если НЕ ЗначениеЗаполнено(ТипМетаданныхСсылка) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат (ТипМетаданныхСсылка=Справочники.КП_СписокМетаданных.Булево);
	
КонецФункции

// Возвращает последний элемент структуры - группировку
Функция ПолучитьПоследнийЭлементСтруктуры(ЭлементСтруктурыНастроек, Строки = Истина) Экспорт
	
	Если ТипЗнч(ЭлементСтруктурыНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") тогда
		Настройки = ЭлементСтруктурыНастроек.Настройки;
	ИначеЕсли ТипЗнч(ЭлементСтруктурыНастроек) = Тип("НастройкиКомпоновкиДанных") тогда
		Настройки = ЭлементСтруктурыНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Структура = Настройки.Структура;
	Если Структура.Количество() = 0 Тогда
		Возврат Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

// Возвращает группировку - детальные записи компоновщика настроек 
Функция ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) Экспорт 

	ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина); 
	
	Если ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") 
	Тогда 
		Если ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда 
			Возврат ПоследнийЭлементСтруктуры; 
		КонецЕсли; 
	КонецЕсли; 

	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаСвойствПоНаименованию(РеквизитПроцесса, Текст) Экспорт
	ВладелецРеквизита=КП_Процессы.ПолучитьСвязьРеквизитаСПВХ(РеквизитПроцесса);
	Если НЕ ЗначениеЗаполнено(ВладелецРеквизита) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденноеЗначение=Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Текст, Ложь, ,ВладелецРеквизита);
	
	Возврат НайденноеЗначение;
	
КонецФункции

// Функция формирует и возвращает строковое представление объекта
// Параметры: Ссылка на объект
// Возвращаемое значние - строка описания объекта
Функция ПолучитьПредставлениеОбъекта(СсылкаНаОбъект) Экспорт
	ТипЗначенияОбъекта=ТипЗнч(СсылкаНаОбъект);
	
	Если ТипЗначенияОбъекта=Тип("БизнесПроцессСсылка.КП_БизнесПроцесс")
		ИЛИ ТипЗначенияОбъекта=Тип("БизнесПроцессОбъект.КП_БизнесПроцесс") 
		ИЛИ ТипЗначенияОбъекта=Тип("ЗадачаСсылка.КП_Задача")
		ИЛИ ТипЗначенияОбъекта=Тип("ЗадачаОбъект.КП_Задача") Тогда
		СтрокаПредставленияОбъекта=СокрЛП(СсылкаНаОбъект.Наименование)+" №"+СокрЛП(СсылкаНаОбъект.Номер)+" от "+СокрЛП(СсылкаНаОбъект.Дата);
				
	//ИначеЕсли ТипЗначенияОбъекта=Тип("СправочникСсылка.Файлы")
	//	ИЛИ ТипЗначенияОбъекта=Тип("СправочникОбъект.Файлы") Тогда
	//	СтрокаПредставленияОбъекта=СокрЛП(СсылкаНаОбъект);
			
	Иначе
		СтрокаПредставленияОбъекта=СокрЛП(СсылкаНаОбъект);
		
	КонецЕсли;
	
	Возврат СтрокаПредставленияОбъекта;
	
КонецФункции

// Процедура сохраняет настройку пользователя
Процедура СохранитьНастройкуПользователя(КлючОбъекта, КлючНастройки, Настройка, Парам1=Неопределено, Парам2=Неопределено) Экспорт
	
	Попытка
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастройки, Настройка);

	Исключение
		ЗаписьЖурналаРегистрации("Сохранение настройки пользователя", УровеньЖурналаРегистрации.Ошибка, КлючОбъекта, КлючНастройки, "Произошла ошибка сохранения настройки пользователя");
		Возврат;
		
	КонецПопытки;

	Возврат;
	
КонецПроцедуры

// Функция загружает настройку пользователя
Функция ЗагрузитьНастройкуПользователя(КлючОбъекта, КлючНастройки, Парам1=Неопределено, Парам2=Неопределено) Экспорт
	
	ЗначениеПоУмолчанию=Неопределено;
	
	Попытка
		
		ЗначениеНастройки=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
											КлючОбъекта,
											КлючНастройки,
											ЗначениеПоУмолчанию);
		
		
	Исключение
		ЗаписьЖурналаРегистрации("Загрузка настройки пользователя", УровеньЖурналаРегистрации.Ошибка, КлючОбъекта, КлючНастройки, "Произошла ошибка загрузки настройки пользователя");
		ЗначениеНастройки=Неопределено;
		
	КонецПопытки;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

// Функция находит элемент метаданных по его наименованию
Функция ПолучитьЭлементМетаданныхПоИмени(ПолноеНаименование, РодительЭлемента=Неопределено) Экспорт
	Если ЗначениеЗаполнено(РодительЭлемента) Тогда
		НайденныйЭлемент=Справочники.КП_СписокМетаданных.НайтиПоРеквизиту("ПолноеНаименование", ПолноеНаименование, РодительЭлемента);	
	Иначе
		НайденныйЭлемент=Справочники.КП_СписокМетаданных.НайтиПоРеквизиту("ПолноеНаименование", ПолноеНаименование);	
	КонецЕсли;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

// Функция удаляет тег из основного текста XML
Функция УдалитьТегИзТекста(СтрокаXML, НазваниеТега) Экспорт
	//проверим на закрытый тег
	ЗакрытыйТег="<"+НазваниеТега+"/>";
	Если Найти(СтрокаXML, ЗакрытыйТег)>0 Тогда
		//сразу удалим из текста
		Возврат СтрЗаменить(СтрокаXML, ЗакрытыйТег, "");
	КонецЕсли;
	
	ТегНачало="<"+НазваниеТега+">";
	ТегОкончание="</"+НазваниеТега+">";
	
	ДлинаТегаОкончание=СтрДлина(ТегОкончание);
	
	НачалоБлокаТега=Найти(СтрокаXML, ТегНачало);
	Если НачалоБлокаТега=0 Тогда
		Возврат СтрокаXML;
		
	КонецЕсли;
	
	ОкончаниеБлокаТега=Найти(СтрокаXML, ТегОкончание)+ДлинаТегаОкончание;
	
	НоваяСтрока=Лев(СтрокаXML, НачалоБлокаТега-1);
	
	НоваяСтрока=НоваяСтрока+Сред(СтрокаXML, ОкончаниеБлокаТега+1);
	
	Возврат НоваяСтрока;
	
КонецФункции

// Функция формирует дерево ролей и групп по переданному наименованию
// формы и массива реквизитов
Функция СформироватьДеревоРолейИГрупп(ИмяФормы, МассивРеквизитов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//определим основной объект для которого требуются права доступа
	
	ТаблицаНеобходимыхРолей=КП_ОбщееСерверПС.ПолучитьТаблицуНеобходимыхРолей(ИмяФормы);
	Если ТаблицаНеобходимыхРолей=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийПользователь=Пользователи.АвторизованныйПользователь();
	
	//дополним таблицу ролями, необходиыми для просмотра реквизитов
		
	Для НомерРеквизита=0 По МассивРеквизитов.Количество()-1 Цикл
		РеквизитФормы=МассивРеквизитов[НомерРеквизита];
		ТипЗначенияРеквизита=РеквизитФормы.ТипЗначения.Типы()[0];
		
		ОбъектМетаданных=Метаданные.НайтиПоТипу(ТипЗначенияРеквизита);
		Если ОбъектМетаданных=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
 		ТаблицаРолейРеквизита=КП_ОбщееСерверПС.ПолучитьТаблицуНеобходимыхРолейОбъектаМетаданных(ОбъектМетаданных.ПолноеИмя(), ТекущийПользователь, Истина);
		
		Для Каждого СтрокаТЧ Из ТаблицаРолейРеквизита Цикл
			НоваяСтрока=ТаблицаНеобходимыхРолей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЦикла;
				
	КонецЦикла;
	
	ТаблицаНеобходимыхРолей.Свернуть("Роль,РольДляЧтенияДоступна,РольДляИзмененияДоступна, ОбъектДоступа");

	ДеревоРолейИГруппДоступа=Новый ДеревоЗначений;
	ДеревоРолейИГруппДоступа.Колонки.Добавить("Объект");
	ДеревоРолейИГруппДоступа.Колонки.Добавить("ЧтениеДоступно", Новый ОписаниеТипов("Булево"));
	ДеревоРолейИГруппДоступа.Колонки.Добавить("ИзменениеДоступно", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаТЧ Из ТаблицаНеобходимыхРолей Цикл
		Роль=СтрокаТЧ.Роль;
		
		НоваяВетвьДерева=ДеревоРолейИГруппДоступа.Строки.Добавить();
		
		НоваяВетвьДерева.Объект=Роль;
		НоваяВетвьДерева.ЧтениеДоступно=СтрокаТЧ.РольДляЧтенияДоступна;
		НоваяВетвьДерева.ИзменениеДоступно=СтрокаТЧ.РольДляИзмененияДоступна;
		
		Если НоваяВетвьДерева.ЧтениеДоступно И НоваяВетвьДерева.ИзменениеДоступно Тогда
			Продолжить;
		КонецЕсли;
		
		//сформируем и добавим список групп пользователей в ветвь роли
		РольИдентификатор=Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", "Роль."+Роль.Имя);
		Если РольИдентификатор.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для роли """+Роль+""" не найдено соответствие в справочнике идентификаторов метаданных");
			Продолжить;
			
		КонецЕсли;
		
		СписокГруппПользователей=КП_ОбщееСерверПС.ПолучитьСписокГруппПользователейСРолью(РольИдентификатор);
		
		Если СписокГруппПользователей.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиГруппРоли=НоваяВетвьДерева.Строки.Добавить();
		Для Каждого ЭлементСписка  Из СписокГруппПользователей Цикл
			ГруппаДоступа=ЭлементСписка.Значение;
			
			СтрокаГруппы=СтрокиГруппРоли.Строки.Добавить();
			СтрокаГруппы.Объект=ГруппаДоступа;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Макет = ПолучитьОбщийМакет("аДокументооборотТребуемыеРоли");
	
	ОбластьЗаголовокРолиИГруппы=Макет.ПолучитьОбласть("ЗаголовокРолиИГруппы");
	ОбластьРоль=Макет.ПолучитьОбласть("СтрокаРоль");
	ОбластьГруппаДоступа=Макет.ПолучитьОбласть("СтрокаГруппаДоступа");
	ОбластьПодвал=Макет.ПолучитьОбласть("Подвал");
	
	ОбластьЗаголовокАдминистраторы=Макет.ПолучитьОбласть("ЗаголовокАдминистраторы");
	ОбластьАдминистраторы=Макет.ПолучитьОбласть("СтрокаАдминистраторы");
	
	ТабДокумент=Новый ТабличныйДокумент;			
	
	ТабДокумент.Вывести(ОбластьЗаголовокРолиИГруппы);
	
	//выведем сформированное дерево
	
	Для Каждого СтрокаДерева Из ДеревоРолейИГруппДоступа.Строки Цикл
		ОбластьРоль.Параметры.Роль=СтрокаДерева.Объект;
		ОбластьРоль.Параметры.ДляЧтения=?(СтрокаДерева.ЧтениеДоступно, "V", "");
		ОбластьРоль.Параметры.ДляИзменения=?(СтрокаДерева.ИзменениеДоступно, "V", "");
		
		ТабДокумент.Вывести(ОбластьРоль);
		
		Для Каждого СтрокаГруппы Из СтрокаДерева.Строки Цикл
			Если СтрокаГруппы.Строки.Количество()>0 Тогда
				Для Каждого СтрокаГруппыОбъект Из СтрокаГруппы.Строки Цикл
					ОбластьГруппаДоступа.Параметры.ГруппаДоступа=СтрокаГруппыОбъект.Объект;
					ТабДокумент.Вывести(ОбластьГруппаДоступа);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	//выведем список администраторов
	Роль="ИзменениеУчастниковГруппДоступа";
	РольИдентификатор=Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("ПолноеИмя", "Роль."+Роль);
	Если РольИдентификатор.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для роли """+Роль+""" не найдено соответствие в справочнике идентификаторов метаданных");
		Возврат Неопределено;
	КонецЕсли;
	
	СписокГруппАдминистраторовДоступа=КП_ОбщееСерверПС.ПолучитьСписокГруппПользователейСРолью(РольИдентификатор);
	Если СписокГруппАдминистраторовДоступа.НайтиПоЗначению(Справочники.ГруппыДоступа.Администраторы)=Неопределено Тогда
		СписокГруппАдминистраторовДоступа.Добавить(Справочники.ГруппыДоступа.Администраторы);
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ГруппыДоступаПользователи.Пользователь
	                    |ИЗ
	                    |	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	                    |ГДЕ
	                    |	ГруппыДоступаПользователи.Ссылка.ПометкаУдаления = ЛОЖЬ
	                    |	И ГруппыДоступаПользователи.Ссылка В(&СписокГруппДоступа)");
						
	Запрос.УстановитьПараметр("СписокГруппДоступа", СписокГруппАдминистраторовДоступа);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Количество()>0 Тогда
		ТабДокумент.Вывести(ОбластьЗаголовокАдминистраторы);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		Пользователь=Выборка.Пользователь;
		
		КонтактныеДанные="";
		
		Если ТипЗнч(Пользователь)=Тип("СправочникСсылка.Пользователи") Тогда
			Если Пользователь.КонтактнаяИнформация.Количество()>0 Тогда
				СтрокаКонтактнойИнформации=Пользователь.КонтактнаяИнформация.Найти(Справочники.ВидыКонтактнойИнформации.EmailПользователя, "Вид");
				Если СтрокаКонтактнойИнформации<>Неопределено Тогда
					КонтактныеДанные=СтрокаКонтактнойИнформации.АдресЭП;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ОбластьАдминистраторы.Параметры.АдминистраторПользователь=Пользователь;
		ОбластьАдминистраторы.Параметры.АдминистраторКонтакты=КонтактныеДанные;
		
		ТабДокумент.Вывести(ОбластьАдминистраторы);
		
	КонецЦикла;
	
	ОбластьПодвал.Параметры.ДатаОтчета=ТекущаяДата();
	ТабДокумент.Вывести(ОбластьПодвал);
	
	ТабДокумент.ОтображатьГруппировки=Ложь;
	ТабДокумент.ОтображатьЗаголовки=Ложь;
	ТабДокумент.ОтображатьСетку=Ложь;
	ТабДокумент.ТолькоПросмотр=Истина;
	
	Возврат ТабДокумент;
	
КонецФункции

// Функция формируем дерево требуемых ролей для указанного действия и формы
Функция ПолучитьДеревоТребуемыхРолей(Действие, ИмяФормы, СписокРеквизитов, Пользователь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДеревоРолей=Новый ДеревоЗначений;
	ДеревоРолей.Колонки.Добавить("Объект");
	ДеревоРолей.Колонки.Добавить("Роль");
	ДеревоРолей.Колонки.Добавить("Доступна");
	
	//определим основной объект для которого требуются права доступа
	
	ТаблицаНеобходимыхРолей=КП_ОбщееСерверПС.ПолучитьТаблицуНеобходимыхРолей(Действие, ИмяФормы, Пользователь);
	Если ТаблицаНеобходимыхРолей=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаОбъекта=ДеревоРолей.Строки.Добавить();
	СтрокаОбъекта.Объект="Основной объект формы";
	Для Каждого СтрокаТЧ Из ТаблицаНеобходимыхРолей Цикл
		СтрокаРоли=СтрокаОбъекта.Строки.Добавить();
		СтрокаРоли.Роль=СтрокаТЧ.Роль;
		СтрокаРоли.Доступна=СтрокаТЧ.Доступна;
	КонецЦикла;
	
	//дополним таблицу ролями, необходиыми для просмотра реквизитов
		
	Для Каждого ЭлементСпискаРеквизитов Из СписокРеквизитов Цикл
		ТипРеквизита=ЭлементСпискаРеквизитов.Значение;
		НаименованиеЭлементаФормы=ЭлементСпискаРеквизитов.Представление;
		
		ОбъектМетаданных=Метаданные.НайтиПоТипу(ТипРеквизита);
		
		Если ОбъектМетаданных=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
 		ТаблицаРолейРеквизита=КП_ОбщееСерверПС.ПолучитьТаблицуНеобходимыхРолейОбъектаМетаданных(Действие, ОбъектМетаданных.ПолноеИмя(), Пользователь, Истина);
			
		СтрокаОбъекта=ДеревоРолей.Строки.Добавить();
		СтрокаОбъекта.Объект=НаименованиеЭлементаФормы+" ("+СокрЛП(ТипРеквизита)+")";
		Для Каждого СтрокаТЧ Из ТаблицаРолейРеквизита Цикл
			СтрокаРоли=СтрокаОбъекта.Строки.Добавить();
			СтрокаРоли.Роль=СтрокаТЧ.Роль;
			СтрокаРоли.Доступна=СтрокаТЧ.Доступна;
		КонецЦикла;
				
	КонецЦикла;
		
	Возврат ДеревоРолей;
	
КонецФункции

// Функция выполняет чтение файла формата pdg, содержащего записанный профиль
// группы доступа. 
// Параметры: ПутьКФайлу - содержит строку с путем к файлу
// Возвращаемое значение - Ссылка на профиль группы или Неопределено, если
// чтение было не успешным
Функция ПрочитатьПрофильГруппДоступаИзXML(СтрокаXML, ВыводитьСообщения=Истина) Экспорт
		
	МинимальноДопустимаяВерсияФайла=5.1;
	РелизСКоторогоИзмениласьВерсия="150501";
	ДатаСКоторогоИзмениласьВерсия=Дата("20150501");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	ЗагруженныйПрофиль=Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл

		ИмяУзла=ЧтениеXML.ЛокальноеИмя;
		
		Если ИмяУзла="root" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			
			СтрокаТипа=ЧтениеXML.ПолучитьАтрибут("type");
			Если СтрокаТипа<>"rules_profile" Тогда
				
				СтрокаСообщения="Внимание! Файл не содержит данных в профиле групп доступа.";
				СтрокаСообщения=СтрокаСообщения+" "+КП_ОбщееСерверПС.ПолучитьСообщениеОТипеBPLФайла(СтрокаТипа);
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения+НСтр("ru=' Чтение не произведено.';"));
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			СтрокаРелизаКонфигурациии=ЧтениеXML.ПолучитьАтрибут("release");

			//прочитаем аттрибуты корневого элемента
			СтрокаВерсии=ЧтениеXML.ПолучитьАтрибут("version");
			
			Если СтрокаВерсии=Неопределено ИЛИ ПустаяСтрока(СтрокаВерсии) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не найдена версия файла! Загрузка не произведена.';en='Version of the file is not found! Nothing done.'"));
				Возврат Неопределено;
			КонецЕсли;
			
			ВерсияФайла=Число(СтрокаВерсии);
			Если ВерсияФайла<МинимальноДопустимаяВерсияФайла Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Версия файла ';")+Формат(ВерсияФайла, "ЧДЦ=2; ЧРД=.")+НСтр("ru=' ниже чем необходимая (';")+Формат(МинимальноДопустимаяВерсияФайла, "ЧРД=.")+НСтр("ru='). Файл создан в устаревшем релизе '; en='). File was created in obsolet release ';")+СтрокаРелизаКонфигурациии+НСтр("en=' before ';ru=' до '")+Формат(ДатаСКоторогоИзмениласьВерсия, "ДФ=dd.MM.yyyy")+НСтр("en='. Loading was canceled.';ru='. Загрузка не произведена.'")+Символы.ПС+НСтр("ru='Выполните выгрузку в bpl-файл из релиза не старше чем '; en='Please create bpl-file in release ';")+РелизСКоторогоИзмениласьВерсия);
				Возврат Неопределено;
			КонецЕсли;
			
			Если ВыводитьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Версия файла ';")+Формат(ВерсияФайла, "ЧДЦ=2; ЧРД=."));
			КонецЕсли;
			
			СтрокаДаты=ЧтениеXML.ПолучитьАтрибут("date");
			
			Если ВыводитьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата: ';")+СокрЛП(СтрокаДаты));
			КонецЕсли;
			
			СтрокаНаименования=ЧтениеXML.ПолучитьАтрибут("name");
			
			Если ВыводитьСообщения Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Загрузка профиля групп доступа ""';en='Loading profile access groups ""'")+СокрЛП(СтрокаНаименования)+НСтр("ru='""...';"));
			КонецЕсли;

			//перейдем к следующим элементам
			Продолжить;
					
		ИначеЕсли ИмяУзла="rules_profile" Тогда
	        //прочитаем вид процесса
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    ЗагруженныйПрофиль=ПрочитатьXML(ЧтениеXML);
    				ЗагруженныйПрофиль.Записать();
					Если ВыводитьСообщения Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Загружен профиль групп доступа ""';en='Load profile group access ""'")+СокрЛП(ЗагруженныйПрофиль)+НСтр("ru='""';"));
					КонецЕсли;
					
				Иначе
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Чтение вида процесса не возможно.';en='Reading the form of the process is not possible.'"));
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
		КонецЕсли;
			
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
		
	Если ЗагруженныйПрофиль<>Неопределено Тогда
		Возврат ЗагруженныйПрофиль.Ссылка;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция формируем список реквизитов 
Функция ПолучитьСписокРеквизитов(ЭтаФорма) Экспорт
		
	СписокРеквизитов=Новый СписокЗначений;

	Для Каждого ЭлементФормы Из ЭтаФорма.Элементы Цикл
		Если ТипЗнч(ЭлементФормы)<>Тип("ПолеФормы") Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным=ЭлементФормы.ПутьКДанным;
		МассивПутьКДанным=КП_ОбщееСерверПС.ПолучитьМассивИзСтрокиСРазделителями(ПутьКДанным, ".");
		
		Если МассивПутьКДанным.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитФормы=ЭтаФорма[МассивПутьКДанным[0]];
		ТипРеквизитаФормы=ТипЗнч(РеквизитФормы);

		ПредставлениеЭлемента=ЭлементФормы.Заголовок;	
		
		Если ТипРеквизитаФормы=Тип("ДинамическийСписок") Тогда
			ОсновнаяТаблица=РеквизитФормы.ОсновнаяТаблица;
			Если ПустаяСтрока(ОсновнаяТаблица) Тогда
				Продолжить;
			КонецЕсли;
			
			//попытаемся получить тип 
			МассивНазванияТипа=КП_ОбщееСерверПС.ПолучитьМассивИзСтрокиСРазделителями(ОсновнаяТаблица, ".");
			ВидОбъектаМетаданных=МассивНазванияТипа[0];
			Если ВидОбъектаМетаданных="Документ" ИЛИ ВидОбъектаМетаданных="Справочник"
				ИЛИ ВидОбъектаМетаданных="Задача" ИЛИ ВидОбъектаМетаданных="БизнесПроцесс" 
			Тогда
				ОсновнаяТаблицаНазваниеТипа=ВидОбъектаМетаданных+"Ссылка."+МассивНазванияТипа[1];
				ТипОсновнойТаблицы=Тип(ОсновнаяТаблицаНазваниеТипа);	
			Иначе
				Продолжить;
			КонецЕсли;
			
			МетаданныеТаблицы=Метаданные.НайтиПоТипу(ТипОсновнойТаблицы);
			ИмяРеквизитаОбъектаТаблицы=МассивПутьКДанным[1];
			
			РеквизитОбъектаТаблицы=МетаданныеТаблицы.Реквизиты.Найти(ИмяРеквизитаОбъектаТаблицы);
			Если РеквизитОбъектаТаблицы=Неопределено Тогда
				Попытка
					РеквизитОбъектаТаблицы=МетаданныеТаблицы.РеквизитыАдресации.Найти(ИмяРеквизитаОбъектаТаблицы);
				Исключение
					//нет реквизитов адресации в объекте
				КонецПопытки;
			КонецЕсли;
			
			Если РеквизитОбъектаТаблицы=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТипРеквизитаФормы=РеквизитОбъектаТаблицы.Тип.Типы()[0];
			ПредставлениеЭлемента=ЭлементФормы.Заголовок;	
			Если ПустаяСтрока(ПредставлениеЭлемента) Тогда
				ПредставлениеЭлемента=ЭлементФормы.ПутьКДанным;
			КонецЕсли;

		ИначеЕсли ТипРеквизитаФормы=Тип("ДанныеФормыКоллекция") Тогда
			Продолжить;
			
		ИначеЕсли МассивПутьКДанным.Количество()>1 Тогда
			РеквизитФормы=РеквизитФормы[МассивПутьКДанным[1]];
			ТипРеквизитаФормы=ТипЗнч(РеквизитФормы);

		КонецЕсли;
		
		Если ПустаяСтрока(ПредставлениеЭлемента) Тогда
			ПредставлениеЭлемента=ЭлементФормы.Имя;
		КонецЕсли;

		СписокРеквизитов.Добавить(ТипРеквизитаФормы, ПредставлениеЭлемента);

	КонецЦикла;                                    
	
	Возврат СписокРеквизитов;
	
КонецФункции

// Функция является оберткой над функцией БСП и позволяет вызывать её из клиентских модулей
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек = "", ЗначениеПоУмолчанию = Неопределено, ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено) Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя);
	
КонецФункции

// Процедура является оберткой над функцией БСП и позволяет вызывать её из клиентских модулей
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек = "", Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, 
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь) Экспорт
	
	ОбщегоНазначения.ХранилищеСохранить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		Значение,
		ОписаниеНастроек,
		ИмяПользователя,
		НужноОбновитьПовторноИспользуемыеЗначения);
	
КонецПроцедуры

// Функция проверяет параметры работы демо-базы
// Параметры:
// 	 Нет
// Возвращаемое значение: Строка
Функция ПроверитьСрокДемоБазы() Экспорт
	
	СрокДемоПериодаДней=7;
	НачалоПредупрежденийПослеДней=5;
	
	ДатаНачалаВеденияУчета=Константы.КП_НачалоВеденияУчета.Получить();
	ТекущаяДатаБазы=ТекущаяДата();
	Если НЕ ЗначениеЗаполнено(ДатаНачалаВеденияУчета) ИЛИ ДатаНачалаВеденияУчета>ТекущаяДатаБазы Тогда
		Константы.КП_НачалоВеденияУчета.Установить(ТекущаяДата());
		Возврат "";
	КонецЕсли;

	ЗавершениеДемоПериода= КонецДня(ДатаНачалаВеденияУчета+СрокДемоПериодаДней*24*60*60);
	НачалоПредупреждений = КонецДня(ДатаНачалаВеденияУчета+НачалоПредупрежденийПослеДней*24*60*60);
	
	Если ТекущаяДатаБазы>ЗавершениеДемоПериода Тогда
		
		Возврат "СрокДемоБазыИстек";

	ИначеЕсли ТекущаяДатаБазы>НачалоПредупреждений Тогда
		
		Возврат ЗавершениеДемоПериода;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция возвращает значение из константы дополнительных параметров
Функция КонстантаДополнительныеПараметрыПолучить(ИмяПараметра, ЗначениеПоУмолчанию=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначениеКонстанты=Константы.КП_ДополнительныеПараметры.Получить().Получить();
	
	Если ЗначениеКонстанты=Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Если ЗначениеКонстанты.Свойство(ИмяПараметра) Тогда
		ЗначениеПараметра=ЗначениеКонстанты[ИмяПараметра];
	Иначе
		ЗначениеПараметра=ЗначениеПоУмолчанию;	
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Функция устанавливает значение в константу дополнительных параметров
Функция КонстантаДополнительныеПараметрыУстановить(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗначениеКонстанты=Константы.КП_ДополнительныеПараметры.Получить().Получить();
	
	Если ЗначениеКонстанты=Неопределено Тогда
		ЗначениеКонстанты=Новый Структура(ИмяПараметра);	
		ЗначениеКонстанты.Вставить(ИмяПараметра,ЗначениеПараметра);
	Иначе
		Если ЗначениеКонстанты.Свойство(ИмяПараметра) Тогда
			ЗначениеКонстанты[ИмяПараметра]=ЗначениеПараметра;
		Иначе
			ЗначениеКонстанты.Вставить(ИмяПараметра,ЗначениеПараметра);
		КонецЕсли;
	
	КонецЕсли;
	
	Константы.КП_ДополнительныеПараметры.Установить(Новый ХранилищеЗначения(ЗначениеКонстанты));
	
КонецФункции

// Функция обрабатывает возвраты в тексте функций
Функция ОбработатьВозвратыВТекстеФункции(Знач ТекстНаЯзыке1С, ПеременнаяРезультат="") Экспорт
	//Тексты функций выполняются через Выполнить(ТекстНаЯзыке1С) в таком режиме не 
	//предусмотрено прерывание в каких либо местах и возвраты
	//поэтому мы заменим все найденные Возврат в тексте ТекстНаЯзыке1С на приравнивание к ПеременнаяРезультат 
	//Также в местах найденного возврата добавим переход к метке ~ОкончаниеФункции;
	//Данная метка будет добавлена в конце процедуры
	//Если переменная ПеременнаяРезультат не задана, то будет просто произведен выход из функции/процедуры 
	
	ФункцияВозвращаетРезультат=НЕ ПустаяСтрока(ПеременнаяРезультат);
	Если ФункцияВозвращаетРезультат Тогда
		ПеременнаяРезультат=ПеременнаяРезультат+"=";
	КонецЕсли;
	
	ТекстНаЯзыке1С=ТекстНаЯзыке1С+Символы.ПС+"~ОкончаниеФункции:";
	
	ТекстСтроками=Новый ТекстовыйДокумент;
	СтрокиТекстаНаЯзыке1С=СтрЗаменить(ТекстНаЯзыке1С, ";", ";"+Символы.ПС);
	ТекстСтроками.УстановитьТекст(СтрокиТекстаНаЯзыке1С);
	
	Для НомерСтроки=1 По ТекстСтроками.КоличествоСтрок() Цикл
		СтрокаТекста=ТекстСтроками.ПолучитьСтроку(НомерСтроки);
		
		Если ФункцияВозвращаетРезультат Тогда
			Если Найти(СокрЛП(СтрокаТекста), "Возврат ")=1  Тогда
				НоваяСтрокаТекста=СтрЗаменить(СтрокаТекста, "Возврат ", ПеременнаяРезультат);
				                                                      
			ИначеЕсли Найти(СокрЛП(СтрокаТекста), "возврат ")=1 Тогда
				НоваяСтрокаТекста=СтрЗаменить(СтрокаТекста, "возврат ", ПеременнаяРезультат);
				
			Иначе
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрокаТекста=НоваяСтрокаТекста+Символы.ПС+"Перейти ~ОкончаниеФункции;";
			
		Иначе
			//функция не возвращает результат, поэтому просто найдем возврат
			СтрокаДляПоиска=НРег(СокрЛП(СтрЗаменить(СтрокаТекста, " ","")));
			Если Найти(СтрокаДляПоиска, "возврат;")=1 Тогда
				НоваяСтрокаТекста="Перейти ~ОкончаниеФункции;";
			Иначе
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстСтроками.ЗаменитьСтроку(НомерСтроки, НоваяСтрокаТекста); 
		
	КонецЦикла;
	
	НовыйТекстНаЯзыке1С=ТекстСтроками.ПолучитьТекст();
	
	Возврат НовыйТекстНаЯзыке1С;
	
КонецФункции

// Функция получается дополнительныве данные пользователя
Функция ПолучитьЗаписьДопДанныхПользователя(СсылкаНаПользователя) Экспорт
	
	РегистрДанных = РегистрыСведений.КП_ДанныеПользователей;
	
	//проверим, есть ли запись в регистре
	НаборДанных=РегистрДанных.СоздатьНаборЗаписей();
	НаборДанных.Отбор.Пользователь.Установить(СсылкаНаПользователя);
	НаборДанных.Прочитать();
	КоличествоЗаписей=НаборДанных.Количество();

	Если КоличествоЗаписей=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", СсылкаНаПользователя);
	
	РегистрДанных = РегистрыСведений.КП_ДанныеПользователей;
	КлючЗаписи = РегистрДанных.СоздатьКлючЗаписи(Отбор);
	
	Возврат КлючЗаписи;
	
КонецФункции

// Функция получает логин и пароль подключения к внешней базе данных
Функция ПолучитьПарольИЛогинЗаданногоПодключенияКБазе(ИнфБаза) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураПользователя=Новый Структура("Логин, Пароль");
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	аПодключенияКВнешнимБазам.ИмяПользователя,
	                    |	аПодключенияКВнешнимБазам.Пароль
	                    |ИЗ
	                    |	РегистрСведений.аПодключенияКВнешнимБазам КАК аПодключенияКВнешнимБазам
	                    |ГДЕ
	                    |	аПодключенияКВнешнимБазам.ИнформационнаяБаза = &ИнформационнаяБаза
	                    |	И аПодключенияКВнешнимБазам.Пользователь = &Пользователь");
						
	Пользователь=Пользователи.ТекущийПользователь();
	
	Запрос.УстановитьПараметр("ИнформационнаяБаза", ИнфБаза);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		СтруктураПользователя.Логин=Выборка.ИмяПользователя;
		СтруктураПользователя.Пароль=Выборка.Пароль;
	
	КонецЕсли;
	

	Возврат СтруктураПользователя;
	
КонецФункции

Функция ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, ДанныеФайла, УникальныйИдентификатор=Неопределено) Экспорт
	СтрокаОшибки="";
	ДанныеФайла=Неопределено;
	
	Результат=РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(ФайлСсылка, ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор);
	ОткрытоУспешно=Результат.ДанныеПолучены;
	Если НЕ ОткрытоУспешно Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ДанныеФайла;

КонецФункции

Функция ПолучитьЗначениеКонстанты(ИмяКонстанты) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы[ИмяКонстанты].Получить();
КонецФункции

// Процедура записывает значение в вспомогательный параметр сеанса
// Параметры:
//  ЗначениеПараметра - Значение параметра
Процедура ЗаписатьВспомогательныйПараметр(ЗначениеПараметра) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(ЗначениеПараметра)=Тип("Структура") Тогда
		ПараметрыСеанса.КП_Вспомогательный=Новый ХранилищеЗначения(ЗначениеПараметра);
	Иначе
		ПараметрыСеанса.КП_Вспомогательный=ЗначениеПараметра;	
	КонецЕсли;
		
КонецПроцедуры

// Функция получает значение из вспомогательного параметра сеанса
// Возвращаемое значение: Значение параметра
Функция ПрочитатьВспомогательныйПараметр() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		ЗначениеПараметра=ПараметрыСеанса.КП_Вспомогательный;
	Исключение
		//значение не было инициализирован
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(ЗначениеПараметра)=Тип("ХранилищеЗначения") Тогда
		ЗначениеПараметра=ЗначениеПараметра.Получить();
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Процедура вызывается при записи справочника или документа
// Параметры:
//	Источник - источник записи (справочник или документ)
//	Отказ - флаг отказа
Процедура ПриЗаписиСправочникаДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ТипИсточника=ТипЗнч(Источник);
	Если ТипИсточника=Тип("СправочникОбъект.КП_ТочкиПроцессов") 
		ИЛИ ТипИсточника=Тип("СправочникОбъект.КП_ВидыПроцессов")
		ИЛИ ТипИсточника=Тип("БизнесПроцессОбъект.КП_БизнесПроцесс")
		ИЛИ ТипИсточника=Тип("СправочникСсылка.КП_АвтозапускПроцессов") 
		ИЛИ ТипИсточника=Тип("СправочникОбъект.КП_АвтозапускПроцессов")
		или типИсточника=Тип("ДокументСсылка.НачислениеЗарплаты")
		или ТипИсточника=тип("ДокументОбъект.НачислениеЗарплаты")
		или типИсточника=тип("ДокументСсылка.ПлатежнаяВедомость")
		или типИсточника=тип("ДокументОбъект.ПлатежнаяВедомость")
	Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаЭлемент=Источник.Ссылка;
	
	//найдем в списке метаданных
	СписокАвтозапуска=КП_АвтозапускПС.ПолучитьСписокАвтозапускаПоНаименованиюИсточника(СсылкаНаЭлемент.Метаданные().ПолноеИмя());
	Если СписокАвтозапуска.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокАвтозапуска Цикл
		АвтозапускСсылка=ЭлементСписка.Значение;

		//проверим создавали ли уже процесс по этому источнику
		Если КП_Автозапуск.БылАвтозапуск(АвтозапускСсылка, СсылкаНаЭлемент) Тогда
			Продолжить;
		КонецЕсли;
					
		РезультатОтказ=ОбработкаСобытияАвтозапускПроцесса(СсылкаНаЭлемент, АвтозапускСсылка);
		
		Если РезультатОтказ Тогда
			Продолжить;
		КонецЕсли;
		
		УникальныйID=СокрЛП(Новый УникальныйИдентификатор);
		ПараметрыПроцедуры=Новый Массив;
		ПараметрыПроцедуры.Добавить(АвтозапускСсылка);
		ПараметрыПроцедуры.Добавить(АвтозапускСсылка.РабочаяГруппа);
		ПараметрыПроцедуры.Добавить(СсылкаНаЭлемент);
		
		ФоновыеЗадания.Выполнить("КП_Автозапуск.СоздатьИСтартоватьБизнесПроцессАвтозапуска", ПараметрыПроцедуры, УникальныйID, "Старт процесса """+СокрЛП(АвтозапускСсылка)+"""");
	
	КонецЦикла;
	
КонецПроцедуры

// Функция обработки события автозапуска процесса
// Параметры:
//	СсылкаНаЭлемент - ссылкан на элемент источник
//	АвтозапускСсылка - ссылка на элемент сравочника "КП_АвтозапускПроцессов"
// Возвращаемое значение: Булево
Функция ОбработкаСобытияАвтозапускПроцесса(СсылкаНаЭлемент, АвтозапускСсылка)

	СтруктураРезультатаВыполнения=Новый Структура("ЗавершеноУспешно, Отказ", Истина, Ложь);
	
	ТекстФункции=АвтозапускСсылка.ТекстФункции;
	
	Если КП_ОбщееСерверПС.ТекстФункцииСобытияПустой(ТекстФункции) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстФункции) Тогда
		
		СсылкаНаОбъект=СсылкаНаЭлемент;
		Отказ=Ложь;
		
		Попытка
			Выполнить(ТекстФункции);
		Исключение
			ТекстОшибки=ОписаниеОшибки();
			КП_ОбщееСервер.СообщитьОбОшибке(ТекстОшибки);
			Возврат Истина;
		КонецПопытки;
		
		Возврат Отказ;
		
	КонецЕсли;
	
	Возврат Ложь; //отказа нет
	
КонецФункции

// Процедура записывает информцию в журнал событий и выводит сообщение
// Параметры:
//  ТекстИнформации - Текст информации
//  ТекстСобытия - Текст события
//  ВывестиСообщение - Флаг вывода сообщения пользователю
Процедура ЗаписатьИнформацию(ТекстИнформации, ИмяСобытия="", ВывестиСообщение=Истина) Экспорт
	
	Если ПустаяСтрока(ИмяСобытия) Тогда
		ИмяСобытия="Конструктор процессов";
	КонецЕсли;
	
	ТекстСобытия=ИмяСобытия+": "+ТекстИнформации;
	
	ЗаписьЖурналаРегистрации(ТекстСобытия, УровеньЖурналаРегистрации.Информация, ,,ТекстИнформации);
	
	Если ВывестиСообщение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстИнформации);
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает информцию в журнал событий и выводит сообщение
// Параметры:
//  ТекстИнформации - Текст информации
//  ТекстСобытия - Текст события
//  ВывестиСообщение - Флаг вывода сообщения пользователю
Процедура ЗаписатьОшибку(ТекстОшибки, ИмяСобытия="", ВывестиСообщение=Истина) Экспорт
	
	Если ПустаяСтрока(ИмяСобытия) Тогда
		ИмяСобытия="Конструктор процессов";
	КонецЕсли;
	
	ТекстОшибки=ИмяСобытия+": "+ТекстОшибки;
	
	ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка, ,,ТекстОшибки);
	
	Если ВывестиСообщение Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет, представляет ли дополнительный реквизит ссылочное значение
// Параметры:
//	РеквизитСсылка - ссылка на дополнительный реквизит
// Возвращаемое значение: Булево
Функция ЭтоТипДополнительныйРеквизитСсылочный(РеквизитСсылка) Экспорт
	ЭтоСсылочныйТип=(РеквизитСсылка.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеДокументы 
						ИЛИ РеквизитСсылка.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеСправочники
						ИЛИ РеквизитСсылка.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеПроцессыИЗадачи);
						
	Возврат ЭтоСсылочныйТип;
	
КонецФункции

// Функция выполняет чтение дополнительного реквизита объекта
// Параметры:
//	ОбъектСсылка - ссылка на объект
//	Наименование - наименование реквизита
//	ИскатьПоИмени - флаг поиска по имени
// Возвращаемое значение: Ссылка на дополнительный реквизит
Функция ПрочитатьДопРеквизитОбъекта(ОбъектСсылка, Наименование, ИскатьПоИмени=Ложь) Экспорт
	
	//сначала найдем доп. реквизит по имени
	Если ИскатьПоИмени Тогда
		//поиск по имени для разработчика вида "Имя1_741b1043952145eea3d622283f365336"
		ПВХ=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", Наименование);
	Иначе
		//поиск по заголовку (как реквизит называется в экранной форме)
		ПВХ=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", Наименование);
	КонецЕсли;
	
	Если ПВХ=Неопределено ИЛИ ПВХ.Пустая() Тогда
		КП_ОбщееСервер.ЗаписатьИнформацию("Не найден доп. реквизит в планах видов характеристик с наименованием """+Наименование+"""");
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		СтрокаДопРеквизита=ОбъектСсылка.ДополнительныеРеквизиты.Найти(ПВХ, "Свойство");
	Исключение
		КП_ОбщееСервер.ЗаписатьИнформацию("Ошибка поиска дополнительного реквизита в """+СокрЛП(ОбъектСсылка)+"""");		
		КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки());		
		Возврат Неопределено;		
	КонецПопытки;
	
	Если СтрокаДопРеквизита=Неопределено Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	Если ПВХ.ВыводитьВВидеГиперссылки Тогда
		ЗначениеДопРеквизита=ПолучитьСсылкуИзСтрокиHTML(СтрокаДопРеквизита.ТекстоваяСтрока);
	Иначе	
		ЗначениеДопРеквизита=СтрокаДопРеквизита.Значение;
	КонецЕсли;
	
	Возврат ЗначениеДопРеквизита;
	
КонецФункции

// Функция выполняет запись дополнительного реквизита объекта
// Параметры:
//	ОбъектСсылка - ссылка на объект
//	Наименование - наименование реквизита
//	ЗначениеРеквизита - значение доп. реквизита
//	ИскатьПоИмени - флаг поиска по имени
// Возвращаемое значение: Ссылка на дополнительный реквизит
Функция ЗаписатьДопРеквизитОбъекта(ОбъектСсылка, Наименование, ЗначениеРеквизита, ИскатьПоИмени=Ложь) Экспорт
	
	//сначала найдем доп. реквизит по имени
	Если ИскатьПоИмени Тогда
		//поиск по имени для разработчика вида "Имя1_741b1043952145eea3d622283f365336"
		ПВХ=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", Наименование);
	Иначе
		//поиск по заголовку (как реквизит называется в экранной форме)
		ПВХ=ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Заголовок", Наименование);
	КонецЕсли;
	
	Если ПВХ=Неопределено ИЛИ ПВХ.Пустая() Тогда
		КП_ОбщееСервер.ЗаписатьИнформацию("Не найден доп. реквизит в планах видов характеристик с наименованием """+Наименование+"""");
		Возврат Неопределено;
	КонецЕсли;
	
	Объект=ОбъектСсылка.ПолучитьОбъект();
	
	Попытка
		СтрокаДопРеквизита=Объект.ДополнительныеРеквизиты.Найти(ПВХ, "Свойство");
	Исключение
		КП_ОбщееСервер.ЗаписатьИнформацию("Ошибка поиска дополнительного реквизита в """+СокрЛП(ОбъектСсылка)+"""");		
		КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки());		
		Возврат Неопределено;		
	КонецПопытки;
	
	Если СтрокаДопРеквизита=Неопределено Тогда
		//строки пока нет, добавим
		СтрокаДопРеквизита=Объект.ДополнительныеРеквизиты.Добавить();
		СтрокаДопРеквизита.Свойство=ПВХ;
	КонецЕсли;
	
	Если ПВХ.ВыводитьВВидеГиперссылки Тогда
		Если ПустаяСтрока(СтрокаДопРеквизита.ТекстоваяСтрока) Тогда
			СтрокаДопРеквизита.ТекстоваяСтрока=СформироватьСтрокуHTMLИзСтроки(ЗначениеРеквизита);
			СтрокаДопРеквизита.Значение=ЗначениеРеквизита;
		Иначе
			//попробуем внести новую гиперссылку в старое представление доп. реквизита
			СтарыйURL=ПолучитьСсылкуИзСтрокиHTML(СтрокаДопРеквизита.ТекстоваяСтрока);
			СтрокаДопРеквизита.ТекстоваяСтрока=СтрЗаменить(СтрокаДопРеквизита.ТекстоваяСтрока, СтарыйURL, ЗначениеРеквизита);
		КонецЕсли;
	Иначе	
		СтрокаДопРеквизита.Значение=ЗначениеРеквизита;
	КонецЕсли;
		
	Попытка
		Объект.Записать();
	Исключение
		КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции

// Функция получает ссылку из строки HTML
// Параметры:
//	ИсходныйТекст - текст ссылки HTML
// Возвращаемое значение: Строка
Функция ПолучитьСсылкуИзСтрокиHTML(ИсходныйТекст)
	
	//<a href = "http://e1.ru">сайт</a>
	ИсходныйТекстСсылки=СтрЗаменить(ИсходныйТекст, " ", "");
	НачалоURL=Найти(ИсходныйТекстСсылки, "<ahref=""");
	Если НачалоURL=0 Тогда
		Возврат ИсходныйТекст;
	КонецЕсли;
	
	ОстатокСтроки=Сред(ИсходныйТекстСсылки, НачалоURL+8);
	ОкончаниеURL=Найти(ОстатокСтроки, """>");
	Если ОкончаниеURL=0 Тогда
		Возврат ИсходныйТекст;
	КонецЕсли;
	
	СтрокаURL=Лев(ОстатокСтроки, ОкончаниеURL-1);
	Возврат СтрокаURL;
	
КонецФункции

// Функция формируем строку HTML из строки
// Параметры:
//	СтрокаURL - строка URL
//	ТекстСсылки -текст ссылки
// Возвращаемое значение: Строка (HTML)
Функция СформироватьСтрокуHTMLИзСтроки(СтрокаURL, ТекстСсылки="")
	
	//<a href = "http://e1.ru">сайт</a>
	Если ПустаяСтрока(ТекстСсылки) Тогда
		ТекстСсылкиURL=СтрокаURL;
	Иначе
		ТекстСсылкиURL=ТекстСсылки;
	КонецЕсли;
	
	СтрокаHTML="<a href = """+СокрЛП(СтрокаURL)+""">"+СокрЛП(ТекстСсылкиURL)+"</a>";
	Возврат СтрокаHTML;
	
КонецФункции

// Функция возвращает список шаблонов сообщений по имени типа параметрам
// Параметры:
//	ИмяТипаПараметра - имя типа параметра
// Возвращаемое значение: Список значений
Функция ПолучитьСписокШаблоновПоТипуПараметра(ИмяТипаПараметра="Задача.КП_Задача") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Список=Новый СписокЗначений;
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	ШаблоныСообщений.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Справочник.ШаблоныСообщений КАК ШаблоныСообщений
	                    |ГДЕ
	                    |	ШаблоныСообщений.ПометкаУдаления = ЛОЖЬ
	                    |	И ШаблоныСообщений.ПолноеИмяТипаПараметраВводаНаОсновании = &ПолноеИмяТипаПараметра");
	
	Запрос.УстановитьПараметр("ПолноеИмяТипаПараметра", ИмяТипаПараметра);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		Шаблон=Выборка.Ссылка;
		Если Список.НайтиПоЗначению(Шаблон)=Неопределено Тогда
			Список.Добавить(Шаблон);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Процедура выполняет обработку настроек уведомлений
// Параметры:
//	СсылкаНаИсточник - ссылка на источник
Процедура ОбработатьНастройкиУведомлений(СсылкаНаИсточник) Экспорт
	
	Типы = Новый Массив;	
	Типы.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));
	Типы.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	Типы.Добавить(Тип("ДокументСсылка.ЗаказНаПроизводство"));
	Типы.Добавить(Тип("ДокументСсылка.Событие"));
	Типы.Добавить(Тип("ДокументСсылка.ЗаданиеНаРаботу"));
	Типы.Добавить(Тип("ДокументСсылка.ПриемИПередачаВРемонт"));
	Типы.Добавить(Тип("СправочникСсылка.РабочиеМеста"));
	Типы.Добавить(Тип("ЗадачаСсылка.КП_Задача"));
	
	ДанныеКОбработке = Новый ТаблицаЗначений;
	ДанныеКОбработке.Колонки.Добавить("Источник",			Новый ОписаниеТипов(Типы));
	ДанныеКОбработке.Колонки.Добавить("СобытиеПроцесса",	Новый ОписаниеТипов("ПеречислениеСсылка.СобытияРабочегоПроцесса"));
	ДанныеКОбработке.Колонки.Добавить("Автор",				Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДанныеКОбработке.Колонки.Добавить("ДанныеИсточника");
	
	СтрокаДанных = ДанныеКОбработке.Добавить();
	СтрокаДанных.Источник			= СсылкаНаИсточник;
	СтрокаДанных.СобытиеПроцесса	= Перечисления.СобытияРабочегоПроцесса.КП_Задача;
	СтрокаДанных.Автор				= Пользователи.ТекущийПользователь();

	РабочиеПроцессы.ОбработатьПравилаРабочихПроцессов(ДанныеКОбработке);
	
КонецПроцедуры

// Функция определяет, включено ли использование мобильного клиента с объектами модуля
// Возвращаемое значение: Булево
Функция ИспользоватьМобильныйКлиент() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.КП_ПоддержкаМобильногоКлиента.Получить();
КонецФункции

#КонецОбласти

#Область РаботаСКалендарем

Процедура ДополнитьКалендарьПользователя(Планировщик, МассивКалендарей) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ Константы.КП_ПоказыватьЗадачиВКалендаре.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Задачи.КП_Задача, Пользователи.АвторизованныйПользователь()) Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраныйПользователь=Неопределено;
	Для Каждого ЭлементМассива Из МассивКалендарей Цикл
		Если ЭлементМассива.Наименование=СокрЛП(ЭлементМассива.Пользователь) Тогда
			ВыбраныйПользователь=ЭлементМассива.Пользователь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ВыбраныйПользователь) Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата=ТекущаяДата();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	КП_Задача.Ссылка КАК Задача,
	               |	КП_Задача.ДатаВыполненияПлан КАК ДатаВыполненияПлан,
	               |	ЕСТЬNULL(КП_ПараметрыЗадачСрезПоследних.ЗначениеПараметра, 0) КАК ПроцентВыполнения
	               |ИЗ
	               |	Задача.КП_Задача КАК КП_Задача
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ПараметрыЗадач.СрезПоследних(&ТекущаяДата, ПараметрЗадачи = &ПараметрВыполнениеПроцент) КАК КП_ПараметрыЗадачСрезПоследних
	               |		ПО КП_ПараметрыЗадачСрезПоследних.Задача = КП_Задача.Ссылка
	               |ГДЕ
	               |	КП_Задача.ПометкаУдаления = ЛОЖЬ
	               |	И КП_Задача.Выполнена = ЛОЖЬ
	               |	И КП_Задача.ТочкаМаршрута <> &СлужебнаяТочка";
	
	Если ЗначениеЗаполнено(ВыбраныйПользователь) Тогда
		ТекстЗапроса=ТекстЗапроса+" И КП_Задача.Исполнитель=&ВыбраныйПользователь";
		Запрос.УстановитьПараметр("ВыбраныйПользователь", ВыбраныйПользователь);
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
			|	
			|УПОРЯДОЧИТЬ ПО
			|	ДатаВыполненияПлан";
	
	Запрос.Текст=ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);
	Запрос.УстановитьПараметр("ПараметрВыполнениеПроцент", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ВыполнениеПроцент);
	Запрос.УстановитьПараметр("СлужебнаяТочка", БизнесПроцессы.КП_БизнесПроцесс.ТочкиМаршрута.ВыполнениеКорпоративногоПроцесса);
	РезультатЗапроса=Запрос.Выполнить();
	
	Выборка=РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗадачаСсылка=Выборка.Задача;
		
		СтруктураПоложенияВКалендаре=КП_ЗадачиПроцессов.ПолучитьПоложениеВПанели(ЗадачаСсылка, ВыбраныйПользователь, "Календарь");
		Если СтруктураПоложенияВКалендаре=Неопределено Тогда	
			ДатаОкончания=Выборка.ДатаВыполненияПлан;
			ДатаНачала=ДатаОкончания-1*60*60;
		Иначе
			ДатаНачала=СтруктураПоложенияВКалендаре.ДатаНачала;
			ДатаОкончания=СтруктураПоложенияВКалендаре.ДатаОкончания;
		КонецЕсли;
		
		НовыйЭлемент=Планировщик.Элементы.Добавить(ДатаНачала, ДатаОкончания);
		
		ТекстЗадачи=СокрЛП(ЗадачаСсылка.Наименование);
		
		Если НачалоДня(Выборка.ДатаВыполненияПлан)=НачалоДня(ТекДата) Тогда
			СтрокаСрока="Срок: "+Формат(Выборка.ДатаВыполненияПлан,"ДФ='HH:mm'" );
		Иначе
			СтрокаСрока="Срок: "+Формат(Выборка.ДатаВыполненияПлан,"ДФ='HH:mm dd.MM.yy'" );
		КонецЕсли;
		
		ТекстЗадачи=ТекстЗадачи+Символы.ПС+СтрокаСрока;
		ТекстЗадачи=ТекстЗадачи+Символы.ПС+"От: "+КП_ОбщееСерверПС.ПолучитьФИОПользователя(ЗадачаСсылка.Автор);
		
		Если ВыбраныйПользователь<>ЗадачаСсылка.Исполнитель Тогда
			ТекстЗадачи=ТекстЗадачи+Символы.ПС+"Исп.: "+КП_ОбщееСерверПС.ПолучитьФИОПользователя(ЗадачаСсылка.Исполнитель);
		КонецЕсли;
		
		НовыйЭлемент.Текст=ТекстЗадачи;
		НовыйЭлемент.Значение=ЗадачаСсылка;
		
		СтруктураЦвета=КП_ОформлениеСтрокСервер.ПолучитьСтруктуруЦветаОбъекта(ЗадачаСсылка, ВыбраныйПользователь, Истина);
		
		ЗадачаПросрочена=(ЗадачаСсылка.ДатаВыполненияПлан<ТекущаяДата());
		Если ЗадачаПросрочена Тогда
			НовыйЭлемент.ЦветРамки=ЦветаСтиля.ПросроченноеЗадание;
			НовыйЭлемент.Подсказка="ПРОСРОЧЕНО";
		КонецЕсли;
		
		Если СтруктураЦвета=Неопределено Тогда
			//стандартные цвета задачи
			Если ЗадачаПросрочена Тогда
				НовыйЭлемент.ЦветФона=ЦветаСтиля.ПросроченноеЗадание;
			КонецЕсли;
		Иначе
			//установим  цвет пользователя
			НовыйЭлемент.ЦветТекста=СтруктураЦвета.ЦветТекста;
			НовыйЭлемент.ЦветФона=СтруктураЦвета.ЦветФона;
			НовыйЭлемент.Шрифт=Новый Шрифт(,,СтруктураЦвета.ШрифтЖирный,СтруктураЦвета.ШрифтНаклонный);			
		КонецЕсли;
		
		Если Выборка.ПроцентВыполнения>0 Тогда
			НовыйЭлемент.ЦветРамки=WebЦвета.Желтый;
			НовыйЭлемент.Подсказка="В работе";
		ИначеЕсли Выборка.ПроцентВыполнения=0 Тогда
			НовыйЭлемент.Подсказка="Не начато";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПользователяПоСотруднику(Сотрудник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	СотрудникиПользователя.Пользователь КАК Пользователь
	                    |ИЗ
	                    |	РегистрСведений.СотрудникиПользователя КАК СотрудникиПользователя
	                    |ГДЕ
	                    |	СотрудникиПользователя.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьИзменениеПоложенияВКалендаре(ЗадачаСсылка, Пользователь, ДатаНачала, Окончание) Экспорт
			
	Если НЕ ЗначениеЗаполнено(ЗадачаСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Окончание) Тогда
		Возврат;
	КонецЕсли;
	
	КП_ЗадачиПроцессов.ЗаписатьПоложениеВПанели(ЗадачаСсылка, Пользователь, ДатаНачала, Окончание, "Календарь");

КонецПроцедуры

Функция ТекущийПользователь() Экспорт
	ТекПользователь=Пользователи.ТекущийПользователь();
	Возврат ТекПользователь;
КонецФункции

#КонецОбласти //РаботаСКалендарем


// См. УправлениеДоступомПереопределяемый.ПриЗаполненииПоставляемыхПрофилейГруппДоступа
//
Процедура ПриЗаполненииПоставляемыхПрофилейГруппДоступа(ОписанияПрофилей) Экспорт
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = "dbd5a9e5-7697-4d95-80ed-2577bbbb1c61";
	ОписаниеПрофиля.Наименование = НСтр("ru = 'Процессы (свои задачи)'");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваУНФ");
	ОписаниеПрофиля.Роли.Добавить("КП_ЗадачиИзменениеВыполнениеСвоих");
	
	ОписаниеПрофиля.Описание = НСтр(
		"ru = 'Под профилем осуществляется работа с подсистемой ""Конструктор процессов для 1С:УНФ"" для выполнения полученных пользователем задач. Задачи размещаются на начальной странице в стандартном разделе ""Текущие дела"".'"
	);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Идентификатор = "801bfb58-8c46-4477-83a2-3d6d3c353587";
	ОписаниеПрофиля.Наименование = НСтр("ru = 'Процессы (создание и администрирование)'");
	ОписаниеПрофиля.Роли.Добавить("БазовыеПраваУНФ");
	ОписаниеПрофиля.Роли.Добавить("КП_ЗадачиАдминистрирование");
	ОписаниеПрофиля.Роли.Добавить("КП_ЗадачиИзменениеВыполнениеСвоих");
	ОписаниеПрофиля.Роли.Добавить("КП_ЗадачиЧтениеВсех");
	ОписаниеПрофиля.Роли.Добавить("КП_ПроцессыАдминистрирование");
	ОписаниеПрофиля.Роли.Добавить("КП_ПроцессыИзменениеСвоих");
	ОписаниеПрофиля.Роли.Добавить("КП_ПроцессыЧтениеВсех");
	
	ОписаниеПрофиля.Описание = НСтр(
		"ru = 'Под профилем осуществляется работа с подсистемой ""Конструктор процессов для 1С:УНФ"" включая создание новых процессов и их администрирование. При включении профиля в интерфейс пользователя добавляется подсистема ""Процессы"".'"
	);
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры
