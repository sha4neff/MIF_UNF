
#Область ПрограммныйИнтерфейс

// Заполнение адресов организации и ее складов.
//
// Параметры:
//  Организация - ОпределяемыйТип.Организация - организация, по которой заполняются адреса.
//  Адреса - ТаблицаЗначения - таблица для заполнения. Содержит колонки:
//   * Представление - Строка - представление адреса.
//   * ЗначенияПолей - Строка - адрес в формате XML. Формат должен соответствовать XDTO-пакету Адрес.
//   * Описание - Строка - комментарий адреса.
//   * Ссылка - Ссылка - объект хранения контактной информации.
//   * Вид - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации.
//
Процедура ЗаполнитьАдресаОрганизации(Организация, Адреса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Представление,
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	ОрганизацииКонтактнаяИнформация.Вид КАК Вид,
	|	ОрганизацииКонтактнаяИнформация.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.ОрганизацииБизнесСеть КАК ОрганизацииБизнесСеть
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|		ПО (ОрганизацииКонтактнаяИнформация.Ссылка = ОрганизацииБизнесСеть.Организация)
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Организация
	|	И ОрганизацииКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Представление,
	|	СтруктурныеЕдиницы.ЗначенияПолей,
	|	СтруктурныеЕдиницы.Вид,
	|	СтруктурныеЕдиницы.Ссылка
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы.КонтактнаяИнформация КАК СтруктурныеЕдиницы
	|ГДЕ
	|	СтруктурныеЕдиницы.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаАдреса = Адреса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаАдреса, Выборка);
		СтрокаАдреса.Описание = СтрШаблон("%1 (%2)", Выборка.Вид, Выборка.Ссылка);
	КонецЦикла;
	
	Адреса.Сортировать("Представление");
	
КонецПроцедуры	

// Создание контрагента в информационной базе по реквизитам.
//
// Параметры:
//   РеквизитыКонтрагента - Структура - реквизиты необходимые для создания контрагента.
//    * ИНН - Строка - ИНН контрагента.
//    * КПП - Строка - КПП контрагента.
//    * Наименование - Строка - наименование контрагента.
//   Контрагент - СправочникСсылка - ссылка на созданного контрагента.
//   Отказ - Булево - признак ошибки.
//
Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	РеквизитыКонтрагента = РеквизитыКонтрагента;
	РеквизитыКонтрагента.Вставить("ЭтоЭлектронныйДокумент", Истина);
	
	Если СтрДлина(РеквизитыКонтрагента.ИНН) = 10 Тогда
		РеквизитыКонтрагента.Вставить("ВидКонтрагента", Перечисления.ВидыКонтрагентов.ЮридическоеЛицо);
	Иначе
		РеквизитыКонтрагента.Вставить("ВидКонтрагента", Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель);
	КонецЕсли;
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	НовыйКонтрагент.Заполнить(РеквизитыКонтрагента);
	
	НовыйКонтрагент.Покупатель = Истина;
	НовыйКонтрагент.Поставщик = Истина;
	НовыйКонтрагент.ПрочиеОтношения = Истина;
	
	Попытка
		НовыйКонтрагент.Записать();
	Исключение
		Отказ = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись нового элемента справочника Контрагенты'"),
			УровеньЖурналаРегистрации.Ошибка,
			НовыйКонтрагент.Метаданные(),
			НовыйКонтрагент,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстОшибки = НСтр("ru = 'Ошибка при записи нового элемента справочника Контрагенты
			|Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
	Контрагент = НовыйКонтрагент.Ссылка;
	
КонецПроцедуры

// Возвращает контакты пользователя для регистрации в сервисе.
//
// Параметры:
//   КонтактноеЛицо - СправочникСсылка - пользователь программы, контактное лицо.
//   Результат - Структура - информация о пользователе, см. БизнесСеть.ОписаниеКонтактнойИнформацииПользователя():
//     * ФИО - Строка - ФИО пользователя.
//     * Телефон - Строка - номер телефона.
//     * ЭлектроннаяПочта - Строка - адрес электронной почты пользователя.
//
Процедура ПолучитьКонтактнуюИнформациюПользователя(Знач КонтактноеЛицо, Результат) Экспорт
	
	
	
КонецПроцедуры

// Проверка соответствия реквизитов в документах.
//
// Параметры:
//   МассивСсылокНаОбъект - Массив - проверяемые ссылки объектов.
//   Реквизиты - Строка - список проверяемых реквизитов через запятую.
//
// Возвращаемое значение:
//   Булево - Истина, если все реквизиты соответствуют
//
Процедура ВыполнитьКонтрольРеквизитовДокументов(МассивСсылокНаОбъект, ТекстСообщения, Отказ) Экспорт
	
	ИмяМетаданных = "";
	Для каждого Ссылка Из МассивСсылокНаОбъект Цикл
		Если ИмяМетаданных = "" Тогда
			ИмяМетаданных = Ссылка.Метаданные().Имя;
		ИначеЕсли ИмяМетаданных <> Ссылка.Метаданные().Имя Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Операция невозможна для разных видов документов'");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Реквизиты = "Организация, Контрагент";
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ";
	МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(Реквизиты, ",");
	ПоследнийЭлемент = МассивРеквизитов.Получить(МассивРеквизитов.Количество()-1);
	Для каждого Элемент Из МассивРеквизитов Цикл
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + Символы.Таб + ИмяМетаданных + "." + СокрЛП(Элемент)
			+ ?(Элемент = ПоследнийЭлемент, "", ",");
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + Символы.ПС + "ИЗ " + "Документ." + ИмяМетаданных + " КАК "
		+ ИмяМетаданных	+ " ГДЕ " + ИмяМетаданных + ".Ссылка В(&МассивСсылокНаОбъект)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылокНаОбъект", МассивСсылокНаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 1 Тогда
		Отказ = Истина;
		Шаблон = НСтр("ru = 'Операция невозможна. Отличаются реквизиты документов (%1)'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Реквизиты);
	КонецЕсли;
	
КонецПроцедуры

// Получение списка контрагентов по сделкам для отправки приглашений.
//
// Параметры:
//  Организация			 - СправочникСсылка - ссылка на организацию, от которой производится приглашение.
//  РежимЗаполнения		 - Строка - режим заполнения контрагентов: "ЗаполнитьПоПоставкам", "ЗаполнитьПоЗакупкам", "ЗаполнитьПоВсемСделкам".
//  НачалоПериода		 - Дата - начало периода заполнения.
//  СписокКонтрагентов	 - ТаблицаЗначений - список контрагентов:
//    * Ссылка - СправочникСсылка - контрагент.
//    * ЭлектроннаяПочта - Строка - адрес электронной почты.
//
Процедура ПолучитьКонтрагентовПоСделкам(Знач Организация, Знач РежимЗаполнения, Знач НачалоПериода, СписокКонтрагентов) Экспорт
	
КонецПроцедуры

#КонецОбласти