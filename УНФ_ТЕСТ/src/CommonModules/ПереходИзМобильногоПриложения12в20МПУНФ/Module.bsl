
#Область Переход

Процедура ВыполнитьПереход() Экспорт
	
	УдалитьВсеОбъектыНаСервере();
	
	//Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Установить(Ложь);
	//Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Установить(Ложь);
	
	ПеренестиСтруктурныеЕдиницы();
	ПеренестиКонтрагенты();
	ПеренестиКассыККМ();
	ПеренестиСтавкиНДС();
	ПеренестиСтатьи();
	ПеренестиНоменклатуру();
	ПеренестиСпецификации();
	
	//ПеренестиВводОстатков();
	//
	//ПеренестиПриходТовара();
	//ПеренестиПроизводство();
	//
	//ПеренестиЗаказМП();
	//ПеренестиРасходТовараМП();
	//
	//ПеренестиПриходДенегМП();
	//ПеренестиРасходДенегМП();
	//
	//ПеренестиОтчетОРозничныхПродажахМП();
	//ПеренестиЧекККММП();
	//ПеренестиЧекККМВозвратМП();
	//
	//ПеренестиЦеныТоваров();
	//ПеренестиЦеныПоставщиков();
	//
	//ПеренестиКонстанты();
	
	ПерейтиНаМобильноеПриложение20();
	УстановитьОбычныйИнтерфейс();
	
	//Константы.ДатаОкончанияПробногоПериодаМПУНФ.Установить(ТекущаяДатаСеанса() + 30 * 60*60*24); // 30 дней пробного периода
	//Константы.ВключенПробныйПериодМПУНФ.Установить(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Справочники

Процедура ПеренестиСтруктурныеЕдиницы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктурныеЕдиницы.Ссылка КАК Ссылка,
	|	СтруктурныеЕдиницы.ПометкаУдаления КАК ПометкаУдаления,
	|	СтруктурныеЕдиницы.Родитель КАК Родитель,
	|	СтруктурныеЕдиницы.Код КАК Код,
	|	СтруктурныеЕдиницы.Наименование КАК Наименование,
	|	СтруктурныеЕдиницы.Предопределенный КАК Предопределенный,
	|	СтруктурныеЕдиницы.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	|ИЗ
	|	Справочник.СтруктурныеЕдиницы КАК СтруктурныеЕдиницы";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьСтруктурнуюЕдиницуМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьСтруктурнуюЕдиницуМП(Выборка, ЭтоНоваяЗагрузка)
	
	// Проверяем предопределенные данные
	Если Выборка.Предопределенный Тогда
		
		СсылкаНаПредопределенныйОбъект = ОбщегоНазначения.ПредопределенныйЭлемент("Справочник.СтруктурныеЕдиницыМП." + Выборка.ИмяПредопределенныхДанных);
		
		НужноПерезаписатьПредопределенныйОбъект = Ложь;
		
		Если СсылкаНаПредопределенныйОбъект.Наименование <> Выборка.Наименование Тогда
			НужноПерезаписатьПредопределенныйОбъект = Истина;
		КонецЕсли;
		
		Если СсылкаНаПредопределенныйОбъект.ПометкаУдаления <> Выборка.ПометкаУдаления Тогда
			НужноПерезаписатьПредопределенныйОбъект = Истина;
		КонецЕсли;
		
		Если СсылкаНаПредопределенныйОбъект.Код <> Выборка.Код Тогда
			НужноПерезаписатьПредопределенныйОбъект = Истина;
		КонецЕсли;
		
		Если СсылкаНаПредопределенныйОбъект.Родитель <> Выборка.Родитель Тогда
			НужноПерезаписатьПредопределенныйОбъект = Истина;
		КонецЕсли;
		
		Если НужноПерезаписатьПредопределенныйОбъект Тогда
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник.СтруктурныеЕдиницыМП");
				ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаПредопределенныйОбъект);
				Блокировка.Заблокировать();
				
				ПредопределенныйОбъект = СсылкаНаПредопределенныйОбъект.ПолучитьОбъект();
				ПредопределенныйОбъект.Наименование = Выборка.Наименование;
				ПредопределенныйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
				ПредопределенныйОбъект.Код = Выборка.Код;
				
				Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
					СсылкаНаРодителя = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Выборка.Родитель.Код);
					Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
						Родитель = НайтиСоздатьСтруктурнуюЕдиницуМП(Выборка.Родитель, Ложь);
						ПредопределенныйОбъект.Родитель = Родитель;
					Иначе
						ПредопределенныйОбъект.Родитель = СсылкаНаРодителя;
					КонецЕсли;
				КонецЕсли;
				
				ПредопределенныйОбъект.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
		Если НЕ ЭтоНоваяЗагрузка Тогда
			Возврат СсылкаНаПредопределенныйОбъект;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		СсылкаНаРодителя = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Возврат СсылкаНаРодителя;
		КонецЕсли;
	Иначе
		СсылкаНаОбъект = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОбъект = Справочники.СтруктурныеЕдиницыМП.СоздатьЭлемент();
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	НовыйОбъект.Код = Выборка.Код;
	
	//НовыйОбъект.ТипСтруктурнойЕдиницы = Перечисления.ТипыСтруктурныхЕдиниц.Розница;
	//НовыйОбъект.РозничныйВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	
	Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
		СсылкаНаРодителя = Справочники.СтруктурныеЕдиницы.НайтиПоКоду(Выборка.Родитель.Код);
		Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Родитель = НайтиСоздатьСтруктурнуюЕдиницуМП(Выборка.Родитель, Ложь);
			НовыйОбъект.Родитель = Родитель;
		Иначе
			НовыйОбъект.Родитель = СсылкаНаРодителя;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОбъект.Записать();
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		Возврат НовыйОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции


Процедура ПеренестиКонтрагенты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.ПометкаУдаления КАК ПометкаУдаления,
	|	Контрагенты.Родитель КАК Родитель,
	|	Контрагенты.Код КАК Код,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.ЭтоГруппа КАК ЭтоГруппа,
	|	КонтрагентыКонтактнаяИнформация.Представление КАК НомерТелефона,
	|	КонтрагентыКонтактнаяИнформация1.Представление КАК АдресЭП,
	|	КонтрагентыКонтактнаяИнформация2.Представление КАК Адрес,
	|	Контрагенты.Комментарий КАК ДополнительнаяИнформация
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформация.Ссылка
	|			И (КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация1
	|		ПО Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформация1.Ссылка
	|			И (КонтрагентыКонтактнаяИнформация1.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация2
	|		ПО Контрагенты.Ссылка = КонтрагентыКонтактнаяИнформация2.Ссылка
	|			И (КонтрагентыКонтактнаяИнформация2.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
	|			И (КонтрагентыКонтактнаяИнформация2.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресКонтрагента))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьКонтрагентаМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьКонтрагентаМП(Выборка, ЭтоНоваяЗагрузка)
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		СсылкаНаРодителя = Справочники.КонтрагентыМП.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Возврат СсылкаНаРодителя;
		КонецЕсли;
	Иначе
		СсылкаНаОбъект = Справочники.КонтрагентыМП.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.ЭтоГруппа Тогда
		НовыйОбъект = Справочники.КонтрагентыМП.СоздатьГруппу();
	Иначе
		НовыйОбъект = Справочники.КонтрагентыМП.СоздатьЭлемент();
		НовыйОбъект.ДополнительнаяИнформация = Выборка.ДополнительнаяИнформация;
		НовыйОбъект.НомерТелефона = Выборка.НомерТелефона;
		НовыйОбъект.АдресЭП = Выборка.АдресЭП;
		НовыйОбъект.Адрес = Выборка.Адрес;
	КонецЕсли;
	
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.Код = Выборка.Код;
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	
	Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
		СсылкаНаРодителя = Справочники.КонтрагентыМП.НайтиПоКоду(Выборка.Родитель.Код);
		Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Родитель = НайтиСоздатьКонтрагентаМП(Выборка.Родитель, Ложь);
			НовыйОбъект.Родитель = Родитель;
		Иначе
			НовыйОбъект.Родитель = СсылкаНаРодителя;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОбъект.Записать();
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		Возврат НовыйОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции


Процедура ПеренестиКассыККМ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КассыККМ.ПометкаУдаления КАК ПометкаУдаления,
		|	КассыККМ.Код КАК Код,
		|	КассыККМ.Наименование КАК Наименование,
		|	КассыККМ.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	КассыККМ.СтруктурнаяЕдиница.Код КАК СтруктурнаяЕдиницаКод
		|ИЗ
		|	Справочник.КассыККМ КАК КассыККМ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоздатьКассуККММП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьКассуККММП(Выборка, ЭтоНоваяЗагрузка)
	
	НовыйОбъект = Справочники.КассыККММП.СоздатьЭлемент();
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	НовыйОбъект.Код = Выборка.Код;
	НовыйОбъект.Наименование = Выборка.Наименование;
	
	Если ЗначениеЗаполнено(Выборка.СтруктурнаяЕдиница) Тогда
		НовыйОбъект.РозничнаяТочка = Справочники.СтруктурныеЕдиницыМП.НайтиПоКоду(Выборка.СтруктурнаяЕдиницаКод);
	КонецЕсли;
	
	НовыйОбъект.Записать();
	
КонецПроцедуры


Процедура ПеренестиСтавкиНДС()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.ПометкаУдаления КАК ПометкаУдаления,
		|	СтавкиНДС.Наименование КАК Наименование,
		|	СтавкиНДС.Ставка КАК Ставка,
		|	СтавкиНДС.НеОблагается КАК НеОблагается,
		|	СтавкиНДС.Расчетная КАК Расчетная
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьСтавкуНДСМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьСтавкуНДСМП(Выборка, ЭтоНоваяЗагрузка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДСМП.ПометкаУдаления КАК ПометкаУдаления,
		|	СтавкиНДСМП.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтавкиНДСМП КАК СтавкиНДСМП
		|ГДЕ
		|	СтавкиНДСМП.Наименование = &Наименование
		|	И СтавкиНДСМП.Ставка = &Ставка
		|	И СтавкиНДСМП.НеОблагается = &НеОблагается
		|	И СтавкиНДСМП.Расчетная = &Расчетная
		|	И СтавкиНДСМП.ПометкаУдаления = &ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", Выборка.Наименование);
	Запрос.УстановитьПараметр("НеОблагается", Выборка.НеОблагается);
	Запрос.УстановитьПараметр("Расчетная", Выборка.Расчетная);
	Запрос.УстановитьПараметр("Ставка", Выборка.Ставка);
	Запрос.УстановитьПараметр("ПометкаУдаления", Выборка.ПометкаУдаления);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СтавкаНайдена = Ложь;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		СтавкаНайдена = Истина;
	КонецЕсли;
	
	Если СтавкаНайдена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйОбъект = Справочники.СтавкиНДСМП.СоздатьЭлемент();
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.НеОблагается = Выборка.НеОблагается;
	НовыйОбъект.Расчетная = Выборка.Расчетная;
	НовыйОбъект.Ставка = Выборка.Ставка;
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	НовыйОбъект.Записать();
	
КонецФункции


Процедура ПеренестиСтатьи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиДвиженияДенежныхСредств.ПометкаУдаления КАК ПометкаУдаления,
		|	СтатьиДвиженияДенежныхСредств.Родитель КАК Родитель,
		|	СтатьиДвиженияДенежныхСредств.ЭтоГруппа КАК ЭтоГруппа,
		|	СтатьиДвиженияДенежныхСредств.Код КАК Код,
		|	СтатьиДвиженияДенежныхСредств.Наименование КАК Наименование,
		|	СтатьиДвиженияДенежныхСредств.Предопределенный КАК Предопределенный,
		|	СтатьиДвиженияДенежныхСредств.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		|	СтатьиДвиженияДенежныхСредств.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьСтатьюМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьСтатьюМП(Выборка, ЭтоНоваяЗагрузка)
	
	Если Выборка.Предопределенный Тогда
		СсылкаНаПредопределенныйОбъект = "";
		Если Выборка.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей Тогда
			СсылкаНаПредопределенныйОбъект = Справочники.СтатьиМП.ОплатаОтПокупателя;
		ИначеЕсли Выборка.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам Тогда
			СсылкаНаПредопределенныйОбъект = Справочники.СтатьиМП.ОплатаПоставщику;
		ИначеЕсли Выборка.Ссылка = Справочники.СтатьиДвиженияДенежныхСредств.Прочее Тогда
			СсылкаНаПредопределенныйОбъект = Справочники.СтатьиМП.Прочее;
		КонецЕсли;
		
		Если СсылкаНаПредопределенныйОбъект <> "" Тогда
			Если НЕ ЭтоНоваяЗагрузка Тогда
				Возврат СсылкаНаПредопределенныйОбъект;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ЭтоНоваяЗагрузка Тогда
			Ссылка = Справочники.СтатьиМП.НайтиПоКоду(Выборка.Код);
			Если ЗначениеЗаполнено(Ссылка) Тогда
				Возврат Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.ЭтоГруппа Тогда
		НовыйОбъект = Справочники.СтатьиМП.СоздатьГруппу();
	Иначе
		НовыйОбъект = Справочники.СтатьиМП.СоздатьЭлемент();
	КонецЕсли;
	
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.Код = Выборка.Код;
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	
	Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
		СсылкаНаРодителя = Справочники.СтатьиМП.НайтиПоКоду(Выборка.Родитель.Код);
		Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Родитель = НайтиСоздатьСтатьюМП(Выборка.Родитель, Ложь);
			НовыйОбъект.Родитель = Родитель;
		Иначе
			НовыйОбъект.Родитель = СсылкаНаРодителя;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОбъект.Записать();
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		Возврат НовыйОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ПеренестиНоменклатуру()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпрНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
		|	СпрНоменклатура.Родитель КАК Родитель,
		|	СпрНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	СпрНоменклатура.Код КАК Код,
		|	СпрНоменклатура.Наименование КАК Наименование,
		|	СпрНоменклатура.Артикул КАК Артикул,
		|	СпрНоменклатура.Поставщик КАК Поставщик,
		|	СпрНоменклатура.Поставщик.Код КАК ПоставщикКод,
		|	СпрНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СпрНоменклатура.Комментарий КАК Комментарий,
		|	СпрНоменклатура.ФайлКартинки КАК ФайлКартинки,
		|	СпрНоменклатура.Ссылка КАК Ссылка,
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	СпрНоменклатура.ВидСтавкиНДС КАК ВидСтавкиНДС
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|		ПО СпрНоменклатура.Ссылка = ШтрихкодыНоменклатуры.Номенклатура";
		
		
				//|	Номенклатура.Штрихкод КАК Штрихкод,
		//|	Номенклатура.ТекущийОстаток КАК ТекущийОстаток,
		//|	Номенклатура.КартинкаСсылка КАК КартинкаСсылка,
		//|	Номенклатура.СтавкаНДС КАК СтавкаНДС,
		//|	Номенклатура.Спецификация КАК Спецификация

	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьТоварМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСоздатьТоварМП(Выборка, ЭтоНоваяЗагрузка)
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		СсылкаНаРодителя = Справочники.ТоварыМП.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
			Возврат СсылкаНаРодителя;
		КонецЕсли;
	Иначе
		СсылкаНаОбъект = Справочники.ТоварыМП.НайтиПоКоду(Выборка.Код);
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если Выборка.ЭтоГруппа Тогда
		НовыйОбъект = Справочники.ТоварыМП.СоздатьГруппу();
	Иначе
		НовыйОбъект = Справочники.ТоварыМП.СоздатьЭлемент();
		НовыйОбъект.Артикул = Выборка.Артикул;
		НовыйОбъект.Поставщик = Справочники.КонтрагентыМП.НайтиПоКоду(Выборка.ПоставщикКод);
		НовыйОбъект.Вид = НайтиВидНоменклатуры(Выборка.ТипНоменклатуры);
	КонецЕсли;
	
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.Код = Выборка.Код;
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	
	НачатьТранзакцию();
	
	Попытка
		
		Если НЕ Выборка.ЭтоГруппа Тогда
			НовыйОбъект.Записать();
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ТоварыМП");
			ЭлементБлокировки.УстановитьЗначение("Ссылка", НовыйОбъект.Ссылка);
			Блокировка.Заблокировать();
			
			Если ЗначениеЗаполнено(Выборка.ФайлКартинки) Тогда
				ДвоичныеДанные = Выборка.ФайлКартинки.Получить();
				НовыйОбъект.Картинка = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
				НовыйОбъект.Записать();
				НовыйОбъект.КартинкаСсылка = ПолучитьНавигационнуюСсылку(НовыйОбъект, "Картинка");
			КонецЕсли;
			
			НовыйОбъект.Штрихкод = Выборка.Штрихкод;
			
			НовыйОбъект.ДополнительнаяИнформация = Выборка.Комментарий;
			НовыйОбъект.СтавкаНДС = НайтиСтавкуНДС(Выборка.ВидСтавкиНДС);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			СсылкаНаРодителя = Справочники.Номенклатура.НайтиПоКоду(Выборка.Родитель.Код);
			Если НЕ ЗначениеЗаполнено(СсылкаНаРодителя) Тогда
				Родитель = НайтиСоздатьТоварМП(Выборка.Родитель, Ложь);
				НовыйОбъект.Родитель = Родитель;
			Иначе
				НовыйОбъект.Родитель = СсылкаНаРодителя;
			КонецЕсли;
		КонецЕсли;
		
		НовыйОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если НЕ ЭтоНоваяЗагрузка Тогда
		Возврат НовыйОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции


Процедура ПеренестиСпецификации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Спецификации.ПометкаУдаления КАК ПометкаУдаления,
		|	Спецификации.Код КАК Код,
		|	Спецификации.Наименование КАК Наименование,
		|	Спецификации.Состав.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		Количество КАК Количество
		|	) КАК Состав,
		|	Спецификации.Владелец КАК Владелец,
		|	Спецификации.Владелец.Код КАК ВладелецКод
		|ИЗ
		|	Справочник.Спецификации КАК Спецификации";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НайтиСоздатьСпецификациюМП(ВыборкаДетальныеЗаписи, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиСоздатьСпецификациюМП(Выборка, ЭтоНоваяЗагрузка)
	
	НовыйОбъект = Справочники.СпецификацииМП.СоздатьЭлемент();
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	НовыйОбъект.Код = Выборка.Код;
	НовыйОбъект.Наименование = Выборка.Наименование;
	НовыйОбъект.Владелец = Справочники.ТоварыМП.НайтиПоКоду(Выборка.ВладелецКод);
	
	ТабЧасть = Выборка.Состав.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		
		СтрокаТЧ = НовыйОбъект.Состав.Добавить();
		СтрокаТЧ.Материал = Справочники.ТоварыМП.НайтиПоКоду(ТабЧасть.НоменклатураКод);
		СтрокаТЧ.Количество = ТабЧасть.Количество;
		
	КонецЦикла;
	
	НовыйОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Документы

Процедура ПеренестиЗаказМП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказМП.Ссылка КАК Ссылка,
		|	ЗаказМП.ВерсияДанных КАК ВерсияДанных,
		|	ЗаказМП.ПометкаУдаления КАК ПометкаУдаления,
		|	ЗаказМП.Номер КАК Номер,
		|	ЗаказМП.Дата КАК Дата,
		|	ЗаказМП.Проведен КАК Проведен,
		|	ЗаказМП.Покупатель КАК Покупатель,
		|	ЗаказМП.СостояниеЗаказа КАК СостояниеЗаказа,
		|	ЗаказМП.Отгружен КАК Отгружен,
		|	ЗаказМП.Оплачен КАК Оплачен,
		|	ЗаказМП.СуммаДокумента КАК СуммаДокумента,
		|	ЗаказМП.ИзЦентральнойБазы КАК ИзЦентральнойБазы,
		|	ЗаказМП.ОтгруженУстановленВЦентральнойБазе КАК ОтгруженУстановленВЦентральнойБазе,
		|	ЗаказМП.ОплаченУстановленВЦентральнойБазе КАК ОплаченУстановленВЦентральнойБазе,
		|	ЗаказМП.Комментарий КАК Комментарий,
		|	ЗаказМП.СуммаОплаты КАК СуммаОплаты,
		|	ЗаказМП.СуммаСкидки КАК СуммаСкидки,
		|	ЗаказМП.СуммаКартой КАК СуммаКартой,
		|	ЗаказМП.НомерПодтвержден КАК НомерПодтвержден,
		|	ЗаказМП.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Товар КАК Товар,
		|		Цена КАК Цена,
		|		Количество КАК Количество,
		|		Сумма КАК Сумма
		|	) КАК Товары
		|ИЗ
		|	Документ.ЗаказМП КАК ЗаказМП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЭтоНоваяЗагрузка = Истина;
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
		
		СоздатьЗаказ(ВыборкаДетальныеЗаписи, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения);
		
		ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЗаказ(Выборка, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения)
	
	НовыйОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
	
	ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка);
	
	НовыйОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	
	НовыйОбъект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			НовыйОбъект.Автор,
			"ОсновнойОтветственный");
			
	НовыйОбъект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
	НовыйОбъект.Контрагент = Справочники.Контрагенты.НайтиПоКоду(Выборка.Покупатель.Код);
	
	ДоговорПоУмолчанию = ПолучитьСоздатьДоговорПоУмолчанию(
		НовыйОбъект.Ссылка,
		НовыйОбъект.Контрагент,
		НовыйОбъект.Организация,
		НовыйОбъект.ВидОперации,
		Перечисления.ВидыДоговоров.СПокупателем);
	
	НовыйОбъект.Договор = ДоговорПоУмолчанию;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних");
	
	Запрос.УстановитьПараметр("Период", НовыйОбъект.Дата);
	Запрос.УстановитьПараметр("Валюта", НовыйОбъект.Договор.ВалютаРасчетов);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НовыйОбъект.Курс = ВыборкаДетальныеЗаписи.Курс;
		НовыйОбъект.Кратность = ВыборкаДетальныеЗаписи.Кратность;
	Иначе
		НовыйОбъект.Курс = 1;
		НовыйОбъект.Кратность = 1;
	КонецЕсли;
	
	НовыйОбъект.ДатаОтгрузки = НовыйОбъект.Дата;
	НовыйОбъект.ВидЗаказа = ЗаполнениеОбъектовУНФ.ПолучитьВидЗаказаПокупателя();
	
	СостояниеЗаказаЗагружаемое = НайтиСостоянияЗаказовПокупателей(Выборка.СостояниеЗаказа, НовыйОбъект.ВидЗаказа);
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.СостояниеЗаказа)
		ИЛИ СостояниеЗаказаЗагружаемое = Справочники.СостоянияЗаказовПокупателей.Завершен Тогда
		НовыйОбъект.СостояниеЗаказа = СостояниеЗаказаЗагружаемое;
		НужноЗаписыватьОбъект = Истина;
	КонецЕсли;
	
	Если НовыйОбъект.СостояниеЗаказа = ПредопределенноеЗначение("Справочник.СостоянияЗаказовПокупателей.Завершен") Тогда
		Если ОжидаетсяВыборВариантаКП(НовыйОбъект) Тогда
			НовыйОбъект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Отменен");
		Иначе
			НовыйОбъект.ВариантЗавершения = ПредопределенноеЗначение("Перечисление.ВариантыЗавершенияЗаказа.Успешно");
		КонецЕсли;
	КонецЕсли;
	
	// НовыйОбъект.СостояниеЗаказа = НайтиСостоянияЗаказовПокупателей(Выборка.СостояниеЗаказа, НовыйОбъект.ВидЗаказа);
	
	НовыйОбъект.СтруктурнаяЕдиницаПродажи = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		НовыйОбъект.Автор,
		"ОсновноеПодразделение");
	
	НовыйОбъект.СтруктурнаяЕдиницаПродажи = ?(ЗначениеЗаполнено(НовыйОбъект.СтруктурнаяЕдиницаПродажи), НовыйОбъект.СтруктурнаяЕдиницаПродажи, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	НовыйОбъект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		НовыйОбъект.Автор,
		"ОсновнойВидЦенПродажи");
	
	НовыйОбъект.ВидЦен = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен, НовыйОбъект.Договор.ВидЦен);
	НовыйОбъект.ВидЦен = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен, Справочники.ВидыЦен.Оптовая);
	НовыйОбъект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен.ЦенаВключаетНДС, Истина);
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеДатыОтгрузкиВЗаказеПокупателя");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Если НовыйОбъект.ПоложениеДатыОтгрузки <> ЗначениеНастройки Тогда
			НовыйОбъект.ПоложениеДатыОтгрузки = ЗначениеНастройки;
		КонецЕсли;
	Иначе
		НовыйОбъект.ПоложениеДатыОтгрузки = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	
	ТабЧасть = Выборка.Товары.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		
		НоваяСтрока = НовыйОбъект.Запасы.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ТабЧасть.Товар.Код);
		НоваяСтрока.ТипНоменклатурыЗапас = ((НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
									ИЛИ (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Цена = ТабЧасть.Цена;
		НоваяСтрока.Количество = ТабЧасть.Количество;
		НоваяСтрока.Сумма = ТабЧасть.Сумма;
		НоваяСтрока.ДатаОтгрузки = НовыйОбъект.Дата;
		
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТабЧасть.Товар);
		
	КонецЦикла;
	
	НовыйОбъект.Комментарий = Выборка.Комментарий;
	
	ПараметрыОтбора = Новый Соответствие;
	ПараметрыОтбора.Вставить("НомерВариантаКП", НовыйОбъект.ОсновнойВариантКП);
	ПараметрыОтбора.Вставить("ЭтоРазделитель", Ложь);
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		Неопределено,
		НовыйОбъект.Запасы,
		Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой,
		"Сумма",
		?(ЗначениеЗаполнено(Выборка.СуммаСкидки), Выборка.СуммаСкидки, 0),
		"ЗапасыНоменклатура",
		ПараметрыОтбора);
	
	Для каждого ТекСтрока Из НовыйОбъект.Запасы Цикл
		РассчитатьСуммыВСтрокеТабличнойЧасти(НовыйОбъект, ТекСтрока);
	КонецЦикла;
	
	ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры


Процедура ПеренестиРасходТовараМП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходТовараМП.Ссылка КАК Ссылка,
		|	РасходТовараМП.ПометкаУдаления КАК ПометкаУдаления,
		|	РасходТовараМП.Номер КАК Номер,
		|	РасходТовараМП.Дата КАК Дата,
		|	РасходТовараМП.Проведен КАК Проведен,
		|	РасходТовараМП.Покупатель КАК Покупатель,
		|	РасходТовараМП.Основание КАК Основание,
		|	РасходТовараМП.СуммаДокумента КАК СуммаДокумента,
		|	РасходТовараМП.Комментарий КАК Комментарий,
		|	РасходТовараМП.СуммаОплаты КАК СуммаОплаты,
		|	РасходТовараМП.СуммаСкидки КАК СуммаСкидки,
		|	РасходТовараМП.НомерПодтвержден КАК НомерПодтвержден,
		|	РасходТовараМП.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Товар КАК Товар,
		|		Цена КАК Цена,
		|		Количество КАК Количество,
		|		Сумма КАК Сумма
		|	) КАК Товары
		|ИЗ
		|	Документ.РасходТовараМП КАК РасходТовараМП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭтоНоваяЗагрузка = Истина;
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
		
		СоздатьРасходТовара(ВыборкаДетальныеЗаписи, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения);
		
		ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьРасходТовара(Выборка, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения)

	НовыйОбъект = Документы.РасходнаяНакладная.СоздатьДокумент();
	
	ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка);
	
	НовыйОбъект.ВидОперации = Перечисления.ВидыОперацийРасходнаяНакладная.ПродажаПокупателю;
	
	НовыйОбъект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		НовыйОбъект.Автор,
		"ОсновнойОтветственный");
	
	НовыйОбъект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
	
	НовыйОбъект.Контрагент = Справочники.Контрагенты.НайтиПоКоду(Выборка.Покупатель.Код);
	
	ДоговорПоУмолчанию = ПолучитьСоздатьДоговорПоУмолчанию(
		НовыйОбъект.Ссылка,
		НовыйОбъект.Контрагент,
		НовыйОбъект.Организация,
		НовыйОбъект.ВидОперации,
		Перечисления.ВидыДоговоров.СПокупателем);
		
	НовыйОбъект.Договор = ДоговорПоУмолчанию;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних");
	
	Запрос.УстановитьПараметр("Период", НовыйОбъект.Дата);
	Запрос.УстановитьПараметр("Валюта", НовыйОбъект.Договор.ВалютаРасчетов);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НовыйОбъект.Курс = ВыборкаДетальныеЗаписи.Курс;
		НовыйОбъект.Кратность = ВыборкаДетальныеЗаписи.Кратность;
	Иначе
		НовыйОбъект.Курс = 1;
		НовыйОбъект.Кратность = 1;
	КонецЕсли;
	
	НовыйОбъект.Подразделение = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(НовыйОбъект.Автор, "ОсновноеПодразделение");
	
	НовыйОбъект.Подразделение = ?(ЗначениеЗаполнено(НовыйОбъект.Подразделение), НовыйОбъект.Подразделение, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	НовыйОбъект.СтруктурнаяЕдиница = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		НовыйОбъект.Автор,
		"ОсновнойСклад");
	
	НовыйОбъект.СтруктурнаяЕдиница = ?(ЗначениеЗаполнено(НовыйОбъект.СтруктурнаяЕдиница), НовыйОбъект.СтруктурнаяЕдиница, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
	НовыйОбъект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		НовыйОбъект.Автор,
		"ОсновнойВидЦенПродажи");
	
	НовыйОбъект.ВидЦен = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен, НовыйОбъект.Договор.ВидЦен);
	НовыйОбъект.ВидЦен = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен, Справочники.ВидыЦен.Оптовая);
	НовыйОбъект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен.ЦенаВключаетНДС, Истина);
	
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ПоложениеЗаказаПокупателяВДокументахОтгрузки");
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		Если НовыйОбъект.ПоложениеЗаказаПокупателя <> ЗначениеНастройки Тогда
			НовыйОбъект.ПоложениеЗаказаПокупателя = ЗначениеНастройки;
		КонецЕсли;
	Иначе
		НовыйОбъект.ПоложениеЗаказаПокупателя = Перечисления.ПоложениеРеквизитаНаФорме.ВШапке;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Основание) Тогда
		ЗаказПокупателя = Документы.ЗаказПокупателя.НайтиПоНомеру(Выборка.Основание.Номер, Выборка.Основание.Дата);
	Иначе
		ЗаказПокупателя = Документы.ЗаказПокупателя.ПустаяСсылка();
	КонецЕсли;
	
	НовыйОбъект.ДокументОснование = ЗаказПокупателя;
	НовыйОбъект.Заказ = ЗаказПокупателя;
	
	ТабЧасть = Выборка.Товары.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		НоваяСтрока = НовыйОбъект.Запасы.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ТабЧасть.Товар.Код);
		НоваяСтрока.ТипНоменклатурыЗапас = ((НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
										ИЛИ (НоваяСтрока.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Цена = ТабЧасть.Цена;
		НоваяСтрока.Количество = ТабЧасть.Количество;
		НоваяСтрока.Сумма = ТабЧасть.Сумма;
		НоваяСтрока.Заказ = ЗаказПокупателя;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТабЧасть.Товар);
		
	КонецЦикла;
	
	НовыйОбъект.Комментарий = Выборка.Комментарий;
	
	ГрупповоеИзменениеСтрокСервер.ОбработатьТаблицу(
		Неопределено,
		НовыйОбъект.Запасы,
		Перечисления.ДействияГрупповогоИзмененияСтрок.УстановитьСкидкуСуммой,
		"Сумма",
		?(ЗначениеЗаполнено(Выборка.СуммаСкидки), Выборка.СуммаСкидки, 0),
		"ЗапасыНоменклатура");
	
	Для каждого ТекСтрока Из НовыйОбъект.Запасы Цикл
		РассчитатьСуммыВСтрокеТабличнойЧасти(НовыйОбъект, ТекСтрока);
	КонецЦикла;
	
	
	ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры


Процедура ПеренестиЧекККММП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККММП.Ссылка КАК Ссылка,
		|	ЧекККММП.ПометкаУдаления КАК ПометкаУдаления,
		|	ЧекККММП.Номер КАК Номер,
		|	ЧекККММП.Дата КАК Дата,
		|	ЧекККММП.Проведен КАК Проведен,
		|	ЧекККММП.СуммаДокумента КАК СуммаДокумента,
		|	ЧекККММП.Комментарий КАК Комментарий,
		|	ЧекККММП.СуммаОплаты КАК СуммаОплаты,
		|	ЧекККММП.СуммаСкидки КАК СуммаСкидки,
		|	ЧекККММП.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
		|	ЧекККММП.НомерСменыККМ КАК НомерСменыККМ,
		|	ЧекККММП.НомерЧекаККМ КАК НомерЧекаККМ,
		|	ЧекККММП.АдресЭП КАК АдресЭП,
		|	ЧекККММП.Телефон КАК Телефон,
		|	ЧекККММП.Статус КАК Статус,
		|	ЧекККММП.РозничнаяТочка КАК РозничнаяТочка,
		|	ЧекККММП.КассаККМ КАК КассаККМ,
		|	ЧекККММП.СуммаКартой КАК СуммаКартой,
		|	ЧекККММП.КодАвторизации КАК КодАвторизации,
		|	ЧекККММП.СсылочныйНомер КАК СсылочныйНомер,
		|	ЧекККММП.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ЧекККММП.ДатаОперацииЭТ КАК ДатаОперацииЭТ,
		|	ЧекККММП.СлипЧек КАК СлипЧек,
		|	ЧекККММП.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Товар КАК Товар,
		|		Цена КАК Цена,
		|		Количество КАК Количество,
		|		Сумма КАК Сумма
		|	) КАК Товары
		|ИЗ
		|	Документ.ЧекККММП КАК ЧекККММП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭтоНоваяЗагрузка = Истина;
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
		
		СоздатьЧекККМ(ВыборкаДетальныеЗаписи, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения);
		
		ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения);
		
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи.Сбросить();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЧекККМ(Выборка, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения)

	НовыйОбъект = Документы.ЧекККМ.СоздатьДокумент();
	
	ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка);
	
	НовыйОбъект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			НовыйОбъект.Автор,
			"ОсновнойОтветственный");
	
	НовыйОбъект.КассоваяСмена = Документы.ОтчетОРозничныхПродажах.НайтиПоНомеру(Выборка.ОтчетОРозничныхПродажах.Номер, Выборка.ОтчетОРозничныхПродажах.Дата);
	
	Если ЗначениеЗаполнено(Выборка.НомерЧекаККМ) Тогда
		НомерЧекаККМ = Число(Выборка.НомерЧекаККМ);
	Иначе
		НомерЧекаККМ = 0;
	КонецЕсли;
	
	НовыйОбъект.НомерЧекаККМ = НомерЧекаККМ;
	
	СтатусЧекаККМ = ?(НовыйОбъект.НомерЧекаККМ = 0, Перечисления.СтатусыЧековККМ.ЧекНеПробит, Перечисления.СтатусыЧековККМ.Пробит);
	Если НовыйОбъект.Статус <> СтатусЧекаККМ Тогда
		НовыйОбъект.Статус = СтатусЧекаККМ;
	КонецЕсли;

	Если ЗначениеЗаполнено(Выборка.НомерСменыККМ) Тогда
		НомерСменыККМ = Число(Выборка.НомерСменыККМ);
	Иначе
		НомерСменыККМ = 0;
	КонецЕсли;
	
	НовыйОбъект.НомерСменыККМ = НомерСменыККМ;
	
	НовыйОбъект.ПолученоНаличными = Выборка.СуммаОплаты + Выборка.СуммаКартой; // Карта + наличные
	
	НовыйОбъект.КассаККМ = Справочники.КассыККМ.НайтиПоКоду(Выборка.КассаККМ.Код);
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.КассаККМ) Тогда
		НовыйОбъект.КассаККМ = Справочники.КассыККМ.НайтиПоНаименованию("Касса ККМ");
	КонецЕсли;
	
	НовыйОбъект.Подразделение = НовыйОбъект.КассаККМ.Подразделение;
	НовыйОбъект.СтруктурнаяЕдиница = НовыйОбъект.КассаККМ.СтруктурнаяЕдиница;
	
	Если ЗначениеЗаполнено(НовыйОбъект.СтруктурнаяЕдиница) Тогда
		НовыйОбъект.ВидЦен = НовыйОбъект.СтруктурнаяЕдиница.РозничныйВидЦен;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.ВидЦен) Тогда
		НовыйОбъект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		НовыйОбъект.Автор,
		"ОсновнойВидЦенПродажи");
	КонецЕсли;
	
	НовыйОбъект.ВидЦен = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен, Справочники.ВидыЦен.Оптовая);

	НовыйОбъект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен.ЦенаВключаетНДС, Истина);
	
	ТабЧасть = Выборка.Товары.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		НоваяСтрока = НовыйОбъект.Запасы.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ТабЧасть.Товар.Код);
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Цена = ТабЧасть.Цена;
		НоваяСтрока.Количество = ТабЧасть.Количество;
		НоваяСтрока.Сумма = ТабЧасть.Сумма;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТабЧасть.Товар);
		РассчитатьСуммыВСтрокеТабличнойЧасти(НовыйОбъект, НоваяСтрока);
	КонецЦикла;
	
	НовыйОбъект.Комментарий = Выборка.Комментарий;
	
	ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры


Процедура ПеренестиОтчетОРозничныхПродажахМП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахМП.Ссылка КАК Ссылка,
		|	ОтчетОРозничныхПродажахМП.ПометкаУдаления КАК ПометкаУдаления,
		|	ОтчетОРозничныхПродажахМП.Номер КАК Номер,
		|	ОтчетОРозничныхПродажахМП.Дата КАК Дата,
		|	ОтчетОРозничныхПродажахМП.Проведен КАК Проведен,
		|	ОтчетОРозничныхПродажахМП.Основание КАК Основание,
		|	ОтчетОРозничныхПродажахМП.СуммаДокумента КАК СуммаДокумента,
		|	ОтчетОРозничныхПродажахМП.Комментарий КАК Комментарий,
		|	ОтчетОРозничныхПродажахМП.СуммаСкидки КАК СуммаСкидки,
		|	ОтчетОРозничныхПродажахМП.Статус КАК Статус,
		|	ОтчетОРозничныхПродажахМП.НачалоКассовойСмены КАК НачалоКассовойСмены,
		|	ОтчетОРозничныхПродажахМП.ОкончаниеКассовойСмены КАК ОкончаниеКассовойСмены,
		|	ОтчетОРозничныхПродажахМП.РозничнаяТочка КАК РозничнаяТочка,
		|	ОтчетОРозничныхПродажахМП.КассаККМ КАК КассаККМ,
		|	ОтчетОРозничныхПродажахМП.СуммаКартой КАК СуммаКартой,
		|	ОтчетОРозничныхПродажахМП.СуммаОплаты КАК СуммаОплаты,
		|	ОтчетОРозничныхПродажахМП.НомерПодтвержден КАК НомерПодтвержден,
		|	ОтчетОРозничныхПродажахМП.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Товар КАК Товар,
		|		Цена КАК Цена,
		|		Количество КАК Количество,
		|		Сумма КАК Сумма
		|	) КАК Товары
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажахМП КАК ОтчетОРозничныхПродажахМП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭтоНоваяЗагрузка = Истина;
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
		
		СоздатьОтчетОРозничныхПродажах(ВыборкаДетальныеЗаписи, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения);
		
		ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОтчетОРозничныхПродажах(Выборка, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения)
	
	НовыйОбъект = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
	
	ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка);
	
	НовыйОбъект.КассаККМ = Справочники.КассыККМ.НайтиПоКоду(Выборка.КассаККМ.Код);
	
	НовыйОбъект.Подразделение = НовыйОбъект.КассаККМ.Подразделение;
	НовыйОбъект.СтруктурнаяЕдиница = НовыйОбъект.КассаККМ.СтруктурнаяЕдиница;
	
	КассоваяСменаОбъект = Документы.КассоваяСмена.СоздатьДокумент();
	РеквизитыКассыККМ = Справочники.КассыККМ.ПолучитьРеквизитыКассыККМ(НовыйОбъект.КассаККМ);
	ЗаполнитьЗначенияСвойств(КассоваяСменаОбъект, РеквизитыКассыККМ);
	КассоваяСменаОбъект.Дата = НовыйОбъект.Дата;
	
	Если Выборка.Статус = Перечисления.СтатусыКассовойСменыМП.Открыта Тогда
		СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта;
	Иначе
		СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Закрыта;
	КонецЕсли;
	
	НовыйОбъект.СтатусКассовойСмены = СтатусКассовойСмены;
	
	Если НовыйОбъект.СтатусКассовойСмены = Перечисления.СтатусыОтчетаОРозничныхПродажах.Открыта Тогда
		СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Открыта;
	Иначе
		СтатусКассовойСмены = Перечисления.СтатусыКассовойСмены.Закрыта;
	КонецЕсли;
	
	КассоваяСменаОбъект.Статус = СтатусКассовойСмены;
	
	НовыйОбъект.НачалоКассовойСмены = Выборка.НачалоКассовойСмены;
	
	КассоваяСменаОбъект.НачалоКассовойСмены = НовыйОбъект.НачалоКассовойСмены;

	НовыйОбъект.ОкончаниеКассовойСмены = Выборка.ОкончаниеКассовойСмены;
	
	КассоваяСменаОбъект.ОкончаниеКассовойСмены = НовыйОбъект.ОкончаниеКассовойСмены;
	
	НовыйОбъект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	
	НовыйОбъект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(НовыйОбъект.Автор, "ОсновнойОтветственный");
	
	Если ЗначениеЗаполнено(НовыйОбъект.СтруктурнаяЕдиница) Тогда
		НовыйОбъект.ВидЦен = НовыйОбъект.СтруктурнаяЕдиница.РозничныйВидЦен;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.ВидЦен) Тогда
			НовыйОбъект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			НовыйОбъект.Автор,
			"ОсновнойВидЦенПродажи");
	КонецЕсли;
	
	НовыйОбъект.ВидЦен = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен, Справочники.ВидыЦен.Оптовая);
	НовыйОбъект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен.ЦенаВключаетНДС, Истина);
	
	ТабЧасть = Выборка.Товары.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		НоваяСтрока = НовыйОбъект.Запасы.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ТабЧасть.Товар.Код);
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Цена = ТабЧасть.Цена;
		НоваяСтрока.Количество = ТабЧасть.Количество;
		НоваяСтрока.Сумма = ТабЧасть.Сумма;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТабЧасть.Товар);
		РассчитатьСуммыВСтрокеТабличнойЧасти(НовыйОбъект, НоваяСтрока);
	КонецЦикла;
	
	НовыйОбъект.Комментарий = Выборка.Комментарий;
	
	Попытка
		КассоваяСменаОбъект.ДополнительныеСвойства.Вставить("НеСоздаватьОтчетОРозничныхПродажах", Истина);
		КассоваяСменаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если НовыйОбъект.КассоваяСмена <> КассоваяСменаОбъект.Ссылка Тогда
			НовыйОбъект.КассоваяСмена = КассоваяСменаОбъект.Ссылка;
			НужноЗаписыватьОбъект = Истина;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры


Процедура ПеренестиПриходДенегМП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходДенегМП.Ссылка КАК Ссылка,
		|	ПриходДенегМП.ВерсияДанных КАК ВерсияДанных,
		|	ПриходДенегМП.ПометкаУдаления КАК ПометкаУдаления,
		|	ПриходДенегМП.Номер КАК Номер,
		|	ПриходДенегМП.Дата КАК Дата,
		|	ПриходДенегМП.Проведен КАК Проведен,
		|	ПриходДенегМП.Контрагент КАК Контрагент,
		|	ПриходДенегМП.Сумма КАК Сумма,
		|	ПриходДенегМП.Основание КАК Основание,
		|	ПриходДенегМП.Комментарий КАК Комментарий,
		|	ПриходДенегМП.Статья КАК Статья,
		|	ПриходДенегМП.НомерСменыККМ КАК НомерСменыККМ,
		|	ПриходДенегМП.НомерЧекаККМ КАК НомерЧекаККМ,
		|	ПриходДенегМП.АдресЭП КАК АдресЭП,
		|	ПриходДенегМП.Телефон КАК Телефон,
		|	ПриходДенегМП.Статус КАК Статус,
		|	ПриходДенегМП.СуммаКартой КАК СуммаКартой,
		|	ПриходДенегМП.СуммаОплаты КАК СуммаОплаты,
		|	ПриходДенегМП.КодАвторизации КАК КодАвторизации,
		|	ПриходДенегМП.СсылочныйНомер КАК СсылочныйНомер,
		|	ПриходДенегМП.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ПриходДенегМП.ДатаОперацииЭТ КАК ДатаОперацииЭТ,
		|	ПриходДенегМП.СлипЧек КАК СлипЧек,
		|	ПриходДенегМП.НомерПодтвержден КАК НомерПодтвержден
		|ИЗ
		|	Документ.ПриходДенегМП КАК ПриходДенегМП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭтоНоваяЗагрузка = Истина;
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
		
		СоздатьПриходДенег(ВыборкаДетальныеЗаписи, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения);
		
		ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПриходДенег(Выборка, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения)
	
	НовыйОбъект = Документы.ПоступлениеВКассу.СоздатьДокумент();
	
	ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка);
	НовыйОбъект.СуммаДокумента = Выборка.Сумма;
	
	НовыйОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
	НовыйОбъект.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
	НовыйОбъект.Касса = НовыйОбъект.Организация.КассаПоУмолчанию;
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Выборка.Контрагент.Код);
	
	Если НовыйОбъект.Контрагент <> Контрагент
	ИЛИ НЕ ЗначениеЗаполнено(НовыйОбъект.ВидОперации) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			НовыйОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.ОтПокупателя;
		Иначе
			НовыйОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеВКассу.Прочее;
			НовыйОбъект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеДоходы;
		КонецЕсли;
	КонецЕсли;
	
	НовыйОбъект.Контрагент = Контрагент;
	НовыйОбъект.ПринятоОт = НовыйОбъект.Контрагент.НаименованиеПолное;
	
	Если ЗначениеЗаполнено(Выборка.Основание) Тогда
		Если ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.РасходТовараМП") Тогда
			РасходнаяНакладная = Документы.РасходнаяНакладная.НайтиПоНомеру(Выборка.Основание.Номер, Выборка.Основание.Дата);
		ИначеЕсли ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.ЗаказМП") Тогда
			ЗаказПокупателя = Документы.ЗаказПокупателя.НайтиПоНомеру(Выборка.Основание.Номер, Выборка.Основание.Дата);
		КонецЕсли;
	КонецЕсли;
	
	ДокументОснование = Неопределено;
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		ДокументОснование = ЗаказПокупателя;
	ИначеЕсли ЗначениеЗаполнено(РасходнаяНакладная) Тогда
		ДокументОснование = РасходнаяНакладная;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		НовыйОбъект.ДокументОснование = ДокументОснование;
	КонецЕсли;

	НовыйОбъект.РасшифровкаПлатежа.Очистить();
	НоваяСтрока = НовыйОбъект.РасшифровкаПлатежа.Добавить();
	ДоговорПоУмолчанию = ПолучитьСоздатьДоговорПоУмолчанию(
		НовыйОбъект.Ссылка,
		НовыйОбъект.Контрагент,
		НовыйОбъект.Организация,
		НовыйОбъект.ВидОперации,
		Перечисления.ВидыДоговоров.СПокупателем);
	
	НоваяСтрока.Договор = ДоговорПоУмолчанию;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта В (&Валюты)) КАК КурсыВалютСрезПоследних");
	
	МассивВалют = Новый Массив();
	МассивВалют.Добавить(ДоговорПоУмолчанию.ВалютаРасчетов);
	МассивВалют.Добавить(НовыйОбъект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Период", НовыйОбъект.Дата);
	Запрос.УстановитьПараметр("Валюты", МассивВалют);
	ТаблицаВалют = Запрос.Выполнить().Выгрузить();
	ВалютаРасчетов = ТаблицаВалют.Найти(ДоговорПоУмолчанию.ВалютаРасчетов, "Валюта");
	ВалютаДенежныхСредств = ТаблицаВалют.Найти(НовыйОбъект.ВалютаДенежныхСредств, "Валюта");
	
	Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		НоваяСтрока.Курс = ВалютаРасчетов.Курс;
		НоваяСтрока.Кратность = ВалютаРасчетов.Кратность;
	Иначе
		НоваяСтрока.Курс = 1;
		НоваяСтрока.Кратность = 1;
	КонецЕсли;
	
	НоваяСтрока.СуммаПлатежа = НовыйОбъект.СуммаДокумента;
	Если ЗначениеЗаполнено(РасходнаяНакладная) Тогда
		НоваяСтрока.Документ = РасходнаяНакладная;
	Иначе
		НоваяСтрока.ПризнакАванса = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		НоваяСтрока.Заказ = ЗаказПокупателя;
	Иначе
		НоваяСтрока.Заказ = НовыйОбъект.ДокументОснование;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			ВалютаДенежныхСредств.Курс,
			НоваяСтрока.Курс,
			ВалютаДенежныхСредств.Кратность,
			НоваяСтрока.Кратность);
	Иначе
		НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			1,
			НоваяСтрока.Курс,
			1,
			НоваяСтрока.Кратность);
	КонецЕсли;
	
	Если НовыйОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(НовыйОбъект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(НовыйОбъект.Дата), НовыйОбъект.Дата, ТекущаяДатаСеанса())); 
	ИначеЕсли НовыйОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
	НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
	НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((НоваяСтрока.СтавкаНДС.Ставка + 100) / 100);

	НовыйОбъект.Комментарий = Выборка.Комментарий;
	НовыйОбъект.Статья = НайтиСоздатьСтатьюМП(Выборка.Статья, Ложь);
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.Статья) Тогда
		НовыйОбъект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей;
	КонецЕсли;
	
	ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры


Процедура ПеренестиПриходТовара()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриходнаяНакладная.Ссылка КАК Ссылка,
		|	ПриходнаяНакладная.ПометкаУдаления КАК ПометкаУдаления,
		|	ПриходнаяНакладная.Номер КАК Номер,
		|	ПриходнаяНакладная.Дата КАК Дата,
		|	ПриходнаяНакладная.Проведен КАК Проведен,
		|	ПриходнаяНакладная.Контрагент КАК Контрагент,
		|	ПриходнаяНакладная.Контрагент.Код КАК КонтрагентКод,
		|	ПриходнаяНакладная.СуммаДокумента КАК СуммаДокумента,
		|	ПриходнаяНакладная.Комментарий КАК Комментарий,
		|	ПриходнаяНакладная.Запасы.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		Цена КАК Цена,
		|		Количество КАК Количество,
		|		Сумма КАК Сумма
		|	) КАК Запасы
		|ИЗ
		|	Документ.ПриходнаяНакладная КАК ПриходнаяНакладная
		|ГДЕ
		|	ПриходнаяНакладная.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭтоНоваяЗагрузка = Истина;
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
		
		СоздатьПриходТовараМП(ВыборкаДетальныеЗаписи, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения);
		
		ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПриходТовараМП(Выборка, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения)
	
	НовыйОбъект = Документы.ПриходТовараМП.СоздатьДокумент();
	
	ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка);
	
	НовыйОбъект.Поставщик = Справочники.КонтрагентыМП.НайтиПоКоду(Выборка.КонтрагентКод);
	НовыйОбъект.СуммаДокумента = Выборка.СуммаДокумента;
	
	ТабЧасть = Выборка.Запасы.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		Товар = Справочники.ТоварыМП.НайтиПоКоду(ТабЧасть.НоменклатураКод);
		НоваяСтрока = НовыйОбъект.Товары.Добавить();
		
		НоваяСтрока.Товар = Товар;
		НоваяСтрока.Цена = ТабЧасть.Цена;
		НоваяСтрока.Количество = ТабЧасть.Количество;
		НоваяСтрока.Сумма = ТабЧасть.Сумма;
	КонецЦикла;
	
	НовыйОбъект.Комментарий = Выборка.Комментарий;
	
	ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры


Процедура ПеренестиРасходДенегМП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходДенегМП.Ссылка КАК Ссылка,
		|	РасходДенегМП.ПометкаУдаления КАК ПометкаУдаления,
		|	РасходДенегМП.Номер КАК Номер,
		|	РасходДенегМП.Дата КАК Дата,
		|	РасходДенегМП.Проведен КАК Проведен,
		|	РасходДенегМП.Контрагент КАК Контрагент,
		|	РасходДенегМП.Сумма КАК Сумма,
		|	РасходДенегМП.Основание КАК Основание,
		|	РасходДенегМП.Комментарий КАК Комментарий,
		|	РасходДенегМП.Статья КАК Статья,
		|	РасходДенегМП.НомерПодтвержден КАК НомерПодтвержден
		|ИЗ
		|	Документ.РасходДенегМП КАК РасходДенегМП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭтоНоваяЗагрузка = Истина;
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
		
		СоздатьРасходДенег(ВыборкаДетальныеЗаписи, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения);
		
		ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьРасходДенег(Выборка, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения)
	
	НовыйОбъект = Документы.РасходИзКассы.СоздатьДокумент();
	
	ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка);
	НовыйОбъект.СуммаДокумента = Выборка.Сумма;
	
	НовыйОбъект.ВалютаДенежныхСредств = Константы.НациональнаяВалюта.Получить();
	НовыйОбъект.Касса = НовыйОбъект.Организация.КассаПоУмолчанию;
	
	Контрагент = Справочники.Контрагенты.НайтиПоКоду(Выборка.Контрагент.Код);
	Если НовыйОбъект.Контрагент <> Контрагент
		ИЛИ НЕ ЗначениеЗаполнено(НовыйОбъект.ВидОперации) Тогда
		Если ЗначениеЗаполнено(Контрагент) Тогда
			НовыйОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.Поставщику;
		Иначе
			НовыйОбъект.ВидОперации = Перечисления.ВидыОперацийРасходИзКассы.НаРасходы;
			НовыйОбъект.Корреспонденция = ПланыСчетов.Управленческий.ПрочиеРасходы;
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйОбъект.Контрагент <> Контрагент Тогда
		НовыйОбъект.Контрагент = Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Выборка.Основание) Тогда
		ПриходнаяНакладная = Документы.ПриходнаяНакладная.НайтиПоНомеру(Выборка.Основание.Номер, Выборка.Основание.Дата);
		НовыйОбъект.ДокументОснование = ПриходнаяНакладная;
	КонецЕсли;
	
	НовыйОбъект.РасшифровкаПлатежа.Очистить();
	НужноЗаписыватьОбъект = Истина;
	НоваяСтрока = НовыйОбъект.РасшифровкаПлатежа.Добавить();
	ДоговорПоУмолчанию = ПолучитьСоздатьДоговорПоУмолчанию(
		НовыйОбъект.Ссылка,
		НовыйОбъект.Контрагент,
		НовыйОбъект.Организация,
		НовыйОбъект.ВидОперации,
		Перечисления.ВидыДоговоров.СПоставщиком);
		
	НоваяСтрока.Договор = ДоговорПоУмолчанию;
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта,
		|	КурсыВалютСрезПоследних.Курс,
		|	КурсыВалютСрезПоследних.Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта В (&Валюты)) КАК КурсыВалютСрезПоследних");
	
	МассивВалют = Новый Массив();
	МассивВалют.Добавить(ДоговорПоУмолчанию.ВалютаРасчетов);
	МассивВалют.Добавить(НовыйОбъект.ВалютаДенежныхСредств);
	Запрос.УстановитьПараметр("Период", НовыйОбъект.Дата);
	Запрос.УстановитьПараметр("Валюты", МассивВалют);
	ТаблицаВалют = Запрос.Выполнить().Выгрузить();
	ВалютаРасчетов = ТаблицаВалют.Найти(ДоговорПоУмолчанию.ВалютаРасчетов, "Валюта");
	ВалютаДенежныхСредств = ТаблицаВалют.Найти(НовыйОбъект.ВалютаДенежныхСредств, "Валюта");
	
	Если ЗначениеЗаполнено(ВалютаРасчетов) Тогда
		НоваяСтрока.Курс = ВалютаРасчетов.Курс;
		НоваяСтрока.Кратность = ВалютаРасчетов.Кратность;
	Иначе
		НоваяСтрока.Курс = 1;
		НоваяСтрока.Кратность = 1;
	КонецЕсли;

	
	НоваяСтрока.СуммаПлатежа = НовыйОбъект.СуммаДокумента;
	Если ЗначениеЗаполнено(ПриходнаяНакладная) Тогда
		НоваяСтрока.Документ = ПриходнаяНакладная;
	Иначе
		НоваяСтрока.ПризнакАванса = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			ВалютаДенежныхСредств.Курс,
			НоваяСтрока.Курс,
			ВалютаДенежныхСредств.Кратность,
			НоваяСтрока.Кратность);
	Иначе
		НоваяСтрока.СуммаРасчетов = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(
			НоваяСтрока.СуммаПлатежа,
			1,
			НоваяСтрока.Курс,
			1,
			НоваяСтрока.Кратность);
	КонецЕсли;
	
	Если НовыйОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = Справочники.СтавкиНДС.СтавкаНДС(НовыйОбъект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(НовыйОбъект.Дата), НовыйОбъект.Дата, ТекущаяДатаСеанса())); 
	ИначеЕсли НовыйОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
	Иначе
		СтавкаНДСПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
	КонецЕсли;
	
	НоваяСтрока.СтавкаНДС = СтавкаНДСПоУмолчанию;
	НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаПлатежа - (НоваяСтрока.СуммаПлатежа) / ((НоваяСтрока.СтавкаНДС.Ставка + 100) / 100);
	
	НовыйОбъект.Комментарий = Выборка.Комментарий;
	
	НовыйОбъект.Статья = НайтиСоздатьСтатьюМП(Выборка.Статья, Ложь);
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.Статья) Тогда
		НовыйОбъект.Статья = Справочники.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам;
	КонецЕсли;
	
	ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения);

КонецПроцедуры


Процедура ПеренестиЧекККМВозвратМП()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЧекККМВозвратМП.Ссылка КАК Ссылка,
		|	ЧекККМВозвратМП.ПометкаУдаления КАК ПометкаУдаления,
		|	ЧекККМВозвратМП.Номер КАК Номер,
		|	ЧекККМВозвратМП.Дата КАК Дата,
		|	ЧекККМВозвратМП.Проведен КАК Проведен,
		|	ЧекККМВозвратМП.СуммаДокумента КАК СуммаДокумента,
		|	ЧекККМВозвратМП.Комментарий КАК Комментарий,
		|	ЧекККМВозвратМП.СуммаОплаты КАК СуммаОплаты,
		|	ЧекККМВозвратМП.СуммаСкидки КАК СуммаСкидки,
		|	ЧекККМВозвратМП.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах,
		|	ЧекККМВозвратМП.НомерСменыККМ КАК НомерСменыККМ,
		|	ЧекККМВозвратМП.НомерЧекаККМ КАК НомерЧекаККМ,
		|	ЧекККМВозвратМП.АдресЭП КАК АдресЭП,
		|	ЧекККМВозвратМП.Телефон КАК Телефон,
		|	ЧекККМВозвратМП.Статус КАК Статус,
		|	ЧекККМВозвратМП.РозничнаяТочка КАК РозничнаяТочка,
		|	ЧекККМВозвратМП.КассаККМ КАК КассаККМ,
		|	ЧекККМВозвратМП.СуммаКартой КАК СуммаКартой,
		|	ЧекККМВозвратМП.КодАвторизации КАК КодАвторизации,
		|	ЧекККМВозвратМП.СсылочныйНомер КАК СсылочныйНомер,
		|	ЧекККМВозвратМП.НомерПлатежнойКарты КАК НомерПлатежнойКарты,
		|	ЧекККМВозвратМП.ДатаОперацииЭТ КАК ДатаОперацииЭТ,
		|	ЧекККМВозвратМП.СлипЧек КАК СлипЧек,
		|	ЧекККМВозвратМП.ЧекККМ КАК ЧекККМ,
		|	ЧекККМВозвратМП.НомерПодтвержден КАК НомерПодтвержден,
		|	ЧекККМВозвратМП.Товары.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Товар КАК Товар,
		|		Цена КАК Цена,
		|		Количество КАК Количество,
		|		Сумма КАК Сумма
		|	) КАК Товары
		|ИЗ
		|	Документ.ЧекККМВозвратМП КАК ЧекККМВозвратМП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЭтоНоваяЗагрузка = Истина;
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
		
		СоздатьЧекККМВозврат(ВыборкаДетальныеЗаписи, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения);
		
		ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЧекККМВозврат(Выборка, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения)

	НовыйОбъект = Документы.ЧекККМВозврат.СоздатьДокумент();
	
	ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка);
	
	НовыйОбъект.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		НовыйОбъект.Автор,
		"ОсновнойОтветственный");
	
	НовыйОбъект.КассоваяСмена = Документы.ОтчетОРозничныхПродажах.НайтиПоНомеру(Выборка.ОтчетОРозничныхПродажах.Номер, Выборка.ОтчетОРозничныхПродажах.Дата);
	
	Если ЗначениеЗаполнено(Выборка.НомерЧекаККМ) Тогда
		НомерЧекаККМ = Число(Выборка.НомерЧекаККМ);
	Иначе
		НомерЧекаККМ = 0;
	КонецЕсли;
	
	НовыйОбъект.НомерЧекаККМ = НомерЧекаККМ;
	
	
	Если ЗначениеЗаполнено(Выборка.НомерСменыККМ) Тогда
		НомерСменыККМ = Число(Выборка.НомерСменыККМ);
	Иначе
		НомерСменыККМ = 0;
	КонецЕсли;
	
	НовыйОбъект.НомерСменыККМ = НомерСменыККМ;
	НовыйОбъект.КассаККМ = Справочники.КассыККМ.НайтиПоКоду(Выборка.КассаККМ.Код);
	
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.КассаККМ) Тогда
		НовыйОбъект.КассаККМ = Справочники.КассыККМ.НайтиПоНаименованию("Касса ККМ");
	КонецЕсли;
	
	НовыйОбъект.Подразделение = НовыйОбъект.КассаККМ.Подразделение;
	НовыйОбъект.СтруктурнаяЕдиница = НовыйОбъект.КассаККМ.СтруктурнаяЕдиница;
	
	НовыйОбъект.ЧекККМ = Документы.ЧекККМ.НайтиПоНомеру(Выборка.ЧекККМ.Номер, Выборка.ЧекККМ.Дата);
	
	Если ЗначениеЗаполнено(НовыйОбъект.СтруктурнаяЕдиница) Тогда
		НовыйОбъект.ВидЦен = НовыйОбъект.СтруктурнаяЕдиница.РозничныйВидЦен;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.ВидЦен) Тогда
		НовыйОбъект.ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		НовыйОбъект.Автор,
		"ОсновнойВидЦенПродажи");
	КонецЕсли;
	НовыйОбъект.ВидЦен = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен, Справочники.ВидыЦен.Оптовая);
	НовыйОбъект.СуммаВключаетНДС = ?(ЗначениеЗаполнено(НовыйОбъект.ВидЦен), НовыйОбъект.ВидЦен.ЦенаВключаетНДС, Истина);
	
	ТабЧасть = Выборка.Товары.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		НоваяСтрока = НовыйОбъект.Запасы.Добавить();
		НоваяСтрока.Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ТабЧасть.Товар.Код);
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Цена = ТабЧасть.Цена;
		НоваяСтрока.Количество = ТабЧасть.Количество;
		НоваяСтрока.Сумма = ТабЧасть.Сумма;
		НоваяСтрока.СтавкаНДС = ПолучитьСтавкуНДС(ТабЧасть.Товар);
		РассчитатьСуммыВСтрокеТабличнойЧасти(НовыйОбъект, НоваяСтрока);
		
	КонецЦикла;
	
	НовыйОбъект.Комментарий = Выборка.Комментарий;
	
	ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры


Процедура ПеренестиПроизводство()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СборкаЗапасов.Ссылка КАК Ссылка,
		|	СборкаЗапасов.ПометкаУдаления КАК ПометкаУдаления,
		|	СборкаЗапасов.Номер КАК Номер,
		|	СборкаЗапасов.Дата КАК Дата,
		|	СборкаЗапасов.Проведен КАК Проведен,
		|	СборкаЗапасов.Комментарий КАК Комментарий,
		|	СборкаЗапасов.Продукция.(
		|		Ссылка КАК Ссылка,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура КАК НоменклатураКод,
		|		Количество КАК Количество,
		|		Спецификация КАК Спецификация
		|	) КАК Продукция,
		|	СборкаЗапасов.Запасы.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура КАК НоменклатураКод,
		|		Количество КАК Количество
		|	) КАК Запасы
		|ИЗ
		|	Документ.СборкаЗапасов КАК СборкаЗапасов";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЭтоНоваяЗагрузка = Истина;
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
		
		СоздатьПроизводствоМП(ВыборкаДетальныеЗаписи, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения);
		
		ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения);

	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПроизводствоМП(Выборка, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения)
	
	НовыйОбъект = Документы.ПроизводствоМП.СоздатьДокумент();
	
	ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка);
	
	НовыйОбъект.ВидОперации = Перечисления.ВидыОперацийСборкаЗапасов.Сборка;
	
	СтруктурнаяЕдиницаПоУмолчанию = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		НовыйОбъект.Автор,
		"ОсновнойСклад");
	
	СтруктурнаяЕдиницаПоУмолчанию = ?(ЗначениеЗаполнено(СтруктурнаяЕдиницаПоУмолчанию), СтруктурнаяЕдиницаПоУмолчанию, Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.СтруктурнаяЕдиница) Тогда
		НовыйОбъект.СтруктурнаяЕдиница = СтруктурнаяЕдиницаПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.СтруктурнаяЕдиницаПродукции) Тогда
		НовыйОбъект.СтруктурнаяЕдиницаПродукции = СтруктурнаяЕдиницаПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.СтруктурнаяЕдиницаЗапасов) Тогда
		НовыйОбъект.СтруктурнаяЕдиницаЗапасов = СтруктурнаяЕдиницаПоУмолчанию;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.СтруктурнаяЕдиницаОтходов) Тогда
		НовыйОбъект.СтруктурнаяЕдиницаОтходов = СтруктурнаяЕдиницаПоУмолчанию;
	КонецЕсли;
	
	ТабЧасть = Выборка.Продукция.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ТабЧасть.Товар.Код);
		НоваяСтрока = НовыйОбъект.Продукция.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Количество = ТабЧасть.Количество;
	КонецЦикла;
	
	ТабЧасть = Выборка.Материалы.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		Номенклатура = Справочники.Номенклатура.НайтиПоКоду(ТабЧасть.Товар.Код);
		НоваяСтрока = НовыйОбъект.Запасы.Добавить();
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		НоваяСтрока.Количество = ТабЧасть.Количество;
	КонецЦикла;
	
	НовыйОбъект.Комментарий = Выборка.Комментарий;
	
	ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры


Процедура ПеренестиВводОстатков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВводНачальныхОстатков.Ссылка КАК Ссылка,
		|	ВводНачальныхОстатков.ПометкаУдаления КАК ПометкаУдаления,
		|	ВводНачальныхОстатков.Номер КАК Номер,
		|	ВводНачальныхОстатков.Дата КАК Дата,
		|	ВводНачальныхОстатков.Проведен КАК Проведен,
		|	ВводНачальныхОстатков.Запасы.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Номенклатура КАК Номенклатура,
		|		Номенклатура.Код КАК НоменклатураКод,
		|		Количество КАК Количество,
		|		Сумма КАК Сумма
		|	) КАК Запасы
		|ИЗ
		|	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
		|ГДЕ
		|	ВводНачальныхОстатков.РазделУчета = ""Запасы""";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЭтоНоваяЗагрузка = Истина;
		
		ДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументТип");
		
		СоздатьВводОстатковМП(ВыборкаДетальныеЗаписи, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения);
		
		ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьВводОстатковМП(Выборка, ЭтоНоваяЗагрузка, ДокументыДляОтложенногоПроведения)

	НовыйОбъект = Документы.ВводОстатковМП.СоздатьДокумент();
	
	НовыйОбъект.Номер = Выборка.Номер;
	НовыйОбъект.Дата = Выборка.Дата;
	
	ТабЧасть = Выборка.Запасы.Выбрать();
	Пока ТабЧасть.Следующий() Цикл
		НоваяСтрока = НовыйОбъект.Товары.Добавить();
		НоваяСтрока.Товар = Справочники.ТоварыМП.НайтиПоКоду(ТабЧасть.НоменклатураКод);
		НоваяСтрока.Количество = ТабЧасть.Количество;
		НоваяСтрока.Сумма = ТабЧасть.Сумма;
	КонецЦикла;
	
	ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения);
	
КонецПроцедуры

#КонецОбласти

#Область Перечисления

Функция НайтиВидНоменклатуры(Тип)
	
	Если Тип = Перечисления.ТипыНоменклатуры.Запас Тогда
		Вид = Перечисления.ВидыТоваровМП.Товар;
	Иначе
		Вид = Перечисления.ВидыТоваровМП.Услуга;
	КонецЕсли;
	
	Возврат Вид;
	
КонецФункции

Функция НайтиСостоянияЗаказовПокупателей(ОбъектXDTO, ВидЗаказа)
	
	Если ОбъектXDTO = Неопределено Тогда
		Возврат Справочники.СостоянияЗаказовПокупателей.ПустаяСсылка();
	КонецЕсли;
	
	Если ОбъектXDTO = Перечисления.СостоянияЗаказовМП.Выполнен Тогда
		НовыйОбъект = Справочники.СостоянияЗаказовПокупателей.Завершен;
	Иначе
		НовыйОбъект = ЗаполнениеОбъектовУНФ.ПолучитьСостояниеЗаказаПокупателя(ВидЗаказа);
	КонецЕсли;
	
	Возврат НовыйОбъект;
	
КонецФункции // НайтиСостоянияЗаказовПокупателей()

#КонецОбласти

#Область РегистрыСведений

Процедура НайтиСоздатьШтрихкодНоменклатуры(Номенклатура, Штрихкод)
	
	ШтрихкодНоменклатуры = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоНоменклатуре(Номенклатура);
	
	Если Штрихкод = ШтрихкодНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШтрихкодНоменклатуры) Тогда
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Установить(ШтрихкодНоменклатуры);
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Штрихкод) Тогда
		НаборЗаписей = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Штрихкод.Установить(Штрихкод);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Штрихкод = Штрихкод;
		НоваяЗапись.Номенклатура = Номенклатура;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры


Процедура ПеренестиЦеныТоваров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныТоваровМП.Период КАК Период,
		|	ЦеныТоваровМП.Товар КАК Товар,
		|	ЦеныТоваровМП.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ЦеныТоваровМП КАК ЦеныТоваровМП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗагрузитьЦеныТоваров(ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьЦеныТоваров(Выборка)
	
	Пользователь = Пользователи.ТекущийПользователь();
	
	ВидЦен = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ОсновнойВидЦенПродажи");
	
	Если Не ЗначениеЗаполнено(ВидЦен) Тогда
		ВидЦен = Справочники.ВидыЦен.Оптовая;
	КонецЕсли;
	
	Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Выборка.Товар.Код);
	
	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
	НаборЗаписей.Отбор.ВидЦен.Установить(ВидЦен);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Выборка.Период;
	НоваяЗапись.ВидЦен = ВидЦен;
	НоваяЗапись.Номенклатура = Номенклатура;
	НоваяЗапись.Цена = Выборка.Цена;
	НоваяЗапись.Актуальность = Истина;
	НоваяЗапись.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
	НоваяЗапись.Автор = Пользователь;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры


Процедура ПеренестиЦеныПоставщиков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЦеныПоставщиковМП.Период КАК Период,
		|	ЦеныПоставщиковМП.Товар КАК Товар,
		|	ЦеныПоставщиковМП.Поставщик КАК Поставщик,
		|	ЦеныПоставщиковМП.Цена КАК Цена,
		|	ЦеныПоставщиковМП.ДокументПоставки КАК ДокументПоставки
		|ИЗ
		|	РегистрСведений.ЦеныПоставщиковМП КАК ЦеныПоставщиковМП";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗагрузитьЦеныПоставщиков(ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьЦеныПоставщиков(Выборка)

	Пользователь = Пользователи.ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(Выборка.Поставщик) Тогда
		Возврат;
	КонецЕсли;
	
	ВидЦен = ПолучитьВидЦенКонтрагента(Справочники.Контрагенты.НайтиПоКоду(Выборка.Поставщик.Код));
	
	Если ВидЦен = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = Справочники.Номенклатура.НайтиПоКоду(Выборка.Товар.Код);
	
	НаборЗаписей = РегистрыСведений.ЦеныНоменклатурыКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
	НаборЗаписей.Отбор.ВидЦенКонтрагента.Установить(ВидЦен);
	НаборЗаписей.Отбор.Номенклатура.Установить(Номенклатура);
	НаборЗаписей.Отбор.Характеристика.Установить(Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период = Выборка.Период;
	НоваяЗапись.ВидЦенКонтрагента = ВидЦен;
	НоваяЗапись.Номенклатура = Номенклатура;
	НоваяЗапись.Цена = Выборка.Цена;
	НоваяЗапись.Актуальность = Истина;
	НоваяЗапись.ЕдиницаИзмерения = Номенклатура.ЕдиницаИзмерения;
	НоваяЗапись.Автор = Пользователь;
	НоваяЗапись.ДокументРегистратор = Документы.ПриходнаяНакладная.НайтиПоНомеру(Выборка.ДокументПоставки.Номер, Выборка.ДокументПоставки.Дата);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область Константы

Процедура ПеренестиКонстанты()
	
	Ссылка = Справочники.Организации.ОсновнаяОрганизация;
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Организации");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
		Блокировка.Заблокировать();
		
		НовыйОбъект = Ссылка.ПолучитьОбъект();
		
		НовыйОбъект.ИНН = Константы.ИННМП.Получить();
		НовыйОбъект.КПП = Константы.КППМП.Получить();
		НовыйОбъект.Наименование = Константы.НазваниеОрганизацииМП.Получить();
		НовыйОбъект.НаименованиеПолное = Константы.НазваниеОрганизацииМП.Получить();
		Если СтрДлина(НовыйОбъект.ИНН) = 12 Тогда
			НовыйОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Иначе
			НовыйОбъект.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
		
		Если НовыйОбъект.КонтактнаяИнформация.Количество() > 0 Тогда
			НовыйОбъект.КонтактнаяИнформация.Очистить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Константы.АдресОрганизацииМП.Получить()) Тогда
			НоваяСтрока = НовыйОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			НоваяСтрока.Представление = Константы.АдресОрганизацииМП.Получить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Константы.АдресОрганизацииМП.Получить()) Тогда
			НоваяСтрока = НовыйОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
			НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
			НоваяСтрока.Представление = Константы.АдресОрганизацииМП.Получить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Константы.ТелефонОрганизацииМП.Получить()) Тогда
			НоваяСтрока = НовыйОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации;
			НоваяСтрока.Представление = Константы.ТелефонОрганизацииМП.Получить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Константы.АдресЭПОрганизацииМП.Получить()) Тогда
			НоваяСтрока = НовыйОбъект.КонтактнаяИнформация.Добавить();
			НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяСтрока.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации;
			НоваяСтрока.Представление = Константы.АдресЭПОрганизацииМП.Получить();
		КонецЕсли;
		
		НовыйОбъект.Записать();
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьВсеОбъектыНаСервере()
	
	МассивСНаименованиямиДокументов = Новый Массив;
	МассивСНаименованиямиДокументов.Добавить("ЗаказМП");
	МассивСНаименованиямиДокументов.Добавить("ПриходДенегМП");
	МассивСНаименованиямиДокументов.Добавить("РасходДенегМП");
	МассивСНаименованиямиДокументов.Добавить("ОтчетОРозничныхПродажахМП");
	МассивСНаименованиямиДокументов.Добавить("ПриходТовараМП");
	МассивСНаименованиямиДокументов.Добавить("РасходТовараМП");
	МассивСНаименованиямиДокументов.Добавить("ПроизводствоМП");
	МассивСНаименованиямиДокументов.Добавить("ЧекККММП");
	МассивСНаименованиямиДокументов.Добавить("ЧекККМВозвратМП");
	МассивСНаименованиямиДокументов.Добавить("ВводОстатковМП");
	
	Для каждого НаименованиеДокумента Из МассивСНаименованиямиДокументов Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|Док.Ссылка КАК Док_
		|ИЗ Документ." + НаименованиеДокумента + " КАК Док";
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Документ." + НаименованиеДокумента);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Док_);
				Блокировка.Заблокировать();
				
				ДокументОбъект = ВыборкаДетальныеЗаписи.Док_.ПолучитьОбъект();
				ДокументОбъект.Удалить();
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ВызватьИсключение;
				
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	МассивСНаименованиямиСправочников = Новый Массив;
	МассивСНаименованиямиСправочников.Добавить("ТоварыМП");
	МассивСНаименованиямиСправочников.Добавить("СтруктурныеЕдиницыМП");
	МассивСНаименованиямиСправочников.Добавить("СтатьиМП");
	МассивСНаименованиямиСправочников.Добавить("СтавкиНДСМП");
	МассивСНаименованиямиСправочников.Добавить("КонтрагентыМП");
	МассивСНаименованиямиСправочников.Добавить("КассыККММП");
	МассивСНаименованиямиСправочников.Добавить("СпецификацииМП");
	//МассивСНаименованиямиСправочников.Добавить("Организации");
	
	Для каждого НаименованиеСправочника Из МассивСНаименованиямиСправочников Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст =  "ВЫБРАТЬ
		|Спр.Ссылка КАК Спр_
		|ИЗ Справочник." + НаименованиеСправочника + " КАК Спр";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НачатьТранзакцию();
			Попытка
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить("Справочник." + НаименованиеСправочника);
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Спр_);
				Блокировка.Заблокировать();
				
				СправочникОбъект = ВыборкаДетальныеЗаписи.Спр_.ПолучитьОбъект();
				
				Если СправочникОбъект = Неопределено Тогда
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
				
				Если НЕ СправочникОбъект.Предопределенный Тогда
					
					СправочникОбъект.Удалить();
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				ВызватьИсключение;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиСтавкуНДС(Выборка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК СтавкаНДС
		|ИЗ
		|	Справочник.СтавкиНДСМП КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Наименование = &Наименование
		|	И СтавкиНДС.Ставка = &Ставка
		|	И СтавкиНДС.НеОблагается = &НеОблагается
		|	И СтавкиНДС.Расчетная = &Расчетная";
	
	СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Выборка); 
	
	Запрос.УстановитьПараметр("Наименование", СтавкаНДС.Наименование);
	Запрос.УстановитьПараметр("НеОблагается", СтавкаНДС.НеОблагается);
	Запрос.УстановитьПараметр("Расчетная", СтавкаНДС.Расчетная);
	Запрос.УстановитьПараметр("Ставка", СтавкаНДС.Ставка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.СтавкаНДС;
	КонецЕсли;
	
	Возврат Справочники.СтавкиНДСМП.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьСоздатьДоговорПоУмолчанию(Документ, Контрагент, Организация, ВидОперации, ВидДоговора)
	
	Если НЕ Контрагент.ВестиРасчетыПоДоговорам Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(Контрагент);
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(Документ, ВидОперации);
	ДоговорПоУмолчанию = МенеджерСправочника.ПолучитьДоговорПоУмолчаниюПоОрганизацииВидуДоговора(Контрагент, Организация, СписокВидовДоговоров);
	
	Если НЕ ЗначениеЗаполнено(ДоговорПоУмолчанию) Тогда
		ДоговорПоУмолчанию = СоздатьДоговорПоУмолчанию(Контрагент, Организация, ВидДоговора);
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции // ПолучитьДоговорПоУмолчанию()

Процедура РассчитатьСуммыВСтрокеТабличнойЧасти(НовыйОбъект, НоваяСтрока)
	
	Если НовыйОбъект.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		Если НовыйОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС Тогда
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
		Иначе
			НоваяСтрока.СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСНоль();
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НоваяСтрока.Номенклатура.ВидСтавкиНДС) Тогда
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НоваяСтрока.Номенклатура.ВидСтавкиНДС, ?(ЗначениеЗаполнено(НовыйОбъект.Дата), НовыйОбъект.Дата, ТекущаяДатаСеанса()));
	Иначе
		НоваяСтрока.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(НовыйОбъект.Организация.ВидСтавкиНДСПоУмолчанию, ?(ЗначениеЗаполнено(НовыйОбъект.Дата), НовыйОбъект.Дата, ТекущаяДатаСеанса()));
	КонецЕсли;
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
	НоваяСтрока.СуммаНДС = ?(
		НовыйОбъект.СуммаВключаетНДС,
		НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((СтавкаНДС + 100) / 100),
		НоваяСтрока.Сумма * СтавкаНДС / 100);
	
	НоваяСтрока.Всего = НоваяСтрока.Сумма + ?(НовыйОбъект.СуммаВключаетНДС, 0, НоваяСтрока.СуммаНДС);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

Функция СоздатьДоговорПоУмолчанию(Контрагент, Организация, ВидДоговора)
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	
	НовыйДоговор.ВалютаРасчетов = Константы.НациональнаяВалюта.Получить();
	НовыйДоговор.Организация = Организация;
	НовыйДоговор.ВидДоговора = ВидДоговора;
	НовыйДоговор.ВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	НовыйДоговор.Владелец = Контрагент;
	НовыйДоговор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
	НовыйДоговор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
	
	// Заполним вид цен контрагента
	НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.ВидЦенКонтрагентаПоУмолчанию(Контрагент);
	
	Если НЕ ЗначениеЗаполнено(НовыйВидЦенКонтрагентов) Тогда 
		
		НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.НайтиЛюбойПервыйВидЦенКонтрагента(Контрагент);
		
		Если НЕ ЗначениеЗаполнено(НовыйВидЦенКонтрагентов) Тогда
			
			НовыйВидЦенКонтрагентов = Справочники.ВидыЦенКонтрагентов.СоздатьВидЦенКонтрагента(
				Контрагент,
				НовыйДоговор.ВалютаРасчетов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйДоговор.ВидЦенКонтрагента = НовыйВидЦенКонтрагентов;
	
	Если ПустаяСтрока(НовыйДоговор.Наименование) Тогда
		НовыйДоговор.Наименование = ШаблоныНаименований.НаименованиеДоговораПоУмолчанию(НовыйДоговор);
	КонецЕсли;
	
	НовыйДоговор.Записать();
	
	Справочники.ДоговорыКонтрагентов.ЗаписатьДоговорПоУмолчанию(НовыйДоговор);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НовыйДоговор.Ссылка;
	
КонецФункции // СоздатьДоговорПоУмолчанию()

Функция ПолучитьСтавкуНДС(СсылкаНаНоменклатуру)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаНоменклатуру.СтавкаНДС) Тогда
		СсылкаНаНоменклатуруИзУНФ = Справочники.Номенклатура.НайтиПоКоду(СсылкаНаНоменклатуру.Код);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.ВидСтавкиНДС.Ссылка КАК ВидСтавкиНДССсылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &СсылкаНаНоменклатуруИзУНФ";
		
		Запрос.УстановитьПараметр("СсылкаНаНоменклатуруИзУНФ", СсылкаНаНоменклатуруИзУНФ);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ВидСтавкиНДС = ВыборкаДетальныеЗаписи.ВидСтавкиНДССсылка;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.ВидСтавкиНДС = &ВидСтавкиНДС";
		
		Запрос.УстановитьПараметр("ВидСтавкиНДС", ВидСтавкиНДС);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтавкиНДС.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтавкиНДС КАК СтавкиНДС
		|ГДЕ
		|	СтавкиНДС.Ставка = &Ставка
		|	И СтавкиНДС.НеОблагается = &НеОблагается
		|	И СтавкиНДС.Расчетная = &Расчетная
		|	И СтавкиНДС.Наименование = &Наименование";
		
		Запрос.УстановитьПараметр("Наименование", СсылкаНаНоменклатуру.СтавкаНДС.Наименование);
		Запрос.УстановитьПараметр("НеОблагается", СсылкаНаНоменклатуру.СтавкаНДС.НеОблагается);
		Запрос.УстановитьПараметр("Расчетная", СсылкаНаНоменклатуру.СтавкаНДС.Расчетная);
		Запрос.УстановитьПараметр("Ставка", СсылкаНаНоменклатуру.СтавкаНДС.Ставка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецФункции

Процедура ЗаписатьДокумент(НовыйОбъект, Выборка, ДокументыДляОтложенногоПроведения)
	
	НовыйОбъект.ПометкаУдаления = Выборка.ПометкаУдаления;
	
	РежимЗаписи = РежимЗаписиДокумента.Проведение;
	Если Не Выборка.Проведен Тогда
		РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	Если НовыйОбъект.ПометкаУдаления
		И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		
		НовыйОбъект.ПометкаУдаления = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.Номер) Тогда
		
		НовыйОбъект.УстановитьНовыйНомер();
		
	КонецЕсли;
	
	НовыйОбъект.ОбменДанными.Загрузка = Истина;
	Попытка
		
		Если Не НовыйОбъект.Проведен Тогда
			НовыйОбъект.Записать();
		Иначе
			// Отменяем проведение документа
			НовыйОбъект.Проведен = Ложь;
			НовыйОбъект.Записать();
			УдалитьДвиженияУДокумента(НовыйОбъект);
		КонецЕсли;
		
	Исключение
		
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если ДокументыДляОтложенногоПроведения.Найти(НовыйОбъект.Ссылка, "ДокументСсылка") = Неопределено Тогда
			СтрокаТаблицы = ДокументыДляОтложенногоПроведения.Добавить();
			СтрокаТаблицы.ДокументСсылка = НовыйОбъект.Ссылка;
			СтрокаТаблицы.ДокументТип = НовыйОбъект.Метаданные().Имя;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьДокумент()

Процедура ВыполнитьОтложенноеПроведениеДокументов(ДокументыДляОтложенногоПроведения)

	ДокументыДляОтложенногоПроведения.Сортировать("ДокументТип");
	
	Для Каждого СтрокаТаблицы Из ДокументыДляОтложенногоПроведения Цикл
		
		Если СтрокаТаблицы.ДокументСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйОбъект = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
		
		Если НовыйОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйОбъект.ОбменДанными.Загрузка = Ложь;
		
		Попытка
			
			НовыйОбъект.ПроверитьЗаполнение();
			НовыйОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
		КонецПопытки;
		
	КонецЦикла;

КонецПроцедуры // ВыполнитьОтложенноеПроведениеДокументов()

Процедура УдалитьДвиженияУДокумента(ДокументОбъект)
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// Получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения Из ТаблицаДвижений Цикл
		// Имя регистра передается как значение, полученное с помощью
		// Функции ПолноеИмя() метаданных регистра
		ПозицияТочки = СтрНайти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// Отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// Набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// Выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения Из МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// Возможно «сработал» RLS или подсистема даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
КонецПроцедуры

Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
		
	Для каждого Движение Из ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчисткаКоллекцииДвиженийДокумента()

Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса = "";
	// Для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		// В запросе получаем имена регистров, по которым есть хотя бы одно движение
		// Например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// Имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// Если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// При выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// При втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// Приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// Если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// Таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение Из МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции // ОпределитьНаличиеДвиженийПоДокументу()

Процедура ЗаполнитьОсновныеРеквизитыДокумента(НовыйОбъект, Выборка)
	
	НовыйОбъект.Номер = Выборка.Номер;
	
	Если НовыйОбъект.Дата <> Выборка.Дата Тогда
		НовыйОбъект.Дата = Выборка.Дата;
	КонецЕсли;
	Если ТипЗнч(НовыйОбъект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов") И ТипЗнч(НовыйОбъект.Ссылка) <> Тип("ДокументСсылка.ПоступлениеВКассу") И ТипЗнч(НовыйОбъект.Ссылка) <> Тип("ДокументСсылка.РасходИзКассы")
		И НовыйОбъект.СуммаДокумента <> Выборка.СуммаДокумента Тогда
		НовыйОбъект.СуммаДокумента = Выборка.СуммаДокумента;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.Автор) Тогда
		НовыйОбъект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовыйОбъект.Организация) Тогда
		ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			НовыйОбъект.Автор,
			"ОсновнаяОрганизация");
		
		НовыйОбъект.Организация = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), ОсновнаяОрганизация, Справочники.Организации.ОсновнаяОрганизация);
	КонецЕсли;
	Если ТипЗнч(НовыйОбъект.Ссылка) <> Тип("ДокументСсылка.СборкаЗапасов")
		И НЕ ЗначениеЗаполнено(НовыйОбъект.НалогообложениеНДС) Тогда
		НовыйОбъект.НалогообложениеНДС = УправлениеНебольшойФирмойСервер.НалогообложениеНДС(НовыйОбъект.Организация, , НовыйОбъект.Дата);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьОсновныеРеквизитыДокумента()

Функция ОжидаетсяВыборВариантаКП(НовыйОбъект)
	
	Возврат НовыйОбъект.КоличествоВариантовКП <> 0 И НовыйОбъект.ОсновнойВариантКП = 0;
	
КонецФункции

Функция ПолучитьВидЦенКонтрагента(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыЦенКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыЦенКонтрагентов КАК ВидыЦенКонтрагентов
		|ГДЕ
		|	ВидыЦенКонтрагентов.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ПереходВБольшойУНФ

Процедура ПерейтиНаМобильноеПриложение20()
	Константы.ЭтоМобильноеПриложение.Установить(Ложь);
	Константы.ЭтоОбычноеПриложение.Установить(Ложь);
	Константы.ЭтоМобильноеПриложение20.Установить(Истина);
КонецПроцедуры

Процедура УстановитьОбычныйИнтерфейс()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	НЕ Пользователи.Служебный
	|	И Пользователи.ИдентификаторПользователяИБ <> &ПустойИД
	|	И НЕ Пользователи.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПустойИД", Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивПользователей = ТаблицаРезультатаЗапроса.ВыгрузитьКолонку("ИдентификаторПользователяИБ");
	
	Для каждого ТекПользователь Из МассивПользователей Цикл
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
		Если ПользовательИБ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиИнтерфейсаКлиентскогоПриложения", "", Неопределено,, ПользовательИБ.Имя);
	КонецЦикла;
	
	Для каждого ТекПользователь Из МассивПользователей Цикл
				ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ТекПользователь);
				Если ПользовательИБ = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				УправлениеНебольшойФирмойСервер.УстановитьСоставФорм(, ПользовательИБ.Имя);
			КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

Функция ПолучитьКоличествоДнейДоОкончанияПробногоПериода() Экспорт
	
	ДатаОкончанияПробногоПериода = Константы.ДатаОкончанияПробногоПериодаМПУНФ.Получить();
	ТекущаяДатаБезМинут = НачалоДня(ТекущаяДатаСеанса());
	КоличествоОставшихсяДней = (ДатаОкончанияПробногоПериода - ТекущаяДатаБезМинут) / 60 / 60 / 24;
	Возврат КоличествоОставшихсяДней;
	
КонецФункции