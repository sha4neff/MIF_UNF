// Общий модуль (выполняется на стороне сервера) модуля "Конструктор процессов для 1С:УНФ"
// Разработчик Компания "Аналитика. Проекты и решения" +7 495 005-1653, https://kp-unf.ru
// Вызовы являются повторными на время сеанса

#Область СлужебныеПроцедурыИФункции

// Функция определяет, является ли переданная в аргументе ссылка на элемент справочника
// группой или элементом. Если переданная ссылка является группой, то возвращается Истина
// в противном случае возвращается Ложь. Функция является повторно используемой на время сеанса.
// Параметры:
//		СсылкаНаСправочник - ссылка на справочник 
// Возвращаемое значение: Булевое (Истина если значение является группой справочника, Ложь в противном случае)
Функция ЭтоГруппаСправочника(СсылкаНаСправочник) Экспорт
	Возврат СсылкаНаСправочник.Ссылка.ЭтоГруппа;
КонецФункции

// Функция проверяет, является ли переданное в параметре значение
// экземпляром корпоративного процесса
// Параметры: СсылкаНаОбъект - содержит ссылку на объект
// Возвращаемое значение: Истина или Ложь
Функция ЭтоЭкземплярБизнесПроцесса(СсылкаНаОбъект) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("БизнесПроцессСсылка.КП_БизнесПроцесс")
		ИЛИ ТипЗнч(СсылкаНаОбъект)=Тип("БизнесПроцессОбъект.КП_БизнесПроцесс")
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Функция проверяет, является ли переданное в параметре значение
// задачей корпоративного процесса
// Параметры: СсылкаНаОбъект - содержит ссылку на объект
// Возвращаемое значение: Истина или Ложь
Функция ЭтоЗадачаБизнесПроцесса(СсылкаНаОбъект) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ЗадачаСсылка.КП_Задача")
		ИЛИ ТипЗнч(СсылкаНаОбъект)=Тип("ЗадачаОбъект.КП_Задача")
	Тогда
	
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;

КонецФункции

// Функция проверяет, является ли переданное в параметре значение
// маршрутной точкой бизнес-процесса
// Параметры: СсылкаНаОбъект - содержит ссылку на объект
// Возвращаемое значение: Истина или Ложь
Функция ЭтоТочкаБизнесПроцесса(СсылкаНаОбъект) Экспорт
	
	Возврат (ТипЗнч(СсылкаНаОбъект)=Тип("СправочникСсылка.КП_ТочкиПроцессов"));

КонецФункции

// Функция возвращает строковое представление релиза метаданных
// Возвращаемое значение: Строка
Функция ПолучитьСтрокуРелиза() Экспорт
	Возврат СокрЛП(Метаданные.Версия);
	
КонецФункции

// Функция проверяет, является ли переданное в параметре значение
// исполнителем бизнес-процесса
// Параметры: СсылкаНаОбъект - содержит ссылку на объект
// Возвращаемое значение: Истина или Ложь
Функция ЭтоИсполнительПроцесса(СсылкаНаОбъект) Экспорт
	
	Возврат (ТипЗнч(СсылкаНаОбъект)=Тип("СправочникСсылка.Пользователи"));

КонецФункции

// Функция создает и инициализирует генератор случайных чисел
// т.к. модуль являетя повторно используемым на время сеанса
// генератор иницилизируется один раз
// Возвращаемое значение - ссылка на генератор случайных чисел
Функция ПолучитьГСЧ() Экспорт
	ТекДата=ТекущаяДата();
	ГенераторСлЧисел=Новый ГенераторСлучайныхЧисел(Секунда(ТекДата)*ДеньГода(ТекДата));
	
	Возврат ГенераторСлЧисел;
	
КонецФункции

// Функция проверяет, является ли переданное в параметре значение
// элементом ролевой адресации исполнителей
// Параметры: СсылкаНаОбъект - содержит ссылку на объект
// Возвращаемое значение: Истина или Ложь
Функция ЭтоРолеваяАдресацияИсполнителя(СсылкаНаОбъект) Экспорт
	
	Возврат (ТипЗнч(СсылкаНаОбъект)=Тип("СправочникСсылка.КП_РолеваяАдресация"));

КонецФункции

// Функция опредляет тип переданной в параметрах ссылки на объект
// Параметры:
//		СсылкаНаОбъект - содержит ссылку на объект
// Возвращаемое значение: Булевое - Истина, если переданная аргументе ссылка является файлом
// в противном случае возвращается Ложь
Функция ЭтоФайл(СсылкаНаОбъект) Экспорт
	ТипОбъекта=ТипЗнч(СсылкаНаОбъект);
	Если ТипОбъекта=Тип("СправочникСсылка.Файлы")
		ИЛИ 
		ТипОбъекта=Тип("СправочникОбъект.Файлы")
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция опредляет тип переданной в параметрах ссылки на объект
// Параметры:
//		СсылкаНаОбъект - содержит ссылку на объект
// Возвращаемое значение: Булевое - Истина, если переданная аргументе ссылка является ссылкой на объект внешней базы данных
// в противном случае возвращается Ложь
Функция ЭтоВнешнийОбъект(СсылкаНаОбъект) Экспорт
	
	Возврат Ложь;
	
	//ТипОбъекта=ТипЗнч(СсылкаНаОбъект);
	//Если ТипОбъекта=Тип("СправочникСсылка.КП_СсылкиНаВнешниеОбъекты") 
	//	ИЛИ 
	//	ТипОбъекта=Тип("СправочникОбъект.КП_СсылкиНаВнешниеОбъекты") 
	//Тогда
	//	Возврат Истина;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
	
КонецФункции

// Функция определяет - является ли реквизит реквизитом метаданных бизнес-процесса
// Параметры:
// 	ИмяРеквизита - Имя реквизита
// Возвращаемое значение: Булево
Функция ЭтоРеквизитМетаданныхБизнесПроцесса(ИмяРеквизита) Экспорт
	Возврат (НЕ Метаданные.БизнесПроцессы.КП_БизнесПроцесс.Реквизиты.Найти(ИмяРеквизита)=Неопределено);
	
КонецФункции

// Функция определяет - является ли реквизит реквизитом метаданных задачи
// Параметры:
// 	ИмяРеквизита - Имя реквизита
// Возвращаемое значение: Булево
Функция ЭтоРеквизитМетаданныхЗадачи(ИмяРеквизита) Экспорт
	Если ИмяРеквизита="Наименование" ИЛИ ИмяРеквизита="Дата" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если (НЕ Метаданные.Задачи.КП_Задача.Реквизиты.Найти(ИмяРеквизита)=Неопределено)
		ИЛИ (НЕ Метаданные.Задачи.КП_Задача.РеквизитыАдресации.Найти(ИмяРеквизита)=Неопределено)
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция получает список реквизитов источника данных
// Параметры:
// 	ТипДанныхТега - Тип данных тега
// 	ТабличнаяЧастьИсточника - Табличная часть источника
// Возвращаемое значение: Список значений
Функция ПолучитьСписокРеквизитовИсточникаДанных(ТипДанныхТега, ТабличнаяЧастьИсточника="") Экспорт
	
	СписокРеквизитов=Новый СписокЗначений;
	
	Возврат СписокРеквизитов;
	
КонецФункции

// Функция получает сообщение о типе BPL-файла
// Параметры:
// 	СтрокаТипа - Строка с именем типа
// Возвращаемое значение: Строка с описанием типа
Функция ПолучитьСообщениеОТипеBPLФайла(СтрокаТипа) Экспорт
	
	Если СтрокаТипа="document" Тогда
		СтрокаСообщения="Файл содержит данные о корпоративном документе.";
		
	ИначеЕсли СтрокаТипа="document_kind" Тогда
		СтрокаСообщения="Файл содержит данные о виде документа.";
		
	ИначеЕсли СтрокаТипа="rules_profile" Тогда
		СтрокаСообщения="Файл содержит данные о профиле групп доступа.";
		
	ИначеЕсли СтрокаТипа="template_file" Тогда
		СтрокаСообщения="Файл содержит данные о шаблоне файла.";
		
	ИначеЕсли СтрокаТипа="kpi_indicator" Тогда
		СтрокаСообщения="Файл содержит данные о показателе KPI.";
		
	ИначеЕсли СтрокаТипа="process" Тогда
		СтрокаСообщения="Файл содержит данные о бизнес-процессе.";
		
	ИначеЕсли СтрокаТипа="widgets" Тогда
		СтрокаСообщения="Файл содержит данные о настройке панели виджетов KPI.";
		
	КонецЕсли;
	
	Возврат СтрокаСообщения;
	
КонецФункции

// Функция проверяет, является ли переданное в параметре значение
// сообщением пользователя для обсуждения объекта или тему форума
// Параметры: СсылкаНаОбъект - содержит ссылку на объект
// Возвращаемое значение: Истина или Ложь
Функция ЭтоСообщение(СсылкаНаОбъект) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект)=Тип("ДокументСсылка.аСообщениеПользователя")
		ИЛИ ТипЗнч(СсылкаНаОбъект)=Тип("ДокументОбъект.аСообщениеПользователя")
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Функция возвращает версию метаданных текущей базы данных
Функция ВерсияМетаданных() Экспорт
	Возврат СокрЛП(Метаданные.Версия);
КонецФункции

// Функция определяет возможность создания бизнес-процессов пользователем
Функция ПользовательМожетСоздаватьПроцессы() Экспорт
	Если КП_ОбщееСерверПС.ЭтоРольПолныеПрава() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция формирует и возвращает таблицу всех участников бизнес-процесса
Функция ПолучитьТаблицуВсехУчастниковПроцесса(ПроцессСсылка, ВидПроцессаСсылка) Экспорт
	
	Если ЗначениеЗаполнено(ПроцессСсылка) Тогда
		ВладелецТочек=ПроцессСсылка;
	Иначе
		ВладелецТочек=ВидПроцессаСсылка;
	КонецЕсли;
	
	ТаблицаУчастников=Новый ТаблицаЗначений;
	ТаблицаУчастников.Колонки.Добавить("Исполнитель");
	ТаблицаУчастников.Колонки.Добавить("ДатаВыполненияПланСтрока");
	ТаблицаУчастников.Колонки.Добавить("ВидУчастника");
	ТаблицаУчастников.Колонки.Добавить("ВидУчастникаПредставление");
	ТаблицаУчастников.Колонки.Добавить("Владелец");

	СписокТочек=КП_Процессы.ПолучитьСписокТочекВладельца(ВладелецТочек);	
	
	Для Каждого ЭлементСписка Из СписокТочек Цикл
		ТочкаПроцесса=ЭлементСписка.Значение;
		
		Если ТочкаПроцесса.ИсточникИсполнителей=0 Тогда
			//основной список исполнителей
			Продолжить;
			
		ИначеЕсли ТочкаПроцесса.ИсточникИсполнителей=1 Тогда
			//фиксированный список точки
			
		
			Для Каждого СтрокаТЧ Из ТочкаПроцесса.ИсполнителиТочки Цикл
				ТочкаАдресации=СтрокаТЧ.ТочкаАдресации;
				
				Если КП_Процессы.ЭтоТочкаРолевойАдресации(ТочкаАдресации) Тогда
					ВидУчастника="Роль";
					Если ТаблицаУчастников.НайтиСтроки(Новый Структура("Исполнитель, ВидУчастника, Владелец", ТочкаАдресации, ВидУчастника, ТочкаПроцесса)).Количество()=0 Тогда
						НоваяСтрока=ТаблицаУчастников.Добавить();
						НоваяСтрока.Исполнитель=ТочкаАдресации;
						НоваяСтрока.ДатаВыполненияПланСтрока=СтрокаТЧ.СрокВыполненияТекст;
						НоваяСтрока.ВидУчастникаПредставление=НСтр("ru='Исполнитель роли'; en='Role user';");
						НоваяСтрока.ВидУчастника=ВидУчастника;
						НоваяСтрока.Владелец=ТочкаПроцесса;

					КонецЕсли;
				Иначе
					//не роль, а сотрудник
					ВидУчастника="Исполнитель";
					Если ТаблицаУчастников.НайтиСтроки(Новый Структура("Исполнитель, ВидУчастника, Владелец", ТочкаАдресации, ВидУчастника, ТочкаПроцесса)).Количество()=0 Тогда
						НоваяСтрока=ТаблицаУчастников.Добавить();
						НоваяСтрока.Исполнитель=ТочкаАдресации;
						НоваяСтрока.ДатаВыполненияПланСтрока=СтрокаТЧ.СрокВыполненияТекст;
						НоваяСтрока.ВидУчастникаПредставление=НСтр("ru='Исполнитель'; en='Employee';");
						НоваяСтрока.ВидУчастника=ВидУчастника;
						НоваяСтрока.Владелец=ТочкаПроцесса;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТочкаПроцесса.ИсточникИсполнителей=2 Тогда
			//автор процесса
			Исполнитель="<автор>";
			ВидУчастника="ИнициаторПроцесса";

			Если ТаблицаУчастников.НайтиСтроки(Новый Структура("Исполнитель, ВидУчастника, Владелец", Исполнитель, ВидУчастника, ТочкаПроцесса)).Количество()=0 Тогда
				
				НоваяСтрока=ТаблицаУчастников.Добавить();
				НоваяСтрока.Исполнитель=Исполнитель;
				Если ТочкаПроцесса.ИсполнителиТочки.Количество()>0 Тогда
					НоваяСтрока.ДатаВыполненияПланСтрока=ТочкаПроцесса.ИсполнителиТочки[0].СрокВыполненияТекст;
				Иначе
					НоваяСтрока.ДатаВыполненияПланСтрока="";
				КонецЕсли;
				НоваяСтрока.Владелец=ТочкаПроцесса;
				НоваяСтрока.ВидУчастникаПредставление=НСтр("ru='Инициатор процесса'; en='Initiator';");
				НоваяСтрока.ВидУчастника=ВидУчастника;
				
			КонецЕсли;

		ИначеЕсли ТочкаПроцесса.ИсточникИсполнителей=3 Тогда
			//контролер процесса
			Исполнитель="<контролер>";
			ВидУчастника="КонтролерПроцесса";
			Если ТаблицаУчастников.НайтиСтроки(Новый Структура("Исполнитель, ВидУчастника, Владелец", Исполнитель, ВидУчастника, ТочкаПроцесса)).Количество()=0 Тогда
				
				НоваяСтрока=ТаблицаУчастников.Добавить();
				НоваяСтрока.Исполнитель=Исполнитель;
				Если ТочкаПроцесса.ИсполнителиТочки.Количество()>0 Тогда
					НоваяСтрока.ДатаВыполненияПланСтрока=ТочкаПроцесса.ИсполнителиТочки[0].СрокВыполненияТекст;
				Иначе
					НоваяСтрока.ДатаВыполненияПланСтрока="";
				КонецЕсли;

				НоваяСтрока.Владелец=ТочкаПроцесса;
				НоваяСтрока.ВидУчастникаПредставление=НСтр("ru='Контролер процесса'; en='Controller';");
				НоваяСтрока.ВидУчастника=ВидУчастника;

			КонецЕсли;
			
		ИначеЕсли ТочкаПроцесса.ИсточникИсполнителей=4 Тогда
			//реквизит (переменная) процесса
			Исполнитель=ТочкаПроцесса.РеквизитСИсполнителем;
			ВидУчастника="РеквизитПроцесса";
			Если ТаблицаУчастников.НайтиСтроки(Новый Структура("Исполнитель, ВидУчастника, Владелец", Исполнитель, ВидУчастника, ТочкаПроцесса)).Количество()=0 Тогда
				
				НоваяСтрока=ТаблицаУчастников.Добавить();
				НоваяСтрока.Исполнитель=Исполнитель;
				Если ТочкаПроцесса.ИсполнителиТочки.Количество()>0 Тогда
					НоваяСтрока.ДатаВыполненияПланСтрока=ТочкаПроцесса.ИсполнителиТочки[0].СрокВыполненияТекст;
				Иначе
					НоваяСтрока.ДатаВыполненияПланСтрока="";
				КонецЕсли;

				НоваяСтрока.Владелец=ТочкаПроцесса;
				НоваяСтрока.ВидУчастникаПредставление=НСтр("ru='Реквизит процесса'; en='Variable';");
				НоваяСтрока.ВидУчастника=ВидУчастника;

			КонецЕсли;

		ИначеЕсли ТочкаПроцесса.ИсточникИсполнителей=5 Тогда
			//рабочая группа
			РабочаяГруппа=ТочкаПроцесса.РабочаяГруппа;
			ВидУчастника="РабочаяГруппа";

			Для Каждого УчастникРабочейГруппы Из РабочаяГруппа.Сотрудники Цикл
				ТочкаАдресации=УчастникРабочейГруппы.ТочкаАдресации;
				Если ТаблицаУчастников.НайтиСтроки(Новый Структура("Исполнитель, ВидУчастника, Владелец", ТочкаАдресации, ВидУчастника, ТочкаПроцесса)).Количество()=0 Тогда
					НоваяСтрока=ТаблицаУчастников.Добавить();
					НоваяСтрока.Исполнитель=ТочкаАдресации;
					Если ТочкаПроцесса.ИсполнителиТочки.Количество()>0 Тогда
						НоваяСтрока.ДатаВыполненияПланСтрока=ТочкаПроцесса.ИсполнителиТочки[0].СрокВыполненияТекст;
					Иначе
						НоваяСтрока.ДатаВыполненияПланСтрока="";
					КонецЕсли;

					НоваяСтрока.Владелец=ТочкаПроцесса;
					НоваяСтрока.ВидУчастникаПредставление=НСтр("ru='Группа ""';en='Workgroup ""';")+СокрЛП(РабочаяГруппа)+"""";
					НоваяСтрока.ВидУчастника=ВидУчастника;

				КонецЕсли;
			КонецЦикла; //рабочая группа
			
		КонецЕсли; //по источник исполнителей
		
	КонецЦикла;
	
	Возврат ТаблицаУчастников;
	
КонецФункции

// Функция формирует и возвращает массив из строки с разделителями
Функция ПолучитьМассивИзСтрокиСРазделителями(ИсходнаяСтрока, Разделитель) Экспорт
	
	//разложим строку имени объекта  в массив
    ИсходнаяСтрокаСтроки=СтрЗаменить(ИсходнаяСтрока, Разделитель, Символы.ПС);
	МассивСтрок=Новый Массив;
    Для НомерЭлемента = 1 По СтрЧислоСтрок(ИсходнаяСтрокаСтроки) Цикл
        СтрокаМассива = СтрПолучитьСтроку(ИсходнаяСтрокаСтроки, НомерЭлемента);    
		МассивСтрок.Добавить(СтрокаМассива);
	КонецЦикла;
	
	Возврат МассивСтрок;

КонецФункции

// Функция формирует и возвращает список групп доступа с указанной ролью
Функция ПолучитьСписокГруппПользователейСРолью(РольИдентификатор) Экспорт
	
	СписокГруппДоступа=Новый СписокЗначений;
		
	//найдем группы где используются профили с этой ролью
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ГруппыДоступа.Ссылка
	                    |ИЗ
	                    |	Справочник.ГруппыДоступа КАК ГруппыДоступа
	                    |ГДЕ
	                    |	ГруппыДоступа.ПометкаУдаления = ЛОЖЬ
	                    |	И ГруппыДоступа.Профиль В
	                    |			(ВЫБРАТЬ
	                    |				ПрофилиГруппДоступаРоли.Ссылка
	                    |			ИЗ
	                    |				Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	                    |			ГДЕ
	                    |				ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления = ЛОЖЬ
	                    |				И ПрофилиГруппДоступаРоли.Роль = &Роль)");
						
						
	Запрос.УстановитьПараметр("Роль", РольИдентификатор);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		ГруппаДоступа=Выборка.Ссылка;
		Если СписокГруппДоступа.НайтиПоЗначению(ГруппаДоступа)=Неопределено Тогда
			СписокГруппДоступа.Добавить(ГруппаДоступа);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокГруппДоступа;
	
КонецФункции

// Функция формирует и возвращает таблицу необходимых для выполнения действия ролей
Функция ПолучитьТаблицуНеобходимыхРолей(Действие, ПолноеИмяФормыОбъекта, АнализируемыйПользователь) Экспорт
	
	МассивЭлементовИмениОбъекта=ПолучитьМассивИзСтрокиСРазделителями(ПолноеИмяФормыОбъекта, ".");
	
	ИмяТипаОбъекта=МассивЭлементовИмениОбъекта[0];
	ИмяОбъекта=МассивЭлементовИмениОбъекта[1];
			
	Если ИмяТипаОбъекта="Задача" Тогда
		ИмяТипОбъектаМетаданных="Задачи";
		
	ИначеЕсли ИмяТипаОбъекта="Документ" Тогда
		ИмяТипОбъектаМетаданных="Документы";
		
	ИначеЕсли ИмяТипаОбъекта="БизнесПроцесс" Тогда
		ИмяТипОбъектаМетаданных="БизнесПроцессы";

	ИначеЕсли ИмяТипаОбъекта="Справочник" Тогда
		ИмяТипОбъектаМетаданных="Справочники";
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Тип метаданных по имени объекта ""';en='Object type "";")+ИмяОбъекта+НСтр("ru='"" не определен'; en='"" is not defined';"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	Попытка
		ОбъектМетаданных=Метаданные[ИмяТипОбъектаМетаданных][ИмяОбъекта];
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	Возврат ПолучитьТаблицуНеобходимыхРолейОбъектаМетаданных(Действие, ОбъектМетаданных, АнализируемыйПользователь);
	
КонецФункции

// Функция формирует и возвращает таблицу необходимых для выполнения действия ролей
Функция ПолучитьТаблицуНеобходимыхРолейОбъектаМетаданных(Действие, ОбъектМетаданных, АнализируемыйПользователь, ТолькоДляЧтения=Ложь) Экспорт
	
	Если ТипЗнч(ОбъектМетаданных)=Тип("Строка") Тогда
		ОбъектМетаданных=Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
	КонецЕсли;
	
	ТаблицаРолей=Новый ТаблицаЗначений;
	ТаблицаРолей.Колонки.Добавить("ОбъектДоступа");
	ТаблицаРолей.Колонки.Добавить("Роль");
	ТаблицаРолей.Колонки.Добавить("Доступна");
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ=ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(АнализируемыйПользователь.ИдентификаторПользователяИБ);
	
	Для Каждого Роль Из Метаданные.Роли Цикл
		
		ТребуетсяРольДляДействия=ПравоДоступа(Действие, ОбъектМетаданных, Роль);
		
		//проверим доступно ли действие для пользователя
		Если ТребуетсяРольДляДействия Тогда
			ДействиеДоступно=ПравоДоступа(Действие, ОбъектМетаданных, ПользовательИБ);
			НоваяСтрока=ТаблицаРолей.Добавить();
			НоваяСтрока.ОбъектДоступа=ОбъектМетаданных;
			НоваяСтрока.Доступна=ДействиеДоступно;
			НоваяСтрока.Роль=Роль;
					
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТаблицаРолей;
	
КонецФункции

Функция ТекстФункцииСобытияАвтозапускаПроцесса() Экспорт
	ТекстФункции="//доступ к источнику срабатывания функции (создание справочника или документа)
			|//осуществляется через переменную СсылкаНаОбъект
			|
			|//вы можете установить переменную Отказ в значение Истина
			|//для отказа от создания бизнес-процесса
			|
			|//Отказ=Истина;";
	
	Возврат ТекстФункции;
	
КонецФункции

// Функция проверяет является ли текст функции пустым
// Параметры:
// 	ТекстФункции - Текст функции
// Возвращаемое значение: Истина или Ложь
Функция ТекстФункцииСобытияПустой(ТекстФункции) Экспорт
	//пройдем по строкам, если одна из строк не пустая и не начинается с // 
	//тогда считаем что текст присутствует
	
	ТекстОбъект=Новый ТекстовыйДокумент;
	ТекстОбъект.УстановитьТекст(ТекстФункции);
	НомерПоследнейСтроки=ТекстОбъект.КоличествоСтрок();
	Для НомерСтроки=1 По НомерПоследнейСтроки Цикл
		СтрокаТекста=ТекстОбъект.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(СтрокаТекста) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Лев(СокрЛП(СтрокаТекста), 2)<>"//" Тогда
			//строка кода
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//в тексте только пустые строки и/или комментарии
	Возврат Истина;
	                                                 	
КонецФункции

Функция ПолучитьФИОПользователя(ПользовательСсылка) Экспорт
	Возврат ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СокрЛП(ПользовательСсылка));
КонецФункции

Функция ЭтоРольАдминистрированиеПроцессов() Экспорт
	Если ЭтоРольПолныеПрава() Тогда
		Возврат Истина;
	КонецЕсли;
	
	НазваниеРоли="КП_ПроцессыАдминистрирование"; 
	Возврат РольДоступна(НазваниеРоли);
	
КонецФункции

Функция ЭтоРольАдминистрированиеЗадач() Экспорт
	Если ЭтоРольПолныеПрава() Тогда
		Возврат Истина;
	КонецЕсли;
	
	НазваниеРоли="КП_ЗадачиАдминистрирование"; 
	Возврат РольДоступна(НазваниеРоли);
	
КонецФункции

Функция ЭтоРольЧтениеВсехЗадач() Экспорт
	Если ЭтоРольАдминистрированиеПроцессов() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РольДоступна("КП_ЗадачиАдминистрирование") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РольДоступна("КП_ЗадачиЧтениеВсех") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция опредяет доступность полного набора прав пользователя
// Возвращаемое значение: Булевое (Истина), если текущему пользователю доступны полные права
// и возвращает Ложь в противном случае)
Функция ЭтоРольПолныеПрава() Экспорт
	НазваниеРоли="ПолныеПрава"; 
	Возврат РольДоступна(НазваниеРоли);
	
КонецФункции

Функция ЭтоЗадачаКонтроля(ЗадачаСсылка) Экспорт
	Возврат (ЗадачаСсылка.ТочкаКБП.ДействиеТипФормыЗадач=1);
КонецФункции
#КонецОбласти
