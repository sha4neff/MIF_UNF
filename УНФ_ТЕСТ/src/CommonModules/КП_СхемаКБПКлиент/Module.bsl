// Общий модуль (выполняется на стороне клиента) модуля "Конструктор процессов для 1С:УНФ"
// Разработчик Компания "Аналитика. Проекты и решения" +7 495 005-1653, https://kp-unf.ru

#Область СлужебныеПроцедурыИФункции

// Функция определяет, явяется ли переданный элемент настраиваемым
// Параметры:
//		ЭлементСхемы - содержит элемент схемы бизнес-процесса
// Возвращаемое значение: Истина или Ложь
Функция ЭтоНастраиваемыйВидЭлементаСхемы(ЭлементСхемы) Экспорт
	
	ТипЭлемента=ТипЗнч(ЭлементСхемы);
	Если ТипЭлемента=Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
		ИЛИ ТипЭлемента=Тип("ЭлементГрафическойСхемыДекорация") 
		ИЛИ  ТипЭлемента=Тип("ЭлементГрафическойСхемыДекоративнаяЛиния")
	Тогда
		Возврат Ложь;
		
	Иначе
		Возврат Истина;

	КонецЕсли;
	
КонецФункции

// Процедура выполняет обновление данных точки схемы бизнес-процесса
// Параметры:
//		СхемаБизнесПроцесса - содержит схему бизнес-процесса
//		ИмяЭлементаСхемы - имя элемента схемы
//		СсылкаНаТочку - содержит ссылку на точку процесса
//		ОбъектСсылка - содержит ссылку на объект
Процедура ОбновитьДанныеТочкиСхемы(СхемаБизнесПроцесса, ИмяЭлементаСхемы, СсылкаНаТочку, ОбъектСсылка) Экспорт
	
	//найдем элемент в схеме по имени
	ЭлементСхемы=Неопределено;
	Для НомерЭлемента=0 По СхемаБизнесПроцесса.ЭлементыГрафическойСхемы.Количество()-1 Цикл
		ТекЭлемент=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы.Получить(НомерЭлемента);
		Если ТекЭлемент<>Неопределено И ТекЭлемент.Имя=ИмяЭлементаСхемы Тогда
			ЭлементСхемы=ТекЭлемент;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементСхемы=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! В схеме не найден элемент с именем ""';en='An element ""'")+ИмяЭлементаСхемы+НСтр("ru='"".'; en='"" was not found in the scheme.';"));
		Возврат;
	КонецЕсли;
	
	СтруктураТочки=КП_СхемаКБПСервер.ПолучитьСтруктуруТочки(СсылкаНаТочку);
	
	ИмяТочки=СтруктураТочки.ИмяВСхеме;
	НаименованиеТочки=СтруктураТочки.Наименование;
	ТипТочки=СтруктураТочки.ТипТочки;
	ИсточникИсполнителей=СтруктураТочки.ИсточникИсполнителей;
	
	КоличествоИсполнителейВТочке=СтруктураТочки.КоличествоИсполнителейВТочке;
	НаименованиеИсполнителей=СтруктураТочки.НаименованиеИсполнителей;	
	ПервыйИсполнитель=СтруктураТочки.ПервыйИсполнитель;	

	//ДЕЙСТВИЕ
	Если ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Действие") Тогда 
		ЭлементСхемы.Пояснение=НаименованиеИсполнителей;
		ЭлементСхемы.Наименование=НаименованиеТочки;
		
		ЭлементСхемы.Групповая=СтруктураТочки.ГрупповаяТочка;
	
		Если ИсточникИсполнителей<=1 Тогда
			ЭлементСхемы.Пояснение="<Нет>";
			Если ТипЗнч(ПервыйИсполнитель)=Тип("СправочникСсылка.Пользователи") Тогда
				//фотография пользователя
				Если ЗначениеЗаполнено(ПервыйИсполнитель) Тогда
					ДвоичныеДанные=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ПервыйИсполнитель);
					
				Иначе
					ДвоичныеДанные=Неопределено;
					
				КонецЕсли;
				
				Если ДвоичныеДанные=Неопределено Тогда
					ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_Исполнитель;
				Иначе
					ЭлементСхемы.Картинка=Новый Картинка(ДвоичныеДанные, Истина);
					НаименованиеИсполнителя=ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СокрЛП(ПервыйИсполнитель));
					Если НЕ ПустаяСтрока(НаименованиеИсполнителя) Тогда
						ЭлементСхемы.Пояснение=НаименованиеИсполнителя;
					КонецЕсли;
					
				КонецЕсли;
			
			ИначеЕсли ТипЗнч(ПервыйИсполнитель)=Тип("СправочникСсылка.КП_РолеваяАдресация") Тогда
				//картинка ролевой адресации
				ЭлементСхемы.Пояснение=СокрЛП(ПервыйИсполнитель);
				ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_РолеваяАдресация;
				
			Иначе
				//ЭлементСхемы.Картинка=Новый Картинка;
				ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_ПустаяКартинка;
				
			КонецЕсли;
						
		ИначеЕсли ИсточникИсполнителей=4 И ТипЗнч(ПервыйИсполнитель)=Тип("СправочникСсылка.КП_ДополнительныеРеквизиты") Тогда
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_ПеременнаяПроцесса;
			
		ИначеЕсли ИсточникИсполнителей=5 Тогда
			//рабочая группа
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_РабочаяГруппа;

		ИначеЕсли ИсточникИсполнителей=3 Тогда
			//контролер
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_КонтролерПроцесса;
			
		ИначеЕсли ИсточникИсполнителей=2 Тогда
			//автор
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_АвторПроцесса;
			
		Иначе
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_ПустаяКартинка;
			
		КонецЕсли;		
		
	//ПОДПРОЦЕСС
	ИначеЕсли ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Подпроцесс") Тогда 
		
		//картинка бизнес-процесса
		ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_БизнесПроцесс;
		
		ЭлементСхемы.Наименование=НаименованиеТочки;
		
	//ОБРАБОТКА
	ИначеЕсли ТипТочки=ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Обработка") Тогда 
		Если КП_СхемаКБПСервер.ПолучитьТипОбработки(СсылкаНаТочку)=4 Тогда
			//установим картинку таймера
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_ТаймерМалая;	
			
		ИначеЕсли КП_СхемаКБПСервер.ПолучитьТипОбработки(СсылкаНаТочку)=6 Тогда
			//установим картинку сообщения
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_СообщениеМалое;	
			
		Иначе
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_ПустаяКартинка;
			
		КонецЕсли;
		
		ЭлементСхемы.Наименование=НаименованиеТочки;
		
	Иначе
		//другие типы точек
		ЭлементСхемы.Наименование=НаименованиеТочки;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает тип точки схемы
// Параметры:
//		ЭлементСхемы - содержит элемент схемы бизнес-процесса
// Возвращаемое значение: Тип значения
Функция ПолучитьТипТочкиСхемы(ЭлементСхемы) Экспорт
	
	ТипЭлемента=ТипЗнч(ЭлементСхемы);
	Если ТипЭлемента=Тип("ЭлементГрафическойСхемыДействие") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Действие");
		
	ИначеЕсли ТипЭлемента=Тип("ЭлементГрафическойСхемыСтарт") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Старт");
		
	ИначеЕсли ТипЭлемента=Тип("ЭлементГрафическойСхемыЗавершение") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Завершение");
		
	ИначеЕсли ТипЭлемента=Тип("ЭлементГрафическойСхемыУсловие") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Условие");
		
	ИначеЕсли ТипЭлемента=Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Подпроцесс");
		
	ИначеЕсли ТипЭлемента=Тип("ЭлементГрафическойСхемыОбработка") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Обработка");

	ИначеЕсли ТипЭлемента=Тип("ЭлементГрафическойСхемыСлияние") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Слияние");
		
	ИначеЕсли ТипЭлемента=Тип("ЭлементГрафическойСхемыРазделение") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Разделение");
		
	ИначеЕсли ТипЭлемента=Тип("ЭлементГрафическойСхемыДекорация") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.Декорация");
		
	ИначеЕсли ТипЭлемента=Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.КП_ВидыТочекБизнесПроцесса.ВыборВарианта");
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

// Функция выполняет запись вида корпоративного процесса в файл формата bpl
// Параметры:
//		ВидКБП - содержит ссылку на вид корпоративного бизнес-процесса
//		ПутьКФайлу - содержит строку с путем к формируемому файлу
// Возвращаемое значение: Истина или Ложь
Функция ЗаписатьВидКорпоративногоПроцессаXML(ВидКБП, ПутьКФайлу) Экспорт
	
	ТекстXML=КП_СхемаКБПСервер.ПолучитьXMLКорпоративногоПроцесса(ВидКБП);
	
	Если ПустаяСтрока(ТекстXML) Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекстовыйФайл=Новый ТекстовыйДокумент;
	ТекстовыйФайл.ДобавитьСтроку(ТекстXML);
	
	Попытка
		ТекстовыйФайл.Записать(ПутьКФайлу);
	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти
