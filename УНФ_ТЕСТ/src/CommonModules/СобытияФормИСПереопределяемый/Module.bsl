#Область СлужебныйПрограммныйИнтерфейс

#Область Локализация

// Обработчик события вызывается на сервере при открытии формы конфигурации.
//   Выполняется определение необходимости встраивания подсистем (с учетом их наличия) в форму.
//
// Параметры:
//   Форма            - ФормаКлиентскогоПриложения - форма конфигурации
//   МодулиИнтеграции - Массив           - используемые модули интеграции
//
Процедура ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиИнтеграции) Экспорт
	
	ИнтеграцияИСУНФ.ПриОпределенииПараметровИнтеграцииФормыПрикладногоОбъекта(Форма, МодулиИнтеграции);
	
КонецПроцедуры

// Серверные обработчики БГосИС элементов прикладных форм
//
// Параметры:
//   Форма                   - ФормаКлиентскогоПриложения - форма, из которой происходит вызов процедуры.
//   Элемент                 - Произвольный     - элемент-источник события "При изменении"
//   ДополнительныеПараметры - Структура        - значения дополнительных параметров влияющих на обработку.
//
Процедура ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры) Экспорт
	
	ИнтеграцияИСУНФ.ПриИзмененииЭлемента(Форма, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

// Вызывается после записи объекта на сервере.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - источник вызова
Процедура ПослеЗаписиНаСервереФормыПрикладногоОбъекта(Форма) Экспорт
	
	ИнтеграцияИСУНФ.ПослеЗаписиНаСервереФормыПрикладногоОбъекта(Форма);
	
КонецПроцедуры

Процедура ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	ИнтеграцияИСУНФ.ПриСозданииНаСервереВФормеПрикладногоОбъекта(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийОбъектов

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяСправочника - Строка - имя справочника, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
Процедура ПриПолученииФормыСправочника(ИмяСправочника, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
Процедура ПриПолученииФормыДокумента(ИмяДокумента, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события вызывается на сервере при получении стандартной управляемой формы.
// Если требуется переопределить выбор открываемой формы, необходимо установить в параметре <ВыбраннаяФорма>
// другое имя формы или объект метаданных формы, которую требуется открыть, и в параметре <СтандартнаяОбработка>
// установить значение Ложь.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра сведений, для которого открывается форма,
//  ВидФормы - Строка - имя стандартной формы,
//  Параметры - Структура - параметры формы,
//  ВыбраннаяФорма - Строка, ФормаКлиентскогоПриложения - содержит имя открываемой формы или объект метаданных Форма,
//  ДополнительнаяИнформация - Структура - дополнительная информация открытия формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события.
Процедура ПриПолученииФормыРегистраСведений(ИмяРегистра, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Возникает на сервере при создании формы.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - создаваемая форма,
//  Отказ - Булево - признак отказа от создания формы,
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки.
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.ИмяФормы = "Документ.ВозвратИзРегистра2ЕГАИС.Форма.ФормаСпискаДокументов" Тогда
		Форма.Элементы.СтраницаКОформлению.Видимость = Ложь;
		Форма.Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Обработка.ПанельОбменИСМП.Форма.Форма" Тогда
		ЭлементВиды = Форма.Элементы.Найти("ОткрытьВидыНоменклатуры");
		Если ЭлементВиды <> Неопределено Тогда
			ЭлементВиды.Заголовок = НСтр("ru = 'Категории номенклатуры'");
		КонецЕсли;
		КомандаВиды = Форма.Команды.Найти("ОткрытьВидыНоменклатуры");
		Если КомандаВиды <> Неопределено Тогда
			КомандаВиды.Подсказка = СтрЗаменить(КомандаВиды.Подсказка, " виды ", " категории ");
		КонецЕсли;
	КонецЕсли;
	
	ЭлементСерия = Форма.Элементы.Найти("Серия");
	Если ЭлементСерия <> Неопределено Тогда
		ЭлементСерия.Видимость = Ложь;
	КонецЕсли; 
	
	КнопкаПодбор = Форма.Элементы.Найти("ТоварыОткрытьПодбор");
	Если КнопкаПодбор = Неопределено Тогда
		КнопкаПодбор = Форма.Элементы.Найти("ТоварыОткрытьПодборНомеклатуры");
	КонецЕсли;
	
	Если КнопкаПодбор <> Неопределено Тогда
		КнопкаПодбор.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаДокумента" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка" в таблице "Товары"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ТоварыУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
	
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ТоварыУпаковка.ВыбиратьТип = Ложь;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка" в таблице "Товары"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ТоварыУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
	
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ТоварыУпаковка.ВыбиратьТип = Ложь;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.ВыводИзОборотаИСМП.Форма.ФормаДокумента" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка" в таблице "Товары"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ТоварыУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
	
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ТоварыУпаковка.ВыбиратьТип = Ложь;
		
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаДокумента" Тогда
		
		// устанавливаем связи параметров выбора для поля "Упаковка" в таблице "Товары"
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.Товары.ТекущиеДанные.Номенклатура");
		
		МассивСвязи = Новый Массив();
		МассивСвязи.Добавить(Связь);
		
		ФиксМассивСвязи = Новый ФиксированныйМассив(МассивСвязи);
		Форма.Элементы.ТоварыУпаковка.СвязиПараметровВыбора = ФиксМассивСвязи;
		
	
		// отключаем свойство "ВыбиратьТип"
		Форма.Элементы.ТоварыУпаковка.ВыбиратьТип = Ложь;
		
	КонецЕсли;
	
	СобытияФормИС.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, Новый Структура);
	
КонецПроцедуры

// Вызывается при чтении объекта на сервере.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма читаемого объекта,
//  ТекущийОбъект - ДокументОбъект, СправочникОбъект - читаемый объект.
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма - форма, из обработчика события которой происходит вызов процедуры.
//          См. справочную информацию по событиям управляемой формы.
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	
	Возврат;
	
КонецПроцедуры

// Переопределяемая часть обработки проверки заполнения формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма.
//   Отказ - Булево - Истина если проверка заполнения не пройдена
//   ПроверяемыеРеквизиты - Массив Из Строка - реквизиты формы, отмеченные для проверки
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СобытияФормИСУНФ.ОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиДействийФорм

// Возникает на сервере при записи константы в формах настроек
// если запись одной константы может повлечь изменение других отображаемых в этой же форме.
//
// Параметры:
//  Форма             - ФормаКлиентскогоПриложения - форма,
//  КонстантаИмя      - Строка           - записываемая константа,
//  КонстантаЗначение - Произвольный     - значение константы.
Процедура ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(Форма, КонстантаИмя, КонстантаЗначение) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Устанавливается свойство ОтображениеПредупрежденияПриРедактировании элемента формы.
//
Процедура ОтображениеПредупрежденияПриРедактировании(Элемент, Отображать) Экспорт

	Возврат
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное оформление для поля "Характеристика".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаХарактеристики - Строка - имя элемента формы "Характеристика",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Характеристики используются".
Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
	Форма,
	ИмяПоляВводаХарактеристики = "ТоварыХарактеристика",
	ПутьКПолюОтбора = "Объект.Товары.ХарактеристикиИспользуются") Экспорт
	
	СобытияФормИСУНФ.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма,
		ИмяПоляВводаХарактеристики,
		ПутьКПолюОтбора);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Единица измерения".
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - форма, в которой нужно установить условное оформление,
//  ИмяПоляВводаЕдиницИзмерения - Строка - имя элемента формы "Единица измерения",
//  ПутьКПолюОтбора - Строка - полный путь к реквизиту "Упаковка".
Процедура УстановитьУсловноеОформлениеЕдиницИзмерения(Форма,
	                                                  ИмяПоляВводаЕдиницИзмерения = "ТоварыНоменклатураЕдиницаИзмерения",
	                                                  ПутьКПолюОтбора = "Объект.Товары.Упаковка") Экспорт
	
	СобытияФормИСУНФ.УстановитьУсловноеОформлениеЕдиницИзмерения(
		Форма,
		ИмяПоляВводаЕдиницИзмерения,
		ПутьКПолюОтбора);
	
КонецПроцедуры

// Устанавливает условное оформление для поля "Серия".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма, в которой нужно установить условное оформление,
//   ИмяПоляВводаСерии - Строка - Имя элемента формы для указания серии
//   ПутьКПолюОтбораСтатусУказанияСерий - Строка - Имя реквизита формы со статусом указания серии
//   ПутьКПолюОтбораТипНоменклатуры - Строка - Имя реквизита формы с указанием типа номенклатуры
//
Процедура УстановитьУсловноеОформлениеСерийНоменклатуры(Форма,
														ИмяПоляВводаСерии = "ТоварыСерия",
														ПутьКПолюОтбораСтатусУказанияСерий = "Объект.Товары.СтатусУказанияСерий",
														ПутьКПолюОтбораТипНоменклатуры = "Объект.Товары.ТипНоменклатуры") Экспорт
	
	СобытияФормИСУНФ.УстановитьУсловноеОформлениеСерийНоменклатуры(
		Форма,
		ИмяПоляВводаСерии,
		ПутьКПолюОтбораСтатусУказанияСерий,
		ПутьКПолюОтбораТипНоменклатуры);
	
КонецПроцедуры

#КонецОбласти

#Область СвязиПараметровВыбора

// Устанавливает связь элемента формы с полем ввода номенклатуры.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода			- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымНоменклатуры	- Строка			- Путь к данным текущей номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода,
	ПутьКДаннымНоменклатуры = "Элементы.Товары.ТекущиеДанные.Номенклатура") Экспорт
	
	ИнтеграцияИСУНФ.УстановитьСвязиПараметровВыбораСНоменклатурой(Форма, ИмяПоляВвода, ПутьКДаннымНоменклатуры);
	
КонецПроцедуры

// Устанавливает связь элемента формы с полем ввода характеристики номенклатуры.
//
// Параметры:
//	Форма						- ФормаКлиентскогоПриложения	- Форма, в которой нужно установить связь.
//	ИмяПоляВвода				- Строка			- Имя поля, связываемого с номенклатурой.
//	ПутьКДаннымХарактеристики	- Строка			- Путь к данным текущей характеристики номенклатуры в форме.
//
Процедура УстановитьСвязиПараметровВыбораСХарактеристикой(Форма, ИмяПоляВвода,
	ПутьКДаннымХарактеристики = "Элементы.Товары.ТекущиеДанные.Характеристика") Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Устанавливает у элемента формы Упаковка подсказку ввода для соответствующей номенклатуры
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта.
//
Процедура УстановитьИнформациюОЕдиницеХранения(Форма) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
