#Область ПрограмныйИнтерфейс

// Возвращает строковое значение ссылки, по которой происходит переход при нажатии на гиперссылку открытия
// формы проверки и подбора продукции ИСМП из прикладных документов конфигураци - потребителя библиотеки ГосИС.
// 
// Возвращаемое значение:
// 	Строка - значение ссылки для перехода при нажатии на гиперссылку открытия формы проверки.
//
Функция НавигационнаяСсылкаОткрытьФормуПроверкиПродукцииИСМП() Экспорт
	
	Возврат "ОткрытьФормуПроверкиИПодбораПродукцииИСМП";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ПересчетИтогов

// Пересчитывает итоги по проверке содержимого для всех упаковок дерева. 
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево формы, с данными проверяемой маркируемой продукции.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(
		ДеревоМаркированнойПродукции, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для всех родительских строк
// переданной строки дерева маркируемой продукции.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева, ЗагрузкаДанныхТСД = Неопределено) Экспорт
	
	Если ЗагрузкаДанныхТСД <> Неопределено
		И Не ЗагрузкаДанныхТСД.ПересчитыватьИтогиВДеревеМаркированнойПродукции Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(
		СтрокаДерева, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

// Пересчитывает итоги по проверке содержимого упаковки для строки дерева маркируемой продукции. 
// 
// Параметры:
// 	СтрокаДерева             - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
// 	ПересчитыватьПодчиненные - Булево - признак необходимости пересчета подчиненных упаковок.
//
Процедура ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, ПересчитыватьПодчиненные, ЗагрузкаДанныхТСД = Неопределено) Экспорт
	
	Если ЗагрузкаДанныхТСД <> Неопределено
		И Не ЗагрузкаДанныхТСД.ПересчитыватьИтогиВДеревеМаркированнойПродукции Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	СтрокаДерева.КоличествоПодчиненнойПродукции     = 0;
	СтрокаДерева.КоличествоПодчиненныхУпаковок      = 0;
	СтрокаДерева.КоличествоПодчиненныхВсего         = 0;
	
	СтрокаДерева.КоличествоПодчиненныхВНаличии      = 0;
	СтрокаДерева.КоличествоПодчиненныхОтсутствует   = 0;
	СтрокаДерева.КоличествоПодчиненныхОтложено      = 0;
	СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = 0;
	СтрокаДерева.КоличествоПодчиненныхНеПроверялось = 0;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхВНаличии = СтрокаДерева.КоличествоПодчиненныхВНаличии + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.НедопустимыйКодМаркировки
			Или ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтсутствует = СтрокаДерева.КоличествоПодчиненныхОтсутствует + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхОтложено = СтрокаДерева.КоличествоПодчиненныхОтложено + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + 1;
			
		ИначеЕсли ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			СтрокаДерева.КоличествоПодчиненныхНеЧислилось = СтрокаДерева.КоличествоПодчиненныхНеЧислилось + 1;
			
		КонецЕсли;
		
		Если ПересчитыватьПодчиненные Тогда
		
			ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ПодчиненнаяСтрока, Истина);
		
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
			СтрокаДерева.КоличествоПодчиненнойПродукции = СтрокаДерева.КоличествоПодчиненнойПродукции + 1;
			
		Иначе
			
			СтрокаДерева.КоличествоПодчиненныхУпаковок = СтрокаДерева.КоличествоПодчиненныхУпаковок + 1;
			
		КонецЕсли;
		
		СтрокаДерева.КоличествоПодчиненнойПродукции     = СтрокаДерева.КоличествоПодчиненнойПродукции     + ПодчиненнаяСтрока.КоличествоПодчиненнойПродукции;
		СтрокаДерева.КоличествоПодчиненныхУпаковок      = СтрокаДерева.КоличествоПодчиненныхУпаковок      + ПодчиненнаяСтрока.КоличествоПодчиненныхУпаковок;
		
		СтрокаДерева.КоличествоПодчиненныхВНаличии      = СтрокаДерева.КоличествоПодчиненныхВНаличии      + ПодчиненнаяСтрока.КоличествоПодчиненныхВНаличии;
		СтрокаДерева.КоличествоПодчиненныхОтсутствует   = СтрокаДерева.КоличествоПодчиненныхОтсутствует   + ПодчиненнаяСтрока.КоличествоПодчиненныхОтсутствует;
		СтрокаДерева.КоличествоПодчиненныхОтложено      = СтрокаДерева.КоличествоПодчиненныхОтложено      + ПодчиненнаяСтрока.КоличествоПодчиненныхОтложено;
		СтрокаДерева.КоличествоПодчиненныхНеЧислилось   = СтрокаДерева.КоличествоПодчиненныхНеЧислилось   + ПодчиненнаяСтрока.КоличествоПодчиненныхНеЧислилось;
		СтрокаДерева.КоличествоПодчиненныхНеПроверялось = СтрокаДерева.КоличествоПодчиненныхНеПроверялось + ПодчиненнаяСтрока.КоличествоПодчиненныхНеПроверялось;
		
	КонецЦикла;
	
	СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхУпаковок + СтрокаДерева.КоличествоПодчиненнойПродукции;

	
	СтрокаДерева.ВсяУпаковкаПроверена = Не СтрокаДерева.НеСодержитсяВДанныхДокумента
	                                    И (СтрокаДерева.КоличествоПодчиненныхВсего = СтрокаДерева.КоличествоПодчиненныхВНаличии)
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
	                                    И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки");
	
	СформироватьПредставлениеПроверкиПодчиненных(СтрокаДерева);
	СформироватьПредставлениеСодержимогоУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	
КонецПроцедуры

// Определяет типы всех упаковок в дереве маркируемой продукции
// 
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево формы, с данными проверяемой маркируемой продукции.
//
Процедура ОпределитьТипыВсехУпаковок(ДеревоМаркированнойПродукции) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
			
			ОпределитьТипУпаковки(СтрокаДерева, Истина);
			
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

#КонецОбласти

#Область ПредставлениеПолейДереваМаркированнойПродукции

// Определяет индекс картинки статуса проверки для строки дерева маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки или маркируемой продукции.
//
Процедура УстановитьИндексКартинкиСтатусаПроверки(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.НедопустимыйКодМаркировки Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 1;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока")
		Или ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки")
		Или ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки") Тогда
		
		ТекущаяСтрока.ИндексКартинкиСтатусПроверки = 5;
		
	Иначе
		
		ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(ТекущаяСтрока,
			ПроверкаИПодборПродукцииИСМПКлиентСервер);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет индекс картинки типа упаковки для строки дерева маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки или маркируемой продукции.
//
Процедура УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока) Экспорт

	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущаяСтрока.ТипУпаковки) Тогда
		
		Если ТекущаяСтрока.Свойство("ИдетПроверкаДаннойУпаковки")
			И ТекущаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 1;
		Иначе
			ТекущаяСтрока.ИндексКартинкиТипУпаковки = 0;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 2;
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки") Тогда
		
		ТекущаяСтрока.ИндексКартинкиТипУпаковки = 3;
		
	КонецЕсли;

КонецПроцедуры

// Определяет индекс картинки состояния подбора кода маркировки для строки таблицы подобранной маркируемой продукции.
// 
// Параметры:
// 	ТекущаяСтрока - ДанныеФормыЭлементКоллекции - строка табличного поля, содержащая данные маркируемой продукции.
///
Процедура УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(ТекущаяСтрока) Экспорт
		
	Если ТекущаяСтрока.Количество = 0
		И ТекущаяСтрока.КоличествоИС = 0
		И ТекущаяСтрока.КоличествоПодобрано = 0 Тогда
			
		ТекущаяСтрока.ИндексКодаМаркировки = 0;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодобрано >= ТекущаяСтрока.Количество
		И ТекущаяСтрока.КоличествоПодобрано >= ТекущаяСтрока.КоличествоИС Тогда
			
		ТекущаяСтрока.ИндексКодаМаркировки = 1;
		
	Иначе
		
		ТекущаяСтрока.ИндексКодаМаркировки = 2;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление итогов по проверки содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеПроверкиПодчиненных(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных = НСтр("ru = '<не является упаковкой>'");
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки")
		Или ТекущаяСтрока.НеСодержитсяВДанныхДокумента Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<не применимо>'");
	
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  НСтр("ru = '<пустая упаковка>'");
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0
		И ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0 
		И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2'"),
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВНаличии,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда  
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено);
		 
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0
		      И ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0 Тогда
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, не числилось - %3'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтложено = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхОтсутствует = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, не числилось - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось = 0 Тогда 
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отложено - %3, отсутствует - %4'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует);
		
	Иначе
		
		КоличествоПроверено = ТекущаяСтрока.КоличествоПодчиненныхВНаличии + ТекущаяСтрока.КоличествоПодчиненныхОтложено 
		                    + ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось + ТекущаяСтрока.КоличествоПодчиненныхОтсутствует;
		
		ТекущаяСтрока.ПредставлениеПроверкиПодчиненных =  СтрШаблон(НСтр("ru = 'Проверено %1 из %2, отсутствует - %3, отложено - %4, не числилось - %5'"),
		                                                 КоличествоПроверено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхВсего,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтсутствует,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхОтложено,
		                                                 ТекущаяСтрока.КоличествоПодчиненныхНеЧислилось);
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление содержимого для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - - строка дерева, содержащая данные упаковки.
//
Процедура СформироватьПредставлениеСодержимогоУпаковки(ТекущаяСтрока) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ИнтеграцияИСКлиентСервер.ПредставлениеНоменклатуры(
				ТекущаяСтрока.Номенклатура, ТекущаяСтрока.Характеристика,, ТекущаяСтрока.Серия);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока.КоличествоПодчиненныхВсего = 0 Тогда
		
		Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки") Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<нет>'");
		ИначеЕсли ТекущаяСтрока.СодержимоеНедоступно Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<состав недоступен>'");
		Иначе
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = НСтр("ru = '<пустая упаковка>'");
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = "";
		
		Если ТекущаяСтрока.КоличествоПодчиненныхУпаковок > 0 Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(НСтр("ru = 'коробов - %1'"), ТекущаяСтрока.КоличествоПодчиненныхУпаковок);
		КонецЕсли;
			
		Если ТекущаяСтрока.КоличествоПодчиненнойПродукции > 0 Тогда
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = ТекущаяСтрока.ПредставлениеСодержимоеУпаковки
				+ ?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеСодержимоеУпаковки), "", ", ")
				+ СтрШаблон(НСтр("ru = 'товаров - %1'"), ТекущаяСтрока.КоличествоПодчиненнойПродукции);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ТребуетсяПеремаркировка Тогда
		
		ТекущаяСтрока.ПредставлениеСодержимоеУпаковки = СтрШаблон(
			НСтр("ru = '(требуется разборка) %1'"),
			ТекущаяСтрока.ПредставлениеСодержимоеУпаковки);
		
	КонецЕсли;

КонецПроцедуры

// Формирует признак допустимости и представление проверки данных ИСМП для строки дерева, содержащего данные упаковки.
// 
// Параметры:
// 	СтрокаДерева - ДанныеФормыЭлементДерева - строка дерева, содержащая данные упаковки.
// ПараметрыПроверкиКодовМаркировки - Структура со свойствами
// 		ДопустимыеСтатусыКодовМаркировки - Массив значений типа ПеречислениеСсылка.СтатусыКодовМаркировкиИСМП - допустимые статусы кода маркировки для текущей хоз.операции
// 		КонтролироватьВладельца - Булево - необходимость контроля кода маркировки по владельцу
// 		ИННВладельца - Строка - ИНН владельца кода маркировки по данным ИС ИСМП
//
Процедура ПроверитьДопустимостьКодаМаркировки(ТекущаяСтрока, ПараметрыПроверкиКодовМаркировки) Экспорт
	
	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки") Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли НЕ ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		
	ИначеЕсли ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеИСМП Тогда
		
		ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
		ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = НСтр("ru = 'Статус неопределен'");
		
	Иначе
		
		ДопустимыеСтатусыКодовМаркировки = ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыКодовМаркировки;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДопустимыеСтатусыКодовМаркировки, ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыУпаковок);
		
		Если ДопустимыеСтатусыКодовМаркировки.Найти(ТекущаяСтрока.СтатусКодаМаркировки) = Неопределено Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = СтрШаблон(НСтр("ru = 'Статус: %1'"), ТекущаяСтрока.СтатусКодаМаркировки);
		Иначе
			ТекущаяСтрока.НедопустимыйКодМаркировки = Ложь;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = "";
		КонецЕсли;
		
		Если ТекущаяСтрока.СтатусКодаМаркировки <> ПредопределенноеЗначение("Перечисление.СтатусыКодовМаркировкиИСМП.Неопределен")
			И ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельца
			И ТекущаяСтрока.ИННВладельца <> ПараметрыПроверкиКодовМаркировки.ИННВладельца Тогда
			ТекущаяСтрока.НедопустимыйКодМаркировки = Истина;
			ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки = ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки +
				?(ПустаяСтрока(ТекущаяСтрока.ПредставлениеПроверкиКодаМаркировки), "", ", ") +
				СтрШаблон(НСтр("ru = 'ИНН владельца: %1'"), ТекущаяСтрока.ИННВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока) Экспорт

	Если ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока") Тогда
		
		ТекущаяСтрока.Представление = НСтр("ru = 'Пачки без блока'");
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки") Тогда
		
		ТекущаяСтрока.Представление = НСтр("ru = 'Блоки без коробки'");
		
	ИначеЕсли ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки") Тогда
		
		ТекущаяСтрока.Представление = НСтр("ru = 'Продукция без упаковки'");
		
	Иначе
		
		ПроверкаИПодборПродукцииИСКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока,
			ПроверкаИПодборПродукцииИСМПКлиентСервер);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьВыводимоеПредставлениеПроверкиСодержимого(Форма, ТекущаяСтрока) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(Форма,
		ТекущаяСтрока, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеТипаУпаковки

// Определяет тип упаковки(монотоварная или мультитоварная) при изменении строки дерева.
// Действие выполняется для текущей строки и всех ее родительских строк.
//
// Параметры:
// 	ДеревоМаркированнойПродукции - ДанныеФормыДерево - дерево маркируемой продукции.
// 	ИдентификаторИзмененойСтроки - Число - идентификатор изменившейся строки.
//
Процедура ОпределитьТипУпаковкиПриИзмененииСтроки(ДеревоМаркированнойПродукции, ИдентификаторИзмененойСтроки) Экспорт

	ИзмененнаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторИзмененойСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ИзмененнаяСтрока.ТипУпаковки) Тогда
		
		ОпределитьТипУпаковки(ИзмененнаяСтрока, Ложь);
		
	КонецЕсли;
	
	РодительИзмененнойСтроки = ИзмененнаяСтрока.ПолучитьРодителя();
	
	Пока РодительИзмененнойСтроки <> Неопределено 
		И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительИзмененнойСтроки.ТипУпаковки) Цикл
		
		ОпределитьТипУпаковки(РодительИзмененнойСтроки, Ложь);
		РодительИзмененнойСтроки = РодительИзмененнойСтроки.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

Функция ТребуетсяУказаниеСерий(ТаблицаПродукции) Экспорт
	
	СтатусыСерийСерияНеУказана = СтатусыСерийСерияНеУказана();
	
	Для Каждого СтрокаПродукции Из ТаблицаПродукции Цикл
		Если СтрокаПродукции.Количество = 0 И СтрокаПродукции.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтатусыСерийСерияНеУказана.Найти(СтрокаПродукции.СтатусУказанияСерий) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Статусы серий (не указано)
// 
// Возвращаемое значение:
// 	Массив - Описание
Функция СтатусыСерийСерияНеУказана() Экспорт
		
	СтатусыСерияНеУказана = Новый Массив();
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.СтатусыСерийСерияНеУказана(СтатусыСерияНеУказана);
	
	Возврат СтатусыСерияНеУказана;
	
КонецФункции

#КонецОбласти

#Область Перемаркировка

// Формирует и отображает на форме информационную надпись о необходимости перемаркировки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма проверки и подбора, для которой формируется надпись.
//
Процедура ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(
		Форма, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьПеремаркировки(Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.ПроверитьНеобходимостьПеремаркировки(
		Форма, ТаблицаПеремаркировки, ЭтоВыборочнаяПроверка, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Процедура УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(СтрокаДерева, СоответствуетОтбору) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(
		СтрокаДерева, СоответствуетОтбору, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Функция ЗаголовокТребуетсяПеремаркировка(Форма) Экспорт
	
	ТекстТребуется = СтрШаблон(НСтр("ru = 'Требуется разборка упаковок - %1.'"), Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать);
	СтрокаТребуется = Новый ФорматированнаяСтрока(ТекстТребуется,, Форма.ЦветТекстаТребуетВнимания);
	
	Если Форма.УстановленОтборТребуетсяПеремаркировать Тогда
		ТекстОтбор = НСтр("ru = '(снять отбор)'");
	Иначе
		ТекстОтбор = НСтр("ru = '(отобрать)'");
	КонецЕсли;
	
	СтрокаОтбор = Новый ФорматированнаяСтрока(ТекстОтбор,, Форма.ЦветГиперссылки,, "ИзменитьОтборТребуетсяПеремаркировка");
	
	Возврат Новый ФорматированнаяСтрока(СтрокаТребуется, " ", СтрокаОтбор);
	
КонецФункции

#КонецОбласти

// Формирует и отображает на форме информационную надпись о наличии недопустимых кодов маркировки.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма проверки и подбора, для которой формируется надпись.
//
Процедура ОтобразитьИнформациюОНедопустимыхКодахМаркировки(Форма) Экспорт
	
	Если Форма.КоличествоНедопустимыхКодовМаркировки > 0 Тогда
		
		ТекстНедопустимыхКодов = СтрШаблон(НСтр("ru = 'Недопустимых кодов маркировки - %1.'"), Форма.КоличествоНедопустимыхКодовМаркировки);
		СтрокаНедопустимыхКодов = Новый ФорматированнаяСтрока(ТекстНедопустимыхКодов,, Форма.ЦветТекстаТребуетВнимания);
		
		Если Форма.УстановленОтборНедопустимыеКодыМаркировки Тогда
			ТекстОтбор = НСтр("ru = '(снять отбор)'");
		Иначе
			ТекстОтбор = НСтр("ru = '(отобрать)'");
		КонецЕсли;
		
		СтрокаОтбор = Новый ФорматированнаяСтрока(ТекстОтбор,, Форма.ЦветГиперссылки,, "ИзменитьОтборНедопустимыеКодыМаркировки");
		
		Форма.Элементы.ДекорацияНедопустимыеКодыМаркировки.Заголовок = 
			Новый ФорматированнаяСтрока(СтрокаНедопустимыхКодов, " ", СтрокаОтбор);
			
		Форма.Элементы.ГруппаНедопустимыеКодыМаркировки.Видимость = Истина;
		
	Иначе
		
		Форма.Элементы.ГруппаНедопустимыеКодыМаркировки.Видимость = Ложь;
		
	КонецЕсли;
	
	Форма.ТребуетсяОбновитьИнформациюНедопустимыеКодыМаркировки = Ложь;
	
КонецПроцедуры

Функция ТекстОшибкиНеСоответствуютДокументуОснованию(ДанныеШтрихкода) Экспорт
	
	ЧастиТекстаОшибки = Новый Массив;
	
	ЧастиТекстаОшибки.Добавить(НСтр("ru = 'Не удалось сопоставить данным документа следующие данные:'"));
	ЧастиТекстаОшибки.Добавить(" ");
	ЧастиТекстаОшибки.Добавить(
		СтрШаблон(НСтр("ru = 'номенклатура - %1'"),
			?(ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура),
				ДанныеШтрихкода.Номенклатура,
				НСтр("ru = 'Не определена'"))));
				
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Характеристика) Тогда
		ЧастиТекстаОшибки.Добавить(", ");
		ЧастиТекстаОшибки.Добавить(
			СтрШаблон(НСтр("ru = 'Характеристика - %1'"), ДанныеШтрихкода.Характеристика));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		ЧастиТекстаОшибки.Добавить(", ");
		ЧастиТекстаОшибки.Добавить(
			СтрШаблон(НСтр("ru = 'Серия - %1'"), ДанныеШтрихкода.Серия));
	КонецЕсли;
	
	Возврат СтрСоединить(ЧастиТекстаОшибки);
	
КонецФункции

Процедура УстановитьДоступностьУпаковкиДляПроверки(ТекущаяСтрока, ДоступныеДляПроверкиУпаковки) Экспорт
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(ТекущаяСтрока,
		ДоступныеДляПроверкиУпаковки, ПроверкаИПодборПродукцииИСМПКлиентСервер);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуПродукцияБезУпаковки(ТекущаяСтрока) Экспорт
	
	ТекущаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки");
	
	СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(ТекущаяСтрока);
	УстановитьИндексКартинкиТипаУпаковки(ТекущаяСтрока);
	
КонецПроцедуры

// Заполняет реквизит "НомерСтроки" в коллекции
//
// Параметры:
//  КоллекцияДанных - ДанныеФормыКоллекция, ТаблицаЗначений - Таблица, в которой необходимо заполнить НомерСтроки
Процедура ПересчитатьНомераСтрок(КоллекцияДанных) Экспорт
	
	НомерСтроки = 1;
	
	Для Каждого ТекущаяСтрока Из КоллекцияДанных Цикл
		ТекущаяСтрока.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

#Область ОпределениеХозяйственнойОперации

Функция ЭтоДокументПриобретения(Контекст) Экспорт
	
	ЭтоПриобретение = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоДокументПриобретения(Контекст, ЭтоПриобретение);
	
	Возврат ЭтоПриобретение;
	
КонецФункции

Функция ЭтоЧекККМ(Контекст) Экспорт
	
	ЭтоЧек = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоЧекККМ(Контекст, ЭтоЧек);
	
	Возврат ЭтоЧек;
	
КонецФункции

Функция ЭтоЧекККМВозврат(Контекст) Экспорт
	
	ЭтоЧекВозврат = Ложь;
	
	ПроверкаИПодборПродукцииИСМПКлиентСерверПереопределяемый.ЭтоЧекККМВозврат(Контекст, ЭтоЧекВозврат);
	
	Возврат ЭтоЧекВозврат;
	
КонецФункции

#КонецОбласти

Функция НоменклатурыСтрокСовпадают(ИсходнаяСтрока, СтрокаИзменений) Экспорт
	
	Если ИсходнаяСтрока.Номенклатура <> СтрокаИзменений.Номенклатура
		Или ИсходнаяСтрока.Характеристика <> СтрокаИзменений.Характеристика Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СерияКорректна = ЗначениеЗаполнено(ИсходнаяСтрока.Серия) И ИсходнаяСтрока.Серия = СтрокаИзменений.Серия
		Или Не ЗначениеЗаполнено(ИсходнаяСтрока.Серия) И Не ЗначениеЗаполнено(СтрокаИзменений.Серия);
	
	Если Не СерияКорректна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция GTINРавны(GTIN1, GTIN2) Экспорт
	Если GTIN1 = GTIN2 Тогда
		Возврат Истина;
	ИначеЕсли СтрДлина(GTIN1) = СтрДлина(GTIN2) Тогда
		Возврат Ложь;
	КонецЕсли;
	EAN1 = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN1);
	EAN2 = ШтрихкодированиеИСКлиентСервер.ШтрихкодEANИзGTIN(GTIN2);
	Возврат EAN1 = EAN2;
КонецФункции

Процедура ПодобраннаяПродукцияПриДобавленииСтроки(Форма, СтрокаИзменений, Знач ИзменениеКоличества, МодульКонтекста) Экспорт
	
	// Описание:
	// 1. Выполняем поиск строки агрегатора;
	// 2. Если строка-агрегатор не найдена, то просто добавляем новую строку;
	// 3. Если строка-агрегатор найдена, то ...
	//    Агрегатор бывает нескольких видов:
	//    - без подобранной продукции / с подобранной продукцией, с одним GTIN
	//    - без подобранной продукции, с несколькими GTIN
	//    - с подобранной продукцией (GTIN указан), с несколькими GTIN
	//    - со спецификой по виду продукции (МРЦ, ...)
	//    3.1. Необходимо определить, нужно ли добавлять новую строку.
	//    3.2. Необходимо определить, нужно ли удалять строку агрегатор.
	
	СвойстваВидаПродукции = СвойстваВидаПродукцииПоДаннымФормы(Форма);
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	
	СтрокаАгрегатор1 = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Ложь);
	СтрокаАгрегатор2 = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Истина);
	
	Если СтрокаАгрегатор1 = Неопределено И СтрокаАгрегатор2 = Неопределено Тогда
		
		СтрокаПодобраннойПродукции = Неопределено;
		Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
			Если Не НоменклатурыСтрокСовпадают(СтрокаИзменений, СтрокаМаркируемойПродукции) Тогда
				Продолжить;
			КонецЕсли;
			Если СтрокаМаркируемойПродукции.КодыGTIN.Количество() > 0 Тогда
				СтрокаПодобраннойПродукции = СтрокаМаркируемойПродукции;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Добавляем строку
		
		НоваяСтрока = ПодобраннаяМаркируемаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменений);
		НоваяСтрока.НоменклатураСопоставлена = ЗначениеЗаполнено(НоваяСтрока.Номенклатура);
		НоваяСтрока.КоличествоПодобрано      = ИзменениеКоличества;
		
		Если СтрокаПодобраннойПродукции <> Неопределено Тогда
			НоваяСтрока.КодыGTIN          = СтрокаПодобраннойПродукции.КодыGTIN;
			НоваяСтрока.ПредставлениеGTIN = СтрокаПодобраннойПродукции.ПредставлениеGTIN;
		КонецЕсли;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НоваяСтрока);
		
		ОбработатьИзменениеНоменклатурыВСтроке(Форма, НоваяСтрока, МодульКонтекста);
		
	ИначеЕсли СтрокаАгрегатор1 = СтрокаАгрегатор2 Тогда
		
		// Найдена одна строка, только с уже подобранной продукцией
		
		СтрокаАгрегатор1.КоличествоПодобрано = СтрокаАгрегатор1.КоличествоПодобрано + ИзменениеКоличества;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор1);
		
	ИначеЕсли СтрокаАгрегатор1 <> Неопределено И СтрокаАгрегатор2 <> Неопределено Тогда
		
		// Найдено две строки: не распределенная строка и строка с подобранной продукцией.
		
		ДоступноеКоличество = 0;
		ТекущееКоличество   = 0;
		ТекущееКоличествоИС = 0;
		
		Если //ЗначениеЗаполнено(СтрокаАгрегатор1.Номенклатура) И 
			СтрокаАгрегатор2.Количество > СтрокаАгрегатор2.КоличествоПодобрано Тогда
			ДоступноеКоличество = СтрокаАгрегатор2.Количество - СтрокаАгрегатор2.КоличествоПодобрано;
		КонецЕсли;
		
		ДоступноеКоличество = Мин(ДоступноеКоличество, ИзменениеКоличества);
		
		Если ДоступноеКоличество < ИзменениеКоличества Тогда
			
			ТекущееКоличество   = Мин(СтрокаАгрегатор1.Количество, ИзменениеКоличества - ДоступноеКоличество);
			ТекущееКоличествоИС = Мин(ИзменениеКоличества, СтрокаАгрегатор1.КоличествоИС);
			
			СтрокаАгрегатор1.Количество   = СтрокаАгрегатор1.Количество   - ТекущееКоличество;
			СтрокаАгрегатор1.КоличествоИС = СтрокаАгрегатор1.КоличествоИС - ТекущееКоличествоИС;
			
			Если СтрокаАгрегатор1.Количество = 0 Тогда
				ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор1);
			Иначе
				ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор1, МодульКонтекста);
				ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор1);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаАгрегатор2.Количество          = СтрокаАгрегатор2.Количество          + ТекущееКоличество;
		СтрокаАгрегатор2.КоличествоИС        = СтрокаАгрегатор2.КоличествоИС        + ТекущееКоличествоИС;
		СтрокаАгрегатор2.КоличествоПодобрано = СтрокаАгрегатор2.КоличествоПодобрано + ИзменениеКоличества;
		
		ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор2, МодульКонтекста);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор2);
		
	ИначеЕсли СтрокаАгрегатор1 = Неопределено Тогда
		
		СтрокаАгрегатор2.КоличествоПодобрано = СтрокаАгрегатор2.КоличествоПодобрано + ИзменениеКоличества;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор2);
		
	ИначеЕсли СтрокаАгрегатор2 = Неопределено Тогда
		
		// Строка с подобранной продукцией не найдена, имеется только строка агрегатор.
		
		ТекущееКоличество   = Мин(СтрокаАгрегатор1.Количество,   ИзменениеКоличества);
		ТекущееКоличествоИС = Мин(СтрокаАгрегатор1.КоличествоИС, ИзменениеКоличества);
		
		// Добавляем строку
		
		// Для сортировки: определяем конечный индекс строки с совпадающей номенклатурой
		КонечныйИндекс = ПодобраннаяМаркируемаяПродукция.Индекс(СтрокаАгрегатор1);
		Для Сч = КонечныйИндекс + 1 По ПодобраннаяМаркируемаяПродукция.Количество() - 1 Цикл
			СтрокаМаркируемойПродукции = ПодобраннаяМаркируемаяПродукция[Сч];
			Если Не НоменклатурыСтрокСовпадают(СтрокаАгрегатор1, СтрокаМаркируемойПродукции) Тогда
				Прервать;
			КонецЕсли;
			КонечныйИндекс = Сч;
		КонецЦикла;
		
		НоваяСтрока = ПодобраннаяМаркируемаяПродукция.Вставить(КонечныйИндекс + 1);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменений);
		НоваяСтрока.НоменклатураСопоставлена = ЗначениеЗаполнено(НоваяСтрока.Номенклатура);
		НоваяСтрока.Количество               = ТекущееКоличество;
		НоваяСтрока.КоличествоИС             = ТекущееКоличествоИС;
		НоваяСтрока.КоличествоПодобрано      = ИзменениеКоличества;
		
		НоваяСтрока.КодыGTIN                 = СтрокаАгрегатор1.КодыGTIN;
		НоваяСтрока.ПредставлениеGTIN        = СтрокаАгрегатор1.ПредставлениеGTIN;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НоваяСтрока);
		
		ОбработатьИзменениеНоменклатурыВСтроке(Форма, НоваяСтрока, МодульКонтекста);
		
		СтрокаАгрегатор1.Количество   = СтрокаАгрегатор1.Количество - ТекущееКоличество;
		СтрокаАгрегатор1.КоличествоИС = СтрокаАгрегатор1.КоличествоИС - ТекущееКоличествоИС;
		Если СтрокаАгрегатор1.Количество = 0 Тогда
			ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор1);
		Иначе
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор1, МодульКонтекста);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор1);
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
	
КонецПроцедуры

Процедура ПодобраннаяПродукцияПриУдаленииСтроки(Форма, СтрокаИзменений, Знач ИзменениеКоличества, МодульКонтекста) Экспорт
	
	// 1. Находим агрегирующую строку с подобранной продукцией;
	// 2. Вычитаем необходимо количество из колонки "КоличествоПодобрано";
	// 3. Если Количество и КоличествоПодобрано равно 0, удаляем строку и завершаем выполнение;
	// 4. Если КоличествоПодобрано равно 0,то нужно перераспределеить колонку Количество
	// 5. Если Количество >= КоличествоПодобрано то завершаем выполнение;
	
	СвойстваВидаПродукции = СвойстваВидаПродукцииПоДаннымФормы(Форма);
	
	ИзменениеКоличества = ?(ИзменениеКоличества > 0, ИзменениеКоличества, -ИзменениеКоличества);
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	 
	СтрокаАгрегатор = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Истина);
	
	Если СтрокаАгрегатор = Неопределено Или СтрокаАгрегатор.КоличествоПодобрано = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоШтрихкодВводаОстатков = ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаАгрегатор.GTIN);
	
	СтрокаСКоличествомПоДокументу = Неопределено; // Строка таблицы КоличествоПоДокументуСУчетомВидаПродукции
	Если СтрокаАгрегатор.Количество > 0 Тогда
		
		Если ЭтоШтрихкодВводаОстатков Тогда
			Для Каждого СтрокаСКоличеством Из Форма.КоличествоПоДокументуСУчетомВидаПродукции Цикл
				Если GTINРавны(СтрокаАгрегатор.GTIN, СтрокаСКоличеством.GTIN) Тогда
					СтрокаСКоличествомПоДокументу = СтрокаСКоличеством;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаСКоличествомПоДокументу = Неопределено Тогда
			Для Каждого СтрокаСКоличеством Из Форма.КоличествоПоДокументуСУчетомВидаПродукции Цикл
				Если НоменклатурыСтрокСовпадают(СтрокаАгрегатор, СтрокаСКоличеством)
					И СвойстваВидаПродукцииСовпадают(СтрокаАгрегатор, СтрокаСКоличеством, СвойстваВидаПродукции) Тогда
					СтрокаСКоличествомПоДокументу = СтрокаСКоличеством;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоПодобраноПоДокументу       = (СтрокаАгрегатор.Количество = СтрокаАгрегатор.КоличествоПодобрано); // необходимо для дальнейшего перераспределения
	ВыполнитьПерераспределениеКоличества = Ложь;
	УдалитьСтрокуАгрегатор               = Ложь;
	
	СтрокаАгрегатор.КоличествоПодобрано = СтрокаАгрегатор.КоличествоПодобрано - ИзменениеКоличества;
	
	// Тот случай когда меняем статус проверки при отсутствующей номенклатуре
	Если Не (ЗначениеЗаполнено(СтрокаАгрегатор.Номенклатура) Или ЗначениеЗаполнено(СтрокаИзменений.Номенклатура)) Тогда
		Если СтрокаАгрегатор.Количество = 0 И СтрокаАгрегатор.КоличествоПодобрано = 0 Тогда
			ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
		Иначе
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если СтрокаАгрегатор.Количество = 0 И СтрокаАгрегатор.КоличествоПодобрано = 0 Тогда
		
		ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
		
		Возврат;
		
	ИначеЕсли СтрокаАгрегатор.КоличествоПодобрано = 0 Тогда
		
		// Пример: Количество = 4, КоличествоПодобрано = 4, ИзменениеКоличества = 4
		
		Если СтрокаСКоличествомПоДокументу = Неопределено Тогда
			ВыполнитьПерераспределениеКоличества = Истина;
			УдалитьСтрокуАгрегатор               = Истина;
		ИначеЕсли СтрокаАгрегатор.Количество > СтрокаСКоличествомПоДокументу.Количество Тогда
			ВыполнитьПерераспределениеКоличества = Истина;
		КонецЕсли;
		
	ИначеЕсли КоличествоПодобраноПоДокументу Тогда
		
		// Пример: Количество = 4, КоличествоПодобрано = 4, ИзменениеКоличества = 2
		
		Если СтрокаСКоличествомПоДокументу = Неопределено
			Или СтрокаАгрегатор.Количество > СтрокаСКоличествомПоДокументу.Количество Тогда
			ВыполнитьПерераспределениеКоличества = Истина;
		КонецЕсли;
		
	Иначе
		
		// Все остальные случаи
		// * Количество =  0;
		// * Количество >= КоличествоПодобрано;
		// * Количество <  КоличествоПодобрано;
		
		ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор);
		
		Возврат;
		
	КонецЕсли;
	
	Если Не ВыполнитьПерераспределениеКоличества Тогда
		
		ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор);
		Возврат;
		
	КонецЕсли;
	
	КоличествоОстаток                = ?(УдалитьСтрокуАгрегатор, СтрокаАгрегатор.Количество, ИзменениеКоличества);
	СтрокиДляАнализаИРаспределения   = Новый Массив;
	ИндексПервойСтрокиСНоменклатурой = Неопределено;
	GTINМожетБытьЗаполненЕслиДляНоменклатурыПредусмотреноНесколькоGTIN = Ложь;
	
	Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		Если КоличествоОстаток = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если СтрокаМаркируемойПродукции = СтрокаАгрегатор Тогда
			Если ИндексПервойСтрокиСНоменклатурой = Неопределено Тогда
				ИндексПервойСтрокиСНоменклатурой = ПодобраннаяМаркируемаяПродукция.Индекс(СтрокаМаркируемойПродукции);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Не НоменклатурыСтрокСовпадают(СтрокаАгрегатор, СтрокаМаркируемойПродукции) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИндексПервойСтрокиСНоменклатурой = Неопределено Тогда
			ИндексПервойСтрокиСНоменклатурой = ПодобраннаяМаркируемаяПродукция.Индекс(СтрокаМаркируемойПродукции);
		КонецЕсли;
		
		Если ЭтоСтрокаАгрегаторСКодамиGTIN(СтрокаМаркируемойПродукции,
				GTINМожетБытьЗаполненЕслиДляНоменклатурыПредусмотреноНесколькоGTIN) Тогда
			СтрокиДляАнализаИРаспределения.Добавить(СтрокаМаркируемойПродукции);
		КонецЕсли;
		
		Если СтрокаМаркируемойПродукции.КоличествоПодобрано > СтрокаМаркируемойПродукции.Количество Тогда
			
			КоличествоКРаспределению = Мин(КоличествоОстаток,
				СтрокаМаркируемойПродукции.КоличествоПодобрано - СтрокаМаркируемойПродукции.Количество);
			
			СтрокаМаркируемойПродукции.Количество = СтрокаМаркируемойПродукции.Количество + КоличествоКРаспределению;
			
			СтрокаАгрегатор.Количество = СтрокаАгрегатор.Количество - КоличествоКРаспределению;
			КоличествоОстаток          = КоличествоОстаток          - КоличествоКРаспределению;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоОстаток = 0 Тогда
		
		Если УдалитьСтрокуАгрегатор Тогда
			ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
		Иначе
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор);
		КонецЕсли;
		
		ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
		
		Возврат;
		
	КонецЕсли;
	
	ДобавитьНовуюСтрокуАгрегатор = Истина;
	
	Если СтрокиДляАнализаИРаспределения.Количество() = 0 Тогда
		
		Если Не УдалитьСтрокуАгрегатор И ЭтоСтрокаАгрегаторСКодамиGTIN(СтрокаАгрегатор, Ложь) Тогда
			
			ДобавитьНовуюСтрокуАгрегатор = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаМаркируемойПродукции Из СтрокиДляАнализаИРаспределения Цикл
			
			СтрокаАктуальна = Ложь;
			Если СтрокаМаркируемойПродукции.КодыGTIN.Количество() = 1 Тогда
				СтрокаАктуальна = ЗначениеЗаполнено(СтрокаМаркируемойПродукции.GTIN);
				Если СвойстваВидаПродукции.ПроверятьСвойстваВидаПродукции Тогда
					
					// Специфика по виду продукции, так же для них логично проверять на КоличествоПодобрано = 0
					Если СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
						СтрокаАктуальна = ?(СтрокаМаркируемойПродукции.МРЦ <> 0, Ложь, СтрокаАктуальна);
					ИначеЕсли СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция") Тогда
						Если СвойстваВидаПродукции.ПрисутствуютВДанныхДокумента Тогда
							СтрокаАктуальна = ?(ЗначениеЗаполнено(СтрокаМаркируемойПродукции.ИдентификаторПроисхожденияВЕТИС),
								Ложь, СтрокаАктуальна);
						Иначе
							СтрокаАктуальна = ?(СтрокаМаркируемойПродукции.ГоденДо = '00010101', СтрокаАктуальна, Ложь);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				СтрокаАктуальна = Не ЗначениеЗаполнено(СтрокаМаркируемойПродукции.GTIN);
			КонецЕсли;
			
			Если СтрокаАктуальна Тогда
				
				СтрокаМаркируемойПродукции.Количество = СтрокаМаркируемойПродукции.Количество + КоличествоОстаток;
				
				ДобавитьНовуюСтрокуАгрегатор = Ложь;
				
				СтрокаАгрегатор.Количество = СтрокаАгрегатор.Количество - КоличествоОстаток;
				КоличествоОстаток          = 0;
				
				ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаМаркируемойПродукции, МодульКонтекста);
				ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаМаркируемойПродукции);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДобавитьНовуюСтрокуАгрегатор Тогда
		
		// Добавляем строку
		
		ЗначениеGTIN = "";
		Если СтрокаАгрегатор.КодыGTIN.Количество() = 1 Тогда
			ЗначениеGTIN = СтрокаАгрегатор.КодыGTIN[0].Значение;
		КонецЕсли;
		
		СвойстваДляИсключения = Новый Массив; // Для обнуления при создании строки
		СвойстваДляИсключения.Добавить("Количество");
		СвойстваДляИсключения.Добавить("КоличествоИС");
		СвойстваДляИсключения.Добавить("КоличествоПодобрано");
		СвойстваДляИсключения.Добавить("GTIN");
		СвойстваДляИсключения.Добавить("ПредставлениеGTIN");
		Если СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
			СвойстваДляИсключения.Добавить("МРЦ");
		ИначеЕсли СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция") Тогда
			СвойстваДляИсключения.Добавить("ИдентификаторПроисхожденияВЕТИС");
			СвойстваДляИсключения.Добавить("ГоденДо");
			СвойстваДляИсключения.Добавить("Скоропортящаяся");
		КонецЕсли;
		
		ИменаСвойствДляИсключения = СтрСоединить(СвойстваДляИсключения, ",");
		
		Если ИндексПервойСтрокиСНоменклатурой = Неопределено Тогда
			ИндексПервойСтрокиСНоменклатурой = ПодобраннаяМаркируемаяПродукция.Индекс(СтрокаАгрегатор);
		КонецЕсли;
		
		НоваяСтрока = ПодобраннаяМаркируемаяПродукция.Вставить(ИндексПервойСтрокиСНоменклатурой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАгрегатор,, ИменаСвойствДляИсключения);
		НоваяСтрока.НоменклатураСопоставлена = ЗначениеЗаполнено(НоваяСтрока.Номенклатура);
		НоваяСтрока.Количество               = КоличествоОстаток;
		НоваяСтрока.КоличествоПодобрано      = 0;
		
		НоваяСтрока.GTIN                     = ЗначениеGTIN;
		НоваяСтрока.КодыGTIN                 = СтрокаАгрегатор.КодыGTIN;
		НоваяСтрока.ПредставлениеGTIN        = СтрокаАгрегатор.ПредставлениеGTIN;
		
		ОбработатьИзменениеНоменклатурыВСтроке(Форма, НоваяСтрока, МодульКонтекста);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(НоваяСтрока);
		
		СтрокаАгрегатор.Количество = СтрокаАгрегатор.Количество - КоличествоОстаток;
		КоличествоОстаток          = 0;
		
	КонецЕсли;
	
	Если УдалитьСтрокуАгрегатор Тогда
		ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
	Иначе
		ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста);
		ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
	
КонецПроцедуры

Процедура ПодобраннаяПродукцияПриОчисткиСопоставления(Форма, ПодобраннаяПродукцияДляОчисткиСопоставления, МодульКонтекста) Экспорт
	
	// Необходимые проверки:
	//1. Свойства вида продукции
	//2. Количество по документу
	
	СвойстваВидаПродукции = СвойстваВидаПродукцииПоДаннымФормы(Форма);
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	
	СтатусыПроверкиВНаличии = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	
	СвойстваДляКопирования = Новый Массив;
	СвойстваДляКопирования.Добавить("GTIN");
	СвойстваДляКопирования.Добавить("ПредставлениеНоменклатуры");
	Если СвойстваВидаПродукции.ПроверятьСвойстваВидаПродукции Тогда
		Если СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
			СвойстваДляКопирования.Добавить("МРЦ");
		ИначеЕсли СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция") Тогда
			СвойстваДляКопирования.Добавить("ИдентификаторПроисхожденияВЕТИС");
			СвойстваДляКопирования.Добавить("ГоденДо");
			СвойстваДляКопирования.Добавить("Скоропортящаяся");
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаИзменений Из ПодобраннаяПродукцияДляОчисткиСопоставления Цикл
		
		СтрокаАгрегатор = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзменений, СвойстваВидаПродукции, Истина);
		
		Если СтрокаАгрегатор = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоПодобрано = ?(СтрокаИзменений.СтатусПроверки = СтатусыПроверкиВНаличии, СтрокаИзменений.Изменение, 0);
		Количество          = Мин(СтрокаАгрегатор.Количество,   СтрокаИзменений.Изменение);
		КоличествоИС        = Мин(СтрокаАгрегатор.КоличествоИС, СтрокаИзменений.Изменение);
		
		Если КоличествоПодобрано = 0 И Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаАгрегатор.КоличествоПодобрано = СтрокаАгрегатор.КоличествоПодобрано - КоличествоПодобрано;
		СтрокаАгрегатор.Количество          = СтрокаАгрегатор.Количество          - Количество;
		СтрокаАгрегатор.КоличествоИС        = СтрокаАгрегатор.КоличествоИС        - КоличествоИС;
		
		// Ищем строку с не сопоставленной номенклатурой, если ее нет, то создаем её
		ОтборПоGTIN = Новый Структура("GTIN", СтрокаИзменений.GTIN);
		СтрокиПоGTIN = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(ОтборПоGTIN);
		
		СтрокаАгрегаторСПустойНоменклатурой = Неопределено;
		
		Для Каждого СтрокаПодобраннойПродукции Из СтрокиПоGTIN Цикл
			
			Если Количество = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаАгрегатор = СтрокаПодобраннойПродукции Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавить проверку на свойства вида продукции СвойстваВидаПродукцииСовпадают
			Если Не СвойстваВидаПродукцииСовпадают(СтрокаАгрегатор, СтрокаПодобраннойПродукции, СвойстваВидаПродукции) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				СтрокаАгрегаторСПустойНоменклатурой = СтрокаПодобраннойПродукции;
			КонецЕсли;
			
			Если СтрокаПодобраннойПродукции.КоличествоПодобрано > СтрокаПодобраннойПродукции.Количество И Количество > 0 Тогда
				
				КоличествоИзменение = Мин(СтрокаПодобраннойПродукции.Количество, Количество);
				Количество   = Количество - КоличествоИзменение;
				КоличествоИС = Количество;
				
				СтрокаПодобраннойПродукции.Количество   = СтрокаПодобраннойПродукции.Количество + КоличествоИзменение;
				СтрокаПодобраннойПродукции.КоличествоИС = СтрокаПодобраннойПродукции.Количество;
				
				ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не (КоличествоПодобрано = 0 И Количество = 0 И КоличествоИС = 0) Тогда
			
			СтрокаПодобраннойПродукции = СтрокаАгрегаторСПустойНоменклатурой;
			Если СтрокаПодобраннойПродукции = Неопределено Тогда
				СтрокаПодобраннойПродукции = ПодобраннаяМаркируемаяПродукция.Вставить(0);
				Для Каждого ТекущееСвойство Из СвойстваДляКопирования Цикл
					СтрокаПодобраннойПродукции[ТекущееСвойство] = СтрокаИзменений[ТекущееСвойство];
				КонецЦикла;
				ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаПодобраннойПродукции, МодульКонтекста);
			КонецЕсли;
			СтрокаПодобраннойПродукции.КоличествоПодобрано = СтрокаПодобраннойПродукции.КоличествоПодобрано + КоличествоПодобрано;
			СтрокаПодобраннойПродукции.Количество          = СтрокаПодобраннойПродукции.Количество          + Количество;
			СтрокаПодобраннойПродукции.КоличествоИС        = СтрокаПодобраннойПродукции.КоличествоИС        + КоличествоИС;
			
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаПодобраннойПродукции, МодульКонтекста);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
			
			КоличествоПодобрано = 0;
			Количество          = 0;
			КоличествоИС        = 0;
			
		КонецЕсли;
		
		Если СтрокаАгрегатор.Количество = 0 И СтрокаАгрегатор.КоличествоПодобрано = 0 Тогда
			ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор);
		Иначе
			ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста);
			ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор);
		КонецЕсли;
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
	
	ИмяСвойстваКоличествоСтрокПодобраннойПродукции = "КоличествоСтрокПодобраннойПродукции";
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(СвойстваВидаПродукции.ВидПродукции) Тогда
		ИмяСвойстваКоличествоСтрокПодобраннойПродукции = "КоличествоСтрокПодобраннойТабачнойПродукции";
	КонецЕсли;
	Форма[ИмяСвойстваКоличествоСтрокПодобраннойПродукции] = Форма.ПодобраннаяМаркируемаяПродукция.Количество();
	
КонецПроцедуры

Процедура ПодобраннаяПродукцияПриУточненииСопоставления(Форма, СтрокаИзмененийДо, СтрокаИзмененийПосле, Знач ИзменениеКоличества, МодульКонтекста) Экспорт
	
	СвойстваВидаПродукции = СвойстваВидаПродукцииПоДаннымФормы(Форма);
	
	ПодобраннаяМаркируемаяПродукция = Форма.ПодобраннаяМаркируемаяПродукция;
	
	СтатусыПроверкиВНаличии = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	
	СвойстваДляКопирования = Новый Массив;
	СвойстваДляКопирования.Добавить("GTIN");
	СвойстваДляКопирования.Добавить("ПредставлениеНоменклатуры");
	Если СвойстваВидаПродукции.ПроверятьСвойстваВидаПродукции Тогда
		Если СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
			СвойстваДляКопирования.Добавить("МРЦ");
		ИначеЕсли СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция") Тогда
			СвойстваДляКопирования.Добавить("ИдентификаторПроисхожденияВЕТИС");
			СвойстваДляКопирования.Добавить("ГоденДо");
			СвойстваДляКопирования.Добавить("Скоропортящаяся");
		КонецЕсли;
	КонецЕсли;
	
	СтрокаАгрегатор1 = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзмененийДо,    СвойстваВидаПродукции, Истина);
	СтрокаАгрегатор2 = СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаИзмененийПосле, СвойстваВидаПродукции, Истина);
	
	КоличествоПодобрано = ?(СтрокаИзмененийДо.СтатусПроверки = СтатусыПроверкиВНаличии, ИзменениеКоличества, 0);
	Количество          = Мин(СтрокаАгрегатор1.Количество,   ИзменениеКоличества);
	КоличествоИС        = Мин(СтрокаАгрегатор1.КоличествоИС, ИзменениеКоличества);
	
	Если КоличествоПодобрано = 0 И Количество = 0 И КоличествоИС = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАгрегатор1.КоличествоПодобрано = СтрокаАгрегатор1.КоличествоПодобрано - КоличествоПодобрано;
	СтрокаАгрегатор1.Количество          = СтрокаАгрегатор1.Количество          - Количество;
	СтрокаАгрегатор1.КоличествоИС        = СтрокаАгрегатор1.КоличествоИС        - КоличествоИС;
	
	ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор1, МодульКонтекста);
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор1);
	
	Если СтрокаАгрегатор2 = Неопределено Тогда
		
		Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаАгрегатор1.GTIN) Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Номенклатура",   СтрокаИзмененийПосле.Номенклатура);
			Отбор.Вставить("Характеристика", СтрокаИзмененийПосле.Характеристика);
			Отбор.Вставить("Серия",          СтрокаИзмененийПосле.Серия);
			Отбор.Вставить("GTIN",           "");
			
			СтрокиДляРаспределения = ПодобраннаяМаркируемаяПродукция.НайтиСтроки(Отбор);
			
			Если СтрокиДляРаспределения.Количество() > 0 Тогда
				СтрокаАгрегатор2 = СтрокиДляРаспределения[0];
				СтрокаАгрегатор2.GTIN = СтрокаАгрегатор1.GTIN;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаАгрегатор2 = Неопределено Тогда
			
			СвойстваДляИсключенияКопирования = Новый Массив;
			СвойстваДляИсключенияКопирования.Добавить("Номенклатура");
			СвойстваДляИсключенияКопирования.Добавить("Характеристика");
			СвойстваДляИсключенияКопирования.Добавить("Серия");
			СвойстваДляИсключенияКопирования.Добавить("КоличествоПодобрано");
			СвойстваДляИсключенияКопирования.Добавить("Количество");
			СвойстваДляИсключенияКопирования.Добавить("КоличествоИС");
			
			СтрокаАгрегатор2 = ПодобраннаяМаркируемаяПродукция.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАгрегатор2, СтрокаАгрегатор1,, СтрСоединить(СвойстваДляИсключенияКопирования, ","));
			ЗаполнитьЗначенияСвойств(СтрокаАгрегатор2, СтрокаИзмененийПосле);
			
			ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаАгрегатор2, МодульКонтекста);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаАгрегатор2.КоличествоПодобрано = СтрокаАгрегатор2.КоличествоПодобрано + КоличествоПодобрано;
	СтрокаАгрегатор2.Количество          = СтрокаАгрегатор2.Количество          + Количество;
	СтрокаАгрегатор2.КоличествоИС        = СтрокаАгрегатор2.КоличествоИС        + КоличествоИС;
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаАгрегатор2);
	
	КоличествоПодобрано = 0;
	Количество          = 0;
	КоличествоИС        = 0;
	
	Если СтрокаАгрегатор1.Количество = 0 И СтрокаАгрегатор1.КоличествоПодобрано = 0 И СтрокаАгрегатор1.КоличествоИС = 0 Тогда
		ПодобраннаяМаркируемаяПродукция.Удалить(СтрокаАгрегатор1);
	КонецЕсли;
	
	ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор2, МодульКонтекста);
	
	ПроверкаИПодборПродукцииИСМПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяМаркируемаяПродукция);
	
	ИмяСвойстваКоличествоСтрокПодобраннойПродукции = "КоличествоСтрокПодобраннойПродукции";
	Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияМОТП(СвойстваВидаПродукции.ВидПродукции) Тогда
		ИмяСвойстваКоличествоСтрокПодобраннойПродукции = "КоличествоСтрокПодобраннойТабачнойПродукции";
	КонецЕсли;
	Форма[ИмяСвойстваКоличествоСтрокПодобраннойПродукции] = Форма.ПодобраннаяМаркируемаяПродукция.Количество();
	
КонецПроцедуры

Процедура РазрешитьСопоставлениеНоменклатурыДляДокументаПриобретения(Форма, ПараметрыСканирования) Экспорт
	
	Если Не ПараметрыСканирования.СопоставлятьНоменклатуру
		И Форма.ЭтоДокументПриобретения
		И ТипЗнч(Форма.ПроверяемыйДокумент) <> Тип("ДокументСсылка.ПриемкаТоваровИСМП") Тогда
		ПараметрыСканирования.СопоставлятьНоменклатуру = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ОпределениеТипаУпаковки

Процедура ОпределитьТипУпаковки(СтрокаДерева, ВключаяПодчиненные)
	
	НоменклатураУпаковки   = Новый Соответствие;
	ХарактеристикаУпаковки = Новый Соответствие;
	СерияУпаковки          = Новый Соответствие;
	GTINУпаковки           = Новый Соответствие;
	
	ВУпаковкеРазнаяНоменклатура   = Ложь;
	ВУпаковкеРазныеХарактеристики = Ложь;
	ВУпаковкеРазныеСерии          = Ложь;
	ВУпаковкеРазныйGTIN           = Ложь;
	
	Если СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Групповая") Тогда
		НоменклатураУпаковки.Вставить(СтрокаДерева.Номенклатура, Истина);
		ХарактеристикаУпаковки.Вставить(СтрокаДерева.Характеристика, Истина);
		СерияУпаковки.Вставить(СтрокаДерева.Серия, Истина);
		GTINУпаковки.Вставить(СтрокаДерева.GTIN, Истина);
	ИначеЕсли СтрокаДерева.ВидУпаковки = ПредопределенноеЗначение("Перечисление.ВидыУпаковокИС.Логистическая")
		И ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		НоменклатураУпаковки.Вставить(СтрокаДерева.Номенклатура, Истина);
		ХарактеристикаУпаковки.Вставить(СтрокаДерева.Характеристика, Истина);
		СерияУпаковки.Вставить(СтрокаДерева.Серия, Истина);
		GTINУпаковки.Вставить(СтрокаДерева.GTIN, Истина);
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			Если ВключаяПодчиненные Тогда
				
				ОпределитьТипУпаковки(ПодчиненнаяСтрока, ВключаяПодчиненные);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазнаяНоменклатура Тогда
			ВУпаковкеРазнаяНоменклатура = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеХарактеристики Тогда
			ВУпаковкеРазныеХарактеристики = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныеСерии Тогда
			ВУпаковкеРазныеСерии = Истина;
		КонецЕсли;
		
		Если ПодчиненнаяСтрока.ВУпаковкеРазныйGTIN Тогда
			ВУпаковкеРазныйGTIN = Истина;
		КонецЕсли;
		
		НоменклатураУпаковки.Вставить(ПодчиненнаяСтрока.Номенклатура, Истина);
		ХарактеристикаУпаковки.Вставить(ПодчиненнаяСтрока.Характеристика, Истина);
		СерияУпаковки.Вставить(ПодчиненнаяСтрока.Серия, Истина);
		GTINУпаковки.Вставить(ПодчиненнаяСтрока.GTIN, Истина);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"Номенклатура", "ВУпаковкеРазнаяНоменклатура", 
		НоменклатураУпаковки, ВУпаковкеРазнаяНоменклатура);
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"Характеристика", "ВУпаковкеРазныеХарактеристики", 
		ХарактеристикаУпаковки, ВУпаковкеРазныеХарактеристики);
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"Серия", "ВУпаковкеРазныеСерии", 
		СерияУпаковки, ВУпаковкеРазныеСерии);
	
	ПроверкаИПодборПродукцииИСКлиентСервер.УстановитьЗначениеДляУпаковки(СтрокаДерева,
		"GTIN", "ВУпаковкеРазныйGTIN", 
		GTINУпаковки, ВУпаковкеРазныйGTIN);
	
	Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
		Если НЕ СтрокаДерева.ВУпаковкеРазныеХарактеристики Тогда
			СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
		Иначе
			СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
		КонецЕсли;
	ИначеЕсли НЕ СтрокаДерева.ВУпаковкеРазныйGTIN Тогда
		СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
	Иначе
		СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция СтрокаАгрегаторМаркируемойПродукции(ПодобраннаяМаркируемаяПродукция, СтрокаПодобраннойПродукции, СвойстваВидаПродукции, ПолноеСовпадение = Ложь)
	
	Если ПодобраннаяМаркируемаяПродукция.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПолноеСовпадение Тогда
		Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
			Если НоменклатурыСтрокСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции)
				И GTINРавны(СтрокаПодобраннойПродукции.GTIN, СтрокаМаркируемойПродукции.GTIN)
				И СвойстваВидаПродукцииСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, СвойстваВидаПродукции) Тогда
				Возврат СтрокаМаркируемойПродукции;
			КонецЕсли;
		КонецЦикла;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаПодобраннойПродукции.GTIN) Тогда
		
		Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
			
			Если ЗначениеЗаполнено(СтрокаМаркируемойПродукции.Номенклатура)
				И Не НоменклатурыСтрокСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции) Тогда
				Продолжить;
			КонецЕсли;
				
			Если ШтрихкодированиеИСКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаМаркируемойПродукции.GTIN) Тогда
				
				Если Не GTINРавны(СтрокаПодобраннойПродукции.GTIN, СтрокаМаркируемойПродукции.GTIN) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаМаркируемойПродукции.Количество = 0 
					Или СтрокаМаркируемойПродукции.Количество = СтрокаМаркируемойПродукции.КоличествоПодобрано Тогда
					Продолжить;
				КонецЕсли;
				
				Возврат СтрокаМаркируемойПродукции;
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаМаркируемойПродукции.GTIN)
				И СтрокаМаркируемойПродукции.КодыGTIN.Количество() = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Возврат СтрокаМаркируемойПродукции;
			
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтрокаАгрегаторПолноеСовпадение    = Неопределено;
	СтрокаАгрегаторЧастичноеСовпадение = Неопределено;
	СтрокиДляАнализаИРаспределения     = Новый Массив;
	
	Для Каждого СтрокаМаркируемойПродукции Из ПодобраннаяМаркируемаяПродукция Цикл
		
		НоменклатураСопоставлена   = ЗначениеЗаполнено(СтрокаМаркируемойПродукции.Номенклатура);
		НоменклатураСтрокСовпадает = НоменклатурыСтрокСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции);
		
		Если НоменклатураСопоставлена И Не НоменклатураСтрокСовпадает Тогда
			Продолжить;
		КонецЕсли;
		
		GTINСовпадают                  = GTINРавны(СтрокаПодобраннойПродукции.GTIN, СтрокаМаркируемойПродукции.GTIN);
		СвойстваВидаПродукцииСовпадают = СвойстваВидаПродукцииСовпадают(СтрокаПодобраннойПродукции, СтрокаМаркируемойПродукции, СвойстваВидаПродукции);
		
		Если СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция")
			И ЗначениеЗаполнено(СтрокаМаркируемойПродукции.ИдентификаторПроисхожденияВЕТИС)
			И СвойстваВидаПродукцииСовпадают Тогда
			Продолжить;
		КонецЕсли;
		
		Если НоменклатураСтрокСовпадает И GTINСовпадают И СвойстваВидаПродукцииСовпадают Тогда
			СтрокаАгрегаторПолноеСовпадение = СтрокаМаркируемойПродукции;
		ИначеЕсли Не НоменклатураСопоставлена И GTINСовпадают И СвойстваВидаПродукцииСовпадают Тогда
			СтрокаАгрегаторЧастичноеСовпадение = СтрокаМаркируемойПродукции;
		ИначеЕсли НоменклатураСтрокСовпадает Тогда
			СтрокиДляАнализаИРаспределения.Добавить(СтрокаМаркируемойПродукции);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокиДляАнализаИРаспределения.Количество() = 0 Тогда
		
		Если СтрокаАгрегаторЧастичноеСовпадение = Неопределено Тогда
			Возврат СтрокаАгрегаторПолноеСовпадение;
		КонецЕсли;
		Возврат СтрокаАгрегаторЧастичноеСовпадение;
		
	КонецЕсли;
	
	Для Каждого СтрокаМаркируемойПродукции Из СтрокиДляАнализаИРаспределения Цикл
		
		Если ЭтоСтрокаАгрегаторСКодамиGTIN(СтрокаМаркируемойПродукции, Ложь) Тогда
			Возврат СтрокаМаркируемойПродукции;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПредставлениеМассиваGTIN(КодыGTIN) Экспорт
	
	Если КодыGTIN.Количество() = 1 Тогда
		Возврат КодыGTIN[0].Значение;
	ИначеЕсли КодыGTIN.Количество() > 1 Тогда
		Возврат СтрШаблон(НСтр("ru = '%1 ( + еще %2)'"),
			КодыGTIN[0].Значение, КодыGTIN.Количество() - 1);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ЭтоСтрокаАгрегаторСКодамиGTIN(СтрокаМаркируемойПродукции, GTINМожетБытьЗаполненЕслиДляНоменклатурыПредусмотреноНесколькоGTIN = Истина)
	
	GTIN     = СтрокаМаркируемойПродукции.GTIN;
	КодыGTIN = СтрокаМаркируемойПродукции.КодыGTIN;
	
	Если КодыGTIN.Количество() = 0 Тогда
		Возврат Не ЗначениеЗаполнено(GTIN);
	КонецЕсли;
	
	ПредставлениеGTIN = СтрокаМаркируемойПродукции.ПредставлениеGTIN;
	Если ПредставлениеGTIN <> ПредставлениеМассиваGTIN(КодыGTIN) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КодыGTIN.Количество() > 1 Тогда
		
		Если Не ЗначениеЗаполнено(GTIN) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если GTINМожетБытьЗаполненЕслиДляНоменклатурыПредусмотреноНесколькоGTIN Тогда
			
			Для Каждого Строка Из КодыGTIN Цикл
				Если GTINРавны(GTIN, Строка.Значение) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(GTIN) И GTINРавны(GTIN, КодыGTIN[0].Значение);
	
КонецФункции

Функция СвойстваВидаПродукцииСовпадают(ИсходнаяСтрока, СтрокаИзменений, СвойстваВидаПродукции)
	
	Если Не СвойстваВидаПродукции.ПроверятьСвойстваВидаПродукции Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		
		Возврат ИсходнаяСтрока.МРЦ = СтрокаИзменений.МРЦ;
		
	ИначеЕсли СвойстваВидаПродукции.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция") Тогда
		
		Если ИсходнаяСтрока.ГоденДо <> СтрокаИзменений.ГоденДо Тогда
			Возврат Ложь;
		ИначеЕсли ИсходнаяСтрока.Скоропортящаяся <> СтрокаИзменений.Скоропортящаяся Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если СвойстваВидаПродукции.ПрисутствуютВДанныхДокумента Тогда
			Если ИсходнаяСтрока.ИдентификаторПроисхожденияВЕТИС <> СтрокаИзменений.ИдентификаторПроисхожденияВЕТИС Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СвойстваВидаПродукцииПоДаннымФормы(Форма)
	
	ВидПродукции = Форма.ВидМаркируемойПродукции;
	
	ПроверятьСвойстваВидаПродукции = Ложь;
	ПрисутствуютВДанныхДокумента   = Ложь;
	
	СвойстваВидаПродукции = Новый Структура;
	
	Если ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак") Тогда
		
		ПроверятьСвойстваВидаПродукции = Истина;
		
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукция") Тогда
		
		ПроверятьСвойстваВидаПродукции = Истина;
		ПрисутствуютВДанныхДокумента   = ТипЗнч(Форма.ПроверяемыйДокумент) = Тип("ДокументСсылка.МаркировкаТоваровИСМП");
		
	КонецЕсли;
	
	СвойстваВидаПродукции.Вставить("ВидПродукции",                   ВидПродукции);
	СвойстваВидаПродукции.Вставить("ПроверятьСвойстваВидаПродукции", ПроверятьСвойстваВидаПродукции);
	СвойстваВидаПродукции.Вставить("ПрисутствуютВДанныхДокумента",   ПрисутствуютВДанныхДокумента);
	
	Возврат СвойстваВидаПродукции;
	
КонецФункции

Процедура ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста)
	МодульКонтекста.ОбработатьИзменениеНоменклатурыВСтроке(Форма, СтрокаАгрегатор);
КонецПроцедуры

Процедура ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор, МодульКонтекста)
	МодульКонтекста.ОбработатьИзменениеКоличестваВСтроке(Форма, СтрокаАгрегатор);
КонецПроцедуры

#КонецОбласти

