
#Область ПрограммныйИнтерфейс

// Возможна ситуация, когда в ТЧ Запасы один и тот же серийный номер встречается несколько раз.
// Например, при заполнении Отчета о розничных продажах:
//    продажа, возврат, а потом повторная продажа того же серийного номера.
//    продажа и возврат и эта информация занесена разными строками.
//
// В дельнейшем данные структуры используются в ОбработкаПроверкиЗаполнения и ОбработкаПроведения.
Функция СвернутьСерийныеНомераДляПроверки(Знач пЗапасы, Знач пСерийныеНомера) Экспорт
	
	СтруктураДляВозврата = Новый Структура("СерийныеНомера, Запасы", Неопределено, Неопределено);
	
	// Свернем по служебной колонке
	// и удалим строки с нулевым значением в служебной колонке
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("пЗапасы", пЗапасы);
	Запрос.УстановитьПараметр("пСерийныеНомера", пСерийныеНомера);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахЗапасы.НомерСтроки КАК НомерСтроки,
		|	ОтчетОРозничныхПродажахЗапасы.Номенклатура КАК Номенклатура,
		|	ОтчетОРозничныхПродажахЗапасы.Характеристика КАК Характеристика,
		|	ОтчетОРозничныхПродажахЗапасы.Партия КАК Партия,
		|	ОтчетОРозничныхПродажахЗапасы.Количество КАК Количество,
		|	ОтчетОРозничныхПродажахЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ОтчетОРозничныхПродажахЗапасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ОтчетОРозничныхПродажахЗапасы.Ячейка КАК Ячейка,
		|	ОтчетОРозничныхПродажахЗапасы.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_Запасы
		|ИЗ
		|	&пЗапасы КАК ОтчетОРозничныхПродажахЗапасы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
		|	ОтчетОРозничныхПродажахСерийныеНомера.КлючСвязи КАК КлючСвязи
		|ПОМЕСТИТЬ ВТ_СерийныеНомера
		|ИЗ
		|	&пСерийныеНомера КАК ОтчетОРозничныхПродажахСерийныеНомера
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Запасы.Номенклатура КАК Номенклатура,
		|	ВТ_Запасы.Характеристика КАК Характеристика,
		|	ВТ_Запасы.Партия КАК Партия,
		|	ВТ_Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВТ_Запасы.Ячейка КАК Ячейка,
		|	ВТ_СерийныеНомера.СерийныйНомер КАК СерийныйНомер,
		|	СУММА(ВЫБОР
		|			КОГДА ВТ_Запасы.Количество > 0
		|				ТОГДА 1
		|			КОГДА ВТ_Запасы.Количество = 0
		|				ТОГДА 0
		|			ИНАЧЕ -1
		|		КОНЕЦ) КАК КоличествоСерийныхНомеров,
		|	ВЫБОР
		|		КОГДА ВТ_Запасы.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВозврат
		|ПОМЕСТИТЬ ВТ_ЗапасыИСерийныеНомера
		|ИЗ
		|	ВТ_СерийныеНомера КАК ВТ_СерийныеНомера
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запасы КАК ВТ_Запасы
		|		ПО (ВТ_Запасы.КлючСвязи = ВТ_СерийныеНомера.КлючСвязи)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Запасы.Номенклатура,
		|	ВТ_Запасы.Характеристика,
		|	ВТ_Запасы.Партия,
		|	ВТ_СерийныеНомера.СерийныйНомер,
		|	ВТ_Запасы.ЕдиницаИзмерения,
		|	ВТ_Запасы.СтруктурнаяЕдиница,
		|	ВТ_Запасы.Ячейка,
		|	ВЫБОР
		|		КОГДА ВТ_Запасы.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВТ_Запасы.НомерСтроки) КАК НомерСтроки,
		|	ВТ_Запасы.Номенклатура КАК Номенклатура,
		|	ВТ_Запасы.Характеристика КАК Характеристика,
		|	ВТ_Запасы.Партия КАК Партия,
		|	ВТ_Запасы.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВТ_Запасы.Ячейка КАК Ячейка,
		|	ВЫРАЗИТЬ(ВТ_Запасы.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СУММА(ВТ_Запасы.Количество * ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ВТ_Запасы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
		|				ТОГДА ВЫРАЗИТЬ(ВТ_Запасы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения).Коэффициент
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Количество,
		|	ВЫБОР
		|		КОГДА ВТ_Запасы.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоВозврат,
		|	0 КАК КлючСвязи
		|ИЗ
		|	ВТ_Запасы КАК ВТ_Запасы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Запасы.Партия,
		|	ВТ_Запасы.Характеристика,
		|	ВТ_Запасы.Номенклатура,
		|	ВЫРАЗИТЬ(ВТ_Запасы.Номенклатура КАК Справочник.Номенклатура).ЕдиницаИзмерения,
		|	ВТ_Запасы.СтруктурнаяЕдиница,
		|	ВТ_Запасы.Ячейка,
		|	ВЫБОР
		|		КОГДА ВТ_Запасы.Количество < 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗапасыИСерийныеНомера.Номенклатура КАК Номенклатура,
		|	ВТ_ЗапасыИСерийныеНомера.Характеристика КАК Характеристика,
		|	ВТ_ЗапасыИСерийныеНомера.Партия КАК Партия,
		|	ВТ_ЗапасыИСерийныеНомера.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
		|	ВТ_ЗапасыИСерийныеНомера.Ячейка КАК Ячейка,
		|	ВТ_ЗапасыИСерийныеНомера.СерийныйНомер КАК СерийныйНомер,
		|	ВТ_ЗапасыИСерийныеНомера.КоличествоСерийныхНомеров КАК КоличествоСерийныхНомеров,
		|	0 КАК КлючСвязи,
		|	ВТ_ЗапасыИСерийныеНомера.ЭтоВозврат КАК ЭтоВозврат
		|ИЗ
		|	ВТ_ЗапасыИСерийныеНомера КАК ВТ_ЗапасыИСерийныеНомера";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	Запасы = МассивРезультатов[3].Выгрузить();
	времСерийныеНомера = МассивРезультатов[4].Выгрузить();
	СерийныеНомера = времСерийныеНомера.СкопироватьКолонки("СерийныйНомер, КлючСвязи");
	
	// Заполним ключи связи и серийные номера для ключа связи
	КлючСвязи = 1; // Начинаем с 1, чтобы потом найти необработанные строки с ключом связи = 0!
	Для Каждого ТекущаяСтрока Из Запасы Цикл
		ТекущаяСтрока.КлючСвязи = КлючСвязи;
		
		// Найдем все серийные номреа и добавим строки в количестве = значению в служебной колонке "КоличествоСерийныхНомеров"
		ОтборСтруктура = Новый Структура();
		ОтборСтруктура.Вставить("Номенклатура", ТекущаяСтрока.Номенклатура);
		ОтборСтруктура.Вставить("Характеристика", ТекущаяСтрока.Характеристика);
		ОтборСтруктура.Вставить("Партия", ТекущаяСтрока.Партия);
		ОтборСтруктура.Вставить("СтруктурнаяЕдиница", ТекущаяСтрока.СтруктурнаяЕдиница);
		ОтборСтруктура.Вставить("Ячейка", ТекущаяСтрока.Ячейка);
		ОтборСтруктура.Вставить("ЭтоВозврат", ТекущаяСтрока.ЭтоВозврат);
		
		СтрокиМассив = времСерийныеНомера.НайтиСтроки(ОтборСтруктура);
		Если СтрокиМассив.Количество() > 0 Тогда
			Для Каждого СтрокаМассиваСтрок Из СтрокиМассив Цикл
				КоличествоСтрок = СтрокаМассиваСтрок.КоличествоСерийныхНомеров;
				Если КоличествоСтрок < 0 Тогда
					КоличествоСтрок = -КоличествоСтрок;
				КонецЕсли;
				
				Пока КоличествоСтрок > 0 Цикл
					КоличествоСтрок = КоличествоСтрок - 1;
					
					НоваяСтрокаСерийныхНомеров = СерийныеНомера.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаСерийныхНомеров, СтрокаМассиваСтрок);
					НоваяСтрокаСерийныхНомеров.КлючСвязи = КлючСвязи;
					СтрокаМассиваСтрок.КлючСвязи = КлючСвязи; // Чтобы потом найти строки, у которых КлючСвязи = 0.
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		КлючСвязи = КлючСвязи + 1;
	КонецЦикла;
	
	// Если в серийных номерах остались строки, где КлючСвязи = -1, значит ошибка в данных.
	// Такие строки тоже добавим в ТЧ СерийныеНомера с ключом = 0;
	Для Каждого ТекущаяСтрокаСерийногоНомера Из времСерийныеНомера Цикл
		Если ТекущаяСтрокаСерийногоНомера.КлючСвязи = 0 Тогда // Ошибка в данных - есть серийные номера, которые не связаны с ТЧ Запасы
			НоваяСтрокаСерийныхНомеров = СерийныеНомера.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСерийныхНомеров, ТекущаяСтрокаСерийногоНомера);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим структуру для возврата
	СтруктураДляВозврата = Новый Структура();
	СтруктураДляВозврата.Вставить("СерийныеНомера", СерийныеНомера);
	СтруктураДляВозврата.Вставить("Запасы", Запасы);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции

Процедура ЗаполнитьТЧСерийныеНомераВШапке(ДокументОбъект, ДанныеЗаполнения,
		СтрокаТЧ, ИмяТЧСерийныеНомера = "СерийныеНомера") Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		Возврат;
	КонецЕсли;

	ДокументОбъект.СерийныеНомераПредставление = СтрокаТЧ.СерийныеНомера;
	СерийныеНомераСтроки_0 = ДанныеЗаполнения[ИмяТЧСерийныеНомера].НайтиСтроки(
		Новый Структура("КлючСвязи", СтрокаТЧ.КлючСвязи));
	ДокументОбъект[ИмяТЧСерийныеНомера].Загрузить(
		ДанныеЗаполнения[ИмяТЧСерийныеНомера].Выгрузить(СерийныеНомераСтроки_0));

КонецПроцедуры

Процедура ЗаполнитьТЧСерийныеНомераПоКлючуСвязи(ДокументОбъект,
		ДанныеЗаполнения, ИмяТЧЗапасы = "Запасы",
		ИмяТЧСерийныеНомераИсточник = "СерийныеНомера",
		ИмяТЧСерийныеНомераПриемник = "СерийныеНомера") Экспорт
		
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСерийныеНомера = СтрШаблон("Документ.%1.%2", ДанныеЗаполнения.Метаданные().Имя, ИмяТЧСерийныеНомераИсточник);
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументСерийныеНомера.СерийныйНомер,
		|	ДокументСерийныеНомера.КлючСвязи
		|ИЗ
		|	&ТаблицаСерийныеНомера КАК ДокументСерийныеНомера
		|ГДЕ
		|	ДокументСерийныеНомера.Ссылка = &ДокСсылка
		|	И ДокументСерийныеНомера.КлючСвязи В (&КлючиСвязи)", "&ТаблицаСерийныеНомера", ТаблицаСерийныеНомера);
		
	Запрос.УстановитьПараметр("ДокСсылка", ДанныеЗаполнения.Ссылка);
	Запрос.УстановитьПараметр("КлючиСвязи", ДанныеЗаполнения[ИмяТЧЗапасы].ВыгрузитьКолонку("КлючСвязи"));
	
	ДокументОбъект[ИмяТЧСерийныеНомераПриемник].Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗаполнитьТЧСерийныеНомераПоОстаткамКПоступлению(ДокументОбъект,
		ДанныеЗаполнения, ИмяТЧЗапасы = "Запасы",
		ИмяТЧСерийныеНомераИсточник = "СерийныеНомера",
		ИмяТЧСерийныеНомераПриемник = "СерийныеНомера") Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		Возврат;
	КонецЕсли;

	ТаблицаЗапасы = СтрШаблон("Документ.%1.%2", ДанныеЗаполнения.Метаданные().Имя, ИмяТЧЗапасы);
	ТаблицаСерийныеНомера = СтрШаблон("Документ.%1.%2", ДанныеЗаполнения.Метаданные().Имя, ИмяТЧСерийныеНомераИсточник);

	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументСерийныеНомера.СерийныйНомер,
	|	ДокументСерийныеНомера.КлючСвязи
	|ПОМЕСТИТЬ ВТ_СерийныеНомера
	|ИЗ
	|	&ТаблицаСерийныеНомера КАК ДокументСерийныеНомера
	|ГДЕ
	|	ДокументСерийныеНомера.Ссылка = &ДокСсылка
	|	И ДокументСерийныеНомера.КлючСвязи В (&КлючиСвязи)
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомераКПоступлениюОстатки.Организация,
	|	СерийныеНомераКПоступлениюОстатки.Номенклатура,
	|	СерийныеНомераКПоступлениюОстатки.Характеристика,
	|	СерийныеНомераКПоступлениюОстатки.Партия,
	|	СерийныеНомераКПоступлениюОстатки.СерийныйНомер,
	|	СерийныеНомераКПоступлениюОстатки.СтруктурнаяЕдиница,
	|	СерийныеНомераКПоступлениюОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.СерийныеНомераКПоступлению.Остатки КАК СерийныеНомераКПоступлениюОстатки",
		"&ТаблицаСерийныеНомера", ТаблицаСерийныеНомера);
	Запрос.УстановитьПараметр("ДокСсылка", ДанныеЗаполнения.Ссылка);
	Запрос.УстановитьПараметр("КлючиСвязи", ДанныеЗаполнения[ИмяТЧЗапасы].ВыгрузитьКолонку("КлючСвязи"));
	СерийныеНомераКПоступлениюОстатки = Запрос.Выполнить().Выгрузить();
	ДокументОбъект[ИмяТЧСерийныеНомераПриемник].Загрузить(СерийныеНомераКПоступлениюОстатки);

КонецПроцедуры

Процедура ЗаполнитьТЧСерийныеНомераПоКлючуСвязиУстановитьНовыйКлючСвязи(ТЗСоответствиеКлючейСвязи,
		ДокументОбъект, ДанныеЗаполнения, ИмяТЧЗапасы = "Запасы",
		ИмяТЧСерийныеНомераИсточник = "СерийныеНомера",
		ИмяТЧСерийныеНомераПриемник = "СерийныеНомера", ЭтоСписание) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСерийныеНомера = СтрШаблон("Документ.%1.%2", ДанныеЗаполнения.Метаданные().Имя, ИмяТЧСерийныеНомераИсточник);

	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить("ВЫБРАТЬ
	|	ТЗСоответствиеКлючейСвязи.КлючСвязиНовый,
	|	ТЗСоответствиеКлючейСвязи.КлючСвязи
	|ПОМЕСТИТЬ ВременнаяТаблица_КлючиСвязи
	|ИЗ
	|	&ТЗСоответствиеКлючейСвязи КАК ТЗСоответствиеКлючейСвязи
	|ГДЕ
	|	ЭтоСписание = &ЭтоСписание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументСерийныеНомера.СерийныйНомер,
	|	ВременнаяТаблица_КлючиСвязи.КлючСвязиНовый КАК КлючСвязи
	|ИЗ
	|	&ТаблицаСерийныеНомера КАК ДокументСерийныеНомера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблица_КлючиСвязи КАК ВременнаяТаблица_КлючиСвязи
	|		ПО ДокументСерийныеНомера.КлючСвязи = ВременнаяТаблица_КлючиСвязи.КлючСвязи
	|ГДЕ
	|	ДокументСерийныеНомера.Ссылка = &ДокСсылка
	|	И ДокументСерийныеНомера.КлючСвязи В (&КлючиСвязи)", "&ТаблицаСерийныеНомера", ТаблицаСерийныеНомера);

	Запрос.УстановитьПараметр("ДокСсылка", ДанныеЗаполнения.Ссылка);
	Запрос.УстановитьПараметр("КлючиСвязи", ДанныеЗаполнения[ИмяТЧЗапасы].ВыгрузитьКолонку("КлючСвязи"));
	Запрос.УстановитьПараметр("ТЗСоответствиеКлючейСвязи", ТЗСоответствиеКлючейСвязи);
	Запрос.УстановитьПараметр("ЭтоСписание", ЭтоСписание);

	РезультатТЗ = Запрос.Выполнить().Выгрузить();
	Для Каждого ТекущаяСтрока Из РезультатТЗ Цикл
		НоваяСтрока = ДокументОбъект[ИмяТЧСерийныеНомераПриемник].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока);
	КонецЦикла;

КонецПроцедуры

Функция ПредставлениеСерийныхНомеров(ТаблицаСерийныеНомера, КлючСвязи) Экспорт
	
	НайденныеСерийныеНомера = Новый Массив; 
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлючСвязи", КлючСвязи);
	
	Для Каждого ТекСтрока Из ТаблицаСерийныеНомера.НайтиСтроки(Отбор) Цикл
		НайденныеСерийныеНомера.Добавить(ТекСтрока.СерийныйНомер);
	КонецЦикла;
	
	Возврат СтрСоединить(НайденныеСерийныеНомера, "; ");

КонецФункции

Функция СтрокаСерийныеНомераИзВыборки(ВыборкаСтрокСерийныеНомера, КлючСвязи) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗнч(ВыборкаСтрокСерийныеНомера) = Тип("ТаблицаЗначений") Тогда
		
		ПечатьДокументовУНФ.ПредставлениеСерийногоНомераПоКлючу(ВыборкаСтрокСерийныеНомера, КлючСвязи);
		
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("КлючСвязи", КлючСвязи);
	СтрокаСерийныхНомеров = "";
	Пока ВыборкаСтрокСерийныеНомера.НайтиСледующий(СтруктураПоиска) Цикл
		СтрокаСерийныхНомеров = СтрокаСерийныхНомеров + ВыборкаСтрокСерийныеНомера.СерийныйНомер + ", ";
	КонецЦикла;
	
	Если СтрДлина(СтрокаСерийныхНомеров) <> 0 Тогда
		СтрокаСерийныхНомеров = Лев(СтрокаСерийныхНомеров, СтрДлина(СтрокаСерийныхНомеров) - 2);
	КонецЕсли;
	
	ВыборкаСтрокСерийныеНомера.Сбросить();
	
	Возврат СтрокаСерийныхНомеров;
	
КонецФункции

Функция СтрокаСерийныеНомера(ТЧСерийныеНомера, КлючСвязи) Экспорт
	
	СтруктураПоиска = Новый Структура("КлючСвязи", КлючСвязи);
	СтрокаСерийныхНомеров = "";
	МассивСтрок = ТЧСерийныеНомера.НайтиСтроки(СтруктураПоиска);
	Для каждого стр Из МассивСтрок Цикл
		СтрокаСерийныхНомеров = СтрокаСерийныхНомеров + стр.СерийныйНомер + ", ";
	КонецЦикла;
	
	Если СтрДлина(СтрокаСерийныхНомеров) <> 0 Тогда
		СтрокаСерийныхНомеров = Лев(СтрокаСерийныхНомеров, СтрДлина(СтрокаСерийныхНомеров) - 2);
	КонецЕсли;
	
	Возврат СтрокаСерийныхНомеров;
	
КонецФункции

Процедура ЗаполнитьСерийныеНомераВНаличии(ДокОбъект, ИмяТЧЗапасы="Запасы", ИмяТЧСерийныеНомера="СерийныеНомера") Экспорт
	
	РаботаСФормойДокумента.ЗаполнитьКлючиСвязи(ДокОбъект, ИмяТЧЗапасы);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЗапасы.НомерСтроки,
	|	ТаблицаЗапасы.Номенклатура,
	|	ТаблицаЗапасы.Характеристика,
	|	ТаблицаЗапасы.Партия,
	|	ТаблицаЗапасы.Количество,
	|	ТаблицаЗапасы.КлючСвязи
	|ПОМЕСТИТЬ ВТЗапасы
	|ИЗ
	|	&ТаблицаЗапасы КАК ТаблицаЗапасы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.СерийныйНомер КАК СерийныйНомер,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	ВложенныйЗапрос.КлючСвязи,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Количество КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		СерийныеНомераОстатки.СерийныйНомер КАК СерийныйНомер,
	|		РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
	|		РасходнаяНакладнаяЗапасы.КлючСвязи КАК КлючСвязи,
	|		РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
	|		РасходнаяНакладнаяЗапасы.Количество КАК Количество
	|	ИЗ
	|		ВТЗапасы КАК РасходнаяНакладнаяЗапасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СерийныеНомера.Остатки(
	|					,
	|					(&ВсеСклады
	|						ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|						И (&ВсеЯчейки
	|							ИЛИ Ячейка = &Ячейка)) КАК СерийныеНомераОстатки
	|			ПО РасходнаяНакладнаяЗапасы.Номенклатура = СерийныеНомераОстатки.Номенклатура
	|				И РасходнаяНакладнаяЗапасы.Характеристика = СерийныеНомераОстатки.Характеристика
	|				И РасходнаяНакладнаяЗапасы.Партия = СерийныеНомераОстатки.Партия,
	|		Константа.КонтрольОстатковСерийныхНомеров КАК КонтрольОстатковСерийныхНомеров
	|	ГДЕ
	|		КонтрольОстатковСерийныхНомеров.Значение = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		спрСерийныеНомера.Ссылка,
	|		РасходнаяНакладнаяЗапасы.НомерСтроки,
	|		РасходнаяНакладнаяЗапасы.КлючСвязи,
	|		РасходнаяНакладнаяЗапасы.Номенклатура,
	|		РасходнаяНакладнаяЗапасы.Количество
	|	ИЗ
	|		Константа.КонтрольОстатковСерийныхНомеров КАК КонтрольОстатковСерийныхНомеров,
	|		ВТЗапасы КАК РасходнаяНакладнаяЗапасы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК спрСерийныеНомера
	|			ПО РасходнаяНакладнаяЗапасы.Номенклатура = спрСерийныеНомера.Владелец
	|	ГДЕ
	|		НЕ спрСерийныеНомера.Продан
	|		И КонтрольОстатковСерийныхНомеров.Значение = ЛОЖЬ) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	СерийныйНомер
	|ИТОГИ
	|	МИНИМУМ(Количество)
	|ПО
	|	НомерСтроки
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ТаблицаЗапасы",ДокОбъект[ИмяТЧЗапасы].Выгрузить());
	
	Если НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", ДокОбъект) Тогда
		ИмяРеквизитаСтруктурнаяЕдиница = "СтруктурнаяЕдиница";
	ИначеЕсли НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("СтруктурнаяЕдиницаРезерв", ДокОбъект) Тогда
		ИмяРеквизитаСтруктурнаяЕдиница = "СтруктурнаяЕдиницаРезерв";
	Иначе
		ИмяРеквизитаСтруктурнаяЕдиница = "";
	КонецЕсли;
	
	Если ИмяРеквизитаСтруктурнаяЕдиница = "" ИЛИ НЕ ЗначениеЗаполнено(ДокОбъект[ИмяРеквизитаСтруктурнаяЕдиница]) Тогда
		Запрос.УстановитьПараметр("ВсеСклады", Истина);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ВсеСклады", Ложь);
		Запрос.УстановитьПараметр("СтруктурнаяЕдиница", ДокОбъект[ИмяРеквизитаСтруктурнаяЕдиница]);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокОбъект.Ячейка) Тогда
		Запрос.УстановитьПараметр("ВсеЯчейки", Истина);
		Запрос.УстановитьПараметр("Ячейка",ДокОбъект.Ячейка);
	Иначе
		Запрос.УстановитьПараметр("ВсеЯчейки", Ложь);
		Запрос.УстановитьПараметр("Ячейка",ДокОбъект.Ячейка);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаНомерСтроки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДокОбъект[ИмяТЧСерийныеНомера].Очистить();
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		
		КоличествоЗаполнить = ВыборкаНомерСтроки.Количество;
		КоличествоСН = 0;
		
		ВыборкаСерийныеНомера = ВыборкаНомерСтроки.Выбрать();
		Пока ВыборкаСерийныеНомера.Следующий() Цикл
			
			Если КоличествоСН>=КоличествоЗаполнить Тогда
				Прервать;
			КонецЕсли;
			
			НовСтр = ДокОбъект[ИмяТЧСерийныеНомера].Добавить();
			НовСтр.СерийныйНомер = ВыборкаСерийныеНомера.СерийныйНомер;
			НовСтр.КлючСвязи = ВыборкаСерийныеНомера.КлючСвязи;
			
			КоличествоСН = КоличествоСН + 1;
			
		КонецЦикла;
		
		ДокОбъект[ИмяТЧЗапасы][ВыборкаНомерСтроки.НомерСтроки-1].СерийныеНомера = СтрокаСерийныеНомера(ДокОбъект[ИмяТЧСерийныеНомера], НовСтр.КлючСвязи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаЗаполненияСерийныхНомеров(Отказ, Знач Запасы, Знач СерийныеНомера, СтруктурнаяЕдиница, Знач вхФорма, ИмяПоляКлючСвязи="КлючСвязи", ИмяПоляНоменклатура = "Номенклатура", ИмяПоляСтруктурнаяЕдиница = "СтруктурнаяЕдиница") Экспорт
	
	ИспользованиеСерийныхНомеров = ИспользоватьСерийныеНомераОстатки();
	
	Если ИспользованиеСерийныхНомеров = Истина Тогда
		
		// Если склад ордерный, движения по нему по СН делают только ПриходныйОрдер или РасходныйОрдер, для остальных
		// документов проверять заполнение СН не нужно Если склад НЕ ордерный, движения по нему по СН делают ВСЕ остальные
		// документы, нужно проверить заполнение СН. В ПриходныйОрдер или РасходныйОрдер нет складов в табличной части
		РеквизитыНоменклатурыСоответствие = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Запасы.ВыгрузитьКолонку(ИмяПоляНоменклатура), "ИспользоватьСерийныеНомера, ВидМаркировки");
		
		РеквизитыСкладовСоответствие = Неопределено;
		ОрдерныйСклад = Неопределено;
		ЕстьСкладыВТабличнойЧасти = Неопределено;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьОрдерныйСклад") Тогда
			ЕстьСкладыВТабличнойЧасти = НоменклатураВДокументахКлиентСервер.ЕстьРеквизитОбъекта("ПоложениеСклада", вхФорма);
			Если ЕстьСкладыВТабличнойЧасти И вхФорма.ПоложениеСклада = Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти Тогда
				РеквизитыСкладовСоответствие = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Запасы.ВыгрузитьКолонку(ИмяПоляСтруктурнаяЕдиница), "ОрдерныйСклад");
			Иначе
				ОрдерныйСклад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктурнаяЕдиница, "ОрдерныйСклад");
			КонецЕсли;
		Иначе
			ОрдерныйСклад = Ложь;
		КонецЕсли;
		
		Для каждого СтрокаЗапасы Из Запасы Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаЗапасы[ИмяПоляНоменклатура]) Тогда
				Продолжить;
			КонецЕсли;
			
			ИспользоватьСерийныеНомера = РеквизитыНоменклатурыСоответствие.Получить(СтрокаЗапасы[ИмяПоляНоменклатура]).ИспользоватьСерийныеНомера;
			Если НЕ ИспользоватьСерийныеНомера=Истина Тогда
				Продолжить;
			КонецЕсли;
			ВидМаркировки = РеквизитыНоменклатурыСоответствие.Получить(СтрокаЗапасы[ИмяПоляНоменклатура]).ВидМаркировки;
			
			Если РеквизитыСкладовСоответствие <> Неопределено Тогда
				ОрдерныйСклад = РеквизитыСкладовСоответствие.Получить(СтрокаЗапасы[ИмяПоляСтруктурнаяЕдиница]);
			КонецЕсли;
			
			// Не проверяем серийные номера на ордерном складе для маркируемой продукции
			Если ОрдерныйСклад = Истина 
				И (ВидМаркировки = Перечисления.ВидыМаркировки.МаркируемаяПродукция ИЛИ ЕстьСкладыВТабличнойЧасти = Истина)Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИспользоватьСерийныеНомера Тогда
				ОтборСерийныеНомера = Новый Структура("КлючСвязи", СтрокаЗапасы[ИмяПоляКлючСвязи]);
				ОтборСерийныеНомера = СерийныеНомера.НайтиСтроки(ОтборСерийныеНомера);
				
				Если ТипЗнч(СтрокаЗапасы.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				    Коэффициент = КоэффициентЕдиницы(СтрокаЗапасы.ЕдиницаИзмерения);
				Иначе
					Коэффициент = 1;
				КонецЕсли;
				
				СтрокаЗапасыКоличество = СтрокаЗапасы.Количество * Коэффициент;
				
				Если ОтборСерийныеНомера.Количество() <> Макс(СтрокаЗапасыКоличество, -СтрокаЗапасыКоличество) Тогда
					ИмяТЧ = Сред(Строка(Запасы), СтрНайти(Строка(Запасы), ".", НаправлениеПоиска.СКонца)+1);
					ТекстСообщения = НСтр("ru = 'Число серийных номеров табличной части %ИмяТЧ% отличается от количества единиц в строке %Номер%.'");
					ТекстСообщения = ТекстСообщения + НСтр("ru = ' Серийных номеров - %ЧислоНомеров%, нужно %КоличествоВСтроке%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номер%", СтрокаЗапасы.НомерСтроки);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяТЧ%", ИмяТЧ);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЧислоНомеров%", ОтборСерийныеНомера.Количество());
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВСтроке%", СтрокаЗапасыКоличество);
					
					Сообщение = Новый СообщениеПользователю();
					Сообщение.Текст = ТекстСообщения;
					Сообщение.Сообщить();
					
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	
	КонецЕсли; 
	
	Если ИспользованиеСерийныхНомеров <> Неопределено Тогда
	
		ВыполнитьКонтрольДублей(Отказ, Запасы, СерийныеНомера, вхФорма, ИмяПоляКлючСвязи);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыполнитьКонтрольДублей(Отказ, Знач Запасы, Знач СерийныеНомера, Знач вхФорма, ИмяПоляКлючСвязи)
	
	// Проверка Дубли строк.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.КлючСвязи КАК КлючСвязи,
	|	ТаблицаДокумента.СерийныйНомер
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ТаблицаДокумента1.КлючСвязи) КАК КлючСвязи,
	|	ТаблицаДокумента1.СерийныйНомер
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДокумента2
	|		ПО ТаблицаДокумента1.КлючСвязи <> ТаблицаДокумента2.КлючСвязи
	|			И ТаблицаДокумента1.СерийныйНомер = ТаблицаДокумента2.СерийныйНомер
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента1.СерийныйНомер
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючСвязи";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", СерийныеНомера);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
			ТекстСообщения = НСтр(
				"ru = 'Серийный номер ""%СерийныйНомер%"", указанный в строке %НомерСтроки%, указан повторно.'"
			);
			
			НомерСтрокиЗапасов = Запасы.Найти(ВыборкаИзРезультатаЗапроса.КлючСвязи, ИмяПоляКлючСвязи);
			Если НомерСтрокиЗапасов<>Неопределено Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", НомерСтрокиЗапасов.НомерСтроки);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СерийныйНомер%", ВыборкаИзРезультатаЗапроса.СерийныйНомер);
				УправлениеНебольшойФирмойСервер.СообщитьОбОшибке(
					вхФорма,
					ТекстСообщения,
					,
					,
					"СерийныеНомера",
					Отказ
				);
			КонецЕсли;
			

		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПроверкаЗаполненияСерийныхНомеровВПолеВвода(Отказ, Знач Объект) Экспорт
	
	// Серийные номера
	Если ИспользоватьСерийныеНомераОстатки() = Истина Тогда
		
		Если Объект.Номенклатура.ИспользоватьСерийныеНомера Тогда
			
			Если ТипЗнч(Объект.ЕдиницаИзмерения)=Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				Коэффициент = КоэффициентЕдиницы(Объект.ЕдиницаИзмерения);
			Иначе
				Коэффициент = 1;
			КонецЕсли;
			
			ОбъектКоличество = Объект.Количество * Коэффициент;
			
			Если Объект.СерийныеНомера.Количество() <> ОбъектКоличество Тогда
				ТекстСообщения = НСтр("ru = 'Число серийных номеров отличается от количества в документе.'");
				ТекстСообщения = ТекстСообщения + НСтр("ru = ' Серийных номеров - %ЧислоНомеров%, нужно %КоличествоВСтроке%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЧислоНомеров%", Объект.СерийныеНомера.Количество());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВСтроке%", ОбъектКоличество);
				
				Сообщение = Новый СообщениеПользователю();
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
				
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ИспользоватьСерийныеНомераОстатки() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		Если ПолучитьФункциональнуюОпцию("КонтрольОстатковСерийныхНомеров") Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьСерийныйНомер(Номенклатура, ШаблонСерийногоНомера) Экспорт

	МаксимальныйНомерИзСправочника = Справочники.СерийныеНомера.ВычислитьМаксимальныйНомерСерии(Номенклатура, ШаблонСерийногоНомера);
	Возврат ДобавитьСерийныйНомерПоШаблону(МаксимальныйНомерИзСправочника+1, ШаблонСерийногоНомера);
	
КонецФункции

Функция ДобавитьСерийныйНомерПоШаблону(ТекущийМаксимальныйНомер, ШаблонСерийногоНомера)
		
	НомерЧисло = ТекущийМаксимальныйНомер;
	
	Если ЗначениеЗаполнено(ШаблонСерийногоНомера) Тогда
		// Длина цифровой части номера - не более 13 символов
		ЦифрВШаблоне = СтрЧислоВхождений(ШаблонСерийногоНомера, РаботаССерийнымиНомерамиКлиентСервер.СимволЧисла());
		НомерСНулями = Формат(НомерЧисло, "ЧЦ="+ЦифрВШаблоне+"; ЧВН=; ЧГ=");
		
		НовыйНомерПоШаблону = "";
		НомерСимволаСН = 1;
		// Заполняем шаблон
		Для символСерийногоНомера=1 По СтрДлина(ШаблонСерийногоНомера) Цикл
			симв = Сред(ШаблонСерийногоНомера,символСерийногоНомера,1);
			Если симв=РаботаССерийнымиНомерамиКлиентСервер.СимволЧисла() Тогда
				НовыйНомерПоШаблону = НовыйНомерПоШаблону+Сред(НомерСНулями,НомерСимволаСН,1);
				НомерСимволаСН = НомерСимволаСН+1;
			Иначе
				НовыйНомерПоШаблону = НовыйНомерПоШаблону+симв;
			КонецЕсли;
		КонецЦикла;
		НовыйНомер = НовыйНомерПоШаблону;
	Иначе
		НовыйНомер = Формат(НомерЧисло, "ЧЦ=8; ЧВН=; ЧГ=");
	КонецЕсли;
	
	Возврат Новый Структура("НовыйНомер, НовыйНомерЧисло", НовыйНомер, НомерЧисло);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КоэффициентЕдиницы(ЕдиницаИзмерения)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдиницаИзмерения, "Коэффициент");
	
КонецФункции

#КонецОбласти