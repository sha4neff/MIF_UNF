
#Область СлужебныйПрограммныйИнтерфейс

#Область СозданиеДокументовИнформационнойБазы

// Находит документ ИБ по параметрам.
//
// Параметры:
//  ВидЭД - Перечисления.ВидыЭД - Вид электронного документа, по которому ищется документ ИБ,
//  Контрагент - Ссылка на контрагента,
//  РеквизитыИБ - структура параметров информационной базы,
//  РеквизитыИБКонтрагента - структура параметров контрагента в информационной базе.
//
Функция НайтиДокумент(ВидЭД, Контрагент, РеквизитыИБ = Неопределено, РеквизитыИБКонтрагента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныйДок	= Неопределено;
	Запрос 			= Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПоиска.Ссылка КАК Ссылка ИЗ &УказатьВидДокументаЗапроса КАК ДокументПоиска ГДЕ ДокументПоиска.Контрагент = &Контрагент");
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Если ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УказатьВидДокументаЗапроса", "Документ.СчетНаОплатуПоставщика");
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УказатьВидДокументаЗапроса", "Документ.ЗаказПокупателя");
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УказатьВидДокументаЗапроса", "Документ.ЗаказПоставщику");
		
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УказатьВидДокументаЗапроса", "Документ.ПриходнаяНакладная");
		
	КонецЕсли;
	
	НайденныйДок = ИскатьДокументПоРеквизитам(РеквизитыИБ, Запрос);
	
	Если НайденныйДок = Неопределено Тогда
		
		НайденныйДок = ИскатьДокументПоРеквизитам(РеквизитыИБКонтрагента, Запрос);
		
	КонецЕсли;
	
	Возврат НайденныйДок;
	
КонецФункции

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, ЭтоАкт = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, ЭтоАкт);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументПоступленияТоваровУслуг(Документ, ДанныеДляЗагрузки);
	
	Возврат Документ;
	
КонецФункции

Процедура НайтиСоздатьПоступлениеТоваровУслугДляПередачаТоваров(ДеревоДанных, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОбъекта = ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачеТоваров(ДеревоДанных);
	
	Если ДанныеОбъекта.Шапка.Исправление Тогда
		ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеОбъекта);
	Иначе
		ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Процедура НайтиСоздатьПоступлениеТоваровУслугДляПередачаРабот(ДеревоДанных, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеОбъекта = ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачаРабот(ДеревоДанных);
	
	Если ДанныеОбъекта.Шапка.Исправление Тогда
		ЗаполнитьДокументКорректировкиПоступления(СсылкаНаВладельца, ДанныеОбъекта);
	Иначе
		ЗаполнитьДокументПоступленияТоваровУслуг(СсылкаНаВладельца, ДанныеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Документ = СсылкаНаВладельца;
	ЗаполнитьДокументСчетФактураПолученный(Документ, ДанныеДляЗагрузки);
	
	Возврат Документ;
	
КонецФункции

Функция НайтиСоздатьСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт

	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора);
	
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			ДокументОбъект 				= Документы.СчетНаОплатуПоставщика.СоздатьДокумент();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			ДокументОбъект.Дата			= ТекущаяДатаСеанса();
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
				И ДанныеЗаполнения.Свойство("Организация") Тогда
				
				ДокументОбъект.Организация	= ДанныеЗаполнения.Организация;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Загрузим табличные части
		ДокументОбъект.Запасы.Загрузить(ДанныеДляЗагрузки.Запасы);
		
		ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего");
		
		// Установим вручную некоторые реквизиты шапки
		ЗаполнитьДоговорКонтрагента(ДокументОбъект);
		
		Если ДанныеЗаполнения.Свойство("СуммаНалогаИтог") 
			И ЗначениеЗаполнено(ДанныеЗаполнения.СуммаНалогаИтог) Тогда
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		Иначе
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		КонецЕсли;
		
		// Заполним курс и кратность
		КурсВалюты					= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.Курс			= КурсВалюты.Курс;
		ДокументОбъект.Кратность	= КурсВалюты.Кратность;
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"),
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ЗаказПоставщику, 
			СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;

КонецФункции

Функция НайтиСоздатьЗаказПокупателя(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПокупателя(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
		
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			ДокументОбъект = Документы.ЗаказПокупателя.СоздатьДокумент();
			
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
		КонецЕсли;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Установим вручную некоторые реквизиты шапки
		ЗаполнитьДоговорКонтрагента(ДокументОбъект);
		
		ДокументОбъект.Кратность	= 1;
		ДокументОбъект.ВидОперации	= Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
		
		// Заполнить данные о доставке.
		Если ДанныеЗаполнения.Свойство("СпособДоставки") Тогда
			СпособДоставки = ДанныеЗаполнения.СпособДоставки;
			Если СпособДоставки = "Доставка" Тогда
				ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Курьер;
			ИначеЕсли СпособДоставки = "Самовывоз" Тогда
				ДокументОбъект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
			КонецЕсли;
		КонецЕсли;
		
		// Загрузим табличные части
		ДокументОбъект.Запасы.Загрузить(ДанныеДляЗагрузки.Запасы);
		
		ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего") + ДокументОбъект.Работы.Итог("Всего");
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			
			ДокументОбъект.УстановитьНовыйНомер();
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ЗаказПокупателя, 
			СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
		
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
			
			Если СсылкаНаВладельца.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
			
		Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
			
			УстановитьПривилегированныйРежим(Истина);
			
			ДокументОбъект 				= Документы.ЗаказПоставщику.СоздатьДокумент();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			ДокументОбъект.Дата			= ТекущаяДатаСеанса();
			
			Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
				И ДанныеЗаполнения.Свойство("Организация") Тогда
				
				ДокументОбъект.Организация	= ДанныеЗаполнения.Организация;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполним значения реквизитов шапки
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		ДокументОбъект.ВидОперации		= Перечисления.ВидыОперацийЗаказПоставщику.ЗаказНаЗакупку;
		
		// Загрузим табличные части
		ДокументОбъект.Запасы.Загрузить(ДанныеДляЗагрузки.Запасы);
		
		ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего");
		
		// Установим вручную некоторые реквизиты шапки
		ЗаполнитьДоговорКонтрагента(ДокументОбъект);
		
		Если ДанныеЗаполнения.Свойство("СуммаНалогаИтог") 
			И ЗначениеЗаполнено(ДанныеЗаполнения.СуммаНалогаИтог) Тогда
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		Иначе
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		КонецЕсли;
		
		// Заполним курс и кратность
		КурсВалюты					= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.Курс			= КурсВалюты.Курс;
		ДокументОбъект.Кратность	= КурсВалюты.Кратность;
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"),
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ЗаказПоставщику, 
			СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСсылкуНаНоменклатуруПоставщикаПоИдентификатору(Идентификатор, Контрагент, ТипВозвращаемогоЗначения = "Номенклатура") Экспорт
	
	НайденныйЭлемент = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Номенклатура КАК Номенклатура,
	|	СпрНоменклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Идентификатор = &Идентификатор
	|	И (&Контрагент = НЕОПРЕДЕЛЕНО
	|			ИЛИ СпрНоменклатура.Владелец = &Контрагент)";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ТипВозвращаемогоЗначения = "Номенклатура" Тогда
				НайденныйЭлемент = Выборка.Номенклатура;
			Иначе
				НайденныйЭлемент = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныйЭлемент;
	
КонецФункции

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
		// Заполняем идентификатор номенклатуры поставщика, если он получен в реквизите Ид
		СтрокаИд = СтрокаОбъекта.Строки.Найти("Ид", "Реквизит", Истина);
		Если НЕ ЗначениеЗаполнено(НовЭл.Идентификатор) И ЗначениеЗаполнено(СтрокаИд) Тогда
			НовЭл.Идентификатор = СтрокаИд.ЗначениеРеквизита;
		КонецЕсли;
		// Заполнение найденного поставщика (владельца, тип Справочник.Контрагент)
		СтрокиКонтрагенты = ДеревоРазбора.Строки.Найти("Контрагенты", "ТипОбъекта", Истина);
		Если Не ЗначениеЗаполнено(НовЭл.Владелец) И СтрокиКонтрагенты.Строки.Количество() = 1 Тогда
			НовЭл.Владелец = СтрокиКонтрагенты.Строки[0].СсылкаНаОбъект;
		КонецЕсли;		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создание элемента справочника %1.'"),
			"Номенклатура поставщиков") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействиеСлужебный.ВыполнитьЗаписьСобытияПоЭДВЖурналРегистрации(Текст, 2, УровеньЖурналаРегистрации.Ошибка);
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура СохранитьДанныеКаталогаТоваров(СтрокаЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено) Экспорт
	
	СтрокиТЧ = СтрокаЗагрузки.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	ТабЗагрузки = Новый ТаблицаЗначений;
	ТабЗагрузки.Колонки.Добавить("ИдентификаторТовара");
	ТабЗагрузки.Колонки.Добавить("ЗначенияСвойств");
	
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		
		ИдентификаторТовара = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаТЧ,
																"НоменклатураПоставщика.Идентификатор");
		
		ЗначенияСвойств = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаСтрокиДереваРазбора(
																ДеревоРазбора,
																СтрокаТЧ,
																"НоменклатураПоставщика.ЗначенияСвойств");
		Если Не ЗначенияСвойств = Неопределено Тогда
			НовСтрока = ТабЗагрузки.Добавить();
			НовСтрока.ИдентификаторТовара = ИдентификаторТовара;
			НовСтрока.ЗначенияСвойств     = ЗначенияСвойств;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТабЗагрузки.Количество() > 0 Тогда
		
		ВедетсяУчетАлкогольнойПродукции = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура,
		|	НоменклатураПоставщиков.Идентификатор
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Идентификатор В(&МассивИдентификаторов)
		|	И НЕ НоменклатураПоставщиков.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
		Запрос.УстановитьПараметр("МассивИдентификаторов", ТабЗагрузки.ВыгрузитьКолонку("ИдентификаторТовара"));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Строка = ТабЗагрузки.Найти(Выборка.Идентификатор, "ИдентификаторТовара");
			Если ВедетсяУчетАлкогольнойПродукции Тогда
				ЗаполнитьРеквизитыНоменклатурыДляУчетаАлкогольнойПродукции(Выборка.Номенклатура, Строка.ЗначенияСвойств);
			КонецЕсли;
			
			Для Каждого Свойство Из Строка.ЗначенияСвойств Цикл
				Если Сред(Свойство.ИД, 1, 8) = "Свойство" Тогда
					СвойствоСсылка = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
																									Свойство.Наименование);
					Если НЕ ЗначениеЗаполнено(СвойствоСсылка) Тогда
						НоваяХарактеристика = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.СоздатьЭлемент();
						НоваяХарактеристика.НаборСвойств = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_Номенклатура;
						НоваяХарактеристика.Наименование = Свойство.Наименование;
						НоваяХарактеристика.Заголовок = Свойство.Наименование;
						НоваяХарактеристика.ТипЗначения = Тип("СправочникСсылка.ЗначенияСвойствОбъектов");
						НоваяХарактеристика.Записать();
						СвойствоСсылка = НоваяХарактеристика.Ссылка;
					КонецЕсли;
					
					Если СвойствоСсылка.ТипЗначения = Новый ОписаниеТипов("Строка") Тогда
						ЗначениеСвойства = Свойство.Значение[0];
					ИначеЕсли СвойствоСсылка.ТипЗначения = Новый ОписаниеТипов("Булево") Тогда
						ЗначениеСвойства = Булево(Свойство.Значение[0]);
					ИначеЕсли СвойствоСсылка.ТипЗначения = Новый ОписаниеТипов("Дата") Тогда
						ЗначениеСвойства = Дата(Свойство.Значение[0]);
					ИначеЕсли СвойствоСсылка.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
						ЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.НайтиПоНаименованию(Свойство.Значение[0]);
						Если НЕ ЗначениеЗаполнено(ЗначениеСвойства) Тогда
							НовоеЗначениеСвойства = Справочники.ЗначенияСвойствОбъектов.СоздатьЭлемент();
							НовоеЗначениеСвойства.Наименование = Свойство.Значение[0];
							НовоеЗначениеСвойства.Владелец = СвойствоСсылка;
							НовоеЗначениеСвойства.Записать();
							ЗначениеСвойства = НовоеЗначениеСвойства.Ссылка;
						КонецЕсли;
					КонецЕсли;
					
					ТоварОбъект = Выборка.Номенклатура.ПолучитьОбъект();
					СтрокаСвойств = ТоварОбъект.ДополнительныеРеквизиты.Найти(СвойствоСсылка, "Свойство");
					Если СтрокаСвойств = Неопределено Тогда
						СтрокаСвойств = ТоварОбъект.ДополнительныеРеквизиты.Добавить();
					КонецЕсли;
					СтрокаСвойств.Свойство = СвойствоСсылка;
					СтрокаСвойств.Значение = ЗначениеСвойства;
					
					ТоварОбъект.Записать();
				ИначеЕсли Свойство.ИД = "Штрихкод" Тогда
					ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
					Если ЗначениеЗаполнено(Свойство.Наименование) Тогда
						ЕдиницаИзмерения = Справочники.ЕдиницыИзмерения.НайтиПоКоду(Свойство.Наименование);
					КонецЕсли;
					Для Каждого Штрихкод Из Свойство.Значение Цикл
						МенеджерЗаписи = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.Штрихкод = Штрихкод;
						МенеджерЗаписи.Прочитать();
						Если Не МенеджерЗаписи.Выбран() Тогда
							МенеджерЗаписи.Номенклатура = Выборка.Номенклатура;
							МенеджерЗаписи.ЕдиницаИзмерения = ЕдиницаИзмерения;
							МенеджерЗаписи.Штрихкод = Штрихкод;
							МенеджерЗаписи.Записать();
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументПоступленияТоваровУслуг(Документ, ДанныеДляЗагрузки) Экспорт
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	
	Попытка
		
		Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
			
			Если Документ.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = Документ.ПолучитьОбъект();
			
		Иначе // создаем новый
			
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект = Документы.ПриходнаяНакладная.СоздатьДокумент();
			
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПриходнаяНакладная.ПоступлениеОтПоставщика;
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
		КонецЕсли;
		
		// Заполним реквизиты шапки на основании структуры данных заполнения
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		// Загрузим табличные части
		ДокументОбъект.Запасы.Загрузить(ДанныеДляЗагрузки.Запасы);
		ДокументОбъект.Расходы.Загрузить(ДанныеДляЗагрузки.Расходы);
		Если ДанныеДляЗагрузки.Свойство("ШтрихкодыУпаковок") Тогда
			ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ДанныеДляЗагрузки.ШтрихкодыУпаковок);
		КонецЕсли;
		
		// Заполним курс и кратность
		КурсВалюты					= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		ДокументОбъект.Курс			= КурсВалюты.Курс;
		ДокументОбъект.Кратность	= КурсВалюты.Кратность;
		
		НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
		Если ДокументОбъект.ВалютаДокумента <> НациональнаяВалюта Тогда
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ДокументОбъект, НациональнаяВалюта, "Запасы");
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ДокументОбъект, НациональнаяВалюта, "Расходы");
		КонецЕсли;
		
		// Установим вручную некоторые реквизиты шапки
		ЗаполнитьДоговорКонтрагента(ДокументОбъект);
		
		Если ДанныеЗаполнения.Свойство("СуммаНДС")
			И ДанныеЗаполнения.СуммаНДС > 0
			ИЛИ ДокументОбъект.Запасы.Итог("СуммаНДС") > 0
			ИЛИ ДокументОбъект.Расходы.Итог("СуммаНДС") > 0 Тогда
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		Иначе
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		КонецЕсли;
		
		ДокументОбъект.СуммаВключаетНДС = Ложь;
		ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего") + ДокументОбъект.Расходы.Итог("Всего");
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		КонецЕсли;
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписи);
		
		Документ = ДокументОбъект.Ссылка;
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"),
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ЗаказПоставщику, 
			Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументСчетФактураПолученный(Документ, ДанныеДляЗагрузки) Экспорт
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	ДатаДокумента = ТекущаяДатаСеанса();
	
	Попытка
		
		Если ЗначениеЗаполнено(Документ) Тогда
			
			Если Документ.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = Документ.ПолучитьОбъект();
			ДатаДокумента = ДокументОбъект.Дата;
			
		Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
			
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина; 
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
		
		// Заполнение документа-основания
		ДокументОснование = Неопределено;
		Если ДанныеДляЗагрузки.Свойство("ДокументыОснования")
			И ДанныеДляЗагрузки.ДокументыОснования <> Неопределено
			И ДанныеДляЗагрузки.ДокументыОснования.Количество() > 0 Тогда
			ДокументОснование = ДанныеДляЗагрузки.ДокументыОснования[0];
		КонецЕсли;
		
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеДляЗагрузки);
		
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			
			СтрокаОснование = ДокументОбъект.ДокументыОснования.Добавить();
			СтрокаОснование.ДокументОснование = ДокументОснование;
			СтрокаОснование.НомерИсходногоДокумента = ДанныеДляЗагрузки.НомерИсходногоДокумента;
			СтрокаОснование.ДатаИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсходногоДокумента;
			
			ДанныеДляЗагрузки.Вставить("ДокументЗаполнения", ДокументОснование);
			Попытка
				ДокументОбъект.Заполнить(ДокументОснование);
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		Иначе
			ДокументОбъект.СуммаДокумента = ДокументОбъект.СуммаДокумента - ДокументОбъект.СуммаНДСДокумента;
		КонецЕсли;
		
		ДокументОбъект.ВидОперации = ДанныеДляЗагрузки.ВидСчетаФактуры;
		ДокументОбъект.НомерВходящегоДокумента = ДанныеДляЗагрузки.НомерВходящегоДокумента;
		ДокументОбъект.ДатаВходящегоДокумента  = ДанныеДляЗагрузки.ДатаВходящегоДокумента;
		
		Если ДанныеДляЗагрузки.Свойство("Исправление")
			И ДанныеДляЗагрузки.Исправление Тогда
			ДокументОбъект.Исправление       = ДанныеДляЗагрузки.Исправление;
			ДокументОбъект.НомерИсправления  = ДанныеДляЗагрузки.НомерИсправления;
			ДокументОбъект.ДатаИсправления   = ДанныеДляЗагрузки.ДатаИсправления;
		КонецЕсли;
		
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка Тогда
			Если ДанныеДляЗагрузки.Свойство("УчитыватьИсправлениеИсходногоДокумента")
				И ДанныеДляЗагрузки.УчитыватьИсправлениеИсходногоДокумента Тогда
				Если ДокументОбъект.ДокументыОснования.Количество() > 0 Тогда
					ДокументОбъект.ДокументыОснования[0].НомерИсправленияИсходногоДокумента = ДанныеДляЗагрузки.НомерИсправленияИсходногоДокумента;
					ДокументОбъект.ДокументыОснования[0].ДатаИсправленияИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсправленияИсходногоДокумента;
					ДокументОбъект.ДокументыОснования[0].УчитыватьИсправлениеИсходногоДокумента = ДанныеДляЗагрузки.УчитыватьИсправлениеИсходногоДокумента;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ДокументОбъект.ДокументыОснования.Количество() > 0 Тогда
				ДокументОбъект.ДокументыОснования[0].НомерИсходногоДокумента = ДанныеДляЗагрузки.НомерИсходногоДокумента;
				ДокументОбъект.ДокументыОснования[0].ДатаИсходногоДокумента  = ДанныеДляЗагрузки.ДатаИсходногоДокумента;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.Дата = ДатаДокумента;
		
		Если ДокументОбъект.ДокументыОснования.Количество() > 0
			И ЗначениеЗаполнено(ДокументОбъект.ДокументыОснования[0].ДокументОснование)
			И ЗначениеЗаполнено(ДокументОбъект.ДокументыОснования[0].ДокументОснование.Договор) Тогда
			
			ДокументОбъект.Договор = ДокументОбъект.ДокументыОснования[0].ДокументОснование.Договор;
			
		КонецЕсли;
		
		ЗаполнитьДоговорКонтрагента(ДокументОбъект);
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписи);
		
		Документ = ДокументОбъект.Ссылка;
	Исключение
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"),
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.СчетФактураПолученный, 
			Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьДокументКорректировкиПоступления(Документ, ДанныеДляЗагрузки) Экспорт
	
	ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	
	Попытка
	
		Если ЗначениеЗаполнено(Документ) Тогда // получены изменения по существующему документу
			
			Если Документ.Проведен Тогда 
				ВызватьИсключение НСтр("ru = 'Заполнение на основании ЭД возможно только для непроведенного документа'");
			КонецЕсли;
			
			ДокументОбъект = Документ.ПолучитьОбъект();
			
		Иначе // создаем новый
			
			ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
			ДокументОбъект.Заполнить(ДанныеЗаполнения);
			
			ДокументОбъект.Дата = ТекущаяДатаСеанса();
			
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
		КонецЕсли;
		
		// Заполним реквизиты шапки на основании структуры данных заполнения
		ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
		Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
		КонецЕсли;
		
		ДокументОбъект.ЗаполнитьСвойстваШапки();
		
		Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			ДокументОбъект.НомерИсправления = ДанныеЗаполнения.НомерИсправления;
			ДокументОбъект.ДатаИсправления = ДанныеЗаполнения.ДатаИсправления;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("НомерИсходногоДокумента")
			И ЗначениеЗаполнено(ДанныеЗаполнения.НомерИсходногоДокумента) Тогда
			ДокументОбъект.НомерИсходногоДокумента = ДанныеЗаполнения.НомерИсходногоДокумента;
			ДокументОбъект.ДатаИсходногоДокумента  = ДанныеЗаполнения.ДатаИсходногоДокумента;
			Если ДанныеЗаполнения.Свойство("УчитыватьИсправлениеИсходногоДокумента")
				И ДанныеЗаполнения.УчитыватьИсправлениеИсходногоДокумента Тогда
				ДокументОбъект.НомерИсправленияИсходногоДокумента = ДанныеЗаполнения.НомерИсправленияИсходногоДокумента;
				ДокументОбъект.ДатаИсправленияИсходногоДокумента  = ДанныеЗаполнения.ДатаИсправленияИсходногоДокумента;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОснование = ДокументОбъект.ДокументОснование;
		Если Не ЗначениеЗаполнено(ДокументОснование) И ДанныеЗаполнения.Свойство("Основание") Тогда
			ДокументОснование = ДанныеЗаполнения.Основание;
		КонецЕсли;
		
		// Заполненим корректировку поступления данными основания
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументОбъект.Заполнить(ДокументОснование);
		КонецЕсли;
		
		// Заполним табличные части данными корректировки
		ТабличныеЧастиДляЗаполения = Новый Структура("Запасы, Расходы");
		СтрокиТабличнойЧастиДляПерезаполнения = Новый Структура("Запасы, Расходы",
				"Количество, Цена, Сумма, СуммаНДС, Всего", 
				"Количество, Цена, Сумма, СуммаНДС, Всего, Содержание");
		Если ДанныеЗаполнения.ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Запасы, Расходы", "", "");
		Иначе
			СтрокиТабличнойЧастиДляПерезаполненияНового = Новый Структура("Запасы, Расходы",
					"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения", 
					"КоличествоДоИзменения, ЦенаДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ВсегоДоИзменения, СодержаниеДоИзменения");
		КонецЕсли;
		Для Каждого ТабличнаяЧасть Из ТабличныеЧастиДляЗаполения Цикл
			
			ИмяТЧ = ТабличнаяЧасть.Ключ;
			
			Если ИмяТЧ = "Запасы" Тогда
				СтруктураПоиска = Новый Структура("Номенклатура, Характеристика");
			Иначе
				СтруктураПоиска = Новый Структура("Номенклатура");
			КонецЕсли;
			
			Для Каждого СтрокаДокумента Из ДокументОбъект[ИмяТЧ] Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
				РезультатПоискаДанныхЗаполнения = ДанныеДляЗагрузки[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
				
				Если РезультатПоискаДанныхЗаполнения.Количество() = 0 Тогда
					
					// Такой строки в данных корректировки нет - обнуляем данные строки документа.
					СтрокаДокумента.Количество = 0;
					СтрокаДокумента.Цена       = 0;
					СтрокаДокумента.Сумма      = 0;
					СтрокаДокумента.СуммаНДС   = 0;
					
				Иначе
					
					СтрокаДанныхЗаполнения = РезультатПоискаДанныхЗаполнения[0];
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДанныхЗаполнения, СтрокиТабличнойЧастиДляПерезаполнения[ИмяТЧ]);
					
					// Удалим обработанную строку из данных заполнения
					ДанныеДляЗагрузки[ИмяТЧ].Удалить(СтрокаДанныхЗаполнения);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Добавим новые строки в документ
			Если ДанныеДляЗагрузки[ИмяТЧ].Количество() > 0 Тогда
				
				Для Каждого СтрокаДанныхЗаполнения Из ДанныеДляЗагрузки[ИмяТЧ] Цикл
					Если Не ЗначениеЗаполнено(СтрокаДанныхЗаполнения.Номенклатура) Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ДокументОбъект[ИмяТЧ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанныхЗаполнения, , СтрокиТабличнойЧастиДляПерезаполненияНового[ИмяТЧ]);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДанныеЗаполнения.Свойство("СуммаНДС")
			И ДанныеЗаполнения.СуммаНДС > 0
			ИЛИ ДокументОбъект.Запасы.Итог("СуммаНДС") > 0
			ИЛИ ДокументОбъект.Расходы.Итог("СуммаНДС") > 0 Тогда
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС;
		Иначе
			ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НеОблагаетсяНДС;
		КонецЕсли;
		
		ДокументОбъект.СуммаВключаетНДС = Ложь;
		ДокументОбъект.СуммаДокумента = ДокументОбъект.Запасы.Итог("Всего") + ДокументОбъект.Расходы.Итог("Всего");
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ДокументОбъект.ВалютаДокумента = Константы.НациональнаяВалюта.Получить();
		КонецЕсли;
		
		Если ДокументОбъект.ЭтоНовый() Тогда
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать(РежимЗаписи);
		
		Документ = ДокументОбъект.Ссылка;
	Исключение
	
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Заполнение на основании ЭД'"),
			УровеньЖурналаРегистрации.Ошибка, 
			Метаданные.Документы.ЗаказПоставщику, 
			Документ, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	
	КонецПопытки;
	
КонецПроцедуры

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, ЭтоАкт = Ложь) Экспорт
	
	ДанныеДляОбъекта		= Новый Структура;
	ДанныеЗаполненияШапки	= Новый Структура;
	Запасы 					= Документы.ПриходнаяНакладная.ПустаяСсылка().Запасы.ВыгрузитьКолонки();
	Расходы 				= Документы.ПриходнаяНакладная.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					
					ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					
					Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, ЗначениеРеквизита);
					КонецЕсли;
					
				Иначе
					
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					
					Если ЭтоАкт
						ИЛИ (ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура)
						И ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга) Тогда
						
						НоваяСтрока = Расходы.Добавить();
					Иначе
						НоваяСтрока = Запасы.Добавить();
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда 
				
				// Заполним реквизит шапки
				ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				
				Если СтрокаРеквизита.Реквизит = "Дата" Тогда
					ИмяРеквизита = "ДатаВходящегоДокумента";
				ИначеЕсли СтрокаРеквизита.Реквизит = "Номер" Тогда
					ИмяРеквизита = "НомерВходящегоДокумента";
				ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
					ИмяРеквизита = "ВалютаДокумента";
				Иначе
					ИмяРеквизита = СтрокаРеквизита.Реквизит;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				КонецЕсли;
				
			Иначе 
				// Добавим строку табличной части
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				
				Если ЭтоАкт
					ИЛИ (ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура)
					И ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга) Тогда
					
					НоваяСтрока = Расходы.Добавить();
				Иначе
					НоваяСтрока = Запасы.Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("ПоложениеЗаказаПоставщику", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		ДанныеЗаполненияШапки.Вставить("СтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Удалить("ВидОперации");
	ДанныеДляОбъекта.Вставить("Шапка"  , ДанныеЗаполненияШапки);
	
	Для каждого Строка Из Запасы Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Цена) Тогда
			Строка.Цена = Строка.Сумма;
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Сумма) Тогда
			Строка.Сумма = Строка.Цена;
		КонецЕсли;
	КонецЦикла;
	ДанныеДляОбъекта.Вставить("Запасы" , Запасы);
	
	Пользователь = Пользователи.ТекущийПользователь();
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	Для каждого Строка Из Расходы Цикл
		Строка.СтруктурнаяЕдиница = ОсновноеПодразделение;
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Строка.НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "НаправлениеДеятельности");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.ЕдиницаИзмерения) Тогда
			Строка.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Количество) Тогда
			Строка.Количество = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Строка.Цена) Тогда
			Строка.Цена = Строка.Сумма;
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Сумма) Тогда
			Строка.Сумма = Строка.Цена;
		КонецЕсли;
	КонецЦикла;
	ДанныеДляОбъекта.Вставить("Расходы", Расходы);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступления(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта      = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	
	Запасы = Документы.КорректировкаПоступления.ПустаяСсылка().Запасы.ВыгрузитьКолонки();
	Расходы = Документы.КорректировкаПоступления.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			 
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, ЗначениеРеквизита);
					КонецЕсли;
				Иначе
					ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
					ЗаполнитьЗначенияСвойств(Расходы.Добавить(), ДанныеДляЗаполненияСтрокиТЧ);
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда 
				
				// Заполним реквизит шапки
				ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				
				Если СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" Тогда
					ИмяРеквизита = "ДатаПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" Тогда
					ИмяРеквизита = "НомерПоДаннымПокупателя";
				ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
					ИмяРеквизита = "ВалютаДокумента";
				ИначеЕсли СтрокаРеквизита.Реквизит = "Основание" Тогда
					ИмяРеквизита = "ДокументОснование";
				Иначе
					ИмяРеквизита = СтрокаРеквизита.Реквизит;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				КонецЕсли;
				
			Иначе 
				
				// Добавим строку табличной части
				ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
				
				Если ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Номенклатура)
					И ДанныеДляЗаполненияСтрокиТЧ.Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
					НоваяСтрока = Расходы.Добавить();
				Иначе
					НоваяСтрока = Запасы.Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("ВидОперацииЭД", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора));
	
	// спец. значения 
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	КонецЕсли;
	
	Если ДанныеЗаполненияШапки.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДанныеЗаполненияШапки.Вставить("НомерИсправления",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсходногоДокумента"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсходногоДокумента"));
	ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияИсходногоДокумента"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправленияИсходногоДокумента"));
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Запасы", Запасы);
	ДанныеДляОбъекта.Вставить("Расходы", Расходы);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетФактуры(СтрокаДляЗагрузки, ДеревоРазбора) Экспорт
	
	МассивДокументовОснований = Новый Массив;
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Дата"));
	
	ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
	ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	
	Если СтрокаДляЗагрузки.ОписаниеОбъекта = "Корректировочный" Тогда
		ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры",Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка);
		Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
		КонецЕсли;
		Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры")) Тогда
			ДанныеЗаполненияШапки.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
		КонецЕсли;
	Иначе
		ДанныеЗаполненияШапки.Вставить("ВидСчетаФактуры", 	Перечисления.ВидыОперацийСчетФактураПолученный.Поступление);
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", 	ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "СтТовУчНал"));
		Если ЗначениеЗаполнено (ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
			ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "НомерИсправления"));
			ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ДатаИсправления"));
		КонецЕсли;
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ВалютаДокумента", 
		НайтиСсылкуНаОбъект("Валюты", ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "ВалКод")));
	
	// Данные по организации
	Организация = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Организация", Истина, ДеревоРазбора);
	ДанныеЗаполненияШапки.Вставить("Организация", Организация);
	
	Контрагент = ПолучитьЗначениеРеквизита(СтрокаДляЗагрузки, "Контрагент", Истина, ДеревоРазбора);
	ДанныеЗаполненияШапки.Вставить("Контрагент", Контрагент);
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "ДокументыОснования" Тогда
			
			Для Каждого Строка Из СтрокаРеквизита.Строки Цикл
				МассивДокументовОснований.Добавить(Строка.СсылкаНаОбъект);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("ДокументыОснования", МассивДокументовОснований);
	
	Возврат ДанныеЗаполненияШапки;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетНаОплатуПоставщика(СтрокаДляЗагрузки, ДеревоРазбора) Экспорт
	
	ДанныеДляОбъекта			= Новый Структура;
	ДанныеЗаполненияШапки		= Новый Структура;
	Запасы = Документы.СчетНаОплатуПоставщика.ПустаяСсылка().Запасы.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
			
			ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "ЦенаВключаетНДС" Тогда
				
				ИмяРеквизита = "СуммаВключаетНДС";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
				
				ИмяРеквизита = "ВалютаДокумента";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				
				ИмяРеквизита = "Курс";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымПоставщика" Тогда
				
				ИмяРеквизита = "НомерВходящегоДокумента";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаПоДаннымПоставщика" Тогда
				
				ИмяРеквизита = "ДатаВходящегоДокумента";
				
			Иначе
				
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
				
			КонецЕсли;
			
			ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			
			// Добавим строку табличной части
			ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Запасы", Запасы);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПокупателя(СтрокаДляЗагрузки, ДеревоРазбора) Экспорт
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	Запасы = Документы.ЗаказПокупателя.ПустаяСсылка().Запасы.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			
			ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "ЦенаВключаетНДС" Тогда
				
				ИмяРеквизита = "СуммаВключаетНДС";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
				
				ИмяРеквизита = "ВалютаДокумента";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				
				ИмяРеквизита = "КурсВзаиморасчетов";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаПоДаннымКлиента" 
				ИЛИ СтрокаРеквизита.Реквизит = "ДатаПоДаннымПоставщика" Тогда
				
				ИмяРеквизита = "ДатаВходящегоДокумента";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымКлиента" 
				ИЛИ СтрокаРеквизита.Реквизит = "НомерПоДаннымПоставщика" Тогда
				
				ИмяРеквизита = "НомерВходящегоДокумента";
				
			Иначе
				
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				
				ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				
			КонецЕсли;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			
			// Добавим строку табличной части
			ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
			
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ТипНоменклатуры");
				НоваяСтрока.ТипНоменклатурыЗапас = ((ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас)
												ИЛИ (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.ПодарочныйСертификат));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Запасы",	Запасы);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора) Экспорт
	
	ДанныеДляОбъекта			= Новый Структура;
	ДанныеЗаполненияШапки		= Новый Структура;
	Запасы = Документы.ЗаказПоставщику.ПустаяСсылка().Запасы.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
			
			ЗначениеРеквизита = ПолучитьЗначениеРеквизита(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			
			Если СтрокаРеквизита.Реквизит = "ЦенаВключаетНДС" Тогда
				
				ИмяРеквизита = "СуммаВключаетНДС";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Валюта" Тогда
				
				ИмяРеквизита = "ВалютаДокумента";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "Курс" Тогда
				
				ИмяРеквизита = "Курс";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "НомерПоДаннымПоставщика" Тогда
				
				ИмяРеквизита = "НомерВходящегоДокумента";
				
			ИначеЕсли СтрокаРеквизита.Реквизит = "ДатаПоДаннымПоставщика" Тогда
				
				ИмяРеквизита = "ДатаВходящегоДокумента";
				
			Иначе
				
				ИмяРеквизита = СтрокаРеквизита.Реквизит;
				
			КонецЕсли;
			
			ДанныеЗаполненияШапки.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			
			// Добавим строку табличной части
			ДанныеДляЗаполненияСтрокиТЧ = ПолучитьДанныеСтрокиТЧ(СтрокаРеквизита.Строки, ДеревоРазбора);
			
			НоваяСтрока = Запасы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеДляЗаполненияСтрокиТЧ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Запасы", Запасы);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляУПД(ДеревоДанных, Это2019 = Ложь) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Запасы         = Документы.ПриходнаяНакладная.ПустаяСсылка().Запасы.ВыгрузитьКолонки();
	Расходы         = Документы.ПриходнаяНакладная.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	Валюта = НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	КурсВзаиморасчетов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("Курс", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("Кратность", 1);
	
	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	
	СведенияОбУчастнике = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПокупателе");
	Если ТипЗнч(СведенияОбУчастнике) = Тип("Число") Тогда
		ОпределитьУчастниковПоДаннымЭД_2019(ДеревоДанных, ДанныеОбъекта);
	Иначе
		ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе"));
		ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ПередачаТовараКомитентом", Ложь);
	
	ОснованиеСчетаФактуры = Неопределено;
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда
		Для Каждого ДокументОснование Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный")
				ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
				ОснованиеСчетаФактуры = ДокументОснование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОснованиеСчетаФактуры = ДокументыОснованияСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
		Если ТипЗнч(ОснованиеСчетаФактуры) = Тип("ДокументСсылка.СчетФактураПолученный")Тогда
			ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыПолученного(ОснованиеСчетаФактуры);
		Иначе
			ДокументОснованиеСчетаФактуры = ОснованиеСчетаФактуры;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
		ДанныеОбъекта.Вставить("ДокументОснование", ДокументОснованиеСчетаФактуры);
	КонецЕсли;
	
	ТекстоваяИнформация = ДеревоДанных.Строки.Найти("ДопДанныеДокументаОтгрузки.ТекстоваяИнформация", "ПолныйПуть", Истина);
	Если ТекстоваяИнформация <> Неопределено Тогда
		Для Каждого СтрокаТекстовойИнформации Из ТекстоваяИнформация.Строки Цикл
			Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации, 
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Идентификатор") = "ПередачаТовараКомитентом" Тогда
				ДанныеОбъекта.ПередачаТовараКомитентом = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СтрокаТекстовойИнформации,
						"ДопДанныеДокументаОтгрузки.ТекстоваяИнформация.НомерСтроки.Значение") = "Истина";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("ПоложениеЗаказаПоставщику", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		ДанныеОбъекта.Вставить("СтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	ШтрихкодыУпаковок = ЭлектронноеВзаимодействиеИСМП.НоваяТаблицаШтрихкодыУпаковок();
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Номенклатура = НоменклатураИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление");
		Характеристика = ХарактеристикаИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление");
		Упаковка = УпаковкаИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление");
		
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ТоварНаименование");
		
		Признак = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Признак");
		Если Не ЗначениеЗаполнено(Признак)
			И ЗначениеЗаполнено(Номенклатура) Тогда
			
			ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры");
			Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Запас Тогда
				Признак = "1";
			КонецЕсли;
			
		КонецЕсли;
		
		Если Признак = "1" Тогда
			НоваяСтрока = Запасы.Добавить();
			НоваяСтрока.Характеристика = Характеристика;
			НоваяСтрока.ЕдиницаИзмерения = Упаковка;
			Если НЕ ЗначениеЗаполнено(Упаковка) Тогда
				НоваяСтрока.ЕдиницаИзмерения = НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
					ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод"));
			КонецЕсли;
		Иначе
			НоваяСтрока = Расходы.Добавить();
			НоваяСтрока.ЕдиницаИзмерения = НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
				ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЕдиницаИзмеренияКод"));
			НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		КонецЕсли;
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.Всего = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Количество) Тогда
			НоваяСтрока.Количество = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Сумма) Тогда
			НоваяСтрока.Сумма = ?(ЗначениеЗаполнено(НоваяСтрока.Всего), НоваяСтрока.Всего, НоваяСтрока.Цена);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Цена) Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Всего) Тогда
			НоваяСтрока.Всего = НоваяСтрока.Сумма;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Номенклатура;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
			НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		
		Если Признак = "1" Тогда
		
			СведенияОТаможеннойДекларации = СведенияОТоваре.Строки.Найти(
											"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации", "ПолныйПуть", Истина);
			
			Если СведенияОТаможеннойДекларации <> Неопределено
				И СведенияОТаможеннойДекларации.Строки.Количество() > 0 Тогда
				
				НомерТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.ТаможеннаяДекларацияНомер");
				
				КодСтраныТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТаможеннойДекларации.Строки[0],
								"СведенияОТоварах.НомерСтроки.СведенияОТаможеннойДекларации.НомерСтроки.СтранаПроисхожденияКод");
				
				Если СтрДлина(НомерТД) > 3 И ЗначениеЗаполнено(НомерТД) Тогда
					ТаможеннаяДекларация = НайтиСсылкуНаОбъект("НомерТД", НомерТД);
					Если НЕ ЗначениеЗаполнено(ТаможеннаяДекларация) Тогда
						ТаможеннаяДекларацияОбъект = Справочники.НомераГТД.СоздатьЭлемент();
						ТаможеннаяДекларацияОбъект.Код = НомерТД;
						ТаможеннаяДекларацияОбъект.ДопускаетсяЗаписьСОшибкой = Истина;
						ТаможеннаяДекларацияОбъект.Записать();
						ТаможеннаяДекларация = ТаможеннаяДекларацияОбъект.Ссылка;
					КонецЕсли;
					НоваяСтрока.НомерГТД = ТаможеннаяДекларация;
					НоваяСтрока.СтранаПроисхождения = НайтиСсылкуНаОбъект("СтраныМира", КодСтраныТД);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока.СтруктурнаяЕдиница = ОсновноеПодразделение;
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "НаправлениеДеятельности");
			КонецЕсли;
			
		КонецЕсли;
		
		Если Это2019 Тогда
			ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок_2019(ШтрихкодыУпаковок, СведенияОТоваре);
		Иначе
			ЭлектронноеВзаимодействиеИСМП.ДобавитьШтрихкодыТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок, СведенияОТоваре);
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлектронноеВзаимодействиеИСМП.СвернутьТаблицуШтрихкодовУпаковок(ШтрихкодыУпаковок);
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Запасы", Запасы);
	ДанныеДляЗаполнения.Вставить("Расходы", Расходы);
	ДанныеДляЗаполнения.Вставить("ШтрихкодыУпаковок", ШтрихкодыУпаковок);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУПД(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", "");
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",  '00010101');
	
	СведенияОбУчастнике = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "СведенияОПокупателе");
	Если ТипЗнч(СведенияОбУчастнике) = Тип("Число") Тогда
		ОпределитьУчастниковПоДаннымЭД_2019(ДеревоДанных, ДанныеОбъекта);
	Иначе
		ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе"));
		ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
		ДанныеОбъекта.Вставить("Комиссионер", КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОКомиссионере"));
	КонецЕсли;
	
	// Если счет-фактура на аванс.
	ВидСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры");
	Если ВидСчетаФактуры = "Авансовый" Тогда
		ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидыОперацийСчетФактураПолученный.Аванс);
		КодВидаОперации = "02";
	Иначе
		ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидыОперацийСчетФактураПолученный.Поступление);
		Если ЗначениеЗаполнено(ДанныеОбъекта.Комиссионер) Тогда
			КодВидаОперации = "04";
		Иначе
			КодВидаОперации = "01";
		КонецЕсли;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("КодВидаОперации", КодВидаОперации);
	
	НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;
	
	// Заполняем документы-основания
	МассивДокументовОснований = Новый Массив();
	НайденнаяСтрока = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
	Если НайденнаяСтрока <> Неопределено Тогда 
		МассивДокументовОснований = НайденнаяСтрока.Значение;
	КонецЕсли;
	ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);
	
	КодВалюты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ДанныеОбъекта.Вставить("ВалютаДокумента", НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	ДанныеОбъекта.Вставить("СуммаДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом"));
	ДанныеОбъекта.Вставить("СуммаНДСДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоКОплате.ВсегоСуммаНалога"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляУКД(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	
	Запасы         = Документы.КорректировкаПоступления.ПустаяСсылка().Запасы.ВыгрузитьКолонки();
	Расходы         = Документы.КорректировкаПоступления.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	Валюта = НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	КурсВзаиморасчетов = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДополнительныеСведенияОбУчастниках.ВалютаКурс");
	ДанныеОбъекта.Вставить("КурсВзаиморасчетов", ?(ЗначениеЗаполнено(КурсВзаиморасчетов), КурсВзаиморасчетов, 1));
	ДанныеОбъекта.Вставить("КратностьВзаиморасчетов", 1);
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента"));
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"));
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента")) Тогда
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
		ДанныеОбъекта.Вставить("НомерИсправленияИсходногоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента"));
		ДанныеОбъекта.Вставить("ДатаИсправленияИсходногоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента"));
	Иначе
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления")) Тогда
		ДанныеОбъекта.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Исправление);
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("ВидОперацииЭД", Перечисления.ВидыОперацийЭД.Корректировка);
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ОснованиеСчетаФактуры = Неопределено;
	ДокументыОснованияСчетаФактуры = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры");
	Если ТипЗнч(ДокументыОснованияСчетаФактуры) = Тип("Массив") Тогда
		Для Каждого ДокументОснование Из ДокументыОснованияСчетаФактуры Цикл
			Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.СчетФактураПолученный")
				ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПриходнаяНакладная") Тогда
				ОснованиеСчетаФактуры = ДокументОснование;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОснованиеСчетаФактуры = ДокументыОснованияСчетаФактуры;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОснованиеСчетаФактуры) Тогда
		Если ТипЗнч(ОснованиеСчетаФактуры) = Тип("ДокументСсылка.СчетФактураПолученный")Тогда
			ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыПолученного(ОснованиеСчетаФактуры);
		Иначе
			ДокументОснованиеСчетаФактуры = ОснованиеСчетаФактуры;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
		ДанныеОбъекта.Вставить("ДокументОснование", ДокументОснованиеСчетаФактуры);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе"));
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("СведенияОТоварах", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Номенклатура = НоменклатураИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление");
		Характеристика = ХарактеристикаИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление");
		Упаковка = УпаковкаИБ(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Сопоставление");
		
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"СведенияОТоварах.НомерСтроки.ТоварНаименование");
		
		Если ЗначениеЗаполнено(Номенклатура)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры") <> Перечисления.ТипыНоменклатуры.Запас Тогда
			НоваяСтрока = Расходы.Добавить();
			НоваяСтрока.СодержаниеДоИзменения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
			НоваяСтрока.Содержание            = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ТоварНаименование");
		Иначе
			НоваяСтрока = Запасы.Добавить();
			НоваяСтрока.Характеристика = Характеристика;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = Упаковка;
		
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.НалоговаяСтавка");
		НоваяСтрока.СуммаНДСДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалогаДоКорректировки");
		НоваяСтрока.СуммаНДС                = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СуммаНалога");
		
		НоваяСтрока.КоличествоДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.КоличествоДоКорректировки");
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.Количество");
		НоваяСтрока.ЦенаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмеренияДоКорректировки");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.ЦенаЗаЕдиницуИзмерения");
		НоваяСтрока.СуммаДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалогаДоКорректировки");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровБезНалога");
		НоваяСтрока.ВсегоДоКорректировки = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогомДоКорректировки");
		НоваяСтрока.Всего = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "СведенияОТоварах.НомерСтроки.СтоимостьТоваровСНалогом");
		
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Запасы", Запасы);
	ДанныеДляЗаполнения.Вставить("Расходы", Расходы);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактурыУКД(ДеревоДанных) Экспорт
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента"));
	
	НомерИсправления = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления");
	ДатаИсправления  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления");
	
	Если ЗначениеЗаполнено(НомерИсправления) Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", НомерИсправления);
		ДанныеОбъекта.Вставить("ДатаИсправления",  ДатаИсправления);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("НомерИсходногоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента"));
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента"));
	
	НомерИсправленияИсходногоДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента");
	ДатаИсправленияИсходногоДокумента  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента");
	
	Если ЗначениеЗаполнено(НомерИсправленияИсходногоДокумента) Тогда
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Истина);
		ДанныеОбъекта.Вставить("НомерИсправленияИсходногоДокумента", НомерИсправленияИсходногоДокумента);
		ДанныеОбъекта.Вставить("ДатаИсправленияИсходногоДокумента",  ДатаИсправленияИсходногоДокумента);
	Иначе
		ДанныеОбъекта.Вставить("УчитыватьИсправлениеИсходногоДокумента", Ложь);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "СведенияОПокупателе"));
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "СведенияОПродавце"));
	ДанныеОбъекта.Вставить("Комиссионер", Справочники.Контрагенты.ПустаяСсылка());
	
	// Если счет-фактура на аванс.
	ДанныеОбъекта.Вставить("ВидСчетаФактуры",Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка);
	ДанныеОбъекта.Вставить("КодВидаОперации", "01");
	
	// Заполняем документы-основания
	МассивДокументовОснований = Новый Массив();
	НайденнаяСтрока = ДеревоДанных.Строки.Найти("ДокументыОснованияСчетаФактуры", "ПолныйПуть");
	Если НайденнаяСтрока <> Неопределено Тогда 
		МассивДокументовОснований = НайденнаяСтрока.Значение;
	КонецЕсли;
	ДанныеОбъекта.Вставить("ДокументыОснования", МассивДокументовОснований);
	
	КодВалюты = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод");
	ДанныеОбъекта.Вставить("ВалютаДокумента", НайтиСсылкуНаОбъект("Валюты", КодВалюты));
	
	ДанныеОбъекта.Вставить("СуммаДокумента",    0);
	ДанныеОбъекта.Вставить("СуммаНДСДокумента", 0);
	
	ДанныеОбъекта.Вставить("СуммаУменьшение",    ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение"));
	ДанныеОбъекта.Вставить("СуммаНДСУменьшение", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение"));
	ДанныеОбъекта.Вставить("СуммаУвеличение",    ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение"));
	ДанныеОбъекта.Вставить("СуммаНДСУвеличение", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение"));
	
	Возврат ДанныеОбъекта;
	
КонецФункции

Процедура СоздатьКонтрагентаПоРеквизитам(Знач РеквизитыКонтрагента, Контрагент, Отказ = Ложь) Экспорт
	
	ИНН                     = СокрЛП(РеквизитыКонтрагента.ИНН);
	КПП                     = СокрЛП(РеквизитыКонтрагента.КПП);
	НаименованиеКонтрагента = СокрЛП(РеквизитыКонтрагента.Наименование);
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось создать контрагента, т.к. во входящем электронном документе не заполнен ИНН.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	ОбменСКонтрагентамиПереопределяемый.СсылкаНаОбъектПоИННКПП("Контрагенты", ИНН, КПП, Контрагент);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	
	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	Если СтрДлина(ИНН) > 10 Тогда
		КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель;
	Иначе
		КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
	КонецЕсли;
	
	ЭтоЮрЛицо = КонтрагентОбъект.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо;
	Если ЭтоЮрЛицо Тогда
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(ИНН);
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(ИНН);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда // не удалось получить данные контрагента из ЕГРН
		КонтрагентОбъект.Наименование = НаименованиеКонтрагента;
		КонтрагентОбъект.НаименованиеПолное = НаименованиеКонтрагента;
		КонтрагентОбъект.ИНН = ИНН;
		КонтрагентОбъект.КПП = КПП;
	Иначе
		ЗаполнитьЗначенияСвойств(КонтрагентОбъект, РеквизитыКонтрагента);
		КонтрагентОбъект.НаименованиеПолное = РеквизитыКонтрагента.НаименованиеСокращенное;
		Если ЭтоЮрЛицо Тогда
			ТаблицаКИ = УправлениеКонтактнойИнформацией.НоваяКонтактнаяИнформация(Ложь);
			Если РеквизитыКонтрагента.ЮридическийАдрес <> Неопределено Тогда
				СтрокаКИ = ТаблицаКИ.Добавить();
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
				СтрокаКИ.Значение = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
				
				СтрокаКИ = ТаблицаКИ.Добавить();
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
				СтрокаКИ.Значение = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
				
				СтрокаКИ = ТаблицаКИ.Добавить();
				СтрокаКИ.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
				СтрокаКИ.Значение = РеквизитыКонтрагента.ЮридическийАдрес.КонтактнаяИнформация;
			КонецЕсли;
			
			Если ТаблицаКИ.Количество() > 0 Тогда
				УправлениеКонтактнойИнформацией.УстановитьКонтактнуюИнформациюОбъекта(КонтрагентОбъект, ТаблицаКИ);
			КонецЕсли;
			
			Если Не ПустаяСтрока(КПП) Тогда
				КонтрагентОбъект.КПП = КПП;
			КонецЕсли;
		Иначе
			КонтрагентОбъект.КПП = "";
			СвидетельствоОРегистрации = РеквизитыКонтрагента.СвидетельствоОРегистрации;
			Если СвидетельствоОРегистрации <> Неопределено Тогда
				КонтрагентОбъект.СвидетельствоСерияНомер = "" + СвидетельствоОРегистрации.Серия + " " + СвидетельствоОРегистрации.Номер;
				КонтрагентОбъект.СвидетельствоДатаВыдачи = СвидетельствоОРегистрации.Дата;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	КонтрагентОбъект.Покупатель = Истина;
	КонтрагентОбъект.Поставщик = Истина;
	КонтрагентОбъект.ПрочиеОтношения = Истина;
	
	КонтрагентОбъект.СчетУчетаРасчетовСПокупателем = ПланыСчетов.Управленческий.РасчетыСПокупателями;
	КонтрагентОбъект.СчетУчетаРасчетовСПоставщиком = ПланыСчетов.Управленческий.РасчетыСПоставщиками;
	КонтрагентОбъект.СчетУчетаАвансовПокупателя = ПланыСчетов.Управленческий.РасчетыПоАвансамПолученным;
	КонтрагентОбъект.СчетУчетаАвансовПоставщику = ПланыСчетов.Управленческий.РасчетыПоАвансамВыданным;
	
	Попытка
		Если НЕ ЗначениеЗаполнено(КонтрагентОбъект.СтранаРегистрации) Тогда
			КонтрагентОбъект.СтранаРегистрации = Справочники.СтраныМира.Россия;
		КонецЕсли;
		КонтрагентОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникла ошибка при записи нового элемента справочника ""Контрагенты"".
			|Подробности см. в журнале регистрации.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Создание контрагента'"),
			УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Контрагенты,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	Контрагент = КонтрагентОбъект.Ссылка;

КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхДляФормированияЭД

Функция ПолучитьДанныеЗаказПокупателя(СсылкаНаОбъект) Экспорт

	ДанныеДокумента = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка КАК Ссылка,
	|	ЗаказПокупателя.Номер КАК НомерДокумента,
	|	ЗаказПокупателя.Дата КАК ДатаДокумента,
	|	ЗаказПокупателя.Организация КАК Организация,
	|	ЗаказПокупателя.Контрагент КАК Контрагент,
	|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПокупателя.ВалютаДокумента.Код КАК ВалютаКод,
	|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
	|	ЗаказПокупателя.Курс КАК КурсВзаиморасчетов,
	|	ЗаказПокупателя.БанковскийСчет.НомерСчета КАК НомерСчета,
	|	ЗаказПокупателя.БанковскийСчет.Банк.Наименование КАК БанкНаименование,
	|	ЗаказПокупателя.БанковскийСчет.Банк.Код КАК БИК,
	|	ЗаказПокупателя.БанковскийСчет.Банк.КоррСчет КАК КоррСчет,
	|	ЗаказПокупателя.БанковскийСчет.БанкРасчетов КАК БанкДляРасчетов,
	|	ЗаказПокупателя.Комментарий КАК Комментарий,
	|	ЗаказПокупателя.Договор.НомерДоговора КАК ДоговорНомер,
	|	ЗаказПокупателя.Договор.ДатаДоговора КАК ДоговорДата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	ЗаказПокупателя.НомерВходящегоДокумента КАК НомерПоДаннымКлиента,
	|	ЗаказПокупателя.ДатаВходящегоДокумента КАК ДатаПоДаннымКлиента,
	|	ЗаказПокупателя.Договор.Наименование КАК ДоговорНаименование,
	|	ЗаказПокупателя.АдресДоставки КАК АдресДоставки,
	|	ЗаказПокупателя.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
	|	ЗаказПокупателя.СпособДоставки КАК СпособДоставки,
	|	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ПОДСТРОКА(ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное, 1, 10) = """"
	|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.Наименование
	|		ИНАЧЕ ПОДСТРОКА(ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное, 1, 255)
	|	КОНЕЦ КАК Наименование,
	|	ЗаказПокупателяЗапасы.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
	|	ЗаказПокупателяЗапасы.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмеренияКоэффициент,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПокупателяЗапасы.Количество
	|		ИНАЧЕ ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ЗаказПокупателяЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПокупателяЗапасы.Цена
	|		КОГДА ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент <> 0
	|			ТОГДА ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Сумма / (ЗаказПокупателяЗапасы.Количество * ЗаказПокупателяЗапасы.ЕдиницаИзмерения.Коэффициент) КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ЗаказПокупателяЗапасы.Сумма КАК Сумма,
	|	ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПокупателяЗапасы.СуммаНДС КАК СуммаНДС,
	|	ЗаказПокупателяЗапасы.Ссылка.СуммаВключаетНДС КАК НДСУчтеноВСумме,
	|	ЗаказПокупателяЗапасы.СуммаСкидкиНаценки + ЗаказПокупателяЗапасы.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки + ЗаказПокупателяЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	ЗаказПокупателяЗапасы.Сумма КАК СуммаСНДС,
	|	ЗаказПокупателяЗапасы.Номенклатура.Комментарий КАК Описание,
	|	ЗаказПокупателяЗапасы.Содержание КАК Содержание,
	|	ЗаказПокупателяЗапасы.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы";
	
	Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(СсылкаНаОбъект, Запрос.МенеджерВременныхТаблиц, Истина);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Результат = Запрос.ВыполнитьПакет();
	
	Шапка = Результат[0].Выбрать();
	Шапка.Следующий();
	
	ДанныеДокумента.Вставить("РеквизитыШапки", Шапка);
	
	ТаблицаТоваров = Результат[1].Выгрузить();
	ДанныеДокумента.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	
	Возврат ДанныеДокумента;

КонецФункции

Функция ПолучитьДанныеЗаказПоставщику(СсылкаНаОбъект) Экспорт

	ДанныеДокумента = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Ссылка.Контрагент КАК Владелец,
	|	"""" КАК Идентификатор,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК Упаковка
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	ТаблицаОтбора = Запрос.Выполнить().Выгрузить();
	
	МенеджерТаблиц = Новый МенеджерВременныхТаблиц;
	ОбменСКонтрагентами.СоздатьВременнуюТаблицуСоответствияНоменклатуры(ТаблицаОтбора, "втНоменклатураКонтрагента", МенеджерТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Номер КАК НомерДокумента,
	|	ЗаказПоставщику.Дата КАК ДатаДокумента,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	ЗаказПоставщику.ВалютаДокумента КАК ВалютаДокумента,
	|	ЗаказПоставщику.ВалютаДокумента.Код КАК ВалютаКод,
	|	ЗаказПоставщику.Организация.Префикс КАК Префикс,
	|	ЗаказПоставщику.Курс КАК КурсВзаиморасчетов,
	|	ЗаказПоставщику.БанковскийСчет.НомерСчета КАК НомерСчета,
	|	ЗаказПоставщику.БанковскийСчет.Банк.Наименование КАК БанкНаименование,
	|	ЗаказПоставщику.БанковскийСчет.Банк.Код КАК БИК,
	|	ЗаказПоставщику.БанковскийСчет.Банк.КоррСчет КАК КоррСчет,
	|	ЗаказПоставщику.БанковскийСчет.БанкРасчетов КАК БанкДляРасчетов,
	|	ЗаказПоставщику.Комментарий КАК Комментарий,
	|	ЗаказПоставщику.Договор.НомерДоговора КАК ДоговорНомер,
	|	ЗаказПоставщику.Договор.ДатаДоговора КАК ДоговорДата,
	|	НЕОПРЕДЕЛЕНО КАК ДокументОснование,
	|	ЗаказПоставщику.Договор.Наименование КАК ДоговорНаименование
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Номенклатура КАК Номенклатура,
	|	ЗаказПоставщику.Характеристика КАК Характеристика,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ЗаказПоставщику.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВЫБОР
	|		КОГДА &ПечатьВУпаковках
	|				И ТИПЗНАЧЕНИЯ(ЗаказПоставщику.ЕдиницаИзмерения) <> ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЕСТЬNULL(ЗаказПоставщику.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код, ""0000"")
	|		ИНАЧЕ ЗаказПоставщику.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ВЫБОР
	|		КОГДА &ПечатьВУпаковках
	|				И ТИПЗНАЧЕНИЯ(ЗаказПоставщику.ЕдиницаИзмерения) <> ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				И ЗаказПоставщику.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА ЗаказПоставщику.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ ЗаказПоставщику.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА &ПечатьВУпаковках
	|			ТОГДА ЗаказПоставщику.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	ВЫБОР
	|		КОГДА &ПечатьВУпаковках
	|				ИЛИ ТИПЗНАЧЕНИЯ(ЗаказПоставщику.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПоставщику.Количество
	|		ИНАЧЕ ЗаказПоставщику.Количество * ЗаказПоставщику.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &ПечатьВУпаковках
	|				ИЛИ ТИПЗНАЧЕНИЯ(ЗаказПоставщику.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЗаказПоставщику.Цена
	|		КОГДА ЗаказПоставщику.Количество * ЗаказПоставщику.ЕдиницаИзмерения.Коэффициент <> 0
	|			ТОГДА ЗаказПоставщику.Сумма / (ЗаказПоставщику.Количество * ЗаказПоставщику.ЕдиницаИзмерения.Коэффициент)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	ЗаказПоставщику.Сумма КАК Сумма,
	|	ЗаказПоставщику.СтавкаНДС КАК СтавкаНДС,
	|	ЗаказПоставщику.СуммаНДС КАК СуммаНДС,
	|	ЗаказПоставщику.Ссылка.СуммаВключаетНДС КАК НДСУчтеноВСумме,
	|	0 КАК СуммаСкидки,
	|	0 КАК ПроцентСкидки,
	|	ЗаказПоставщику.Сумма КАК СуммаСНДС,
	|	ЗаказПоставщику.ДатаПоступления КАК ДатаПоступления,
	|	ПОДСТРОКА(ЗаказПоставщику.Содержание, 1, 500) КАК Содержание,
	|	ЗаказПоставщику.Ссылка.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказПоставщику.Номенклатура.Артикул КАК НоменклатураАртикул,
	|	ЗаказПоставщику.Номенклатура.Наименование КАК НоменклатураНаименование,
	|	ПОДСТРОКА(ЗаказПоставщику.Номенклатура.НаименованиеПолное, 1, 255) КАК НоменклатураНаименованиеПолное,
	|	ЕСТЬNULL(ЗаказПоставщику.Характеристика.Наименование, """") КАК ХарактеристикаНаименование
	|ПОМЕСТИТЬ Вт_Товары
	|ИЗ
	|	Документ.ЗаказПоставщику.Запасы КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.Идентификатор, """") КАК ИдентификаторНоменклатурыПоставщика,
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.ИдентификаторНоменклатурыСервиса, """") КАК ИдентификаторНоменклатурыСервиса,
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.ИдентификаторХарактеристикиСервиса, """") КАК ИдентификаторХарактеристикиСервиса,
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.Артикул, """") КАК Артикул,
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.Наименование, """") КАК Наименование,
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.НаименованиеХарактеристики, """") КАК НаименованиеХарактеристики,
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.ЕдиницаИзмерения, """") КАК ЕдиницаИзмеренияПоставщика,
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.ЕдиницаИзмеренияКод, """") КАК ЕдиницаИзмеренияПоставщикаКод,
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.СтавкаНДС, """") КАК СтавкаНДСПоставщика,
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.ШтрихкодыНоменклатуры, """") КАК ШтрихкодыНоменклатурыПоставщика,
	|	ЕСТЬNULL(Вт_НоменклатураПоставщиков.ШтрихкодКомбинации, """") КАК ШтрихкодКомбинацииПоставщика,
	|	Вт_Товары.Номенклатура КАК Номенклатура,
	|	Вт_Товары.Характеристика КАК Характеристика,
	|	Вт_Товары.БазоваяЕдиница КАК БазоваяЕдиница,
	|	Вт_Товары.БазоваяЕдиницаКод КАК БазоваяЕдиницаКод,
	|	Вт_Товары.БазоваяЕдиницаНаименование КАК БазоваяЕдиницаНаименование,
	|	Вт_Товары.БазоваяЕдиницаНаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Вт_Товары.БазоваяЕдиницаМеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Вт_Товары.ЕдиницаИзмеренияКодПоОКЕИ КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	Вт_Товары.ЕдиницаИзмеренияНаименование КАК ЕдиницаИзмеренияНаименование,
	|	Вт_Товары.ЕдиницаИзмеренияКоэффициент КАК ЕдиницаИзмеренияКоэффициент,
	|	Вт_Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Вт_Товары.Количество КАК Количество,
	|	Вт_Товары.Цена КАК Цена,
	|	Вт_Товары.Сумма КАК Сумма,
	|	Вт_Товары.СтавкаНДС КАК СтавкаНДС,
	|	Вт_Товары.СуммаНДС КАК СуммаНДС,
	|	Вт_Товары.НДСУчтеноВСумме КАК НДСУчтеноВСумме,
	|	Вт_Товары.СуммаСкидки КАК СуммаСкидки,
	|	Вт_Товары.ПроцентСкидки КАК ПроцентСкидки,
	|	Вт_Товары.СуммаСНДС КАК СуммаСНДС,
	|	Вт_Товары.ДатаПоступления КАК ДатаПоступления,
	|	Вт_Товары.Содержание КАК Содержание,
	|	Вт_Товары.Контрагент КАК Контрагент,
	|	Вт_Товары.НоменклатураАртикул КАК НоменклатураАртикул,
	|	Вт_Товары.НоменклатураНаименование КАК НоменклатураНаименование,
	|	Вт_Товары.НоменклатураНаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	Вт_Товары.ХарактеристикаНаименование КАК ХарактеристикаНаименование
	|ИЗ
	|	Вт_Товары КАК Вт_Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураКонтрагента КАК Вт_НоменклатураПоставщиков
	|		ПО Вт_Товары.Номенклатура = Вт_НоменклатураПоставщиков.Номенклатура
	|			И Вт_Товары.Характеристика = Вт_НоменклатураПоставщиков.Характеристика
	|			И Вт_Товары.ЕдиницаИзмерения = Вт_НоменклатураПоставщиков.Упаковка";
	
	ИнициализацияТекстаЗапросаПоискаШтрихкодовПоВременнойТаблицеТоваров(Запрос.Текст,, Истина);
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	ВариантПересчета = Константы.ПечатьПользовательскихЕдиницИзмерения.Получить();
	Если ВариантПересчета = Перечисления.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице Тогда
		Запрос.УстановитьПараметр("ПечатьВУпаковках", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПечатьВУпаковках", Ложь);
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Шапка = Результат[0].Выбрать();
	Шапка.Следующий();
	
	ДанныеДокумента.Вставить("РеквизитыШапки", Шапка);
	
	ТаблицаТоваров = Результат[2].Выгрузить();
	ДанныеДокумента.Вставить("ТаблицаТоваров", ТаблицаТоваров);
	
	ШтрихкодыКомбинаций = Результат[5].Выгрузить();
	ШтрихкодыКомбинаций.Индексы.Добавить("Номенклатура, Характеристика, ЕдиницаИзмерения");
	ДанныеДокумента.Вставить("ШтрихкодыКомбинаций", ШтрихкодыКомбинаций);

	ШтрихкодыНоменклатуры = Результат[6].Выгрузить();
	ШтрихкодыНоменклатуры.Индексы.Добавить("Номенклатура");
	ДанныеДокумента.Вставить("ШтрихкодыНоменклатуры", ШтрихкодыНоменклатуры);
	
	Возврат ДанныеДокумента;

КонецФункции

Функция ПолучитьДанныеСчетНаОплату(СсылкаНаОбъект) Экспорт

	ДанныеДокумента = Новый Структура();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплату.Ссылка КАК Ссылка,
	|	СчетНаОплату.Номер КАК НомерДокумента,
	|	СчетНаОплату.Дата КАК ДатаДокумента,
	|	СчетНаОплату.Организация КАК Организация,
	|	СчетНаОплату.Контрагент КАК Контрагент,
	|	СчетНаОплату.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	СчетНаОплату.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетНаОплату.ВалютаДокумента.Код КАК ВалютаКод,
	|	СчетНаОплату.Организация.Префикс КАК Префикс,
	|	СчетНаОплату.Курс КАК КурсВзаиморасчетов,
	|	СчетНаОплату.БанковскийСчет.НомерСчета КАК НомерСчета,
	|	СчетНаОплату.БанковскийСчет.Банк.Наименование КАК БанкНаименование,
	|	СчетНаОплату.БанковскийСчет.Банк.Код КАК БИК,
	|	СчетНаОплату.БанковскийСчет.Банк.КоррСчет КАК КоррСчет,
	|	СчетНаОплату.БанковскийСчет.БанкРасчетов КАК БанкДляРасчетов,
	|	СчетНаОплату.СуммаДокумента КАК СуммаДокумента
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|ГДЕ
	|	СчетНаОплату.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуЗапасы.Ссылка КАК Ссылка,
	|	МАКСИМУМ(СчетНаОплатуЗапасы.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ВТМаксНомерСтрокиЗапасы
	|ИЗ
	|	Документ.СчетНаОплату.Запасы КАК СчетНаОплатуЗапасы
	|ГДЕ
	|	СчетНаОплатуЗапасы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетНаОплатуЗапасы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетНаОплатуЗапасы.НомерСтроки КАК НомерСтроки,
	|	СчетНаОплатуЗапасы.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА СчетНаОплатуЗапасы.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК НаименованиеНоменклатуры,
	|	СчетНаОплатуЗапасы.Номенклатура.Артикул КАК Артикул,
	|	СчетНаОплатуЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СчетНаОплатуЗапасы.Номенклатура.ЕдиницаИзмерения КАК БазоваяЕдиница,
	|	СчетНаОплатуЗапасы.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	СчетНаОплатуЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	СчетНаОплатуЗапасы.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	СчетНаОплатуЗапасы.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВЫБОР
	|		КОГДА &ПечатьВУпаковках
	|				И ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) <> ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА ЕСТЬNULL(СчетНаОплатуЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Код, ""0000"")
	|		ИНАЧЕ СчетНаОплатуЗапасы.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК ЕдиницаИзмеренияКодПоОКЕИ,
	|	ВЫБОР
	|		КОГДА &ПечатьВУпаковках
	|				И ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) <> ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|				И СчетНаОплатуЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА СчетНаОплатуЗапасы.ЕдиницаИзмерения.ЕдиницаИзмеренияПоКлассификатору.Наименование
	|		ИНАЧЕ СчетНаОплатуЗапасы.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК ЕдиницаИзмеренияНаименование,
	|	ВЫБОР
	|		КОГДА &ПечатьВУпаковках
	|			ТОГДА СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕдиницаИзмеренияКоэффициент,
	|	ВЫБОР
	|		КОГДА &ПечатьВУпаковках
	|				ИЛИ ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СчетНаОплатуЗапасы.Количество
	|		ИНАЧЕ СчетНаОплатуЗапасы.Количество * СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА &ПечатьВУпаковках
	|				ИЛИ ТИПЗНАЧЕНИЯ(СчетНаОплатуЗапасы.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения)
	|			ТОГДА СчетНаОплатуЗапасы.Цена
	|		КОГДА СчетНаОплатуЗапасы.Количество * СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент <> 0
	|			ТОГДА ВЫРАЗИТЬ(СчетНаОплатуЗапасы.Сумма / (СчетНаОплатуЗапасы.Количество * СчетНаОплатуЗапасы.ЕдиницаИзмерения.Коэффициент) КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Цена,
	|	СчетНаОплатуЗапасы.Сумма КАК Сумма,
	|	СчетНаОплатуЗапасы.СтавкаНДС КАК СтавкаНДС,
	|	СчетНаОплатуЗапасы.СуммаНДС КАК СуммаНДС,
	|	СчетНаОплатуЗапасы.Всего КАК Всего,
	|	СчетНаОплатуЗапасы.Характеристика КАК Характеристика,
	|	СчетНаОплатуЗапасы.Содержание КАК Содержание,
	|	СчетНаОплатуЗапасы.ПроцентСкидкиНаценки + СчетНаОплатуЗапасы.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	СчетНаОплатуЗапасы.СуммаСкидкиНаценки + СчетНаОплатуЗапасы.СуммаАвтоматическойСкидки КАК СуммаСкидки
	|ИЗ
	|	Документ.СчетНаОплату.Запасы КАК СчетНаОплатуЗапасы
	|ГДЕ
	|	СчетНаОплатуЗапасы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ВТМаксНомерСтрокиЗапасы.НомерСтроки, 0) + 1,
	|	СчетНаОплату.НоменклатураДоставки,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СчетНаОплату.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА СчетНаОплату.НоменклатураДоставки.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(СчетНаОплату.НоменклатураДоставки.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ,
	|	СчетНаОплату.НоменклатураДоставки.Артикул,
	|	СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения,
	|	СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения,
	|	СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения.Код,
	|	СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения.Наименование,
	|	СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения.НаименованиеПолное,
	|	СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения.МеждународноеСокращение,
	|	СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения.Код,
	|	СчетНаОплату.НоменклатураДоставки.ЕдиницаИзмерения.Наименование,
	|	1,
	|	1,
	|	СчетНаОплату.СтоимостьДоставки,
	|	СчетНаОплату.СтоимостьДоставки,
	|	СчетНаОплату.СтавкаНДСДоставки,
	|	СчетНаОплату.СуммаНДСДоставки,
	|	СчетНаОплату.СтоимостьДоставки,
	|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка),
	|	"""",
	|	0,
	|	0
	|ИЗ
	|	Документ.СчетНаОплату КАК СчетНаОплату
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТМаксНомерСтрокиЗапасы КАК ВТМаксНомерСтрокиЗапасы
	|		ПО (ВТМаксНомерСтрокиЗапасы.Ссылка = СчетНаОплату.Ссылка)
	|ГДЕ
	|	СчетНаОплату.Ссылка = &Ссылка
	|	И СчетНаОплату.НоменклатураДоставки <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И СчетНаОплату.СтоимостьДоставки > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	ВариантПересчета = Константы.ПечатьПользовательскихЕдиницИзмерения.Получить();
	Если ВариантПересчета = Перечисления.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице Тогда
		Запрос.УстановитьПараметр("ПечатьВУпаковках", Истина);
	Иначе
		Запрос.УстановитьПараметр("ПечатьВУпаковках", Ложь);
	КонецЕсли;
	
	Результат = Запрос.ВыполнитьПакет();
	
	Шапка = Результат[0].Выбрать();
	Шапка.Следующий();
	
	ДанныеДокумента.Вставить("РеквизитыШапки", Шапка);
	
	ТаблицаРабот = Результат[2].Выгрузить();
	ДанныеДокумента.Вставить("ТаблицаРабот", ТаблицаРабот);
	
	Возврат ДанныеДокумента;

КонецФункции

Функция ПолучитьДанныеАктВыполненныхРабот(СсылкаНаОбъект) Экспорт
	
	ДанныеДокумента = Новый Структура();
	
	Запрос = Новый Запрос();
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.РасходнаяНакладная") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасходнаяНакладная.Ссылка КАК Ссылка,
		|	РасходнаяНакладная.Номер КАК НомерДокумента,
		|	РасходнаяНакладная.Дата КАК ДатаДокумента,
		|	РасходнаяНакладная.Организация КАК Организация,
		|	РасходнаяНакладная.Контрагент КАК Контрагент,
		|	РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	РасходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
		|	РасходнаяНакладная.ВалютаДокумента.Код КАК ВалютаКод,
		|	РасходнаяНакладная.ВалютаДокумента.Наименование КАК ВалютаНаименование,
		|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
		|	РасходнаяНакладная.ДокументОснование КАК ДокументОснование,
		|	РасходнаяНакладная.Договор КАК ДоговорКонтрагента,
		|	РасходнаяНакладная.Договор.ДатаДоговора КАК ДатаДоговора,
		|	РасходнаяНакладная.Договор.НомерДоговора КАК НомерДоговора
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|ГДЕ
		|	РасходнаяНакладная.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасходнаяНакладнаяЗапасы.НомерСтроки КАК НомерСтроки,
		|	РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА РасходнаяНакладнаяЗапасы.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК НаименованиеНоменклатуры,
		|	РасходнаяНакладнаяЗапасы.Номенклатура.Артикул КАК Артикул,
		|	РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
		|	РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	РасходнаяНакладнаяЗапасы.Количество КАК Количество,
		|	РасходнаяНакладнаяЗапасы.Цена КАК Цена,
		|	РасходнаяНакладнаяЗапасы.Сумма КАК Сумма,
		|	РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|	РасходнаяНакладнаяЗапасы.СуммаНДС КАК СуммаНДС,
		|	РасходнаяНакладнаяЗапасы.Всего КАК Всего,
		|	РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
		|	РасходнаяНакладнаяЗапасы.Характеристика.Наименование КАК НаименованиеХарактеристики,
		|	РасходнаяНакладнаяЗапасы.Содержание КАК Содержание,
		|	РасходнаяНакладнаяЗапасы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки
		|ИЗ
		|	Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
		|ГДЕ
		|	РасходнаяНакладнаяЗапасы.Ссылка = &Ссылка
		|	И РасходнаяНакладнаяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка,
		|	ЗаказПокупателя.Номер КАК НомерДокумента,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|				И ЗаказПокупателя.Финиш <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗаказПокупателя.Финиш
		|		ИНАЧЕ ЗаказПокупателя.Дата
		|	КОНЕЦ КАК ДатаДокумента,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
		|	ЗаказПокупателя.ВалютаДокумента.Код КАК ВалютаКод,
		|	ЗаказПокупателя.ВалютаДокумента.Наименование КАК ВалютаНаименование,
		|	ЗаказПокупателя.Курс КАК Курс,
		|	ЗаказПокупателя.Кратность КАК Кратность,
		|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
		|	ЗаказПокупателя.ДокументОснование КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ЗаказПокупателя.Контрагент
		|		ИНАЧЕ ЗаказПокупателя.Грузополучатель
		|	КОНЕЦ КАК Грузополучатель,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ЗаказПокупателя.Организация
		|		ИНАЧЕ ЗаказПокупателя.Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель,
		|	ЗаказПокупателя.Организация КАК Поставщик,
		|	ЗаказПокупателя.Организация.ИНН КАК ИННпоставщика,
		|	ЗаказПокупателя.Организация.КПП КАК КППпоставщика,
		|	ЗаказПокупателя.Контрагент КАК Покупатель,
		|	ЗаказПокупателя.Контрагент.ИНН КАК ИННпокупателя,
		|	ЗаказПокупателя.Контрагент.КПП КАК КППпокупателя,
		|	ЗаказПокупателя.ВидОперации КАК ВидОперации,
		|	ЛОЖЬ КАК ЭтоКомиссия,
		|	ЗаказПокупателя.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
		|	ЗаказПокупателя.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
		|	ЗаказПокупателя.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера,
		|	ЗаказПокупателя.ПодписьГлавногоБухгалтера.Должность КАК ДолжностьГлавногоБухгалтера,
		|	ЗаказПокупателя.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
		|	ЗаказПокупателя.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
		|	НЕОПРЕДЕЛЕНО КАК Перевозчик,
		|	ЗаказПокупателя.Договор.ДатаДоговора КАК ДатаДоговора,
		|	ЗаказПокупателя.Договор.НомерДоговора КАК НомерДоговора,
		|	ЛОЖЬ КАК Исправление,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|				И ЗаказПокупателя.Финиш <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗаказПокупателя.Финиш
		|		ИНАЧЕ ЗаказПокупателя.Дата
		|	КОНЕЦ КАК Дата,
		|	ЗаказПокупателя.ВалютаДокумента.Код КАК КодВалюты,
		|	ЗаказПокупателя.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	ЗаказПокупателя.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	ЗаказПокупателя.Номер КАК Номер,
		|	ЗаказПокупателя.Договор КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказПокупателяРаботы.НомерСтроки КАК НомерСтроки,
		|	ЗаказПокупателяРаботы.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ЗаказПокупателяРаботы.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК НаименованиеНоменклатуры,
		|	ЗаказПокупателяРаботы.Номенклатура.Артикул КАК Артикул,
		|	ЗаказПокупателяРаботы.Номенклатура.Код КАК КодНоменклатуры,
		|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
		|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	ЗаказПокупателяРаботы.Количество КАК Количество,
		|	ЗаказПокупателяРаботы.Цена КАК Цена,
		|	ЗаказПокупателяРаботы.Сумма КАК Сумма,
		|	ЗаказПокупателяРаботы.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПокупателяРаботы.СуммаНДС КАК СуммаНДС,
		|	ЗаказПокупателяРаботы.Всего КАК Всего,
		|	ЗаказПокупателяРаботы.Всего - ЗаказПокупателяРаботы.СуммаНДС КАК СуммаБезНДС,
		|	ЗаказПокупателяРаботы.Всего КАК СуммаСНДС,
		|	ЗаказПокупателяРаботы.Характеристика КАК Характеристика,
		|	ЗаказПокупателяРаботы.Характеристика.Наименование КАК НаименованиеХарактеристики,
		|	ЗаказПокупателяРаботы.Содержание КАК Содержание,
		|	ЗаказПокупателяРаботы.ПроцентСкидкиНаценки КАК ПроцентСкидкиНаценки,
		|	"""" КАК КодСтраныПроисхождения,
		|	"""" КАК НаименованиеСтраныПроисхождения,
		|	"""" КАК НомерТаможеннойДекларации
		|ИЗ
		|	Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
		|ГДЕ
		|	ЗаказПокупателяРаботы.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаказПокупателяЗапасы.НомерСтроки,
		|	ЗаказПокупателяЗапасы.Номенклатура,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ЗаказПокупателяЗапасы.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ,
		|	ЗаказПокупателяЗапасы.Номенклатура.Артикул,
		|	ЗаказПокупателяЗапасы.Номенклатура.Код,
		|	ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
		|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения,
		|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения.Код,
		|	ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения.Наименование,
		|	ЗаказПокупателяЗапасы.Количество,
		|	ЗаказПокупателяЗапасы.Цена,
		|	ЗаказПокупателяЗапасы.Сумма,
		|	ЗаказПокупателяЗапасы.СтавкаНДС,
		|	ЗаказПокупателяЗапасы.СуммаНДС,
		|	ЗаказПокупателяЗапасы.Всего,
		|	ЗаказПокупателяЗапасы.Всего - ЗаказПокупателяЗапасы.СуммаНДС,
		|	ЗаказПокупателяЗапасы.Всего,
		|	ЗаказПокупателяЗапасы.Характеристика,
		|	ЗаказПокупателяЗапасы.Характеристика.Наименование,
		|	ЗаказПокупателяЗапасы.Содержание,
		|	ЗаказПокупателяЗапасы.ПроцентСкидкиНаценки,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателяЗапасы.СтранаПроисхождения = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяССылка)
		|			ТОГДА ""643""
		|		ИНАЧЕ ЗаказПокупателяЗапасы.СтранаПроисхождения.Код
		|	КОНЕЦ,
		|	ЗаказПокупателяЗапасы.СтранаПроисхождения.Наименование,
		|	ЗаказПокупателяЗапасы.НомерГТД.Код
		|ИЗ
		|	ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
		|ГДЕ
		|	ЗаказПокупателяЗапасы.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(СсылкаНаОбъект, Запрос.МенеджерВременныхТаблиц, Истина);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	АктВыполненныхРабот.Ссылка КАК Ссылка,
		|	АктВыполненныхРабот.Номер КАК НомерДокумента,
		|	АктВыполненныхРабот.Дата КАК ДатаДокумента,
		|	АктВыполненныхРабот.НомерИсправления КАК НомерИсправления,
		|	АктВыполненныхРабот.Дата КАК ДатаИсправления,
		|	АктВыполненныхРабот.Организация КАК Организация,
		|	АктВыполненныхРабот.Контрагент КАК Контрагент,
		|	АктВыполненныхРабот.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	АктВыполненныхРабот.ВалютаДокумента КАК ВалютаДокумента,
		|	АктВыполненныхРабот.ВалютаДокумента.Код КАК ВалютаКод,
		|	АктВыполненныхРабот.ВалютаДокумента.Наименование КАК ВалютаНаименование,
		|	АктВыполненныхРабот.Курс КАК Курс,
		|	АктВыполненныхРабот.Кратность КАК Кратность,
		|	АктВыполненныхРабот.Организация.Префикс КАК Префикс,
		|	АктВыполненныхРабот.ДокументОснование КАК ДокументОснование,
		|	НЕОПРЕДЕЛЕНО КАК Грузополучатель,
		|	НЕОПРЕДЕЛЕНО КАК Грузоотправитель,
		|	АктВыполненныхРабот.Организация КАК Поставщик,
		|	АктВыполненныхРабот.Организация.ИНН КАК ИННпоставщика,
		|	АктВыполненныхРабот.Организация.КПП КАК КППпоставщика,
		|	АктВыполненныхРабот.Контрагент КАК Покупатель,
		|	АктВыполненныхРабот.Контрагент.ИНН КАК ИННпокупателя,
		|	АктВыполненныхРабот.Контрагент.КПП КАК КППпокупателя,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации,
		|	ЛОЖЬ КАК ЭтоКомиссия,
		|	АктВыполненныхРабот.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
		|	АктВыполненныхРабот.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
		|	АктВыполненныхРабот.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера,
		|	АктВыполненныхРабот.ПодписьГлавногоБухгалтера.Должность КАК ДолжностьГлавногоБухгалтера,
		|	НЕОПРЕДЕЛЕНО КАК РасшифровкаПодписиКладовщика,
		|	НЕОПРЕДЕЛЕНО КАК ДолжностьКладовщика,
		|	НЕОПРЕДЕЛЕНО КАК Перевозчик,
		|	АктВыполненныхРабот.Договор.ДатаДоговора КАК ДатаДоговора,
		|	АктВыполненныхРабот.Договор.НомерДоговора КАК НомерДоговора,
		|	ЛОЖЬ КАК Исправление,
		|	АктВыполненныхРабот.Дата КАК Дата,
		|	АктВыполненныхРабот.ВалютаДокумента.Код КАК КодВалюты,
		|	АктВыполненныхРабот.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
		|	АктВыполненныхРабот.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
		|	АктВыполненныхРабот.Номер КАК Номер,
		|	АктВыполненныхРабот.Договор КАК ДоговорКонтрагента
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
		|ГДЕ
		|	АктВыполненныхРабот.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктВыполненныхРаботРаботыИУслуги.НомерСтроки КАК НомерСтроки,
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА АктВыполненныхРаботРаботыИУслуги.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(АктВыполненныхРаботРаботыИУслуги.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК НаименованиеНоменклатуры,
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.Артикул КАК Артикул,
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.Код КАК КодНоменклатуры,
		|	АктВыполненныхРаботРаботыИУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
		|	АктВыполненныхРаботРаботыИУслуги.Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		|	АктВыполненныхРаботРаботыИУслуги.Количество КАК Количество,
		|	АктВыполненныхРаботРаботыИУслуги.Цена КАК Цена,
		|	АктВыполненныхРаботРаботыИУслуги.Сумма КАК Сумма,
		|	АктВыполненныхРаботРаботыИУслуги.СтавкаНДС КАК СтавкаНДС,
		|	АктВыполненныхРаботРаботыИУслуги.СуммаНДС КАК СуммаНДС,
		|	АктВыполненныхРаботРаботыИУслуги.Всего КАК Всего,
		|	АктВыполненныхРаботРаботыИУслуги.Всего - АктВыполненныхРаботРаботыИУслуги.СуммаНДС КАК СуммаБезНДС,
		|	АктВыполненныхРаботРаботыИУслуги.Всего КАК СуммаСНДС,
		|	АктВыполненныхРаботРаботыИУслуги.Характеристика КАК Характеристика,
		|	АктВыполненныхРаботРаботыИУслуги.Характеристика.Наименование КАК НаименованиеХарактеристики,
		|	АктВыполненныхРаботРаботыИУслуги.Содержание КАК Содержание,
		|	"""" КАК КодСтраныПроисхождения,
		|	"""" КАК НаименованиеСтраныПроисхождения,
		|	"""" КАК НомерТаможеннойДекларации
		|ИЗ
		|	Документ.АктВыполненныхРабот.РаботыИУслуги КАК АктВыполненныхРаботРаботыИУслуги
		|ГДЕ
		|	АктВыполненныхРаботРаботыИУслуги.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.АктВыполненныхРабот.РаботыИУслуги", "Документ.АктВыполненныхРабот.Запасы");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.АктВыполненныхРабот", "Документ.КорректировкаРеализации");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "АктВыполненныхРабот.Дата КАК ДатаИсправления,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "АктВыполненныхРабот.НомерИсправления КАК НомерИсправления,", "");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Результат = Запрос.ВыполнитьПакет();
	
	Шапка = Результат[0].Выбрать();
	Шапка.Следующий();
	
	ДанныеДокумента.Вставить("РеквизитыШапки", Шапка);
	
	ТаблицаРабот = Результат[1].Выгрузить();
	ДанныеДокумента.Вставить("ТаблицаРабот", ТаблицаРабот);
	
	Возврат ДанныеДокумента;
	
КонецФункции

Функция ПолучитьДанныеРеализацииТоваровИУслуг(СсылкаНаОбъект) Экспорт
	
	Результат = Новый Структура();
	
	// Подготовим данные шапки документа
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Номер КАК Номер,
	|	РеализацияТоваровУслуг.Номер КАК НомерПоДаннымКлиента,
	|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
	|	РеализацияТоваровУслуг.Дата КАК ДатаПоДаннымКлиента,
	|	РеализацияТоваровУслуг.Организация КАК Организация,
	|	РеализацияТоваровУслуг.Организация КАК ЮрФизЛицо,
	|	РеализацияТоваровУслуг.Организация КАК Поставщик,
	|	РеализацияТоваровУслуг.Организация КАК Контрагент,
	|	РеализацияТоваровУслуг.Организация КАК Руководители,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА РеализацияТоваровУслуг.Организация
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.БанковскийСчет КАК БанковскийСчет,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	РеализацияТоваровУслуг.Контрагент КАК Плательщик,
	|	NULL КАК Сделка,
	|	РеализацияТоваровУслуг.Договор.Наименование КАК ДокОснованиеНаименование,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И РеализацияТоваровУслуг.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяССылка)
	|			ТОГДА РеализацияТоваровУслуг.Заказ.Номер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокОснованиеНомер,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Заказ ССЫЛКА Документ.ЗаказПокупателя
	|				И РеализацияТоваровУслуг.Заказ <> ЗНАЧЕНИЕ(Документ.ЗаказПокупателя.ПустаяССылка)
	|			ТОГДА РеализацияТоваровУслуг.Заказ.Дата
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокОснованиеДата,
	|	NULL КАК ВедениеВзаиморасчетов,
	|	РеализацияТоваровУслуг.Подразделение КАК Подразделение,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК ВалютаДокумента,
	|	РеализацияТоваровУслуг.Курс КАК Курс,
	|	РеализацияТоваровУслуг.Кратность КАК Кратность,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НеОблагаетсяНДС)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Ответственный КАК ОтпускРазрешил,
	|	РеализацияТоваровУслуг.СтруктурнаяЕдиница.МОЛ КАК ОтпускПроизвел,
	|	РеализацияТоваровУслуг.Организация.ИНН КАК ИННпоставщика,
	|	РеализацияТоваровУслуг.Организация.КПП КАК КППпоставщика,
	|	РеализацияТоваровУслуг.Контрагент.ИНН КАК ИННпокупателя,
	|	РеализацияТоваровУслуг.Контрагент.КПП КАК КППпокупателя,
	|	РеализацияТоваровУслуг.ВидОперации КАК ВидОперации,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасходнаяНакладная.ПередачаНаКомиссию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКомиссия,
	|	РеализацияТоваровУслуг.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
	|	РеализацияТоваровУслуг.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
	|	РеализацияТоваровУслуг.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера,
	|	РеализацияТоваровУслуг.ПодписьГлавногоБухгалтера.Должность КАК ДолжностьГлавногоБухгалтера,
	|	РеализацияТоваровУслуг.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
	|	РеализацияТоваровУслуг.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
	|	РеализацияТоваровУслуг.Перевозчик КАК Перевозчик,
	|	РеализацияТоваровУслуг.Договор.ДатаДоговора КАК ДатаДоговора,
	|	РеализацияТоваровУслуг.Договор.НомерДоговора КАК НомерДоговора,
	|	ЛОЖЬ КАК Исправление,
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.ВалютаДокумента.Код КАК КодВалюты,
	|	РеализацияТоваровУслуг.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
	|	РеализацияТоваровУслуг.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
	|	РеализацияТоваровУслуг.Договор КАК ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.Договор.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяШтрихкодыУпаковок.Ссылка КАК Ссылка,
	|	РасходнаяНакладнаяШтрихкодыУпаковок.ШтрихкодУпаковки КАК Штрихкод
	|ИЗ
	|	Документ.РасходнаяНакладная.ШтрихкодыУпаковок КАК РасходнаяНакладнаяШтрихкодыУпаковок
	|ГДЕ
	|	РасходнаяНакладнаяШтрихкодыУпаковок.Ссылка = &ТекущийДокумент";
	
	Запрос.УстановитьПараметр("ТекущийДокумент", 	СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ДатаСреза", 			СсылкаНаОбъект.Дата);
	Запрос.УстановитьПараметр("Организация", 		СсылкаНаОбъект.Организация);
	Запрос.УстановитьПараметр("Подразделение", 		СсылкаНаОбъект.Подразделение);
	Запрос.УстановитьПараметр("СтруктурнаяЕдиница", СсылкаНаОбъект.СтруктурнаяЕдиница);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка 			   = РезультатЗапроса[0].Выбрать();
	МаркируемыеТовары  = РезультатЗапроса[1].Выгрузить();
	
	Шапка.Следующий();
	
	Результат.Вставить("РеквизитыШапки", Шапка);
	
	
	// Подготовим данные табличных частей
	
	ТаблицаЗапасы = Новый ТаблицаЗначений;
	
	ТаблицаЗапасы.Колонки.Добавить("Ссылка");
	ТаблицаЗапасы.Колонки.Добавить("НомерСтроки");
	ТаблицаЗапасы.Колонки.Добавить("Артикул");
	ТаблицаЗапасы.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаЗапасы.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаЗапасы.Колонки.Добавить("КодНоменклатуры");
	ТаблицаЗапасы.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаЗапасы.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаЗапасы.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаЗапасы.Колонки.Добавить("Количество");
	ТаблицаЗапасы.Колонки.Добавить("Цена");
	ТаблицаЗапасы.Колонки.Добавить("СуммаБезНДС");
	ТаблицаЗапасы.Колонки.Добавить("СуммаНДС");
	ТаблицаЗапасы.Колонки.Добавить("СуммаСНДС");
	ТаблицаЗапасы.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаЗапасы.Колонки.Добавить("НаименованиеСтраныПроисхождения");
	ТаблицаЗапасы.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаЗапасы.Колонки.Добавить("ТекстДопСв");
	ТаблицаЗапасы.Колонки.Добавить("Акциза");
	ТаблицаЗапасы.Колонки.Добавить("СтавкаНДС");
	ТаблицаЗапасы.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаЗапасы.Колонки.Добавить("Номенклатура");
	ТаблицаЗапасы.Колонки.Добавить("Характеристика");
	ТаблицаЗапасы.Колонки.Добавить("Упаковка");
	ТаблицаЗапасы.Колонки.Добавить("Ид");
	ТаблицаЗапасы.Колонки.Добавить("КодВидаОперации");
	ТаблицаЗапасы.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаЗапасы.Колонки.Добавить("Содержание");
	ТаблицаЗапасы.Колонки.Добавить("КоэффициентЕдиницыИзмерения");
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ПФТолькоВРублях = Шапка.РасчетыВУсловныхЕдиницах;
	
	Ошибки = "";
	
	ТаблицаДанныхДокумента = Документы.РасходнаяНакладная.ДанныеДокументовРегУчет(МассивОбъектов, Ложь, ПФТолькоВРублях, Ошибки);
	
	Если ТипЗнч(ТаблицаДанныхДокумента) = Тип("ТаблицаЗначений")
		И ТаблицаДанныхДокумента.Количество() > 0 Тогда
		
		ТаблицаЗапасыОснований = ТаблицаДанныхДокумента[0].ТаблицаЗапасы;
		
		Если ТипЗнч(ТаблицаЗапасыОснований) = Тип("ТаблицаЗначений") И ТаблицаЗапасыОснований.Количество() > 0 Тогда
			
			СуммаВключаетНДС = ТаблицаДанныхДокумента[0].СуммаВключаетНДС;
			Для каждого СтрокаТовар Из ТаблицаЗапасыОснований Цикл
				
				НоваяСтрока = ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
				
				НоваяСтрока.ЕдиницаИзмеренияКод = СтрокаТовар.ЕдиницаИзмеренияПоОКЕИ_Код;
				НоваяСтрока.ЕдиницаИзмеренияНаименование = СтрокаТовар.ЕдиницаИзмеренияПоОКЕИ_Наименование;
				НоваяСтрока.КодНоменклатуры = СтрокаТовар.ЗапасКод;
				НоваяСтрока.СуммаБезНДС = СтрокаТовар.Сумма;
				НоваяСтрока.СуммаСНДС = СтрокаТовар.Всего;
				НоваяСтрока.НомерТаможеннойДекларации = СтрокаТовар.ПредставлениеГТД;
				НоваяСтрока.КодСтраныПроисхождения = СтрокаТовар.СтранаКод;
				НоваяСтрока.НаименованиеСтраныПроисхождения = СтрокаТовар.СтранаПредставление;
				
				Если СуммаВключаетНДС Тогда
					НоваяСтрока.СуммаБезНДС = СтрокаТовар.Сумма - СтрокаТовар.СуммаНДС;
					НоваяСтрока.Цена = Окр(НоваяСтрока.СуммаБезНДС / ?(СтрокаТовар.Количество = 0, 1, СтрокаТовар.Количество), 2);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					НоваяСтрока.Артикул = НоваяСтрока.Номенклатура.Артикул;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Содержание) Тогда
					НоваяСтрока.НаименованиеНоменклатуры = НоваяСтрока.Содержание;
				Иначе
					РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТовар.Номенклатура, "НаименованиеПолное,Наименование");
					НоваяСтрока.НаименованиеНоменклатуры = РеквизитыНоменклатуры.НаименованиеПолное;
					Если Не ЗначениеЗаполнено(НоваяСтрока.НаименованиеНоменклатуры) Тогда
						НоваяСтрока.НаименованиеНоменклатуры = РеквизитыНоменклатуры.Наименование;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Характеристика) Тогда
					НоваяСтрока.НаименованиеХарактеристики = НоваяСтрока.Характеристика.НаименованиеДляПечати;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.НаименованиеХарактеристики) Тогда
						НоваяСтрока.НаименованиеХарактеристики = НоваяСтрока.Характеристика.Наименование;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ТаблицаТоваров", ТаблицаЗапасы);
	
	Маркировка = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимое(МаркируемыеТовары);
	Результат.Вставить("Маркировка", Маркировка);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеСчетФактуры(СсылкаНаОбъект) Экспорт

	Результат = Новый Структура();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	ЕСТЬNULL(ОтгрузкаТоваровИСМП.Ссылка, ЗНАЧЕНИЕ(Документ.ОтгрузкаТоваровИСМП.ПустаяСсылка)) КАК ОтгрузкаТоваровИСМП
	|ПОМЕСТИТЬ ДокументыОснования
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП КАК ОтгрузкаТоваровИСМП
	|		ПО (СчетФактураДокументыОснования.ДокументОснование ССЫЛКА Документ.РасходнаяНакладная)
	|			И СчетФактураДокументыОснования.ДокументОснование = ОтгрузкаТоваровИСМП.ДокументОснование
	|ГДЕ
	|	СчетФактураДокументыОснования.Ссылка = &ТекущаяСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата КАК Дата,
	|	Документ.Номер КАК Номер,
	|	Документ.ВалютаДокумента.Код КАК КодВалюты,
	|	Документ.ВалютаДокумента.Наименование КАК НаименованиеВалюты,
	|	Документ.ВалютаДокумента.НаименованиеПолное КАК НаименованиеПолноеВалюты,
	|	Документ.НомерИсправления КАК НомерИсправления,
	|	Документ.Дата КАК ДатаИсправления,
	|	NULL КАК ДатаВыставления,
	|	NULL КАК НомерДокументаОснования,
	|	NULL КАК ДатаДокументаОснования,
	|	NULL КАК СчетФактураОснование,
	|	ВЫБОР
	|		КОГДА Документ.ВалютаДокумента = НациональнаяВалюта.Значение.Ссылка
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВИностраннойВалюте,
	|	Документ.Организация КАК Поставщик,
	|	Документ.Организация.ИНН КАК ИННпоставщика,
	|	Документ.Организация.КПП КАК КППпоставщика,
	|	Документ.Контрагент КАК Покупатель,
	|	Документ.Контрагент.ИНН КАК ИННпокупателя,
	|	Документ.Контрагент.КПП КАК КППпокупателя,
	|	"""" КАК ОнЖе,
	|	Документ.Грузоотправитель КАК Грузоотправитель,
	|	Документ.Грузополучатель КАК Грузополучатель,
	|	Документ.ВидОперации КАК ВидОперации,
	|	Документ.Курс КАК Курс,
	|	Документ.Кратность КАК Кратность,
	|	Документ.Исправление КАК Исправление,
	|	Документ.Договор.НомерДоговора КАК НомерДоговора,
	|	Документ.Договор.ДатаДоговора КАК ДатаДоговора,
	|	ЛОЖЬ КАК ЭтоКомиссия,
	|	NULL КАК Перевозчик,
	|	Документ.Организация КАК Организация,
	|	NULL КАК ДокументОснование,
	|	Документ.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
	|	Документ.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
	|	Документ.ПодписьКладовщика.РасшифровкаПодписи КАК РасшифровкаПодписиКладовщика,
	|	Документ.ПодписьКладовщика.Должность КАК ДолжностьКладовщика,
	|	Документ.Договор КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.СчетФактура КАК Документ,
	|	Константа.НациональнаяВалюта КАК НациональнаяВалюта
	|ГДЕ
	|	Документ.Ссылка = &ТекущаяСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОплаты.НомерПлатежноРасчетногоДокумента КАК НомерПРД,
	|	ДокументыОплаты.ДатаПлатежноРасчетногоДокумента КАК ДатаПРД
	|ИЗ
	|	Документ.СчетФактура.ДатаНомерДокументовОплаты КАК ДокументыОплаты
	|ГДЕ
	|	ДокументыОплаты.Ссылка = &ТекущаяСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	ДокументыОснования КАК ДокументыОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходнаяНакладнаяШтрихкодыУпаковок.Ссылка КАК Ссылка,
	|	РасходнаяНакладнаяШтрихкодыУпаковок.ШтрихкодУпаковки КАК Штрихкод
	|ИЗ
	|	Документ.РасходнаяНакладная.ШтрихкодыУпаковок КАК РасходнаяНакладнаяШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыОснования КАК ДокументыОснования
	|		ПО РасходнаяНакладнаяШтрихкодыУпаковок.Ссылка = ДокументыОснования.ДокументОснование
	|			И ДокументыОснования.ОтгрузкаТоваровИСМП = ЗНАЧЕНИЕ(Документ.ОтгрузкаТоваровИСМП.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТекущаяСчетФактура", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Шапка 			   = РезультатЗапроса[1].Выбрать();
	ПлатежныеДокументы = РезультатЗапроса[2].Выгрузить();
	ДокументыОснования = РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	МаркируемыеТовары  = РезультатЗапроса[4].Выгрузить();

	Шапка.Следующий();
	
	Если Шапка.ВидОперации <> Перечисления.ВидыОперацийСчетФактура.Продажа Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нельзя создать электронный документ для СФ с видом операции ""%1""!'"), Шапка.ВидОперации);
		
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Результат.Вставить("РеквизитыШапки", Шапка);
	Результат.Вставить("ПлатежныеДокументы", ПлатежныеДокументы);
	Результат.Вставить("ДокументыОснования", ДокументыОснования);
	
	
	ТаблицаЗапасы = Новый ТаблицаЗначений;
	
	ТаблицаЗапасы.Колонки.Добавить("Ссылка");
	ТаблицаЗапасы.Колонки.Добавить("НомерСтроки");
	ТаблицаЗапасы.Колонки.Добавить("Артикул");
	ТаблицаЗапасы.Колонки.Добавить("НаименованиеНоменклатуры");
	ТаблицаЗапасы.Колонки.Добавить("НаименованиеХарактеристики");
	ТаблицаЗапасы.Колонки.Добавить("КодНоменклатуры");
	ТаблицаЗапасы.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаЗапасы.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаЗапасы.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаЗапасы.Колонки.Добавить("Количество");
	ТаблицаЗапасы.Колонки.Добавить("Цена");
	ТаблицаЗапасы.Колонки.Добавить("СуммаБезНДС");
	ТаблицаЗапасы.Колонки.Добавить("СуммаНДС");
	ТаблицаЗапасы.Колонки.Добавить("СуммаСНДС");
	ТаблицаЗапасы.Колонки.Добавить("КодСтраныПроисхождения");
	ТаблицаЗапасы.Колонки.Добавить("НаименованиеСтраныПроисхождения");
	ТаблицаЗапасы.Колонки.Добавить("НомерТаможеннойДекларации");
	ТаблицаЗапасы.Колонки.Добавить("ТекстДопСв");
	ТаблицаЗапасы.Колонки.Добавить("Акциза");
	ТаблицаЗапасы.Колонки.Добавить("СтавкаНДС");
	ТаблицаЗапасы.Колонки.Добавить("СтавкаНДСТип");
	ТаблицаЗапасы.Колонки.Добавить("Номенклатура");
	ТаблицаЗапасы.Колонки.Добавить("Характеристика");
	ТаблицаЗапасы.Колонки.Добавить("Упаковка");
	ТаблицаЗапасы.Колонки.Добавить("Ид");
	ТаблицаЗапасы.Колонки.Добавить("КодВидаОперации");
	ТаблицаЗапасы.Колонки.Добавить("ДопДанныеПодписанные");
	ТаблицаЗапасы.Колонки.Добавить("Содержание");
	ТаблицаЗапасы.Колонки.Добавить("КоэффициентЕдиницыИзмерения");
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ОбъектыПечати = Новый СписокЗначений;
	Ошибки = "";
	
	ТаблицаОписанияСчетовФактур = Обработки.ПечатьСчетФактура.РазобратьДокументыНаСчетаФактуры(МассивОбъектов, Ложь);
	Обработки.ПечатьСчетФактура.ЗаполнитьДанныеДокументов(ТаблицаОписанияСчетовФактур, ОбъектыПечати, Ложь, Ложь, Ошибки);
	
	Если ТаблицаОписанияСчетовФактур.Количество() > 0
		И ТипЗнч(ТаблицаОписанияСчетовФактур[0].ДанныеДокумента) = Тип("ТаблицаЗначений")
		И ТаблицаОписанияСчетовФактур[0].ДанныеДокумента.Количество() > 0 Тогда
		
		ТаблицаДанныхДокумента = ТаблицаОписанияСчетовФактур[0].ДанныеДокумента;
		ТаблицаЗапасыОснований = ТаблицаДанныхДокумента[0].ТаблицаЗапасы;
		
		Если ТипЗнч(ТаблицаЗапасыОснований) = Тип("ТаблицаЗначений") И ТаблицаЗапасыОснований.Количество() > 0 Тогда
			
			СуммаВключаетНДС = ТаблицаДанныхДокумента[0].СуммаВключаетНДС;
			Для каждого СтрокаТовар Из ТаблицаЗапасыОснований Цикл
				
				НоваяСтрока = ТаблицаЗапасы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовар);
				
				НоваяСтрока.ЕдиницаИзмеренияКод = СтрокаТовар.ЕдиницаИзмеренияПоОКЕИ_Код;
				НоваяСтрока.ЕдиницаИзмеренияНаименование = СтрокаТовар.ЕдиницаИзмеренияПоОКЕИ_Наименование;
				НоваяСтрока.КодНоменклатуры = СтрокаТовар.ЗапасКод;
				НоваяСтрока.СуммаБезНДС = СтрокаТовар.Сумма;
				НоваяСтрока.СуммаСНДС = СтрокаТовар.Всего;
				НоваяСтрока.НомерТаможеннойДекларации = СтрокаТовар.ПредставлениеГТД;
				НоваяСтрока.КодСтраныПроисхождения = СтрокаТовар.СтранаКод;
				НоваяСтрока.НаименованиеСтраныПроисхождения = СтрокаТовар.СтранаПредставление;
				
				Если СуммаВключаетНДС Тогда
					НоваяСтрока.СуммаБезНДС = СтрокаТовар.Сумма - СтрокаТовар.СуммаНДС;
					НоваяСтрока.Цена = Окр(НоваяСтрока.СуммаБезНДС / ?(СтрокаТовар.Количество = 0, 1, СтрокаТовар.Количество), 2);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
					НоваяСтрока.Артикул = НоваяСтрока.Номенклатура.Артикул;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Содержание) Тогда
					НоваяСтрока.НаименованиеНоменклатуры = НоваяСтрока.Содержание;
				Иначе
					РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТовар.Номенклатура, "НаименованиеПолное,Наименование");
					НоваяСтрока.НаименованиеНоменклатуры = РеквизитыНоменклатуры.НаименованиеПолное;
					Если Не ЗначениеЗаполнено(НоваяСтрока.НаименованиеНоменклатуры) Тогда
						НоваяСтрока.НаименованиеНоменклатуры = РеквизитыНоменклатуры.Наименование;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Характеристика) Тогда
					НоваяСтрока.НаименованиеХарактеристики = НоваяСтрока.Характеристика.НаименованиеДляПечати;
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.НаименованиеХарактеристики) Тогда
						НоваяСтрока.НаименованиеХарактеристики = НоваяСтрока.Характеристика.Наименование;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ТаблицаТоваров", ТаблицаЗапасы);
	
	Маркировка = ЭлектронноеВзаимодействиеИСМП.ЧастичноеСодержимое(МаркируемыеТовары);
	Результат.Вставить("Маркировка", Маркировка);
	
	Возврат Результат;
	
КонецФункции

// Функция получает данные для формирования структуры электронного документа ТОРГ - 12
//
Функция ПолучитьДанныеДляТОРГ12(ТекущийДокумент, БезУслуг = Ложь) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|				И ЗаказПокупателя.Финиш <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗаказПокупателя.Финиш
		|		ИНАЧЕ ЗаказПокупателя.Дата
		|	КОНЕЦ КАК ДатаДокумента,
		|	ЗаказПокупателя.Номер КАК НомерДокумента,
		|	ВЫБОР
		|		КОГДА ЗаказПокупателя.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗаказПокупателя.ЗаказНаряд)
		|				И ЗаказПокупателя.Финиш <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|			ТОГДА ЗаказПокупателя.Финиш
		|		ИНАЧЕ ЗаказПокупателя.Дата
		|	КОНЕЦ КАК ДатаИсправления,
		|	"""" КАК НомерИсправления,
		|	ЗаказПокупателя.Организация КАК Руководители,
		|	ЗаказПокупателя.Организация.Префикс КАК Префикс,
		|	ЗаказПокупателя.Организация КАК Организация,
		|	ЗаказПокупателя.БанковскийСчет КАК БанковскийСчет,
		|	ЗаказПокупателя.Контрагент КАК Контрагент,
		|	ЗаказПокупателя.Организация КАК Поставщик,
		|	ЗаказПокупателя.Организация КАК Грузополучатель,
		|	ЗаказПокупателя.Контрагент КАК Грузоотправитель,
		|	ЗаказПокупателя.Контрагент КАК Плательщик,
		|	ЗаказПокупателя.Договор.Представление КАК Основание,
		|	ЗаказПокупателя.Договор.ДатаДоговора КАК ОснованиеДата,
		|	ЗаказПокупателя.Договор.НомерДоговора КАК ОснованиеНомер,
		|	ЗаказПокупателя.ВалютаДокумента КАК ВалютаДокумента,
		|	ЗаказПокупателя.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	ЗаказПокупателя.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
		|	ЗаказПокупателя.Курс КАК Курс,
		|	ЗаказПокупателя.Кратность КАК Кратность,
		|	ЗаказПокупателя.ВалютаДокумента.Код КАК ВалютаКод
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка = &ТекущийДокумент";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РасходнаяНакладная.Дата КАК ДатаДокумента,
		|	РасходнаяНакладная.Номер КАК НомерДокумента,
		|	РасходнаяНакладная.Дата КАК ДатаИсправления,
		|	РасходнаяНакладная.НомерИсправления КАК НомерИсправления,
		|	РасходнаяНакладная.Организация КАК Руководители,
		|	РасходнаяНакладная.Организация.Префикс КАК Префикс,
		|	РасходнаяНакладная.Организация КАК Организация,
		|	РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет,
		|	РасходнаяНакладная.Контрагент КАК Контрагент,
		|	РасходнаяНакладная.Организация КАК Поставщик,
		|	ВЫБОР
		|		КОГДА РасходнаяНакладная.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА РасходнаяНакладная.Контрагент
		|		ИНАЧЕ РасходнаяНакладная.Грузополучатель
		|	КОНЕЦ КАК Грузополучатель,
		|	ВЫБОР
		|		КОГДА РасходнаяНакладная.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА РасходнаяНакладная.Организация
		|		ИНАЧЕ РасходнаяНакладная.Грузоотправитель
		|	КОНЕЦ КАК Грузоотправитель,
		|	РасходнаяНакладная.Контрагент КАК Плательщик,
		|	РасходнаяНакладная.Договор.Представление КАК Основание,
		|	РасходнаяНакладная.Договор.ДатаДоговора КАК ОснованиеДата,
		|	РасходнаяНакладная.Договор.НомерДоговора КАК ОснованиеНомер,
		|	РасходнаяНакладная.ВалютаДокумента,
		|	РасходнаяНакладная.СуммаВключаетНДС,
		|	РасходнаяНакладная.НДСВключатьВСтоимость,
		|	РасходнаяНакладная.Курс,
		|	РасходнаяНакладная.Кратность,
		|	РасходнаяНакладная.ВалютаДокумента.Код КАК ВалютаКод,
		|	РасходнаяНакладная.ДокументОснование КАК ДокументОснование
		|ИЗ
		|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
		|ГДЕ
		|	РасходнаяНакладная.Ссылка = &ТекущийДокумент";
		
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходнаяНакладная", "Документ.КорректировкаРеализации");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходнаяНакладная.ДатаДокумента КАК ДатаИсправления,", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "РасходнаяНакладная.НомерИсправления КАК НомерИсправления,", "");
		КонецЕсли;
	КонецЕсли;
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ИспользоватьПересчет = (НЕ Шапка.ВалютаДокумента = Константы.НациональнаяВалюта.Получить());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ВложенныйЗапрос.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК НаименованиеНоменклатуры,
		|	ВложенныйЗапрос.Номенклатура.Код КАК КодТовара,
		|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Наименование КАК БазоваяЕдиницаНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Код КАК БазоваяЕдиницаКод,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Наименование КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати КАК БазоваяЕдиница,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДокумент КАК ЕдиницаИзмеренияДокумент,
		|	НЕОПРЕДЕЛЕНО КАК ВидУпаковки,
		|	0 КАК КоличествоВОдномМесте,
		|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
		|	ВложенныйЗапрос.СтавкаНДС.Ставка КАК СтавкаНДСЧислом,
		|	&Цена_Параметр КАК Цена,
		|	ВложенныйЗапрос.Количество КАК Количество,
		|	0 КАК КоличествоМест,
		|	&Сумма_Параметр КАК Сумма,
		|	&СуммаНДС_Параметр КАК СуммаНДС,
		|	&Всего_Параметр КАК СуммаСНДС,
		|	1 КАК ID,
		|	0 КАК МассаНетто,
		|	0 КАК МассаБрутто,
		|	НЕОПРЕДЕЛЕНО КАК Упаковка,
		|	ВложенныйЗапрос.Содержание КАК Содержание,
		|	ВложенныйЗапрос.Характеристика КАК Характеристика,
		|	ВложенныйЗапрос.Характеристика.Код КАК КодХарактеристики,
		|	ВложенныйЗапрос.Характеристика.Наименование КАК НаименованиеХарактеристики
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаказПокупателяЗапасы.Номенклатура КАК Номенклатура,
		|		ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДляПечати,
		|		ЗаказПокупателяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
		|		ЗаказПокупателяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|		ЗаказПокупателяЗапасы.Цена КАК Цена,
		|		СУММА(ЗаказПокупателяЗапасы.Количество) КАК Количество,
		|		СУММА(ЗаказПокупателяЗапасы.Сумма) КАК Сумма,
		|		СУММА(ЗаказПокупателяЗапасы.СуммаНДС) КАК СуммаНДС,
		|		СУММА(ЗаказПокупателяЗапасы.Всего) КАК Всего,
		|		МИНИМУМ(ЗаказПокупателяЗапасы.НомерСтроки) КАК НомерСтроки,
		|		ЗаказПокупателяЗапасы.Характеристика КАК Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		|		ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Номенклатура.Комментарий КАК СТРОКА(1000)) КАК Описание
		|	ИЗ
		|		ВТЗаказПокупателяЗапасы КАК ЗаказПокупателяЗапасы
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказПокупателяЗапасы.Номенклатура,
		|		ЗаказПокупателяЗапасы.Номенклатура.ЕдиницаИзмерения,
		|		ЗаказПокупателяЗапасы.ЕдиницаИзмерения,
		|		ЗаказПокупателяЗапасы.СтавкаНДС,
		|		ЗаказПокупателяЗапасы.Цена,
		|		ЗаказПокупателяЗапасы.Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Содержание КАК СТРОКА(1000)),
		|		ВЫРАЗИТЬ(ЗаказПокупателяЗапасы.Номенклатура.Комментарий КАК СТРОКА(1000))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаказПокупателяРаботы.Номенклатура,
		|		ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения,
		|		ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения,
		|		ЗаказПокупателяРаботы.СтавкаНДС,
		|		ЗаказПокупателяРаботы.Цена,
		|		СУММА(ЗаказПокупателяРаботы.Количество),
		|		СУММА(ЗаказПокупателяРаботы.Сумма),
		|		СУММА(ЗаказПокупателяРаботы.СуммаНДС),
		|		СУММА(ЗаказПокупателяРаботы.Всего),
		|		МИНИМУМ(ЗаказПокупателяРаботы.НомерСтроки),
		|		ЗаказПокупателяРаботы.Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Содержание КАК СТРОКА(1000)),
		|		ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Номенклатура.Комментарий КАК СТРОКА(1000))
		|	ИЗ
		|		Документ.ЗаказПокупателя.Работы КАК ЗаказПокупателяРаботы
		|	ГДЕ
		|		ЗаказПокупателяРаботы.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказПокупателяРаботы.Номенклатура,
		|		ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения,
		|		ЗаказПокупателяРаботы.СтавкаНДС,
		|		ЗаказПокупателяРаботы.Цена,
		|		ЗаказПокупателяРаботы.Характеристика,
		|		ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Содержание КАК СТРОКА(1000)),
		|		ВЫРАЗИТЬ(ЗаказПокупателяРаботы.Номенклатура.Комментарий КАК СТРОКА(1000)),
		|		ЗаказПокупателяРаботы.Номенклатура.ЕдиницаИзмерения) КАК ВложенныйЗапрос
		|ГДЕ
		|	&УсловиеФильтраУслуг
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID";
		
		Документы.ЗаказПокупателя.ДобавитьТаблицуЗапасыВМенеджерВременныхТаблиц(ТекущийДокумент, Запрос.МенеджерВременныхТаблиц, Истина);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
		|	ВложенныйЗапрос.Содержание КАК Содержание,
		|	ВЫБОР
		|		КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
		|			ТОГДА ВложенныйЗапрос.Номенклатура.Наименование
		|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
		|	КОНЕЦ КАК НаименованиеНоменклатуры,
		|	ВложенныйЗапрос.Характеристика,
		|	ВложенныйЗапрос.Характеристика.Код КАК КодХарактеристики,
		|	ВложенныйЗапрос.Характеристика.Наименование КАК НаименованиеХарактеристики,
		|	ВложенныйЗапрос.Номенклатура.Код КАК КодТовара,
		|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати КАК БазоваяЕдиница,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Наименование КАК БазоваяЕдиницаНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Код КАК БазоваяЕдиницаКод,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Наименование КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмеренияДокумент КАК ЕдиницаИзмеренияДокумент,
		|	НЕОПРЕДЕЛЕНО КАК ВидУпаковки,
		|	0 КАК КоличествоВОдномМесте,
		|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
		|	ВложенныйЗапрос.СтавкаНДС.Ставка КАК СтавкаНДСЧислом,
		|	&Цена_Параметр КАК Цена,
		|	ВложенныйЗапрос.Количество КАК Количество,
		|	0 КАК КоличествоМест,
		|	&Сумма_Параметр КАК Сумма,
		|	&СуммаНДС_Параметр КАК СуммаНДС,
		|	&Всего_Параметр КАК СуммаСНДС,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	1 КАК ID,
		|	0 КАК МассаНетто,
		|	0 КАК МассаБрутто,
		|	НЕОПРЕДЕЛЕНО КАК Упаковка,
		|	ВложенныйЗапрос.Описание КАК Описание
		|ИЗ
		|	(ВЫБРАТЬ
		|		РасходнаяНакладнаяЗапасы.Номенклатура КАК Номенклатура,
		|		РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДляПечати,
		|		РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
		|		РасходнаяНакладнаяЗапасы.СтавкаНДС КАК СтавкаНДС,
		|		РасходнаяНакладнаяЗапасы.Цена КАК Цена,
		|		СУММА(РасходнаяНакладнаяЗапасы.Количество) КАК Количество,
		|		СУММА(РасходнаяНакладнаяЗапасы.Сумма) КАК Сумма,
		|		СУММА(РасходнаяНакладнаяЗапасы.СуммаНДС) КАК СуммаНДС,
		|		СУММА(РасходнаяНакладнаяЗапасы.Всего) КАК Всего,
		|		МИНИМУМ(РасходнаяНакладнаяЗапасы.НомерСтроки) КАК НомерСтроки,
		|		РасходнаяНакладнаяЗапасы.Характеристика КАК Характеристика,
		|		ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
		|		ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.Комментарий КАК СТРОКА(1000)) КАК Описание
		|	ИЗ
		|		Документ.РасходнаяНакладная.Запасы КАК РасходнаяНакладнаяЗапасы
		|	ГДЕ
		|		РасходнаяНакладнаяЗапасы.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		РасходнаяНакладнаяЗапасы.Номенклатура,
		|		РасходнаяНакладнаяЗапасы.Номенклатура.ЕдиницаИзмерения,
		|		РасходнаяНакладнаяЗапасы.ЕдиницаИзмерения,
		|		РасходнаяНакладнаяЗапасы.СтавкаНДС,
		|		РасходнаяНакладнаяЗапасы.Цена,
		|		РасходнаяНакладнаяЗапасы.Характеристика,
		|		ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Содержание КАК СТРОКА(1000)),
		|		ВЫРАЗИТЬ(РасходнаяНакладнаяЗапасы.Номенклатура.Комментарий КАК СТРОКА(1000))) КАК ВложенныйЗапрос
		|ГДЕ
		|	&УсловиеФильтраУслуг
		|
		|УПОРЯДОЧИТЬ ПО
		|	ID,
		|	НомерСтроки";
		
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.РасходнаяНакладная.Запасы", "Документ.КорректировкаРеализации.Запасы");
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьПересчет Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"Выразить(ВложенныйЗапрос.Цена * &Курс / &Кратность КАК Число(15,2))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"Выразить(ВложенныйЗапрос.Сумма * &Курс / &Кратность КАК Число(15,2))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"Выразить(ВложенныйЗапрос.СуммаНДС * &Курс / &Кратность КАК Число(15,2))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"Выразить(ВложенныйЗапрос.Всего * &Курс / &Кратность КАК Число(15,2))");
		
		Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
		Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"ВложенныйЗапрос.Цена");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"ВложенныйЗапрос.Сумма");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"ВложенныйЗапрос.СуммаНДС");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"ВложенныйЗапрос.Всего");
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФильтраУслуг", 
	?(БезУслуг, "НЕ ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)", "ИСТИНА"));
	
	ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	ДанныеТОРГ12 = Новый Структура();
	ДанныеТОРГ12.Вставить("ДанныеШапки", Шапка);
	ДанныеТОРГ12.Вставить("ТаблицаДокумента", ТаблицаПоТоварам);
	
	Возврат ДанныеТОРГ12;

КонецФункции

// Инициализирует текст запроса поиска штрихкодов комбинации и штрихкодов номенклатуры по табличной части "Запасы" документа,
// в котором есть колонки: Номенклатура, Характеристика, ЕдиницаИзмерения.
// В запросе используется временная таблица "ВТ_Товары", в которой должны быть колонки: Номенклатура, Характеристика, ЕдиницаИзмерения.
// При отсутствии своей временной таблицы необходимо заполнять параметр "ИмяДокумента", и в запросе установить параметр "Ссылка".
// 
// Параметры:
//  ТекстЗапроса    - Строка - текст запроса поиска штрихкодов по данным табличной части документа.
//  ИмяДокумента    - Строка - имя объекта метаданных документа, в котором есть табличная часть "Товары" с колонками:
//                             Номенклатура, Характеристика, ЕдиницаИзмерения.
//  МножествоСсылок - Булево - признак поиска штрихкодов по нескольким ссылкам документов.
//
Процедура ИнициализацияТекстаЗапросаПоискаШтрихкодовПоВременнойТаблицеТоваров(
		ТекстЗапроса, Знач ИмяДокумента = Неопределено, Знач МножествоСсылок = Ложь) Экспорт
		
	ПакетыЗапросов = Новый Массив;
	ПакетыЗапросов.Добавить(ТекстЗапроса);
		
	Если ИмяДокумента <> Неопределено Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Документ.#ИмяДокумента.Запасы КАК Товары
		|ГДЕ
		|	Товары.Ссылка &УсловиеСсылки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ЕдиницаИзмерения";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСсылки", ?(МножествоСсылок, "В (&Ссылка)", "= &Ссылка"));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяДокумента", ИмяДокумента);
		ПакетыЗапросов.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	Штрихкоды.Штрихкод КАК Штрихкод,
	               |	Штрихкоды.Номенклатура КАК Номенклатура,
	               |	Штрихкоды.Характеристика КАК Характеристика,
	               |	Штрихкоды.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ПОМЕСТИТЬ СписокШтрихкодовПоКомбинации
	               |ИЗ
	               |	РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Товары КАК ВТ_Товары
	               |		ПО (ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура)
	               |			И (ВТ_Товары.Характеристика = Штрихкоды.Характеристика)
	               |			И (ТИПЗНАЧЕНИЯ(ВТ_Товары.ЕдиницаИзмерения) = ТИП(Справочник.КлассификаторЕдиницИзмерения) 
				   |				ИЛИ ВТ_Товары.ЕдиницаИзмерения = Штрихкоды.ЕдиницаИзмерения)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Штрихкод
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СписокШтрихкодовПоКомбинации.Штрихкод) КАК КоличествоШтрихкодов,
	               |	СписокШтрихкодовПоКомбинации.Номенклатура КАК Номенклатура,
	               |	СписокШтрихкодовПоКомбинации.Характеристика КАК Характеристика,
	               |	СписокШтрихкодовПоКомбинации.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ПОМЕСТИТЬ ПоискРазличныхКомбинаций
	               |ИЗ
	               |	СписокШтрихкодовПоКомбинации КАК СписокШтрихкодовПоКомбинации
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СписокШтрихкодовПоКомбинации.Номенклатура,
	               |	СписокШтрихкодовПоКомбинации.Характеристика,
	               |	СписокШтрихкодовПоКомбинации.ЕдиницаИзмерения
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КоличествоШтрихкодов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокШтрихкодовПоКомбинации.Штрихкод КАК Штрихкод,
	               |	СписокШтрихкодовПоКомбинации.Номенклатура КАК Номенклатура,
	               |	СписокШтрихкодовПоКомбинации.Характеристика КАК Характеристика,
	               |	СписокШтрихкодовПоКомбинации.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	               |ИЗ
	               |	СписокШтрихкодовПоКомбинации КАК СписокШтрихкодовПоКомбинации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоискРазличныхКомбинаций КАК ПоискРазличныхКомбинаций
	               |		ПО СписокШтрихкодовПоКомбинации.Номенклатура = ПоискРазличныхКомбинаций.Номенклатура
	               |			И СписокШтрихкодовПоКомбинации.Характеристика = ПоискРазличныхКомбинаций.Характеристика
	               |			И СписокШтрихкодовПоКомбинации.ЕдиницаИзмерения = ПоискРазличныхКомбинаций.ЕдиницаИзмерения
	               |ГДЕ
	               |	ПоискРазличныхКомбинаций.КоличествоШтрихкодов = 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Штрихкоды.Штрихкод КАК Штрихкод,
	               |	Штрихкоды.Номенклатура КАК Номенклатура
	               |ИЗ
	               |	ВТ_Товары КАК ВТ_Товары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК Штрихкоды
	               |		ПО ВТ_Товары.Номенклатура = Штрихкоды.Номенклатура";
	
	ПакетыЗапросов.Добавить(ТекстЗапроса);

	ТекстЗапроса = СтрСоединить(ПакетыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	НоменклатураВДокументахСервер.ПреобразоватьТекстЗапросаРегистрШтрихкодыНоменклатуры(ТекстЗапроса);
	
КонецПроцедуры

Процедура ШтрихкодыПоТоварам(НаборТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры) Экспорт
	
	Товары = Новый ТаблицаЗначений;
	Товары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Товары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Товары.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
	
	ТипНабораТоваров = ТипЗнч(НаборТоваров);
	
	Если ТипНабораТоваров = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		НаборТоваров.Сбросить();
		Пока НаборТоваров.Следующий() Цикл
			СтрокаТовара = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара, НаборТоваров);
		КонецЦикла;
		НаборТоваров.Сбросить();
	Иначе
		Для Каждого Товар Из НаборТоваров Цикл
			СтрокаТовара = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовара, Товар);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары", Товары);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ВТ_Товары
	|ИЗ
	|	&Товары КАК Товары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	ЕдиницаИзмерения";
	
	ИнициализацияТекстаЗапросаПоискаШтрихкодовПоВременнойТаблицеТоваров(Запрос.Текст);
	
	ПакетыЗапросов = Запрос.ВыполнитьПакет();
	
	СтруктураДанных = Новый Структура;
	ШтрихкодыКомбинаций = ПакетыЗапросов[3].Выгрузить();
	ШтрихкодыКомбинаций.Индексы.Добавить("Номенклатура, Характеристика, ЕдиницаИзмерения");

	ШтрихкодыНоменклатуры = ПакетыЗапросов[4].Выгрузить();
	ШтрихкодыНоменклатуры.Индексы.Добавить("Номенклатура");
	
КонецПроцедуры

// Добавляет в структуру поле ШтрихкодыНоменклатуры и ШтрихкодКомбинации в сопоставление номенклатуры БЭД.
//
// Параметры:
//  Сопоставление         - Структура        - сопоставление номенклатуры БЭД.
//  ШтрихкодыНоменклатуры - Массив из Строка - набор штрихкодов номенклатуры.
//  ШтрихкодыКомбинаций   - Массив из Строка - набор штрихкодов по комбинации строки: номенклатура, характеристика, упаковка.
//  НоменклатураИБ        - ОпределяемыйТип.НоменклатураБЭД               - ссылка на номенклатуру.
//  ХарактеристикаИБ      - ОпределяемыйТип.ХарактеристикаНоменклатурыБЭД - ссылка на характеристику.
//  ЕдиницаИзмеренияИБ    - ОпределяемыйТип.УпаковкаНоменклатурыБЭД       - ссылка на единицу измерения/упаковку.
//
Процедура ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление, ШтрихкодыНоменклатуры, ШтрихкодыКомбинаций,
		НоменклатураИБ, ХарактеристикаИБ, ЕдиницаИзмеренияИБ) Экспорт
	
	ШтрихкодыТовара = Новый Массив;
	ОтборШтрихкодов = Новый Структура;
	ОтборШтрихкодов.Вставить("Номенклатура", НоменклатураИБ);
	НайденныеСтрокиШтрихкодов = ШтрихкодыНоменклатуры.НайтиСтроки(ОтборШтрихкодов);
	Для Каждого СтрокаШтрихкода Из НайденныеСтрокиШтрихкодов Цикл
		ШтрихкодыТовара.Добавить(СтрокаШтрихкода.Штрихкод);
	КонецЦикла;
	Сопоставление.Вставить("ШтрихкодыНоменклатуры", ШтрихкодыТовара);
	
	ОтборШтрихкодов = Новый Структура;
	ОтборШтрихкодов.Вставить("Номенклатура"    , НоменклатураИБ);
	ОтборШтрихкодов.Вставить("Характеристика"  , ХарактеристикаИБ);
	ОтборШтрихкодов.Вставить("ЕдиницаИзмерения", ЕдиницаИзмеренияИБ);
	СтрокаПоиска = ШтрихкодыКомбинаций.НайтиСтроки(ОтборШтрихкодов);
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Сопоставление.Вставить("ШтрихкодКомбинации", СтрокаПоиска[0].Штрихкод);
	ИначеЕсли ТипЗнч(ЕдиницаИзмеренияИБ) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		ОтборШтрихкодов.Удалить("ЕдиницаИзмерения");
		СтрокаПоиска = ШтрихкодыКомбинаций.НайтиСтроки(ОтборШтрихкодов);
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
			Сопоставление.Вставить("ШтрихкодКомбинации", СтрокаПоиска[0].Штрихкод);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыСоглашениеОбИзмененииСтоимости(ТекущийДокумент, БезУслуг = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорректировкаРеализации.Дата КАК ДатаДокумента,
	|	КорректировкаРеализации.Номер КАК Номер,
	|	КорректировкаРеализации.Организация КАК Руководители,
	|	КорректировкаРеализации.Организация.Префикс КАК Префикс,
	|	КорректировкаРеализации.Организация КАК Организация,
	|	КорректировкаРеализации.БанковскийСчет КАК БанковскийСчет,
	|	КорректировкаРеализации.Контрагент КАК Контрагент,
	|	КорректировкаРеализации.Организация КАК Поставщик,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА КорректировкаРеализации.Контрагент
	|		ИНАЧЕ КорректировкаРеализации.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА КорректировкаРеализации.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА КорректировкаРеализации.Организация
	|		ИНАЧЕ КорректировкаРеализации.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	КорректировкаРеализации.Контрагент КАК Плательщик,
	|	КорректировкаРеализации.Договор.Представление КАК Основание,
	|	КорректировкаРеализации.Договор.ДатаДоговора КАК ОснованиеДата,
	|	КорректировкаРеализации.Договор.НомерДоговора КАК ОснованиеНомер,
	|	КорректировкаРеализации.ВалютаДокумента,
	|	КорректировкаРеализации.СуммаВключаетНДС,
	|	КорректировкаРеализации.НДСВключатьВСтоимость,
	|	КорректировкаРеализации.Курс,
	|	КорректировкаРеализации.Кратность,
	|	КорректировкаРеализации.ВалютаДокумента.Код КАК ВалютаКод,
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации,
	|	КорректировкаРеализации.ВидОперации,
	|	КорректировкаРеализации.НомерИсходногоДокумента,
	|	КорректировкаРеализации.ДатаИсходногоДокумента,
	|	КорректировкаРеализации.НомерИсправленияИсходногоДокумента,
	|	КорректировкаРеализации.ДатаИсправленияИсходногоДокумента,
	|	КорректировкаРеализации.НомерИсправления,
	|	КорректировкаРеализации.Дата КАК ДатаИсправления,
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации КАК ИсправляемыйДокумент,
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации.Номер КАК НомерИсправляемогоДокумента,
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации.Дата КАК ДатаИсправляемогоДокумента,
	|	КорректировкаРеализации.ДокументОснование
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &ТекущийДокумент";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	ИспользоватьПересчет = (НЕ Шапка.ВалютаДокумента = Константы.НациональнаяВалюта.Получить());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Номенклатура КАК Номенклатура,
	|	ВложенныйЗапрос.Содержание КАК Содержание,
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))) = """"
	|			ТОГДА ВложенныйЗапрос.Номенклатура.Наименование
	|		ИНАЧЕ ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК НаименованиеНоменклатуры,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	ВложенныйЗапрос.Номенклатура.Код КАК КодТовара,
	|	ВложенныйЗапрос.Номенклатура.Артикул КАК Артикул,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияДляПечати.Наименование КАК ЕдиницаИзмерения,
	|	ВложенныйЗапрос.ЕдиницаИзмеренияДокумент КАК ЕдиницаИзмеренияДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ВидУпаковки,
	|	0 КАК КоличествоВОдномМесте,
	|	ВложенныйЗапрос.СтавкаНДС КАК СтавкаНДС,
	|	ВложенныйЗапрос.СтавкаНДС.Ставка КАК СтавкаНДСЧислом,
	|	&Цена_Параметр КАК Цена,
	|	ВложенныйЗапрос.Количество КАК Количество,
	|	0 КАК КоличествоМест,
	|	&Сумма_Параметр КАК Сумма,
	|	&СуммаНДС_Параметр КАК СуммаНДС,
	|	&Всего_Параметр КАК СуммаСНДС,
	|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|	1 КАК ID,
	|	0 КАК МассаНетто,
	|	0 КАК МассаБрутто,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка,
	|	ВложенныйЗапрос.Описание КАК Описание,
	|	&ЦенаДоКорректировки_Параметр КАК ЦенаДоКорректировки,
	|	ВложенныйЗапрос.КоличествоДоКорректировки КАК КоличествоДоКорректировки,
	|	&СуммаДоКорректировки_Параметр КАК СуммаДоКорректировки,
	|	&СуммаНДСДоКорректировки_Параметр КАК СуммаНДСДоКорректировки,
	|	&ВсегоДоКорректировки_Параметр КАК СуммаСНДСДоКорректировки
	|ИЗ
	|	(ВЫБРАТЬ
	|		КорректировкаРеализацииЗапасы.Номенклатура КАК Номенклатура,
	|		КорректировкаРеализацииЗапасы.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДляПечати,
	|		КорректировкаРеализацииЗапасы.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|		КорректировкаРеализацииЗапасы.СтавкаНДС КАК СтавкаНДС,
	|		КорректировкаРеализацииЗапасы.Цена КАК Цена,
	|		СУММА(КорректировкаРеализацииЗапасы.Количество) КАК Количество,
	|		СУММА(КорректировкаРеализацииЗапасы.Сумма) КАК Сумма,
	|		СУММА(КорректировкаРеализацииЗапасы.СуммаНДС) КАК СуммаНДС,
	|		СУММА(КорректировкаРеализацииЗапасы.Всего) КАК Всего,
	|		МИНИМУМ(КорректировкаРеализацииЗапасы.НомерСтроки) КАК НомерСтроки,
	|		КорректировкаРеализацииЗапасы.Характеристика КАК Характеристика,
	|		ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Содержание КАК СТРОКА(1000)) КАК Содержание,
	|		ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Номенклатура.Комментарий КАК СТРОКА(1000)) КАК Описание,
	|		СУММА(КорректировкаРеализацииЗапасы.ЦенаДоИзменения) КАК ЦенаДоКорректировки,
	|		СУММА(КорректировкаРеализацииЗапасы.КоличествоДоИзменения) КАК КоличествоДоКорректировки,
	|		СУММА(КорректировкаРеализацииЗапасы.СуммаДоИзменения) КАК СуммаДоКорректировки,
	|		СУММА(КорректировкаРеализацииЗапасы.СуммаНДСДоИзменения) КАК СуммаНДСДоКорректировки,
	|		СУММА(КорректировкаРеализацииЗапасы.ВсегоДоИзменения) КАК ВсегоДоКорректировки
	|	ИЗ
	|		Документ.КорректировкаРеализации.Запасы КАК КорректировкаРеализацииЗапасы
	|	ГДЕ
	|		КорректировкаРеализацииЗапасы.Ссылка = &ТекущийДокумент
	|	
	|	СГРУППИРОВАТЬ ПО
	|		КорректировкаРеализацииЗапасы.Номенклатура,
	|		КорректировкаРеализацииЗапасы.Номенклатура.ЕдиницаИзмерения,
	|		КорректировкаРеализацииЗапасы.ЕдиницаИзмерения,
	|		КорректировкаРеализацииЗапасы.СтавкаНДС,
	|		КорректировкаРеализацииЗапасы.Цена,
	|		КорректировкаРеализацииЗапасы.Характеристика,
	|		ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Содержание КАК СТРОКА(1000)),
	|		ВЫРАЗИТЬ(КорректировкаРеализацииЗапасы.Номенклатура.Комментарий КАК СТРОКА(1000))) КАК ВложенныйЗапрос
	|ГДЕ
	|	&УсловиеФильтраУслуг
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	НомерСтроки";
	
	Если ИспользоватьПересчет Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"Выразить(ВложенныйЗапрос.Цена * &Курс / &Кратность КАК Число(15,2))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"Выразить(ВложенныйЗапрос.Сумма * &Курс / &Кратность КАК Число(15,2))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"Выразить(ВложенныйЗапрос.СуммаНДС * &Курс / &Кратность КАК Число(15,2))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"Выразить(ВложенныйЗапрос.Всего * &Курс / &Кратность КАК Число(15,2))");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЦенаДоКорректировки_Параметр", 		"Выразить(ВложенныйЗапрос.ЦенаДоКорректировки * &Курс / &Кратность КАК Число(15,2))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаДоКорректировки_Параметр", 	"Выразить(ВложенныйЗапрос.СуммаДоКорректировки * &Курс / &Кратность КАК Число(15,2))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДСДоКорректировки_Параметр", 	"Выразить(ВложенныйЗапрос.СуммаНДСДоКорректировки * &Курс / &Кратность КАК Число(15,2))");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВсегоДоКорректировки_Параметр", 	"Выразить(ВложенныйЗапрос.ВсегоДоКорректировки * &Курс / &Кратность КАК Число(15,2))");
		
		Запрос.УстановитьПараметр("Курс",		Шапка.Курс);
		Запрос.УстановитьПараметр("Кратность",	Шапка.Кратность);
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Цена_Параметр", 		"ВложенныйЗапрос.Цена");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Сумма_Параметр", 	"ВложенныйЗапрос.Сумма");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДС_Параметр", 	"ВложенныйЗапрос.СуммаНДС");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Всего_Параметр", 	"ВложенныйЗапрос.Всего");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ЦенаДоКорректировки_Параметр", 		"ВложенныйЗапрос.ЦенаДоКорректировки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаДоКорректировки_Параметр", 	"ВложенныйЗапрос.СуммаДоКорректировки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СуммаНДСДоКорректировки_Параметр", 	"ВложенныйЗапрос.СуммаНДСДоКорректировки");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВсегоДоКорректировки_Параметр", 	"ВложенныйЗапрос.ВсегоДоКорректировки");
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеФильтраУслуг", 
		?(БезУслуг, "НЕ ВложенныйЗапрос.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)", "ИСТИНА"));
	
	ТаблицаПоТоварам = Запрос.Выполнить().Выгрузить();
	
	ДанныеСоглашения = Новый Структура();
	ДанныеСоглашения.Вставить("ДанныеШапки", Шапка);
	ДанныеСоглашения.Вставить("ТаблицаДокумента", ТаблицаПоТоварам);
	
	Возврат ДанныеСоглашения;
	
КонецФункции

Процедура ЗаполнитьРеквизитыУчастниковТОРГ12(ДанныеПечати, СтруктураПараметров) Экспорт
	
	СведенияОПоставщике			= ПолучитьДанныеЮрФизЛица(ДанныеПечати.Организация);
	СведенияОПокупателе			= ПолучитьДанныеЮрФизЛица(ДанныеПечати.Покупатель);
	СведенияОГрузополучателе	= ПолучитьДанныеЮрФизЛица(ДанныеПечати.Грузополучатель);
	СведенияОГрузоотправителе	= ПолучитьДанныеЮрФизЛица(ДанныеПечати.Грузоотправитель);
	
	Если ДанныеПечати.Организация <> ДанныеПечати.Грузоотправитель Тогда
		
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, СведенияОГрузоотправителе, "Факт");
		СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение = ДанныеПечати.Подразделение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУчастникаОбмена(СтруктураУчастника, Участник, СведенияОбУчастнике, ВидАдреса = "Юр") Экспорт
	
	СтруктураУчастника.Вставить("КодОКПО",					СведенияОбУчастнике.КодПоОКПО);
	СтруктураУчастника.Вставить("НаименованиеОрганизации",	СведенияОбУчастнике.ПолноеНаименование);
	СтруктураУчастника.Вставить("ИНН",						СведенияОбУчастнике.ИНН);
	СтруктураУчастника.Вставить("КПП",						СведенияОбУчастнике.КПП);
	СтруктураУчастника.Вставить("КодОКОПФ",					"");
	СтруктураУчастника.Вставить("ЭтоФизЛицо",				СведенияОбУчастнике.ЮрФизЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	
	Если СведенияОбУчастнике.ЮрФизЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		ЗаполнитьФИОиДолжность(СтруктураУчастника, СведенияОбУчастнике.ПолноеНаименование);
		
	КонецЕсли;
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	СтруктураАдреса = Новый Структура;
	ТекстОшибки = "";
	
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(СтруктураАдреса, СведенияОбУчастнике, "Ссылка", ВидАдреса, ТекстОшибки);
	ЗаполнитьАдресВСпискеТиповАдресов(СтруктураУчастника.Адрес, СтруктураАдреса, "Структурированный");
	
	СтруктураУчастника.Вставить("Телефон", СведенияОбУчастнике.Телефоны);
	СтруктураУчастника.Вставить("Факс");
	
	СтруктураБанковскийСчет = СтруктураУчастника.БанковскийСчет;
	СтруктураБанковскийСчет.Вставить("БИК", СведенияОбУчастнике.БИК);
	СтруктураБанковскийСчет.Вставить("НаимБанк", ?(ЗначениеЗаполнено(СведенияОбУчастнике.Банк), СведенияОбУчастнике.Банк.Наименование, ""));
	СтруктураБанковскийСчет.Вставить("НомерСчета ", СведенияОбУчастнике.НомерСчета);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыФизЛица(ДеревоДанных, ИсточникДанных, ТипЛица, Должность = Неопределено) Экспорт
	
	Фамилия = ""; Имя = ""; Отчество = "";
	ФамилияИнициалыФизЛица(ИсточникДанных, Фамилия, Имя, Отчество);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Фамилия", Фамилия);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Имя", Имя);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Отчество", Отчество);
	Если Должность <> Неопределено Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ТипЛица + ".Должность", Должность);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастника(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Структурированный", КорневойЭлементДерева = "") Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН);
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП);
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		ПолныйПуть = ВидУчастника + ".ТипУчастника.ФЛ.ПолноеНаименование";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
		КонецЕсли;
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		Фамилия = ""; Имя = ""; Отчество = "";
		ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Фамилия",
									Фамилия, КорневойЭлементДерева);
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Имя",
									Имя, КорневойЭлементДерева);
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ФЛ.Отчество",
									Отчество, КорневойЭлементДерева);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ВидАдреса = ?(ВидУчастника = "Продавец" ИЛИ ВидУчастника = "Поставщик" ИЛИ ВидУчастника = "Плательщик" ИЛИ ВидУчастника = "Заказчик", "Юр", "Факт");
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.Ссылка, "Ссылка", ВидАдреса, "");
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		ПолныйПуть = ВидУчастника + ".Адрес.Структурированный";
		Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
			ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		Иначе
			ТипАдреса = "Произвольный";
		КонецЕсли;
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Контакт.Телефон";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								ВидУчастника + ".Контакт.Телефон",
								СведенияОбУчастнике.Телефоны, КорневойЭлементДерева);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".БанковскийСчет";
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета)
		И ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть) Тогда
		Банк = "";
		БИК = "";
		ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскийСчет.НомерСчета",
				НомерСчета, КорневойЭлементДерева);
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.НаимБанк",
										Банк.Наименование, КорневойЭлементДерева);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскийСчет.БИК",
										БИК, КорневойЭлементДерева);
		КонецЕсли;
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Руководитель";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Руководитель", Значение) Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Фамилия", Значение.Фамилия, КорневойЭлементДерева);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Имя", Значение.Имя, КорневойЭлементДерева);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Отчество", Значение.Отчество, КорневойЭлементДерева);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть + ".Должность", Значение.Должность, КорневойЭлементДерева);
	КонецЕсли;
	
	ПолныйПуть = ВидУчастника + ".Комментарий";
	Значение = "";
	Если ЭлектронноеВзаимодействие.СуществуетРеквизитВДереве(ДеревоДанных, ПолныйПуть)
		И СведенияОбУчастнике.Свойство("Комментарий", Значение) Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, ПолныйПуть, Значение, КорневойЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "АдресРФ", КорневойЭлементДерева = "") Экспорт
	
	Если СведенияОбУчастнике.Свойство("СтранаРегистрации")
		И ЗначениеЗаполнено(СведенияОбУчастнике.СтранаРегистрации)
		И СведенияОбУчастнике.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
		
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.НаименованиеОрганизации",
									СведенияОбУчастнике.ПолноеНаименование, КорневойЭлементДерева);
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ЮЛ.КПП",
									СведенияОбУчастнике.КПП, КорневойЭлементДерева);
		
	Иначе
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.ИНН",
									СведенияОбУчастнике.ИНН, КорневойЭлементДерева);
		
		Если СведенияОбУчастнике.Свойство("СвидетельствоСерияНомер")
			И СведенияОбУчастнике.Свойство("СвидетельствоДатаВыдачи")
			И ЗначениеЗаполнено(СведенияОбУчастнике.СвидетельствоСерияНомер) Тогда
			
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Свидетельство №%1 от %2'"),
							СведенияОбУчастнике.СвидетельствоСерияНомер,
							Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
			
			ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".ТипУчастника.ИП.СвидетельствоОГосРегистрации",
										Свидетельство, КорневойЭлементДерева);
		КонецЕсли;
		
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);
		
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Фамилия",
									ФИО.Фамилия, КорневойЭлементДерева);
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Имя",
									ФИО.Имя, КорневойЭлементДерева);
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".ТипУчастника.ИП.Отчество",
									ФИО.Отчество, КорневойЭлементДерева);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.Ссылка, "Ссылка", ВидАдреса, "");
	
	ТипАдреса = ?(АдресУчастника.АдресРФ, "АдресРФ", "АдресИнформация");
	
	АдресТекстом = АдресУчастника.АдресТекст;
	КодСтраны = АдресУчастника.КодСтраны;
	
	ЗаполнитьАдресВДеревеУПД(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева);
	Если ТипАдреса = "АдресРФ" И ЗначениеЗаполнено(КодСтраны) Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Адрес.АдресИнформация.КодСтраны",
			КодСтраны, КорневойЭлементДерева);
			
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Адрес.АдресИнформация.АдресТекст",
			АдресТекстом, КорневойЭлементДерева);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.Телефоны) Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.Телефон",
									СведенияОбУчастнике.Телефоны, КорневойЭлементДерева);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.ЭлектроннаяПочта) Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".КонтактныеСведения.ЭлектроннаяПочта",
									СведенияОбУчастнике.ЭлектроннаяПочта, КорневойЭлементДерева);
	КонецЕсли;
	
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		Банк = "";
		БИК = "";
		КоррСчет = "";
		ЗаполнитьЗначениеРеквизитаВДереве(
				ДеревоДанных,
				ВидУчастника + ".БанковскиеРеквизиты.НомерСчета",
				НомерСчета, КорневойЭлементДерева);
				
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.НаименованиеБанка",
										Банк.Наименование, КорневойЭлементДерева);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.БИКБанка",
										БИК, КорневойЭлементДерева);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(
										ДеревоДанных,
										ВидУчастника + ".БанковскиеРеквизиты.КорреспондентскийСчетБанка",
										КоррСчет, КорневойЭлементДерева);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведенияОбУчастнике.КодПоОКПО) Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных, ВидУчастника + ".КодОКПО", СведенияОбУчастнике.КодПоОКПО, КорневойЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеУчастниковУПД_2019(ДеревоДанных, СведенияОбУчастниках, ВидУчастника, ВидАдреса = "АдресРФ", ДатаСведений = '00010101') Экспорт
	
	ТаблицаУчастников = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(
		ДеревоДанных, ВидУчастника);
	ТаблицаУчастников.Колонки.Добавить("СведенияОбУчастнике");
	
	Для Каждого СведенияОбУчастнике Из СведенияОбУчастниках Цикл
		СтрокаУчастника = ТаблицаУчастников.Добавить();
		ДанныеУчастника = ДанныеУчастникаУПД(СведенияОбУчастнике, ВидУчастника, ВидАдреса, ДатаСведений);
		
		Если ВРег(ВидУчастника) = ВРег("СведенияОГрузоотправителе") Тогда
			СтрокаУчастника.Грузоотправитель = ДанныеУчастника;
			СтрокаУчастника.ОнЖе = Ложь;
			ЗаполнитьЗначенияСвойств(СтрокаУчастника, ДанныеУчастника, "СведенияОбУчастнике");
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаУчастника, ДанныеУчастника);
		КонецЕсли;
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаУчастников, ВидУчастника);
		
КонецПроцедуры

Функция ДанныеУчастникаУПД(СведенияОбУчастнике, ВидУчастника, ВидАдреса, ДатаСведений)
	
	Данные = Новый Структура("СведенияОбУчастнике", СведенияОбУчастнике);
	
	// Наименование, ИНН, КПП участника
	Данные.Вставить("ТипУчастника", Новый Структура);
	Если СведенияОбУчастнике.Свойство("СтранаРегистрации")
		И ЗначениеЗаполнено(СведенияОбУчастнике.СтранаРегистрации)
		И СведенияОбУчастнике.СтранаРегистрации <> Справочники.СтраныМира.Россия Тогда
		Данные.ТипУчастника.Вставить("ИЛ", Новый Структура);
		Данные.ТипУчастника.ИЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
	ИначеЕсли СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Данные.ТипУчастника.Вставить("ЮЛ", Новый Структура);
		Данные.ТипУчастника.ЮЛ.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
		Данные.ТипУчастника.ЮЛ.Вставить("ИНН",                     СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ЮЛ.Вставить("КПП",                     СведенияОбУчастнике.КПП);
	Иначе
		ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СведенияОбУчастнике.ПолноеНаименование);

		Данные.ТипУчастника.Вставить("ИП", Новый Структура);
		Данные.ТипУчастника.ИП.Вставить("ИНН",      СведенияОбУчастнике.ИНН);
		Данные.ТипУчастника.ИП.Вставить("Фамилия",  ФИО.Фамилия);
		Данные.ТипУчастника.ИП.Вставить("Имя",      ФИО.Имя);
		Данные.ТипУчастника.ИП.Вставить("Отчество", ФИО.Отчество);
		
		Если СведенияОбУчастнике.Свойство("СвидетельствоСерияНомер")
			И СведенияОбУчастнике.Свойство("СвидетельствоДатаВыдачи")
			И ЗначениеЗаполнено(СведенияОбУчастнике.СвидетельствоСерияНомер) Тогда
			
			Свидетельство = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Свидетельство №%1 от %2'"),
				СведенияОбУчастнике.СвидетельствоСерияНомер,
				Формат(СведенияОбУчастнике.СвидетельствоДатаВыдачи, "ДЛФ=D"));
				
			Данные.ТипУчастника.ИП.Вставить("СвидетельствоОГосРегистрации", Свидетельство);
		КонецЕсли;
	КонецЕсли;
	
	// Контактная информация участника
	Данные.Вставить("Адрес", Новый Структура);
	Данные.Адрес.Вставить("АдресИнформация", Новый Структура("КодСтраны, АдресТекст"));
	
	АдресУчастника = Новый Структура;
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.Ссылка, "Ссылка", ВидАдреса, "");
	
	Если СведенияОбУчастнике.Свойство("АдресДоставки") Тогда
		АдресУчастника.АдресТекст = СведенияОбУчастнике.АдресДоставки;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Данные.Адрес.АдресИнформация, АдресУчастника);
	
	Данные.Вставить("КонтактныеСведения", Новый Структура);
	
	Телефон = "";
	Если СведенияОбУчастнике.Свойство("Телефоны", Телефон) И ЗначениеЗаполнено(Телефон) Тогда
		Данные.КонтактныеСведения.Вставить("Телефон", Телефон);
	КонецЕсли;
	
	ЭлектроннаяПочта = "";
	Если СведенияОбУчастнике.Свойство("ЭлектроннаяПочта", ЭлектроннаяПочта) И ЗначениеЗаполнено(ЭлектроннаяПочта) Тогда
		Данные.КонтактныеСведения.Вставить("ЭлектроннаяПочта", ЭлектроннаяПочта);
	КонецЕсли;
	
	// Банковские реквизиты
	Данные.Вставить("БанковскиеРеквизиты", Новый Структура);
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		Данные.БанковскиеРеквизиты.Вставить("НомерСчета", НомерСчета);		
		Банк =     "";
		БИК =      "";
		КоррСчет = "";
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			Данные.БанковскиеРеквизиты.Вставить("НаименованиеБанка", Банк.Наименование);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			Данные.БанковскиеРеквизиты.Вставить("БИКБанка", БИК);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("КоррСчет", КоррСчет) И ЗначениеЗаполнено(КоррСчет) Тогда
			Данные.БанковскиеРеквизиты.Вставить("КорреспондентскийСчетБанка", КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
	// ОКПО
	КодПоОКПО = "";
	Если СведенияОбУчастнике.Свойство("КодПоОКПО", КодПоОКПО) И ЗначениеЗаполнено(КодПоОКПО) Тогда
		Данные.Вставить("КодОКПО", КодПоОКПО);
	КонецЕсли;
	
	Возврат Данные;

КонецФункции


Процедура ЗаполнитьДанныеГрузоОтправителяПолучателя(ДеревоДанных, СведенияОбУчастнике, ВидУчастника, ВидАдреса = "Структурированный") Экспорт
	
	Если СведенияОбУчастнике.ЮрФизЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.НаименованиеОрганизации",
			СведенияОбУчастнике.ПолноеНаименование);
	Иначе
		Фамилия = ""; Имя = ""; Отчество = "";
		ФамилияИнициалыФизЛица(СведенияОбУчастнике.ПолноеНаименование, Фамилия, Имя, Отчество);
			ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Фамилия",
			Фамилия);
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Имя",
			Имя);
		ЗаполнитьЗначениеРеквизитаВДереве(
			ДеревоДанных,
			ВидУчастника + ".Наименование.ФИОИП.Отчество",
			Отчество);
	КонецЕсли;
	
	АдресУчастника = Новый Структура;
	ВидАдреса = "Факт";
	ОбменСКонтрагентамиПереопределяемый.ПолучитьАдресСтруктурой(АдресУчастника, СведенияОбУчастнике.Ссылка, "Ссылка", ВидАдреса, "");
	
	Если ЗначениеЗаполнено(АдресУчастника) Тогда
		ТипАдреса = ?(АдресУчастника.АдресРФ, "Структурированный", "Иностранный");
		ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФИОиДолжность(СтруктураПриемник, ИсточникДанных, Должность = Неопределено) Экспорт
	
	Если ТипЗнч(ИсточникДанных) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПриемник, ИсточникДанных);
	ИначеЕсли ТипЗнч(ИсточникДанных) = Тип("Строка") Тогда
		Фамилия = ""; 
		Имя = ""; 
		Отчество = "";
		ФамилияИнициалыФизЛица(ИсточникДанных, Фамилия, Имя, Отчество);
		СтруктураПриемник.Вставить("Фамилия", Фамилия);
		СтруктураПриемник.Вставить("Имя", Имя);
		СтруктураПриемник.Вставить("Отчество", Отчество);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Должность) Тогда
		СтруктураПриемник.Вставить("Должность", Должность);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыСделки(ДеревоДокумента, ДанныеШапки, Идентификатор = "договор") Экспорт
	
	ДоговорНаименование = ДанныеШапки.ДоговорНаименование;
	ДоговорНомер = ДанныеШапки.ДоговорНомер;
	ДоговорДата = ДанныеШапки.ДоговорДата;
	
	Если Не ЗначениеЗаполнено(ДоговорНаименование)
		ИЛИ (Не ЗначениеЗаполнено(ДоговорНомер) И Не ЗначениеЗаполнено(ДоговорДата)) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыСделки = Новый ТаблицаЗначений;
	ДокументыСделки.Колонки.Добавить("Наименование");
	ДокументыСделки.Колонки.Добавить("Номер");
	ДокументыСделки.Колонки.Добавить("Дата");
	ДокументыСделки.Колонки.Добавить("Идентификатор");
	
	НоваяСтрока = ДокументыСделки.Добавить();
	НоваяСтрока.Наименование = ДоговорНаименование;
	НоваяСтрока.Номер = ДоговорНомер;
	НоваяСтрока.Дата = ДоговорДата;
	НоваяСтрока.Идентификатор = Идентификатор;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ДокументыСделки, "ДокументыСделки");
	
КонецПроцедуры

Процедура ЗаполнитьОснования(ДеревоДокумента, ДанныеШапки) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеШапки.Основание) 
		ИЛИ Не ЗначениеЗаполнено(ДанныеШапки.ОснованиеДата) Тогда
		Возврат;
	КонецЕсли;
	
	ДокументыОснования = Новый ТаблицаЗначений;
	ДокументыОснования.Колонки.Добавить("ДокОснованиеНаименование");
	ДокументыОснования.Колонки.Добавить("ДокОснованиеНомер");
	ДокументыОснования.Колонки.Добавить("ДокОснованиеДата");
	
	СтрокаДокументыОснования = ДокументыОснования.Добавить();
	СтрокаДокументыОснования.ДокОснованиеНаименование = ДанныеШапки.Основание;
	СтрокаДокументыОснования.ДокОснованиеНомер = ДанныеШапки.ОснованиеНомер;
	СтрокаДокументыОснования.ДокОснованиеДата = ДанныеШапки.ОснованиеДата;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ДокументыОснования, "ДокОснованиеДата",,,
			НСтр("ru = 'Необходимо указать дату договора.'"));
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ДокументыОснования, "Основание");
	
КонецПроцедуры

Процедура ЗаполнитьТранспортнуюНакладную(ДеревоДокумента, ДанныеШапки) Экспорт
	
	ТранспортнаяНакладная = Новый ТаблицаЗначений;
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	
	НоваяСтрока = ТранспортнаяНакладная.Добавить();
	НоваяСтрока.ТранспортнаяНакладнаяНомер = ДанныеШапки.НомерДокумента;
	НоваяСтрока.ТранспортнаяНакладнаяДата = ДанныеШапки.ДатаДокумента;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДокумента, ТранспортнаяНакладная, "ТранспортнаяНакладная");
	
КонецПроцедуры

Процедура ЗаполнитьНомерТДИСтрануПроисхождения(СтрокаТаблицы, Данные, ЭтоКорректировка = Ложь) Экспорт
	
	Если Данные.Свойство("НомерТД") Тогда
		
		СтрокаТаблицы.НомерГТД = НомерТДПолучитьСсылку(Данные.НомерТД);
		
	КонецЕсли;
	
	Если Данные.Свойство("КодСтраныПроисхождения") Тогда
		
		СтрокаТаблицы.СтранаПроисхождения = СтранаПроисхожденияПолучитьСсылку(Данные.КодСтраныПроисхождения);
		
	КонецЕсли;
	
	Если ЭтоКорректировка И Данные.Свойство("НомерТДДоИзменения") Тогда
		
		СтрокаТаблицы.НомерГТДДоИзменения = НомерТДПолучитьСсылку(Данные.НомерТДДоИзменения);
		
	КонецЕсли;
	
	Если ЭтоКорректировка И Данные.Свойство("КодСтраныПроисхожденияДоИзменения") Тогда
		
		СтрокаТаблицы.СтранаПроисхожденияДоИзменения = СтранаПроисхожденияПолучитьСсылку(Данные.КодСтраныПроисхожденияДоИзменения);
		
	КонецЕсли; 

КонецПроцедуры

Функция ПолучитьИДНоменклатуры(Номенклатура, Характеристика, Упаковка) Экспорт
	
	ИДТовара = Номенклатура.УникальныйИдентификатор();
	ИДХарактеристики = ?(ЗначениеЗаполнено(Характеристика), Характеристика.УникальныйИдентификатор(), "");
	ИДУпаковки = ?(ЗначениеЗаполнено(Упаковка), Упаковка.УникальныйИдентификатор(), "");
	
	Возврат Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки);
	
КонецФункции

Функция СтруктураДляСопоставленияНоменклатурыЭД(Номенклатура, Характеристика = Неопределено, Упаковка = Неопределено) Экспорт

	Результат = Новый Структура;
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Вставить("НоменклатураИБ", Номенклатура);
	ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура,
		"Наименование, Артикул, ЕдиницаИзмерения, ЕдиницаИзмерения.Наименование, ЕдиницаИзмерения.Код");
	
	Результат.Вставить("Наименование", ЗначенияРеквизитовНоменклатуры.Наименование);
	Результат.Вставить("Артикул", ЗначенияРеквизитовНоменклатуры.Артикул);
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Результат.Вставить("ХарактеристикаИБ", Характеристика);
		Результат.Вставить("Характеристика", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Характеристика, "Наименование"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		Результат.Вставить("УпаковкаИБ", Упаковка);
		Результат.Вставить("ЕдиницаИзмерения", Упаковка.Наименование);
		Если ТипЗнч(Упаковка) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			ЕдиницаИзмеренияКод = Упаковка.ЕдиницаИзмеренияПоКлассификатору.Код;
			Если НЕ ЗначениеЗаполнено(ЕдиницаИзмеренияКод) Тогда
				ЕдиницаИзмеренияКод = "0000";
			КонецЕсли;
		Иначе
			ЕдиницаИзмеренияКод = Упаковка.Код;
		КонецЕсли;
		Результат.Вставить("ЕдиницаИзмеренияКод", ЕдиницаИзмеренияКод);
	ИначеЕсли ЗначениеЗаполнено(ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмерения) Тогда
		Результат.Вставить("ЕдиницаИзмерения", ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмеренияНаименование);
		Результат.Вставить("ЕдиницаИзмеренияКод", ЗначенияРеквизитовНоменклатуры.ЕдиницаИзмеренияКод);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Процедура ОпределитьУчастниковПоДаннымЭД_2019(ДеревоДанных, ДанныеОбъекта)
	
	СведенияОПродавце = ДеревоДанных.Строки.Найти("СведенияОПродавце", "ПолныйПуть");
	СведенияОПокупателе = ДеревоДанных.Строки.Найти("СведенияОПокупателе", "ПолныйПуть");
	Если СведенияОПродавце.Строки.Количество() > 1
		ИЛИ СведенияОПокупателе.Строки.Количество() > 1 Тогда
		ТекстИсключения = СтрШаблон(НСтр("ru = 'Ошибка загрузки электронной товарной накладной %1 от %2.'"), 
			ДанныеОбъекта.НомерЭД, Формат(ДанныеОбъекта.ДатаЭД,"ДЛФ=D")) + Символы.ПС
			+ НСтр("ru = 'Загрузка сводных накладных не поддерживается.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Комиссионер", Неопределено);
	
	ОсновнаяСтрокаПродавца = Неопределено;
	Для каждого СтрокаПродавца Из СведенияОПродавце.Строки Цикл
		ДанныеОбъекта.Вставить("Контрагент", КонтрагентПоДаннымЭД(СтрокаПродавца, "СведенияОПродавце.НомерСтроки"));
		ОсновнаяСтрокаПродавца = СтрокаПродавца;
		Прервать;
	КонецЦикла;
	Для каждого СтрокаПокупателя Из СведенияОПокупателе.Строки Цикл
		ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(СтрокаПокупателя, "СведенияОПокупателе.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
	СведенияОГрузоотправителе = ДеревоДанных.Строки.Найти("СведенияОГрузоотправителе", "ПолныйПуть");
	Для каждого СтрокаГрузоотправителя Из СведенияОГрузоотправителе.Строки Цикл
		ГрузоотправительОнЖе = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(
			СтрокаГрузоотправителя, "СведенияОГрузоотправителе.НомерСтроки.ОнЖе");
		Если ГрузоотправительОнЖе = Истина Тогда
			ДанныеОбъекта.Вставить("Грузоотправитель", ДанныеОбъекта.Контрагент);
		Иначе
			ДанныеОбъекта.Вставить("Грузоотправитель",
				КонтрагентПоДаннымЭД(СтрокаГрузоотправителя, "СведенияОГрузоотправителе.НомерСтроки.Грузоотправитель"));
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	СведенияОГрузополучателе = ДеревоДанных.Строки.Найти("СведенияОГрузополучателе", "ПолныйПуть");
	Для каждого СтрокаГрузополучателя Из СведенияОГрузополучателе.Строки Цикл
		ДанныеОбъекта.Вставить("Грузополучатель", КонтрагентПоДаннымЭД(СтрокаГрузополучателя, "СведенияОГрузополучателе.НомерСтроки"));
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЕдиныйДокумент

Процедура ЗаполнитьДанныеСчетаФактурыУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДеревоДанныхУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки = ДанныеДляФормированияЭД.РеквизитыШапки;
	
	Если ДанныеШапки.Исправление = Истина Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	ИначеЕсли СтруктураЭД.Свойство("ВидОперацииЭД") Тогда
		ВидОперацииЭД = СтруктураЭД.ВидОперацииЭД;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаТоваров Цикл
		ПризнакТовара = ПризнакТовара(Строка.Номенклатура);
		Если ПризнакТовара = "1" Тогда
			ЕстьТовары = Истина;
		Иначе
			ЕстьУслуги = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СоставСодержания = Новый Массив;
	Если ЕстьТовары Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
	КонецЕсли;
	Если ЕстьУслуги Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
	КонецЕсли;
	СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеШапки.Дата);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", ДанныеДляФормированияЭД.ДокументыОснования);
	
	Если ЗначениеЗаполнено(ДанныеШапки.ДатаДоговора) Тогда
		
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДоговорКонтрагента");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
		
		НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
		НоваяСтрока.ДоговорКонтрагента   = ДанныеШапки.ДоговорКонтрагента;
		
		ОснованиеПечати = "";
		Если ДанныеШапки.Ссылка.Метаданные().Реквизиты.Найти("ОснованиеПечати") <> Неопределено Тогда
			ОснованиеПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеШапки.Ссылка, "ОснованиеПечати");
		КонецЕсли;
		
		Если СтрНайти(ОснованиеПечати, "№") > 0 Тогда
			Поз = СтрНайти(ОснованиеПечати, "№");
			СтрокаНаименование = Сред(ОснованиеПечати, 1, Поз-1);
			СтрокаНаименование = СокрЛП(СтрокаНаименование);
			
			Если ПустаяСтрока(СтрокаНаименование) Тогда
				СтрокаНаименование = НСтр("ru = 'Договор'");
			КонецЕсли;
		Иначе
			СтрокаНаименование = НСтр("ru = 'Договор'");
		КонецЕсли;
		
		НоваяСтрока.ДокументНаименование = СтрокаНаименование;
		НоваяСтрока.ДокументНомер = ДанныеШапки.НомерДоговора;
		НоваяСтрока.ДокументДата = НачалоДня(ДанныеШапки.ДатаДоговора);
		
		// Дополним таблицу оснований параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
		
	КонецЕсли;
	
	ТранспортнаяНакладная = Новый ТаблицаЗначений;
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
	
	Если ЗначениеЗаполнено(ДанныеШапки.Перевозчик) Тогда
		СведенияОПеревозчике = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Перевозчик);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПеревозчике, "СведенияОПеревозчике");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШапки.РасшифровкаПодписиКладовщика) Тогда
		
		КладовщикФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеШапки.РасшифровкаПодписиКладовщика);
		
		Если ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика) Тогда
			// Кладовщик работает в организации
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
			
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", КладовщикФИО.Фамилия);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", КладовщикФИО.Имя);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", КладовщикФИО.Отчество);
		Иначе
			// Кладовщик не работает в организации
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", КладовщикФИО.Фамилия);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", КладовщикФИО.Имя);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", КладовщикФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД // УПД первичка
		ИЛИ ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Комиссия Тогда // передача товаров комиссионеру
		
		ЗаполнитьДеревоДанныхУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхУПД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	ДанныеШапки 	   = ДанныеДляФормированияЭД.РеквизитыШапки;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", ДанныеШапки.Ссылка);
	
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеШапки.Дата, ДанныеШапки.Номер, ДанныеШапки.Организация.Префикс);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", НомерДокумента);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление = Истина Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ДанныеШапки.НомерИсправления);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	Если ДанныеШапки.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс
		ИЛИ ДанныеШапки.ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", "Авансовый");
	Иначе
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", "Реализация");
	КонецЕсли;
	
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпоставщика;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпоставщика;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр");
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
	
	Если НЕ ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель)ИЛИ (ДанныеШапки.Грузоотправитель = "он же") Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОГрузоотправителе.ОнЖе", Истина);
	Иначе
		СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузоотправителе, "СведенияОГрузоотправителе.Грузоотправитель", "Факт");
	КонецЕсли;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе, "СведенияОПокупателе", "Юр");
	
	Грузополучатель = ?(НЕ ЗначениеЗаполнено(ДанныеШапки.Грузополучатель) ИЛИ (ДанныеШапки.Грузополучатель = "он же"),
				СтруктураЭД.Контрагент, ДанныеШапки.Грузополучатель);
	СведенияОГрузополучателе = ПолучитьДанныеЮрФизЛица(Грузополучатель, ДанныеШапки.Дата);
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузополучателе, "СведенияОГрузополучателе", "Факт");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.КодВалюты);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.НаименованиеПолноеВалюты);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ДанныеШапки.Курс);
		
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	Если ДанныеШапки.Исправление = Истина
		И ЗначениеЗаполнено(ДанныеШапки.Ссылка) Тогда
		
		ИсправляемыйСчетФактура = ИсправляемыйСчетФактураВыданный(ДанныеШапки.Ссылка);
		Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
			ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	Если ДанныеДляФормированияЭД.Свойство("ПлатежныеДокументы") Тогда
		ПлатежныеДокументы = Новый ТаблицаЗначений();
		ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
		ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
		
		Для Каждого ПлатежныйДокумент Из ДанныеДляФормированияЭД.ПлатежныеДокументы Цикл
			НовыйПлатежныйДокумент = ПлатежныеДокументы.Добавить();
			НовыйПлатежныйДокумент.ДатаПРД  = ПлатежныйДокумент.ДатаПРД;
			НовыйПлатежныйДокумент.НомерПРД = ПлатежныйДокумент.НомерПРД;
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	КонецЕсли;
	
	ШтрихкодыКомбинаций   = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	Если НЕ ДанныеДляФормированияЭД.Свойство("ШтрихкодыНоменклатуры", ШтрихкодыНоменклатуры)
		ИЛИ НЕ ДанныеДляФормированияЭД.Свойство("ШтрихкодыКомбинаций", ШтрихкодыКомбинаций) Тогда
		ШтрихкодыПоТоварам(ДанныеДляФормированияЭД.ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Признак", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
	ТаблицаТоваров.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Содержание");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировке");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	ТаблицаКодовМаркировки = Неопределено;
	ДанныеДляФормированияЭД.Свойство("Маркировка", ТаблицаКодовМаркировки);
	ОбъектыСОграничениемДлиныКодов = Новый Массив;
	
	ЗаполнениеКодаТовара = СтруктураЭД.ВариантыЗаполненияПолей.ТоварКод;
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаТоваров Цикл
		Если Строка.СуммаБезНДС = 0
			И Строка.СуммаСНДС = 0
			ИЛИ НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.НомерСтроки         = НомерСтроки;
		НоваяСтрока.НомерСтрокиИсходногоДокумента = НомерСтроки;
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных = ПолучитьСтруктуруДопДанныхНоменклатуры(Строка.Номенклатура, 
																														Строка.Характеристика, 
																														Строка.НаименованиеНоменклатуры);
																														
		НоваяСтрока.ТоварНаименование			 = СтруктураДопДанных.Наименование;
		НоваяСтрока.ЕдиницаИзмеренияКод          = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(Строка.ЕдиницаИзмеренияНаименование);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Содержание) Тогда
			НоваяСтрока.ТоварНаименование = НоваяСтрока.Содержание;
		КонецЕсли;
		
		НоваяСтрока.Количество                = Строка.Количество;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = Строка.Цена;
		НоваяСтрока.СтоимостьТоваровБезНалога = Строка.СуммаБезНДС;
		НоваяСтрока.НалоговаяСтавка           = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНалога               = Строка.СуммаНДС;
		НоваяСтрока.СтоимостьТоваровСНалогом  = Строка.СуммаСНДС;
		
		Если ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
			НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(Строка.БазоваяЕдиницаКод);
			НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(Строка.БазоваяЕдиницаНаименование);
			Если Строка.ЕдиницаИзмерения.Коэффициент <> 0 Тогда
				НоваяСтрока.Количество = Строка.Количество * Строка.ЕдиницаИзмерения.Коэффициент;
				НоваяСтрока.ЦенаЗаЕдиницуИзмерения = Окр(Строка.СуммаБезНДС / (Строка.Количество * Строка.ЕдиницаИзмерения.Коэффициент), 2);
			КонецЕсли;
		ИначеЕсли ДанныеДляФормированияЭД.ТаблицаТоваров.Колонки.Найти("КоэффициентЕдиницыИзмерения") <> Неопределено
			И Строка.КоэффициентЕдиницыИзмерения <> 0 Тогда
			НоваяСтрока.Количество = Строка.Количество * Строка.КоэффициентЕдиницыИзмерения;
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения = Окр(Строка.СуммаБезНДС / (Строка.Количество * Строка.КоэффициентЕдиницыИзмерения), 2);
		Иначе
			НоваяСтрока.ЦенаЗаЕдиницуИзмерения = Окр(Строка.СуммаБезНДС / Строка.Количество, 2);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.НомерТаможеннойДекларации) Тогда
			
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод");
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер");
			
			НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			Декларация = НоваяСтрока.СведенияОТаможеннойДекларации.Добавить();
			Декларация.СтранаПроисхожденияКод    = ПолучитьКорректныйКодСтраны(Строка.КодСтраныПроисхождения);
			Декларация.ТаможеннаяДекларацияНомер = ?(ЗначениеЗаполнено(Строка.НомерТаможеннойДекларации), СокрЛП(Строка.НомерТаможеннойДекларации), "");
			НоваяСтрока.СтранаПроисхожденияНаименование = Строка.НаименованиеСтраныПроисхождения;
		КонецЕсли;
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока.СведенияОТаможеннойДекларации, "СтранаПроисхожденияКод",,,
			НСтр("ru = 'Не заполнен код страны происхождения'"));
		
		НоваяСтрока.Признак = ПризнакТовара(Строка.Номенклатура);
		НоваяСтрока.ТоварКод           = СокрЛП(Строка.КодНоменклатуры);
		НоваяСтрока.ТоварИдентификатор = СтруктураДопДанных.ИД;
		
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
		
		Если ТолькоУслуги
			И НоваяСтрока.Признак = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке(НоваяСтрока, Строка, ТаблицаКодовМаркировки, ОбъектыСОграничениемДлиныКодов);
		
		НоваяСтрока.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(Строка.Номенклатура, Строка.Характеристика, Строка.ЕдиницаИзмерения);
		
		Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(Строка.Номенклатура, Строка.Характеристика, Строка.ЕдиницаИзмерения);
		
		Сопоставление.Вставить("Наименование", Строка.НаименованиеНоменклатуры);
		Если ЗначениеЗаполнено(Строка.НаименованиеХарактеристики) Тогда
			Сопоставление.Вставить("Характеристика", Строка.НаименованиеХарактеристики);
		КонецЕсли;
		Сопоставление.Вставить("ЕдиницаИзмерения"   , Строка.ЕдиницаИзмеренияНаименование);
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", Строка.ЕдиницаИзмеренияКод);
		Сопоставление.Вставить("СтавкаНДС", Строка.СтавкаНДС);
		Сопоставление.Вставить("Артикул"  , Строка.Артикул);
		
		ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление, ШтрихкодыНоменклатуры, ШтрихкодыКомбинаций,
			Строка.Номенклатура, Строка.Характеристика, Строка.ЕдиницаИзмерения);
		
		Если ЗаполнениеКодаТовара = "Артикул" Тогда
			НоваяСтрока.ТоварКод = СокрЛП(Строка.Артикул);
		ИначеЕсли ЗаполнениеКодаТовара = "Штрихкод" 
			И НоваяСтрока.Сопоставление.Свойство("ШтрихкодКомбинации") Тогда
			НоваяСтрока.ТоварКод = НоваяСтрока.Сопоставление.ШтрихкодКомбинации;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Отказ = Ложь;
	ЭлектронноеВзаимодействиеИСМП.ПроверитьСведенияОМаркировке(ТаблицаКодовМаркировки, ОбъектыСОграничениемДлиныКодов, Отказ);
	Если Отказ Тогда
		ВидОперации = НСтр("ru = 'Формирование ЭД';
							|en = 'ED generation'");
		ПодробныйТекстОшибки = НСтр("ru = 'Ошибка при формирование ЭД. Неверное указание маркированной продукции.'");
		ТекстСообщения = НСтр("ru = 'Не удалось распределить все штрихкоды упаковок для маркируемых товаров в табличной части.
		| Возможная причина: слишком большое количество кодов в строке, требуется разбиение строки';
		|en = 'Failed to distribute all packaging barcodes for marked products in the tabular section.
		| Possible cause: Too many codes per line, line splitting required'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "ЕдиницаИзмеренияНаименование",,,
		НСтр("ru = 'Не заполнена наименование единицы измерения в справочнике ""Номенклатура"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "ЕдиницаИзмеренияКод",,,
		НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Номенклатура"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "Количество",,,
		НСтр("ru = 'Не указано количество товара в табличной части'"));
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога"));
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	// Обработка ошибки через механизм сообщений пользователю.
	СсылкаНаДокумент = ДанныеДляФормированияЭД.РеквизитыШапки.Ссылка;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварКод", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварНаименование", "Номенклатура", "Объект.НаименованиеПолное");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЦенаЗаЕдиницуИзмерения", СсылкаНаДокумент, "Объект.Товары.Цена",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СтоимостьТоваровБезНалога", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНалога", СсылкаНаДокумент, "Объект.Товары.СуммаНДС",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод", "ЕдиницаИзмерения", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Признак", "Номенклатура", "Объект.ТипНоменклатуры");
	
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеКорректировочногоСчетаФактурыУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДеревоДанныхУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.СчетФактура, "Договор");
	Если ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(Договор.ДатаДоговора) Тогда
		
		ОснованиеКорректировки = Новый ТаблицаЗначений;
		ОснованиеКорректировки.Колонки.Добавить("ДоговорКонтрагента");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
		
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		НоваяСтрока.ДоговорКонтрагента   = Договор;
		НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
		НоваяСтрока.ДокументНомер = Договор.НомерДоговора;
		НоваяСтрока.ДокументДата = НачалоДня(Договор.ДатаДоговора);
		
		// Дополним таблицу оснований параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументНаименование", "ДоговорКонтрагента", "Объект.Наименование");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
	КонецЕсли;
	
	МассивОснований = Новый Массив;
	
	Для Каждого Основание Из ДанныеШапки.ТаблицаРеквизитовОснований Цикл
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№ %1 от %2, с учетом исправления № %3 от %4'"),
									Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"),
									Основание.НомерИсправления, Формат(Основание.ДатаИсправления, "ДЛФ=D"));
		Иначе
			ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№ %1 от %2'"),
									Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"));
		КонецЕсли;
		МассивОснований.Добавить(ОписаниеОснования);
	КонецЦикла;
	
	Если МассивОснований.Количество() > 0 Тогда
		ОписаниеОснований = СтрСоединить(МассивОснований, ", ");
		ОписаниеОснований = НСтр("ru = 'Универсальный передаточный документ'") + " " + ОписаниеОснований;
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПередаточныхДокументов",
																	ОписаниеОснований);
	КонецЕсли;
																
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		
		ЗаполнитьДеревоДанныхУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхУКД(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры", ДанныеДляФормированияЭД.СчетФактура);
	
	Префикс = "";
	Если ТипЗнч(ДанныеШапки.Поставщик) = Тип("СправочникСсылка.Организации") Тогда
		Префикс = ДанныеШапки.Поставщик.Префикс;
	КонецЕсли;
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеШапки.Дата, ДанныеШапки.Номер, Префикс);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", НомерДокумента);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление = Истина Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ДанныеШапки.НомерИсправленияКорректировочного);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ДанныеШапки.ДатаИсправленияКорректировочного);
	КонецЕсли;
		
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидДокумента", "Корректировка");
	
	Если ДанныеШапки.ТаблицаРеквизитовОснований.Количество() > 0 Тогда
		Основание = ДанныеШапки.ТаблицаРеквизитовОснований[0];
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеШапки.Дата, Основание.НомерСчетаФактуры, Префикс);
		
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", НомерДокумента);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Основание.ДатаСчетаФактуры);
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента",
				Основание.НомерИсправления);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента",
				Основание.ДатаИсправления);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпродавца;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпродавца;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр");
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
		
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе,      "СведенияОПокупателе", "Юр");
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе,      "СведенияОКомиссионере", "Юр");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.Валюта.Код);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.Валюта.НаименованиеПолное);
		
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДанныеШапки.Дата, Новый Структура("Валюта", ДанныеШапки.Валюта));
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", СтруктураПоВалюте.Курс);
	
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	ИсправляемыйСчетФактура = ИсправляемыйСчетФактураВыданный(ДанныеДляФормированияЭД.СчетФактура);
	Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
		ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
	КонецЕсли;
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда // УКД СФ без первичного документа
		
		ОснованиеДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.СчетФактура, "Договор");
		
		Если ЗначениеЗаполнено(ОснованиеДоговор.ДатаДоговора)
			И ЗначениеЗаполнено(ОснованиеДоговор.НомерДоговора) Тогда
			
			ОснованиеКорректировки = Новый ТаблицаЗначений;
			ОснованиеКорректировки.Колонки.Добавить("ДоговорКонтрагента");
			ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
			ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
			ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
			ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
			
			НоваяСтрока = ОснованиеКорректировки.Добавить();
			НоваяСтрока.ДоговорКонтрагента   = ОснованиеДоговор;
			НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
			НоваяСтрока.ДокументНомер = ОснованиеДоговор.НомерДоговора;
			НоваяСтрока.ДокументДата = НачалоДня(ОснованиеДоговор.ДатаДоговора);
			
			// Дополним таблицу оснований параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНаименование", "ДоговорКонтрагента", "Объект.Наименование");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		КонецЕсли;
		
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
		
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	НомерСтроки = 1;
	ТолькоУслуги = Ложь;
	
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НомерСтрокиИсходногоДокумента = НомерСтроки;
		НоваяСтрока.ТоварНаименование        = Строка.НаименованиеНоменклатуры;
		НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод                = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.КоличествоДоКорректировки = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество                = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки    = Строка.ЦенаДоИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения                   = Строка.ЦенаПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалога                = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение      = Строка.РазницаБезНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение      = Строка.РазницаБезНДСУменьшение;
		НоваяСтрока.НалоговаяСтавкаДоКорректировки = Строка.СтавкаНДС;
		НоваяСтрока.НалоговаяСтавка                = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНалогаДоКорректировки = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНалога                = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаНалогаУвеличение      = Строка.РазницаНДСУвеличение;
		НоваяСтрока.СуммаНалогаУменьшение      = Строка.РазницаНДСУменьшение;
		НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = Строка.СтоимостьСНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровСНалогом                = Строка.СтоимостьСНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровСНалогомУвеличение      = Строка.РазницаСНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровСНалогомУменьшение      = Строка.РазницаСНДСУменьшение;
		НоваяСтрока.ТоварИдентификатор = Строка.Товар.УникальныйИдентификатор();
		
		Если ТолькоУслуги
			И ПризнакТовара(НоваяСтрока.Товар) = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Строка.Товар;
		НоваяСтрока.ЕдиницаИзмерения = Строка.Товар.ЕдиницаИзмерения;
		
		НоваяСтрока.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(Строка.Товар, Строка.Характеристика, Строка.Товар.ЕдиницаИзмерения);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- значения колонок ""Сумма"", ""НДС"", ""Количество"" до и после корректировки не отличаются'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение",
		ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение",
		ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение",
		ТаблицаТоваров.Итог("СуммаНалогаУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение",
		ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение",
		ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение",
		ТаблицаТоваров.Итог("СуммаНалогаУменьшение"),
		ТекстОшибки);
	
	// Обработка ошибки через механизм сообщений пользователю.
	Если ДанныеДляФормированияЭД.ДанныеШапки.Свойство("СсылкаНаОбъект") Тогда
		СсылкаНаДокумент = ДанныеДляФормированияЭД.ДанныеШапки.СсылкаНаОбъект;
	Иначе
		СсылкаНаДокумент = ДанныеДляФормированияЭД.Ссылка;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварКод", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварНаименование", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"КоличествоДоКорректировки", СсылкаНаДокумент, "Объект.Товары.КоличествоДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЦенаЗаЕдиницуИзмерения", СсылкаНаДокумент, "Объект.Товары.Цена",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЦенаЗаЕдиницуИзмеренияДоКорректировки", СсылкаНаДокумент, "Объект.Товары.ЦенаДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СтоимостьТоваровБезНалога", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СтоимостьТоваровБезНалогаДоКорректировки", СсылкаНаДокумент, "Объект.Товары.СуммаДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНалога", СсылкаНаДокумент, "Объект.Товары.СуммаНДС",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНалогаДоКорректировки", СсылкаНаДокумент, "Объект.Товары.СуммаНДСДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод", "ЕдиницаИзмерения", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКодДоКорректировки", "ЕдиницаИзмерения", "Объект.Код");
	
	// Обработка ошибки через упрощенный механизм
	ТекстОшибки = НСтр("ru = 'для формирования электронного документа необходимо указать налоговую ставку'");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"НалоговаяСтавка",,, ТекстОшибки);
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"НалоговаяСтавкаДоКорректировки",,, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

#КонецОбласти

#Область ЕдиныйДокумент_2019

Процедура ЗаполнитьДанныеСчетаФактурыУПД_2019(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДеревоДанныхУПД_2019(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУПД_2019(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки = ДанныеДляФормированияЭД.РеквизитыШапки;
	
	Если ДанныеШапки.Исправление = Истина Тогда
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление;
	ИначеЕсли СтруктураЭД.Свойство("ВидОперацииЭД") Тогда
		ВидОперацииЭД = СтруктураЭД.ВидОперацииЭД;
	Иначе
		ВидОперацииЭД = Перечисления.ВидыОперацийЭД.ПродажаКомиссия;
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации", ВидОперацииЭД);
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаТоваров Цикл
		ПризнакТовара = ПризнакТовара(Строка.Номенклатура);
		Если ПризнакТовара = "1" Тогда
			ЕстьТовары = Истина;
		Иначе
			ЕстьУслуги = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СоставСодержания = Новый Массив;
	Если ЕстьТовары Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Товары переданы.'"));
	КонецЕсли;
	Если ЕстьУслуги Тогда
		СоставСодержания.Добавить(НСтр("ru = 'Услуги оказаны в полном объеме.'"));
	КонецЕсли;
	СодержаниеОперации = СтрСоединить(СоставСодержания, " ");
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", СодержаниеОперации);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаОтгрузкиТоваров", ДанныеШапки.Дата);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияДокументаОтгрузки", ДанныеДляФормированияЭД.ДокументыОснования);
	
	Если ЗначениеЗаполнено(ДанныеШапки.ДатаДоговора) Тогда
		
		ОснованиеОтгрузкиТоваров = Новый ТаблицаЗначений;
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДоговорКонтрагента");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНаименование");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументНомер");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДата");
		ОснованиеОтгрузкиТоваров.Колонки.Добавить("ДокументДопСведения");
		
		НоваяСтрока = ОснованиеОтгрузкиТоваров.Добавить();
		НоваяСтрока.ДоговорКонтрагента   = ДанныеШапки.ДоговорКонтрагента;
		
		ОснованиеПечати = "";
		Если ДанныеШапки.Ссылка.Метаданные().Реквизиты.Найти("ОснованиеПечати") <> Неопределено Тогда
			ОснованиеПечати = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеШапки.Ссылка, "ОснованиеПечати");
		КонецЕсли;
		
		Если СтрНайти(ОснованиеПечати, "№") > 0 Тогда
			Поз = СтрНайти(ОснованиеПечати, "№");
			СтрокаНаименование = Сред(ОснованиеПечати, 1, Поз-1);
			СтрокаНаименование = СокрЛП(СтрокаНаименование);
			
			Если ПустаяСтрока(СтрокаНаименование) Тогда
				СтрокаНаименование = НСтр("ru = 'Договор'");
			КонецЕсли;
		Иначе
			СтрокаНаименование = НСтр("ru = 'Договор'");
		КонецЕсли;
		
		НоваяСтрока.ДокументНаименование = СтрокаНаименование;
		НоваяСтрока.ДокументНомер = ДанныеШапки.НомерДоговора;
		НоваяСтрока.ДокументДата = НачалоДня(ДанныеШапки.ДатаДоговора);
		
		// Дополним таблицу оснований параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеОтгрузкиТоваров, "ОснованиеОтгрузкиТоваров");
		
	КонецЕсли;
	
	ТранспортнаяНакладная = Новый ТаблицаЗначений;
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяНомер");
	ТранспортнаяНакладная.Колонки.Добавить("ТранспортнаяНакладнаяДата");
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТранспортнаяНакладная, "ТранспортнаяНакладная");
	
	Если ЗначениеЗаполнено(ДанныеШапки.Перевозчик) Тогда
		СведенияОПеревозчике = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Перевозчик);
		ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПеревозчике, "СведенияОПеревозчике");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеШапки.РасшифровкаПодписиКладовщика) Тогда
		
		КладовщикФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ДанныеШапки.РасшифровкаПодписиКладовщика);
		
		Если ЗначениеЗаполнено(ДанныеШапки.ДолжностьКладовщика) Тогда
			// Кладовщик работает в организации
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Должность", Строка(ДанныеШапки.ДолжностьКладовщика));
			
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Фамилия", КладовщикФИО.Фамилия);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Имя", КладовщикФИО.Имя);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.РаботникОрганизацииПродавца.Отчество", КладовщикФИО.Отчество);
		Иначе
			// Кладовщик не работает в организации
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Фамилия", КладовщикФИО.Фамилия);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Имя", КладовщикФИО.Имя);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
				"СведенияОЛицеПередавшемТовары.ИноеЛицо.ФЛ.Отчество", КладовщикФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДОПУПД // УПД первичка
		ИЛИ ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Комиссия Тогда // передача товаров комиссионеру
		
		ЗаполнитьДеревоДанныхУПД_2019(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхУПД_2019(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	ДанныеШапки 	   = ДанныеДляФормированияЭД.РеквизитыШапки;
	
	ВидСчетаФактуры = "Реализация";
	ОбстоятельстваФормированияСФ = "1";
	
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", ВидСчетаФактуры);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ОбстоятельстваФормированияСФ", ОбстоятельстваФормированияСФ);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаСчетаФактуры", ДанныеШапки.Ссылка);
	
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеШапки.Дата, ДанныеШапки.Номер, ДанныеШапки.Организация.Префикс);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", НомерДокумента);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление = Истина Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления", ДанныеШапки.НомерИсправления);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",  ДанныеШапки.ДатаИсправления);
	КонецЕсли;
	
	Если ДанныеШапки.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Аванс
		ИЛИ ДанныеШапки.ВидОперации = Перечисления.ВидыОперацийСчетФактура.НаАвансКомитента Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", "Авансовый");
	Иначе
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидСчетаФактуры", "Реализация");
	КонецЕсли;
	
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпоставщика;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпоставщика;
	
	Если ЗначениеЗаполнено(ДанныеШапки.Грузополучатель) Тогда
		ДанныеГрузополучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеШапки.Грузополучатель, "ГоловнойКонтрагент, КПП");
		Если ЗначениеЗаполнено(ДанныеГрузополучателя.ГоловнойКонтрагент) И ДанныеГрузополучателя.ГоловнойКонтрагент = ДанныеШапки.Покупатель Тогда
			СведенияОПокупателе.КПП = ДанныеГрузополучателя.КПП;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДанныеУчастниковУПД_2019(
		ДеревоДанных,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияОПоставщике),
		"СведенияОПродавце",
		"Юр",
		ДанныеШапки.Дата);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
	
	ЗаполнитьДанныеУчастниковУПД_2019(
		ДеревоДанных,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияОПокупателе),
		"СведенияОПокупателе",
		"Юр",
		ДанныеШапки.Дата);
	
	//Грузополучатель = ?(НЕ ЗначениеЗаполнено(ДанныеШапки.Грузополучатель) ИЛИ (ДанныеШапки.Грузополучатель = "он же"),
	//			СтруктураЭД.Контрагент, ДанныеШапки.Грузополучатель);
	//СведенияОГрузополучателе = УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ПолучитьДанныеЮрФизЛица(Грузополучатель, ДанныеШапки.Дата);
	//УправлениеНебольшойФирмойЭлектронныеДокументыСервер.ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОГрузополучателе, "СведенияОГрузополучателе", "Факт");
	
	Если ДанныеШапки.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		ВалютаРегламентированногоУчета = Константы.НациональнаяВалюта.Получить();
		КодВалюты = ВалютаРегламентированногоУчета.Код;
	Иначе
		КодВалюты = ДанныеШапки.КодВалюты;
	КонецЕсли;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", КодВалюты);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.НаименованиеПолноеВалюты);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", ДанныеШапки.Курс);
		
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	Если ДанныеШапки.Исправление = Истина
		И ЗначениеЗаполнено(ДанныеШапки.Ссылка) Тогда
		
		ИсправляемыйСчетФактура = ИсправляемыйСчетФактураВыданный(ДанныеШапки.Ссылка);
		Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
			ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
		КонецЕсли;
		
	КонецЕсли;
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	Если ДанныеДляФормированияЭД.Свойство("ПлатежныеДокументы") Тогда
		ПлатежныеДокументы = Новый ТаблицаЗначений();
		ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");
		ПлатежныеДокументы.Колонки.Добавить("НомерПРД");
		
		Для Каждого ПлатежныйДокумент Из ДанныеДляФормированияЭД.ПлатежныеДокументы Цикл
			НовыйПлатежныйДокумент = ПлатежныеДокументы.Добавить();
			НовыйПлатежныйДокумент.ДатаПРД  = ПлатежныйДокумент.ДатаПРД;
			НовыйПлатежныйДокумент.НомерПРД = ПлатежныйДокумент.НомерПРД;
		КонецЦикла;
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПлатежныеДокументы, "ПлатежноРасчетныеДокументы");
	КонецЕсли;
	
	ШтрихкодыКомбинаций   = Неопределено;
	ШтрихкодыНоменклатуры = Неопределено;
	Если НЕ ДанныеДляФормированияЭД.Свойство("ШтрихкодыНоменклатуры", ШтрихкодыНоменклатуры)
		ИЛИ НЕ ДанныеДляФормированияЭД.Свойство("ШтрихкодыКомбинаций", ШтрихкодыКомбинаций) Тогда
		ШтрихкодыПоТоварам(ДанныеДляФормированияЭД.ТаблицаТоваров, ШтрихкодыКомбинаций, ШтрихкодыНоменклатуры);
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СведенияОТаможеннойДекларации", Новый ОписаниеТипов("ТаблицаЗначений"));
	ТаблицаТоваров.Колонки.Добавить("СтранаПроисхожденияНаименование", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Признак", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1)));
	ТаблицаТоваров.Колонки.Добавить("ТоварКод", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("Содержание");
	ТаблицаТоваров.Колонки.Добавить("СведенияОМаркировке");
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	НомерСтроки = 1;
	ТолькоУслуги = Истина;
	
	ТаблицаКодовМаркировки = Неопределено;
	ДанныеДляФормированияЭД.Свойство("Маркировка", ТаблицаКодовМаркировки);
	ОбъектыСОграничениемДлиныКодов = Новый Массив;
	
	ЗаполнениеКодаТовара = СтруктураЭД.ВариантыЗаполненияПолей.ТоварКод;
	Для каждого Строка Из ДанныеДляФормированияЭД.ТаблицаТоваров Цикл
		Если Строка.СуммаБезНДС = 0
			И Строка.СуммаСНДС = 0
			ИЛИ НЕ ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.НомерСтроки         = НомерСтроки;
		НоваяСтрока.НомерСтрокиИсходногоДокумента = НомерСтроки;
		
		СтруктураДопДанных = Новый Структура;
		СтруктураДопДанных = ПолучитьСтруктуруДопДанныхНоменклатуры(Строка.Номенклатура, 
																														Строка.Характеристика, 
																														Строка.НаименованиеНоменклатуры);
																														
		НоваяСтрока.ТоварНаименование			 = СтруктураДопДанных.Наименование;
		НоваяСтрока.ЕдиницаИзмеренияКод          = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(Строка.ЕдиницаИзмеренияНаименование);
		
		Если ЗначениеЗаполнено(НоваяСтрока.Содержание) Тогда
			НоваяСтрока.ТоварНаименование = НоваяСтрока.Содержание;
		КонецЕсли;
		
		НоваяСтрока.Количество                = Строка.Количество;
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения    = Строка.Цена;
		НоваяСтрока.СтоимостьТоваровБезНалога = Строка.СуммаБезНДС;
		НоваяСтрока.НалоговаяСтавка           = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНалога               = Строка.СуммаНДС;
		НоваяСтрока.СтоимостьТоваровСНалогом  = Строка.СуммаСНДС;
		
		ВариантПересчета = Константы.ПечатьПользовательскихЕдиницИзмерения.Получить();
		Если ВариантПересчета <> Перечисления.ПечатьПользовательскихЕдиницИзмерения.ФормироватьПечатныйДокументВПользовательскойЕдинице Тогда
			
			Если ТипЗнч(НоваяСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				НоваяСтрока.ЕдиницаИзмеренияКод = СокрЛП(Строка.БазоваяЕдиницаКод);
				НоваяСтрока.ЕдиницаИзмеренияНаименование = СокрЛП(Строка.БазоваяЕдиницаНаименование);
				Если Строка.ЕдиницаИзмерения.Коэффициент <> 0 Тогда
					НоваяСтрока.Количество = Строка.Количество * Строка.ЕдиницаИзмерения.Коэффициент;
					НоваяСтрока.ЦенаЗаЕдиницуИзмерения = Окр(Строка.СуммаБезНДС / (Строка.Количество * Строка.ЕдиницаИзмерения.Коэффициент), 2);
				КонецЕсли;
			ИначеЕсли ДанныеДляФормированияЭД.ТаблицаТоваров.Колонки.Найти("КоэффициентЕдиницыИзмерения") <> Неопределено
				И Строка.КоэффициентЕдиницыИзмерения <> 0 Тогда
				НоваяСтрока.Количество = Строка.Количество * Строка.КоэффициентЕдиницыИзмерения;
				НоваяСтрока.ЦенаЗаЕдиницуИзмерения = Окр(Строка.СуммаБезНДС / (Строка.Количество * Строка.КоэффициентЕдиницыИзмерения), 2);
			Иначе
				НоваяСтрока.ЦенаЗаЕдиницуИзмерения = Окр(Строка.СуммаБезНДС / Строка.Количество, 2);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.НомерТаможеннойДекларации) Тогда
			
			СведенияОТаможеннойДекларации = Новый ТаблицаЗначений;
			СведенияОТаможеннойДекларации.Колонки.Добавить("СтранаПроисхожденияКод");
			СведенияОТаможеннойДекларации.Колонки.Добавить("ТаможеннаяДекларацияНомер");
			
			НоваяСтрока.СведенияОТаможеннойДекларации = СведенияОТаможеннойДекларации;
			Декларация = НоваяСтрока.СведенияОТаможеннойДекларации.Добавить();
			Декларация.СтранаПроисхожденияКод    = ПолучитьКорректныйКодСтраны(Строка.КодСтраныПроисхождения);
			Декларация.ТаможеннаяДекларацияНомер = ?(ЗначениеЗаполнено(Строка.НомерТаможеннойДекларации), СокрЛП(Строка.НомерТаможеннойДекларации), "");
			НоваяСтрока.СтранаПроисхожденияНаименование = Строка.НаименованиеСтраныПроисхождения;
		КонецЕсли;
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока.СведенияОТаможеннойДекларации, "СтранаПроисхожденияКод",,,
			НСтр("ru = 'Не заполнен код страны происхождения'"));
		
		НоваяСтрока.Признак = ПризнакТовара(Строка.Номенклатура);
		НоваяСтрока.ТоварКод           = СокрЛП(Строка.КодНоменклатуры);
		НоваяСтрока.ТоварИдентификатор = СтруктураДопДанных.ИД;
		
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
		
		Если ТолькоУслуги
			И НоваяСтрока.Признак = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		ЭлектронноеВзаимодействиеИСМП.ЗаполнитьСведенияОМаркировке_2019(НоваяСтрока, Строка, ТаблицаКодовМаркировки);
		
		Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(Строка.Номенклатура, Строка.Характеристика, Строка.ЕдиницаИзмерения);
		
		Сопоставление.Вставить("Наименование", Строка.НаименованиеНоменклатуры);
		Если ЗначениеЗаполнено(Строка.НаименованиеХарактеристики) Тогда
			Сопоставление.Вставить("Характеристика", Строка.НаименованиеХарактеристики);
		КонецЕсли;
		Сопоставление.Вставить("ЕдиницаИзмерения"   , Строка.ЕдиницаИзмеренияНаименование);
		Сопоставление.Вставить("ЕдиницаИзмеренияКод", Строка.ЕдиницаИзмеренияКод);
		Сопоставление.Вставить("СтавкаНДС", Строка.СтавкаНДС);
		Сопоставление.Вставить("Артикул"  , Строка.Артикул);
		
		ЗаполнитьШтрихкодыТоваровВСопоставление(Сопоставление, ШтрихкодыНоменклатуры, ШтрихкодыКомбинаций,
			Строка.Номенклатура, Строка.Характеристика, Строка.ЕдиницаИзмерения);
		
		НоваяСтрока.Сопоставление = Сопоставление;
		
		Если ЗаполнениеКодаТовара = "Артикул" Тогда
			НоваяСтрока.ТоварКод = СокрЛП(Строка.Артикул);
		ИначеЕсли ЗаполнениеКодаТовара = "Штрихкод"
			И НоваяСтрока.Сопоставление.Свойство("ШтрихкодКомбинации") Тогда
			НоваяСтрока.ТоварКод = НоваяСтрока.Сопоставление.ШтрихкодКомбинации;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Отказ = Ложь;
	ЭлектронноеВзаимодействиеИСМП.ПроверитьСведенияОМаркировке(ТаблицаКодовМаркировки, ОбъектыСОграничениемДлиныКодов, Отказ);
	Если Отказ Тогда
		ВидОперации = НСтр("ru = 'Формирование ЭД';
							|en = 'ED generation'");
		ПодробныйТекстОшибки = НСтр("ru = 'Ошибка при формирование ЭД. Неверное указание маркированной продукции.'");
		ТекстСообщения = НСтр("ru = 'Не удалось распределить все штрихкоды упаковок для маркируемых товаров в табличной части.
		| Возможная причина: слишком большое количество кодов в строке, требуется разбиение строки';
		|en = 'Failed to distribute all packaging barcodes for marked products in the tabular section.
		| Possible cause: Too many codes per line, line splitting required'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "ЕдиницаИзмеренияНаименование",,,
		НСтр("ru = 'Не заполнена наименование единицы измерения в справочнике ""Номенклатура"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "ЕдиницаИзмеренияКод",,,
		НСтр("ru = 'Не заполнен код единицы измерения в справочнике ""Номенклатура"".'"));
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров, "Количество",,,
		НСтр("ru = 'Не указано количество товара в табличной части'"));
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровБезНалога", ТаблицаТоваров.Итог("СтоимостьТоваровБезНалога"));
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСтоимостьТоваровСНалогом", ТаблицаТоваров.Итог("СтоимостьТоваровСНалогом"));
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоСуммаНалога", ТаблицаТоваров.Итог("СуммаНалога"));
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоКОплате.ВсегоКоличество", ТаблицаТоваров.Итог("Количество"));
	
	// Обработка ошибки через механизм сообщений пользователю.
	СсылкаНаДокумент = ДанныеДляФормированияЭД.РеквизитыШапки.Ссылка;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварКод", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварНаименование", "Номенклатура", "Объект.НаименованиеПолное");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЦенаЗаЕдиницуИзмерения", СсылкаНаДокумент, "Объект.Товары.Цена",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СтоимостьТоваровБезНалога", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНалога", СсылкаНаДокумент, "Объект.Товары.СуммаНДС",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияНаименование", "ЕдиницаИзмерения", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод", "ЕдиницаИзмерения", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Признак", "Номенклатура", "Объект.ТипНоменклатуры");
	
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
	// Не выводим данные Грузоотправителя и Грузополучателя, если в документе только услуги или это счет-фактура на аванс.
	Если Не ТолькоУслуги Тогда
		
		// Сведения о грузоотправителе
		Если НЕ ЗначениеЗаполнено(ДанныеШапки.Грузоотправитель)ИЛИ (ДанныеШапки.Грузоотправитель = "он же") Тогда
			ТаблицаГрузоотправителей = ЭлектронноеВзаимодействиеСлужебный.ДанныеЭлементаДереваЭлектронногоДокумента(
				ДеревоДанных, "СведенияОГрузоотправителе");
			ТаблицаГрузоотправителей.Колонки.Добавить("СведенияОбУчастнике");
			ТаблицаГрузоотправителей.Добавить().ОнЖе = Истина;
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаГрузоотправителей, "СведенияОГрузоотправителе");
		Иначе
			СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель, ДанныеШапки.Дата);
			ЗаполнитьДанныеУчастниковУПД_2019(
				ДеревоДанных,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияОГрузоотправителе),
				"СведенияОГрузоотправителе",
				"Факт",
				ДанныеШапки.Дата);
		КонецЕсли;
		
		// Сведения о грузополучателе
		Грузополучатель = ?(НЕ ЗначениеЗаполнено(ДанныеШапки.Грузополучатель) ИЛИ (ДанныеШапки.Грузополучатель = "он же"),
					СтруктураЭД.Контрагент, ДанныеШапки.Грузополучатель);
		СведенияОГрузополучателе = ПолучитьДанныеЮрФизЛица(Грузополучатель, ДанныеШапки.Дата);
		
		// Получаем адрес доставки из документа реализации
		ДокументРеализации = Неопределено;
		Если ТипЗнч(ДанныеДляФормированияЭД.ДокументыОснования) = Тип("Массив") Тогда
			Для Каждого Документ Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
				Если ТипЗнч(Документ) = Тип("ДокументСсылка.РасходнаяНакладная")
					Или ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					
					ДокументРеализации = Документ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		АдресДоставки = Неопределено;
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			АдресДоставки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументРеализации, "АдресДоставки");
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресДоставки) Тогда
			СведенияОГрузополучателе.Вставить("АдресДоставки", АдресДоставки);
		КонецЕсли;
		
		ЗаполнитьДанныеУчастниковУПД_2019(
			ДеревоДанных,
 			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СведенияОГрузополучателе),
			"СведенияОГрузополучателе",
			"Факт",               
			ДанныеШапки.Дата);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьДанныеКорректировочногоСчетаФактурыУКД_2019(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДеревоДанныхУКД_2019(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУКД_2019(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.СчетФактура, "Договор");
	Если ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(Договор.ДатаДоговора) Тогда
		
		ОснованиеКорректировки = Новый ТаблицаЗначений;
		ОснованиеКорректировки.Колонки.Добавить("ДоговорКонтрагента");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
		
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		НоваяСтрока.ДоговорКонтрагента   = Договор;
		НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
		НоваяСтрока.ДокументНомер = Договор.НомерДоговора;
		НоваяСтрока.ДокументДата = НачалоДня(Договор.ДатаДоговора);
		
		// Дополним таблицу оснований параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументНаименование", "ДоговорКонтрагента", "Объект.Наименование");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
	КонецЕсли;
	
	МассивОснований = Новый Массив;
	
	Для Каждого Основание Из ДанныеШапки.ТаблицаРеквизитовОснований Цикл
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№ %1 от %2, с учетом исправления № %3 от %4'"),
									Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"),
									Основание.НомерИсправления, Формат(Основание.ДатаИсправления, "ДЛФ=D"));
		Иначе
			ОписаниеОснования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '№ %1 от %2'"),
									Основание.НомерСчетаФактуры, Формат(Основание.ДатаСчетаФактуры, "ДЛФ=D"));
		КонецЕсли;
		МассивОснований.Добавить(ОписаниеОснования);
	КонецЦикла;
	
	Если МассивОснований.Количество() > 0 Тогда
		ОписаниеОснований = СтрСоединить(МассивОснований, ", ");
		ОписаниеОснований = НСтр("ru = 'Универсальный передаточный документ'") + " " + ОписаниеОснований;
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПередаточныхДокументов",
																	ОписаниеОснований);
	КонецЕсли;
																
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
		
		ЗаполнитьДеревоДанныхУКД_2019(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхУКД_2019(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры", ДанныеДляФормированияЭД.СчетФактура);
	
	Префикс = "";
	Если ТипЗнч(ДанныеШапки.Поставщик) = Тип("СправочникСсылка.Организации") Тогда
		Префикс = ДанныеШапки.Поставщик.Префикс;
	КонецЕсли;
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеШапки.Дата, ДанныеШапки.Номер, Префикс);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", НомерДокумента);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление = Истина Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ДанныеШапки.НомерИсправленияКорректировочного);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ДанныеШапки.ДатаИсправленияКорректировочного);
	КонецЕсли;
	
	Если ДанныеШапки.ТаблицаРеквизитовОснований.Количество() > 0 Тогда
		Основание = ДанныеШапки.ТаблицаРеквизитовОснований[0];
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеШапки.Дата, Основание.НомерСчетаФактуры, Префикс);
		
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", НомерДокумента);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Основание.ДатаСчетаФактуры);
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента",
				Основание.НомерИсправления);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента",
				Основание.ДатаИсправления);
		КонецЕсли;
	КонецЕсли;
	
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпродавца;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпродавца;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр");
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
		
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе,      "СведенияОПокупателе", "Юр");
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе,      "СведенияОКомиссионере", "Юр");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.Валюта.Код);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.Валюта.НаименованиеПолное);
		
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДанныеШапки.Дата, Новый Структура("Валюта", ДанныеШапки.Валюта));
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", СтруктураПоВалюте.Курс);
	
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	ИсправляемыйСчетФактура = ИсправляемыйСчетФактураВыданный(ДанныеДляФормированияЭД.СчетФактура);
	Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
		ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
	КонецЕсли;
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда // УКД СФ без первичного документа
		
		ОснованиеДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.СчетФактура, "Договор");
		
		Если ЗначениеЗаполнено(ОснованиеДоговор.ДатаДоговора)
			И ЗначениеЗаполнено(ОснованиеДоговор.НомерДоговора) Тогда
			
			ОснованиеКорректировки = Новый ТаблицаЗначений;
			ОснованиеКорректировки.Колонки.Добавить("ДоговорКонтрагента");
			ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
			ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
			ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
			ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
			
			НоваяСтрока = ОснованиеКорректировки.Добавить();
			НоваяСтрока.ДоговорКонтрагента   = ОснованиеДоговор;
			НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
			НоваяСтрока.ДокументНомер = ОснованиеДоговор.НомерДоговора;
			НоваяСтрока.ДокументДата = НачалоДня(ОснованиеДоговор.ДатаДоговора);
			
			// Дополним таблицу оснований параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНаименование", "ДоговорКонтрагента", "Объект.Наименование");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		КонецЕсли;
		
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
		
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	
	НомерСтроки = 1;
	ТолькоУслуги = Ложь;
	
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НомерСтрокиИсходногоДокумента = НомерСтроки;
		НоваяСтрока.ТоварНаименование        = Строка.НаименованиеНоменклатуры;
		НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод                = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.КоличествоДоКорректировки = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество                = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки    = ОКР(Строка.ЦенаДоИзменения, 2);
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения                   = ОКР(Строка.ЦенаПослеИзменения, 2);
		НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалога                = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение      = Строка.РазницаБезНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение      = Строка.РазницаБезНДСУменьшение;
		НоваяСтрока.НалоговаяСтавкаДоКорректировки = Строка.СтавкаНДС;
		НоваяСтрока.НалоговаяСтавка                = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНалогаДоКорректировки = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНалога                = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаНалогаУвеличение      = Строка.РазницаНДСУвеличение;
		НоваяСтрока.СуммаНалогаУменьшение      = Строка.РазницаНДСУменьшение;
		НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = Строка.СтоимостьСНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровСНалогом                = Строка.СтоимостьСНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровСНалогомУвеличение      = Строка.РазницаСНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровСНалогомУменьшение      = Строка.РазницаСНДСУменьшение;
		НоваяСтрока.ТоварИдентификатор = Строка.Товар.УникальныйИдентификатор();
		
		Если ТолькоУслуги
			И ПризнакТовара(НоваяСтрока.Товар) = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Строка.Товар;
		НоваяСтрока.ЕдиницаИзмерения = Строка.Товар.ЕдиницаИзмерения;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- значения колонок ""Сумма"", ""НДС"", ""Количество"" до и после корректировки не отличаются'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение",
		ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение",
		ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение",
		ТаблицаТоваров.Итог("СуммаНалогаУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение",
		ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение",
		ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение",
		ТаблицаТоваров.Итог("СуммаНалогаУменьшение"),
		ТекстОшибки);
	
	// Обработка ошибки через механизм сообщений пользователю.
	Если ДанныеДляФормированияЭД.ДанныеШапки.Свойство("СсылкаНаОбъект") Тогда
		СсылкаНаДокумент = ДанныеДляФормированияЭД.ДанныеШапки.СсылкаНаОбъект;
	Иначе
		СсылкаНаДокумент = ДанныеДляФормированияЭД.Ссылка;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварКод", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварНаименование", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"КоличествоДоКорректировки", СсылкаНаДокумент, "Объект.Товары.КоличествоДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЦенаЗаЕдиницуИзмерения", СсылкаНаДокумент, "Объект.Товары.Цена",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЦенаЗаЕдиницуИзмеренияДоКорректировки", СсылкаНаДокумент, "Объект.Товары.ЦенаДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СтоимостьТоваровБезНалога", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СтоимостьТоваровБезНалогаДоКорректировки", СсылкаНаДокумент, "Объект.Товары.СуммаДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНалога", СсылкаНаДокумент, "Объект.Товары.СуммаНДС",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНалогаДоКорректировки", СсылкаНаДокумент, "Объект.Товары.СуммаНДСДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод", "ЕдиницаИзмерения", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКодДоКорректировки", "ЕдиницаИзмерения", "Объект.Код");
	
	// Обработка ошибки через упрощенный механизм
	ТекстОшибки = НСтр("ru = 'для формирования электронного документа необходимо указать налоговую ставку'");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"НалоговаяСтавка",,, ТекстОшибки);
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"НалоговаяСтавкаДоКорректировки",,, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

#КонецОбласти

#Область ЕдиныйДокумент_2020

Процедура ЗаполнитьДанныеКорректировочногоСчетаФактурыУКД_2020(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ЗаполнитьДеревоДанныхУКД_2020(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПервичногоДокументаУКД_2020(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных) Экспорт
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаНаправленияНаСогласование", ДанныеШапки.Дата);
	
	Договор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.СчетФактура, "Договор");
	Если ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(Договор.ДатаДоговора) Тогда
		
		ОснованиеКорректировки = Новый ТаблицаЗначений;
		ОснованиеКорректировки.Колонки.Добавить("ДоговорКонтрагента");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
		ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
		ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
		
		НоваяСтрока = ОснованиеКорректировки.Добавить();
		НоваяСтрока.ДоговорКонтрагента   = Договор;
		НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
		НоваяСтрока.ДокументНомер = Договор.НомерДоговора;
		НоваяСтрока.ДокументДата = Договор.ДатаДоговора;
		
		// Дополним таблицу оснований параметрами обработки ошибок.
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументНаименование", "ДоговорКонтрагента", "Объект.Наименование");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
			"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
		
		ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		
	КонецЕсли;
	
	ПередаточныйДокумент = Новый ТаблицаЗначений;
	ПередаточныйДокумент.Колонки.Добавить("ДокументНаименование");
	ПередаточныйДокумент.Колонки.Добавить("ДокументНомер");
	ПередаточныйДокумент.Колонки.Добавить("ДокументДата");
	
	Префикс = "";
	Если ТипЗнч(ДанныеШапки.Поставщик) = Тип("СправочникСсылка.Организации") Тогда
		Префикс = ДанныеШапки.Поставщик.Префикс;
	КонецЕсли;
	
	Для Каждого Основание Из ДанныеШапки.ТаблицаРеквизитовОснований Цикл
		
		НомерИсходногоДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеШапки.Дата, Основание.НомерСчетаФактуры, Префикс);
		ДатаИсходногоДокумента = Основание.ДатаСчетаФактуры;
		
		Если ЗначениеЗаполнено(НомерИсходногоДокумента)
			И ЗначениеЗаполнено(ДатаИсходногоДокумента) Тогда
			
			ОписаниеОснования = СтрШаблон(НСтр("ru = 'Универсальный передаточный документ № %1 от %2'"),
				НомерИсходногоДокумента, Формат(ДатаИсходногоДокумента, "ДЛФ=D"));
				
			Если ЗначениеЗаполнено(Основание.НомерИсправления)
				И ЗначениеЗаполнено(Основание.ДатаИсправления) Тогда
				
				ОписаниеОснования = ОписаниеОснования + ", " + СтрШаблон(НСтр("ru = 'с учетом исправления № %1 от %2'"),
					Основание.НомерИсправления,
					Формат(Основание.ДатаИсправления, "ДЛФ=D"));
					
			КонецЕсли;
			
			НоваяСтрока = ПередаточныйДокумент.Добавить();
			НоваяСтрока.ДокументНаименование = ОписаниеОснования;
			НоваяСтрока.ДокументНомер = НомерИсходногоДокумента;
			НоваяСтрока.ДокументДата = ДатаИсходногоДокумента;
			
		КонецЕсли;
	КонецЦикла;
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ПередаточныйДокумент, "ПередаточныйДокумент");
	
	//Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ДИСУКД Тогда
	//	
	//	ЗаполнитьДеревоДанныхУКД_2020(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных);
	//	
	//КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДеревоДанныхУКД_2020(ДанныеДляФормированияЭД, СтруктураЭД, ДеревоДанных)
	
	ДанныеШапки = ДанныеДляФормированияЭД.ДанныеШапки;
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СсылкаКорректировочногоСчетаФактуры", ДанныеДляФормированияЭД.СчетФактура);
	
	Префикс = "";
	Если ТипЗнч(ДанныеШапки.Поставщик) = Тип("СправочникСсылка.Организации") Тогда
		Префикс = ДанныеШапки.Поставщик.Префикс;
	КонецЕсли;
	НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеШапки.Дата, ДанныеШапки.Номер, Префикс);
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерДокумента", НомерДокумента);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаДокумента",  ДанныеШапки.Дата);
	Если ДанныеШапки.Исправление = Истина 
		И ДанныеШапки.НомерИсправленияКорректировочного <> "--"
		И ДанныеШапки.ДатаИсправленияКорректировочного <> "--" Тогда
		
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления",
			ДанныеШапки.НомерИсправленияКорректировочного);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления",
			ДанныеШапки.ДатаИсправленияКорректировочного);
	КонецЕсли;
		
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВидДокумента", "Корректировка");
	
	Если ДанныеШапки.ТаблицаРеквизитовОснований.Количество() > 0 Тогда
		Основание = ДанныеШапки.ТаблицаРеквизитовОснований[0];
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДанныеШапки.Дата, Основание.НомерСчетаФактуры, Префикс);
		
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", НомерДокумента);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Основание.ДатаСчетаФактуры);
		Если Основание.УчитыватьИсправлениеИсходногоДокумента Тогда
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправленияИсходногоДокумента",
				Основание.НомерИсправления);
			ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправленияИсходногоДокумента",
				Основание.ДатаИсправления);
		КонецЕсли;
	Иначе
		Основание = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеШапки.СсылкаНаОбъект, "ДокументОснование.Дата, ДокументОснование.Номер");
		
		НомерДокумента = ПечатьДокументовУНФ.ПолучитьНомерНаПечатьСУчетомДатыДокумента(Основание.ДокументОснованиеДата, Основание.ДокументОснованиеНомер, Префикс);
		
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсходногоДокумента", НомерДокумента);
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсходногоДокумента", Основание.ДокументОснованиеДата);
	КонецЕсли;
	
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Покупатель, ДанныеШапки.Дата);
	СведенияОПоставщике  = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Поставщик, ДанныеШапки.Дата);
	СведенияОПокупателе.ИНН = ДанныеШапки.ИННпокупателя;
	СведенияОПокупателе.КПП = ДанныеШапки.КППпокупателя;
	СведенияОПоставщике.ИНН = ДанныеШапки.ИННпродавца;
	СведенияОПоставщике.КПП = ДанныеШапки.КППпродавца;
	
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПоставщике, "СведенияОПродавце", "Юр");
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"СоставительДокументаНаименование", СведенияОПоставщике.ПолноеНаименование);
		
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе,      "СведенияОПокупателе", "Юр");
	ЗаполнитьДанныеУчастникаУПД(ДеревоДанных, СведенияОПокупателе,      "СведенияОКомиссионере", "Юр");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод", ДанныеШапки.Валюта.Код);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаНаименование", ДанныеШапки.Валюта.НаименованиеПолное);
		
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДанныеШапки.Дата, Новый Структура("Валюта", ДанныеШапки.Валюта));
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ДополнительныеСведенияОбУчастниках.ВалютаКурс", СтруктураПоВалюте.Курс);
	
	ДокументыОснования = Новый Массив;
	Для Каждого ДокументОснование Из ДанныеДляФормированияЭД.ДокументыОснования Цикл
		ДокументыОснования.Добавить(ДокументОснование);
	КонецЦикла;
	
	ИсправляемыйСчетФактура = ИсправляемыйСчетФактураВыданный(ДанныеДляФормированияЭД.СчетФактура);
	Если ЗначениеЗаполнено(ИсправляемыйСчетФактура) Тогда
		ДокументыОснования.Добавить(ИсправляемыйСчетФактура);
	КонецЕсли;
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснованияСчетаФактуры", ДокументыОснования);
	
	Если СтруктураЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.КСЧФУКД Тогда // УКД СФ без первичного документа
		
		ОснованиеДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДляФормированияЭД.СчетФактура, "Договор");
		
		Если ЗначениеЗаполнено(ОснованиеДоговор.ДатаДоговора)
			И ЗначениеЗаполнено(ОснованиеДоговор.НомерДоговора) Тогда
			
			ОснованиеКорректировки = Новый ТаблицаЗначений;
			ОснованиеКорректировки.Колонки.Добавить("ДоговорКонтрагента");
			ОснованиеКорректировки.Колонки.Добавить("ДокументНаименование");
			ОснованиеКорректировки.Колонки.Добавить("ДокументНомер");
			ОснованиеКорректировки.Колонки.Добавить("ДокументДата");
			ОснованиеКорректировки.Колонки.Добавить("ДокументДопСведения");
			
			НоваяСтрока = ОснованиеКорректировки.Добавить();
			НоваяСтрока.ДоговорКонтрагента   = ОснованиеДоговор;
			НоваяСтрока.ДокументНаименование = НСтр("ru = 'Договор'");
			НоваяСтрока.ДокументНомер = ОснованиеДоговор.НомерДоговора;
			НоваяСтрока.ДокументДата = Формат(ОснованиеДоговор.ДатаДоговора, "ДЛФ=D");
			
			// Дополним таблицу оснований параметрами обработки ошибок.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНаименование", "ДоговорКонтрагента", "Объект.Наименование");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументНомер", "ДоговорКонтрагента", "Объект.НомерДоговора");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(НоваяСтрока,
				"ДокументДата", "ДоговорКонтрагента", "Объект.ДатаДоговора");
			
			ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ОснованиеКорректировки, "ОснованиеКорректировки");
		КонецЕсли;
		
		ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "СодержаниеОперации", "Предлагаю изменить стоимость");
		
	КонецЕсли;
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("НомерСтроки");
	ТаблицаТоваров.Колонки.Добавить("НомерСтрокиИсходногоДокумента");
	ТаблицаТоваров.Колонки.Добавить("ТоварНаименование");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКодДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмеренияКод");
	ТаблицаТоваров.Колонки.Добавить("КоличествоДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмеренияДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("ЦенаЗаЕдиницуИзмерения", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(26,11)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровБезНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавкаДоКорректировки");
	ТаблицаТоваров.Колонки.Добавить("НалоговаяСтавка");
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалога", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаНалогаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкциза", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СуммаАкцизаУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомДоКорректировки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогом", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУвеличение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("СтоимостьТоваровСНалогомУменьшение", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(19,2)));
	ТаблицаТоваров.Колонки.Добавить("ТоварИдентификатор", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура");
	ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");
	ТаблицаТоваров.Колонки.Добавить("НаименованиеЕдиницыИзмеренияДоКорректировки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеЕдиницыИзмеренияПослеКорректировки", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(255)));
	ТаблицаТоваров.Колонки.Добавить("АртикулТовара", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ТаблицаТоваров.Колонки.Добавить("КодТовара", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблицаТоваров.Колонки.Добавить("КодВидаТовара", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)));
	ТаблицаТоваров.Колонки.Добавить("Сопоставление");
	
	НомерСтроки = 1;
	ТолькоУслуги = Ложь;
	
	ЗаполнениеКодаТовара = СтруктураЭД.ВариантыЗаполненияПолей.ТоварКод;
	Для Каждого Строка Из ДанныеДляФормированияЭД.ТаблицаДокумента Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		НоваяСтрока.НомерСтроки              = НомерСтроки;
		НоваяСтрока.НомерСтрокиИсходногоДокумента = НомерСтроки;
		НоваяСтрока.ТоварНаименование        = Строка.НаименованиеНоменклатуры;
		НоваяСтрока.ЕдиницаИзмеренияКодДоКорректировки = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.ЕдиницаИзмеренияКод                = СокрЛП(Строка.ЕдиницаИзмеренияКод);
		НоваяСтрока.КоличествоДоКорректировки = Строка.КоличествоДоИзменения;
		НоваяСтрока.Количество                = Строка.КоличествоПослеИзменения;
		НоваяСтрока.ЦенаЗаЕдиницуИзмеренияДоКорректировки    = ОКР(Строка.ЦенаДоИзменения, 2);
		НоваяСтрока.ЦенаЗаЕдиницуИзмерения                   = ОКР(Строка.ЦенаПослеИзменения, 2);
		НоваяСтрока.СтоимостьТоваровБезНалогаДоКорректировки = Строка.СтоимостьБезНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалога                = Строка.СтоимостьБезНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровБезНалогаУвеличение      = Строка.РазницаБезНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровБезНалогаУменьшение      = Строка.РазницаБезНДСУменьшение;
		НоваяСтрока.НалоговаяСтавкаДоКорректировки = Строка.СтавкаНДС;
		НоваяСтрока.НалоговаяСтавка                = Строка.СтавкаНДС;
		НоваяСтрока.СуммаНалогаДоКорректировки = Строка.СуммаНДСДоИзменения;
		НоваяСтрока.СуммаНалога                = Строка.СуммаНДСПослеИзменения;
		НоваяСтрока.СуммаНалогаУвеличение      = Строка.РазницаНДСУвеличение;
		НоваяСтрока.СуммаНалогаУменьшение      = Строка.РазницаНДСУменьшение;
		НоваяСтрока.СтоимостьТоваровСНалогомДоКорректировки = Строка.СтоимостьСНДСДоИзменения;
		НоваяСтрока.СтоимостьТоваровСНалогом                = Строка.СтоимостьСНДСПослеИзменения;
		НоваяСтрока.СтоимостьТоваровСНалогомУвеличение      = Строка.РазницаСНДСУвеличение;
		НоваяСтрока.СтоимостьТоваровСНалогомУменьшение      = Строка.РазницаСНДСУменьшение;
		НоваяСтрока.ТоварИдентификатор = Строка.Товар.УникальныйИдентификатор();
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.НалоговаяСтавка) Тогда
			НоваяСтрока.НалоговаяСтавка = УправлениеНебольшойФирмойПовтИсп.ПолучитьСтавкуНДСБезНДС();
			НоваяСтрока.НалоговаяСтавкаДоКорректировки = НоваяСтрока.НалоговаяСтавка;
		КонецЕсли;
		
		Если ТолькоУслуги
			И ПризнакТовара(НоваяСтрока.Товар) = "1" Тогда
			ТолькоУслуги = Ложь;
		КонецЕсли;
		
		НоваяСтрока.Номенклатура = Строка.Товар;
		НоваяСтрока.ЕдиницаИзмерения = Строка.Товар.ЕдиницаИзмерения;
		
		НоваяСтрока.Сопоставление = СтруктураДляСопоставленияНоменклатурыЭД(Строка.Товар, Строка.Характеристика, Строка.Товар.ЕдиницаИзмерения);
		
		НоваяСтрока.НаименованиеЕдиницыИзмеренияДоКорректировки = Строка.Товар.ЕдиницаИзмерения.Наименование;
		НоваяСтрока.НаименованиеЕдиницыИзмеренияПослеКорректировки = Строка.Товар.ЕдиницаИзмерения.Наименование;
		
		НоваяСтрока.КодТовара = СокрЛП(Строка.ТоварКод);
		Если ЗначениеЗаполнено(Строка.ТоварКодТНВЭД) Тогда
			НоваяСтрока.КодВидаТовара = Строка.ТоварКодТНВЭД;
		КонецЕсли;
		
		Если ЗаполнениеКодаТовара = "Артикул" Тогда
			НоваяСтрока.ТоварКод = СокрЛП(Строка.Артикул);
		ИначеЕсли ЗаполнениеКодаТовара = "Штрихкод" 
			И НоваяСтрока.Сопоставление.Свойство("ШтрихкодКомбинации") Тогда
			НоваяСтрока.ТоварКод = НоваяСтрока.Сопоставление.ШтрихкодКомбинации;
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ТекстОшибки = НСтр("ru = 'Не удалось заполнить итоговые стоимостные показатели. Возможные причины:
		|	- не заполнена табличная часть ""Товары""
		|	- значения колонок ""Сумма"", ""НДС"", ""Количество"" до и после корректировки не отличаются'");
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУвеличение",
		ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУвеличение",
		ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУвеличение",
		ТаблицаТоваров.Итог("СуммаНалогаУвеличение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровБезНалогаУменьшение",
		ТаблицаТоваров.Итог("СтоимостьТоваровБезНалогаУменьшение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСтоимостьТоваровСНалогомУменьшение",
		ТаблицаТоваров.Итог("СтоимостьТоваровСНалогомУменьшение"),
		ТекстОшибки);
	ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных,
		"ВсегоИзмененияСтоимости.ВсегоСуммаНалогаУменьшение",
		ТаблицаТоваров.Итог("СуммаНалогаУменьшение"),
		ТекстОшибки);
	
	// Обработка ошибки через механизм сообщений пользователю.
	Если ДанныеДляФормированияЭД.ДанныеШапки.Свойство("СсылкаНаОбъект") Тогда
		СсылкаНаДокумент = ДанныеДляФормированияЭД.ДанныеШапки.СсылкаНаОбъект;
	Иначе
		СсылкаНаДокумент = ДанныеДляФормированияЭД.Ссылка;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварКод", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ТоварНаименование", "Номенклатура", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"КоличествоДоКорректировки", СсылкаНаДокумент, "Объект.Товары.КоличествоДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЦенаЗаЕдиницуИзмерения", СсылкаНаДокумент, "Объект.Товары.Цена",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЦенаЗаЕдиницуИзмеренияДоКорректировки", СсылкаНаДокумент, "Объект.Товары.ЦенаДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СтоимостьТоваровБезНалога", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СтоимостьТоваровБезНалогаДоКорректировки", СсылкаНаДокумент, "Объект.Товары.СуммаДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНалога", СсылкаНаДокумент, "Объект.Товары.СуммаНДС",, "НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"СуммаНалогаДоКорректировки", СсылкаНаДокумент, "Объект.Товары.СуммаНДСДоКорректировки",,
		"НомерСтрокиИсходногоДокумента");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКод", "ЕдиницаИзмерения", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"ЕдиницаИзмеренияКодДоКорректировки", "ЕдиницаИзмерения", "Объект.Код");
	
	// Обработка ошибки через упрощенный механизм
	ТекстОшибки = НСтр("ru = 'для формирования электронного документа необходимо указать налоговую ставку'");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"НалоговаяСтавка",,, ТекстОшибки);
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"НалоговаяСтавкаДоКорректировки",,, ТекстОшибки);
	
	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ТаблицаТоваров, "СведенияОТоварах");
	
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "ТолькоУслуги", ТолькоУслуги);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗапросыНастройкиДополнительныхПолей

// См. ОбменСКонтрагентамиПереопределяемый.ПолучитьЗапросКонструктораДополнительныхПолейШапки.
Процедура ПолучитьЗапросКонструктораДополнительныхПолейШапки(Параметры, ТекстЗапроса) Экспорт
	
	Если Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.УПД
		ИЛИ Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.УКД Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиУПД();
	
	ИначеЕсли Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СчетФактура
		ИЛИ Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.КорректировочныйСчетФактура Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры();
		
	ИначеЕсли Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.ТОРГ12Продавец
		ИЛИ Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктНаПередачуПрав Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиРеализации();
		
	ИначеЕсли Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.АктИсполнитель Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиАкта();
		
	ИначеЕсли Параметры.ВидЭлектронногоДокумента = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		
		ТекстЗапроса = ЗапросКонструктораДополнительныхПолейШапкиКорректировкиРеализации();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗапросКонструктораДополнительныхПолейШапкиУПД()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК Ссылка,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Номер КАК Номер,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК Дата,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ВидОперации КАК ВидОперации,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ВыставленСтатус КАК ВыставленСтатус,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Грузоотправитель КАК Грузоотправитель,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Грузополучатель КАК Грузополучатель,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаВыставления КАК ДатаВыставления,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Договор КАК Договор,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Исправление КАК Исправление,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ИсправляемыйСчетФактура КАК ИсправляемыйСчетФактура,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.КодСпособаВыставления КАК КодСпособаВыставления,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Комментарий КАК Комментарий,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Контрагент КАК Контрагент,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Кратность КАК Кратность,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Курс КАК Курс,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправления КАК НомерИсправления,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Организация КАК Организация,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ОснованиеПечати КАК ОснованиеПечати,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ПодписьКладовщика КАК ПодписьКладовщика,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ПодписьРуководителя КАК ПодписьРуководителя,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СводныйКомиссионный КАК СводныйКомиссионный,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СводныйКорректировочный КАК СводныйКорректировочный,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СтавкаНДССуммовойРазницы КАК СтавкаНДССуммовойРазницы,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СуммаДокумента КАК СуммаДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.СуммаНДСДокумента КАК СуммаНДСДокумента,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Автор КАК Автор,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиСчетаФактуры()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактура.Ссылка КАК Ссылка,
	|	СчетФактура.Номер КАК Номер,
	|	СчетФактура.Дата КАК Дата,
	|	СчетФактура.ВалютаДокумента КАК ВалютаДокумента,
	|	СчетФактура.ВидОперации КАК ВидОперации,
	|	СчетФактура.ВыставленСтатус КАК ВыставленСтатус,
	|	СчетФактура.Грузоотправитель КАК Грузоотправитель,
	|	СчетФактура.Грузополучатель КАК Грузополучатель,
	|	СчетФактура.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	СчетФактура.ДатаВыставления КАК ДатаВыставления,
	|	СчетФактура.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	СчетФактура.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	СчетФактура.Договор КАК Договор,
	|	СчетФактура.ИдентификаторГосКонтракта КАК ИдентификаторГосКонтракта,
	|	СчетФактура.Исправление КАК Исправление,
	|	СчетФактура.ИсправляемыйСчетФактура КАК ИсправляемыйСчетФактура,
	|	СчетФактура.КодСпособаВыставления КАК КодСпособаВыставления,
	|	СчетФактура.Комментарий КАК Комментарий,
	|	СчетФактура.Контрагент КАК Контрагент,
	|	СчетФактура.Кратность КАК Кратность,
	|	СчетФактура.Курс КАК Курс,
	|	СчетФактура.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	СчетФактура.НомерИсправления КАК НомерИсправления,
	|	СчетФактура.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	СчетФактура.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	СчетФактура.Организация КАК Организация,
	|	СчетФактура.ОснованиеПечати КАК ОснованиеПечати,
	|	СчетФактура.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	СчетФактура.ПодписьКладовщика КАК ПодписьКладовщика,
	|	СчетФактура.ПодписьРуководителя КАК ПодписьРуководителя,
	|	СчетФактура.СводныйКомиссионный КАК СводныйКомиссионный,
	|	СчетФактура.СводныйКорректировочный КАК СводныйКорректировочный,
	|	СчетФактура.СтавкаНДССуммовойРазницы КАК СтавкаНДССуммовойРазницы,
	|	СчетФактура.СуммаДокумента КАК СуммаДокумента,
	|	СчетФактура.СуммаНДСДокумента КАК СуммаНДСДокумента,
	|	СчетФактура.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	СчетФактура.Автор КАК Автор
	|ИЗ
	|	Документ.СчетФактура КАК СчетФактура
	|ГДЕ
	|	СчетФактура.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиРеализации()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходнаяНакладная.Ссылка КАК Ссылка,
	|	РасходнаяНакладная.Номер КАК Номер,
	|	РасходнаяНакладная.Дата КАК Дата,
	|	РасходнаяНакладная.Автомобиль КАК Автомобиль,
	|	РасходнаяНакладная.Автор КАК Автор,
	|	РасходнаяНакладная.АдресДоставки КАК АдресДоставки,
	|	РасходнаяНакладная.АдресЭП КАК АдресЭП,
	|	РасходнаяНакладная.БанковскийСчет КАК БанковскийСчет,
	|	РасходнаяНакладная.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	РасходнаяНакладная.БанковскийСчетПеревозчика КАК БанковскийСчетПеревозчика,
	|	РасходнаяНакладная.ВалютаДокумента КАК ВалютаДокумента,
	|	РасходнаяНакладная.Вес КАК Вес,
	|	РасходнаяНакладная.ВидОперации КАК ВидОперации,
	|	РасходнаяНакладная.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	РасходнаяНакладная.ВидЦен КАК ВидЦен,
	|	РасходнаяНакладная.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента,
	|	РасходнаяНакладная.Водитель КАК Водитель,
	|	РасходнаяНакладная.Грузоотправитель КАК Грузоотправитель,
	|	РасходнаяНакладная.Грузополучатель КАК Грузополучатель,
	|	РасходнаяНакладная.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	РасходнаяНакладная.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	РасходнаяНакладная.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	РасходнаяНакладная.ДоверенностьДата КАК ДоверенностьДата,
	|	РасходнаяНакладная.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	РасходнаяНакладная.ДоверенностьНомер КАК ДоверенностьНомер,
	|	РасходнаяНакладная.Договор КАК Договор,
	|	РасходнаяНакладная.ДокументОснование КАК ДокументОснование,
	|	РасходнаяНакладная.ЕстьМаркируемаяПродукцияГИСМ КАК ЕстьМаркируемаяПродукцияГИСМ,
	|	РасходнаяНакладная.ЕстьПодконтрольнаяПродукцияВЕТИС КАК ЕстьПодконтрольнаяПродукцияВЕТИС,
	|	РасходнаяНакладная.Заказ КАК Заказ,
	|	РасходнаяНакладная.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	РасходнаяНакладная.ИдентификаторЧекаШтрихМ КАК ИдентификаторЧекаШтрихМ,
	|	РасходнаяНакладная.Комментарий КАК Комментарий,
	|	РасходнаяНакладная.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	РасходнаяНакладная.Контрагент КАК Контрагент,
	|	РасходнаяНакладная.Кратность КАК Кратность,
	|	РасходнаяНакладная.Курс КАК Курс,
	|	РасходнаяНакладная.НалогообложениеНДС КАК НалогообложениеНДС,
	|	РасходнаяНакладная.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	РасходнаяНакладная.НоменклатураДоставки КАК НоменклатураДоставки,
	|	РасходнаяНакладная.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	РасходнаяНакладная.НомерСменыККМ КАК НомерСменыККМ,
	|	РасходнаяНакладная.НомерСчетаНаОплату КАК НомерСчетаНаОплату,
	|	РасходнаяНакладная.НомерЧекаККМ КАК НомерЧекаККМ,
	|	РасходнаяНакладная.Объем КАК Объем,
	|	РасходнаяНакладная.Организация КАК Организация,
	|	РасходнаяНакладная.ОрганизацияОплачиваетПеревозку КАК ОрганизацияОплачиваетПеревозку,
	|	РасходнаяНакладная.ОснованиеПечати КАК ОснованиеПечати,
	|	РасходнаяНакладная.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	РасходнаяНакладная.Ответственный КАК Ответственный,
	|	РасходнаяНакладная.Перевозчик КАК Перевозчик,
	|	РасходнаяНакладная.ПереданВЕГАИС КАК ПереданВЕГАИС,
	|	РасходнаяНакладная.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	РасходнаяНакладная.ПодписьКассира КАК ПодписьКассира,
	|	РасходнаяНакладная.ПодписьКладовщика КАК ПодписьКладовщика,
	|	РасходнаяНакладная.ПодписьРуководителя КАК ПодписьРуководителя,
	|	РасходнаяНакладная.Подразделение КАК Подразделение,
	|	РасходнаяНакладная.Прицеп КАК Прицеп,
	|	РасходнаяНакладная.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	РасходнаяНакладная.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
	|	РасходнаяНакладная.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	РасходнаяНакладная.СпособПродажиГИСМ КАК СпособПродажиГИСМ,
	|	РасходнаяНакладная.СрокДоставки КАК СрокДоставки,
	|	РасходнаяНакладная.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	РасходнаяНакладная.СтоимостьДоставки КАК СтоимостьДоставки,
	|	РасходнаяНакладная.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	РасходнаяНакладная.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РасходнаяНакладная.СуммаДокумента КАК СуммаДокумента,
	|	РасходнаяНакладная.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	РасходнаяНакладная.Телефон КАК Телефон,
	|	РасходнаяНакладная.УсловияГарантийногоТалона КАК УсловияГарантийногоТалона,
	|	РасходнаяНакладная.УсловияСчетаЗаказа КАК УсловияСчетаЗаказа,
	|	РасходнаяНакладная.УчитыватьВНУ КАК УчитыватьВНУ,
	|	РасходнаяНакладная.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	РасходнаяНакладная.Ячейка КАК Ячейка,
	|	РасходнаяНакладная.Проект КАК Проект
	|ИЗ
	|	Документ.РасходнаяНакладная КАК РасходнаяНакладная
	|ГДЕ
	|	РасходнаяНакладная.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка,
	|	КорректировкаРеализации.Номер,
	|	КорректировкаРеализации.Дата,
	|	КорректировкаРеализации.Автомобиль,
	|	КорректировкаРеализации.Автор,
	|	КорректировкаРеализации.АдресДоставки,
	|	"""",
	|	КорректировкаРеализации.БанковскийСчет,
	|	КорректировкаРеализации.БанковскийСчетКонтрагента,
	|	КорректировкаРеализации.БанковскийСчетПеревозчика,
	|	КорректировкаРеализации.ВалютаДокумента,
	|	0,
	|	КорректировкаРеализации.ВидОперации,
	|	КорректировкаРеализации.ВидСкидкиНаценки,
	|	КорректировкаРеализации.ВидЦен,
	|	"""",
	|	КорректировкаРеализации.Водитель,
	|	КорректировкаРеализации.Грузоотправитель,
	|	КорректировкаРеализации.Грузополучатель,
	|	КорректировкаРеализации.ДатаВходящегоДокумента,
	|	КорректировкаРеализации.ДисконтнаяКарта,
	|	КорректировкаРеализации.ДоверенностьВыдана,
	|	КорректировкаРеализации.ДоверенностьДата,
	|	КорректировкаРеализации.ДоверенностьЛицо,
	|	КорректировкаРеализации.ДоверенностьНомер,
	|	КорректировкаРеализации.Договор,
	|	КорректировкаРеализации.ДокументОснование,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	КорректировкаРеализации.Заказ,
	|	"""",
	|	"""",
	|	КорректировкаРеализации.Комментарий,
	|	КорректировкаРеализации.КонтактноеЛицоПодписант,
	|	КорректировкаРеализации.Контрагент,
	|	КорректировкаРеализации.Кратность,
	|	КорректировкаРеализации.Курс,
	|	КорректировкаРеализации.НалогообложениеНДС,
	|	КорректировкаРеализации.НДСВключатьВСтоимость,
	|	КорректировкаРеализации.НоменклатураДоставки,
	|	КорректировкаРеализации.НомерВходящегоДокумента,
	|	"""",
	|	"""",
	|	"""",
	|	0,
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.ОрганизацияОплачиваетПеревозку,
	|	"""",
	|	"""",
	|	КорректировкаРеализации.Ответственный,
	|	КорректировкаРеализации.Перевозчик,
	|	ЛОЖЬ,
	|	КорректировкаРеализации.ПодписьГлавногоБухгалтера,
	|	"""",
	|	КорректировкаРеализации.ПодписьКладовщика,
	|	КорректировкаРеализации.ПодписьРуководителя,
	|	КорректировкаРеализации.Подразделение,
	|	КорректировкаРеализации.Прицеп,
	|	0,
	|	ЛОЖЬ,
	|	"""",
	|	"""",
	|	КорректировкаРеализации.СрокДоставки,
	|	КорректировкаРеализации.СтавкаНДСДоставки,
	|	КорректировкаРеализации.СтоимостьДоставки,
	|	КорректировкаРеализации.СтруктурнаяЕдиница,
	|	КорректировкаРеализации.СуммаВключаетНДС,
	|	КорректировкаРеализации.СуммаДокумента,
	|	КорректировкаРеализации.СуммаНДСДоставки,
	|	"""",
	|	"""",
	|	"""",
	|	ЛОЖЬ,
	|	КорректировкаРеализации.ХозяйственнаяОперация,
	|	КорректировкаРеализации.Ячейка,
	|	КорректировкаРеализации.Проект
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиАкта()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктВыполненныхРабот.Ссылка КАК Ссылка,
	|	АктВыполненныхРабот.Номер КАК Номер,
	|	АктВыполненныхРабот.Дата КАК Дата,
	|	АктВыполненныхРабот.Автор КАК Автор,
	|	АктВыполненныхРабот.АдресЭП КАК АдресЭП,
	|	АктВыполненныхРабот.ВалютаДокумента КАК ВалютаДокумента,
	|	АктВыполненныхРабот.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	АктВыполненныхРабот.ВидЦен КАК ВидЦен,
	|	АктВыполненныхРабот.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	АктВыполненныхРабот.Договор КАК Договор,
	|	АктВыполненныхРабот.ДокументОснование КАК ДокументОснование,
	|	АктВыполненныхРабот.ЗаказНаПроизводство КАК ЗаказНаПроизводство,
	|	АктВыполненныхРабот.ЗаказПокупателя КАК ЗаказПокупателя,
	|	АктВыполненныхРабот.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	АктВыполненныхРабот.Комментарий КАК Комментарий,
	|	АктВыполненныхРабот.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	АктВыполненныхРабот.Контрагент КАК Контрагент,
	|	АктВыполненныхРабот.Кратность КАК Кратность,
	|	АктВыполненныхРабот.Курс КАК Курс,
	|	АктВыполненныхРабот.НалогообложениеНДС КАК НалогообложениеНДС,
	|	АктВыполненныхРабот.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	АктВыполненныхРабот.НомерСменыККМ КАК НомерСменыККМ,
	|	АктВыполненныхРабот.НомерЧекаККМ КАК НомерЧекаККМ,
	|	АктВыполненныхРабот.Организация КАК Организация,
	|	АктВыполненныхРабот.ОснованиеПечати КАК ОснованиеПечати,
	|	АктВыполненныхРабот.ОснованиеПечатиСсылка КАК ОснованиеПечатиСсылка,
	|	АктВыполненныхРабот.Ответственный КАК Ответственный,
	|	АктВыполненныхРабот.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	АктВыполненныхРабот.ПодписьКассира КАК ПодписьКассира,
	|	АктВыполненныхРабот.ПодписьРуководителя КАК ПодписьРуководителя,
	|	АктВыполненныхРабот.Подразделение КАК Подразделение,
	|	АктВыполненныхРабот.ПроцентСкидкиПоДисконтнойКарте КАК ПроцентСкидкиПоДисконтнойКарте,
	|	АктВыполненныхРабот.СпециальныйНалоговыйРежим КАК СпециальныйНалоговыйРежим,
	|	АктВыполненныхРабот.СпособЗачетаПредоплаты КАК СпособЗачетаПредоплаты,
	|	АктВыполненныхРабот.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	АктВыполненныхРабот.СуммаДокумента КАК СуммаДокумента,
	|	АктВыполненныхРабот.Телефон КАК Телефон,
	|	АктВыполненныхРабот.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	АктВыполненныхРабот.Проект КАК Проект
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|ГДЕ
	|	АктВыполненныхРабот.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка,
	|	КорректировкаРеализации.Номер,
	|	КорректировкаРеализации.Дата,
	|	КорректировкаРеализации.Автор,
	|	"""",
	|	КорректировкаРеализации.ВалютаДокумента,
	|	КорректировкаРеализации.ВидСкидкиНаценки,
	|	КорректировкаРеализации.ВидЦен,
	|	КорректировкаРеализации.ДисконтнаяКарта,
	|	КорректировкаРеализации.Договор,
	|	КорректировкаРеализации.ДокументОснование,
	|	НЕОПРЕДЕЛЕНО,
	|	КорректировкаРеализации.Заказ,
	|	"""",
	|	КорректировкаРеализации.Комментарий,
	|	КорректировкаРеализации.КонтактноеЛицоПодписант,
	|	КорректировкаРеализации.Контрагент,
	|	КорректировкаРеализации.Кратность,
	|	КорректировкаРеализации.Курс,
	|	КорректировкаРеализации.НалогообложениеНДС,
	|	КорректировкаРеализации.НДСВключатьВСтоимость,
	|	"""",
	|	"""",
	|	КорректировкаРеализации.Организация,
	|	"""",
	|	"""",
	|	КорректировкаРеализации.Ответственный,
	|	КорректировкаРеализации.ПодписьГлавногоБухгалтера,
	|	"""",
	|	КорректировкаРеализации.ПодписьРуководителя,
	|	КорректировкаРеализации.Подразделение,
	|	0,
	|	ЛОЖЬ,
	|	"""",
	|	КорректировкаРеализации.СуммаВключаетНДС,
	|	КорректировкаРеализации.СуммаДокумента,
	|	"""",
	|	КорректировкаРеализации.ХозяйственнаяОперация,
	|	КорректировкаРеализации.Проект
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросКонструктораДополнительныхПолейШапкиКорректировкиРеализации()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КорректировкаРеализации.Ссылка КАК Ссылка,
	|	КорректировкаРеализации.Номер КАК Номер,
	|	КорректировкаРеализации.Дата КАК Дата,
	|	КорректировкаРеализации.Автомобиль КАК Автомобиль,
	|	КорректировкаРеализации.Автор КАК Автор,
	|	КорректировкаРеализации.АдресДоставки КАК АдресДоставки,
	|	КорректировкаРеализации.БанковскийСчет КАК БанковскийСчет,
	|	КорректировкаРеализации.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	КорректировкаРеализации.БанковскийСчетПеревозчика КАК БанковскийСчетПеревозчика,
	|	КорректировкаРеализации.ВалютаДокумента КАК ВалютаДокумента,
	|	КорректировкаРеализации.ВидОперации КАК ВидОперации,
	|	КорректировкаРеализации.ВидСкидкиНаценки КАК ВидСкидкиНаценки,
	|	КорректировкаРеализации.ВидЦен КАК ВидЦен,
	|	КорректировкаРеализации.Водитель КАК Водитель,
	|	КорректировкаРеализации.Грузоотправитель КАК Грузоотправитель,
	|	КорректировкаРеализации.Грузополучатель КАК Грузополучатель,
	|	КорректировкаРеализации.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	КорректировкаРеализации.ДатаИсправленияИсходногоДокумента КАК ДатаИсправленияИсходногоДокумента,
	|	КорректировкаРеализации.ДатаИсправляемогоКорректировочногоДокумента КАК ДатаИсправляемогоКорректировочногоДокумента,
	|	КорректировкаРеализации.ДатаИсходногоДокумента КАК ДатаИсходногоДокумента,
	|	КорректировкаРеализации.ДисконтнаяКарта КАК ДисконтнаяКарта,
	|	КорректировкаРеализации.ДоверенностьВыдана КАК ДоверенностьВыдана,
	|	КорректировкаРеализации.ДоверенностьДата КАК ДоверенностьДата,
	|	КорректировкаРеализации.ДоверенностьЛицо КАК ДоверенностьЛицо,
	|	КорректировкаРеализации.ДоверенностьНомер КАК ДоверенностьНомер,
	|	КорректировкаРеализации.Договор КАК Договор,
	|	КорректировкаРеализации.ДокументОснование КАК ДокументОснование,
	|	КорректировкаРеализации.ЕстьВДокументеРеализации КАК ЕстьВДокументеРеализации,
	|	КорректировкаРеализации.Заказ КАК Заказ,
	|	КорректировкаРеализации.ЗапланироватьОплату КАК ЗапланироватьОплату,
	|	КорректировкаРеализации.ИсправляемыйДокументРеализации КАК ИсправляемыйДокументРеализации,
	|	КорректировкаРеализации.Касса КАК Касса,
	|	КорректировкаРеализации.Комментарий КАК Комментарий,
	|	КорректировкаРеализации.КонтактноеЛицоПодписант КАК КонтактноеЛицоПодписант,
	|	КорректировкаРеализации.Контрагент КАК Контрагент,
	|	КорректировкаРеализации.Кратность КАК Кратность,
	|	КорректировкаРеализации.Курс КАК Курс,
	|	КорректировкаРеализации.НалогообложениеНДС КАК НалогообложениеНДС,
	|	КорректировкаРеализации.НДСВключатьВСтоимость КАК НДСВключатьВСтоимость,
	|	КорректировкаРеализации.НоменклатураДоставки КАК НоменклатураДоставки,
	|	КорректировкаРеализации.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	КорректировкаРеализации.НомерИсправления КАК НомерИсправления,
	|	КорректировкаРеализации.НомерИсправленияИсходногоДокумента КАК НомерИсправленияИсходногоДокумента,
	|	КорректировкаРеализации.НомерИсправляемогоКорректировочногоДокумента КАК НомерИсправляемогоКорректировочногоДокумента,
	|	КорректировкаРеализации.НомерИсходногоДокумента КАК НомерИсходногоДокумента,
	|	КорректировкаРеализации.Организация КАК Организация,
	|	КорректировкаРеализации.ОрганизацияОплачиваетПеревозку КАК ОрганизацияОплачиваетПеревозку,
	|	КорректировкаРеализации.Ответственный КАК Ответственный,
	|	КорректировкаРеализации.ОтражатьВУчете КАК ОтражатьВУчете,
	|	КорректировкаРеализации.Перевозчик КАК Перевозчик,
	|	КорректировкаРеализации.ПодписьГлавногоБухгалтера КАК ПодписьГлавногоБухгалтера,
	|	КорректировкаРеализации.ПодписьКладовщика КАК ПодписьКладовщика,
	|	КорректировкаРеализации.ПодписьРуководителя КАК ПодписьРуководителя,
	|	КорректировкаРеализации.Подразделение КАК Подразделение,
	|	КорректировкаРеализации.Прицеп КАК Прицеп,
	|	КорректировкаРеализации.СрокДоставки КАК СрокДоставки,
	|	КорректировкаРеализации.СтавкаНДСДоставки КАК СтавкаНДСДоставки,
	|	КорректировкаРеализации.СтавкаНДСДоставкиДоИзменения КАК СтавкаНДСДоставкиДоИзменения,
	|	КорректировкаРеализации.СтавкаНДСДоставкиДоКорректировки КАК СтавкаНДСДоставкиДоКорректировки,
	|	КорректировкаРеализации.СтоимостьДоставки КАК СтоимостьДоставки,
	|	КорректировкаРеализации.СтоимостьДоставкиДоИзменения КАК СтоимостьДоставкиДоИзменения,
	|	КорректировкаРеализации.СтоимостьДоставкиДоКорректировки КАК СтоимостьДоставкиДоКорректировки,
	|	КорректировкаРеализации.СтруктурнаяЕдиница КАК СтруктурнаяЕдиница,
	|	КорректировкаРеализации.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	КорректировкаРеализации.СуммаДокумента КАК СуммаДокумента,
	|	КорректировкаРеализации.СуммаНДСДоставки КАК СуммаНДСДоставки,
	|	КорректировкаРеализации.СуммаНДСДоставкиДоИзменения КАК СуммаНДСДоставкиДоИзменения,
	|	КорректировкаРеализации.СуммаНДСДоставкиДоКорректировки КАК СуммаНДСДоставкиДоКорректировки,
	|	КорректировкаРеализации.ТипДенежныхСредств КАК ТипДенежныхСредств,
	|	КорректировкаРеализации.Ячейка КАК Ячейка,
	|	КорректировкаРеализации.Проект КАК Проект
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка = &Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачеТоваров(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	ЭтоИсправление = ЗначениеЗаполнено(
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
	
	Товары         = Документы.ПриходнаяНакладная.ПустаяСсылка().Запасы.ВыгрузитьКолонки();
	Услуги         = Документы.ПриходнаяНакладная.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	Валюта = НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	
	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
	
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
	
	ДокументыОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		
		Если ТипЗнч(ДокументыОснования) = Тип("Массив") И ДокументыОснования.Количество() > 0 Тогда
			ДокументОснование = ДокументыОснования[0];
		Иначе
			ДокументОснование = ДокументыОснования;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерТоварнойНакладной"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаТоварнойНакладной"));
	
	Если ЭтоИсправление Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "Плательщик"));
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "Поставщик"));
	
	СведенияОТоварах = ДеревоДанных.Строки.Найти("ТаблицаТоваров", "ПолныйПуть");
	Для Каждого СведенияОТоваре Из СведенияОТоварах.Строки Цикл
		
		Номенклатура = НоменклатураИБ(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Сопоставление");
		Характеристика = ХарактеристикаИБ(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Сопоставление");
		Упаковка = УпаковкаИБ(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Сопоставление");
		
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,
				"ТаблицаТоваров.НомерСтроки.НаименованиеНоменклатуры");
		ВидТаблицыДокумента = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
			СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.ТаблицаДокумента", Ложь);
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры") = Перечисления.ТипыНоменклатуры.Услуга Тогда
				
				ВидТаблицыДокумента = "Услуги";
				
			Иначе
				
				ВидТаблицыДокумента = "Товары";
				
			КонецЕсли;
			
		КонецЕсли;
			
		Если ВидТаблицыДокумента = "Товары" Тогда
		
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Характеристика = Характеристика;
			
		ИначеЕсли ВидТаблицыДокумента = "Услуги" Тогда
			
			НоваяСтрока = Услуги.Добавить();
			
		Иначе
			
			ВидТаблицыДокумента = "Товары";
			НоваяСтрока = Товары.Добавить();
			
		КонецЕсли;
		НоваяСтрока.Номенклатура = Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = Упаковка;
		
		Если ВидТаблицыДокумента = "Товары" Тогда
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
				НоваяСтрока.ЕдиницаИзмерения = НайтиСсылкуНаОбъект("ЕдиницыИзмерения",
						ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.БазоваяЕдиницаКод"));
			КонецЕсли;
					
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
			НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
		КонецЕсли;
		
		
		Если ВидТаблицыДокумента = "Услуги" Тогда
			
			НоваяСтрока.Содержание = НаименованиеНоменклатуры;
			
		КонецЕсли;
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре,  "ТаблицаТоваров.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		МассаНетто = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.МассаНетто");
		КоличествоМест = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.КоличествоМест");
		НоваяСтрока.Количество = ?(ЗначениеЗаполнено(МассаНетто), МассаНетто, КоличествоМест);
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.Всего = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.СуммаСНДС");
		
		Если ВидТаблицыДокумента = "Товары" Тогда
			
			НомерТД = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.НомерТД", Ложь);
			КодСтраныПроисхождения = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(
				СведенияОТоваре, "ТаблицаТоваров.НомерСтроки.ДопДанныеПодписанные.КодСтраныПроисхождения", Ложь);
				
			ДанныеГТД = Новый Структура;
			Если ЗначениеЗаполнено(НомерТД) Тогда
				
				ДанныеГТД.Вставить("НомерТД", НомерТД);
				
			КонецЕсли;
			Если ЗначениеЗаполнено(КодСтраныПроисхождения) Тогда
				
				ДанныеГТД.Вставить("КодСтраныПроисхождения", КодСтраныПроисхождения);
				
			КонецЕсли;
			ЗаполнитьНомерТДИСтрануПроисхождения(НоваяСтрока, ДанныеГТД);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("ПоложениеЗаказаПоставщику", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		ДанныеОбъекта.Вставить("СтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	Для каждого Строка Из Услуги Цикл
		Строка.СтруктурнаяЕдиница = ОсновноеПодразделение;
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Строка.НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "НаправлениеДеятельности");
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Запасы", Товары);
	ДанныеДляЗаполнения.Вставить("Расходы", Услуги);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслугПоПередачаРабот(ДеревоДанных)
	
	ДанныеОбъекта = Новый Структура;
	
	Запасы 					= Документы.ПриходнаяНакладная.ПустаяСсылка().Запасы.ВыгрузитьКолонки();
	Услуги 				= Документы.ПриходнаяНакладная.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	
	ЭтоИсправление = ЗначениеЗаполнено(
		ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
	
	Валюта = НайтиСсылкуНаОбъект(
				"Валюты", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаКод"));
	ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
	
	ДанныеОбъекта.Вставить("ВидОперацииЭД", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидОперации"));
	ДанныеОбъекта.Вставить("СуммаВключаетНДС", Ложь);
	ДанныеОбъекта.Вставить("Корректировка",    Ложь);
	
	ДокументыОснования = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДокументыОснования");
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		
		Если ТипЗнч(ДокументыОснования) = Тип("Массив") И ДокументыОснования.Количество() > 0 Тогда
			ДокументОснование = ДокументыОснования[0];
		Иначе
			ДокументОснование = ДокументыОснования;
		КонецЕсли;
		
		ДанныеОбъекта.Вставить("ДокументОснование", ДокументОснование);
		
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("НомерВходящегоДокумента", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерАкта"));
	ДанныеОбъекта.Вставить("ДатаВходящегоДокумента",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаАкта"));
	
	Если ЭтоИсправление Тогда
		ДанныеОбъекта.Вставить("Исправление", Истина);
		ДанныеОбъекта.Вставить("НомерИсправления", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "НомерИсправления"));
		ДанныеОбъекта.Вставить("ДатаИсправления",  ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, "ДатаИсправления"));
	Иначе
		ДанныеОбъекта.Вставить("Исправление", Ложь);
	КонецЕсли;
	
	ДанныеОбъекта.Вставить("Организация", ОрганизацияПоДаннымЭД(ДеревоДанных, "Исполнитель"));
	ДанныеОбъекта.Вставить("Контрагент",  КонтрагентПоДаннымЭД(ДеревоДанных, "Заказчик"));
	
	СведенияОбУслугах = ДеревоДанных.Строки.Найти("ТаблицаУслуг", "ПолныйПуть");
	Для Каждого СведенияОбУслуге Из СведенияОбУслугах.Строки Цикл
		
		НоваяСтрока = Услуги.Добавить();
		
		// Обязательные реквизиты:
		НоваяСтрока.СтавкаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОбУслуге, "ТаблицаУслуг.НомерСтроки.СтавкаНДС");
		НоваяСтрока.СуммаНДС = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОбУслуге,  "ТаблицаУслуг.НомерСтроки.СуммаНДС");
		
		// Необязательные реквизиты:
		НоваяСтрока.Количество = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОбУслуге, "ТаблицаУслуг.НомерСтроки.Количество");
		НоваяСтрока.Цена = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОбУслуге, "ТаблицаУслуг.НомерСтроки.Цена");
		НоваяСтрока.Сумма = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОбУслуге, "ТаблицаУслуг.НомерСтроки.СуммаБезНДС");
		НоваяСтрока.Всего = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОбУслуге, "ТаблицаУслуг.НомерСтроки.СуммаСНДС");
		НоваяСтрока.Содержание = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОбУслуге, "ТаблицаУслуг.НомерСтроки.Описание");
		
		НаименованиеНоменклатуры  = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(СведенияОбУслуге,
				"ТаблицаУслуг.НомерСтроки.НаименованиеНоменклатуры");
		
		НоваяСтрока.Номенклатура = НоменклатураИБ(СведенияОбУслуге, "ТаблицаУслуг.НомерСтроки.Сопоставление"); 
		НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаИзмерения;
		
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("ПоложениеЗаказаПоставщику", Перечисления.ПоложениеРеквизитаНаФорме.ВТабличнойЧасти);
	
	Если НЕ ПолучитьФункциональнуюОпцию("УчетПоНесколькимСкладам") Тогда
		ДанныеОбъекта.Вставить("СтруктурнаяЕдиница", Справочники.СтруктурныеЕдиницы.ОсновнойСклад);
	КонецЕсли;
	
	Пользователь = Пользователи.ТекущийПользователь();
	ЗначениеНастройки = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь, "ОсновноеПодразделение");
	ОсновноеПодразделение = ?(ЗначениеЗаполнено(ЗначениеНастройки), ЗначениеНастройки, Справочники.СтруктурныеЕдиницы.ОсновноеПодразделение);
	
	Для каждого Строка Из Услуги Цикл
		Строка.СтруктурнаяЕдиница = ОсновноеПодразделение;
		Если ЗначениеЗаполнено(Строка.Номенклатура) Тогда
			Строка.НаправлениеДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "НаправлениеДеятельности");
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляЗаполнения = Новый Структура();
	ДанныеДляЗаполнения.Вставить("Шапка", ДанныеОбъекта);
	ДанныеДляЗаполнения.Вставить("Запасы", Запасы);
	ДанныеДляЗаполнения.Вставить("Расходы", Услуги);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

Функция ПолучитьДанныеСтрокиТЧ(ДанныеЗаполнения, ДеревоРазбора) Экспорт
	
	РеквизитыИБ			 		= Новый Структура;
	РеквизитыИБКонтрагента 		= Новый Структура;
	ДанныеДляЗаполненияСтрокиТЧ = Новый Структура();
	
	ДанныеДляЗаполненияСтрокиТЧ.Вставить("Количество", 0);
	ДанныеДляЗаполненияСтрокиТЧ.Вставить("Цена", 0);
	ДанныеДляЗаполненияСтрокиТЧ.Вставить("Сумма", 0);
	ДанныеДляЗаполненияСтрокиТЧ.Вставить("СуммаСНДС", 0);
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Мест") Тогда
			ИмяРеквизитаВБД = "КоличествоМест";
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("Описание") Тогда
			ИмяРеквизитаВБД = "Содержание";
		ИначеЕсли Найти(ИмяРеквизитаВБД, "ДоКорректировки") <> 0 Тогда
			ИмяРеквизитаВБД = СтрЗаменить(ИмяРеквизитаВБД, "ДоКорректировки", "ДоИзменения");
		КонецЕсли;
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Описание") Тогда
			ИмяРеквизитаВБД = "Содержание";
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизита(ТекСтрока, ИмяРеквизитаВБД, Истина, ДеревоРазбора);
		
		// Если номер заказа, нужно искать ссылку на документ
		Если ВРег(ИмяРеквизитаВБД) = ВРег("НомерПоДаннымПоставщика")
			И НЕ ПустаяСтрока(НайденноеЗначение) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", НайденноеЗначение);
		КонецЕсли;
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("НомерЗаказаПоДаннымПокупателя")
			И НЕ ПустаяСтрока(НайденноеЗначение) Тогда
			РеквизитыИБ.Вставить("Номер", НайденноеЗначение);
		КонецЕсли;
		
		ДанныеДляЗаполненияСтрокиТЧ.Вставить(ИмяРеквизитаВБД, НайденноеЗначение);
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Номенклатура") И ЗначениеЗаполнено(НайденноеЗначение) Тогда
			
			ТекНоменклатура = НайденноеЗначение;
			
			СтрокаНоменклатура = ДеревоРазбора.Строки.Найти(ТекСтрока.ЗначениеРеквизита,"ИндексСтроки",Истина);
			НайденноеЗначение = ПолучитьЗначениеРеквизита(СтрокаНоменклатура, "ЕдиницаИзмерения", Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
				ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмерения", НайденноеЗначение);
			Иначе
				ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмерения", ТекНоменклатура.ЕдиницаИзмерения);
			КонецЕсли;
			
		ИначеЕсли ВРег(ИмяРеквизитаВБД) = ВРег("ИД") И ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			
			НайденноеЗначение = Справочники.НоменклатураПоставщиков.НайтиПоРеквизиту("Идентификатор", ТекСтрока.ЗначениеРеквизита);
			Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
				Если ЗначениеЗаполнено(НайденноеЗначение.Номенклатура) Тогда
					ДанныеДляЗаполненияСтрокиТЧ.Вставить("Номенклатура", НайденноеЗначение.Номенклатура);
				КонецЕсли;
				Если ЗначениеЗаполнено(НайденноеЗначение.Характеристика) Тогда
					ДанныеДляЗаполненияСтрокиТЧ.Вставить("Характеристика", НайденноеЗначение.Характеристика);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВРег(ИмяРеквизитаВБД) = ВРег("Сопоставление") Тогда
			Сопоставление = ПолучитьЗначениеРеквизита(ТекСтрока, ИмяРеквизитаВБД, Истина, ДеревоРазбора);
			Если ТипЗнч(Сопоставление) <> Тип("Структура") Тогда
				Продолжить;
			Иначе
				Если Сопоставление.Свойство("НоменклатураИБ") И ЗначениеЗаполнено(Сопоставление.НоменклатураИБ) Тогда
					ДанныеДляЗаполненияСтрокиТЧ.Вставить("Номенклатура", Сопоставление.НоменклатураИБ);
				КонецЕсли;
				Если Сопоставление.Свойство("ХарактеристикаИБ") И ЗначениеЗаполнено(Сопоставление.ХарактеристикаИБ) Тогда
					ДанныеДляЗаполненияСтрокиТЧ.Вставить("Характеристика", Сопоставление.ХарактеристикаИБ);
				КонецЕсли;
				Если Сопоставление.Свойство("УпаковкаИБ") И ЗначениеЗаполнено(Сопоставление.УпаковкаИБ) Тогда
					ДанныеДляЗаполненияСтрокиТЧ.Вставить("ЕдиницаИзмерения", Сопоставление.УпаковкаИБ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("КоличествоУпаковок") И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.КоличествоУпаковок) Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Количество = ДанныеДляЗаполненияСтрокиТЧ.КоличествоУпаковок;
	КонецЕсли;
	
	ЦенаВключаетНДС = Истина;
	Если ДанныеДляЗаполненияСтрокиТЧ.Свойство("ЦенаВключаетНДС") Тогда
		ЦенаВключаетНДС = ДанныеДляЗаполненияСтрокиТЧ.ЦенаВключаетНДС = Истина;
	ИначеЕсли ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС)
		И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Количество)
		И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Цена) Тогда
		СуммаВСтрокеТЧ = ДанныеДляЗаполненияСтрокиТЧ.Количество * ДанныеДляЗаполненияСтрокиТЧ.Цена;
		ЦенаВключаетНДС = Цел(СуммаВСтрокеТЧ) = Цел(ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС);
	КонецЕсли;
	
	Если ЦенаВключаетНДС И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС) Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Сумма = ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Сумма)
		И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Количество)
		И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Цена) Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Сумма = ДанныеДляЗаполненияСтрокиТЧ.Количество * ДанныеДляЗаполненияСтрокиТЧ.Цена;
	КонецЕсли;
	
	// Реквизит СуммаСНДС в УНФ называется ВСЕГО
	Если ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС) Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("Всего", ДанныеДляЗаполненияСтрокиТЧ.СуммаСНДС);
	ИначеЕсли Не ЦенаВключаетНДС
		И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Сумма)
		И ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.СуммаНДС) Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("Всего", ДанныеДляЗаполненияСтрокиТЧ.Сумма + ДанныеДляЗаполненияСтрокиТЧ.СуммаНДС);
	ИначеЕсли ЗначениеЗаполнено(ДанныеДляЗаполненияСтрокиТЧ.Сумма) Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("Всего", ДанныеДляЗаполненияСтрокиТЧ.Сумма);
	КонецЕсли;
	
	// Если передавался номер заказа пробуем найти
	Если РеквизитыИБ.Количество() > 0
		ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда
		
		ВидЭД 		= Перечисления.ВидыЭД.ОтветНаЗаказ;
		Контрагент	= ПолучитьЗначениеРеквизита(ДеревоРазбора, "Контрагент", Истина, ДеревоРазбора);
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
		
			НайденныйДокумент = НайтиДокумент(ВидЭД, Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
				ДанныеДляЗаполненияСтрокиТЧ.Вставить("Заказ", НайденныйДокумент);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДанныеДляЗаполненияСтрокиТЧ.Свойство("Содержание")
		И ДанныеДляЗаполненияСтрокиТЧ.Свойство("Наименование") Тогда
		ДанныеДляЗаполненияСтрокиТЧ.Вставить("Содержание", ДанныеДляЗаполненияСтрокиТЧ.Наименование);
	КонецЕсли;
	
	Возврат ДанныеДляЗаполненияСтрокиТЧ;
	
КонецФункции

Функция КонтрагентПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	Если ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ЮЛ" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И Контрагенты.КПП = &КПП
			|	И Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ЮридическоеЛицо)";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН"));
		КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Если ЗначениеЗаполнено(КПП) Тогда
			Запрос.УстановитьПараметр("КПП", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП"));
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Контрагенты.КПП = &КПП", "");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИП" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И (Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель)
			|			ИЛИ Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо))";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИП.ИНН"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ФЛ"  Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.ИНН = &ИНН
			|	И (Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ИндивидуальныйПредприниматель)
			|			ИЛИ Контрагенты.ВидКонтрагента = ЗНАЧЕНИЕ(Перечисление.ВидыКонтрагентов.ФизическоеЛицо))";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ФЛ.ИНН"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника") = "ИЛ" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Контрагенты.Ссылка
			|ИЗ
			|	Справочник.Контрагенты КАК Контрагенты
			|ГДЕ
			|	Контрагенты.НаименованиеПолное = &НаименованиеПолное";
		Запрос.УстановитьПараметр("НаименованиеПолное",
			ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ИЛ.НаименованиеОрганизации"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
	
КонецФункции

Функция ОрганизацияПоДаннымЭД(ДеревоДанных, ВидУчастника)
	
	ТипУчастника = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника");
	Если ТипУчастника = "ЮЛ" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.КПП = &КПП
			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.ИНН"));
		КПП = ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП");
		Если ЗначениеЗаполнено(КПП) Тогда
			Запрос.УстановитьПараметр("КПП", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника.ЮЛ.КПП"));
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организации.КПП = &КПП", "");
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	ИначеЕсли ТипУчастника = "ИП"
		ИЛИ ТипУчастника = "ФЛ" Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Организации.Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ИНН = &ИНН
			|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
		Запрос.УстановитьПараметр("ИНН", ЭлектронноеВзаимодействиеСлужебный.ЗначениеРеквизитаВДереве(ДеревоДанных, ВидУчастника + ".ТипУчастника." + ТипУчастника + ".ИНН"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Справочники.Организации.ПустаяСсылка();

КонецФункции

Функция НоменклатураИБ(СведенияОТоваре, ПутьКДаннымСопоставления)
	
	Сопоставление = СведенияОТоваре.Строки.Найти(
			ПутьКДаннымСопоставления, "ПолныйПуть", Истина);
	
	Если Сопоставление <> Неопределено Тогда
		Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			ПутьКДаннымСопоставления + ".НоменклатураИБ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура;
	Иначе
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ХарактеристикаИБ(СведенияОТоваре, ПутьКДаннымСопоставления)
	
	Сопоставление = СведенияОТоваре.Строки.Найти(
			ПутьКДаннымСопоставления, "ПолныйПуть", Истина);
	
	Если Сопоставление <> Неопределено Тогда
		Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			ПутьКДаннымСопоставления + ".ХарактеристикаИБ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура;
	Иначе
		Возврат Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция УпаковкаИБ(СведенияОТоваре, ПутьКДаннымСопоставления)
	
	Сопоставление = СведенияОТоваре.Строки.Найти(
			ПутьКДаннымСопоставления, "ПолныйПуть", Истина);
	
	Если Сопоставление <> Неопределено Тогда
		Номенклатура = ЭлектронноеВзаимодействие.ЗначениеРеквизитаВДереве(СведенияОТоваре,
			ПутьКДаннымСопоставления + ".УпаковкаИБ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат Номенклатура;
	Иначе
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо, ДатаСведений = Неопределено, БанковскийСчет = Неопределено) Экспорт
	
	Дата = ?(ДатаСведений = Неопределено, ТекущаяДата(), ДатаСведений);
	Сведения = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(ЮрФизЛицо, Дата,, БанковскийСчет);
	
	Если ТипЗнч(ЮрФизЛицо) = Тип("СправочникСсылка.Организации") Тогда
		ТипЮрФизЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ЮридическоеФизическоеЛицо");
	Иначе
		ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "ВидКонтрагента");
		Если ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель
			ИЛИ ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо Тогда
			ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЮрФизЛица = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		Фамилия		= "";
		Имя			= "";
		Отчество	= "";
		
		ФИО = Сведения.ПолноеНаименование;
		Если Не ЗначениеЗаполнено(ФИО) Тогда
			ФИО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЮрФизЛицо, "Наименование");
		КонецЕсли;
		
		Если ВРЕГ(Лев(ФИО,2))="ИП" Тогда
			ФИО = Прав(ФИО, СтрДлина(ФИО)-2);
		ИначеЕсли ВРЕГ(Лев(ФИО, СтрДлина("Индивидуальный предприниматель")))="ИНДИВИДУАЛЬНЫЙ ПРЕДПРИНИМАТЕЛЬ" Тогда
			ФИО = Прав(ФИО, СтрДлина(ФИО)-СтрДлина("Индивидуальный предприниматель"));
		КонецЕсли;
		ФИО = СтрЗаменить(ФИО, """","");
		ФИО = СтрЗаменить(ФИО, "'","");
		ФИО = СокрЛП(ФИО);
		
		Сведения.ПолноеНаименование = ФИО;
		
		ФамилияИнициалыФизЛица(Сведения.ПолноеНаименование, Фамилия, Имя, Отчество);
		
		Сведения.Вставить("Фамилия",	Фамилия);
		Сведения.Вставить("Имя",		Имя);
		Сведения.Вставить("Отчество",	Отчество);
		
	КонецЕсли;
	
	Сведения.Вставить("Ссылка",    ЮрФизЛицо);
	Сведения.Вставить("ЮрФизЛицо", ТипЮрФизЛица);
	Сведения.Вставить("ОфициальноеНаименование", Сведения.ПолноеНаименование);
	
	Сведения.Вставить("ФактическийАдресИдентификатор", "");
	
	Возврат Сведения
	
КонецФункции

Процедура ЗаполнитьРеквизитыНоменклатурыДляУчетаАлкогольнойПродукции(ТоварСсылка, ЗначенияСвойств)

	СтруктураСвойств = Новый Структура;
	
	СтруктураСвойств.Вставить("КодВидаАлкогольнойПродукции");
	СтруктураСвойств.Вставить("ИННПроизводителяИмпортера");
	СтруктураСвойств.Вставить("КПППроизводителяИмпортера");
	СтруктураСвойств.Вставить("ОбъемДАЛ");
	
	СвойстваНаУдаление = Новый Массив;
	
	Для каждого Свойство Из ЗначенияСвойств Цикл
		Если Не ЗначениеЗаполнено(Свойство.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		Если СтруктураСвойств.Свойство(Свойство.Наименование) Тогда
			СтруктураСвойств[Свойство.Наименование] = Свойство.Значение[0];
			СвойстваНаУдаление.Добавить(Свойство);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Свойство Из СвойстваНаУдаление Цикл
		НайденныйЭлемент = ЗначенияСвойств.Найти(Свойство);
		Если НайденныйЭлемент <> Неопределено Тогда
			ЗначенияСвойств.Удалить(НайденныйЭлемент);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыАлкогольнойПродукции.Ссылка КАК ВидАлкогольнойПродукции
	|ИЗ
	|	Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|ГДЕ
	|	ВидыАлкогольнойПродукции.Код = &КодВидаАлкогольнойПродукции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК ПроизводительИмпортерАлкогольнойПродукции
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	&ИННПроизводителяИмпортера <> Неопределено И Контрагенты.ИНН = &ИННПроизводителяИмпортера
	|	И Контрагенты.КПП = &КПППроизводителяИмпортера";
	
	Запрос.УстановитьПараметр("КодВидаАлкогольнойПродукции", СтруктураСвойств.КодВидаАлкогольнойПродукции);
	Запрос.УстановитьПараметр("ИННПроизводителяИмпортера", ?(ЗначениеЗаполнено(СтруктураСвойств.ИННПроизводителяИмпортера), СтруктураСвойств.ИННПроизводителяИмпортера, Неопределено));
	Запрос.УстановитьПараметр("КПППроизводителяИмпортера", СтруктураСвойств.КПППроизводителяИмпортера);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТоварОбъект = ТоварСсылка.ПолучитьОбъект();
	ДанныеМодифицированы = Ложь;
	
	Если ЗначениеЗаполнено(СтруктураСвойств.ОбъемДАЛ) Тогда
		ТоварОбъект.ОбъемДАЛ = СтруктураСвойств.ОбъемДАЛ;
		ДанныеМодифицированы = Истина;
	КонецЕсли;
	
	Выборка = МассивРезультатов[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ТоварОбъект.ВидАлкогольнойПродукции = Выборка.ВидАлкогольнойПродукции;
		ДанныеМодифицированы = Истина;
	КонецЕсли;

	Выборка = МассивРезультатов[1].Выбрать();
	Если Выборка.Следующий() Тогда
		ТоварОбъект.ПроизводительИмпортерАлкогольнойПродукции = Выборка.ПроизводительИмпортерАлкогольнойПродукции;
		ДанныеМодифицированы = Истина;
	КонецЕсли;
	
	Если ДанныеМодифицированы Тогда
		ТоварОбъект.ОбменДанными.Загрузка = Истина;
		ТоварОбъект.Записать();
	КонецЕсли;

КонецПроцедуры

// Определяет, является ли объект корректировочным счетом-фактурой
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.СчетФактураВыданный
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоКорректировочныйСчетФактура(СсылкаНаОбъект) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Получает реквизиты элемнта справочника "Организации".
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - струтура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизации(Организация, СтруктураВозврата) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =  
	"ВЫБРАТЬ
	|	Организации.Наименование 		КАК Наименование,
	|	Организации.НаименованиеПолное 	КАК НаименованиеПолное,
	|	Организации.ИНН 				КАК ИНН,
	|	Организации.КПП 				КАК КПП
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.Наименование 			= Выборка.Наименование;
		СтруктураВозврата.НаименованиеПолное 	= Выборка.НаименованиеПолное;
		СтруктураВозврата.ИНН 					= Выборка.ИНН;
		СтруктураВозврата.КПП 					= Выборка.КПП;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//  ВидУчастника - Строка - вид участника как он представлен в дереве данных.
//  КорневойЭлементДерева - Строка - необходимо использовать в случае, если в таблице надо заполнить
//    сложный тип данных (группа, выбор). Например: "Товары.НомерСтроки.Покупатель", Покупатель -
//    является сложным типом данных, тогда КорневойЭлементДерева = "Товары.НомерСтроки".
//
Процедура ЗаполнитьАдресВДереве(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева = "")
	
	Если ТипАдреса = "Произвольный" Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.Произвольный",
									АдресУчастника.АдрТекст, КорневойЭлементДерева);
	Иначе
		Если АдресУчастника.АдресРФ Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("КодГАР");
		Иначе
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("КодГАР");
		КонецЕсли;
		Для Каждого Элемент Из АдресУчастника Цикл
			ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - Строка дерева, содержащая данные участника
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегиона, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//  ВидУчастника - Строка - вид участника как он представлен в дереве данных.
//  КорневойЭлементДерева - Строка - необходимо использовать в случае, если в таблице надо заполнить
//    сложный тип данных (группа, выбор). Например: "Товары.НомерСтроки.Покупатель", Покупатель -
//    является сложным типом данных, тогда КорневойЭлементДерева = "Товары.НомерСтроки".
//
Процедура ЗаполнитьАдресВДеревеУПД(ДеревоДанных, АдресУчастника, ТипАдреса, ВидУчастника, КорневойЭлементДерева = "")
	
	Если ТипАдреса = "АдресРФ" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("КодСтраны");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("АдресТекст");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодГАР");
			
		Для Каждого Элемент Из АдресУчастника Цикл
			ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "АдресИнформация" Тогда
			АдресУчастника.Удалить("АдресРФ");
			АдресУчастника.Удалить("ПочтовыйИндекс");
			АдресУчастника.Удалить("Индекс");
			АдресУчастника.Удалить("Регион");
			АдресУчастника.Удалить("КодРегиона");
			АдресУчастника.Удалить("КодРегион");
			АдресУчастника.Удалить("Район");
			АдресУчастника.Удалить("Город");
			АдресУчастника.Удалить("НаселенныйПункт");
			АдресУчастника.Удалить("НаселПункт");
			АдресУчастника.Удалить("Улица");
			АдресУчастника.Удалить("Дом");
			АдресУчастника.Удалить("Корпус");
			АдресУчастника.Удалить("Квартира");
			АдресУчастника.Удалить("Кварт");
			АдресУчастника.Удалить("КодСтр");
			АдресУчастника.Удалить("АдрТекст");
			АдресУчастника.Удалить("КодГАР");
	
		Для Каждого Элемент Из АдресУчастника Цикл
			ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес." + ТипАдреса + "." + Элемент.Ключ,
									Элемент.Значение, КорневойЭлементДерева);
		КонецЦикла;
	ИначеЕсли ТипАдреса = "КодГАР" Тогда
		ЗаполнитьЗначениеРеквизитаВДереве(
									ДеревоДанных,
									ВидУчастника + ".Адрес.КодГАР",
									Элемент.Значение, КорневойЭлементДерева);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФИОПодписантаВДереве(ДеревоДанных, ТипПодписанта, ИсточникДанных) Экспорт
	
	Фамилия = ""; Имя = ""; Отчество = "";
	ФамилияИнициалыФизЛица(ИсточникДанных, Фамилия, Имя, Отчество);
	ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"Подписант." + ТипПодписанта + ".Фамилия",
								Фамилия);
	ЗаполнитьЗначениеРеквизитаВДереве(ДеревоДанных, "Подписант." + ТипПодписанта + ".Имя", Имя);
	ЗаполнитьЗначениеРеквизитаВДереве(
								ДеревоДанных,
								"Подписант." + ТипПодписанта + ".Отчество",
								Отчество);
	
КонецПроцедуры

// Возвращает ссылку старого объекта или ссылку нового объекта.
//
// Параметры:
//  Объект       - СправочникОбъект, ...
//  ЭтоНовый     - Булево (Возвращаемое значение).
//
Функция СсылкаОбъекта(Знач Объект) Экспорт
	
	Ссылка = Объект.Ссылка;
	ЭтоНовый = НЕ ЗначениеЗаполнено(Ссылка);
	
	Если ЭтоНовый Тогда
		Ссылка = Объект.ПолучитьСсылкуНового();
		
		Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
			
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			Ссылка = Менеджер.ПолучитьСсылку();
			Объект.УстановитьСсылкуНового(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция ИсправляемыйСчетФактураВыданный(СчетФактура) Экспорт
	
	ДокументОснованиеСчетаФактуры = ДокументОснованиеСчетаФактурыВыданного(СчетФактура);
	
	Если ЗначениеЗаполнено(ДокументОснованиеСчетаФактуры) Тогда
		Если ТипЗнч(ДокументОснованиеСчетаФактуры) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ОснованиеДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОснованиеСчетаФактуры, "ДокументОснование");
			Если ЗначениеЗаполнено(ОснованиеДокумента) Тогда
				СтруктураРезультат = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ОснованиеДокумента, Ложь);
				Если СтруктураРезультат <> Неопределено Тогда
					Возврат СтруктураРезультат.Ссылка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДокументОснованиеСчетаФактурыВыданного(СчетФактура) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СчетФактура", СчетФактура);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетФактураДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.СчетФактура.ДокументыОснования КАК СчетФактураДокументыОснования
	|ГДЕ
	|	СчетФактураДокументыОснования.Ссылка = &СчетФактура
	|	И СчетФактураДокументыОснования.НомерСтроки = 1";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументОснование;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьКорректныйКодСтраны(КодСтраны) Экспорт
	
	Если КодСтраны = NULL Тогда
		Возврат "";
	КонецЕсли;
	
	Для К=1 По СтрДлина(КодСтраны) Цикл
		
		СимволКода = Сред(КодСтраны, К, 1);
		Если Найти("0123456789", СимволКода)=0 Тогда
			// Код страны в электронном документе должен содеражать только цифры
			Возврат "";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КодСтраны;
	
КонецФункции

Функция ПризнакТовара(Товар) Экспорт
	
	Если ТипЗнч(Товар) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ЗначениеЗаполнено(Товар)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Товар, "ТипНоменклатуры") = Перечисления.ТипыНоменклатуры.Запас Тогда
			Возврат "1"; // Имущество
		Иначе
			Возврат "3"; // Услуга
		КонецЕсли;
	Иначе
		Возврат "5"; // Иное
	КонецЕсли;
	
КонецФункции

Функция ВидЭлектронногоДокументаРеализации(Источник) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.РасходнаяНакладная")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ВидЭлектронногоДокумента");
		Если Не ЗначениеЗаполнено(ВидЭД) Тогда
			ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		Возврат ВидЭД;
	Иначе
		Возврат Источник.ВидЭлектронногоДокумента;
	КонецЕсли;
	
КонецФункции

Функция ВидЭлектронногоДокументаКорректировки(Источник) Экспорт
	
	ИсходныйИсправляемыйДокумент = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументОснование, Истина);
	ИсправляемыйДокумент = Документы.КорректировкаРеализации.ПолучитьИсправляемыйДокументРеализации(Источник.ДокументОснование);
	
	СтруктураРезультат = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ИсходныйИсправляемыйДокумент, Ложь);
	Если СтруктураРезультат <> Неопределено Тогда
		СчетФактураИсходногоИсправляемогоДокумента = СтруктураРезультат.Ссылка;
	Иначе
		СчетФактураИсходногоИсправляемогоДокумента = Неопределено;
	КонецЕсли;
	
	Если Источник.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
		 ИЛИ (ТипЗнч(ИсправляемыйДокумент) = Тип("ДокументСсылка.КорректировкаРеализации") 
		     И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокумент, "ВидОперации") = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение) Тогда
		 
		// Выполняется согласованное изменение или исправление согласованного изменения
		Возврат Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
		
	ИначеЕсли ТипЗнч(ИсходныйИсправляемыйДокумент) = Тип("ДокументСсылка.РасходнаяНакладная")
		 ИЛИ ТипЗнч(ИсходныйИсправляемыйДокумент) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		Возврат ВидЭлектронногоДокументаРеализации(ИсходныйИсправляемыйДокумент);
		
	ИначеЕсли ТипЗнч(ИсходныйИсправляемыйДокумент) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			
		Возврат Перечисления.ВидыЭД.АктИсполнитель;
		
	КонецЕсли;
	
	Возврат Перечисления.ВидыЭД.ПустаяСсылка();
	
КонецФункции

// Заполняет реквизиты объекта по соответствию наименований
//
// Параметры:
//  СтрокаМассива - СтрокаДереваЗначений, набор параметров, по которому будет происходить заполнение
//  ОбъектМетаданных - Объект ИБ, реквизиты которого необходимо заполнить.
//
Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
	
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Перезаполняет реквизиты шапки объекта.
//
// Параметры:
//  ТекущийОбъект    - Объект ИБ, реквизиты шапки которого необходимо заполнить,
//  ДанныеЗаполнения - Структура значений, которые необходимо подставить в объект ИБ.
//
Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Организация) Тогда
		ТекущийОбъект.Организация = ОрганизацияПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

Функция КодРегионаПоНазванию(Название) Экспорт
	
	Если ПустаяСтрока(Название) Тогда
		Возврат "";
	КонецЕсли;
	
	КодСубъектаРФ = АдресныйКлассификатор.КодРегионаПоНаименованию(Название);
	Если КодСубъектаРФ <> Неопределено Тогда
		Возврат Формат(КодСубъектаРФ, "ЧЦ=2; ЧВН=")
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает адрес в виде структуры полей. Если адрес нужного вида не задан, то будет возвращена структура с пустыми полями.
//
// Параметры:
//    Ссылка                  - ссылка на объект, который содержит контактную информацию.
//    ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации - вид контактной информации, структуру
//                                                                          которого нужно получить.
//
// Возвращаемое значение:
//  Структура - Структура со значениями полей адреса.
//
Функция АдресСтруктурой(Ссылка, ВидКонтактнойИнформации) Экспорт
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("АдресРФ", Истина);
	СтруктураАдреса.Вставить("КодСтраны", "");
	СтруктураАдреса.Вставить("Страна", "");
	СтруктураАдреса.Вставить("Индекс", "");
	СтруктураАдреса.Вставить("Регион", "");
	СтруктураАдреса.Вставить("КодРегиона", "");
	СтруктураАдреса.Вставить("Район", "");
	СтруктураАдреса.Вставить("Город", "");
	СтруктураАдреса.Вставить("НаселенныйПункт", "");
	СтруктураАдреса.Вставить("Улица", "");
	СтруктураАдреса.Вставить("Дом", "");
	СтруктураАдреса.Вставить("Корпус", "");
	СтруктураАдреса.Вставить("Квартира", "");
	СтруктураАдреса.Вставить("Представление", "");
	СтруктураАдреса.Вставить("ЗначенияПолей", "");
	
	Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
							ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка),
							Перечисления.ТипыКонтактнойИнформации.Адрес, 
							ВидКонтактнойИнформации);
	Если Адрес.Количество() = 0 Тогда
		Возврат СтруктураАдреса;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("НаименованиеВключаетСокращение", Истина);
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Адрес[0].ЗначенияПолей, ДополнительныеПараметры);
	СтруктураАдреса.Представление = Адрес[0].Представление;
	СтруктураАдреса.ЗначенияПолей = Адрес[0].ЗначенияПолей;
	
	СтруктураАдреса.Страна    = СведенияОбАдресе.Страна;
	СтруктураАдреса.КодСтраны = СведенияОбАдресе.КодСтраны;
	Если СтруктураАдреса.Свойство("Страна")
		И (Не ЗначениеЗаполнено(СтруктураАдреса.Страна)
		ИЛИ СтрНайти(ВРег(СтруктураАдреса.Страна), "РОССИЯ") > 0
		ИЛИ СтрНайти(ВРег(СтруктураАдреса.Страна), ВРег(Справочники.СтраныМира.Россия.Наименование)) > 0) Тогда
		СтруктураАдреса.АдресРФ = Истина;
	Иначе
		СтруктураАдреса.АдресРФ = Ложь;
	КонецЕсли;
	
	СтруктураАдреса.Индекс = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Регион = СведенияОбАдресе.Регион;
	СтруктураАдреса.КодРегиона = ?(СведенияОбАдресе.Свойство("КодРегиона"), СведенияОбАдресе.КодРегиона, "");
	СтруктураАдреса.Район = СведенияОбАдресе.Район;
	СтруктураАдреса.Город = СведенияОбАдресе.Город;
	СтруктураАдреса.НаселенныйПункт = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.Улица = СведенияОбАдресе.Улица;
	
	СтруктураАдреса.Дом = ?(ЗначениеЗаполнено(СведенияОбАдресе.Здание.ТипЗдания), НРег(Строка(СведенияОбАдресе.Здание.ТипЗдания)) + " ", "") 
		+ СведенияОбАдресе.Здание.Номер;
	
	Если СведенияОбАдресе.Корпуса.Количество() > 0 Тогда
		СтруктураАдреса.Корпус = ?(ЗначениеЗаполнено(СведенияОбАдресе.Корпуса[0].ТипКорпуса), НРег(Строка(СведенияОбАдресе.Корпуса[0].ТипКорпуса)) + " ", "")
			+ СведенияОбАдресе.Корпуса[0].Номер;
	КонецЕсли;
	
	Если СведенияОбАдресе.Помещения.Количество() > 0 Тогда
		СтруктураАдреса.Квартира = ?(ЗначениеЗаполнено(СведенияОбАдресе.Помещения[0].ТипПомещения), НРег(Строка(СведенияОбАдресе.Помещения[0].ТипПомещения)) + " ", "")
			+ СведенияОбАдресе.Помещения[0].Номер;
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

Процедура ЗаполнитьДоговорКонтрагента(ДокументОбъект)

	Если Не ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда
		Возврат;
	ИначеЕсли Не ДокументОбъект.Контрагент.ВестиРасчетыПоДоговорам Тогда
		ДокументОбъект.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(ДокументОбъект.Контрагент);
		Возврат;
	КонецЕсли;
	
	МенеджерСправочника = Справочники.ДоговорыКонтрагентов;
	ВидОперации = ?(ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика"), Неопределено, ДокументОбъект.ВидОперации);
	СписокВидовДоговоров = МенеджерСправочника.ПолучитьСписокВидовДоговораДляДокумента(ДокументОбъект.Ссылка, ВидОперации);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ВалютаРасчетов = &ВалютаРасчетов
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)";
	
	Запрос.УстановитьПараметр("Контрагент", ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговоров);
	Запрос.УстановитьПараметр("ВалютаРасчетов", ДокументОбъект.ВалютаДокумента);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйДоговор.Владелец = ДокументОбъект.Контрагент;
		НовыйДоговор.ВидДоговора = ?(СписокВидовДоговоров.Количество() > 0, СписокВидовДоговоров[0].Значение, Перечисления.ВидыДоговоров.СПокупателем);
		НовыйДоговор.Организация = ДокументОбъект.Организация;
		НовыйДоговор.ВалютаРасчетов = ДокументОбъект.ВалютаДокумента;
		НовыйДоговор.СрокОплатыПоставщику = Константы.СрокОплатыПоставщику.Получить();
		НовыйДоговор.СрокОплатыПокупателя = Константы.СрокОплатыПокупателя.Получить();
		Если ПустаяСтрока(НовыйДоговор.Наименование) Тогда
			НовыйДоговор.Наименование = ШаблоныНаименований.НаименованиеДоговораПоУмолчанию(НовыйДоговор);
		КонецЕсли;
		НовыйДоговор.Записать();
		
		ДокументОбъект.Договор = НовыйДоговор.Ссылка;
		Возврат;
		
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДокументОбъект.Договор = Выборка.Ссылка;

КонецПроцедуры

Функция ПолучитьАдресДоставки(Контрагент) Экспорт

	АдресДоставки = "";
	
	НазначениеКИ = Справочники.ВидыКонтактнойИнформации.СправочникКонтрагенты;
	АдресДоставкиВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Адрес доставки", Истина, НазначениеКИ);
	Если ЗначениеЗаполнено(АдресДоставкиВидКИ) Тогда
		АдресДоставки = УправлениеНебольшойФирмойСервер.ПолучитьКонтактнуюИнформацию(Контрагент, АдресДоставкиВидКИ);
	КонецЕсли;
	
	Возврат АдресДоставки;

КонецФункции // ПолучитьАдресДоставки()

Функция ПолучитьАдресИзКонтактнойИнформации(Владелец, ТипАдреса = "Юр") Экспорт
	
	Результат = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Страна,
	|	КонтактнаяИнформация.Регион,
	|	КонтактнаяИнформация.ЗначенияПолей,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.%ИмяСправочника%.КонтактнаяИнформация КАК КонтактнаяИнформация 
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидАдреса";
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресОрганизации"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Организации");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидАдреса = Справочники.ВидыКонтактнойИнформации[ТипАдреса + "АдресКонтрагента"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Контрагенты");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец",  Владелец);
	Запрос.УстановитьПараметр("Тип",       Перечисления.ТипыКонтактнойИнформации.Адрес);
	Запрос.УстановитьПараметр("ВидАдреса", ВидАдреса);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТелефонИзКонтактнойИнформации(Владелец) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление КАК Телефон
	|ИЗ
	|	Справочник.%ИмяСправочника%.КонтактнаяИнформация КАК КонтактнаяИнформация 
	|ГДЕ
	|	КонтактнаяИнформация.Ссылка = &Владелец
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &ВидТелефона";
	
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонОрганизации"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Организации");
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонКонтрагента"].Ссылка;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяСправочника%", "Контрагенты");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец",    Владелец);
	Запрос.УстановитьПараметр("Тип",         Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("ВидТелефона", ВидТелефона);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Телефон;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(Документ, ПредыдущаяВалюта, ИмяТабличнойЧасти)
	
	СтруктураКурсы = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, Документ.ВалютаДокумента, Документ.Дата);
																   
	Для каждого СтрокаТабличнойЧасти Из Документ[ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти.Цена = УправлениеНебольшойФирмойСервер.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
																								СтруктураКурсы.КурсНач, 
																								СтруктураКурсы.Курс, 
																								СтруктураКурсы.КратностьНач, 
																								СтруктураКурсы.Кратность);
		
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Если Документ.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.СуммаНДС = ?(
				Документ.СуммаВключаетНДС, 
				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100
			);
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
		Иначе
			СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100;
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьИтоговыеСуммыДокумента(ТаблицаДокумента) Экспорт
	
	ИтоговыеСуммы = ИтоговыеСуммыДокумента();
	
	Для Каждого Строка Из ТаблицаДокумента Цикл
		
		ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест        + ?(ЗначениеЗаполнено(Строка.КоличествоМест),Строка.КоличествоМест, 0);
		ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + Строка.СуммаБезНДС;
		ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + Строка.СуммаНДС;
		ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + Строка.СуммаБезНДС + Строка.СуммаНДС;
		
	КонецЦикла;
	
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ТаблицаДокумента.Количество();
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

Функция РассчитатьИтоговыеСуммыКорректировочногоДокумента(ТаблицаДокумента) Экспорт
	
	ИтоговыеСуммы = ИтоговыеСуммыДокумента();
	
	Для Каждого Строка Из ТаблицаДокумента Цикл
		
		ИтоговыеСуммы.ИтогоСуммаБезНДС = ИтоговыеСуммы.ИтогоСуммаБезНДС + Строка.СуммаБезНДС;
		ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС         + Строка.СуммаНДС;
		ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС   + Строка.СуммаБезНДС + Строка.СуммаНДС;
		
		ИтоговыеСуммы.ИтогоСуммаДоКорректировки     = ИтоговыеСуммы.ИтогоСуммаДоКорректировки     + Строка.СуммаБезНДСДоКорректировки;
		ИтоговыеСуммы.ИтогоНДСДоКорректировки       = ИтоговыеСуммы.ИтогоНДСДоКорректировки       + Строка.СуммаНДСДоКорректировки;
		ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки = ИтоговыеСуммы.ИтогоСуммаСНДСДоКорректировки + Строка.СуммаСНДСДоКорректировки;
		
	КонецЦикла;
	
	ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей = ТаблицаДокумента.Количество();
	
	Возврат ИтоговыеСуммы;
	
КонецФункции

Функция ИтоговыеСуммыДокумента()
	
	Структура = Новый Структура;
	
	// Инициализация итогов по документу.
	Структура.Вставить("ИтогоМест", 0);
	Структура.Вставить("ИтогоСуммаСНДС", 0);
	Структура.Вставить("ИтогоСуммаБезНДС", 0);
	Структура.Вставить("ИтогоНДС", 0);
	Структура.Вставить("ИтогоСуммаСНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоСуммаДоКорректировки", 0);
	Структура.Вставить("ИтогоНДСДоКорректировки", 0);
	Структура.Вставить("ИтогоМассаБрутто", 0);
	Структура.Вставить("ИтогоМассаНетто", 0);
	
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", 0);
	Структура.Вставить("СуммаПрописью", "");
	
	Возврат Структура;
	
КонецФункции

Функция ДокументОснованиеСчетаФактурыПолученного(СчетФактура)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("СчетФактура", СчетФактура);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.Ссылка = &СчетФактура";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДокументОснование;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция НомерТДПолучитьСсылку(НомерТД)
	
	НомерТД = СокрЛП(НомерТД);
	Если ПустаяСтрока(НомерТД) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	НомерТДСсылка = Справочники.НомераГТД.НайтиПоКоду(НомерТД);
	Если Не ЗначениеЗаполнено(НомерТДСсылка) Тогда
		
		НомерТДОбъект = Справочники.НомераГТД.СоздатьЭлемент();
		НомерТДОбъект.Код = НомерТД;
		НомерТДОбъект.Записать();
		НомерТДСсылка = НомерТДОбъект.Ссылка;
		
	КонецЕсли; 
	
	Возврат НомерТДСсылка;
	
КонецФункции

Функция СтранаПроисхожденияПолучитьСсылку(КодСтраныПроисхождения)

	Попытка
		
		СтранаПроисхожденияСсылка = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(СокрЛП(КодСтраныПроисхождения));
		
	Исключение
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось найти страну происхождения в классификаторе стран мира.");
		
		Возврат Неопределено;
		
	КонецПопытки;
	Если ЗначениеЗаполнено(СтранаПроисхожденияСсылка) Тогда
		
		Возврат СтранаПроисхожденияСсылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции // СтранаПроисхожденияПолучитьСсылку()

Функция ОтветственныеЛицаОрганизационнойЕдиницы(Организация) Экспорт
	
	СтруктураОтветственныхЛиц = Новый Структура;
	
	СтруктураОтветственныхЛиц.Вставить("РасшифровкаПодписиРуководителя", "");
	СтруктураОтветственныхЛиц.Вставить("ДолжностьРуководителя", "");
	СтруктураОтветственныхЛиц.Вставить("РасшифровкаПодписиГлавногоБухгалтера", "");
	СтруктураОтветственныхЛиц.Вставить("ДолжностьГлавногоБухгалтера", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.ПодписьРуководителя.РасшифровкаПодписи КАК РасшифровкаПодписиРуководителя,
		|	Организации.ПодписьРуководителя.Должность КАК ДолжностьРуководителя,
		|	Организации.ПодписьГлавногоБухгалтера.РасшифровкаПодписи КАК РасшифровкаПодписиГлавногоБухгалтера,
		|	Организации.ПодписьГлавногоБухгалтера.Должность КАК ДолжностьГлавногоБухгалтера
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
		
	Запрос.УстановитьПараметр("Ссылка", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтруктураОтветственныхЛиц, Выборка);
	
	Возврат СтруктураОтветственныхЛиц;
	
КонецФункции

// Определяет, является ли объект корректировочным документом
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка.СчетФактура
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Экспорт
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактура") Тогда
		Возврат СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСчетФактура.Корректировка;
	ИначеЕсли ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
		Возврат СсылкаНаОбъект.ВидОперации = Перечисления.ВидыОперацийСчетФактураПолученный.Корректировка;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции


// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры:
//  ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
//  ИДОбъекта - Строка, идентификатор объекта заданного типа,
//  ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта = "", ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект(ТипОбъекта, Результат, ИдОбъекта, ДополнительныеРеквизиты, ИДЭД);
	
	Возврат Результат;
	
КонецФункции

Функция РазобратьСтрокуТабличнойЧастиСФ(ДанныеЗаполнения, ДеревоРазбора, ВладелецНоменклатуры) Экспорт
	
	СоответствиеПолеЭД_и_ТЧ = ПолучитьСоответствиеПолейДляСчетаФактуры();
	ПоляСтрокиТабличнойЧасти = Новый Структура;
	
	Для Каждого СтрокаДанных Из ДанныеЗаполнения Цикл
		
		Если ВРег(СтрокаДанных.Реквизит) = ВРег("ИД") Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаДанных.ЗначениеРеквизита)
				ИЛИ Не ЗначениеЗаполнено(ВладелецНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураДополнительныхРеквизитов = Новый Структура;
			СтруктураДополнительныхРеквизитов.Вставить("Идентификатор", СтрокаДанных.ЗначениеРеквизита);
			СтруктураДополнительныхРеквизитов.Вставить("Владелец", ВладелецНоменклатуры);
			
			НоменклатураПоставщиков 	= НайтиСсылкуНаОбъект("НоменклатураПоставщиков", , СтруктураДополнительныхРеквизитов);
			Если ЗначениеЗаполнено(НоменклатураПоставщиков) Тогда
				ПоляСтрокиТабличнойЧасти.Вставить("Номенклатура", 	НоменклатураПоставщиков.Номенклатура);
				ПоляСтрокиТабличнойЧасти.Вставить("Характеристика", НоменклатураПоставщиков.Характеристика);
			КонецЕсли;
			
		ИначеЕсли ВРег(СтрокаДанных.Реквизит) = ВРег("ОКЕИ_Тов") Тогда
			
			ПоляСтрокиТабличнойЧасти.Вставить(
				СоответствиеПолеЭД_и_ТЧ.Получить(СтрокаДанных.Реквизит),
				НайтиСсылкуНаОбъект("ЕдиницыИзмерения", СтрокаДанных.ЗначениеРеквизита)
				);
				
		ИначеЕсли ВРег(СтрокаДанных.Реквизит) = ВРег("НалСтВел") Тогда
			
			ПоляСтрокиТабличнойЧасти.Вставить(
				СоответствиеПолеЭД_и_ТЧ.Получить(СтрокаДанных.Реквизит),
				ЗначениеПеречисленияСтавкаНДС(СтрокаДанных.ЗначениеРеквизита)
				);
			
		Иначе
			
			ИмяПоляТабличнойЧастиДокумента = СоответствиеПолеЭД_и_ТЧ.Получить(СтрокаДанных.Реквизит);
			Если ИмяПоляТабличнойЧастиДокумента <> Неопределено Тогда
				ПоляСтрокиТабличнойЧасти.Вставить(ИмяПоляТабличнойЧастиДокумента, СтрокаДанных.ЗначениеРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоляСтрокиТабличнойЧасти;
	
КонецФункции

Функция ПолучитьЗначениеРеквизита(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		// Если реквизит ссылочного типа (передали реквизит ДеревоРазбора),
		// тогда нашли всего лишь индекс строки
		Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
			НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
			Если НайденнаяСтрока <> Неопределено Тогда
				Результат = НайденнаяСтрока.СсылкаНаОбъект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сохраняет значение в дереве данных.
//
// Параметры:
//  Дерево - ДеревоЗначений - дерево, содержащее данные электронного документа
//                            (см. ЭлектронноеВзаимодействие.ДеревоДокумента).
//  Реквизит - Строка - содержит полный путь к реквизиту дерева.
//  Значение - Произвольный - сохраняемое в дереве значение.
//  ПараметрыОбработкиОшибок - Строка - используется, чтобы переопределить текст выводимой по реквизиту ошибки
//                                      без указания параметров действий по клику на ошибке.
//                           - Структура - используется для указания указания параметров действий по клику на ошибке,
//                                         формируется функцией ЭлектронноеВзаимодействиеКлиентСервер.НовыеПараметрыОбработкиОшибки.
//
Процедура ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок = Неопределено) Экспорт
	
	СтрокаДерева = Дерево.Строки.Найти(Реквизит, "ПолныйПуть", Истина);
	Если СтрокаДерева <> Неопределено
		И СтрокаДерева.ПараметрыОбработкиОбязательны = "Да" Тогда
		ПараметрыОбработкиОшибок = "Не заполнен обязательный реквизит для формирования электронного документа " + Реквизит + ".";
	КонецЕсли;
	
	Попытка
		ЭлектронноеВзаимодействие.ЗаполнитьЗначениеРеквизитаВДереве(Дерево, Реквизит, Значение, ПараметрыОбработкиОшибок);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОбработкиОшибокВТаблицеТоваровCML(ТаблицаТоваров, СсылкаНаДокумент = Неопределено) Экспорт

	// Обработка ошибки через механизм сообщений пользователю.
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Артикул", "Номенклатура", "Объект.Артикул");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"Наименование", "Номенклатура", "Объект.Наименование");
	
	Если ЗначениеЗаполнено(СсылкаНаДокумент) Тогда		
		Если ТаблицаТоваров.Колонки.Найти("Количество") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Количество", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Цена") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Цена", СсылкаНаДокумент, "Объект.Товары.Количество",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("Сумма") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"Сумма", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
		
		Если ТаблицаТоваров.Колонки.Найти("СуммаСкидки") <> Неопределено Тогда
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
				"СуммаСкидки", СсылкаНаДокумент, "Объект.Товары.Сумма",, "НомерСтроки");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ЕдиницаИзмеренияКодПоОКЕИ") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ЕдиницаИзмеренияКодПоОКЕИ", "ЕдиницаИзмерения", "Объект.Код");
		
		// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
		СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка()));
		Если СтрокиСПустойЕдиницей.Количество() Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем единицу прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			Иначе
				// Иначе ссылаемся на незаполненность единицы в самой номенклатуре.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
					"ЕдиницаИзмеренияКодПоОКЕИ", "Номенклатура", "Объект.ЕдиницаИзмерения");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаКод", "БазоваяЕдиницаСсылка", "Объект.Код");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаМеждународноеСокращение", "БазоваяЕдиницаСсылка", "Объект.МеждународноеСокращение");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименование", "БазоваяЕдиницаСсылка", "Объект.Наименование");
	ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
		"БазоваяЕдиницаНаименованиеПолное", "БазоваяЕдиницаСсылка", "Объект.НаименованиеПолное");
	
	// Если единица пустая, надо ссылаться на незаполненность самой единицы, а не ее полей.
	СтрокиСПустойЕдиницей = ТаблицаТоваров.НайтиСтроки(Новый Структура("БазоваяЕдиницаСсылка", Справочники.ЕдиницыИзмерения.ПустаяСсылка()));
	Если СтрокиСПустойЕдиницей.Количество() Тогда
		Если СсылкаНаДокумент <> Неопределено Тогда
			// Для документов берем единицу прямо из документа.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", СсылкаНаДокумент, "Объект.Товары.ЕдиницаИзмерения",, "НомерСтроки");
		Иначе
			// Это каталог товаров - для него единица берется из номенклатуры.
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаКод", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаМеждународноеСокращение", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименование", "Номенклатура", "Объект.ЕдиницаИзмерения");
			ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойЕдиницей,
				"БазоваяЕдиницаНаименованиеПолное", "Номенклатура", "Объект.ЕдиницаИзмерения");
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаТоваров.Колонки.Найти("ВалютаЦены") <> Неопределено Тогда
		ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(ТаблицаТоваров,
			"ВалютаЦены", "Валюта", "Объект.Код");
		
		// Если валюта пустая, надо ссылаться на незаполненность самой валюты, а не ее полей.
		СтрокиСПустойВалютой = ТаблицаТоваров.НайтиСтроки(Новый Структура("Валюта", Справочники.Валюты.ПустаяСсылка()));
		Если СтрокиСПустойВалютой.Количество() И СсылкаНаДокумент <> Неопределено Тогда
			Если СсылкаНаДокумент <> Неопределено Тогда
				// Для документов берем валюту прямо из документа.
				ЭлектронноеВзаимодействие.ДобавитьВТаблицуОбработкуОшибкиЧерезСообщениеПользователю(СтрокиСПустойВалютой,
					"ВалютаЦены", СсылкаНаДокумент, "Объект.Валюта");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Проверяет выполняются ли необходимые автоматические условия для подписи документа.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКПодписи(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
КонецФункции

// Процедура позволяет установить флаг принудительного запуска обработчика обновления.
//
// Параметры:
//  ВерсияОбрабочтика - строка - версия обработчика для запуска при обновлении;
//  ФлагПринудительногоЗапускаОбработчика - булево - признак запуска обработчика.
//
Процедура ОпределитьФлагЗапускаОбработчикаОбновления(ВерсияОбрабочтика, ФлагПринудительногоЗапускаОбработчика) Экспорт
	
	Если ВерсияОбрабочтика = "1.0.5" Тогда
		ФлагПринудительногоЗапускаОбработчика = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьТаблицуТоваров(ТаблицаТоваров) Экспорт
	
	Для Каждого Строка Из ТаблицаТоваров Цикл
		
		Строка.БазоваяЕдиницаКод = СокрЛП(Строка.БазоваяЕдиницаКод);
		Строка.УпаковкаКод = СокрЛП(Строка.УпаковкаКод);
		
		ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
		
		Строка.ИД = Строка(ИДТовара);
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - таблица значений или массив строк таблицы значений, откуда берутся значения.
//  ТаблицаПриемник - таблица значений, куда добавляются строки.
//  ЗаполнятьНомераСтрокПоИсточнику - Булево - определяет необходимость сохранения информации
//		об индексах строк таблицы-источника в таблице-приемнике.
//		Используется в тех случаях, когда необходимо выполнить сопоставление строк приемника и источника.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник, ЗаполнятьНомераСтрокПоИсточнику = Ложь) Экспорт
	
	// Заполним значения в совпадающих колонках.
	Для Каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл
		
		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		
		Если ЗаполнятьНомераСтрокПоИсточнику Тогда
			СтрокаТаблицыПриемника.НомерСтроки = СтрокаТаблицыИсточника.Владелец().Индекс(СтрокаТаблицыИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьВТаблицуЗначений()

Функция АдаптироватьПолученныйЭлемент(ИмяРеквизита) Экспорт
	
	Если ВРЕГ(ИмяРеквизита) = ВРЕГ("НомерПоДаннымПокупателя") 
		ИЛИ ВРЕГ(ИмяРеквизита) = ВРЕГ("НомерПоДаннымПоставщика")  Тогда
		
		ЗначениеКлюча = "НомерВходящегоДокумента";
		
	ИначеЕсли ВРЕГ(ИмяРеквизита) = ВРЕГ("ДатаПоДаннымПокупателя")
		ИЛИ ВРЕГ(ИмяРеквизита) = ВРЕГ("ДатаПоДаннымПоставщика") Тогда
		
		ЗначениеКлюча = "ДатаВходящегоДокумента";
		
	Иначе
		
		ЗначениеКлюча = ИмяРеквизита;
		
	КонецЕсли;
	
	Возврат ЗначениеКлюча;
	
КонецФункции

Функция ДобавитьВТекстЗапросаОтборПоРеквизитуСТипомДата(ТекстЗапроса, ИмяРеквизита) Экспорт
	
	Возврат ТекстЗапроса +
		" И КОНЕЦПЕРИОДА(ДокументПоиска." + ИмяРеквизита + ", ДЕНЬ) = КОНЕЦПЕРИОДА(&" + ИмяРеквизита + ", ДЕНЬ)";
	
КонецФункции

Функция ДобавитьВТекстЗапросаОтборПоПроизвольномуРеквизиту(ТекстЗапроса, ИмяРеквизита) Экспорт
	
	Возврат ТекстЗапроса +
		" И ДокументПоиска." + ИмяРеквизита + " = &" + ИмяРеквизита;
		
КонецФункции

Функция ИскатьДокументПоРеквизитам(СтруктураРеквизитов, Запрос) Экспорт
	
	Если СтруктураРеквизитов <> Неопределено
		И СтруктураРеквизитов.Количество() > 0 Тогда
		
		Для Каждого ТекущийЭлемент Из СтруктураРеквизитов Цикл
			
			ИмяРеквизита = АдаптироватьПолученныйЭлемент(ТекущийЭлемент.Ключ);
			
			Запрос.Текст = ?(СтрНайти(ВРег(ИмяРеквизита), ВРег("Дата")) > 0,
				ДобавитьВТекстЗапросаОтборПоРеквизитуСТипомДата(Запрос.Текст, ИмяРеквизита), // Для даты поведение отличается
				ДобавитьВТекстЗапросаОтборПоПроизвольномуРеквизиту(Запрос.Текст, ИмяРеквизита));
			
			Запрос.УстановитьПараметр(ИмяРеквизита, ТекущийЭлемент.Значение);
			
		КонецЦикла;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Возврат Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Для того, чтобы передать дополнительные данные в печатную форму, надо:
//
// 1. в функции подготовки данных (в переопределяемом модуле) создать структуру, где ключ - имя передаваемого
//  дополнительного параметра, а значение - соответственно, значение доп.параметра и передать в интерфейсную функцию
//  "ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных" (описание параметров в комментарии к ней).
//
// 2. в функции подготовки данных к печати "ПолучитьДанные...ДляПечати", прописать чтение передаваемых
//  доп.данных по имени (с которым доп параметр помещался в структуру на шаге 1) и присвоение требуемому реквизиту макета.
//
Функция ДеревоДопДанных() Экспорт
	
	ДеревоДанных = Новый ДеревоЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Структура"));
	МассивТипов.Добавить(Тип("Массив"));
	МассивТипов.Добавить(Тип("Строка"));
	ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);
	
	ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);
	ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоДанных;
	
КонецФункции

// Процедура добавляет новую строку в таблицы данных структуры параметров
//
Процедура ДобавитьСтрокуТаблицуДанных(ТаблицаДанных, ДанныеСтроки, СтруктураПараметров, ИмяЭлементаВладельцаДопДанных) Экспорт
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
	
	НоваяСтрока.МассаНетто = ДанныеСтроки.Количество;
	
	// Сформируем доп. параметры
	СтруктураДопДанных = ПолучитьСтруктуруДопДанныхНоменклатуры(
		ДанныеСтроки.Номенклатура, 
		ДанныеСтроки.Характеристика, 
		ДанныеСтроки.НаименованиеНоменклатуры);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.НомерЗаказаПокупателя)
		И ЗначениеЗаполнено(ДанныеСтроки.ДатаЗаказаПокупателя) Тогда
		
		СтруктураДопДанных.Вставить("НомерПоДаннымПоставщика", ДанныеСтроки.НомерЗаказаПокупателя);
		СтруктураДопДанных.Вставить("ДатаПоДаннымПоставщика", ДанныеСтроки.ДатаЗаказаПокупателя);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.НомерЗаказаПоДаннымПокупателя)
		И ЗначениеЗаполнено(ДанныеСтроки.ДатаЗаказаПоДаннымПокупателя) Тогда
		
		СтруктураДопДанных.Вставить("НомерЗаказаПоДаннымПокупателя", ДанныеСтроки.НомерЗаказаПоДаннымПокупателя);
		СтруктураДопДанных.Вставить("ДатаЗаказаПоДаннымПокупателя", ДанныеСтроки.ДатаЗаказаПоДаннымПокупателя);
		
	КонецЕсли;
	
	// Из-за особенностей в схеме ФНС некоторые ставки НДС необходимо передавать в доп. параметрах.
	Если ТаблицаДанных.Колонки.Найти("СтавкаНДС") <> Неопределено Тогда
		// В ТОРГ12 не предусмотрена передача "дробных" ставок НДС
		
		СоответствиеСтавокНДС = Новый Соответствие;
		СоответствиеСтавокНДС.Вставить(ЗначениеПеречисленияСтавкаНДС("18% / 118%#"), 
			ЗначениеПеречисленияСтавкаНДС("18%#"));
		СоответствиеСтавокНДС.Вставить(ЗначениеПеречисленияСтавкаНДС("10% / 110%#"), 
			ЗначениеПеречисленияСтавкаНДС("10%#"));
		
		Если СоответствиеСтавокНДС[НоваяСтрока.СтавкаНДС] <> Неопределено Тогда
			
			// "Дробную" ставку НДС передадим в структуре доп. параметров
			СтруктураДопДанных.Вставить("СтавкаНДС", НоваяСтрока.СтавкаНДС);
			
			// В схему передадим соответствующую ставку НДС "числом"
			НоваяСтрока.СтавкаНДС = СоответствиеСтавокНДС[НоваяСтрока.СтавкаНДС];
			
		КонецЕсли;
		
	Иначе
		
		// В Акте не предусмотрена передача ставки НДС
		СтруктураДопДанных.Вставить("СтавкаНДС", ДанныеСтроки.СтавкаНДС);
		
	КонецЕсли;
	
	ОбменСКонтрагентами.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, ИмяЭлементаВладельцаДопДанных, Истина, НоваяСтрока.НомерСтроки);
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы(ТаблицаТоваров) Экспорт
	
	Структура = Новый Структура;
	
	Структура.Вставить("КоличествоМест", ТаблицаТоваров.Итог("КоличествоМест"));
	Структура.Вставить("МассаБрутто",    ТаблицаТоваров.Итог("МассаБрутто"));
	Структура.Вставить("МассаНетто",     ТаблицаТоваров.Итог("МассаНетто"));
	Структура.Вставить("СуммаБезНДС",    ТаблицаТоваров.Итог("СуммаБезНДС"));
	Структура.Вставить("СуммаНДС",       ТаблицаТоваров.Итог("СуммаНДС"));
	Структура.Вставить("СуммаСНДС",      ТаблицаТоваров.Итог("СуммаБезНДС") + ТаблицаТоваров.Итог("СуммаНДС"));
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", ТаблицаТоваров.Количество());
	
	Возврат Структура;
	
КонецФункции

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СписокТиповАдресов - СписокЗначений - Представление элемента - описание типа (Структурированный,
//    Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
//    элемента списка брать данные при заполнении ЭД.
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//
Процедура ЗаполнитьАдресВСпискеТиповАдресов(СписокТиповАдресов, АдресУчастника, ТипАдреса = "Структурированный") Экспорт
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	СписокТиповАдресов.ЗаполнитьПометки(Ложь);
	ВыбранныйТипАдреса = Неопределено;
	Для Каждого Элемент Из СписокТиповАдресов Цикл
		Если Элемент.Представление = ТипАдреса Тогда
			ВыбранныйТипАдреса = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыбранныйТипАдреса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВыбранныйТипАдреса.Значение, АдресУчастника);
		ВыбранныйТипАдреса.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Получить соответствие полей структуры доп. данных полям табличного поля документа СчетФактураПолученный
//
Функция ПолучитьСоответствиеПолейДляСчетаФактуры() Экспорт
	
	СоответствиеПолеЭД_и_ТЧ = Новый Соответствие;
	
	СоответствиеПолеЭД_и_ТЧ.Вставить("ИД", "Номенклатура");
	СоответствиеПолеЭД_и_ТЧ.Вставить("ИД", "Характеристика");
	СоответствиеПолеЭД_и_ТЧ.Вставить("Наименование", "Содержание");
	СоответствиеПолеЭД_и_ТЧ.Вставить("КолТов", "Количество");
	СоответствиеПолеЭД_и_ТЧ.Вставить("ОКЕИ_Тов", "ЕдиницаИзмерения");	// Если по коду не нашли, берем из карточки
	СоответствиеПолеЭД_и_ТЧ.Вставить("ЦенаТов", "Цена"); 
	СоответствиеПолеЭД_и_ТЧ.Вставить("СтТовБезНДС", "Сумма"); 
	СоответствиеПолеЭД_и_ТЧ.Вставить("НалСтВел", "СтавкаНДС");			// Строкой значение ставки НДС
	СоответствиеПолеЭД_и_ТЧ.Вставить("СумНДС", "СуммаНДС"); 
	СоответствиеПолеЭД_и_ТЧ.Вставить("СтТовУчНал", "Всего");
	СоответствиеПолеЭД_и_ТЧ.Вставить("КодПроисх", "КодПроисх");
	СоответствиеПолеЭД_и_ТЧ.Вставить("НомерТД", "НомерТД");
	
	Возврат СоответствиеПолеЭД_и_ТЧ ;
	
КонецФункции // ПолучитьСоответствиеПолейДляСчетаФактуры()

// Функция формирует структуру с данными номенклатуры для передачи ее в доп. данных
//
Функция ПолучитьСтруктуруДопДанныхНоменклатуры(Номенклатура, Характеристика, НаименованиеНоменклатуры = "") Экспорт
	
	СтруктураДополнительныхДанных = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(Номенклатура) 
		ИЛИ ПустаяСтрока(НаименованиеНоменклатуры) Тогда
		
		Возврат СтруктураДополнительныхДанных;
		
	КонецЕсли;
	
	ИДТовара 			= Номенклатура.УникальныйИдентификатор();
	ИДХарактеристики	= "";
	НаименованиеЗапаса	= НаименованиеНоменклатуры;
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		
		ИДХарактеристики	= Характеристика.УникальныйИдентификатор();
		НаименованиеЗапаса	= НаименованиеЗапаса + " (" + Характеристика + ")";
		
	КонецЕсли;
	
	СтруктураДополнительныхДанных.Вставить("ИД", 			 Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#");
	СтруктураДополнительныхДанных.Вставить("Наименование", 	 НаименованиеЗапаса);
	Если ЗначениеЗаполнено(Характеристика) Тогда
		СтруктураДополнительныхДанных.Вставить("Характеристика", Характеристика);
	КонецЕсли;
	
	Возврат СтруктураДополнительныхДанных;
	
КонецФункции // ПолучитьСтруктуруДопДанныхНоменклатуры()

// При копирировании документов ключевые поля ЭДО требуют отчистки
//
Процедура ОчиститьДатуНомерВходящегоДокумента(ДокументОбъект) Экспорт
	
	МассивИменРеквизитов	= ПолучитьМассивИменРеквизитовКОчистке();
	МетаданныеДокумента 	= ДокументОбъект.Метаданные();
	
	Для каждого ЭлементМассива Из МассивИменРеквизитов Цикл
		
		Если НЕ МетаданныеДокумента.Реквизиты.Найти(ЭлементМассива) = Неопределено Тогда
			
			ДокументОбъект[ЭлементМассива] = Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОчиститьДатуНомерВходящегоДокумента()

Функция ПолучитьМассивИменРеквизитовКОчистке() Экспорт
	
	МассивИмен = Новый Массив;
	
	МассивИмен.Добавить("НомерВходящегоДокумента");
	МассивИмен.Добавить("ДатаВходящегоДокумента");
	
	МассивИмен.Добавить("НомерИсходногоДокумента");
	МассивИмен.Добавить("ДатаИсходногоДокумента");
	
	Возврат МассивИмен;
	
КонецФункции

Функция ОпределитьТипДокументаОснованияДляЗаголовка(ВидОперации, ИсправляемыйДокументРеализации) Экспорт
	
	СоглашениеКСоглашению = Ложь;
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) И ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
			СоглашениеКСоглашению = Истина;	
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки Тогда
			СоглашениеКСоглашению = ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсправляемыйДокументРеализации, 
										"ИсправляемыйДокументРеализации")) = Тип("ДокументСсылка.КорректировкаРеализации");
		КонецЕсли;
	КонецЕсли;
	
	Если СоглашениеКСоглашению Тогда
		ЗаголовокДокументаОснования = НСтр("ru='к соглашению'");
	ИначеЕсли ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ЗаголовокДокументаОснования = НСтр("ru='к акту об оказании услуг'");
	Иначе
		ЗаголовокДокументаОснования = НСтр("ru='к накладной'");
	КонецЕсли;
	
	Возврат ЗаголовокДокументаОснования;
	
КонецФункции

Процедура ВставитьЗначениеВДерево(ДеревоДанных, ИмяРеквизита, ЗначениеРеквизита) Экспорт
	
	НовСтрока = ДеревоДанных.Строки.Найти(ИмяРеквизита, "ПолныйПуть", Истина);
	Если НовСтрока = Неопределено Тогда
		НовСтрока = ДеревоДанных.Строки.Добавить();
		НомерУровня = СтрЧислоВхождений(ИмяРеквизита, ".") + 1;
		НовСтрока.ПолныйПуть = ИмяРеквизита;
		НовСтрока["Уровень" + НомерУровня] = ЭлектронноеВзаимодействие.НазваниеКолонки(ИмяРеквизита);
	КонецЕсли;
	НовСтрока.Значение = ЗначениеРеквизита;

КонецПроцедуры

Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Загрузка электронных документов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Функция преобразует из числового представления ставки НДС в значение перечисления.
//
// Параметры:
//  СтавкаЧислом - Число - Ставка НДС числом.
//
// Возвращаемое значение:
//  СтавкаНДС - Значение перечисление
//  Если СтавкаЧислом = О, то СтавкаНДС = 0%;
//  Если СтавкаЧислом = Неопределено, то СтавкаНДС = БезНДС.
//
Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	Если ТипЗнч(СтавкаЧислом) = Тип("Строка") Тогда
		ПредставлениеСтавкиНДС = СтавкаЧислом;
	ИначеЕсли ТипЗнч(СтавкаЧислом) = Тип("Число") Тогда 
		ПредставлениеСтавкиНДС = Строка(СтавкаЧислом);
	Иначе // неправильный тип
		ПредставлениеСтавкиНДС = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтавкиНДС.Ссылка
	|ИЗ
	|	Справочник.СтавкиНДС КАК СтавкиНДС
	|ГДЕ
	|	СтавкиНДС.Наименование ПОДОБНО &НаименованиеЭлементаСправочника
	|	И СтавкиНДС.НеОблагается = &НеОблагается
	|	И СтавкиНДС.Расчетная = &Расчетная");
	
	// В случае если не сможем определить ставку НДС оставим поле пустым
	НаименованиеЭлементаСправочника = Неопределено;
	НеОблагается 					= Неопределено;
	Расчетная 						= Неопределено;
	
	Если ПредставлениеСтавкиНДС = Неопределено ИЛИ ВРЕГ(ПредставлениеСтавкиНДС) = ВРЕГ("без НДС") Тогда
		
		НаименованиеЭлементаСправочника = "Без НДС";
		НеОблагается 					= Истина;
		Расчетная 						= Ложь;
		
	ИначеЕсли ПредставлениеСтавкиНДС = "0" Тогда
		
		НаименованиеЭлементаСправочника = "0%";
		НеОблагается 					= Ложь;
		Расчетная 						= Ложь;
		
	ИначеЕсли СтрНайти("10#0.1#0,1#0.10#0,10", ПредставлениеСтавкиНДС) > 0 Тогда
		
		НаименованиеЭлементаСправочника = "10%";
		НеОблагается 					= Ложь;
		Расчетная 						= Ложь;
		
	ИначеЕсли СтрНайти("18#0.18#0,18#0.18#0,18", ПредставлениеСтавкиНДС) > 0 Тогда
		
		НаименованиеЭлементаСправочника = "18%";
		НеОблагается 					= Ложь;
		Расчетная 						= Ложь;

	ИначеЕсли СтрНайти("10/110#10% / 110%#10%/110%", ПредставлениеСтавкиНДС) > 0 Тогда
		
		НаименованиеЭлементаСправочника = "10% / 110%";
		НеОблагается 					= Ложь;
		Расчетная 						= Истина;
		
	ИначеЕсли СтрНайти("18/118#18% / 118%#18%/118%", ПредставлениеСтавкиНДС) > 0 Тогда
		
		НаименованиеЭлементаСправочника = "18% / 118%";
		НеОблагается 					= Ложь;
		Расчетная 						= Истина;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НаименованиеЭлементаСправочника", НаименованиеЭлементаСправочника);
	Запрос.УстановитьПараметр("НеОблагается", 					НеОблагается);
	Запрос.УстановитьПараметр("Расчетная", 						Расчетная);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
	
		Возврат Выборка.Ссылка;
	
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

Функция ПодготовитьТаблицуДанныхДоговора(Знач Наименование, Знач Номер, Знач Дата) Экспорт
	
	ДанныеДоговора = ПодготовитьДанныеДоговора(Наименование, Номер, Дата);
	
	ТаблицаДанныхДоговора = Новый ТаблицаЗначений;
	ТаблицаДанныхДоговора.Колонки.Добавить("ДокОснованиеНаименование");
	ТаблицаДанныхДоговора.Колонки.Добавить("ДокОснованиеНомер");
	ТаблицаДанныхДоговора.Колонки.Добавить("ДокОснованиеДата");
	
	Если НЕ ЗначениеЗаполнено(ДанныеДоговора.Наименование) 
		ИЛИ НЕ ЗначениеЗаполнено(ДанныеДоговора.Дата) Тогда
		Возврат ТаблицаДанныхДоговора; // возвращаем пустую таблицу
	КонецЕсли;
	
	НоваяСтрока = ТаблицаДанныхДоговора.Добавить();
	НоваяСтрока.ДокОснованиеНаименование = ДанныеДоговора.Наименование;
	НоваяСтрока.ДокОснованиеНомер        = ДанныеДоговора.Номер;
	НоваяСтрока.ДокОснованиеДата         = ДанныеДоговора.Дата;
	
	Возврат ТаблицаДанныхДоговора;
	
КонецФункции

Функция ПодготовитьДанныеДоговора(Наименование, Номер, Дата)
	
	ДанныеДоговора = Новый Структура("Наименование, Дата, Номер, ДатаСтр");
	
	ДатаСтр = Формат(Дата, "ДФ=dd.MM.yyyy");
	ДанныеДоговора.ДатаСтр = ДатаСтр;
	
	Номер = СокрЛП(Номер);
	
	Если ЗначениеЗаполнено(Дата) Тогда
		Если СтрНайти(Наименование, "от" + " " + ДатаСтр) > 0 Тогда
			Наименование = СтрЗаменить(Наименование, "от" + " " + ДатаСтр, "");
		Иначе
			Наименование = СтрЗаменить(Наименование, ДатаСтр, "");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номер) Тогда
		Если СтрНайти(Наименование, "№" + " " + Номер) > 0 Тогда
			Наименование = СтрЗаменить(Наименование, "№" + " " + Номер, "");
		ИначеЕсли СтрНайти(Наименование, "№" + Номер) > 0 Тогда
			Наименование = СтрЗаменить(Наименование, "№" + Номер, "");
		Иначе
			Наименование = СтрЗаменить(Наименование, Номер + " ", "");
		КонецЕсли;
	КонецЕсли;
	
	Пока СтрНайти(Наименование, "  ") > 0 Цикл
		Наименование = СтрЗаменить(Наименование, "  ", " ");
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Наименование) Тогда // наименование - обязательное поле
		Наименование = НСтр("ru = 'Договор'");
	КонецЕсли;
	ДанныеДоговора.Наименование = СокрЛП(Наименование);
	
	ДанныеДоговора.Номер = СокрЛП(СтрЗаменить(Номер, "№", "")); // БЭД добавляет знак №, поэтому удаляем из номера
	
	ДанныеДоговора.Дата = НачалоДня(Дата);
	
	Возврат ДанныеДоговора;
	
КонецФункции

Функция ФамилияИнициалыФизЛица(ФИОСтрокой = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(ФИОСтрокой);
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтрРазделить(ФИОСтрокой, " ", Ложь);
	Иначе
		// Используем возможно переданные отдельные строки.
		Возврат ?(Не ПустаяСтрока(Фамилия), 
		          Фамилия + ?(Не ПустаяСтрока(Имя), " " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество), Лев(Отчество,1) + ".", ""), ""),
		          "");
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	Фамилия            = ?(КоличествоПодстрок > 0, ФИО[0], "");
	Имя                = ?(КоличествоПодстрок > 1, ФИО[1], "");
	Отчество           = ?(КоличествоПодстрок > 2, ФИО[2], "");
	
	Если КоличествоПодстрок > 3 Тогда
		ДополнительныеЧастиОтчества = Новый Массив;
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'оглы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'улы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'уулу'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'кызы'"));
		ДополнительныеЧастиОтчества.Добавить(НСтр("ru = 'гызы'"));
		
		Если ДополнительныеЧастиОтчества.Найти(НРег(ФИО[3])) <> Неопределено Тогда
			Отчество = Отчество + " " + ФИО[3];
		КонецЕсли;
	КонецЕсли;
	
	Возврат ?(Не ПустаяСтрока(Фамилия), 
	          Фамилия + ?(Не ПустаяСтрока(Имя), " " + Лев(Имя, 1) + "." + ?(Не ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", ""), ""),
	          "");
	
КонецФункции

Функция ОрганизацияПоУмолчанию() Экспорт
	
	ОсновнаяОрганизация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ОсновнаяОрганизация");
		
	Если НЕ ЗначениеЗаполнено(ОсновнаяОрганизация) 
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		
		ОсновнаяОрганизация = Справочники.Организации.ОсновнаяОрганизация;
	КонецЕсли;
	
	Возврат ОсновнаяОрганизация;
	
КонецФункции

Функция НаименованиеРеквизитаСопоставленияНоменклатурыБЭД(ТипОбъекта) Экспорт
	
	Если ТипОбъекта = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат "НаименованиеПолное";
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		Возврат "НаименованиеДляПечати";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция НомерОбъектаБезПрефикса(Знач НомерОбъекта) Экспорт
	
	НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(СокрЛП(НомерОбъекта), Истина, Истина);
	НомерОбъекта = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерОбъекта);
	
	Возврат НомерОбъекта;
	
КонецФункции

#Область КлючевыеРеквизиты

Функция ИзмененыРеквизитыОбъекта(Знач Объект, Знач Реквизиты)
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	ТаблицаРеквизитов = ТаблицаРеквизитовОбъектов();
	
	ТекущийПорядок = -50;
	Для Каждого Реквизит Из Реквизиты Цикл
		
		СтрокаРеквизитов = ТаблицаРеквизитов.Добавить();
		СтрокаРеквизитов.Порядок  = ТекущийПорядок;
		СтрокаРеквизитов.ИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
		СтрокаРеквизитов.ИмяТабличнойЧасти = ?(Реквизит.Ключ = "Шапка", "", Реквизит.Ключ);
		СтрокаРеквизитов.РеквизитыОбъекта = Реквизит.Значение;
		СтрокаРеквизитов.СтруктураРеквизитовОбъекта = Новый Структура(Реквизит.Значение);
		ТекущийПорядок = ТекущийПорядок + 100;
		
	КонецЦикла;
	
	ТаблицаРеквизитов.Сортировать("Порядок Возр");
	
	Для Каждого СтрокаРеквизитов Из ТаблицаРеквизитов Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаРеквизитов);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ТаблицаРеквизитовОбъектов()
	
	ТаблицаРеквизитов = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаРеквизитов.Колонки;
	Колонки.Добавить("Порядок",                    Новый ОписаниеТипов("Число"));
	Колонки.Добавить("ИмяОбъекта",                 Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("ИмяТабличнойЧасти",          Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("РеквизитыОбъекта",           Новый ОписаниеТипов("Строка"));
	Колонки.Добавить("СтруктураРеквизитовОбъекта", Новый ОписаниеТипов("Структура"));
	
	ТаблицаРеквизитов.Индексы.Добавить("ИмяОбъекта");
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииШапкиДоИзменения(Объект,
			СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииШапкиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	Иначе
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = РеквизитыРегистрацииТабличнойЧастиДоИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = РеквизитыРегистрацииТабличнойЧастиПослеИзменения(
			Объект, СтрокаТаблицыРеквизитовРегистрации);
	КонецЕсли;
	
	Возврат НЕ ТаблицыРеквизитовОбъектовОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения,
												   ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения,
												   СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
	
КонецФункции

// Проверяет переданные таблицы реквизитов на совпадения.
//
// Параметры:
//  Таблица1 - ТаблицаЗначений - первая таблица проверки, реквизиты, которые надо проверить на совпадение.
//  Таблица2 - ТаблицаЗначений - вторая таблица проверки.
//  РеквизитыОбъекта - Строка - реквизиты, перечисленные через запятую.
//  ДопПараметры - Структура - структура дополнительных параметров, по которым надо проводить сравнение.
//
Функция ТаблицыРеквизитовОбъектовОдинаковые(Таблица1, Таблица2, РеквизитыОбъекта, ДопПараметры = Неопределено)
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(РеквизитыОбъекта, "ИтераторТаблицыРеквизитовОбъекта");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура("ИтераторТаблицыРеквизитовОбъекта", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	ПризнакСовпадения = КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
	Если НЕ ПризнакСовпадения И ЗначениеЗаполнено(ДопПараметры) Тогда
		Если ДопПараметры.Свойство("ИмяТабличнойЧасти") Тогда
			ИмяТабличнойЧасти = ДопПараметры.ИмяТабличнойЧасти;
		КонецЕсли;
		Если ДопПараметры.Свойство("СтрокаДереваСравнения") Тогда
			СтрокаДереваСравнения = ДопПараметры.СтрокаДереваСравнения;
		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Шапка" Тогда
			
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = НСтр("ru ='Реквизиты шапки'");
			Для Каждого ТекСтрокаТаб1 Из Таблица1 Цикл
				Для Каждого ТекКолонка Из Таблица1.Колонки Цикл
					ИмяКолонки = ТекКолонка.Имя;
					Если ИмяКолонки = "ИтераторТаблицыРеквизитовОбъекта" Тогда
						Продолжить;
					КонецЕсли;
					НайденнаяСтрокаТаб2 = Таблица2.Найти( - ТекСтрокаТаб1.ИтераторТаблицыРеквизитовОбъекта,
						"ИтераторТаблицыРеквизитовОбъекта");
					Если НЕ ЗначениеЗаполнено(НайденнаяСтрокаТаб2) 
						ИЛИ	НайденнаяСтрокаТаб2[ИмяКолонки] = ТекСтрокаТаб1[ИмяКолонки] Тогда
						Продолжить;
					КонецЕсли;
					НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
					НовСтрокаДереваРеквизита.Реквизит  = ИмяКолонки;
					НовСтрокаДереваЗнч            = НовСтрокаДереваРеквизита.Строки.Добавить();
					НовСтрокаДереваЗнч.ЗначениеБД = ТекСтрокаТаб1[ИмяКолонки];
					НовСтрокаДереваЗнч.ЗначениеЭД = НайденнаяСтрокаТаб2[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		Иначе
			НовСтрокаДереваМесто = СтрокаДереваСравнения.Строки.Добавить();
			НовСтрокаДереваМесто.Место = СтрШаблон(НСтр("ru ='Табличная часть <%1>'"), ИмяТабличнойЧасти);
			НовСтрокаДереваРеквизита = НовСтрокаДереваМесто.Строки.Добавить();
			НовСтрокаДереваРеквизита.Реквизит = "<Изменена>";
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПризнакСовпадения;
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовОбъекта");
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовОбъекта");
	
КонецПроцедуры

Функция РеквизитыРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(,
		СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта);
		
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ "+ СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти
	+ " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|	ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция РеквизитыРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовОбъекта;
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	Для Каждого РеквизитРегистрации Из СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция РеквизитыРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыОбъекта + " ИЗ "
	+ СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|	ТекущийОбъект.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента.
Процедура ПередЗаписьюВладельцаЭлектронногоДокумента(Объект, ИзменилисьКлючевыеРеквизиты, Знач СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, Отказ) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("ИзменилисьКлючевыеРеквизиты")
		И Объект.ДополнительныеСвойства.ИзменилисьКлючевыеРеквизиты Тогда
		ИзменилисьКлючевыеРеквизиты = Истина;
		Возврат;
	КонецЕсли;
	
	Если ИзмененыКлючевыеРеквизитыОбъекта(Объект) Тогда
		ИзменилисьКлючевыеРеквизиты = Истина;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("ИзменилисьКлючевыеРеквизиты", ИзменилисьКлючевыеРеквизиты);
	
КонецПроцедуры

// Сравнивает значения ключевых реквизитов объекта с данными информационной базы.
//
// Параметры:
//  Объект - ДокументОбъект - владелец электронного документа.
//
// Возвращаемое значение:
//  Булево - Истина, если значения реквизитов различаются.
//
Функция ИзмененыКлючевыеРеквизитыОбъекта(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	ИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	СтруктураКлючевыхРеквизитов = Новый Структура;
	
	Если ИмяОбъекта = "Документ.РасходнаяНакладная" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Запасы", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПриходнаяНакладная" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Запасы", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Расходы", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказПоставщику" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Запасы", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказПокупателя" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Запасы", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактура" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, СуммаДокумента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураПолученный" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, СуммаДокумента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.КорректировкаРеализации" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Запасы", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.КорректировкаПоступления" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Запасы", СтрокаРеквизитовОбъекта);
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Расходы", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.АктВыполненныхРабот" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Номенклатура, Количество, Цена, Сумма, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("РаботыИУслуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПлатежноеПоручение" Тогда
		
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, БанковскийСчет, Контрагент, СчетКонтрагента, СуммаДокумента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	КонецЕсли;
	
	Возврат ИзмененыРеквизитыОбъекта(Объект, СтруктураКлючевыхРеквизитов);
	
КонецФункции

// См. ЭлектронноеВзаимодействиеПереопределяемый.ПередЗаписьюВладельцаЭлектронногоДокумента.
Процедура ПередЗаписьюВладельцаЭлектронногоДокументаБанка(Объект, ИзменилисьКлючевыеРеквизиты, Знач СостояниеЭлектронногоДокумента, ПодлежитОбменуЭД, Отказ) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	ИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	КлючевыеРеквизиты = Новый Структура;

	Если ИмяОбъекта = "Документ.ПлатежноеПоручение" Тогда
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, СчетКонтрагента,
			|ОчередностьПлатежа, НазначениеПлатежа, СуммаДокумента, ВидОперации, ВидПеречисленияВБюджет, СтатусСоставителя,
			|ПоказательТипа, КодБК, КодОКАТО, ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты,
			|ВидПлатежа, ИдентификаторПлатежа");
		КлючевыеРеквизиты.Вставить("Шапка", СтрокаРеквизитовОбъекта);
	КонецЕсли;
	
	ИзменилисьКлючевыеРеквизиты = ИзмененыРеквизитыОбъекта(Объект, КлючевыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
