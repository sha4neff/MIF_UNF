
#Область МеткиОтборов

Процедура ПрикрепитьМеткуОтбора(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, Метка, НаименованиеМетки, ИмяСписка = "", ИмяПараметраЗапроса="",
	ИмяТЧДанныеМеток = "ДанныеМеток", ИмяЭлементаПраваяПанель = "ПраваяПанель", РеквизитыОтбораПравойПанели = "") Экспорт
	
	СоздатьЭлементыМеток(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, Метка, НаименованиеМетки, ИмяСписка, ИмяПараметраЗапроса, ИмяТЧДанныеМеток);
	ОбновитьЭлементыМеток(Форма,, ИмяТЧДанныеМеток);
	
	УстановитьЗаголовокПравойПанелиМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели);
	//НастроитьПанельОтборовМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели);
	
КонецПроцедуры

Процедура ПрикрепитьМеткиОтбораИзМассива(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, МассивМеток) Экспорт
	
	Для Каждого значениеМетки Из МассивМеток Цикл
		СоздатьЭлементыМеток(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, значениеМетки, Строка(значениеМетки));
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьЭлементыМеток(Форма, ИмяПоляОтбора, ИмяГруппыРодителя, Метка, НаименованиеМетки, ИмяСписка = "", ИмяПараметраЗапроса="", ИмяТЧДанныеМеток = "ДанныеМеток") Экспорт
	
	Элементы = Форма.Элементы;
	ДанныеМеток = Форма[ИмяТЧДанныеМеток];
	
	Если ДанныеМеток.Количество() > 0 Тогда
		Если ИмяСписка <> "" И ДанныеМеток[0].Свойство("ИмяСписка") Тогда
			СтруктураПоискаЗначенияОтбора = Новый Структура("Метка, ИмяСписка, ИмяПоляОтбора", Метка, ИмяСписка, ИмяПоляОтбора);
		Иначе
			СтруктураПоискаЗначенияОтбора = Новый Структура("Метка, ИмяПоляОтбора", Метка, ИмяПоляОтбора);
		КонецЕсли;
		Если ДанныеМеток.НайтиСтроки(СтруктураПоискаЗначенияОтбора).Количество() > 0 Тогда
			// добавляется значение отбора, по которому уже есть отбор
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Метка)=Тип("Массив") Тогда
		СписокМеток = Новый СписокЗначений;
		СписокМеток.ЗагрузитьЗначения(Метка);
		Метка = СписокМеток;
	КонецЕсли; 
	
	СтрокаМеток = ДанныеМеток.Добавить();
	НавигационнаяСсылкаФС = ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток) + СтрокаМеток.ПолучитьИдентификатор();
	
	СтрокаМеток.Метка = Метка;
	СтрокаМеток.ИмяПоляОтбора		= ИмяПоляОтбора;
	СтрокаМеток.ИмяГруппыРодителя	= ИмяГруппыРодителя;
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() <> ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ПредставлениеМетки = ФорматированнаяСтрокаПредставленияМетки(Лев(НаименованиеМетки,16), НавигационнаяСсылкаФС);
	Иначе
		
		Если ТипЗнч(НаименованиеМетки) = Тип("ФорматированнаяСтрока") Тогда
			ПредставлениеМетки = ФорматированнаяСтрокаПредставленияМетки(НаименованиеМетки, НавигационнаяСсылкаФС);
		Иначе
			ПредставлениеМетки = ФорматированнаяСтрокаПредставленияМетки(Лев(НаименованиеМетки,21), НавигационнаяСсылкаФС);
		КонецЕсли;
	КонецЕсли;
	СтрокаМеток.ПредставлениеМетки = ПредставлениеМетки;
	Если СтрокаМеток.Свойство("ИмяСписка") Тогда
		СтрокаМеток.ИмяСписка = ИмяСписка;
	КонецЕсли;
	Если СтрокаМеток.Свойство("ИмяПараметраЗапроса") Тогда
		СтрокаМеток.ИмяПараметраЗапроса= ИмяПараметраЗапроса;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяСписка = "", ИспользованиеОтбора=Неопределено, ИмяТЧДанныеМеток = "ДанныеМеток") Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	Для каждого стр Из Форма[ИмяТЧДанныеМеток] Цикл
		Если стр.ИмяПоляОтбора = ИмяПоляОтбора И (ИмяСписка = "" ИЛИ (стр.Свойство("ИмяСписка") И ИмяСписка = стр.ИмяСписка)) Тогда
			Если ТипЗнч(стр.Метка) = Тип("СписокЗначений") Тогда
				Для каждого значениеСписка Из стр.Метка Цикл
				    СписокЗначений.Добавить(значениеСписка.Значение);
				КонецЦикла; 
			Иначе	
				СписокЗначений.Добавить(стр.Метка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользованиеОтбора = Неопределено Тогда
		ИспользованиеОтбора = (СписокЗначений.Количество() > 0);
	КонецЕсли;
	
	ИмяЭлемента = "Отбор" + СтрЗаменить(ИмяПоляОтбора, ".", "");
	ЭлементФормы = Форма.Элементы.Найти(ИмяЭлемента);
	Если ЭлементФормы<>Неопределено И 
		ТипЗнч(ЭлементФормы)=Тип("ПолеФормы") И 
		ЭлементФормы.Вид=ВидПоляФормы.ПолеВвода И 
		(ЭлементФормы.ВыборГруппИЭлементов=ГруппыИЭлементы.Группы ИЛИ 
		ЭлементФормы.ВыборГруппИЭлементов=ГруппыИЭлементы.ГруппыИЭлементы) Тогда
		ТекВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	Иначе
		ТекВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли; 
	
	УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(СписокОтбора, ИмяПоляОтбора, СписокЗначений, ИспользованиеОтбора, ТекВидСравнения);
	
	Если ИмяПоляОтбора = "НомерКартинкиОплаты" Или ИмяПоляОтбора = "СтатусОплаты" Тогда
		ПереместитьЭлементыОтбораВГруппуИЛИ(СписокОтбора, "ГруппаОплата");
	КонецЕсли;
	
	Если ИмяПоляОтбора = "НомерКартинкиОтгрузки" Или ИмяПоляОтбора = "СтатусОтгрузки" Тогда
		ПереместитьЭлементыОтбораВГруппуИЛИ(СписокОтбора, "ГруппаОтгрузка");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяПараметраЗапроса, ИмяТЧДанныеМеток = "ДанныеМеток") Экспорт
	
	МассивОтбора = Новый Массив;
	СтрокиЗначенийОтбора = Форма[ИмяТЧДанныеМеток].НайтиСтроки(Новый Структура("ИмяПоляОтбора", ИмяПоляОтбора));
	Для каждого строкаОтборов Из СтрокиЗначенийОтбора Цикл
		Если ТипЗнч(строкаОтборов.Метка)=Тип("СписокЗначений") Тогда
			Для каждого значениеСписка Из строкаОтборов.Метка Цикл
				МассивОтбора.Добавить(значениеСписка.Значение);
			КонецЦикла;
		Иначе	
			МассивОтбора.Добавить(строкаОтборов.Метка);
		КонецЕсли;
	КонецЦикла;
	
	СписокОтбора.Параметры.УстановитьЗначениеПараметра("БезОтбора", НЕ ЗначениеЗаполнено(МассивОтбора));
	СписокОтбора.Параметры.УстановитьЗначениеПараметра(ИмяПараметраЗапроса, МассивОтбора);
	
КонецПроцедуры

Функция ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток) Экспорт
	
	Если ИмяТЧДанныеМеток = "ДанныеМеток" Тогда
		НачалоИмениМетки = "Метка_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокПП" Тогда
		НачалоИмениМетки = "МеткаПП_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокККМ" Тогда
		НачалоИмениМетки = "МеткаККМ_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокОбмен" Тогда
		НачалоИмениМетки = "МеткаОбменыССайтом_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокОплатаКартами" Тогда
		НачалоИмениМетки = "МеткаОплатаКартами_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокПередачаНаКомиссию" Тогда
		НачалоИмениМетки = "МеткаПК_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокОтчетКомиссионера" Тогда
		НачалоИмениМетки = "МеткаОК_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокПереоценкаУКомиссионера" Тогда
		НачалоИмениМетки = "МеткаПР_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокСписаниеУКомиссионера" Тогда
		НачалоИмениМетки = "МеткаСК_";
	ИначеЕсли ИмяТЧДанныеМеток = "ДанныеМетокВозвратОтКомиссионера" Тогда
		НачалоИмениМетки = "МеткаВК_";
	Иначе
		НачалоИмениМетки = "";
	КонецЕсли;
	
	Возврат НачалоИмениМетки;
	
КонецФункции

Процедура ОбновитьЭлементыМеток(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов=Неопределено, ИмяТЧДанныеМеток = "ДанныеМеток") Экспорт
	
	Элементы = Форма.Элементы;
	ДанныеМеток = Форма[ИмяТЧДанныеМеток];
	
	Если СписокГруппФормыДляУдаленияДобавленныхЭлементов=Неопределено Тогда
		СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	КонецЕсли;
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для каждого группаФормы Из СписокГруппФормыДляУдаленияДобавленныхЭлементов Цикл
		Если Форма.Элементы.Найти(группаФормы) <> Неопределено Тогда
			ДобавитьМеткиДляУдаления(Форма.Элементы[группаФормы], УдаляемыеЭлементы);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	НомерМетки = 0;
	Для Каждого ДанныеМетки Из ДанныеМеток Цикл
		
		Если Форма.Элементы.Найти(ДанныеМетки.ИмяГруппыРодителя) <> Неопределено Тогда
			ГруппаРодитель = Форма.Элементы[ДанныеМетки.ИмяГруппыРодителя];
		
			ПолеМетки = Элементы.Добавить(ПолучитьНачалоИмениМетки(ИмяТЧДанныеМеток) + НомерМетки, Тип("ПолеФормы"), ГруппаРодитель);
			ПолеМетки.Вид = ВидПоляФормы.ПолеНадписи;
			ПолеМетки.ПутьКДанным = ИмяТЧДанныеМеток + "[" + НомерМетки + "].ПредставлениеМетки";
			ПолеМетки.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			
			ПолеМетки.РастягиватьПоГоризонтали = Истина;
			ПолеМетки.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_МеткаОбработкаНавигационнойСсылки");
			ПолеМетки.Подсказка = ДанныеМетки.Метка;
			// Обход ошибки платформы для тонкого клиента и интерфейсов, которые не "Такси".
			Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() <> ВариантИнтерфейсаКлиентскогоПриложения.Такси
				И НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
				Шрифт = Новый Шрифт(ПолеМетки.Шрифт,, 10);
				ПолеМетки.Шрифт = Шрифт;
			КонецЕсли;
			Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
				ПолеМетки.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
				ПолеМетки.Высота = 1;
			КонецЕсли;
			
			НомерМетки = НомерМетки + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// Мобильный клиент.
// Параметры
//	РеквизитыОтбораПравойПанели - строка разделенная запятыми.
Процедура УстановитьЗаголовокПравойПанелиМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель = "ПраваяПанель", ИмяТЧДанныеМеток = "ДанныеМеток", РеквизитыОтбораПравойПанели = "") Экспорт
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементФормыПраваяПанель = Форма.Элементы.Найти(ИмяЭлементаПраваяПанель);
	// На форме должна быть правая панель и ...
	Если ЭлементФормыПраваяПанель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьОтборУстановлен(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели) Тогда
		ЭлементФормыПраваяПанель.Заголовок = НСтр("ru = 'Отборы (установлены)'");
	Иначе
		ЭлементФормыПраваяПанель.Заголовок = НСтр("ru = 'Отборы'");
	КонецЕсли;
	
КонецПроцедуры // УстановитьОтборДинамическихСписков()

Функция ПроверитьОтборУстановлен(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели)
	
	ОтборУстановлен = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтборПериод") 
		И ЗначениеЗаполнено(Форма.ОтборПериод) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	// ... реквизит "ДанныеМеток".
	Попытка
		Если Форма[ИмяТЧДанныеМеток].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Если РеквизитыОтбораПравойПанели <> "" Тогда
		СтруктураРеквизитыОтбора = ОбщегоНазначенияПереопределяемый.СтрокаВСтруктуру(РеквизитыОтбораПравойПанели, ",");
		
		Для Каждого КлючЗначение Из СтруктураРеквизитыОтбора Цикл
			Если ЗначениеЗаполнено(Форма[КлючЗначение.Ключ]) Тогда
				Если ТипЗнч(Форма[КлючЗначение.Ключ]) = Тип("Булево") Тогда
					ОтборУстановлен = Форма[КлючЗначение.Ключ];
				Иначе
					Возврат Истина;
				КонецЕсли;
				
				Если ОтборУстановлен Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОтборУстановлен;
	
КонецФункции

// Мобильный клиент - процедура настраивает панель отборов в формах списка и выбора
// Параметры
//	Форма - настраеваемая форма списка или выбора
//	ИмяЭлементаПраваяПанель - строка с именем панели с отборами
//	ИмяТЧДанныеМеток - строка с именем табличной части с данными отборов
//	РеквизитыОтбораПравойПанели - строка с именами полей отбора, разделенными запятыми
//	НеотображаемыеЭлементы - строка с именами элементов формы панели отборов, видимость которых необходимо отключить
//
Процедура НастроитьПанельОтборовМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель = "ПраваяПанель", ИмяТЧДанныеМеток = "ДанныеМеток", РеквизитыОтбораПравойПанели = "", НеотображаемыеЭлементы = "СвернутьОтборы,ДекорацияРазвернутьОтборы", СкрыватьПанельОтборов = Ложь) Экспорт
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	// Видимость панели отборов - в мобильном клиенте панель всегда видима - она показывается на отдельном экране
	УстановитьЗаголовокПравойПанелиМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели);
	
	МассивНеотображаемыхЭлементов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НеотображаемыеЭлементы, ",");
	
	Для каждого ИмяЭлемента Из МассивНеотображаемыхЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Видимость", Ложь);
	КонецЦикла;
	
	// Это реализовано в 8.3.13, уберём, после того, как перенесут функциональность в 8.3.12
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлементаПраваяПанель, "ОтображатьЗаголовок", Истина);
	
	Если УправлениеНебольшойФирмойСервер.ЭтоМобильныйКлиент() И УправлениеНебольшойФирмойСервер.ЭтоБольшойЭкранИЛИПланшет() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлементаПраваяПанель, "Поведение", ПоведениеОбычнойГруппы.Свертываемая);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ПраваяПанельСтраницы", "РастягиватьПоГоризонтали", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлементаПраваяПанель, "РастягиватьПоГоризонтали", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ГруппаСписокИПанель", "Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
		Если СкрыватьПанельОтборов Тогда
			Форма.Элементы[ИмяЭлементаПраваяПанель].Скрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура СвернутьРазвернутьОтборыНаСервере(Форма, Видимость, СтруктураИменЭлементов = Неопределено, пШирина = 25) Экспорт
	
	Элементы = Форма.Элементы;
	
	ИнтерфейсТакси = (ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	Если СтруктураИменЭлементов = Неопределено Тогда
		Если Элементы.Найти("ДекорацияРазвернутьОтборы")=Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ФильтрыНастройкиИДопИнфо.Видимость	= Видимость;
		Элементы.ДекорацияРазвернутьОтборы.Видимость	= НЕ Видимость;
		Элементы.ПраваяПанель.Ширина = ?(Видимость, ?(ИнтерфейсТакси, пШирина, пШирина-1), 0);
	Иначе
		Элементы[СтруктураИменЭлементов.ФильтрыНастройкиИДопИнфо].Видимость	= Видимость;
		Элементы[СтруктураИменЭлементов.ДекорацияРазвернутьОтборы].Видимость = НЕ Видимость;
		Элементы[СтруктураИменЭлементов.ПраваяПанель].Ширина = ?(Видимость, ?(ИнтерфейсТакси, пШирина, пШирина-1), 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьМеткуОтбораСервер(Форма, СписокОтбора, МеткаИД, ИмяСписка = "", ИмяТЧДанныеМеток = "ДанныеМеток", УстановитьНовыйОтбор = Истина,
	ИмяЭлементаПраваяПанель = "ПраваяПанель", РеквизитыОтбораПравойПанели = "") Экспорт
	
	ДанныеМеток = Форма[ИмяТЧДанныеМеток];
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
	ИмяПараметраЗапроса = ?(СтрокаМеток.Свойство("ИмяПараметраЗапроса"), СтрокаМеток.ИмяПараметраЗапроса,"");
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	
	ДанныеМеток.Удалить(СтрокаМеток);
	
	ОбновитьЭлементыМеток(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов, ИмяТЧДанныеМеток);
	Если УстановитьНовыйОтбор Тогда
		Если ИмяПараметраЗапроса="" Тогда
			УстановитьОтборСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяСписка);
		Иначе
			УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяПараметраЗапроса);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьЗаголовокПравойПанелиМобильныйКлиент(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток, РеквизитыОтбораПравойПанели);
	
КонецПроцедуры

Процедура УдалитьМеткиОтбораСервер(Форма, СписокОтбора, Метки, ИмяСписка = "", ИмяТЧДанныеМеток = "ДанныеМеток") Экспорт
	
	Элементы = Форма.Элементы;
	ДанныеМеток = Форма[ИмяТЧДанныеМеток];
	
	Метки.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ПолучитьСписокИмяГруппыРодителя(ДанныеМеток);
	
	Для каждого МеткаИД Из Метки Цикл
		
		СтрокаМеток = ДанныеМеток[Число(МеткаИД.Значение)];
		ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
		ИмяПараметраЗапроса = ?(СтрокаМеток.Свойство("ИмяПараметраЗапроса"), СтрокаМеток.ИмяПараметраЗапроса,"");
		
		ДанныеМеток.Удалить(СтрокаМеток);
		
		Если ИмяПараметраЗапроса="" Тогда
			УстановитьОтборСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяСписка);
		Иначе
			УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, ИмяПоляОтбора, ИмяПараметраЗапроса);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьЭлементыМеток(Форма, СписокГруппФормыДляУдаленияДобавленныхЭлементов, ИмяТЧДанныеМеток);
	
КонецПроцедуры

Функция ПолучитьСписокИмяГруппыРодителя(ДанныеМеток) Экспорт
	
	СписокГруппФормыДляУдаленияДобавленныхЭлементов = ДанныеМеток.Выгрузить();
	СписокГруппФормыДляУдаленияДобавленныхЭлементов.Свернуть("ИмяГруппыРодителя","");
	
	Возврат СписокГруппФормыДляУдаленияДобавленныхЭлементов.ВыгрузитьКолонку("ИмяГруппыРодителя");
	
КонецФункции

Процедура СохранитьНастройкиОтборов(Знач Форма, ИмяСписка = "", СтруктураИменЭлементов = Неопределено, ВариантОтборовФормы="", УстановитьОтборПоПериоду = Истина, ИмяТЧДанныеМеток = "ДанныеМеток") Экспорт
	
	ИмяКлючаОбъекта = СтрЗаменить(Форма.ИмяФормы,".","")+ВариантОтборовФормы;
	
	Если ИмяСписка = "" Тогда
		ДанныеМеток = Форма[ИмяТЧДанныеМеток].Выгрузить();
	Иначе
		ДанныеМеток = Форма[ИмяТЧДанныеМеток].Выгрузить();
	КонецЕсли;
	
	Если СтруктураИменЭлементов = Неопределено Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеМеток", ДанныеМеток);
		Если УстановитьОтборПоПериоду Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду", Форма.ОтборПериод);
		КонецЕсли;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Форма.Элементы.ФильтрыНастройкиИДопИнфо.Видимость);
	Иначе
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеМеток", ДанныеМеток);
		Если УстановитьОтборПоПериоду Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду", Форма[СтруктураИменЭлементов.ОтборПериод]);
		КонецЕсли; 
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Форма.Элементы[СтруктураИменЭлементов.ФильтрыНастройкиИДопИнфо].Видимость);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьНастройкиОтборов(Форма, СписокОтбора, ИмяСписка = "", 
	СтруктураИменЭлементов = Неопределено, СтруктураИменПолейОтборов = Неопределено,
	ВариантОтборовФормы="", УстановитьОтборПоПериоду = Истина, ИмяТЧДанныеМеток = "ДанныеМеток", СписокПолейИсключений = Неопределено) Экспорт
	
	ИмяКлючаОбъекта = СтрЗаменить(Форма.ИмяФормы,".","")+ВариантОтборовФормы;
	// Отбор по полям правой панели
	СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ДанныеМеток");
	ЕстьОтборТекущегоСписка = Ложь;
	
	Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
		
		// Удалим поля из cписка исключений восстановления отборов
		Если ТипЗнч(СписокПолейИсключений) = Тип("СписокЗначений")
			И ТипЗнч(СохраненноеЗначение) = Тип("ТаблицаЗначений")
			И НЕ СохраненноеЗначение.Колонки.Найти("ИмяПоляОтбора") = Неопределено Тогда
			
			ПараметрыОтбора = Новый Структура("ИмяПоляОтбора",);
			
			Для Каждого ПолеДляИсключения Из СписокПолейИсключений Цикл
				
				ПараметрыОтбора.ИмяПоляОтбора = ПолеДляИсключения.Значение;
				НайденныеСтрокиОтбора = СохраненноеЗначение.НайтиСтроки(ПараметрыОтбора);
				
				Для Каждого СтрокаОтбора Из НайденныеСтрокиОтбора Цикл
					СохраненноеЗначение.Удалить(СтрокаОтбора);
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
		
		// Проверить сохраненные отборы, удалить строки, которых нет ДоступныхПоляхКомпоновкиДанных
		Если СохраненноеЗначение.Колонки.Найти("ИмяПараметраЗапроса")=Неопределено Тогда
			МассивДоступныхПолейКомпоновкиДанных = Новый Массив;
			Для каждого ПолеОтбора Из СписокОтбора.Отбор.ДоступныеПоляОтбора.Элементы Цикл
				МассивДоступныхПолейКомпоновкиДанных.Добавить(Строка(ПолеОтбора.Поле));
			КонецЦикла;
			МассивУдалитьОтборы = Новый Массив;
			Для каждого СохраненноеПолеОтбора Из СохраненноеЗначение Цикл
				Если СтрНайти(СохраненноеПолеОтбора.ИмяПоляОтбора,".")<>0 Тогда
					// Для полей табличной части, которые представлены через точку
					МассивПолей = СтрРазделить(СохраненноеПолеОтбора.ИмяПоляОтбора, ".");
					Если МассивПолей.Количество()>0 Тогда
						СохраненноеПолеОтбораИмя = МассивПолей[0];
					КонецЕсли;
				Иначе
					СохраненноеПолеОтбораИмя = СохраненноеПолеОтбора.ИмяПоляОтбора;
				КонецЕсли;
				Если МассивДоступныхПолейКомпоновкиДанных.Найти(СохраненноеПолеОтбораИмя)=Неопределено Тогда
					МассивУдалитьОтборы.Добавить(СохраненноеПолеОтбора);
				КонецЕсли;
			КонецЦикла;
			Для каждого строкаУдалить Из МассивУдалитьОтборы Цикл
				СохраненноеЗначение.Удалить(строкаУдалить);
			КонецЦикла;
		КонецЕсли; 
		
		Форма[ИмяТЧДанныеМеток].Загрузить(СохраненноеЗначение);
		
		// Установить отборы списка по данным в таблице ДанныеМеток
		ЕстьИмяСписка = Ложь; // для форм с несколькими динамическими списками
		ЕстьИмяПараметраЗапроса = Ложь; // для форм, где отбор устанавливается через параметр запроса динамического списка
		
		СтрокаПолейТаблицыДляСвертки = "ИмяПоляОтбора";
		Если СохраненноеЗначение.Колонки.Найти("ИмяСписка")<>Неопределено Тогда
			СтрокаПолейТаблицыДляСвертки = СтрокаПолейТаблицыДляСвертки + ",ИмяСписка";
			ЕстьИмяСписка = Истина;
		КонецЕсли;
		Если СохраненноеЗначение.Колонки.Найти("ИмяПараметраЗапроса")<>Неопределено  Тогда
			СтрокаПолейТаблицыДляСвертки = СтрокаПолейТаблицыДляСвертки + ",ИмяПараметраЗапроса";
			ЕстьИмяПараметраЗапроса = Истина;
		КонецЕсли;
		ТаблицаИменПолейОтборов = СохраненноеЗначение.Скопировать(,СтрокаПолейТаблицыДляСвертки);
		ТаблицаИменПолейОтборов.Свернуть(СтрокаПолейТаблицыДляСвертки, "");
		Для каждого строкаПолейОтборов Из ТаблицаИменПолейОтборов Цикл //цикл по именам полей отбора
			
			// Если нет колонки "ИмяСписка", отбор через компоновку
			// Если есть имя списка, нужно проверить, что поле отбора принадлежит этому списку
			ПолеОтбораПринадлежитСписку = НЕ ЕстьИмяСписка ИЛИ (ЕстьИмяСписка И строкаПолейОтборов.ИмяСписка = ИмяСписка);
			
			Если (ЕстьИмяПараметраЗапроса И строкаПолейОтборов.ИмяПараметраЗапроса<>""
				И ПолеОтбораПринадлежитСписку) Тогда
				// отбор через установку параметров запроса списка
				УстановитьПараметрЗапросаСписка(Форма, СписокОтбора, строкаПолейОтборов.ИмяПоляОтбора, строкаПолейОтборов.ИмяПараметраЗапроса, ИмяТЧДанныеМеток);
				ЕстьОтборТекущегоСписка = Истина;
			ИначеЕсли ПолеОтбораПринадлежитСписку Тогда
				// отбор через компоновку
				УстановитьОтборСписка(Форма, СписокОтбора, строкаПолейОтборов.ИмяПоляОтбора,, Истина, ИмяТЧДанныеМеток);
				ЕстьОтборТекущегоСписка = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьЭлементыМеток(Форма,, ИмяТЧДанныеМеток);
		
	КонецЕсли;
	
	// Отбор по периоду
	Если УстановитьОтборПоПериоду Тогда
		Если СтруктураИменЭлементов = Неопределено Тогда
			Форма.ОтборПериод = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду");
			Форма.ПредставлениеПериода = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Форма.ОтборПериод);
			Если СтруктураИменПолейОтборов<> Неопределено И СтруктураИменПолейОтборов.Свойство("ОтборПериод") Тогда
				ИмяПоляОтборПериод = СтруктураИменПолейОтборов.ОтборПериод;
			Иначе
				ИмяПоляОтборПериод = "Дата";
			КонецЕсли;
			
			РаботаСОтборамиКлиентСервер.УстановитьОтборПоПериоду(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор, Форма.ОтборПериод.ДатаНачала, Форма.ОтборПериод.ДатаОкончания, ИмяПоляОтборПериод);
		Иначе
			Форма[СтруктураИменЭлементов.ОтборПериод] = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ОтборПоПериоду");
			Форма[СтруктураИменЭлементов.ПредставлениеПериода] = РаботаСОтборамиКлиентСервер.ОбновитьПредставлениеПериода(Форма[СтруктураИменЭлементов.ОтборПериод]);
			РаботаСОтборамиКлиентСервер.УстановитьОтборПоПериоду(СписокОтбора.КомпоновщикНастроек.Настройки.Отбор, 
				Форма[СтруктураИменЭлементов.ОтборПериод].ДатаНачала, 
				Форма[СтруктураИменЭлементов.ОтборПериод].ДатаОкончания,
				?(СтруктураИменЭлементов.Свойство("ИмяПоляОтбора"), СтруктураИменЭлементов.ИмяПоляОтбора, "Дата"));
		КонецЕсли;
	КонецЕсли;
	
	// Мобильный клиент
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НастроитьПанельОтборовМобильныйКлиент(Форма,,,,,Истина);
	Иначе
		// Видимость панели отборов - получаем из настройки
		Если СтруктураИменЭлементов = Неопределено Тогда
			Если Не ЕстьОтборТекущегоСписка И (НЕ УстановитьОтборПоПериоду ИЛИ НЕ ЗначениеЗаполнено(Форма.ОтборПериод)) Тогда
				СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Истина);
				Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
					СвернутьРазвернутьОтборыНаСервере(Форма, СохраненноеЗначение, СтруктураИменЭлементов);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если Не ЕстьОтборТекущегоСписка И (НЕ УстановитьОтборПоПериоду ИЛИ НЕ ЗначениеЗаполнено(Форма[СтруктураИменЭлементов.ОтборПериод])) Тогда
				СохраненноеЗначение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяКлючаОбъекта, ИмяКлючаОбъекта+ИмяСписка+"_ВидимостьПанелиОтборов", Истина);
				Если ЗначениеЗаполнено(СохраненноеЗначение) Тогда
					СвернутьРазвернутьОтборыНаСервере(Форма, СохраненноеЗначение, СтруктураИменЭлементов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьМеткиДляУдаления(ЭлементГруппа, УдаляемыеЭлементы)
	
	Для Каждого СтрокаМеток Из ЭлементГруппа.ПодчиненныеЭлементы Цикл
		Если СтрокаМеток.Вид=ВидПоляФормы.ПолеВвода Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(СтрокаМеток);
	КонецЦикла;
	
КонецПроцедуры

Функция ФорматированнаяСтрокаПредставленияМетки(НаименованиеМетки, НавигационнаяСсылкаФС)
	
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	Шрифт = ШрифтыСтиля.ШрифтПравойПанелиОтборов;
	
	КомпонентыФС = Новый Массив;
	Если ТипЗнч(НаименованиеМетки) = Тип("ФорматированнаяСтрока") Тогда
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеМетки, Шрифт, Цвет));
	Иначе
		КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеМетки + " ", Шрифт, Цвет));
	КонецЕсли;
	
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.ОчиститьЗначение12х12, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

Процедура ПереместитьЭлементыОтбораВГруппуИЛИ(СписокОтбора, ВидОперацииОтбора)
	
	НаборЭлементов = СписокОтбора.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	ГруппаОтбораСуществует = Ложь;
	ТребуетсяСозданиеГруппы = Ложь;
	
	Для Каждого ЭлементОтбора Из НаборЭлементов Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") 
			И ЭлементОтбора.Представление = ВидОперацииОтбора Тогда
			ГруппаОтбораСуществует = Истина;
			ГруппаОтбора = ЭлементОтбора;
			Прервать;			
		КонецЕсли;
		
	КонецЦикла;

	Если Не ГруппаОтбораСуществует Тогда
		ГруппаОтбора = СписокОтбора.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
		ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ГруппаОтбора.Представление = ВидОперацииОтбора;
		ГруппаОтбора.Использование = Истина;
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	
	Если ВидОперацииОтбора = "ГруппаОплата" Тогда
		Для Каждого ЭлементОтбора Из НаборЭлементов Цикл
			
			Если Не ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
				И (Строка(ЭлементОтбора.ЛевоеЗначение) = "НомерКартинкиОплаты" 
				Или Строка(ЭлементОтбора.ЛевоеЗначение) = "СтатусОплаты") Тогда
				СтрокиКУдалению.Добавить(ЭлементОтбора);
				
				УдалитьДублирующийЭлементОсновногоОтбораИзГруппыОтбора(ГруппаОтбора, ЭлементОтбора);
				
				НовыйЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,ЭлементОтбора);
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	Если ВидОперацииОтбора = "ГруппаОтгрузка" Тогда
		Для Каждого ЭлементОтбора Из НаборЭлементов Цикл
			Если Не ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
				И (Строка(ЭлементОтбора.ЛевоеЗначение) = "НомерКартинкиОтгрузки" 
				Или Строка(ЭлементОтбора.ЛевоеЗначение) = "СтатусОтгрузки") Тогда
				
				СтрокиКУдалению.Добавить(ЭлементОтбора);
				
				УдалитьДублирующийЭлементОсновногоОтбораИзГруппыОтбора(ГруппаОтбора, ЭлементОтбора);
				
				НовыйЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,ЭлементОтбора);
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементКУдалению Из СтрокиКУдалению Цикл
		НаборЭлементов.Удалить(ЭлементКУдалению);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьДублирующийЭлементОсновногоОтбораИзГруппыОтбора(ГруппаОтбора, ЭлементОтбора)
	Для Каждого ЭлементГруппы Из ГруппаОтбора.Элементы Цикл
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = (ЭлементГруппы.ЛевоеЗначение) 
			Тогда
			ГруппаОтбора.Элементы.Удалить(ЭлементГруппы);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область НастройкиОтборовОбъектов

// Заполняет списка выбора поле отбора "Статус оплаты"
//
// Параметры:
//   Форма - Форма списка с полем отбора
//   ИмяПоляОтбора - Имя поля для которого необходимо сформировать список отбора
Процедура ЗаполнитьСписокВыбораОтборОплата(Форма, ИмяПоляОтбора, СОтступом = Истина, МассивИсключений = Неопределено) Экспорт 
	
	КомпонентыФС = Новый Массив;
	
	Если МассивИсключений = Неопределено Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	Отступ = ?(СОтступом, "   ", "");
	
	Если МассивИсключений.Найти(11) = Неопределено Тогда
		
		// Группа
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаБезОплаты);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без оплаты'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Без оплаты", СтрокаПредставления);
		
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если МассивИсключений.Найти(2) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыНеПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без оплаты (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОплатыНеПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(4) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыОжидаетсяСегодня);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без оплаты (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОплатыСегодня", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(6) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без оплаты (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОплатыПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(12) = Неопределено Тогда
		
		// Группа
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаОплаченЧастично);
		КомпонентыФС.Добавить(НСтр("ru='Оплачен частично'"));
		КомпонентыФС.Добавить(" ");
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Оплачен частично", СтрокаПредставления);
		
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если МассивИсключений.Найти(1) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноНеПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Оплачен частично (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОплаченЧастичноНеПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(3) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноОжидаетсяСегодня);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Оплачен частично (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОплаченЧастичноСегодня", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(5) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Оплачен частично (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОплаченЧастичноПросрочено", СтрокаПредставления);
		
	КонецЕсли;

	// Прочие отборы первого уровня
	
	Если МассивИсключений.Найти(0) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченПолностью);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Оплачен полностью'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Оплачен полностью", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(7) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(БиблиотекаКартинок.СПереплатой);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='С переплатой'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("СПереплатой", СтрокаПредставления);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет списка выбора поле отбора "Статус отгрузки"
//
// Параметры:
//   Форма - Форма списка с полем отбора
//   ИмяПоляОтбора - Имя поля для которого необходимо сформировать список отбора
Процедура ЗаполнитьСписокВыбораОтборОтгрузка(Форма, ИмяПоляОтбора, СОтступом = Истина, МассивИсключений = Неопределено) Экспорт 
	
	КомпонентыФС = Новый Массив;
	
	Если МассивИсключений = Неопределено Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	Отступ = ?(СОтступом, "   ", "");
	
	Если МассивИсключений.Найти(11) = Неопределено Тогда
		
		// Группа
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаБезОплаты);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без отгрузки'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Без отгрузки", СтрокаПредставления);
		
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если МассивИсключений.Найти(2) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыНеПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без отгрузки (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОтгрузкиНеПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(4) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыОжидаетсяСегодня);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без отгрузки (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОтгрузкиСегодня", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(6) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Без отгрузки (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("БезОтгрузкиПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(12) = Неопределено Тогда
		
		// Группа
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаОплаченЧастично);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Отгружен частично'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Отгружен частично", СтрокаПредставления);
		
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если МассивИсключений.Найти(1) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноНеПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Отгружен частично (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОтгруженЧастичноНеПросрочено", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(3) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноОжидаетсяСегодня);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Отгружен частично (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОтгруженЧастичноСегодня", СтрокаПредставления);
		
	КонецЕсли;
	
	Если МассивИсключений.Найти(5) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(Отступ);
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноПросрочено);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Отгружен частично (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("ОтгруженЧастичноПросрочено", СтрокаПредставления);
		
	КонецЕсли;

	// Прочие отборы первого уровня
	
	Если МассивИсключений.Найти(0) = Неопределено Тогда
		
		КомпонентыФС.Очистить();
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченПолностью);
		КомпонентыФС.Добавить(" ");
		КомпонентыФС.Добавить(НСтр("ru='Отгружен полностью'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Форма.Элементы[ИмяПоляОтбора].СписокВыбора.Добавить("Отгружен полностью", СтрокаПредставления);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает форматированную строку представления метки статуса оплаты
//
// Параметры:
//   ЗначениеМетки - Значение метки отбора
Функция СформироватьПредставлениеМеткиОплата(ЗначениеМетки) Экспорт
	
	КомпонентыФС = Новый Массив;
	
	Если ЗначениеМетки = "Без оплаты" Тогда
		// Группа
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаБезОплаты);
		КомпонентыФС.Добавить(НСтр("ru=' Без оплаты'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если ЗначениеМетки = "БезОплатыНеПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыНеПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Без оплаты (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОплатыСегодня" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыОжидаетсяСегодня);
		КомпонентыФС.Добавить(НСтр("ru=' Без оплаты (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОплатыПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Без оплаты (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Группа
	Если ЗначениеМетки = "Оплачен частично" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаОплаченЧастично);
		КомпонентыФС.Добавить(НСтр("ru=' Оплачен частично'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Подчиненные элементы
	Если ЗначениеМетки = "ОплаченЧастичноНеПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноНеПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Оплачен частично (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОплаченЧастичноСегодня" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноОжидаетсяСегодня);
		КомпонентыФС.Добавить(НСтр("ru=' Оплачен частично (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОплаченЧастичноПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Оплачен частично (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Прочие отборы первого уровня
	Если ЗначениеМетки = "Оплачен полностью" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченПолностью);
		КомпонентыФС.Добавить(НСтр("ru=' Оплачен полностью'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "СПереплатой" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.СПереплатой);
		КомпонентыФС.Добавить(НСтр("ru=' С переплатой'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
КонецФункции

// Возвращает форматированную строку представления метки статуса отгрузки
//
// Параметры:
//   ЗначениеМетки - Значение метки отбора
Функция СформироватьПредставлениеМеткиОтгрузка(ЗначениеМетки) Экспорт
	
	КомпонентыФС = Новый Массив;
	
	Если ЗначениеМетки = "Без отгрузки" Тогда
		// Группа
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаБезОплаты);
		КомпонентыФС.Добавить(НСтр("ru=' Без отгрузки'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Подчиненные элементы
	
	Если ЗначениеМетки = "БезОтгрузкиНеПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыНеПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Без отгрузки (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОтгрузкиСегодня" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыОжидаетсяСегодня);
		КомпонентыФС.Добавить(НСтр("ru=' Без отгрузки (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОтгрузкиПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.БезОплатыПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Без отгрузки (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Группа
	Если ЗначениеМетки = "Отгружен частично" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ГруппаОплаченЧастично);
		КомпонентыФС.Добавить(НСтр("ru=' Отгружен частично'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Подчиненные элементы
	Если ЗначениеМетки = "ОтгруженЧастичноНеПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноНеПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Отгружен частично (не просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОтгруженЧастичноСегодня" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноОжидаетсяСегодня);
		КомпонентыФС.Добавить(НСтр("ru=' Отгружен частично (ждем сегодня)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОтгруженЧастичноПросрочено" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченЧастичноПросрочено);
		КомпонентыФС.Добавить(НСтр("ru=' Отгружен частично (просрочена)'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
	// Прочие отборы первого уровня
	Если ЗначениеМетки = "Отгружен полностью" Тогда
		КомпонентыФС.Добавить(БиблиотекаКартинок.ОплаченПолностью);
		КомпонентыФС.Добавить(НСтр("ru=' Отгружен полностью'"));
		
		СтрокаПредставления = Новый ФорматированнаяСтрока(КомпонентыФС);
		
		Возврат СтрокаПредставления;
	КонецЕсли;
	
КонецФункции

// Возвращает числовое значение соответствующее статусу оплаты
//
// Параметры:
//   СтатусОплаты - Выбранный статус оплаты
Функция НомерКартинкиПоСтатусуОплаты(ЗначениеМетки) Экспорт
	
	Если ЗначениеМетки = "БезОплатыНеПросрочено" 
		Или ЗначениеМетки = "БезОтгрузкиНеПросрочено" Тогда
		Возврат 2;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОплатыСегодня"
		Или ЗначениеМетки = "БезОплатыСегодня" Тогда
		Возврат 4;
	КонецЕсли;
	
	Если ЗначениеМетки = "БезОплатыПросрочено"
		Или ЗначениеМетки = "БезОтгрузкиПросрочено"Тогда
		Возврат 6;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОплаченЧастичноНеПросрочено"
		Или ЗначениеМетки = "ОтгруженЧастичноНеПросрочено"Тогда
		Возврат 1;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОплаченЧастичноСегодня"
		Или ЗначениеМетки = "ОтгруженЧастичноСегодня"Тогда
		Возврат 3;
	КонецЕсли;
	
	Если ЗначениеМетки = "ОплаченЧастичноПросрочено"
		Или ЗначениеМетки = "ОтгруженЧастичноПросрочено"Тогда
		Возврат 5;
	КонецЕсли;
	
	Если ЗначениеМетки = "СПереплатой" Тогда
		Возврат 7;
	КонецЕсли;
	
КонецФункции

// Возвращает массив исключений номеров картинок, из коллекции картинок "Статусы оплаты", для формы списка документа
//
// Параметры:
//   ТипДокумента - Тип документа формы списка
Функция МассивИсключенийПоТипуДокумента(ТипДокумента) Экспорт
	
	МассивИсключений = Новый Массив;
	
	Если ТипДокумента = "АктВыполненныхРабот" 
		Или ТипДокумента = "ДополнительныеРасходы"
		Или ТипДокумента = "ОтчетКомитенту"
		Или ТипДокумента = "ОтчетКомиссионера"
		Или ТипДокумента = "ПриемИПередачаВРемонт"
		Или ТипДокумента = "РасходнаяНакладная"
		Или ТипДокумента = "ПриходнаяНакладная" Тогда
		
		МассивИсключений.Добавить(3);
		МассивИсключений.Добавить(4);
		МассивИсключений.Добавить(5);
		МассивИсключений.Добавить(6);
		МассивИсключений.Добавить(11);
		МассивИсключений.Добавить(12);

	КонецЕсли;
	
	Если ТипДокумента = "ЗаказНаряд" 
		Или ТипДокумента = "ЗаказПоставщику"
		Или ТипДокумента = "СчетНаОплату" Тогда
		
		МассивИсключений.Добавить(7);
		
	КонецЕсли;
	
	Возврат МассивИсключений;
	
	
КонецФункции

#КонецОбласти

