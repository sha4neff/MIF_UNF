// Общий модуль (выполняется на стороне сервера) модуля "Конструктор процессов для 1С:УНФ"
// Разработчик Компания "Аналитика. Проекты и решения" +7 495 005-1653, https://kp-unf.ru

#Область СлужебныеПроцедурыИФункции

// Процедура обработки маршрута корпоративного бизнес-процесса
// Параметры:
//		СсылкаНаЭкземпляр - ссылка на экземпляр бизнес-процесса
//		ИсточникОбработки - ссылка на инициатора обработки
//		ПараметрыТочки - дополнительные параметры точки
Процедура ОбработатьМаршрутКБП(Знач СсылкаНаЭкземпляр, Знач ИсточникОбработки, ПараметрыТочки=Неопределено) Экспорт
	
	Если СсылкаНаЭкземпляр.ПометкаУдаления Тогда
		ЗаписатьВЖурналПроцесса("Бизнес-процесс помечен на удаление, продолжение маршрута не возможно", СсылкаНаЭкземпляр,,,3);
		Возврат;
		
	КонецЕсли;
	
	СписокТочекМаршрута=Новый СписокЗначений;

	Если КП_ОбщееСерверПС.ЭтоЭкземплярБизнесПроцесса(ИсточникОбработки) Тогда
		//запущено из бизнес-процесса как старт, добавим первую точку - точку старта
		ИнициализироватьОбработкуТочек(СсылкаНаЭкземпляр);		
		ТочкаСтарта=ПолучитьТочкуМаршрутнойСети(Перечисления.КП_ВидыТочекБизнесПроцесса.Старт, СсылкаНаЭкземпляр);
		СписокТочекМаршрута.Добавить(ТочкаСтарта); //первая точка
		
	ИначеЕсли КП_ОбщееСерверПС.ЭтоЗадачаБизнесПроцесса(ИсточникОбработки) Тогда
		//процедура запущена из задачи, добавим точку этой задачи, как первую в маршруте
		СписокТочекМаршрута.Добавить(ИсточникОбработки.ТочкаКБП);
		
	ИначеЕсли КП_ОбщееСерверПС.ЭтоТочкаБизнесПроцесса(ИсточникОбработки) Тогда
		//процедура запущена из точки, добавим эту точку, как первую в маршруте
		СписокТочекМаршрута.Добавить(ИсточникОбработки);
		
	Иначе
		//инициатор обработки не был указан, получим весь список точек в работе
		СписокТочекМаршрута=ПолучитьСписокУказателейНаВыполняющиесяТочки(СсылкаНаЭкземпляр);
		Если СписокТочекМаршрута.Количество()=0 Тогда
			ТочкаКБП=ПолучитьУказательНаПоследнююВыполненнуюТочку(СсылкаНаЭкземпляр);
			Если НЕ ЗначениеЗаполнено(ТочкаКБП) Тогда
				Возврат;
			КонецЕсли;
			СписокТочекМаршрута.Добавить(ТочкаКБП);
		КонецЕсли;
		
	КонецЕсли;
	
	//Основной цикл обработки маршрутных точек, вызывается всегда после:
	//  а. старта процесса
	//  б. выполнения пользователем задачи
	//  в. регламентной процедуры (обработа таймера)
	
	ИндексТочкиМаршрута=0;
	Пока ИндексТочкиМаршрута<=СписокТочекМаршрута.Количество()-1 Цикл
		ЭлементМаршрута=СписокТочекМаршрута[ИндексТочкиМаршрута];
		ИндексТочкиМаршрута=ИндексТочкиМаршрута+1;
		
		Если ЭлементМаршрута.Пометка Тогда
			//точка обработана
			Продолжить;
			
		КонецЕсли;
		
		Если ЭлементМаршрута=Неопределено ИЛИ ЭлементМаршрута.Значение=Неопределено Тогда
			ЭлементМаршрута.Пометка=Истина; //точка обработана
			Продолжить;
			
		КонецЕсли;
		
		ТочкаМаршрута=ЭлементМаршрута.Значение;
		БизнесПроцессТочки=ТочкаМаршрута.ВладелецТочки;
					
		Если ТочкаМаршрута=Неопределено Тогда
			ТекстОшибки="Ошибка определения точки указателя в схеме бизнес-процесса """+Строка(БизнесПроцессТочки)+"""!";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			ЗаписатьВЖурналПроцесса(ТекстОшибки, СсылкаНаЭкземпляр,,,3);
			Прервать;
		КонецЕсли;
		
		СетьМаршрутныхТочек=БизнесПроцессТочки.СетьМаршрутныхТочек;
		
		//Начнем обработку текущей маршрутной точки процесса
		
		//1. Если наша точка признана выполненной (и это не точка завершения процесса), 
		//   то добавим в список маршрута новые точки, которые идут за ней
		//
		//2. Добавлять будем точки пока:
		//		а. не встретим новую точку действия (там выдадим задачу и будем ждать новых действий пользователя) 
		//		б. не встретим подпроцесс с ожиданием его выполнения (создадим его) и остановимся, что бы ждать результата
		//		в. не встретим точку разделения, там проверим, выполнены ли её входящие ветви, если нет, то остановимся
		//
		//3. Если по пути встретятся точки условия или выбора, то проверим выполнение условие и продолжим по выбранной ветви
		//
		//после завершения обрабоки точки отметим в списке её как обработанную (пометка=истина) и перейдем
		//к следующему элементу списка маршрутных точек (продолжим цикл)
		
									
		//СТАРТ
		Если ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Старт Тогда
			//перейдем к следующей точке в маршруте	
			УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена);
			ЭлементМаршрута.Пометка=Истина;
			
			СледующаяТочкаМаршрута=ПолучитьСледующуюТочку(СетьМаршрутныхТочек, ТочкаМаршрута);
			ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, СледующаяТочкаМаршрута);
			ИндексТочкиМаршрута=0;
			
			ЗаписатьВЖурналПроцесса("Бизнес-процесс запущен", СсылкаНаЭкземпляр, ТочкаМаршрута, , 1);
			
		//ДЕЙСТВИЕ
		ИначеЕсли ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Действие Тогда
		
			//сначала проверим, не передали ли нам в параметрах точки дополнительную информацию
			//например, после выполнения обработчика ПослеВыполнения задачи
			ЗавершитьДействиеПринудительно=Ложь;
			ЗавершитьПроцессПринудительно=Ложь;
			
			Если ТипЗнч(ПараметрыТочки)=Тип("Структура") Тогда
				ПараметрыТочки.Свойство("ЗавершитьДействие", ЗавершитьДействиеПринудительно);
				ПараметрыТочки.Свойство("ЗавершитьПроцесс", ЗавершитьПроцессПринудительно);
				
				ПараметрыТочки=Неопределено; //очистим, т.к. другим точкам она не нужна
				
			КонецЕсли;
			
			//проверим выполнены ли задачи точки действия, если да, перейдем к следующей точке
			
			Если ЗавершитьДействиеПринудительно Тогда
				ДействиеВыполненоПолностью=Истина;
				
			Иначе
				ДействиеВыполненоПолностью=ОбработатьТочкуДействия(ТочкаМаршрута);
				
			КонецЕсли; 
			
			Если ДействиеВыполненоПолностью Тогда
				//т.к. точку посчитали выполненной, то удалим все не выполненные задачи этой точки
				УдалятьТолькоНеВыполненные=Истина;
				КП_ЗадачиПроцессов.УдалитьЗадачиПроцессаВТочке(ТочкаМаршрута, УдалятьТолькоНеВыполненные);
				
				УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена);
				ЭлементМаршрута.Пометка=Истина;
				
				СледующаяТочкаМаршрута=ПолучитьСледующуюТочку(СетьМаршрутныхТочек, ТочкаМаршрута);
				ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, СледующаяТочкаМаршрута);
				ИндексТочкиМаршрута=0;
				
				ЗаписатьВЖурналПроцесса("Действие """+СокрЛП(ТочкаМаршрута)+""" выполнено полностью", СсылкаНаЭкземпляр, ТочкаМаршрута);
				
			Иначе
				УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполняется);
				ЗаписатьВЖурналПроцесса("Действие """+СокрЛП(ТочкаМаршрута)+""" в работе", СсылкаНаЭкземпляр, ТочкаМаршрута);

			КонецЕсли;
			
			Если ЗавершитьПроцессПринудительно Тогда
				//выполним процесс в точке завершения
				СписокТочекЗавершения=КП_СхемаКБПСервер.ПолучитьСписокТочекПоТипу(СсылкаНаЭкземпляр, Перечисления.КП_ВидыТочекБизнесПроцесса.Завершение);
				ТочкаЗавершения=СписокТочекЗавершения[0].Значение;
				КП_Процессы.ОбработатьМаршрутКБП(СсылкаНаЭкземпляр, ТочкаЗавершения);
				КП_Процессы.ОтменитьВыполнениеВсемНевыпоненнымТочкам(СсылкаНаЭкземпляр);
				
				Прервать;
		
			КонецЕсли;
			
		//ОБРАБОТКА
		ИначеЕсли ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка Тогда
			
			РезультатВыполненияОбработки=ОбработатьТочкуОбработки(ТочкаМаршрута);
			
			Если ТипЗнч(РезультатВыполненияОбработки)=Тип("Структура") Тогда
				Если РезультатВыполненияОбработки.Свойство("ЗавершитьПроцесс") И РезультатВыполненияОбработки.ЗавершитьПроцесс Тогда
					//принудительно завершим процесс
					СписокТочекЗавершения=КП_СхемаКБПСервер.ПолучитьСписокТочекПоТипу(СсылкаНаЭкземпляр, Перечисления.КП_ВидыТочекБизнесПроцесса.Завершение);
					ТочкаЗавершения=СписокТочекЗавершения[0].Значение;
					КП_Процессы.ОбработатьМаршрутКБП(СсылкаНаЭкземпляр, ТочкаЗавершения);
					КП_Процессы.ОтменитьВыполнениеВсемНевыпоненнымТочкам(СсылкаНаЭкземпляр);
					
					Прервать;
		
				КонецЕсли;
				
				ВыполненоУспешно=РезультатВыполненияОбработки.РезультатВыполнения;
				
			Иначе
				ВыполненоУспешно=РезультатВыполненияОбработки;
				
			КонецЕсли;
			
			Если ВыполненоУспешно Тогда
				УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена);
				ЭлементМаршрута.Пометка=Истина;
				
				СледующаяТочкаМаршрута=ПолучитьСледующуюТочку(СетьМаршрутныхТочек, ТочкаМаршрута);
				ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, СледующаяТочкаМаршрута);
				ИндексТочкиМаршрута=0;
				
				Если ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка И ТочкаМаршрута.ТипОбработки=4 Тогда
					//это таймер
					ЗаписатьВЖурналПроцесса("Таймер """+СокрЛП(ТочкаМаршрута)+""" сработал", СсылкаНаЭкземпляр, ТочкаМаршрута);
				Иначе
					ЗаписатьВЖурналПроцесса("Обработка """+СокрЛП(ТочкаМаршрута)+""" пройдена успешно", СсылкаНаЭкземпляр, ТочкаМаршрута);
				КонецЕсли;
				
			Иначе
				//поставим признак выполнения, возможно пользователь изменит код обработки и тогда она будет выполнена при следующем проходе
				УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполняется);	
				Если ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка И ТочкаМаршрута.ТипОбработки=4 Тогда
					//это таймер
					//ЗаписатьВЖурналПроцесса("Таймер """+СокрЛП(ТочкаМаршрута)+""" включен", СсылкаНаЭкземпляр, ТочкаМаршрута,,1);
				Иначе
					ЗаписатьВЖурналПроцесса("Обработка """+СокрЛП(ТочкаМаршрута)+""" не выполнена", СсылкаНаЭкземпляр, ТочкаМаршрута,,3);
				КонецЕсли;
				
			КонецЕсли;		
			
		//ПОДПРОЦЕСС
		ИначеЕсли ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Подпроцесс Тогда
			
			ЭтоОбработкаИзЗавершенияПодпроцесса=(ТочкаМаршрута=ИсточникОбработки);
			ПодпроцессВыполненПолностью=ОбработатьТочкуПодпроцесса(ТочкаМаршрута, ЭтоОбработкаИзЗавершенияПодпроцесса);
			ИсточникОбработки=Неопределено; //очистим флаг
			
			Если ПодпроцессВыполненПолностью Тогда
				УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена);
				ЭлементМаршрута.Пометка=Истина;
				
				СледующаяТочкаМаршрута=ПолучитьСледующуюТочку(СетьМаршрутныхТочек, ТочкаМаршрута);
				ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, СледующаяТочкаМаршрута);
				ИндексТочкиМаршрута=0;
				
				ЗаписатьВЖурналПроцесса("Подпроцесс """+СокрЛП(ТочкаМаршрута)+""" выполнен полностью", СсылкаНаЭкземпляр, ТочкаМаршрута, , 1);
				
			Иначе
				УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполняется);
				ЗаписатьВЖурналПроцесса("Подпроцесс """+СокрЛП(ТочкаМаршрута)+""" в работе.", СсылкаНаЭкземпляр, ТочкаМаршрута);
				
			КонецЕсли;
						
		//РАЗДЕЛЕНИЕ
		ИначеЕсли ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Разделение Тогда
			
			ТаблицаСледующихТочек=ПолучитьТаблицуСледующихТочек(СетьМаршрутныхТочек, ТочкаМаршрута); // ТочкаВход | УсловиеПерехода
			Для Каждого СтрокаТЧ Из ТаблицаСледующихТочек Цикл
				ТочкаВыход=СтрокаТЧ.ТочкаВход; //в разделении называется "вход"
				ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, ТочкаВыход);
				ИндексТочкиМаршрута=0;
				
				ИницилизироватьВетвьСхемы(ТочкаВыход);
				
			КонецЦикла;
			
			УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена);
			ЭлементМаршрута.Пометка=Истина;
									
			ЗаписатьВЖурналПроцесса("Обработана точка разделения маршрута процесса", СсылкаНаЭкземпляр, ТочкаМаршрута);
			
			
		//СЛИЯНИЕ
		ИначеЕсли ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Слияние Тогда
			
			СписокПредыдущихТочек=ПолучитьСписокПредыдущихТочек(СетьМаршрутныхТочек, ТочкаМаршрута);
			
			//определим выполнены ли все предыдущие точки, если все выполнены, то считаем слияние выполненным
			ВсеПредыдущиеТочкиВыполнены=Истина; //может быть переопределена ниже
			
			Для Каждого ЭлементПредыдущихТочек Из СписокПредыдущихТочек Цикл
				ПредыдущаяТочкаСхемы=ЭлементПредыдущихТочек.Значение;
				СтруктураСостоянияПредыдущейТочки=ПолучитьСтруктуруСостоянияТочки(ПредыдущаяТочкаСхемы);
				
				СостояниеТочки=СтруктураСостоянияПредыдущейТочки.Состояние;
				Если НЕ ЗначениеЗаполнено(СостояниеТочки) Тогда
					СостояниеТочки=ДополнительноОпределитьСостояниеТочки(ПредыдущаяТочкаСхемы, СетьМаршрутныхТочек);
				КонецЕсли;
				
				//определим, нужно ли проверять данную ветвь, входящую в точку слияния,
				//если по этой ветви маршрут не пошел, то считаем, что условие в точке слияния 
				//не может быть выполнено
				Если КП_СхемаКБПСервер.ЭтоТочкаВыбораИлиУсловия(ПредыдущаяТочкаСхемы) Тогда 
					Если СостояниеТочки<>Перечисления.КП_СостояниеТочек.Выполнена Тогда
					    ТочкаКудаПошелПроцессПередСлияним=СтруктураСостоянияПредыдущейТочки.ПерешлиКТочке;
						Если ТочкаКудаПошелПроцессПередСлияним<>ТочкаМаршрута Тогда
							ВсеПредыдущиеТочкиВыполнены=Ложь;
							Прервать;
						КонецЕсли;
					Иначе
						//точка условия выполнена, но нужно проверить, выполнена ли она по ветви, которая идет
						//непосредственно к точке слияния (тогда все ок) или она идет к ветви которая не идет к точке 
						//слияния, тогда выполнение не будет учитываться
						СтруктураСостоянияПредыдущейТочки=ПолучитьСтруктуруСостоянияТочки(ПредыдущаяТочкаСхемы);
						Если СтруктураСостоянияПредыдущейТочки.ПерешлиКТочке<>ТочкаМаршрута Тогда
							ВсеПредыдущиеТочкиВыполнены=Ложь;
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				//проверим какое состояние у входящей (предыдущей) точки, 
				//если предыдущая точка еще не обработана маршрутом
				//процесса, то мы будем ждать её выполнения
				Если СостояниеТочки<>Перечисления.КП_СостояниеТочек.Выполнена
					И СостояниеТочки<>Перечисления.КП_СостояниеТочек.НеВыполняется 
				Тогда
					//точка еще не выполнена (или не выполняется)
					ВсеПредыдущиеТочкиВыполнены=Ложь;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла; //список предыдущих точек
			
			Если НЕ ВсеПредыдущиеТочкиВыполнены Тогда
				УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполняется);
				ТекстСоообщения="В точке слияния """+СокрЛП(ТочкаМаршрута)+""" ещё не все ветви выполнены";
				ЗаписатьВЖурналПроцесса(ТекстСоообщения, СсылкаНаЭкземпляр, ТочкаМаршрута);	
				
			Иначе
				УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена);
				ЭлементМаршрута.Пометка=Истина;
			
				СледующаяТочкаМаршрута=ПолучитьСледующуюТочку(СетьМаршрутныхТочек, ТочкаМаршрута);
				ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, СледующаяТочкаМаршрута);
				ИндексТочкиМаршрута=0;
			
				ТекстСообщения="В точке слияния """+СокрЛП(ТочкаМаршрута)+""" все ветви выполнены";
				ЗаписатьВЖурналПроцесса(ТекстСообщения, СсылкаНаЭкземпляр, ТочкаМаршрута);	
				
			КонецЕсли;
			
			Если ВсеПредыдущиеТочкиВыполнены Тогда
				//инициализируем точки входа условия
				Для Каждого ЭлементПредыдущихТочек Из СписокПредыдущихТочек Цикл
					ПредыдущаяТочкаСхемы=ЭлементПредыдущихТочек.Значение;
					ИнициализироватьТочку(ПредыдущаяТочкаСхемы, "Инициализация точки входа условия");
				КонецЦикла;		
			КонецЕсли;
			
		//УСЛОВИЕ
		ИначеЕсли ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие Тогда
			
			ТаблицаСледующихТочек=ПолучитьТаблицуСледующихТочек(СетьМаршрутныхТочек, ТочкаМаршрута); // ТочкаВход | УсловиеПерехода
			
			Если ТаблицаСледующихТочек.Количество()<>2 Тогда
				ТекстОшибки="Ошибка в элементе схемы """+ТочкаМаршрута+"""! Количество соединительных линий должно быть равно двум";
				ЗаписатьВЖурналПроцесса(ТекстОшибки, СсылкаНаЭкземпляр, ТочкаМаршрута, , 3);
				ЗаписатьВЖурналПроцесса("Процесс остановлен!", СсылкаНаЭкземпляр, ТочкаМаршрута,,3);
				Прервать;
				
			КонецЕсли;
			
			//определим, какая линия будет использоваться для выполненного условия, а какая для невыполненого

			СтрокаУсловияНет=ТаблицаСледующихТочек.Найти(0, "УсловиеПерехода");
			СтрокаУсловияДа=ТаблицаСледующихТочек.Найти(1, "УсловиеПерехода");
			
			Если СтрокаУсловияДа=Неопределено ИЛИ СтрокаУсловияНет=Неопределено Тогда
				ТекстОшибки="Ошибка в элементе схемы """+ТочкаМаршрута+""". Нет данных о линии к условию Да или Нет";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ЗаписатьВЖурналПроцесса(ТекстОшибки, СсылкаНаЭкземпляр, ТочкаМаршрута,,3);
				ЗаписатьВЖурналПроцесса("Процесс остановлен!", СсылкаНаЭкземпляр, ТочкаМаршрута,,3);
				Прервать;
				
			КонецЕсли;
				
			СледующаяТочкаМаршрутаДа=СтрокаУсловияДа.ТочкаВход;
			СледующаяТочкаМаршрутаНет=СтрокаУсловияНет.ТочкаВход;				
			
			//определим результат обработввввки условия
			РезультатУсловия=ОбработатьТочкуУсловия(ТочкаМаршрута);
			
			//ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, СледующаяТочкаМаршрута);
			//ИндексТочкиМаршрута=0;
			
			Если РезультатУсловия=Истина Тогда
				УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена,,, СледующаяТочкаМаршрутаДа);
				ЭлементМаршрута.Пометка=Истина;
				ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, СледующаяТочкаМаршрутаДа);
				ИндексТочкиМаршрута=0;
				
				//если ранее эта ветвь уже выполнялась, то неоходимо предварительно очистить её от статуса "Выполнено"
				ИницилизироватьВетвьСхемы(СледующаяТочкаМаршрутаДа);
				//отменим другую ветвь
				КП_СхемаКБПСервер.ОтменитьНаСхемеВетвьВыполнения(СледующаяТочкаМаршрутаНет);
					
				ЗаписатьВЖурналПроцесса("В точке условия """+СокрЛП(ТочкаМаршрута)+""" принято решение ""Да""", СсылкаНаЭкземпляр, ТочкаМаршрута, , 1);
			
			Иначе//нет
				УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена,,, СледующаяТочкаМаршрутаНет);
				ЭлементМаршрута.Пометка=Истина;
				ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, СледующаяТочкаМаршрутаНет);
				ИндексТочкиМаршрута=0;
				
				//если ранее эта ветвь уже выполнялась, то неоходимо предварительно очистить её от статуса "Выполнено"
				//очистка ветви будет идти до первой точки разделения
				ИницилизироватьВетвьСхемы(СледующаяТочкаМаршрутаНет);
				//отменим другую ветвь
				КП_СхемаКБПСервер.ОтменитьНаСхемеВетвьВыполнения(СледующаяТочкаМаршрутаДа);
			
				ЗаписатьВЖурналПроцесса("В точке условия """+СокрЛП(ТочкаМаршрута)+""" принято решение ""Нет""", СсылкаНаЭкземпляр, ТочкаМаршрута, , 1);
			КонецЕсли;		
						
		//ВЫБОР ВАРИАНТА
		ИначеЕсли ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта Тогда
			
			ТаблицаСледующихТочек=ПолучитьТаблицуСледующихТочек(СетьМаршрутныхТочек, ТочкаМаршрута); // ТочкаВход | УсловиеПерехода
			
			КоличествоВариантов=ТочкаМаршрута.ВыборВарианта.Количество();
			Если ТаблицаСледующихТочек.Количество()<>КоличествоВариантов Тогда
				ТекстОшибки="Ошибка в элементе схемы """+ТочкаМаршрута+"""! Количество соединительных линий должно быть равно количеству вариантов ("+СокрЛП(КоличествоВариантов)+")!";
				ЗаписьЖурналаРегистрации("Ошибка обработка точки выбора в процессе", УровеньЖурналаРегистрации.Ошибка, СсылкаНаЭкземпляр, ТочкаМаршрута, ТекстОшибки);
				ЗаписатьВЖурналПроцесса(ТекстОшибки, СсылкаНаЭкземпляр, ТочкаМаршрута,,3);
				ЗаписатьВЖурналПроцесса("Процесс остановлен!", СсылкаНаЭкземпляр, ТочкаМаршрута,,3);
				Прервать;
				
			КонецЕсли;
			
			//определим результат обработки выбора варианта
			НомерВыбранногоВарианта=ОбработатьТочкуВыбораВарианта(ТочкаМаршрута);
			
			Если НомерВыбранногоВарианта=0 Тогда
				ТекстОшибки="Ошибка в элементе схемы """+ТочкаМаршрута+"""! Выбран несуществующий вариант ""0""!";
				ЗаписьЖурналаРегистрации("Ошибка обработка точки выбора в процессе", УровеньЖурналаРегистрации.Ошибка, СсылкаНаЭкземпляр, ТочкаМаршрута, ТекстОшибки);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ЗаписатьВЖурналПроцесса(ТекстОшибки, СсылкаНаЭкземпляр, ТочкаМаршрута,,3);
				ЗаписатьВЖурналПроцесса("Процесс остановлен!", СсылкаНаЭкземпляр, ТочкаМаршрута,,3);
				Прервать;
		
			КонецЕсли;

			//определим линию нужного варианта

			СтрокаВарианта=ТаблицаСледующихТочек.Найти(НомерВыбранногоВарианта, "УсловиеПерехода");
			
			Если СтрокаВарианта=Неопределено Тогда
				ТекстОшибки="Ошибка в элементе схемы """+ТочкаМаршрута+"""! Нет данных о линии к выбранному варианту "+СокрЛП(НомерВыбранногоВарианта)+"!";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				ЗаписатьВЖурналПроцесса(ТекстОшибки, СсылкаНаЭкземпляр, ТочкаМаршрута,,3);
				Прервать;
				
			КонецЕсли;
				
			СледующаяТочкаМаршрута=СтрокаВарианта.ТочкаВход;
			
			УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена,,, СледующаяТочкаМаршрута);
			ЭлементМаршрута.Пометка=Истина;
			
			ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, СледующаяТочкаМаршрута);
			ИндексТочкиМаршрута=0;
            			
			//инициализируем выбранную ветвь
			ИницилизироватьВетвьСхемы(СледующаяТочкаМаршрута);
			
			//очистим все другие варианты
			Для Каждого СтрокаВарианта Из ТаблицаСледующихТочек Цикл
				Если СтрокаВарианта.УсловиеПерехода=НомерВыбранногоВарианта Тогда
					Продолжить;
				
				Иначе
					//очистим ветвь варианта
					ТочкаВетви=СтрокаВарианта.ТочкаВход;
					КП_СхемаКБПСервер.ОтменитьНаСхемеВетвьВыполнения(ТочкаВетви);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ЗаписатьВЖурналПроцесса("В точке условия """+СокрЛП(ТочкаМаршрута)+""" выбран вариант """+СокрЛП(НомерВыбранногоВарианта)+"""", СсылкаНаЭкземпляр, ТочкаМаршрута, ,1);
							
		//ЗАВЕРШЕНИЕ
		ИначеЕсли ТочкаМаршрута.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Завершение Тогда
			УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена);
			ЭлементМаршрута.Пометка=Истина;
			
			РезультатЗавершения=ЗавершитьБизнесПроцесс(СсылкаНаЭкземпляр);
			
			УдалятьТолькоНеВыполненные=Истина;
			КП_ЗадачиПроцессов.ОтменитьВыполнениеВсехВыполняющихсяЗадач(СсылкаНаЭкземпляр);
			КП_ЗадачиПроцессов.УдалитьЗадачиПроцесса(СсылкаНаЭкземпляр, УдалятьТолькоНеВыполненные);
			
			ЗаписатьВЖурналПроцесса("Бизнес-процесс завершен", СсылкаНаЭкземпляр, ТочкаМаршрута,,1);
			
			//отметим все точки процесса выполненными
			
			ОтметитьВсеТочкиВыполненными(БизнесПроцессТочки); 
			
			ТекДата=ТекущаяДата();
			КП_Процессы.УстановитьЗначениеПараметраПроцесса(СсылкаНаЭкземпляр, ПланыВидовХарактеристик.КП_ПараметрыПроцессов.ДатаЗавершения, ТекДата, ТекДата);
			
			//проверим были ли вышестоящий бизнес-процесс
			Если ЗначениеЗаполнено(СсылкаНаЭкземпляр.ТочкаВозвратаВВышестоящийПроцесс) Тогда
				ТочкаВышестоящегоПроцесса=СсылкаНаЭкземпляр.ТочкаВозвратаВВышестоящийПроцесс;
				
				//выполним обход вышестоящего процесса с точки запуска этого подпроцесса
				СсылкаНаВышестоящийЭкземпляр=ТочкаВышестоящегоПроцесса.ВладелецТочки;
				ОбработатьМаршрутКБП(СсылкаНаВышестоящийЭкземпляр, ТочкаВышестоящегоПроцесса);
				
			Иначе
				Прервать;

			КонецЕсли;
			
		КонецЕсли; //по типу точек
		
	КонецЦикла; //по указателям в списке
	
КонецПроцедуры

Процедура ОтметитьВсеТочкиВыполненными(ПроцессСсылка)
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка КАК Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ОбработкаТочек КАК КП_ОбработкаТочек
	                    |		ПО КП_ОбработкаТочек.ТочкаКБП = КП_ТочкиПроцессов.Ссылка
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &БизнесПроцесс
	                    |");
		
	Запрос.УстановитьПараметр("БизнесПроцесс", ПроцессСсылка);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ТочкаМаршрута=Выборка.Ссылка;
		УстановитьСостояниеОбработкиТочки(ТочкаМаршрута, Перечисления.КП_СостояниеТочек.Выполнена);	
	КонецЦикла;	
	
КонецПроцедуры

// Процедура добавляет точку в список маршрута
// Параметры:
//		СписокТочекМаршрута - список точек маршрута
//		ТочкаМаршрута - точка маршрута процесса
Процедура ДобавитьТочкуВСписокМаршрута(СписокТочекМаршрута, ТочкаМаршрута)
	
	ЭлементСписка=СписокТочекМаршрута.НайтиПоЗначению(ТочкаМаршрута);
	
	Если ЭлементСписка=Неопределено Тогда
		СписокТочекМаршрута.Добавить(ТочкаМаршрута);
		
	Иначе
		ЭлементСписка.Пометка=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает структуру параметров корпоративного бизнес-процесса
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ДатаПараметров - дата параметров
//	Возвращаемое значение: Структура данных
Функция ПолучитьСтруктуруПараметровКБП(БизнесПроцесс, ДатаПараметров=Неопределено) Экспорт
	
	Если ДатаПараметров=Неопределено Тогда
		ДатаПараметров=ТекущаяДата();
	КонецЕсли;
	
	СтруктураПараметровКБП=Новый Структура;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ПараметрыКорпоративныхПроцессовСрезПоследних.ЗначениеПараметра,
	                    |	КП_ПараметрыПроцессов.Ссылка,
	                    |	КП_ПараметрыПроцессов.Код
	                    |ИЗ
	                    |	ПланВидовХарактеристик.КП_ПараметрыПроцессов КАК КП_ПараметрыПроцессов
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ПараметрыПроцессов.СрезПоследних(&ДатаПараметров, БизнесПроцесс = &БизнесПроцесс) КАК КП_ПараметрыКорпоративныхПроцессовСрезПоследних
	                    |		ПО (КП_ПараметрыКорпоративныхПроцессовСрезПоследних.ПараметрПроцесса = КП_ПараметрыПроцессов.Ссылка)");
		
	Запрос.УстановитьПараметр("ДатаПараметров", ДатаПараметров);
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);

	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		ИмяПараметраПроцесса=Выборка.Код;
		ЗначениеПараметра=Выборка.ЗначениеПараметра;
		
		Если НЕ СтруктураПараметровКБП.Свойство(ИмяПараметраПроцесса) Тогда
			СтруктураПараметровКБП.Вставить(ИмяПараметраПроцесса, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат СтруктураПараметровКБП;
		
КонецФункции

// Процедура сохраняет структуру параметров корпоративного бизнес-процесса
// В параметрах процедуры передаются структура параметров, ссылка на бизнес-процесс и дата, 
// на которую необходимо получить структуру.
//	Параметры:
//		СтруктураПараметров - структура параметров
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ДатаПараметров - дата параметров
Процедура СохранитьСтруктуруПараметровКБП(СтруктураПараметров, БизнесПроцесс, ДатаПараметров=Неопределено) Экспорт
	
	Если ДатаПараметров=Неопределено Тогда
		ДатаПараметров=ТекущаяДата();
	КонецЕсли;
	
	Если ДатаПараметров=Неопределено Тогда
		ДатаПараметров=ТекущаяДата();
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		
		НаименованиеПараметраПроцесса=ЭлементСтруктуры.Ключ;
		ПараметрПроцесса=ПланыВидовХарактеристик.КП_ПараметрыПроцессов[НаименованиеПараметраПроцесса];
		ЗначениеПараметра=ЭлементСтруктуры.Значение;
		
		РегПараметры=РегистрыСведений.КП_ПараметрыПроцессов.СоздатьНаборЗаписей();
		РегПараметры.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		РегПараметры.Отбор.ПараметрПроцесса.Установить(ПараметрПроцесса);
		РегПараметры.Прочитать();
		
		КоличествоПараметров=РегПараметры.Количество();
		
		Если КоличествоПараметров>0 Тогда
			ЗаписьПараметра=РегПараметры[КоличествоПараметров-1];
			Если ДатаПараметров<>ЗаписьПараметра.Период Тогда
				//создадим новую запись
				ЗаписьПараметра=РегПараметры.Добавить();
				ЗаписьПараметра.Период=ДатаПараметров;
			КонецЕсли;
		Иначе
			//создадим новую запись
			ЗаписьПараметра=РегПараметры.Добавить();
			ЗаписьПараметра.Период=ДатаПараметров;
		КонецЕсли;
		
		ЗаписьПараметра.БизнесПроцесс=БизнесПроцесс;
		ЗаписьПараметра.ПараметрПроцесса=ПараметрПроцесса;
		ЗаписьПараметра.ЗначениеПараметра=ЗначениеПараметра;
		
		Попытка
			РегПараметры.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла; //структура	параметров
	
	Возврат;
	
КонецПроцедуры

// Функция возвращает количество основных исполнителей 
// Параметры:
//		Объект - ссылка на объект
// Возвращаемое значение: Число
Функция ПолучитьКоличествоОсновныхИсполнителей(Объект) Экспорт
	Если Объект=Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	КоличествоЭлементов=Объект.ОсновныеИсполнители.Количество();
	
	Возврат КоличествоЭлементов;
	
КонецФункции

// Функция возвращает список указателей на выполняющиеся точки 
// Параметры:
//		СсылкаНаЭкземплярПроцесса - ссылка на экземпляр бизнес-процесса
// Возвращаемое значение: Список значений
Функция ПолучитьСписокУказателейНаВыполняющиесяТочки(СсылкаНаЭкземплярПроцесса)
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ОбработкаТочекСрезПоследних.ТочкаКБП
	                    |ИЗ
	                    |	РегистрСведений.КП_ОбработкаТочек.СрезПоследних КАК КП_ОбработкаТочекСрезПоследних
	                    |ГДЕ
	                    |	КП_ОбработкаТочекСрезПоследних.БизнесПроцесс = &БизнесПроцесс
	                    |	И КП_ОбработкаТочекСрезПоследних.Состояние = &Состояние");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", СсылкаНаЭкземплярПроцесса);
	Запрос.УстановитьПараметр("Состояние", Перечисления.КП_СостояниеТочек.Выполняется);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокТочек=Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокТочек.Добавить(Выборка.ТочкаКБП);
		
	КонецЦикла;
	
	Возврат СписокТочек;
	
КонецФункции

// Функция возвращает указатель на последнюю выполненную точку маршрута
// Параметры:
//		СсылкаНаЭкземплярПроцесса - ссылка на экземпляр бизнес-процесса
// Возвращаемое значение: Ссылка на точку маршрута
Функция ПолучитьУказательНаПоследнююВыполненнуюТочку(СсылкаНаЭкземплярПроцесса)
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_ОбработкаТочекСрезПоследних.ТочкаКБП КАК ТочкаКБП
	                    |ИЗ
	                    |	РегистрСведений.КП_ОбработкаТочек.СрезПоследних КАК КП_ОбработкаТочекСрезПоследних
	                    |ГДЕ
	                    |	КП_ОбработкаТочекСрезПоследних.БизнесПроцесс = &БизнесПроцесс
	                    |	И КП_ОбработкаТочекСрезПоследних.Состояние = &Состояние
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	КП_ОбработкаТочекСрезПоследних.Период УБЫВ");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", СсылкаНаЭкземплярПроцесса);
	Запрос.УстановитьПараметр("Состояние", Перечисления.КП_СостояниеТочек.Выполнена);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ТочкаКБП;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает точку маршрутной сети
// Параметры:
//		ТипТочки - ссылка на тип точки
//		СсылкаНаЭкземплярПроцесса - ссылка на экземпляр бизнес-процесса
//		ИмяТочки - 
// Возвращаемое значение: Ссылка на маршрутную точку или Неопределено
Функция ПолучитьТочкуМаршрутнойСети(ТипТочки, СсылкаНаЭкземплярПроцесса, ИмяТочки="")
	
	Запрос=Новый Запрос;
	ТекстЗапроса="ВЫБРАТЬ
	             |	КП_ТочкиПроцессов.Ссылка
	             |ИЗ
	             |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	             |ГДЕ
	             |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	             |	И КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки
	             |	И КП_ТочкиПроцессов.ТипТочки = &ТипТочки";
				 
	Запрос.УстановитьПараметр("ТипТочки", ТипТочки);			 
	Если НЕ ПустаяСтрока(ИмяТочки) Тогда
		ТекстЗапроса=ТекстЗапроса+" И КП_ТочкиПроцессов.Наименование = &ИмяТочки";
		Запрос.УстановитьПараметр("ИмяТочки", ИмяТочки);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВладелецТочки", СсылкаНаЭкземплярПроцесса);
	Запрос.Текст=ТекстЗапроса;
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция возвращает следующую точку в маршруте 
// Параметры:
//		СетьМаршрутныхТочек - сеть маршрутных точек
//		ИсходнаяТочка - ссылка на исходную маршрутную точку 
// Возвращаемое значение: Ссылка на маршрутную точку
Функция ПолучитьСледующуюТочку(СетьМаршрутныхТочек, ИсходнаяТочка) Экспорт
	
	ОтборСтрок=Новый Структура;
	ОтборСтрок.Вставить("ТочкаВыход", ИсходнаяТочка);
	
	МассивСтрок=СетьМаршрутныхТочек.НайтиСтроки(ОтборСтрок);
	Если МассивСтрок.Количество()=0 Тогда
		Возврат Неопределено;
		
	Иначе
		СледующаяТочка=МассивСтрок[0].ТочкаВход;
		
	КонецЕсли;
	
	Возврат СледующаяТочка;
	
КонецФункции

// Функция формирует и возвращает таблицу следующих точек  
// Параметры:
//		СетьМаршрутныхТочек - сеть маршрутных точек
//		ИсходнаяТочка - ссылка на исходную точку
// Возвращаемое значение: Таблица значений
Функция ПолучитьТаблицуСледующихТочек(СетьМаршрутныхТочек, ИсходнаяТочка)
	
	ОтборСтрок=Новый Структура;
	ОтборСтрок.Вставить("ТочкаВыход", ИсходнаяТочка);
	
	МассивСтрок=СетьМаршрутныхТочек.НайтиСтроки(ОтборСтрок);
	
	ТаблицаТочекВхода=Новый ТаблицаЗначений;
	ТаблицаТочекВхода.Колонки.Добавить("ТочкаВход");
	ТаблицаТочекВхода.Колонки.Добавить("УсловиеПерехода");
	
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		НоваяСтрока=ТаблицаТочекВхода.Добавить();
		НоваяСтрока.ТочкаВход=ЭлементМассива.ТочкаВход;
		НоваяСтрока.УсловиеПерехода=ЭлементМассива.УсловиеПерехода;
		
	КонецЦикла;
	
	Возврат ТаблицаТочекВхода;
	
КонецФункции

// Функция формирует и возвращает список предыдущих точек
// Параметры:
//		СетьМаршрутныхТочек - сеть маршрутных точек
//		ИсходнаяТочка - ссылка на исходную точку
// Возвращаемое значение: Список значений
Функция ПолучитьСписокПредыдущихТочек(СетьМаршрутныхТочек, ИсходнаяТочка)
	ОтборСтрок=Новый Структура;
	ОтборСтрок.Вставить("ТочкаВход", ИсходнаяТочка);
	
	МассивСтрок=СетьМаршрутныхТочек.НайтиСтроки(ОтборСтрок);
	
	СписокТочекВыхода=Новый СписокЗначений;
	
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		СписокТочекВыхода.Добавить(ЭлементМассива.ТочкаВыход);
		
	КонецЦикла;
	
	Возврат СписокТочекВыхода;
	
КонецФункции

// Функция устанавливает состояние обработки точки
// Параметры:
//		ТочкаУказателя - ссылк на точку указателя
//		СостояниеТочки - состояние точки
//		НомерПрохода - номер прохода
//		Примечание - текстовое примечание
// Возвращаемое значение: Истина или Ложь
Функция УстановитьСостояниеОбработкиТочки(ТочкаУказателя, СостояниеТочки, НомерПрохода=Неопределено, Примечание="", ПерешлиКТочке=Неопределено) Экспорт
	
	БизнесПроцесс=ТочкаУказателя.ВладелецТочки;
	
	//добавим запись в регистр точек в работе
	
	РегСостояний=РегистрыСведений.КП_ОбработкаТочек.СоздатьНаборЗаписей();
	РегСостояний.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегСостояний.Отбор.ТочкаКБП.Установить(ТочкаУказателя);
	РегСостояний.Прочитать();
		
	КоличествоЗаписей=РегСостояний.Количество();
		
	Если КоличествоЗаписей>0 Тогда
		ЗаписьРегистра=РегСостояний[КоличествоЗаписей-1];
		Если НомерПрохода=Неопределено Тогда
			НомерПрохода=ЗаписьРегистра.НомерПрохода;
		КонецЕсли;
		
	Иначе
		ЗаписьРегистра=РегСостояний.Добавить();
		ЗаписьРегистра.БизнесПроцесс=БизнесПроцесс;
		ЗаписьРегистра.ТочкаКБП=ТочкаУказателя;
	КонецЕсли;
	
	Если НомерПрохода=Неопределено Тогда
		НомерПрохода=1;
	КонецЕсли;
	
	Если СостояниеТочки=Перечисления.КП_СостояниеТочек.Реинициализирована Тогда
		НомерПрохода=НомерПрохода+1;
		
	КонецЕсли;
	
	ЗаписьРегистра.Состояние=СостояниеТочки;
	ЗаписьРегистра.НомерПрохода=НомерПрохода;
	ЗаписьРегистра.Примечание=Примечание;
	ЗаписьРегистра.Период=ТекущаяДата();
	ЗаписьРегистра.ПерешлиКТочке=ПерешлиКТочке;
	
	Попытка
		РегСостояний.Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;

КонецФункции

// Функция  формирует и возвращает структуру состояния точки
// Параметры:
//		ТочкаУказателя - ссылка на точку указателя
// Возвращаемое значение: Структура данных
Функция ПолучитьСтруктуруСостоянияТочки(ТочкаУказателя, НомерПрохода=1) Экспорт
	
	БизнесПроцесс=ТочкаУказателя.ВладелецТочки;
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_ОбработкаТочекСрезПоследних.Состояние,
	                    |	КП_ОбработкаТочекСрезПоследних.НомерПрохода,
						|	КП_ОбработкаТочекСрезПоследних.ПерешлиКТочке
	                    |ИЗ
	                    |	РегистрСведений.КП_ОбработкаТочек.СрезПоследних(
	                    |			&ДатаКон,
	                    |			БизнесПроцесс = &БизнесПроцесс
	                    |			И ТочкаКБП = &ТочкаКБП 
						//|			И НомерПрохода = &НомерПрохода
						|) КАК КП_ОбработкаТочекСрезПоследних");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаКБП", ТочкаУказателя);
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	//Запрос.УстановитьПараметр("НомерПрохода", НомерПрохода);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СтруктураСостояния=Новый Структура("Состояние, НомерПрохода, ПерешлиКТочке");
	Если Выборка.Следующий() Тогда
		СтруктураСостояния.Состояние=Выборка.Состояние;
		СтруктураСостояния.НомерПрохода=Выборка.НомерПрохода;
		СтруктураСостояния.ПерешлиКТочке=Выборка.ПерешлиКТочке;
		
	Иначе
		СтруктураСостояния.Состояние=Неопределено;
		СтруктураСостояния.НомерПрохода=1;
		СтруктураСостояния.ПерешлиКТочке=Неопределено;
		
	КонецЕсли;
	
	Возврат СтруктураСостояния;
	
КонецФункции

// Функция формирует и возвращает полный текст процедуры обработки
// Параметры:
//		ИсходныйТекстФункции - текст программной функции
// Возвращаемое значение: Строка
Функция СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции) Экспорт
	
    ТекстФункции=КП_ОбщееСервер.ОбработатьВозвратыВТекстеФункции(ИсходныйТекстФункции);
    Возврат ТекстФункции;
	
КонецФункции

// Функция формирует и возвращает полный текст функции условия
// Параметры:
//		ИсходныйТекстФункции -  текст программной функции
// Возвращаемое значение: Строка
Функция СформироватьТекстФункцииУсловия(ИсходныйТекстФункции)
	
	ТекстФункции=СтрЗаменить(ИсходныйТекстФункции, "Возврат ", "РезультатВыполнения=");
	ТекстФункции=СтрЗаменить(ТекстФункции, "возврат ", "РезультатВыполнения=");
	
	Возврат ТекстФункции;
	
КонецФункции

// Функция обрабатывает точку обработки 
// Параметры:
//		ТочкаКБП - маршрутная точка 
// Возвращаемое значение: Истина или Ложь
Функция ОбработатьТочкуОбработки(ТочкаКБП)
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	
	Если ТочкаКБП.ТипОбработки=2 Тогда
		//обработка функции
		Возврат ОбработатьТочкуОбработкиПрограммнаяФункция(ТочкаКБП);
				
	ИначеЕсли ТочкаКБП.ТипОбработки=0 Тогда
		//обработка реквизитов
		ТаблицаРеквизитов=ПолучитьТаблицуРеквизитовПроцесса(БизнесПроцесс, , Истина);		
		Если ТочкаКБП.ОбработкаВидЗаполненияРеквизитов=1 Тогда
			СписокСсылокПроцесса=КП_Процессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Ложь);
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из ТочкаКБП.ОбработкаУстановкаРеквизитов Цикл
			РеквизитПроцесса=СтрокаТЧ.РеквизитПроцесса;
			//найдем текущий порядок реквизита
			СтрокаРеквизита=ТаблицаРеквизитов.Найти(РеквизитПроцесса, "РеквизитПроцесса");
			Если СтрокаРеквизита=Неопределено Тогда
				ПорядокРеквизита=0;
				ЗаписатьВЖурналПроцесса(НСтр("ru='Не найден существующий порядок для реквизита ""'; en='Variable order not correct for ""';")+СокрЛП(РеквизитПроцесса)+НСтр("ru=' в точке ""'; en=' at the process point ""';")+СокрЛП(ТочкаКБП)+"""", БизнесПроцесс, ТочкаКБП,,3);
				
			Иначе
				ПорядокРеквизита=СтрокаРеквизита.Порядок;	
			КонецЕсли;
			
			Если ТочкаКБП.ОбработкаВидЗаполненияРеквизитов=0 Тогда
				ЗначениеРеквизита=СтрокаТЧ.ЗначениеРеквизита;
			Иначе
				//получим значение из присоединенного объекта
				Если СписокСсылокПроцесса.Количество()<СтрокаТЧ.НомерПрилагаемогоОбъекта Тогда
					ЗаписатьВЖурналПроцесса("Недостаточное количество присоединенных объектов к процессу. Установка реквизита """+СокрЛП(РеквизитПроцесса)+""" не выполнена в точке """+СокрЛП(ТочкаКБП)+"""", БизнесПроцесс, ТочкаКБП,,3);
					//ЗначениеРеквизита=Неопределено;
					Возврат Ложь;
				КонецЕсли;
				ПрисоединенныйОбъектПроцесса=СписокСсылокПроцесса[СтрокаТЧ.НомерПрилагаемогоОбъекта-1].Значение;
				Если ПустаяСтрока(СтрокаТЧ.ДополнениеОбъекта) Тогда
					ЗначениеРеквизита=ПрисоединенныйОбъектПроцесса;
				Иначе
					//указан дополнительный реквизит
					ЗначениеРеквизита=КП_ОбщееСервер.ПолучитьДополнениеОбъекта(ПрисоединенныйОбъектПроцесса, СтрокаТЧ.ДополнениеОбъекта);
				КонецЕсли;
			КонецЕсли;
			УстановитьЗначениеРеквизита(БизнесПроцесс, РеквизитПроцесса, ЗначениеРеквизита,,,ПорядокРеквизита);
		
		КонецЦикла;
		
	ИначеЕсли ТочкаКБП.ТипОбработки=9 Тогда
		//установка реквизитов документов по реквизитам процесса
		СписокСсылокПроцесса=КП_Процессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Ложь);
		КоличествоСсылокОбъекта=СписокСсылокПроцесса.Количество();
		Если КоличествоСсылокОбъекта=0 Тогда
			ЗаписатьВЖурналПроцесса("В точке """+СокрЛП(ТочкаКБП)+""" нет ссылок на документы, запись реквизитов не выполнена", БизнесПроцесс, ТочкаКБП,,3);
			Возврат Ложь;
		КонецЕсли;

		МассивОбъектовДляЗаписи=Новый Массив;
		
		Для Каждого СтрокаТЧ Из ТочкаКБП.ОбработкаУстановкаРеквизитов Цикл
			
			Если СтрокаТЧ.НомерПрилагаемогоОбъекта>КоличествоСсылокОбъекта Тогда
				ЗаписатьВЖурналПроцесса("В точке """+СокрЛП(ТочкаКБП)+""" нет документа или справочника с номером "+СокрЛП(СтрокаТЧ.НомерПрилагаемогоОбъекта), БизнесПроцесс, ТочкаКБП,,3);
				Возврат Ложь;
			КонецЕсли;
			
			ИндексОбъекта=СтрокаТЧ.НомерПрилагаемогоОбъекта-1;			
			Попытка
				ПрисоединенныйОбъектПроцесса=СписокСсылокПроцесса[ИндексОбъекта].Значение;
			Исключение
				ЗаписатьВЖурналПроцесса("В точке """+СокрЛП(ТочкаКБП)+""" нет документа или справочника с индексом "+СокрЛП(ИндексОбъекта), БизнесПроцесс, ТочкаКБП,,3);
				Возврат Ложь;				
			КонецПопытки;

			РеквизитПроцесса=СтрокаТЧ.РеквизитПроцесса;
			ИмяРеквизитаДокумента=СтрокаТЧ.ДополнениеОбъекта;
			Если ПустаяСтрока(ИмяРеквизитаДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеРеквизитаПроцесса=ПолучитьЗначениеРеквизитаПроцесса(БизнесПроцесс, РеквизитПроцесса);
			
			//получим объект для изменения из списка
			Если (МассивОбъектовДляЗаписи.Количество()-1)<ИндексОбъекта Тогда
				//объекта еще нет в массиве
				ДокОбъект=ПрисоединенныйОбъектПроцесса.ПолучитьОбъект();
				МассивОбъектовДляЗаписи.Добавить(ДокОбъект);
			Иначе
				ДокОбъект=МассивОбъектовДляЗаписи[ИндексОбъекта];
			КонецЕсли;
			
			//изменим реквизит объекта
			Попытка
				ДокОбъект[ИмяРеквизитаДокумента]=ЗначениеРеквизитаПроцесса;
			Исключение
				ЗаписатьВЖурналПроцесса("Ошибка установки реквизита объекта """+ИмяРеквизитаДокумента+""" в точке """+СокрЛП(ТочкаКБП), БизнесПроцесс, ТочкаКБП,,3);
				Продолжить;
			КонецПопытки;
			
		КонецЦикла; //по списку установки реквизитов точки
		
		//запишем изменения в объектах если они были
		Для Каждого ЭлементМассива Из МассивОбъектовДляЗаписи Цикл
			Попытка
				ЭлементМассива.Записать();
			Исключение
				ЗаписатьВЖурналПроцесса("Ошибка записи объекта """+СокрЛП(ЭлементМассива)+""" в точке """+СокрЛП(ТочкаКБП), БизнесПроцесс, ТочкаКБП,,3);
			КонецПопытки;
		КонецЦикла;
		
	ИначеЕсли ТочкаКБП.ТипОбработки=3 Тогда
		//использование ресурсов (не используется)
		
	ИначеЕсли ТочкаКБП.ТипОбработки=7 Тогда
		//изменение показателей KPI (не используется)
		
	ИначеЕсли ТочкаКБП.ТипОбработки=4 Тогда
		//таймер
		
		Если ТочкаКБП.ОбработкаТипДаты=1 Тогда
			ДатаСрабатывания=ТочкаКБП.ОбработкаДата;
			
		ИначеЕсли ТочкаКБП.ОбработкаТипДаты=2 Тогда
			ДатаСрабатывания=КП_Процессы.ПолучитьЗначениеРеквизитаПроцесса(БизнесПроцесс, ТочкаКБП.ОбработкаРеквизитСДатой);
			
		ИначеЕсли ТочкаКБП.ОбработкаТипДаты=3 Тогда
			ТаймерСекунд=ТочкаКБП.ОбработкаДата-Дата("00010101");
			
			//получим данные о начале таймера из регистра КП_ОбработкаТочек
			ДатаНачалаРаботыТаймера=ПолучитьДатуНачалаРаботыТаймера(ТочкаКБП);
			Если НЕ ЗначениеЗаполнено(ДатаНачалаРаботыТаймера) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ДатаСрабатывания=ДатаНачалаРаботыТаймера+ТаймерСекунд;
			
		Иначе
			Возврат Ложь;
			
		КонецЕсли;
		
		ДатаСрабатыванияНаступила=ТекущаяДата()>=ДатаСрабатывания;
		
		Если ДатаСрабатыванияНаступила Тогда 
			ЗаписатьВЖурналПроцесса("В точке """+СокрЛП(ТочкаКБП)+""" наступила дата срабатывания таймера "+СокрЛП(ДатаСрабатывания), БизнесПроцесс, ТочкаКБП,,1);
		КонецЕсли;
		
		Возврат ДатаСрабатыванияНаступила;
		
	ИначеЕсли ТочкаКБП.ТипОбработки=5 Тогда
		//изменение точки
		
		ТочкаИзменения=ТочкаКБП.УсловиеТочкаКонтроля; //точка вида процесса
		
		Если ТочкаКБП.ОбработкаИзменитьТочкуДействия=2 Тогда
			//удаление рецензий контролеров
			РезультатОчистки=ОчиститьРецензииКонтролераВТочке(ТочкаИзменения);
			Если РезультатОчистки Тогда
				ТекстСообщения="В точке """+СокрЛП(ТочкаКБП)+""" очищены результаты точки """+СокрЛП(ТочкаИзменения)+"""";
				Пиктограмма=2; //предупреждение
			Иначе
				ТекстСообщения="В точке """+СокрЛП(ТочкаКБП)+""" не были очищены результаты точки """+СокрЛП(ТочкаИзменения)+"""!";
				Пиктограмма=3; //ошибка
			КонецЕсли;
			
			ЗаписатьВЖурналПроцесса(ТекстСообщения, БизнесПроцесс, ТочкаКБП,,Пиктограмма);
			
			Возврат РезультатОчистки;
						
		КонецЕсли;
		
		Если ТочкаКБП.ОбработкаИзменитьТочкуДействия=4 Тогда
			//коррекция прохода точки
			Результат=ИнициализироватьТочку(ТочкаИзменения, "Реинициализирована обработкой "+СокрЛП(ТочкаКБП));
			Если Результат Тогда
				ТекстСообщения="В точке """+СокрЛП(ТочкаКБП)+""" скорректирован номеры прохода """+СокрЛП(ТочкаИзменения)+"""";
				Пиктограмма=1; //предупреждение
			Иначе
				ТекстСообщения="В точке """+СокрЛП(ТочкаКБП)+""" не был скорректирован номер прохода """+СокрЛП(ТочкаИзменения)+"""!";
				Пиктограмма=3; //ошибка
			КонецЕсли;
			
			ЗаписатьВЖурналПроцесса(ТекстСообщения, БизнесПроцесс, ТочкаКБП,,Пиктограмма);
			
			Возврат Результат;
						
		КонецЕсли;
		
		//прочие изменения точки
   		ТочкаИзмененияОбъект=ТочкаИзменения.ПолучитьОбъект();
		
		ТочкаИзменена=Ложь;
		Если ТочкаКБП.ОбработкаИзменитьТочкуДействия=1 Тогда
			//восстановим точку в её исходное значение, как оно задано в экземпляре процесса
			//определим, откуда брать текст (из точки или из процесса)

			ИсходнаяТочкаВидаПроцесса=ТочкаИзменения.ТочкаОснование;
			
			ТекстИзТочкиДейстия=(ИсходнаяТочкаВидаПроцесса.ДействиеИсточникТекстаЗаданийЧисло=1);
			Если ТекстИзТочкиДейстия Тогда
				НовыйТекстТочки=ИсходнаяТочкаВидаПроцесса.ХранилищеТекстаТочки.Получить();
			Иначе
				ВладелецТочки=ТочкаИзменения.ВладелецТочки;
				НовыйТекстТочки=ВладелецТочки.ХранилищеТекстаПроцесса.Получить();
			КонецЕсли;
			
			//восстановим исполнителя точки
			ТочкаИзмененияОбъект.РеквизитСИсполнителем=ИсходнаяТочкаВидаПроцесса.РеквизитСИсполнителем;
			ТочкаИзмененияОбъект.ИсточникИсполнителей=ИсходнаяТочкаВидаПроцесса.ИсточникИсполнителей;
			
			//восстановим текст точки
			ТочкаИзмененияОбъект.ХранилищеТекстаТочки=Новый ХранилищеЗначения(НовыйТекстТочки);
			ТочкаИзмененияОбъект.ДействиеИсточникТекстаЗаданийЧисло=?(ТекстИзТочкиДейстия, 1, 0);
			
			ТочкаИзменена=Истина;
			
		ИначеЕсли ТочкаКБП.ОбработкаИзменитьТочкуДействия=0 Тогда
			//установка нового текста точки

			//установим новый текст точки из настройки обработки
			ТекстИзТочкиДейстия=Истина;
			НовыйТекстТочки=ТочкаКБП.ХранилищеТекстаТочки.Получить();
			ТочкаИзмененияОбъект.ХранилищеТекстаТочки=Новый ХранилищеЗначения(НовыйТекстТочки);
			ТочкаИзмененияОбъект.ДействиеИсточникТекстаЗаданийЧисло=?(ТекстИзТочкиДейстия, 1, 0);
			
			ТочкаИзменена=Истина;
			
		ИначеЕсли ТочкаКБП.ОбработкаИзменитьТочкуДействия=3 Тогда
			//установка нового исполнителя по переменной
		
			//восстановим исполнителя точки
			ТочкаИзмененияОбъект.ИсточникИсполнителей=4; //исполнитель в реквизите
			ТочкаИзмененияОбъект.РеквизитСИсполнителем=ТочкаКБП.РеквизитСИсполнителем;
			
			ТочкаИзменена=Истина;
		
		Иначе
			Возврат Ложь;
			
		КонецЕсли;
		
		Если ТочкаИзменена Тогда
			//требуется запись объекта
			Попытка
				ТочкаИзмененияОбъект.Записать();
				ТекстСообщения="В точке """+СокрЛП(ТочкаКБП)+""" была изменена точка """+СокрЛП(ТочкаИзменения)+"""!";
				ЗаписатьВЖурналПроцесса(ТекстСообщения, БизнесПроцесс, ТочкаКБП);
				
			Исключение
				ТекстОшибки="Внимание! В точке """+СокрЛП(ТочкаКБП)+""" произошла ошибка записи при изменении точки """+СокрЛП(ТочкаИзменения)+"""!";
				ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Ложь;
				
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ТочкаКБП.ТипОбработки=6 Тогда //отправка сообщения
		//	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция обрабатывает точку обработки с помощью программной функции 
// Параметры:
//		ТочкаКБП - маршрутная точка 
// Возвращаемое значение: Истина или Ложь
Функция ОбработатьТочкуОбработкиПрограммнаяФункция(ТочкаКБП)
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;

	ИсходныйТекстФункции=ТочкаКБП.ТекстФункции;
	ТекстФункции=СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции);
	
	Если ПустаяСтрока(ТекстФункции) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//подготовим аргументы программной функции
	СсылкаНаЗадачу=Неопределено; //не используется
	ИсполнительЗадачи=Неопределено; 
	ОбрабатыватьСтруктуруПараметровПроцесса=Истина; 
	ОбрабатыватьСтруктуруПараметровЗадачи=Ложь;
	ОбрабатыватьСтруктуруРеквизитовПроцесса=Истина;
	ОбрабатыватьСтруктуруОтчетаИсполнителя=Ложь;
	
	СтуктураРезультата=ПодготовитьИВыполнитьПрограммнуюФункцию(ТочкаКБП, ТекстФункции, ИсполнительЗадачи, БизнесПроцесс, СсылкаНаЗадачу, 
			ОбрабатыватьСтруктуруРеквизитовПроцесса,
			ОбрабатыватьСтруктуруПараметровПроцесса,
			ОбрабатыватьСтруктуруПараметровЗадачи,
			ОбрабатыватьСтруктуруОтчетаИсполнителя);
			
	Если СтуктураРезультата=Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки в точке ""';en='Run-time error handling at ""'")+СокрЛП(ТочкаКБП)+НСтр("ru='"".'; en='"".';")+ОписаниеОшибки());
		Возврат Ложь;
		
	КонецЕсли;

	Возврат СтуктураРезультата;
	
КонецФункции

// Функция выполняет завершение бизнес-процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Истина или Ложь
Функция ЗавершитьБизнесПроцесс(БизнесПроцесс)
	
	ЗадачаБП=ПолучитьЗадачуВыполненияБП(БизнесПроцесс);
	
	ТекДата=ТекущаяДата();
	Если ЗначениеЗаполнено(ЗадачаБП) Тогда
	
		ЗадачаОбъект=ЗадачаБП.ПолучитьОбъект();
		ЗадачаОбъект.ДатаВыполненияФакт=ТекДата;

		Попытка
			ЗадачаОбъект.ВыполнитьЗадачу();
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;	
	
	Если НЕ БизнесПроцесс.Завершен Тогда
		
		БизнесПроцессОбъект=БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Завершен=Истина;
		БизнесПроцессОбъект.ДатаЗавершения=ТекДата;
		
		Попытка
			БизнесПроцессОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;	
		
КонецФункции

// Функция получает и возвращает задачу выполнения бизнес-процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Ссылка на задачу или Неопределено
Функция ПолучитьЗадачуВыполненияБП(БизнесПроцесс) Экспорт
	
	//найдем задачу КБП
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_Задача.Ссылка
	                    |ИЗ
	                    |	Задача.КП_Задача КАК КП_Задача
	                    |ГДЕ
	                    |	КП_Задача.БизнесПроцесс = &БизнесПроцесс
	                    |	И КП_Задача.ТочкаМаршрута = &ТочкаМаршрута");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.КП_БизнесПроцесс.ТочкиМаршрута.ВыполнениеКорпоративногоПроцесса);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция устанавливает значение реквизита 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		РеквизитПроцесса - реквизит бизнес-процесса 
//		ЗначениеРеквизита - значение реквизита
//		ДатаРеквизита - дата реквизита
//		Примечание - текстовое примечание
//		Порядок - номер порядка
// Возвращаемое значение: Истина или Ложь
Функция УстановитьЗначениеРеквизита(БизнесПроцесс, РеквизитПроцесса, ЗначениеРеквизита, ДатаРеквизита=Неопределено, Примечание="", Порядок=0) Экспорт
	
	Если ДатаРеквизита=Неопределено Тогда
		ДатаРеквизита=ТекущаяДата();
		
	КонецЕсли;
	
	НаборРеквизитов=РегистрыСведений.КП_РеквизитыЭкземпляраПроцесса.СоздатьНаборЗаписей();
	НаборРеквизитов.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	НаборРеквизитов.Отбор.РеквизитПроцесса.Установить(РеквизитПроцесса);
	НаборРеквизитов.Отбор.Период.Установить(ДатаРеквизита);
	НаборРеквизитов.Прочитать();
	
	Если НаборРеквизитов.Количество()=0 Тогда
		ЗаписьРеквизита=НаборРеквизитов.Добавить();
		ЗаписьРеквизита.Период=ДатаРеквизита;
		ЗаписьРеквизита.БизнесПроцесс=БизнесПроцесс;
		ЗаписьРеквизита.РеквизитПроцесса=РеквизитПроцесса;
		
	Иначе
		ЗаписьРеквизита=НаборРеквизитов[0];
		
	КонецЕсли;
	
	ЗаписьРеквизита.ЗначениеРеквизита=ЗначениеРеквизита;
	ЗаписьРеквизита.Примечание=Примечание;
	ЗаписьРеквизита.Порядок=Порядок;
	
	Попытка
		НаборРеквизитов.Записать(Истина);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция сохраняет структуру реквизитов 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		СтруктураРеквизитов - структура реквизитов 
//		ДатаРеквизита - дата реквизита
//		Примечание - текстовое примечание
// Возвращаемое значение: Истина или Ложь
Функция СохранитьСтруктуруРеквизитов(БизнесПроцесс, СтруктураРеквизитов, ДатаРеквизита=Неопределено, Примечание="") Экспорт
	
	Если ДатаРеквизита=Неопределено Тогда
		ДатаРеквизита=ТекущаяДата();
		
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураРеквизитов Цикл
		
		ИмяРеквизита=ЭлементСтруктуры.Ключ;
		РеквизитПроцесса=НайтиРеквизитПроцессаПоИмени(БизнесПроцесс, ИмяРеквизита);
		Если РеквизитПроцесса=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найден реквизит ""';en='Variable not found: ""'")+ИмяРеквизита+НСтр("ru='"" бизнес-процесса ""';en='. Business process: '"";")+СокрЛП(БизнесПроцесс)+""".");
			Продолжить;
			
		КонецЕсли;
		
		ЗначениеРеквизита=ЭлементСтруктуры.Значение;
				
		НаборРеквизитов=РегистрыСведений.КП_РеквизитыЭкземпляраПроцесса.СоздатьНаборЗаписей();
		НаборРеквизитов.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		НаборРеквизитов.Отбор.РеквизитПроцесса.Установить(РеквизитПроцесса);
		НаборРеквизитов.Отбор.Период.Установить(ДатаРеквизита);
		
		НаборРеквизитов.Прочитать();
		
		Если НаборРеквизитов.Количество()=0 Тогда
			ЗаписьРеквизита=НаборРеквизитов.Добавить();
			ЗаписьРеквизита.Период=ДатаРеквизита;
			ЗаписьРеквизита.БизнесПроцесс=БизнесПроцесс;
			ЗаписьРеквизита.РеквизитПроцесса=РеквизитПроцесса;
			
		Иначе
			ЗаписьРеквизита=НаборРеквизитов[0];
			
		КонецЕсли;
		
		ЗаписьРеквизита.ЗначениеРеквизита=ЗначениеРеквизита;
		ЗаписьРеквизита.Примечание=Примечание;
		
		Попытка
			НаборРеквизитов.Записать(Истина);
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция сохраняет таблицу реквизитов (с учетом порядка)
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ТаблицаРеквизитов - таблица реквизитов 
//		ДатаРеквизита - дата реквизита
//		Примечание - текстовое примечание
// Возвращаемое значение: Истина или Ложь
Функция СохранитьТаблицуРеквизитов(БизнесПроцесс, ТаблицаРеквизитов, ДатаРеквизита=Неопределено, Примечание="") Экспорт
	
	Если ДатаРеквизита=Неопределено Тогда
		ДатаРеквизита=ТекущаяДата();
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ТаблицаРеквизитов Цикл
		
		ИмяРеквизита=СтрокаТЧ.ИмяРеквизитаПроцесса;
		РеквизитПроцесса=СтрокаТЧ.РеквизитПроцесса;
		
		ЗначениеРеквизита=СтрокаТЧ.ЗначениеРеквизита;
		ПорядокРеквизита=СтрокаТЧ.Порядок;
				
		НаборРеквизитов=РегистрыСведений.КП_РеквизитыЭкземпляраПроцесса.СоздатьНаборЗаписей();
		НаборРеквизитов.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		НаборРеквизитов.Отбор.РеквизитПроцесса.Установить(РеквизитПроцесса);
		НаборРеквизитов.Отбор.Период.Установить(ДатаРеквизита);
		
		НаборРеквизитов.Прочитать();
		
		Если НаборРеквизитов.Количество()=0 Тогда
			ЗаписьРеквизита=НаборРеквизитов.Добавить();
			ЗаписьРеквизита.Период=ДатаРеквизита;
			ЗаписьРеквизита.БизнесПроцесс=БизнесПроцесс;
			ЗаписьРеквизита.РеквизитПроцесса=РеквизитПроцесса;
			ЗаписьРеквизита.Порядок=ПорядокРеквизита;
			
		Иначе
			ЗаписьРеквизита=НаборРеквизитов[0];
			
		КонецЕсли;
		
		ЗаписьРеквизита.ЗначениеРеквизита=ЗначениеРеквизита;
		ЗаписьРеквизита.Порядок=ПорядокРеквизита;
		ЗаписьРеквизита.Примечание=Примечание;
		
		Попытка
			НаборРеквизитов.Записать(Истина);
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция удаляет реквизиты процеса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Истина или Ложь
Функция УдалитьРеквизитыПроцесса(БизнесПроцесс) Экспорт
	
	НаборРеквизитов=РегистрыСведений.КП_РеквизитыЭкземпляраПроцесса.СоздатьНаборЗаписей();
	
	НаборРеквизитов.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	Попытка
		НаборРеквизитов.Очистить();
		НаборРеквизитов.Записать();

	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция получает значение реквизита процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		РеквизитПроцесса - реквизит бизнес-процесса 
//		ДатаРеквизита - 
// Возвращаемое значение: Значение реквизита
Функция ПолучитьЗначениеРеквизитаПроцесса(БизнесПроцесс, РеквизитПроцесса, ДатаРеквизита=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДатаРеквизита=Неопределено Тогда
		ДатаРеквизита=ТекущаяДата();
		
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.ЗначениеРеквизита
	                    |ИЗ
	                    |	РегистрСведений.КП_РеквизитыЭкземпляраПроцесса.СрезПоследних(
	                    |			&ДатаРеквизита,
	                    |			БизнесПроцесс = &БизнесПроцесс
	                    |				И РеквизитПроцесса = &РеквизитПроцесса) КАК КП_РеквизитыЭкземпляраПроцессаСрезПоследних");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("РеквизитПроцесса", РеквизитПроцесса);
	Запрос.УстановитьПараметр("ДатаРеквизита", ДатаРеквизита);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеРеквизита;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция получает структуру реквизитов процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ДатаРеквизита -  дата реквизита
// Возвращаемое значение: Структура данных
Функция ПолучитьСтруктуруРеквизитовПроцесса(БизнесПроцесс, ДатаРеквизита=Неопределено) Экспорт
	
	Если ДатаРеквизита=Неопределено Тогда
		ДатаРеквизита=ТекущаяДата();
		
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.ЗначениеРеквизита,
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.РеквизитПроцесса
	                    |ИЗ
	                    |	РегистрСведений.КП_РеквизитыЭкземпляраПроцесса.СрезПоследних(
	                    |			&ДатаРеквизита,
	                    |			БизнесПроцесс = &БизнесПроцесс) КАК КП_РеквизитыЭкземпляраПроцессаСрезПоследних");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ДатаРеквизита", ДатаРеквизита);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СтруктураРеквизитов=Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.РеквизитПроцесса) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаПроцесса=Выборка.РеквизитПроцесса.ИмяРеквизитаДляФункций;
		
		ЗначениеРеквизита=Выборка.ЗначениеРеквизита;
		
		Если НЕ СтруктураРеквизитов.Свойство(ИмяРеквизитаПроцесса) Тогда
			СтруктураРеквизитов.Вставить(ИмяРеквизитаПроцесса, ЗначениеРеквизита);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

// Функция возвращает таблицу реквизитов процесса  
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ДатаРеквизита - дата реквизита
// Возвращаемое значение: Таблица значений
Функция ПолучитьТаблицуРеквизитовПроцесса(БизнесПроцесс, ДатаРеквизита=Неопределено, ПолучитьПорядокРеквизита=Ложь) Экспорт
	
	Если ДатаРеквизита=Неопределено Тогда
		ДатаРеквизита=ТекущаяДата();
		
	КонецЕсли;
	
	ТекстЗапроса="ВЫБРАТЬ
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.ЗначениеРеквизита КАК ЗначениеРеквизита,
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.РеквизитПроцесса КАК РеквизитПроцесса,
						|	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.РеквизитПроцесса.ИмяРеквизитаДляФункций КАК ИмяРеквизитаПроцесса
						|	ПолучитьПорядокРеквизита
	                    |ИЗ
	                    |	РегистрСведений.КП_РеквизитыЭкземпляраПроцесса.СрезПоследних(&ДатаРеквизита, БизнесПроцесс = &БизнесПроцесс) КАК КП_РеквизитыЭкземпляраПроцессаСрезПоследних";
						
	Если ПолучитьПорядокРеквизита Тогда
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "ПолучитьПорядокРеквизита", " ,КП_РеквизитыЭкземпляраПроцессаСрезПоследних.Порядок КАК Порядок");
	Иначе
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "ПолучитьПорядокРеквизита", "");
	КонецЕсли;
	
	Запрос=Новый Запрос(ТекстЗапроса);
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ДатаРеквизита", ДатаРеквизита);
	
	ТаблицаРеквизитов=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции
                             
// Функция ищет и возвращает реквизит процесса по имени 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ИмяРеквизита - имя реквизита
// Возвращаемое значение: Ссылка на реквизит или Неопределено
Функция НайтиРеквизитПроцессаПоИмени(БизнесПроцесс, ИмяРеквизита) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_РеквизитыЭкземпляраПроцесса.РеквизитПроцесса
	                    |ИЗ
	                    |	РегистрСведений.КП_РеквизитыЭкземпляраПроцесса КАК КП_РеквизитыЭкземпляраПроцесса
	                    |ГДЕ
	                    |	КП_РеквизитыЭкземпляраПроцесса.БизнесПроцесс = &БизнесПроцесс
	                    |	И КП_РеквизитыЭкземпляраПроцесса.РеквизитПроцесса.ИмяРеквизитаДляФункций = &ИмяРеквизитаДляФункций");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ИмяРеквизитаДляФункций", ИмяРеквизита);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РеквизитПроцесса;
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найден реквизит ""';en='Variable ""';")+ИмяРеквизита+НСтр("ru='"" процесса ""';en='"" of the process ""';")+СокрЛП(БизнесПроцесс)+НСтр("ru='"".'; en='"" not found.';"));
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция получает начальное значение реквизита 
// Параметры:
//		РеквизитВидаКБП - реквизит вида бизнес-процесса
// Возвращаемое значение: Начальное значение реквизита
Функция ПолучитьНачальноеЗначениеРеквизита(РеквизитВидаКБП) Экспорт
	
	НачальноеЗначение=РеквизитВидаКБП.ЗначениеПоУмолчанию;
	
	Если ЗначениеЗаполнено(НачальноеЗначение) Тогда
		Возврат НачальноеЗначение;
	КонецЕсли;
	
	ТипРеквизита=РеквизитВидаКБП.ТипРеквизита;
	
	Если ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеДокументы Тогда
		//установим ссылку на пустой документ нужного вида
		НаименованиеОбъекта=СтрЗаменить(ТипРеквизита.ПолноеНаименование, "Документ.", "");
		НачальноеЗначение=Документы[НаименованиеОбъекта].ПустаяСсылка();
		
	ИначеЕсли ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеСправочники Тогда
		//установим ссылку на пустой справочник нужного вида
		НаименованиеОбъекта=СтрЗаменить(ТипРеквизита.ПолноеНаименование, "Справочник.", "");
		НачальноеЗначение=Справочники[НаименованиеОбъекта].ПустаяСсылка();
		
	ИначеЕсли ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Числа Тогда
		НачальноеЗначение=0;
		
	ИначеЕсли ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Строки Тогда
		НачальноеЗначение="";
		
	ИначеЕсли ТипРеквизита=Справочники.КП_СписокМетаданных.Дата Тогда
		НачальноеЗначение=Дата("00010101");
		
	ИначеЕсли ТипРеквизита=Справочники.КП_СписокМетаданных.Булево Тогда
		НачальноеЗначение=Ложь;

	ИначеЕсли ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Свойства Тогда
		НачальноеЗначение=Справочники.ЗначенияСвойствОбъектов.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат НачальноеЗначение;
	
КонецФункции

// Функция определяет завершена ли схема бизнес-процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Истина или Ложь
Функция СхемаКБПЗавершена(БизнесПроцесс) Экспорт
	
	//получим список точек завершения в схеме (их может быть больше одной)
	
	ЗапросПоТочкамСхемы=Новый Запрос("ВЫБРАТЬ
	                                 |	КП_БизнесПроцессСетьМаршрутныхТочек.Ссылка,
	                                 |	КП_БизнесПроцессСетьМаршрутныхТочек.ТочкаВход
	                                 |ИЗ
	                                 |	БизнесПроцесс.КП_БизнесПроцесс.СетьМаршрутныхТочек КАК КП_БизнесПроцессСетьМаршрутныхТочек
	                                 |ГДЕ
	                                 |	КП_БизнесПроцессСетьМаршрутныхТочек.Ссылка = &БизнесПроцесс
	                                 |	И КП_БизнесПроцессСетьМаршрутныхТочек.ТочкаВход.ТипТочки = &ТипТочкиВход");
						
	ЗапросПоТочкамСхемы.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	ЗапросПоТочкамСхемы.УстановитьПараметр("ТипТочкиВход", Перечисления.КП_ВидыТочекБизнесПроцесса.Завершение);
	
	СписокТочекЗавершения=Новый СписокЗначений;
	Выборка=ЗапросПоТочкамСхемы.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ТочкаЗавершения=Выборка.ТочкаВход;
		Если СписокТочекЗавершения.НайтиПоЗначению(ТочкаЗавершения)=Неопределено Тогда
			СписокТочекЗавершения.Добавить(ТочкаЗавершения);
		КонецЕсли;
		
	КонецЦикла;
	
	//получим состояния точек завершения
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ОбработкаТочекСрезПоследних.Состояние
	                    |ИЗ
	                    |	РегистрСведений.КП_ОбработкаТочек.СрезПоследних КАК КП_ОбработкаТочекСрезПоследних
	                    |ГДЕ
	                    |	КП_ОбработкаТочекСрезПоследних.БизнесПроцесс = &БизнесПроцесс
	                    |	И КП_ОбработкаТочекСрезПоследних.ТочкаКБП В (&СписокТочекЗавершения)
	                    |");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("СписокТочекЗавершения", СписокТочекЗавершения);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		СостояниеТочки=Выборка.Состояние;
		
		Если СостояниеТочки<>Перечисления.КП_СостояниеТочек.Выполнена Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Выборка.Количество()=0 Тогда
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Процедура инициализирует обработку маршрутных точек
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
Процедура ИнициализироватьОбработкуТочек(БизнесПроцесс)
	//очистим регистр обработки точек
	НаборЗаписей=РегистрыСведений.КП_ОбработкаТочек.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	Попытка
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();

	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

// Функция выполняет обработку точки условия
// Параметры:
//		ТочкаКБП - маршрутная точка 
// Возвращаемое значение: Истина или Ложь
Функция ОбработатьТочкуУсловия(ТочкаКБП)
	
	РезультатУсловия=Истина;
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	
	Если ТочкаКБП.ТипУсловиеФункция=2 Тогда	
		//программная функция, выполним выражение для вычисления результата
		
		ТекстФункции=СформироватьТекстФункцииУсловия(ТочкаКБП.ТекстФункции);
	
		Если ПустаяСтрока(ТекстФункции) Тогда
			Возврат Истина;
		КонецЕсли;
	
		//подготовим аргументы программной функции
		СсылкаНаЗадачу=Неопределено; //не используется
		ОбрабатыватьСтруктуруПараметровПроцесса=Истина; 
		ОбрабатыватьСтруктуруПараметровЗадачи=Ложь;
		ОбрабатыватьСтруктуруРеквизитовПроцесса=Истина;
		ОбрабатыватьСтруктуруОтчетаИсполнителя=Ложь;
		ИсполнительЗадачи=Неопределено; 

		СтруктураРезультата=ПодготовитьИВыполнитьПрограммнуюФункцию(ТочкаКБП, ТекстФункции, ИсполнительЗадачи, БизнесПроцесс, СсылкаНаЗадачу, 
				ОбрабатыватьСтруктуруРеквизитовПроцесса,
				ОбрабатыватьСтруктуруПараметровПроцесса,
				ОбрабатыватьСтруктуруПараметровЗадачи,
				ОбрабатыватьСтруктуруОтчетаИсполнителя);
				
		Если СтруктураРезультата=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки в точке ""';en='Run-time error handling at ""'")+СокрЛП(ТочкаКБП)+НСтр("ru='"".'; en='"".';"));
			Возврат Ложь;
			
		Иначе
			
			РезультатаУсловия=СтруктураРезультата.РезультатВыполнения;
			Возврат РезультатаУсловия;	
			
		КонецЕсли;
		
				
	ИначеЕсли ТочкаКБП.ТипУсловиеФункция=0 ИЛИ ТочкаКБП.ТипУсловиеФункция=1 Тогда	 
		//простое условие
		ТекущиеЗначенияРеквизитов=ПолучитьСтруктуруРеквизитовПроцесса(БизнесПроцесс);
		ОбъединениеСтрокПоИ=(ТочкаКБП.ТипУсловиеФункция=0);	
		
		//обработка строковых условий 
		Для Каждого СтрокаВыбора Из ТочкаКБП.УсловияВыбора Цикл
			РеквизитСравнения=СтрокаВыбора.РеквизитПроцесса;
			ЗначениеСравнения=СтрокаВыбора.ЗначениеРеквизита;
			
			ТекущееЗначениеРеквизита=Неопределено;
			ТекущиеЗначенияРеквизитов.Свойство(РеквизитСравнения.ИмяРеквизитаДляФункций, ТекущееЗначениеРеквизита);
			
			Если НЕ ПустаяСтрока(СтрокаВыбора.ДополнениеРеквизита) Тогда
				ТекущееЗначениеРеквизита=КП_ОбщееСервер.ПолучитьДополнениеОбъекта(ТекущееЗначениеРеквизита, СтрокаВыбора.ДополнениеРеквизита); 
			КонецЕсли;
			
			УсловиеСтрокиВыполнено=ВычислитьРезультатСравнения(ТекущееЗначениеРеквизита, ЗначениеСравнения, СтрокаВыбора.ВидСравнения);
			
			//строки объединяются по И условие в этой строке не выполнено, 
			//соответственно не выполнено и условие по всем строкам
			Если НЕ УсловиеСтрокиВыполнено И ОбъединениеСтрокПоИ Тогда
				РезультатУсловия=Ложь;
				Прервать;
			КонецЕсли;
			
			//строки объединяются по ИЛИ и в одной из строк условие выполнено,
			//соответственно выполнено и всё условие всех строк
			Если НЕ ОбъединениеСтрокПоИ И УсловиеСтрокиВыполнено Тогда
				РезультатУсловия=Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		//если не вышли по прерыванию цикла когда было объединение по И и условие не было выполнено
		//или когда было объединение по ИЛИ и условие было выполнено, то запомним результат
		РезультатУсловия=УсловиеСтрокиВыполнено;
		
	ИначеЕсли ТочкаКБП.ТипУсловиеФункция=3 Тогда
		//условие контроля результата
		
		//найдем точку, рецензии на которую нас интересует
			
		КонтролируемаяТочка=ТочкаКБП.УсловиеТочкаКонтроля.ДействиеКонтрольТочки;
				
		//проверим итоговый результат (запись в регистре с пустым полем Исполнитель)
		КонтрольПройден=ПолучитьСтруктуруРезультатаКонтроляТочки(КонтролируемаяТочка).РезультатОдобрен;
		
		РезультатУсловия=КонтрольПройден;
		
	ИначеЕсли ТочкаКБП.ТипУсловиеФункция=4 Тогда
		//проверка доступности ресурсов
		
	ИначеЕсли ТочкаКБП.ТипУсловиеФункция=5 Тогда
		//автоматическая проверка результатов исполнителей
		ПроверяемаяТочка=ТочкаКБП.УсловиеТочкаКонтроля;
		
		СтруктураСостоянияТочки=ПолучитьСтруктуруСостоянияТочки(ПроверяемаяТочка);		
		НомерПрохода=СтруктураСостоянияТочки.НомерПрохода;
		
		//если точка в работе, значит еще не выполнена и результаты исполнителей не готовы
		Если СтруктураСостоянияТочки=Неопределено
			ИЛИ СтруктураСостоянияТочки=Перечисления.КП_СостояниеТочек.Выполняется 
			ИЛИ СтруктураСостоянияТочки=Перечисления.КП_СостояниеТочек.Реинициализирована
		Тогда
			Возврат Ложь;
			
		КонецЕсли;
			
		//считаем, что точка выполнена, будем проверять результаты из регистра сведений
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	КП_РезультатыИсполнителейЗадачСрезПоследних.ПараметрРезультата КАК ПараметрРезультата,
		                    |	КП_РезультатыИсполнителейЗадачСрезПоследних.ЗначениеПараметра КАК ЗначениеПараметра,
		                    |	КП_РезультатыИсполнителейЗадачСрезПоследних.Исполнитель КАК Исполнитель,
		                    |	КП_РезультатыИсполнителейЗадачСрезПоследних.НомерПрохода КАК НомерПрохода
		                    |ИЗ
		                    |	РегистрСведений.КП_РезультатыИсполнителейЗадач.СрезПоследних(&ДатаКон, ТочкаКБП = &ТочкаКБП) КАК КП_РезультатыИсполнителейЗадачСрезПоследних
		                    |
		                    |УПОРЯДОЧИТЬ ПО
		                    |	НомерПрохода УБЫВ,
		                    |	КП_РезультатыИсполнителейЗадачСрезПоследних.Период УБЫВ
		                    |ИТОГИ ПО
		                    |	НомерПрохода,
		                    |	ПараметрРезультата,
		                    |	Исполнитель");
							
		Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
		Запрос.УстановитьПараметр("ТочкаКБП", ПроверяемаяТочка);
		
		//ВыборкаПараметр=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаПроход=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		РезультатУсловия=Ложь;
		
		Если ВыборкаПроход.Следующий() Тогда
			ВыборкаПараметр=ВыборкаПроход.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			//выберем все параметры результатов
			Пока ВыборкаПараметр.Следующий() Цикл
				ПараметрРезультата=ВыборкаПараметр.ПараметрРезультата;
				
				//пройдем по исполнителям
				ВыборкаИсполнитель=ВыборкаПараметр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаИсполнитель.Следующий() Цикл
					ИсполнительТочки=ВыборкаИсполнитель.Исполнитель;
					ЗначениеПараметра=Неопределено;
					
					ВыборкаЗначениеПараметра=ВыборкаИсполнитель.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Если ВыборкаЗначениеПараметра.Следующий() Тогда
						ЗначениеПараметра=ВыборкаЗначениеПараметра.ЗначениеПараметра;
						
					КонецЕсли;
									
					//теперь у нас есть ПараметрРезультата и ЗначениеПараметра, сравним их с требуемыми в точке условия
					//найдем нужную строку в таблице результатов
					
					МассивСтрок=ТочкаКБП.УсловиеВыбораПоРезультатам.НайтиСтроки(Новый Структура("ВидРезультатаИсполнителя", ПараметрРезультата));
					Если МассивСтрок.Количество()=0 Тогда
						//такого вида результата в таблице проверки нет, пропускаем его
						Продолжить;
						
					КонецЕсли;
					
					СтрокаСравнения=МассивСтрок[0];
					Если НЕ СтрокаСравнения.Проверять Тогда
						Продолжить;
						
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ЗначениеПараметра) Тогда
						//параметр вообще не указан
						ПараметрСоответствует=Ложь;
						
					Иначе
						//сравним значение с трбуемым
						ПараметрСоответствует=ВычислитьРезультатСравнения(ЗначениеПараметра, СтрокаСравнения.ТребуемоеЗначение, СтрокаСравнения.ВидСравнения);
						
					КонецЕсли;
					
					Если НЕ ПараметрСоответствует И НЕ СтрокаСравнения.ДостаточноОдногоИсполнителя Тогда
						//как минимум у одного исполнителя параметр не соответствует и т.к. нам не достаточно
						//будет одного исполнителя с корректным результатом, то сразу вернем Ложь
						Возврат Ложь;
						
					ИначеЕсли ПараметрСоответствует И СтрокаСравнения.ДостаточноОдногоИсполнителя Тогда
						//для корректного результата достаточно одного правильного исполнителя
						Возврат Истина;
						
					КонецЕсли;
					
					РезультатУсловия=ПараметрСоответствует;
					
				КонецЦикла; //по исполнителям
				
			КонецЦикла; //по параметрам
			
		КонецЕсли; //группировка по номеру прохода
		
		Возврат РезультатУсловия; //сначала был Ложь потом мог быть переопределен при анализе строк условия на Истина
			
	КонецЕсли; //по типам условия
		
	Возврат РезультатУсловия;
	
КонецФункции

// Функция выполняет обработку точки выбора варианта 
// Параметры:
//		ТочкаКБП - маршрутная точка 
// Возвращаемое значение: Число с номеров выбранного варианта
Функция ОбработатьТочкуВыбораВарианта(ТочкаКБП)
	
	ВыбранныйВариант=0;
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	
	Если ТочкаКБП.ТипУсловиеФункция=2 Тогда	
		//программная функция, выполним выражение для вычисления результата
		
		ТекстФункции=СформироватьТекстФункцииВыбораВарианта(ТочкаКБП.ТекстФункции);
	
		Если ПустаяСтрока(ТекстФункции) Тогда
			Возврат 0;
		КонецЕсли;
	
		//подготовим аргументы программной функции
		СсылкаНаЗадачу=Неопределено; //не используется
		ОбрабатыватьСтруктуруПараметровПроцесса=Истина; 
		ОбрабатыватьСтруктуруПараметровЗадачи=Ложь;
		ОбрабатыватьСтруктуруРеквизитовПроцесса=Истина;
		ОбрабатыватьСтруктуруОтчетаИсполнителя=Ложь;
		ИсполнительЗадачи=Неопределено; 
		
		СтруктураРезультата=ПодготовитьИВыполнитьПрограммнуюФункцию(ТочкаКБП, ТекстФункции, ИсполнительЗадачи, БизнесПроцесс, СсылкаНаЗадачу, 
				ОбрабатыватьСтруктуруРеквизитовПроцесса,
				ОбрабатыватьСтруктуруПараметровПроцесса,
				ОбрабатыватьСтруктуруПараметровЗадачи,
				ОбрабатыватьСтруктуруОтчетаИсполнителя);
				
		Если СтруктураРезультата=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки в точке ""';en='Run-time error handling at ""'")+СокрЛП(ТочкаКБП)+НСтр("ru='"".'; en='"".';"));
			Возврат Ложь;
			
		Иначе
			
			ВыбранныйВариант=СтруктураРезультата.РезультатВыполнения;
			
			Возврат ВыбранныйВариант;	
			
		КонецЕсли;
				
	Иначе 
		//обработка строковых условий 
				
		ТекущиеЗначенияРеквизитов=ПолучитьСтруктуруРеквизитовПроцесса(БизнесПроцесс);
		
		НомерУсловия=1;
		Для Каждого СтрокаВыбора Из ТочкаКБП.ВыборВарианта Цикл
			РеквизитСравнения=СтрокаВыбора.РеквизитПроцесса;
			ЗначениеСравнения=СтрокаВыбора.ЗначениеРеквизита;
			
			ТекущееЗначениеРеквизита=Неопределено;
			ТекущиеЗначенияРеквизитов.Свойство(РеквизитСравнения.ИмяРеквизитаДляФункций, ТекущееЗначениеРеквизита);
			
			УсловиеСтрокиВыполнено=ВычислитьРезультатСравнения(ТекущееЗначениеРеквизита, ЗначениеСравнения, СтрокаВыбора.ВидСравнения);
			Если УсловиеСтрокиВыполнено Тогда
				ВыбранныйВариант=НомерУсловия;
				Прервать;
				
			КонецЕсли;
			
			НомерУсловия=НомерУсловия+1;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Возврат ВыбранныйВариант;
	
КонецФункции

// Функция вычисляет результат сравнения
// Параметры:
//		ТекущееЗначение - текущее значение
//		ЗначениеСравнения - значение сравнения
//		ВидСравненияЗначений - вид сравнения значений
// Возвращаемое значение: Истина или Ложь
Функция ВычислитьРезультатСравнения(ТекущееЗначение, ЗначениеСравнения, ВидСравненияЗначений)
	
	ТипТекущееЗначение=ТипЗнч(ТекущееЗначение);
	ТипЗначениеСравнения=ТипЗнч(ЗначениеСравнения);
	
	Если ВидСравненияЗначений=Перечисления.КП_ВидыСравнения.Больше Тогда
		//сравниваем только числовые значения
		Если ТипТекущееЗначение<>Тип("Число") ИЛИ ТипЗначениеСравнения<>Тип("Число") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! В условии сравнения ""больше"" можно использовать только числовые значения.';en='In the comparison ""more"" can be used only digital.'"));
			Возврат Ложь;
		Иначе
			Возврат ТекущееЗначение>ЗначениеСравнения;
		КонецЕсли;
		
	ИначеЕсли ВидСравненияЗначений=Перечисления.КП_ВидыСравнения.Меньше Тогда
		//сравниваем только числовые значения
		Если ТипТекущееЗначение<>Тип("Число") ИЛИ ТипЗначениеСравнения<>Тип("Число") Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! В условии сравнения ""меньше"" можно использовать только числовые значения.';en='In the comparison ""less"" can be used only digital.'"));
			Возврат Ложь;
		Иначе
			Возврат ТекущееЗначение<ЗначениеСравнения;
		КонецЕсли;
		
	ИначеЕсли ВидСравненияЗначений=Перечисления.КП_ВидыСравнения.БольшеИлиРавно Тогда
		//сравниваем только числовые значения
		Если ТипТекущееЗначение<>Тип("Число") ИЛИ ТипЗначениеСравнения<>Тип("Число") Тогда
			ТекстОшибки="Внимание! В условии сравнения ""больше или равно"" можно использовать только числовые значения!";
			ЗаписьЖурналаРегистрации("Ошибка вычисления сравнения """+СокрЛП(ВидСравненияЗначений)+"""!", УровеньЖурналаРегистрации.Ошибка, ТекущееЗначение, ЗначениеСравнения, ТекстОшибки);
			ЗаписатьВЖурналПроцесса("Ошибка вычисления сравнения """+СокрЛП(ВидСравненияЗначений)+"""! "+ТекстОшибки, ТекущееЗначение, ЗначениеСравнения,,3);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Ложь;
		Иначе
			Возврат ТекущееЗначение>=ЗначениеСравнения;
		КонецЕсли;
		
	ИначеЕсли ВидСравненияЗначений=Перечисления.КП_ВидыСравнения.МеньшеИлиРавно Тогда
		//сравниваем только числовые значения
		Если ТипТекущееЗначение<>Тип("Число") ИЛИ ТипЗначениеСравнения<>Тип("Число") Тогда
			ТекстОшибки="Внимание! В условии сравнения ""больше или равно"" можно использовать только числовые значения!";
			ЗаписьЖурналаРегистрации("Ошибка вычисления сравнения """+СокрЛП(ВидСравненияЗначений)+"""!", УровеньЖурналаРегистрации.Ошибка, ТекущееЗначение, ЗначениеСравнения, ТекстОшибки);
			ЗаписатьВЖурналПроцесса("Ошибка вычисления сравнения """+СокрЛП(ВидСравненияЗначений)+"""! "+ТекстОшибки, ТекущееЗначение, ЗначениеСравнения,,3);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Ложь;
		Иначе
			Возврат ТекущееЗначение<=ЗначениеСравнения;
		КонецЕсли;
		
	ИначеЕсли ВидСравненияЗначений=Перечисления.КП_ВидыСравнения.Равно Тогда
		Возврат ТекущееЗначение=ЗначениеСравнения;
		
	ИначеЕсли ВидСравненияЗначений=Перечисления.КП_ВидыСравнения.НеРавно Тогда
		Возврат ТекущееЗначение<>ЗначениеСравнения;
		
	ИначеЕсли ВидСравненияЗначений=Перечисления.КП_ВидыСравнения.Заполнено Тогда
		Возврат ЗначениеЗаполнено(ТекущееЗначение);
		
	ИначеЕсли ВидСравненияЗначений=Перечисления.КП_ВидыСравнения.НеЗаполнено Тогда
		Возврат НЕ ЗначениеЗаполнено(ТекущееЗначение);

	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Процедура выполняет запись в журнал процесса
// Параметры:
//		ТекстЗаписи - текст записи 
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ТочкаКБП - маршрутная точка
//		ДатаЗаписи - дата записи
//		ПиктограммаВидСобытия - пиктограммы для события (0 - нет пиктограммы, 1 - информация, 2- предупреждение, 3 - ошибка)
Процедура ЗаписатьВЖурналПроцесса(ТекстЗаписи, БизнесПроцесс, ТочкаКБП=Неопределено, ДатаЗаписи=Неопределено, ПиктограммаВидСобытия=0) Экспорт
	
	//возможные пиктограммы в аргументе ПиктограммаВидСобытия: 0 - нет пиктограммы, 1 - информация, 2- предупреждение, 3 - ошибка
	                            
	Если ПустаяСтрока(ТекстЗаписи) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Запись в журнал не произведена: Пустой текст.';en='Logging of failure: Empty text.'"));
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(БизнесПроцесс) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Запись в журнал не произведена: Не указана точка процесса.';en='Logging of failure: Not specified point in the process.'"));
		Возврат;
	КонецЕсли;
	
	Если ДатаЗаписи=Неопределено Тогда
		ДатаЗаписи=ТекущаяДата();
		
	КонецЕсли;
	
	КоличествоЗаписейВЖурнале=ПолучитьМаксимальнуюЗаписьВЖурналеПроцесса();
	
	ГенераторUID=КП_ОбщееСерверПС.ПолучитьГСЧ(); //Новый ГенераторСлучайныхЧисел(КоличествоЗаписейВЖурнале*Секунда(ТекущаяДата()));
	
	КоличествоПроходов=0;
    Пока Истина Цикл //обычно уникальное число находится в первом же проходе, если есть проблема с ГСЧ, тогда выйдем из функции
		КоличествоПроходов=КоличествоПроходов+1;
		Если КоличествоПроходов>10 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Проблема с поиском уникального идентификатора! Возможно генератор случайных чисел не работает.';en='The problem with finding a unique identifier! Perhaps the random number generator is not working.'"));
			Возврат;
			
		КонецЕсли;
		
		УникальныйИдентификаторЗаписи=ГенераторUID.СлучайноеЧисло(0, 4000000000);
		
		НаборЖурнала=РегистрыСведений.КП_ЖурналВыполненияПроцесса.СоздатьНаборЗаписей();
		НаборЖурнала.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		НаборЖурнала.Отбор.ТочкаКБП.Установить(ТочкаКБП);
		НаборЖурнала.Отбор.УникальныйИдентификаторЗаписи.Установить(УникальныйИдентификаторЗаписи);
		
		НаборЖурнала.Прочитать();
		
		Если НаборЖурнала.Количество()=0 Тогда
			//нашли незанятый уникальный идентификатор для журнала
			Прервать;
		КонецЕсли;
		
				
	КонецЦикла;	
	
	ЗаписьЖурнала=РегистрыСведений.КП_ЖурналВыполненияПроцесса.СоздатьМенеджерЗаписи();
	ЗаписьЖурнала.ДатаЗаписи=ТекущаяДата();
	ЗаписьЖурнала.БизнесПроцесс=БизнесПроцесс;
	ЗаписьЖурнала.ТочкаКБП=ТочкаКБП;
	ЗаписьЖурнала.УникальныйИдентификаторЗаписи=УникальныйИдентификаторЗаписи;
	ЗаписьЖурнала.ТекстЗаписи=ТекстЗаписи;
	ЗаписьЖурнала.НомерЗаписи=КоличествоЗаписейВЖурнале+1;
	ЗаписьЖурнала.ВидСобытияЧисло=ПиктограммаВидСобытия;
	
	Попытка
		ЗаписьЖурнала.Записать(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура очищает журнал выполнения процесса
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
Процедура ОчиститьЖурналВыполнения(БизнесПроцесс) Экспорт

	Если НЕ ЗначениеЗаполнено(БизнесПроцесс) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для очистки журнала укажите бизнес-процесс.';en='To clear the log, specify a business process.'"));
		Возврат;
	КонецЕсли;
	
	НаборЖурнала=РегистрыСведений.КП_ЖурналВыполненияПроцесса.СоздатьНаборЗаписей();
	НаборЖурнала.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	НаборЖурнала.Прочитать();
	
	Попытка
		НаборЖурнала.Очистить();
		НаборЖурнала.Записать(Истина);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

// Функция формирует и возвращает табличный документ журнала выполнения процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Табличный документ
Функция ПолучитьТабличныйДокументЖурналаВыполнения(БизнесПроцесс) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ЖурналВыполненияПроцесса.ДатаЗаписи,
	                    |	КП_ЖурналВыполненияПроцесса.ТочкаКБП,
	                    |	КП_ЖурналВыполненияПроцесса.ТекстЗаписи,
	                    |	КП_ЖурналВыполненияПроцесса.НомерЗаписи
	                    |ИЗ
	                    |	РегистрСведений.КП_ЖурналВыполненияПроцесса КАК КП_ЖурналВыполненияПроцесса
	                    |ГДЕ
	                    |	КП_ЖурналВыполненияПроцесса.БизнесПроцесс = &БизнесПроцесс
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	НомерЗаписи");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Макет=БизнесПроцессы.КП_БизнесПроцесс.ПолучитьМакет("ЖурналВыполнения");
	ЖурналВыполнения=Новый ТабличныйДокумент;
	
	ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
	ОбластьПодвал=Макет.ПолучитьОбласть("Подвал");
	
	ОбластьШапка.Параметры.НомерПроцесса=БизнесПроцесс.Номер;
	ОбластьШапка.Параметры.ДатаПроцесса=Формат(БизнесПроцесс.Дата, "ДФ='dd.MM.yy HH:mm'");
	
	ЖурналВыполнения.Вывести(ОбластьШапка);
	
	Пока Выборка.Следующий() Цикл
		ОбластьСтрока.Параметры.ДатаЗаписи=Формат(Выборка.ДатаЗаписи, "ДФ='dd.MM.yy HH:mm'");
		ОбластьСтрока.Параметры.ТекстЗаписи=Выборка.ТекстЗаписи;
		ОбластьСтрока.Параметры.ТочкаКБП=Выборка.ТочкаКБП;
		
		ЖурналВыполнения.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	ОбластьПодвал.Параметры.ДатаФормирования=ТекущаяДата();
	ЖурналВыполнения.Вывести(ОбластьПодвал);
	
	Возврат ЖурналВыполнения;
	
КонецФункции

// Функция возвращает количество выполненных задач 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Число
Функция КоличествоВыполненныхЗадач(БизнесПроцесс) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КОЛИЧЕСТВО(КП_Задача.Ссылка) КАК КоличествоЗадач
	                    |ИЗ
	                    |	Задача.КП_Задача КАК КП_Задача
	                    |ГДЕ
	                    |	КП_Задача.Выполнена = Истина
	                    |	И КП_Задача.БизнесПроцесс = &БизнесПроцесс
						|	И КП_Задача.ТочкаМаршрута <> &СлужебнаяТочкаМаршрута");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("СлужебнаяТочкаМаршрута", БизнесПроцессы.КП_БизнесПроцесс.ТочкиМаршрута.ВыполнениеКорпоративногоПроцесса);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		КоличествоЗадач=Выборка.КоличествоЗадач;
		
	Иначе
		КоличествоЗадач=0;
		
	КонецЕсли;
	
	Возврат КоличествоЗадач;
	
КонецФункции

// Функция возвращает количество выданных задач 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Число
Функция КоличествоВыданныхЗадач(БизнесПроцесс) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КОЛИЧЕСТВО(КП_Задача.Ссылка) КАК КоличествоЗадач
	                    |ИЗ
	                    |	Задача.КП_Задача КАК КП_Задача
	                    |ГДЕ
	                    |	КП_Задача.БизнесПроцесс = &БизнесПроцесс
	                    |	И КП_Задача.ТочкаМаршрута <> &СлужебнаяТочкаМаршрута");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("СлужебнаяТочкаМаршрута", БизнесПроцессы.КП_БизнесПроцесс.ТочкиМаршрута.ВыполнениеКорпоративногоПроцесса);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		КоличествоЗадач=Выборка.КоличествоЗадач;
		
	Иначе
		КоличествоЗадач=0;
		
	КонецЕсли;
	
	Возврат КоличествоЗадач;

КонецФункции

// Функция проверяет существование объекта по его номеру и дате
// Параметры:
//		НомерОбъекта - номер объекта
//		ДатаОбъекта - дата объекта
// Возвращаемое значение: Ссылка на бизнес-процесс или Неопределено
Функция ПроцессСуществует(НомерОбъекта="", ДатаОбъекта="") Экспорт
	Запрос=Новый Запрос;
	ТекстЗапроса="ВЫБРАТЬ
					|	КП_БизнесПроцесс.Ссылка
	                |ИЗ
	                |	БизнесПроцесс.КП_БизнесПроцесс КАК КП_БизнесПроцесс
	                |ГДЕ Истина
	                |	УсловиеПоНомеру
	                |	УсловиеПоДате";
						
					
	Если НЕ ПустаяСтрока(НомерОбъекта) Тогда
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "УсловиеПоНомеру", " И КП_БизнесПроцесс.Номер = &Номер");
		Запрос.УстановитьПараметр("Номер", НомерОбъекта);
		
	Иначе
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "УсловиеПоНомеру", "");
						
	КонецЕсли;					
	
	Если НЕ ПустаяСтрока(НомерОбъекта) Тогда
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "УсловиеПоДате", " И КП_БизнесПроцесс.Дата = &Дата");
		Запрос.УстановитьПараметр("Дата", ДатаОбъекта);
		
	Иначе
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "УсловиеПоДате", "");
	КонецЕсли;		
	
	Запрос.Текст=ТекстЗапроса;
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция формирует и возвращает список точек 
// Параметры:
//		ВладелецТочек - владелец точек (вид или экземпляр)
//		ВключаяПомеченныеНаУдаление - 
// Возвращаемое значение: Список значений
Функция ПолучитьСписокТочекВладельца(ВладелецТочек, ВключаяПомеченныеНаУдаление=Ложь) Экспорт
	
	ТекстЗапроса=
		"ВЫБРАТЬ
		|	КП_ТочкиПроцессов.Ссылка
		|ИЗ
		|	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
		|ГДЕ
		|	КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки
		|";
		

	Запрос=Новый Запрос;
	
	Если НЕ ВключаяПомеченныеНаУдаление Тогда
		ТекстЗапроса=ТекстЗапроса+" И КП_ТочкиПроцессов.ПометкаУдаления = &ПометкаУдаления";
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочек);
	Запрос.Текст=ТекстЗапроса;
	
	СписокТочек=Новый СписокЗначений;
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		СписокТочек.Добавить(Выборка.Ссылка);	
		
	КонецЦикла;
	
	Возврат СписокТочек;
	
КонецФункции

// Функция формирует и возвращает список реквизитов вида 
// Параметры:
//		ВладелецРеквизитов - владелец реквизитов (вид или экземпляр)
//		ВключаяПомеченныеНаУдаление - флаг включения помеченных на удаление
// Возвращаемое значение: Список значений
Функция ПолучитьСписокРеквизитовВида(ВладелецРеквизитов, ВключаяПомеченныеНаУдаление=Ложь, ТолькоОбязательные=Ложь) Экспорт
	
	ТекстЗапроса=
		"ВЫБРАТЬ
		|	КП_ДополнительныеРеквизиты.Ссылка,
		|	КП_ДополнительныеРеквизиты.ИмяРеквизитаДляФункций
		|ИЗ
		|	Справочник.КП_ДополнительныеРеквизиты КАК КП_ДополнительныеРеквизиты
		|ГДЕ
		|	КП_ДополнительныеРеквизиты.Владелец = &Владелец";
		

	Запрос=Новый Запрос;
	
	Если НЕ ВключаяПомеченныеНаУдаление Тогда
		ТекстЗапроса=ТекстЗапроса+" И КП_ДополнительныеРеквизиты.ПометкаУдаления = &ПометкаУдаления";
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
		
	КонецЕсли;
	
	Если ТолькоОбязательные Тогда
		ТекстЗапроса=ТекстЗапроса+" И КП_ДополнительныеРеквизиты.Обязательный = Истина";		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", ВладелецРеквизитов);
	Запрос.Текст=ТекстЗапроса;
	
	СписокРеквизитов=Новый СписокЗначений;
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		СписокРеквизитов.Добавить(Выборка.Ссылка, Выборка.ИмяРеквизитаДляФункций);	
		
	КонецЦикла;
	
	Возврат СписокРеквизитов;
	
КонецФункции

// Функция формирует и возвращает заголовок экземпляра процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Строка
Функция ПолучитьЗаголовокЭкземпляраПроцесса(БизнесПроцесс) Экспорт 
	
	Если БизнесПроцесс.Завершен Тогда
		СтатусПроцесса="Завершен";
		
	ИначеЕсли БизнесПроцесс.Стартован Тогда
		СтатусПроцесса="В работе";
			
	Иначе
		СтатусПроцесса="";
		
	КонецЕсли;
	
	СтрокаЗаголовка=БизнесПроцесс.Наименование+" №"+СокрЛП(БизнесПроцесс.Номер)+" от "+Формат(БизнесПроцесс.Дата, "ДФ='dd.MM.yy HH:mm'")+?(ПустаяСтрока(СтатусПроцесса), "", " ("+СтатусПроцесса+")");
	
	Возврат СтрокаЗаголовка;
	
КонецФункции

// Функция выполняет обработку точки подпроцесса
// Параметры:
//		ТочкаКБП - маршрутная точка 
// Возвращаемое значение: Истина или Ложь
Функция ОбработатьТочкуПодпроцесса(ТочкаКБП, ЭтоОбработкаИзЗавершенияПодпроцесса)
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	Подпроцесс=ПолучитьПодпроцессТочки(ТочкаКБП);
	
	Если ЭтоОбработкаИзЗавершенияПодпроцесса Тогда
		МожноСоздаватьНовыйПроцесс=Ложь;
	ИначеЕсли Подпроцесс=Неопределено ИЛИ Подпроцесс.Завершен ИЛИ НЕ ТочкаКБП.ПодпроцессЖдатьОкончания Тогда
		//первый или повторный проход по точке подпроцесса
		//при этом точка либо завершена, либо по ней можно создавать повторые процессы не дожидаясь выполнения
		//будем создавть новый экземпляр
		МожноСоздаватьНовыйПроцесс=Истина;
	Иначе
		МожноСоздаватьНовыйПроцесс=Ложь;
	КонецЕсли;
		
	//Если Подпроцесс=Неопределено Тогда
	Если МожноСоздаватьНовыйПроцесс Тогда
		//создаем новый подпроцесс
		ПодпроцессОбъект=БизнесПроцессы.КП_БизнесПроцесс.СоздатьБизнесПроцесс();
		
		ВидПодпроцесса=ТочкаКБП.ПодпроцессВид;
		
		//заполним параметры нового подпроцесса
		ПодпроцессОбъект.ВидПроцесса=ВидПодпроцесса;
		ПодпроцессОбъект.ТочкаВозвратаВВышестоящийПроцесс=ТочкаКБП;
		ПодпроцессОбъект.Дата=ТекущаяДата();
		ПодпроцессОбъект.Автор=БизнесПроцесс.Автор; //автором будет инициатор нашего бизнес-процесса
		
		Если ЗначениеЗаполнено(БизнесПроцесс.Контролер) Тогда
			ПодпроцессОбъект.Контролер=БизнесПроцесс.Контролер;
		Иначе
			ПодпроцессОбъект.Контролер=БизнесПроцесс.Автор;
		КонецЕсли;
		
		ПодпроцессОбъект.ИднАвтора=КП_ОбщееСервер.СформироватьИднИсполнителя(ПодпроцессОбъект.Автор);
		ПодпроцессОбъект.ИднКонтролера=КП_ОбщееСервер.СформироватьИднИсполнителя(ПодпроцессОбъект.Контролер);
		
		Попытка
			ПодпроцессОбъект.Записать();
			Подпроцесс=ПодпроцессОбъект.Ссылка;
		
		Исключение
			СтрокаОшибки="Ошибка записи нового подпроцесса """+СокрЛП(Подпроцесс)+"""! "+ОписаниеОшибки();
			ЗаписатьВЖурналПроцесса(СтрокаОшибки, БизнесПроцесс, ТочкаКБП,,3);
			Возврат Ложь;
			
		КонецПопытки;
		
		//скопируем точки из вида в подпроцесс
		КП_СхемаКБПСервер.СкопироватьТочкиВидаВЭкземплярБП(ВидПодпроцесса, Подпроцесс.Ссылка);
		
		Если ТочкаКБП.ПодпроцессСкопироватьСписокОбъектов Тогда
			//скопируем список объектов в подпроцесс
			СписокСсылокПроцесса=КП_Процессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Ложь);
			ЗаписатьСписокСсылокПроцесса(Подпроцесс, СписокСсылокПроцесса);
			
		КонецЕсли;
	
		//заполним подпроцесс по выбранному виду (в том числе скопируем реквизиты)
		
		ЗаполнятьСхемуПроцесса=Истина;
		ЗаполнятьТекстПроцесса=НЕ ТочкаКБП.ПодпроцессПереопределитьТекст;
		ЗаполнитьПроцессПоВиду(ПодпроцессОбъект, ТочкаКБП.ПодпроцессВид, ЗаполнятьСхемуПроцесса, ЗаполнятьТекстПроцесса);

		//установим значения реквизитов подпроцесса
		Для Каждого СтрокаРеквизитов Из ТочкаКБП.ПередачаРеквизитовВПодпроцесс Цикл
			Если НЕ СтрокаРеквизитов.ПередаватьВПодпроцесс Тогда
				Продолжить;
				
			КонецЕсли;
			
			ЗначениеРеквизита=КП_Процессы.ПолучитьЗначениеРеквизитаПроцесса(БизнесПроцесс, СтрокаРеквизитов.РеквизитПроцесса);
			
			//установим значение для реквизита подпроцесса
			РеквизитУстановленУспешно=УстановитьЗначениеРеквизита(Подпроцесс, СтрокаРеквизитов.РеквизитПодпроцесса, ЗначениеРеквизита);
			Если НЕ РеквизитУстановленУспешно Тогда
				СтрокаОшибки="Ошибка сохранения реквизита """+СокрЛП(СтрокаРеквизитов.РеквизитПроцесса)+" в подпроцесс """+СокрЛП(Подпроцесс);
				ЗаписатьВЖурналПроцесса(СтрокаОшибки, БизнесПроцесс, ТочкаКБП,,3);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		//сформируем текст подпроцесса
		Если ТочкаКБП.ПодпроцессПереопределитьТекст Тогда
			//возмем указанный в настройке подпроцесса текст
			ТекстПодпроцессаФорматированный=ТочкаКБП.ХранилищеТекстаТочки.Получить();
			ПодпроцессОбъект.ХранилищеТекстаПроцесса=Новый ХранилищеЗначения(ТекстПодпроцессаФорматированный);
			
		КонецЕсли;
		
		Попытка
			ПодпроцессОбъект.Записать();
			Подпроцесс=ПодпроцессОбъект.Ссылка;
		
		Исключение
			СтрокаОшибки="Ошибка записи нового подпроцесса """+СокрЛП(Подпроцесс)+"""! "+ОписаниеОшибки();
			ЗаписатьВЖурналПроцесса(СтрокаОшибки, БизнесПроцесс, ТочкаКБП,,3);
			Возврат Ложь;
			
		КонецПопытки;
		
		СписокИницализирован=КП_Процессы.СоздатьДинамическийСписокИсполнителей(ПодпроцессОбъект.Ссылка, ТочкаКБП.РабочаяГруппа);
		
		Если НЕ СписокИницализирован Тогда
			Возврат Ложь;
			
		КонецЕсли;
				
		//заполним маршрутную сеть подпроцесса
		КП_СхемаКБПСервер.ЗаполнитьСетьМаршрутныхТочек(ПодпроцессОбъект);
		
		//запишем подпроцесс
		Попытка
			ПодпроцессОбъект.Записать();
			Подпроцесс=ПодпроцессОбъект.Ссылка;
		
		Исключение
			СтрокаОшибки="Ошибка записи нового подпроцесса """+СокрЛП(Подпроцесс)+"""! "+ОписаниеОшибки();
			ЗаписатьВЖурналПроцесса(СтрокаОшибки, БизнесПроцесс, ТочкаКБП,,3);
			Возврат Ложь;
			
		КонецПопытки;
		
		//запишем параметры процесса
		СтруктураПараметровКБП=Новый Структура;
		СтруктураПараметровКБП.Вставить("ДатаСтарта", ТекущаяДата());
		КП_Процессы.СохранитьСтруктуруПараметровКБП(СтруктураПараметровКБП, ПодпроцессОбъект.Ссылка);
		
		//стартуем подпроцесс
		Попытка
			ПодпроцессОбъект.Старт(БизнесПроцессы.КП_БизнесПроцесс.ТочкиМаршрута.Старт);
			
		Исключение
			СтрокаОшибки="Ошибка старта подпроцесса """+СокрЛП(Подпроцесс)+"""! "+ОписаниеОшибки();
			ЗаписатьВЖурналПроцесса(СтрокаОшибки, БизнесПроцесс, ТочкаКБП,,3);
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ ТочкаКБП.ПодпроцессЖдатьОкончания Тогда
		//считаем, что точка обработана вне зависимости от состояния подпроцесса
		Возврат Истина;
		
	КонецЕсли;
	
	ПодпроцессЗавершен=ПроверитьЗавершениеПодпроцесса(Подпроцесс);
	Если Подпроцесс.Стартован И НЕ ПодпроцессЗавершен Тогда
		//подпроцесс находится в работе
		ПодпроцесЗавершен=Ложь;
		Возврат ПодпроцесЗавершен;
		
	КонецЕсли;
	
	//подпроцесс может оказаться завершенным сразу после его запуска в блоке выше или при передаче управления на точку КБП
	
	Если ПодпроцессЗавершен Тогда
		//получим реквизиты подпроцесса обратно в процесс
		
		Для Каждого СтрокаРеквизитов Из ТочкаКБП.ПередачаРеквизитовВПодпроцесс Цикл
			Если НЕ СтрокаРеквизитов.ВозвращатьВПроцесс Тогда
				Продолжить;
				
			КонецЕсли;
			
			ЗначениеРеквизитаПодпроцесса=КП_Процессы.ПолучитьЗначениеРеквизитаПроцесса(Подпроцесс, СтрокаРеквизитов.РеквизитПодпроцесса);
			
			//установим значение для реквизита нашего процесса
			РеквизитУстановленУспешно=УстановитьЗначениеРеквизита(БизнесПроцесс, СтрокаРеквизитов.РеквизитПроцесса, ЗначениеРеквизитаПодпроцесса);
			Если НЕ РеквизитУстановленУспешно Тогда
				СтрокаОшибки="Ошибка загрузки реквизита """+СокрЛП(СтрокаРеквизитов.РеквизитПроцесса)+" из подпроцесса """+СокрЛП(Подпроцесс);
				ЗаписатьВЖурналПроцесса(СтрокаОшибки, БизнесПроцесс, ТочкаКБП,,3);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПодпроцесЗавершен=Истина;
		
		Возврат ПодпроцесЗавершен;
		
	КонецЕсли;
	
	ПодпроцессВыполненПолностью=Истина;
	
	Возврат ПодпроцессВыполненПолностью;
	
КонецФункции

// Функция возвращает подпроцесс точки
// Параметры:
//		ТочкаКБП - маршрутная точка 
// Возвращаемое значение: Ссылка на бизнес-процесс или Неопределено
Функция ПолучитьПодпроцессТочки(ТочкаКБП)
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_БизнесПроцесс.Ссылка
	                    |ИЗ
	                    |	БизнесПроцесс.КП_БизнесПроцесс КАК КП_БизнесПроцесс
	                    |ГДЕ
	                    |	КП_БизнесПроцесс.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_БизнесПроцесс.ТочкаВозвратаВВышестоящийПроцесс = &ТочкаВозвратаВВышестоящийПроцесс
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	КП_БизнесПроцесс.Дата УБЫВ");
						
	Запрос.УстановитьПараметр("ТочкаВозвратаВВышестоящийПроцесс", ТочкаКБП);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция заполняет процесс по его виду 
// Параметры:
//		ОбъектБизнесПроцесс - бизнес-процесс
//		ВидПроцесса - вид процесса
//		ЗаполнятьСхемуПроцесса - флаг заполнения схемы процесса
//		ЗаполнятьТекстПроцесса - флаг заполнения текста процесса
// Возвращаемое значение: Истина или Ложь
Функция ЗаполнитьПроцессПоВиду(ОбъектБизнесПроцесс, ВидПроцесса, ЗаполнятьСхемуПроцесса=Ложь, ЗаполнятьТекстПроцесса=Ложь) Экспорт
	
	//заполним прямые параметры
	ОбъектБизнесПроцесс.ДействиеПараллельное=ВидПроцесса.ДействиеПараллельное;
	
	Если НЕ ЗначениеЗаполнено(ОбъектБизнесПроцесс.Автор) Тогда
		ОбъектБизнесПроцесс.Автор=Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидПроцесса.Контролер) Тогда
		ОбъектБизнесПроцесс.Контролер=ВидПроцесса.Контролер;
	КонецЕсли;
	
	Если ВидПроцесса.ИсточникОсновныхИсполнителей=0 Тогда
		//скопируем основных исполнителей
		ОбъектБизнесПроцесс.ОсновныеИсполнители.Загрузить(ВидПроцесса.ОсновныеИсполнители.Выгрузить());
	Иначе
		//скопируем из рабочей группы
		ОбъектБизнесПроцесс.ОсновныеИсполнители.Загрузить(ПолучитьТаблицуИсполнителейПоРабочейГруппе(ВидПроцесса));
		
	КонецЕсли;
	
	ИнициализироватьРеквизитыПроцессаПоВиду(ОбъектБизнесПроцесс.Ссылка, ВидПроцесса);
		
	Если ЗаполнятьТекстПроцесса Тогда
		ТекстПроцессаФорматированный=ВидПроцесса.ХранилищеТекстаПроцесса.Получить();
		ОбъектБизнесПроцесс.ХранилищеТекстаПроцесса=Новый ХранилищеЗначения(ТекстПроцессаФорматированный);
		
	КонецЕсли;
	
	ОбъектБизнесПроцесс.ПроектыБизнесПроцесса.Загрузить(ВидПроцесса.ПроектыБизнесПроцесса.Выгрузить());
	
	ОбъектБизнесПроцесс.Наименование=ПолучитьНаименованиеПоШаблону(ОбъектБизнесПроцесс, ВидПроцесса);
	
	Возврат Истина;
	
КонецФункции

// Процедура инициализирует реквизиты процесса по виду
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ВидПроцесса - вид процесса
Процедура ИнициализироватьРеквизитыПроцессаПоВиду(БизнесПроцесс, ВидПроцесса) Экспорт
	//инициализируем реквизиты процесса по виду процесса
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ВидыПроцессовРеквизитыПроцессов.РеквизитПроцесса КАК РеквизитПроцесса,
	                    |	КП_ВидыПроцессовРеквизитыПроцессов.НомерСтроки КАК НомерСтроки
	                    |ИЗ
	                    |	Справочник.КП_ВидыПроцессов.РеквизитыПроцессов КАК КП_ВидыПроцессовРеквизитыПроцессов
	                    |ГДЕ
	                    |	КП_ВидыПроцессовРеквизитыПроцессов.РеквизитПроцесса.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ВидыПроцессовРеквизитыПроцессов.Ссылка = &ВидПроцесса
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	НомерСтроки");
						
	Запрос.УстановитьПараметр("ВидПроцесса", ВидПроцесса);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	//если реквизиты присутствуют, заполним реквизиты
	Если Выборка.Количество()>0 Тогда
		КП_Процессы.УдалитьРеквизитыПроцесса(БизнесПроцесс);
		
		Пока Выборка.Следующий() Цикл
			РеквизитВидаКБП=Выборка.РеквизитПроцесса;
			ЗначениеРеквизита=КП_Процессы.ПолучитьНачальноеЗначениеРеквизита(РеквизитВидаКБП);
			
			Примечание="Значение по-умолчанию";
			КП_Процессы.УстановитьЗначениеРеквизита(БизнесПроцесс, РеквизитВидаКБП, ЗначениеРеквизита, ,Примечание, Выборка.НомерСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция формирует и возвращает текст функции выбора варианта 
// Параметры:
//		ИсходныйТекстФункции - текст программной функции
// Возвращаемое значение: Строка
Функция СформироватьТекстФункцииВыбораВарианта(ИсходныйТекстФункции)
	
	ТекстФункции=СтрЗаменить(ИсходныйТекстФункции, "Возврат ", "РезультатВыполнения=");
	ТекстФункции=СтрЗаменить(ТекстФункции, "возврат ", "РезультатВыполнения=");
	
	Возврат ТекстФункции;
	
КонецФункции

// Функция удаляет все не выполненные задачи бизнес-процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Истина или Ложь
Функция УдалитьНеВыполненныеЗадачиПроцесса(БизнесПроцесс) Экспорт
	
	СписокЗадач=ПолучитьСписокНеВыполненныхЗадач(БизнесПроцесс);
	
	Для Каждого ЭлементСписка Из СписокЗадач Цикл
		ЗадачаПроцесса=ЭлементСписка.Значение;
		ЗадачаПроцессаОбъект=ЗадачаПроцесса.ПолучитьОбъект();
		
		Попытка
			ЗадачаПроцессаОбъект.УстановитьПометкуУдаления(Истина);
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция формирует и возвращает список не выполненных задач бизнес-процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Список значений
Функция ПолучитьСписокНеВыполненныхЗадач(БизнесПроцесс) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_Задача.Ссылка
	                    |ИЗ
	                    |	Задача.КП_Задача КАК КП_Задача
	                    |ГДЕ
	                    |	КП_Задача.Выполнена = ЛОЖЬ
	                    |	И КП_Задача.БизнесПроцесс = &БизнесПроцесс");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокЗадач=Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокЗадач.Добавить(Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат СписокЗадач;
	
КонецФункции

// Функция формирует и возвращает таблицу задач точки 
// Параметры:
//		ТочкаКБП - маршрутная точка 
//		НомерПрохода - номер прохода
// Возвращаемое значение: Таблица значений
Функция ПолучитьТаблицуЗадачТочки(ТочкаКБП, НомерПрохода) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ЗадачиТочек.Задача КАК Задача,
	                    |	КП_ЗадачиТочек.Исполнитель КАК Исполнитель,
	                    |	КП_ЗадачиТочек.ИднИсполнителя КАК ИднИсполнителя,
	                    |	КП_ЗадачиТочек.Отказ КАК Отказ,
	                    |	ЕСТЬNULL(КП_ЗадачиТочек.Задача.Выполнена, ЛОЖЬ) КАК Выполнена
	                    |ИЗ
	                    |	РегистрСведений.КП_ЗадачиТочек КАК КП_ЗадачиТочек
	                    |ГДЕ
	                    |	КП_ЗадачиТочек.ТочкаКБП = &ТочкаКБП
	                    |	И КП_ЗадачиТочек.НомерПрохода = &НомерПрохода
	                    |	И КП_ЗадачиТочек.Задача.ПометкаУдаления = Ложь");
						
	Запрос.УстановитьПараметр("ТочкаКБП", ТочкаКБП);
	Запрос.УстановитьПараметр("НомерПрохода", НомерПрохода);
	
	ТаблицаЗадач=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Возврат ТаблицаЗадач;
	
КонецФункции

// Функция очищает ветвь маршрута (снимает статус "Выполнено") от указанной в аргументе точки 
// до первой точки выбора (ветвления) или завершения процесса
// Параметры:
// 		ТочкаУказателя - точка указателя
// Возвращаемое значение: Истина или Ложь  
Функция ИницилизироватьВетвьСхемы(ТочкаУказателя)
	
	ТекущаяТочка=ТочкаУказателя;
	
	Если ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Завершение
		ИЛИ ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Разделение 
		
	Тогда
		//в точке разветвления не очищаем
		Возврат Истина;
		
	КонецЕсли;
	
	БизнесПроцесс=ТочкаУказателя.ВладелецТочки;
	СетьМаршрутныхТочек=ТочкаУказателя.ВладелецТочки.СетьМаршрутныхТочек;
	
	ПримечаниеРеинициализации="Инициализировано """+СокрЛП(ТочкаУказателя)+"""";
	 
	Пока ЗначениеЗаполнено(ТекущаяТочка) Цикл
		
		Если ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Завершение
			ИЛИ ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Разделение 
			ИЛИ ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие
			ИЛИ ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта
			ИЛИ ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Слияние

		Тогда
			//ветвь очистили до окончания или точки выбора, условия, разделения (т.к. дальше не ясно куда пойдет ветвь)
			Прервать;
			
		КонецЕсли;
		
		ИнициализироватьТочку(ТекущаяТочка, ПримечаниеРеинициализации);
		
		//получим следуюшую точку
		
		ТекущаяТочка=ПолучитьСледующуюТочку(СетьМаршрутныхТочек, ТекущаяТочка);	
		Если ТекущаяТочка=Неопределено Тогда
			Прервать;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Истина;
			
КонецФункции

// Функция инициализирует маршрутную точку 
// Параметры:
//		ТочкаКБП - маршрутная точка 
//		Примечание - текстовое примечание
// Возвращаемое значение: Истина или Ложь
Функция ИнициализироватьТочку(ТочкаКБП, Примечание="")
	
	СостояниеТочки=ПолучитьСтруктуруСостоянияТочки(ТочкаКБП).Состояние;
	
	Если СостояниеТочки=Неопределено Тогда
		//точка еще не встречалась в маршруте, поэтому инициализация не требуется
		Возврат Истина;
		
	КонецЕсли;
	
	Если СостояниеТочки=Перечисления.КП_СостояниеТочек.Выполнена ИЛИ СостояниеТочки=Перечисления.КП_СостояниеТочек.Выполняется Тогда
		//точка уже была выполнена (или выполняется), инициализуем её
		УстановитьСостояниеОбработкиТочки(ТочкаКБП, Перечисления.КП_СостояниеТочек.Реинициализирована, , Примечание);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
	
// Функция возвращает количество записей в журнале бизнес-процесса 
// Возвращаемое значение: Число
Функция ПолучитьМаксимальнуюЗаписьВЖурналеПроцесса()
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	МАКСИМУМ(КП_ЖурналВыполненияПроцесса.НомерЗаписи) КАК МаксимальныйНомерЗаписи
	                    |ИЗ
	                    |	РегистрСведений.КП_ЖурналВыполненияПроцесса КАК КП_ЖурналВыполненияПроцесса");
						
	Попытка
		Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Исключение
		ЗаписьЖурналаРегистрации("Получение максимальной записи журнала процесса", УровеньЖурналаРегистрации.Ошибка, , ОписаниеОшибки(), "Посчет не выполнен.");
		Возврат 0;
	КонецПопытки;
	
	Если Выборка.Следующий() Тогда
		Если Выборка.МаксимальныйНомерЗаписи=NULL Тогда
			Возврат 0;
		Иначе		
			Возврат Число(Выборка.МаксимальныйНомерЗаписи);
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

// Функция отменяет выполнение для всех не выполненных точек процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Истина или Ложь
Функция ОтменитьВыполнениеВсемНевыпоненнымТочкам(БизнесПроцесс) Экспорт
	
	СписокНевыполненныхТочек=ПолучитьСписокНеВыполненныхТочек(БизнесПроцесс);
	
	НовоеСостояниеТочки=Перечисления.КП_СостояниеТочек.НеВыполняется;
	
	Для Каждого ЭлементСписка Из СписокНевыполненныхТочек Цикл
		ТочкаСписка=ЭлементСписка.Значение;
		
		УстановитьСостояниеОбработкиТочки(ТочкаСписка, НовоеСостояниеТочки, , "Отменено");
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает список не выполненных точек процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Список значений
Функция ПолучитьСписокНеВыполненныхТочек(БизнесПроцесс)
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка КАК Точка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки");
						
	Запрос.УстановитьПараметр("ВладелецТочки", БизнесПроцесс);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокТочек=Новый СписокЗначений;
	
	СостояниеВыполнена=Перечисления.КП_СостояниеТочек.Выполнена;
	
	Пока Выборка.Следующий() Цикл
		ТочкаКБП=Выборка.Точка;
		//будем проверять напрямую, в запросе были проблемы с обработкой null
		СостояниеТочки=ПолучитьСтруктуруСостоянияТочки(ТочкаКБП).Состояние;
		Если СостояниеТочки<>СостояниеВыполнена Тогда
			Если СписокТочек.НайтиПоЗначению(ТочкаКБП)=Неопределено Тогда
				СписокТочек.Добавить(ТочкаКБП);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокТочек;
		
КонецФункции

// Функция подготовливает и выполняет программную функцию 
// Параметры:
//		ТочкаКБП - маршрутная точка 
//		ТекстФункции - текст программной функции
//		ИсполнительЗадачи - ссылка на исполнителя задачи
//		СсылкаНаПроцесс - ссылка на процесс задачи
//		СсылкаНаЗадачу - ссылка на задачу
//		ОбрабатыватьСтруктуруРеквизитовПроцесса - флаг обработки структуры реквизитов
//		ОбрабатыватьСтруктуруПараметровПроцесса - флаг обработки структуры параметров
//		ОбрабатыватьСтруктуруПараметровЗадачи - флаг обработки структуры параметров задачи
//		ОбрабатыватьСтруктуруОтчетаИсполнителя - флаг обработки стуруктуры отчета исполнителя
// Возвращаемое значение: Структура данных
Функция ПодготовитьИВыполнитьПрограммнуюФункцию(ТочкаКБП, ТекстФункции, Знач ИсполнительЗадачи, Знач СсылкаНаПроцесс, Знач СсылкаНаЗадачу,
			ОбрабатыватьСтруктуруРеквизитовПроцесса,
			ОбрабатыватьСтруктуруПараметровПроцесса,
			ОбрабатыватьСтруктуруПараметровЗадачи,
			ОбрабатыватьСтруктуруОтчетаИсполнителя, Примечание="") Экспорт
						
	Если ОбрабатыватьСтруктуруРеквизитовПроцесса Тогда
		//заполним структуру реквизитов текущими значениями
		//СтруктураРеквизитовПроцессаИсходная=ПолучитьСтруктуруРеквизитовПроцесса(СсылкаНаПроцесс);
		
		ТаблицаРеквизитовПроцессаИсходная=ПолучитьТаблицуРеквизитовПроцесса(СсылкаНаПроцесс,, Истина);
		СтруктураРеквизитовПроцессаИсходная=Новый Структура;
		Для Каждого СтрокаТЧ Из ТаблицаРеквизитовПроцессаИсходная Цикл
			Если СтрокаТЧ.РеквизитПроцесса.Пустая() Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Обнаружен пустой реквизит у процесса """+СокрЛП(СсылкаНаПроцесс)+"""");
				Продолжить;
			КонецЕсли;
			
			СтруктураРеквизитовПроцессаИсходная.Вставить(СтрокаТЧ.ИмяРеквизитаПроцесса, СтрокаТЧ.ЗначениеРеквизита);
		КонецЦикла;
				
		СтруктураРеквизитовПроцесса=КП_ОбщееСервер.СоздатьКопиюСтруктуры(СтруктураРеквизитовПроцессаИсходная);
		
	КонецЕсли;
	
	Если ОбрабатыватьСтруктуруПараметровПроцесса Тогда
		//заполним структуру параметров текущими значениями
		СтруктураПараметровПроцессаИсходная=ПолучитьСтруктуруПараметровКБП(СсылкаНаПроцесс);
		СтруктураПараметровПроцесса=КП_ОбщееСервер.СоздатьКопиюСтруктуры(СтруктураПараметровПроцессаИсходная);
		
	КонецЕсли;
	
	Если ОбрабатыватьСтруктуруПараметровЗадачи Тогда
		//заполним структуру параметров текущими значениями
		СтруктураПараметровЗадачиИсходная=КП_ЗадачиПроцессов.ПолучитьСтруктуруПараметровЗадачи(СсылкаНаЗадачу);
		СтруктураПараметровЗадачи=КП_ОбщееСервер.СоздатьКопиюСтруктуры(СтруктураПараметровЗадачиИсходная);
		
	КонецЕсли;
	
	Если ОбрабатыватьСтруктуруОтчетаИсполнителя Тогда
		//заполним структуру параметров текущими значениями
		Если СсылкаНаЗадачу=Неопределено Тогда
			СтруктураОтчетаИсполнителя=Новый Структура;
		Иначе
			СтруктураОтчетаИсполнителяИсходная=КП_ЗадачиПроцессов.ПолучитьСтруктуруПараметровОтчетаИсполнителя(СсылкаНаЗадачу.Ссылка);
			СтруктураОтчетаИсполнителя=КП_ОбщееСервер.СоздатьКопиюСтруктуры(СтруктураОтчетаИсполнителяИсходная);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(СсылкаНаЗадачу)=Тип("ЗадачаОбъект.КП_Задача") Тогда
		//создадим новую переменную для использования в тексте функции
		ЗадачаОбъект=СсылкаНаЗадачу;
		
	КонецЕсли;
	
	//ОбрабатыватьСтруктуруОтчетаИсполнителя
	
	//при обработке точек Действие, в обработчике ПослеВыполнения могут быть изменены следующие переменные:
	ЗавершитьДействие=Ложь;
	ЗавершитьПроцесс=Ложь;
	
	РезультатВыполнения=Неопределено;
	//в тексте функции может быть структура "Возврат N", преобразованная в "РезультатВыполнения=N", соответственно
	//значение переменной РезультатВыполнения этого модуля может быть изменено
	//после выполнения вернем это значение
	
	//переменные функции которые можно изменить
	Отказ=Ложь;
	ЗавершитьДействие=Ложь;
	ЗавершитьПроцесс=Ложь;
	
	СписокОбъектов=ПолучитьСписокСсылокПроцесса(СсылкаНаПроцесс, Ложь);
	
 	Попытка
		Выполнить(ТекстФункции);
		Если РезультатВыполнения=Неопределено Тогда
			РезультатВыполнения=Истина;
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации("Выполнение программной функции из процесса.", УровеньЖурналаРегистрации.Ошибка, СсылкаНаПроцесс, СсылкаНаЗадачу, ОписаниеОшибки());
		Если ТочкаКБП.ДействиеИгнорироватьОшибкиВПрограммномКоде Тогда
			РезультатВыполнения=Истина;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецПопытки;
	
	//запишем изменившиеся данные в реквизитах процесса
	Если ОбрабатыватьСтруктуруРеквизитовПроцесса Тогда
		//при необходимости обновим данные реквизитов по структуре
		Для Каждого ЭлементСтруктуры Из СтруктураРеквизитовПроцесса Цикл
			ИмяРеквизита=ЭлементСтруктуры.Ключ;
			ЗначениеРеквизита=ЭлементСтруктуры.Значение;
			
			//сравним со значениями в бизнес-процессе
			ЗначениеРеквизитаИсходное=Неопределено;
			СтруктураРеквизитовПроцессаИсходная.Свойство(ИмяРеквизита, ЗначениеРеквизитаИсходное);
					
			Если ЗначениеРеквизитаИсходное<>ЗначениеРеквизита Тогда
				РеквизитПроцесса=НайтиРеквизитПроцессаПоИмени(СсылкаНаПроцесс, ИмяРеквизита);
				
				//найдем в таблице значение порядка реквизита
				СтрокаРеквизита=ТаблицаРеквизитовПроцессаИсходная.Найти(РеквизитПроцесса, "РеквизитПроцесса");
				Если СтрокаРеквизита=Неопределено Тогда
					ЗаписатьВЖурналПроцесса(НСтр("ru='Не найден существующий порядок для реквизита ""'; en='Variable order not found for ""';")+СокрЛП(РеквизитПроцесса)+НСтр("ru=' в точке ""'; en=' at the process point ""';")+СокрЛП(ТочкаКБП)+""".", СсылкаНаПроцесс, ТочкаКБП,,3);
					ПорядокРеквизита=0;
				Иначе
					ПорядокРеквизита=СтрокаРеквизита.Порядок;
				КонецЕсли;
				УстановитьЗначениеРеквизита(СсылкаНаПроцесс, РеквизитПроцесса, ЗначениеРеквизита, , Примечание, ПорядокРеквизита);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//запишем изменившиеся данные в структуре параметров процесса
	Если ОбрабатыватьСтруктуруПараметровПроцесса Тогда
		//при необходимости обновим данные параметров по структуре
		Для Каждого ЭлементСтруктуры Из СтруктураПараметровПроцесса Цикл
			ИмяРеквизита=ЭлементСтруктуры.Ключ;
			ЗначениеРеквизита=ЭлементСтруктуры.Значение;
			
			//сравним со значениями в бизнес-процессе
			ЗначениеРеквизитаИсходное=Неопределено;
			СтруктураПараметровПроцессаИсходная.Свойство(ИмяРеквизита, ЗначениеРеквизитаИсходное);
			
			СтруктураПараметровПроцессаИзмененная=Новый Структура;
			
			Если ЗначениеРеквизитаИсходное<>ЗначениеРеквизита Тогда
				СтруктураПараметровПроцессаИзмененная.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				
			КонецЕсли;
			
			Если СтруктураПараметровПроцессаИзмененная.Количество()>0 Тогда
				СохранитьСтруктуруПараметровКБП(СтруктураПараметровПроцессаИзмененная, СсылкаНаПроцесс);

			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//запишем изменившиеся данные в структуре параметров задачи
	Если ОбрабатыватьСтруктуруПараметровЗадачи Тогда
		//при необходимости обновим данные параметров по структуре
		Для Каждого ЭлементСтруктуры Из СтруктураПараметровЗадачи Цикл
			ИмяРеквизита=ЭлементСтруктуры.Ключ;
			ЗначениеРеквизита=ЭлементСтруктуры.Значение;
			
			//сравним со значениями в бизнес-процессе
			ЗначениеРеквизитаИсходное=Неопределено;
			СтруктураПараметровЗадачиИсходная.Свойство(ИмяРеквизита, ЗначениеРеквизитаИсходное);
			
			СтруктураПараметровЗадачиИзмененная=Новый Структура;
			
			Если ЗначениеРеквизитаИсходное<>ЗначениеРеквизита Тогда
				СтруктураПараметровЗадачиИзмененная.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				
			КонецЕсли;
			
			Если СтруктураПараметровЗадачиИзмененная.Количество()>0 Тогда
				КП_ЗадачиПроцессов.СохранитьСтруктуруПараметровЗадачи(СтруктураПараметровЗадачиИзмененная, СсылкаНаЗадачу);

			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбрабатыватьСтруктуруОтчетаИсполнителя Тогда
		//пока не изменяем программно отчет исполнителя
		
	КонецЕсли;
	
	СтруктураРезультата=Новый Структура;
	СтруктураРезультата.Вставить("РезультатВыполнения", РезультатВыполнения);
	СтруктураРезультата.Вставить("Отказ", Отказ);
	СтруктураРезультата.Вставить("ЗавершитьДействие", ЗавершитьДействие);
	СтруктураРезультата.Вставить("ЗавершитьПроцесс", ЗавершитьПроцесс);
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Функция обрабатывает маршрутную точку действия 
// Параметры:
//		ТочкаКБП - маршрутная точка 
// Возвращаемое значение: Истина или Ложь
Функция ОбработатьТочкуДействия(ТочкаКБП)
	
	//получим состояние точки
	СтруктураСостоянияТочки=ПолучитьСтруктуруСостоянияТочки(ТочкаКБП);
	СостояниеТочкиДействия=СтруктураСостоянияТочки.Состояние;
	НомерПрохода=СтруктураСостоянияТочки.НомерПрохода;
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	
	//проверим в каком состоянии находится точка
	Если СостояниеТочкиДействия=Перечисления.КП_СостояниеТочек.Выполнена Тогда
		//точка уже выполнена
		ТочкаДействияВыполнена=Истина;
		Возврат ТочкаДействияВыполнена;
		
	КонецЕсли;
	
	//точка пока не выполнена, начнем обработку
	
	//текущее действие не признано выполненным, посмотрим что с ним можно сделать далее
	Если ТочкаКБП.ИсточникИсполнителей=0 Тогда
		//динамический список
		ВыдачаПоследовательная=НЕ ТочкаКБП.ВладелецТочки.ДействиеПараллельное;
		
	Иначе
		//фиксированный список или переменная процесса
		ВыдачаПоследовательная=НЕ ТочкаКБП.ДействиеПараллельное;
		
	КонецЕсли;
	
	//получим таблицу исполнителей точки
	ТаблицаИсполнителейТочки=КП_ЗадачиПроцессов.ПолучитьТаблицуИсполнителейТочки(ТочкаКБП);
	Если ТаблицаИсполнителейТочки=Неопределено Тогда
		Возврат Ложь;
		
	ИначеЕсли ТаблицаИсполнителейТочки.Количество()=0 Тогда
		ТекстОшибки="В точке """+СокрЛП(ТочкаКБП)+""" нет исполнителей. Действие не может быть выполнено.";
		ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
		Возврат Ложь; //действие не выполнено, так как его некому выполнять
		
	КонецЕсли;
	
	//проверим количество контролеров
	Если ТочкаКБП.ДействиеТипФормыЗадач=1 И ТаблицаИсполнителейТочки.Количество()>1 Тогда
		//количество контролеров в точке контроля должно быть не больше одного
		ТекстОшибки="Внимание! В точке """+СокрЛП(ТочкаКБП)+""" больше одного исполнителя (контролера). Контролер должен быть один. Задача не выдана.";
		ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
		Возврат Ложь;
		
	КонецЕсли;
	
	ТаблицаЗадачВТочке=ПолучитьТаблицуЗадачТочки(ТочкаКБП, НомерПрохода);
	
	КоличествоЗадачВТочке=ТаблицаЗадачВТочке.Количество();
	
	Если СостояниеТочкиДействия=Перечисления.КП_СостояниеТочек.Выполняется Тогда
		//точка в работе, проверим статус созданных в ней задач
		
		//проверим список точек на предмет выполнения всего действия,
		
		//инициализация переменных, могут быть изменены ниже в цикле
		ТочкаДействияВыполнена=Ложь;
		КоличествоВыполненныхЗадач=0;
		
		Для Каждого СтрокаТЧ Из ТаблицаЗадачВТочке Цикл
			ЗадачаДействия=СтрокаТЧ.Задача;
			
			Если СтрокаТЧ.Выполнена ИЛИ СтрокаТЧ.Отказ Тогда
				КоличествоВыполненныхЗадач=КоличествоВыполненныхЗадач+1;
				
				Если НЕ ВыдачаПоследовательная И ТочкаКБП.ДействиеЗавершениеСпискаПослеОдного И НЕ СтрокаТЧ.Отказ Тогда
					ТочкаДействияВыполнена=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; //список задач
		
		Если КоличествоВыполненныхЗадач=ТаблицаИсполнителейТочки.Количество() Тогда
			ТочкаДействияВыполнена=Истина;
			
		КонецЕсли;
		
	Иначе
		//другие состояния точки (Реинициализирована или Неопределено)
		ТочкаДействияВыполнена=Ложь;
		КоличествоВыполненныхЗадач=0;
		
	КонецЕсли;
	
	Если ТочкаДействияВыполнена Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	ИсточникИсполнителей=ТочкаКБП.ИсточникИсполнителей; //0 - динамический (основной) список, 1 - фиксированный список, 2 - автор процесса, 3 - контролер, 4 - исполнитель в реквизите 
	
	СписокИсполнителейВЗадачахТочки=Новый СписокЗначений;
	
	//составим список исполнителей, которые уже присутствуют в задачах этой точки
	Для Каждого СтрокаТЧ Из ТаблицаЗадачВТочке Цикл
		ИсполнительЗадачи=СтрокаТЧ.Исполнитель;
		
		Если НайтиПоПредставлению(СписокИсполнителейВЗадачахТочки, СтрокаТЧ.ИднИсполнителя)=Неопределено Тогда
			СписокИсполнителейВЗадачахТочки.Добавить(ИсполнительЗадачи, СтрокаТЧ.ИднИсполнителя);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыдачаПоследовательная Тогда
		//посмотрим сколько уже выдано задач, и выдадим следующую по списку
		ИндексСледующейЗадачи=КоличествоВыполненныхЗадач;
		
		СтрокаСледующегоИсполнителя=ТаблицаИсполнителейТочки[ИндексСледующейЗадачи];
		ВсегоИсполнителейВТочке=ТаблицаИсполнителейТочки.Количество();
		
		ИднИсполнителя=СтрокаСледующегоИсполнителя.ИднИсполнителя;
		
		//начиная с номера выполненной задачи будем проходить ниже по списку задач точки
		//если в списке будет уже выданная задач, пройдем дальше, пока не найдем не выданную или не дойдем до конца списка
		Пока НайтиПоПредставлению(СписокИсполнителейВЗадачахТочки, ИднИсполнителя)<>Неопределено Цикл
			ИндексСледующейЗадачи=ИндексСледующейЗадачи+1;
			Если ИндексСледующейЗадачи=ВсегоИсполнителейВТочке Тогда
				//вернемся из процедуры установим отметку не выполненности
				Возврат Ложь;

			КонецЕсли;
			
			СтрокаСледующегоИсполнителя=ТаблицаИсполнителейТочки[ИндексСледующейЗадачи];
			ИднИсполнителя=СтрокаСледующегоИсполнителя.ИднИсполнителя;
			
		КонецЦикла;
		
		//теперь у нас есть строка и Идн которому можно выдавать задачу
		
		ОтчетИсполнителя=СтрокаСледующегоИсполнителя.ОтчетИсполнителя;
		Если НЕ ЗначениеЗаполнено(ОтчетИсполнителя) Тогда
			//используем основной отчет из настройки точки действия
			ОтчетИсполнителя=ТочкаКБП.ДействиеОсновнойОтчетИсполнителей;
			
		КонецЕсли;
		
		ИсполнительСтрокиИсходный=СтрокаСледующегоИсполнителя.ТочкаАдресации;
		Если НЕ ЗначениеЗаполнено(ИсполнительСтрокиИсходный) Тогда
			ТекстОшибки="Внимание! В точке """+СокрЛП(ТочкаКБП)+""" не указан исполнитель (точка адресации). Задача не выдана.";
			ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ИсполнительСтрокиИсходный) Тогда
			//исполнителя получим из ролевой адресации	
			ИсполнительСтроки=КП_ЗадачиПроцессов.ПолучитьИсполнителяПоРолиИАдресации(ИсполнительСтрокиИсходный);
			Если НЕ ЗначениеЗаполнено(ИсполнительСтроки) Тогда
				ТекстОшибки="Внимание! В точке """+СокрЛП(ТочкаКБП)+""" для роли и адресации ("+ИсполнительСтрокиИсходный+") исполнитель не определен. Задача не выдана.";
				ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			ИсполнительСтроки=ИсполнительСтрокиИсходный;
		КонецЕсли;
		
		//обработаем заместителей
		Если НЕ ТочкаКБП.ДействиеНеУчитыватьЗаместителей Тогда
			ИсполнительСтрокиДоЗамены=ИсполнительСтроки;
			ИсполнительСтроки=КП_ЗадачиПроцессов.ПолучитьИсполнителяСУчетомМатрицыЗамены(ИсполнительСтроки, БизнесПроцесс);
			Если НЕ ЗначениеЗаполнено(ИсполнительСтроки) Тогда
				ТекстОшибки="Внимание! В точке """+СокрЛП(ТочкаКБП)+""" после замены """+СокрЛП(ИсполнительСтрокиДоЗамены)+""" на заместителя исполнитель оказался не заполнным. Задача не выдана.";
				ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если ТочкаКБП.ИсточникИсполнителей<=1 Тогда
			//обрабатываем только списки исполнителей
			Если ИсполнительСтроки<>ИсполнительСтрокиИсходный Тогда
				//заменим исполнителя и в таблице исполнителей
				ЗаменитьИсполнителя(ТочкаКБП, ИсполнительСтрокиИсходный, ИсполнительСтроки, СтрокаСледующегоИсполнителя.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
		
		//проверим, есть ли рецензии в этой точке по этому исполнителю
		//если в рецензия одобрена и в точке включен флаг ДействиеВысылатьПовторныеЗадачиПоОдобреннымРезультатам
		ТочкаИсполнителяОдобрена=КП_ЗадачиПроцессов.ТочкаИсполнителяОдобрена(ТочкаКБП, ИсполнительСтроки);
		
		Если ТочкаИсполнителяОдобрена И НЕ ТочкаКБП.ДействиеВысылатьПовторныеЗадачиПоОдобреннымРезультатам Тогда
			КП_ЗадачиПроцессов.ЗаписатьЗадачуТочки(Неопределено, ТочкаКБП, ИсполнительСтроки, ИднИсполнителя, Истина, НомерПрохода, "Отменено как одобренное контролером");
			КП_Процессы.ЗаписатьВЖурналПроцесса("Результат исполнителя """+СокрЛП(ИсполнительСтроки)+""" в точке """+СокрЛП(ТочкаКБП)+""" уже одобрен контролером. Новая задача не выдана.", БизнесПроцесс, ТочкаКБП,,2);
			
			УстановитьСостояниеОбработкиТочки(ТочкаКБП, Перечисления.КП_СостояниеТочек.Выполняется);
			РезультатДальнейшейОбработки=ОбработатьТочкуДействия(ТочкаКБП);
			Возврат РезультатДальнейшейОбработки;
			
		КонецЕсли;
		
		СтруктураНовойЗадачи=Новый Структура;
		СтруктураНовойЗадачи.Вставить("БизнесПроцесс", БизнесПроцесс);
		СтруктураНовойЗадачи.Вставить("ТочкаКБП", ТочкаКБП);
		СтруктураНовойЗадачи.Вставить("Исполнитель", ИсполнительСтроки);
		СтруктураНовойЗадачи.Вставить("ОтчетИсполнителя", ОтчетИсполнителя);
		СтруктураНовойЗадачи.Вставить("ИндивидуальныйТекстЗадания", СтрокаСледующегоИсполнителя.ИндивидуальныйТекстЗадания);
		СтруктураНовойЗадачи.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаСледующегоИсполнителя.ИндивидуальноеНаименованиеЗадания);
		СтруктураНовойЗадачи.Вставить("СрокВыполненияЧасов", СтрокаСледующегоИсполнителя.СрокВыполненияЧасов);
		СтруктураНовойЗадачи.Вставить("СрокВыполненияДатаВремя", СтрокаСледующегоИсполнителя.СрокВыполненияДатаВремя);
		СтруктураНовойЗадачи.Вставить("НеИспользоватьГрафикРаботы", СтрокаСледующегоИсполнителя.НеИспользоватьГрафикРаботы);
		СтруктураНовойЗадачи.Вставить("ИднИсполнителя", СтрокаСледующегоИсполнителя.ИднИсполнителя);
		
		Если ИсточникИсполнителей>=2 И ИсточникИсполнителей<=4 Тогда
			//исполнитель указан в переменной процесса
			Если ТочкаКБП.ИсполнителиТочки.Количество()>0 Тогда
				//для переменной были указаны значения параметров, получим их
				СтрокаПеременной=ТочкаКБП.ИсполнителиТочки[0];
				СтруктураНовойЗадачи.Вставить("ИндивидуальныйТекстЗадания", СтрокаПеременной.ИндивидуальныйТекстЗадания);
				СтруктураНовойЗадачи.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаПеременной.ИндивидуальноеНаименованиеЗадания);
				СтруктураНовойЗадачи.Вставить("СрокВыполненияЧасов", СтрокаПеременной.СрокВыполненияЧасов);
				СтруктураНовойЗадачи.Вставить("СрокВыполненияДатаВремя", СтрокаПеременной.СрокВыполненияДатаВремя);
				СтруктураНовойЗадачи.Вставить("НеИспользоватьГрафикРаботы", СтрокаПеременной.НеИспользоватьГрафикРаботы);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураРезультатаВыдачи=КП_ЗадачиПроцессов.ВыдатьЗадачуИсполнителю(СтруктураНовойЗадачи, НомерПрохода); // ЗавершеноУспешно | Отказ
		
		Если НЕ СтруктураРезультатаВыдачи.ЗавершеноУспешно Тогда
			Возврат Ложь;
		
		ИначеЕсли СтруктураРезультатаВыдачи.Отказ=Истина Тогда
			КП_Процессы.ЗаписатьВЖурналПроцесса("Действие """+СокрЛП(ТочкаКБП)+""" будет выполнено без выдачи задач (зафиксирован отказ при обработке).", БизнесПроцесс, ТочкаКБП,,2);
			//считаем, что не только выдали задачу, но и уже выполнили всю данную точку			
			Возврат Истина; 
			
		КонецЕсли;
					
	Иначе
		//параллельная выдача
		//выдадим задачи всем исполнителям, которые отсутствуют в списке выданных задач
		Для Каждого СтрокаТаблицыИсполнителей Из ТаблицаИсполнителейТочки Цикл
			
			ИсполнительСтрокиИсходный=СтрокаТаблицыИсполнителей.ТочкаАдресации;
			ИднИсполнителя=СтрокаТаблицыИсполнителей.ИднИсполнителя;
			//проверим есть ли такой исполнитель в задачах точки
			//Если СписокИсполнителейВЗадачахТочки.НайтиПоЗначению(ИсполнительСтрокиИсходный)=Неопределено Тогда
			
			//проверять будем по идентификатору
			Если НайтиПоПредставлению(СписокИсполнителейВЗадачахТочки, ИднИсполнителя)=Неопределено Тогда
				//исполнителю пока не выдавали задачу в этой точке на этом проходе
				ОтчетИсполнителя=СтрокаТаблицыИсполнителей.ОтчетИсполнителя;
				Если НЕ ЗначениеЗаполнено(ОтчетИсполнителя) Тогда
					//используем основной отчет из настройки точки действия
					ОтчетИсполнителя=ТочкаКБП.ДействиеОсновнойОтчетИсполнителей;
					
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ИсполнительСтрокиИсходный) Тогда
					ТекстОшибки="Внимание! В точке """+СокрЛП(ТочкаКБП)+""" не указан исполнитель (точка адресации). Задача не выдана.";
					ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
					Возврат Ложь;
				КонецЕсли;
				
				
				Если НЕ КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ИсполнительСтрокиИсходный) Тогда
					//исполнителя получим из ролевой адресации	
					ИсполнительСтроки=КП_ЗадачиПроцессов.ПолучитьИсполнителяПоРолиИАдресации(ИсполнительСтрокиИсходный);
					Если НЕ ЗначениеЗаполнено(ИсполнительСтроки) Тогда
						ТекстОшибки="Внимание! В точке """+СокрЛП(ТочкаКБП)+""" для роли и адресации ("+ИсполнительСтрокиИсходный+") исполнитель не определен. Задача не выдана.";
						ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						Возврат Ложь;
					КонецЕсли;
					
				Иначе
					ИсполнительСтроки=ИсполнительСтрокиИсходный;
				КонецЕсли;
				
				//обработаем заместителей
				Если НЕ ТочкаКБП.ДействиеНеУчитыватьЗаместителей Тогда
					ИсполнительСтрокиДоЗамены=ИсполнительСтроки;
					ИсполнительСтроки=КП_ЗадачиПроцессов.ПолучитьИсполнителяСУчетомМатрицыЗамены(ИсполнительСтроки, БизнесПроцесс);
					Если НЕ ЗначениеЗаполнено(ИсполнительСтроки) Тогда
						ТекстОшибки="Внимание! В точке """+СокрЛП(ТочкаКБП)+""" после замены """+СокрЛП(ИсполнительСтрокиДоЗамены)+""" на заместителя исполнитель оказался не заполнным. Задача не выдана.";
						ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
						Возврат Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТочкаКБП.ИсточникИсполнителей<=1 Тогда
					//обрабатываем только списки исполнителей
					Если ИсполнительСтроки<>ИсполнительСтрокиИсходный Тогда
						//заменим исполнителя и в таблице исполнителей
						ЗаменитьИсполнителя(ТочкаКБП, ИсполнительСтрокиИсходный, ИсполнительСтроки, СтрокаТаблицыИсполнителей.НомерСтроки);
					КонецЕсли;
				КонецЕсли;
				
				//проверим, есть ли рецензии в этой точке по этому исполнителю
				//если в рецензия одобрена и в точке включен флаг ДействиеВысылатьПовторныеЗадачиПоОдобреннымРезультатам
				ТочкаИсполнителяОдобрена=КП_ЗадачиПроцессов.ТочкаИсполнителяОдобрена(ТочкаКБП, ИсполнительСтроки);
				
				Если ТочкаИсполнителяОдобрена И НЕ ТочкаКБП.ДействиеВысылатьПовторныеЗадачиПоОдобреннымРезультатам Тогда
					КП_ЗадачиПроцессов.ЗаписатьЗадачуТочки(Неопределено, ТочкаКБП, ИсполнительСтроки, ИднИсполнителя, Истина, НомерПрохода, "Отменено как одобренное контролером");
					КП_Процессы.ЗаписатьВЖурналПроцесса("Результат исполнителя """+СокрЛП(ИсполнительСтроки)+""" в точке """+СокрЛП(ТочкаКБП)+""" уже одобрен контролером. Новая задача не выдана.", БизнесПроцесс, ТочкаКБП,,2);
					УстановитьСостояниеОбработкиТочки(ТочкаКБП, Перечисления.КП_СостояниеТочек.Выполняется);
					РезультатДальнейшейОбработки=ОбработатьТочкуДействия(ТочкаКБП);
					Возврат РезультатДальнейшейОбработки;
					
				КонецЕсли;
				
				СтруктураНовойЗадачи=Новый Структура;
				СтруктураНовойЗадачи.Вставить("БизнесПроцесс", БизнесПроцесс);
				СтруктураНовойЗадачи.Вставить("ТочкаКБП", ТочкаКБП);
				СтруктураНовойЗадачи.Вставить("Исполнитель", ИсполнительСтроки);
				СтруктураНовойЗадачи.Вставить("ОтчетИсполнителя", ОтчетИсполнителя);
				СтруктураНовойЗадачи.Вставить("ИндивидуальныйТекстЗадания", СтрокаТаблицыИсполнителей.ИндивидуальныйТекстЗадания);
				СтруктураНовойЗадачи.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаТаблицыИсполнителей.ИндивидуальноеНаименованиеЗадания);
				СтруктураНовойЗадачи.Вставить("СрокВыполненияЧасов", СтрокаТаблицыИсполнителей.СрокВыполненияЧасов);
				СтруктураНовойЗадачи.Вставить("СрокВыполненияДатаВремя", СтрокаТаблицыИсполнителей.СрокВыполненияДатаВремя);
				СтруктураНовойЗадачи.Вставить("НеИспользоватьГрафикРаботы", СтрокаТаблицыИсполнителей.НеИспользоватьГрафикРаботы);
				СтруктураНовойЗадачи.Вставить("ИднИсполнителя", СтрокаТаблицыИсполнителей.ИднИсполнителя);		
				
				Если ИсточникИсполнителей>=2 И ИсточникИсполнителей<=4 Тогда
					//исполнитель указан в переменной процесса
					Если ТочкаКБП.ИсполнителиТочки.Количество()>0 Тогда
						//для переменной были указаны значения параметров, получим их
						СтрокаПеременной=ТочкаКБП.ИсполнителиТочки[0];
						СтруктураНовойЗадачи.Вставить("ИндивидуальныйТекстЗадания", СтрокаПеременной.ИндивидуальныйТекстЗадания);
						СтруктураНовойЗадачи.Вставить("ИндивидуальноеНаименованиеЗадания", СтрокаПеременной.ИндивидуальноеНаименованиеЗадания);
						СтруктураНовойЗадачи.Вставить("СрокВыполненияЧасов", СтрокаПеременной.СрокВыполненияЧасов);
						СтруктураНовойЗадачи.Вставить("СрокВыполненияДатаВремя", СтрокаПеременной.СрокВыполненияДатаВремя);
						СтруктураНовойЗадачи.Вставить("НеИспользоватьГрафикРаботы", СтрокаПеременной.НеИспользоватьГрафикРаботы);
						
					КонецЕсли;
					
				КонецЕсли;
				
				СтруктураРезультатаВыдачи=КП_ЗадачиПроцессов.ВыдатьЗадачуИсполнителю(СтруктураНовойЗадачи, НомерПрохода);
				
				Если НЕ СтруктураРезультатаВыдачи.ЗавершеноУспешно Тогда
					Возврат Ложь;
				
				ИначеЕсли СтруктураРезультатаВыдачи.Отказ=Истина Тогда
					//зафиксирован отказ в выдаче задачи (ПриСоздании), запустим данный процесс еще раз, что бы перейти к следующей задаче
					УстановитьСостояниеОбработкиТочки(ТочкаКБП, Перечисления.КП_СостояниеТочек.Выполняется);
					РезультатДальнейшейОбработки=ОбработатьТочкуДействия(ТочкаКБП);
					Возврат РезультатДальнейшейОбработки;
					
				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//так как мы только выдали задачи, вернем Ложь
	ДействиеВыполненоПолностью=Ложь;
	
	Возврат ДействиеВыполненоПолностью;
	
КонецФункции

// Функция возвращает количество ссылок бизнес-процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ТолькоКорпоративныеДокументы - флаг использования только корпоративных документов
// Возвращаемое значение: Число
Функция ПолучитьКоличествоСсылокБизнесПроцесса(БизнесПроцесс, ТолькоКорпоративныеДокументы=Ложь) Экспорт
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	КОЛИЧЕСТВО(КП_СсылкиПроцессов.Объект) КАК КоличествоОбъектов
	             |ИЗ
	             |	РегистрСведений.КП_СсылкиПроцессов КАК КП_СсылкиПроцессов
	             |ГДЕ
	             |	КП_СсылкиПроцессов.БизнесПроцесс = &БизнесПроцесс";
						
						
	//Если ТолькоКорпоративныеДокументы Тогда
	//	ТекстЗапроса=ТекстЗапроса+" И КП_СсылкиПроцессов.Объект ССЫЛКА Документ.КП_КорпоративныйДокумент";
	//	
	//КонецЕсли;
						
	Запрос=Новый Запрос(ТекстЗапроса);
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоОбъектов;
		
	Иначе
		Возврат 0;
		
	КонецЕсли;

КонецФункции

// Функция формирует и возвращает список ссылок бизнес-процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ТолькоПервыйЭлемент - флаг использования только первого элемента
//		ТолькоКорпоративныеДокументы - флаг использования тоько корпоративного документа
// Возвращаемое значение: Список значений
Функция ПолучитьСписокСсылокПроцесса(БизнесПроцесс, ТолькоПервыйЭлемент=Ложь) Экспорт
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ "+?(ТолькоПервыйЭлемент, "ПЕРВЫЕ 1", "")+"
                |	КП_СсылкиПроцессов.Объект,
				|	КП_СсылкиПроцессов.Примечание
                |ИЗ
                |	РегистрСведений.КП_СсылкиПроцессов КАК КП_СсылкиПроцессов
                |ГДЕ
                |	КП_СсылкиПроцессов.БизнесПроцесс = &БизнесПроцесс";
						
												
	Запрос=Новый Запрос(ТекстЗапроса);
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокСсылок=Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ОбъектСсылка=Выборка.Объект;		
		Представление=СокрЛП(ОбъектСсылка);
					
		Если СписокСсылок.НайтиПоЗначению(ОбъектСсылка)=Неопределено Тогда
			СписокСсылок.Добавить(ОбъектСсылка, Представление);
			
		КонецЕсли;
		
		Если ТолькоПервыйЭлемент Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокСсылок;
	
КонецФункции

// Функция формирует и возвращает наименование типа реквизита 
// Параметры:
//		РеквизитПроцесса - реквизит бизнес-процесса 
// Возвращаемое значение: Строка
Функция ПолучитьНаименованиеТипаРеквизита(РеквизитПроцесса) Экспорт
	
	ТипРеквизита=РеквизитПроцесса.ТипРеквизита;
	НаименованиеТипаРеквизита=ТипРеквизита.ПолноеНаименование;
	
	Если ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеСправочники Тогда
		НаименованиеТипаРеквизита=СтрЗаменить(НаименованиеТипаРеквизита, "Справочник.", "СправочникСсылка.");
		
	ИначеЕсли ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеДокументы Тогда
		НаименованиеТипаРеквизита=СтрЗаменить(НаименованиеТипаРеквизита, "Документ.", "ДокументСсылка.");
		
	КонецЕсли;
	
	Возврат НаименованиеТипаРеквизита;
	
КонецФункции

// Функция возвращает описание типа реквизита 
// Параметры:
//		РеквизитПроцесса - реквизит бизнес-процесса 
// Возвращаемое значение: Ограничение типа
Функция ПолучитьОписаниеТипаРеквизитаПроцесса(РеквизитПроцесса) Экспорт
	
	Если Найти(НРег(РеквизитПроцесса.ТипРеквизита), "объект не найден")>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка в типе реквизита ';en='Variable type error ';")+СокрЛП(РеквизитПроцесса));
		Возврат Неопределено;
	КонецЕсли;
	
	Если РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеДокументы Тогда
		НазваниеТипа=РеквизитПроцесса.ТипРеквизита.ПолноеНаименование;
		НазваниеТипа=СтрЗаменить(НазваниеТипа, "Документ.", "ДокументСсылка.");
		ОграничениеТипаРеквизита=Новый ОписаниеТипов(НазваниеТипа);
		
	ИначеЕсли РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.МетаданныеСправочники Тогда
		НазваниеТипа=РеквизитПроцесса.ТипРеквизита.ПолноеНаименование;
		НазваниеТипа=СтрЗаменить(НазваниеТипа, "Справочник.", "СправочникСсылка.");
		ОграничениеТипаРеквизита=Новый ОписаниеТипов(НазваниеТипа);
		
	ИначеЕсли РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Числа Тогда
		КвалификаторЧисла=Новый КвалификаторыЧисла(РеквизитПроцесса.ТипРеквизита.РеквизитДлина, РеквизитПроцесса.ТипРеквизита.РеквизитТочность, ДопустимыйЗнак.Любой);
		ОграничениеТипаРеквизита=Новый ОписаниеТипов("Число", КвалификаторЧисла);
		
	ИначеЕсли РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Гиперссылка Тогда
		ОграничениеТипаРеквизита=Новый ОписаниеТипов("ФорматированнаяСтрока");
		
	ИначеЕсли РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Строки Тогда
		КвалификаторСтроки=Новый КвалификаторыСтроки(РеквизитПроцесса.ТипРеквизита.РеквизитДлина);
		ОграничениеТипаРеквизита=Новый ОписаниеТипов("Строка", , КвалификаторСтроки);
		
	ИначеЕсли РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Дата Тогда
		КвалификаторДаты=Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		ОграничениеТипаРеквизита=Новый ОписаниеТипов("Дата", ,КвалификаторДаты);
		
	ИначеЕсли РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Булево Тогда
		ОграничениеТипаРеквизита=Новый ОписаниеТипов("Булево");
		
	ИначеЕсли РеквизитПроцесса.ТипРеквизита.ПринадлежитЭлементу(Справочники.КП_СписокМетаданных.Свойства) Тогда
		НазваниеТипа="СправочникСсылка.ЗначенияСвойствОбъектов";
		ОграничениеТипаРеквизита=Новый ОписаниеТипов(НазваниеТипа);
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для реквизита ""';en='For variable ""'")+СокрЛП(РеквизитПроцесса)+НСтр("ru='"" не определен тип объекта.'; en=' data type is not set.'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат ОграничениеТипаРеквизита;
	
КонецФункции

// Функция создает список исполнителей бизнес-процесса 
// Параметры:
//		Объект - ссылка на объект
//		РабочаяГруппа - ссылка на рабочую группу
// Возвращаемое значение: Истина или Ложь
Функция СоздатьДинамическийСписокИсполнителей(Знач Объект, РабочаяГруппа=Неопределено) Экспорт
	
	БизнесПроцесс=Объект.Ссылка;
	
	//очистим список
	НаборИсполнителей=РегистрыСведений.КП_ОсновныеИсполнителиПроцесса.СоздатьНаборЗаписей();
	
	НаборИсполнителей.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);

	НаборИсполнителей.Прочитать();
	
	Попытка
		НаборИсполнителей.Очистить();
		НаборИсполнителей.Записать(Истина);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;	

	//Если НЕ ЗначениеЗаполнено(РабочаяГруппа) Тогда
		//скопируем данные строки основного списка исполнителей в динамическую таблицу исполнителей
	
		Для Каждого СтрокаТЧ Из Объект.ОсновныеИсполнители Цикл

			ТочкаАдресации=СтрокаТЧ.ТочкаАдресации;
			НомерСтрокиИсполнителя=СтрокаТЧ.НомерСтроки;
			
			ЗаписьИсполнителя=РегистрыСведений.КП_ОсновныеИсполнителиПроцесса.СоздатьМенеджерЗаписи();
			
			ЗаписьИсполнителя.БизнесПроцесс=БизнесПроцесс;
			ЗаписьИсполнителя.ТочкаАдресации=ТочкаАдресации;
			ЗаписьИсполнителя.ИднИсполнителя=КП_ОбщееСервер.СформироватьИднИсполнителя(ТочкаАдресации);
			
			ЗаписьИсполнителя.ОтчетИсполнителя=СтрокаТЧ.ОтчетИсполнителя;
			ЗаписьИсполнителя.СрокВыполненияТекст=СтрокаТЧ.СрокВыполненияТекст;
			ЗаписьИсполнителя.ИндивидуальноеНаименованиеЗадания=СтрокаТЧ.ИндивидуальноеНаименованиеЗадания;
			ЗаписьИсполнителя.ИндивидуальныйТекстЗадания=СтрокаТЧ.ИндивидуальныйТекстЗадания;
			ЗаписьИсполнителя.СрокВыполненияЧасов=СтрокаТЧ.СрокВыполненияЧасов;
			ЗаписьИсполнителя.СрокВыполненияДатаВремя=СтрокаТЧ.СрокВыполненияДатаВремя;
			ЗаписьИсполнителя.НеИспользоватьГрафикРаботы=СтрокаТЧ.НеИспользоватьГрафикРаботы;
			
			ЗаписьИсполнителя.НомерСтрокиИсполнителя=НомерСтрокиИсполнителя;
			
			Попытка
				ЗаписьИсполнителя.Записать(Истина);
				
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
	//Иначе
	Если ЗначениеЗаполнено(РабочаяГруппа) Тогда	
		//список из рабочей группы
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	КП_РабочиеГруппыСотрудники.ТочкаАдресации,
		                    |	КП_РабочиеГруппыСотрудники.НомерСтроки
		                    |ИЗ
		                    |	Справочник.КП_РабочиеГруппы.Сотрудники КАК КП_РабочиеГруппыСотрудники
		                    |ГДЕ
		                    |	КП_РабочиеГруппыСотрудники.Ссылка = &РабочаяГруппа
		                    |	И КП_РабочиеГруппыСотрудники.ТочкаАдресации ЕСТЬ НЕ NULL 
		                    |	И КП_РабочиеГруппыСотрудники.ТочкаАдресации.ПометкаУдаления = ЛОЖЬ");
						
		Запрос.УстановитьПараметр("РабочаяГруппа", РабочаяГруппа);
		
		Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Пока Выборка.Следующий() Цикл
			//создадим записи на основе рабочей группы

			ТочкаАдресации=Выборка.ТочкаАдресации;
			НомерСтрокиИсполнителя=Выборка.НомерСтроки;
			
			ЗаписьИсполнителя=РегистрыСведений.КП_ОсновныеИсполнителиПроцесса.СоздатьМенеджерЗаписи();
			
			ЗаписьИсполнителя.БизнесПроцесс=БизнесПроцесс;
			ЗаписьИсполнителя.ТочкаАдресации=ТочкаАдресации;
			ЗаписьИсполнителя.ИднИсполнителя=КП_ОбщееСервер.СформироватьИднИсполнителя(ТочкаАдресации);
			
			ЗаписьИсполнителя.ОтчетИсполнителя=Неопределено;
			ЗаписьИсполнителя.СрокВыполненияТекст="";
			ЗаписьИсполнителя.ИндивидуальноеНаименованиеЗадания="";
			ЗаписьИсполнителя.ИндивидуальныйТекстЗадания="";
			ЗаписьИсполнителя.СрокВыполненияЧасов=-1;
			
			ЗаписьИсполнителя.НомерСтрокиИсполнителя=НомерСтрокиИсполнителя;
			
			Попытка
				ЗаписьИсполнителя.Записать(Истина);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция производит замену исполнителя  
// Параметры:
//		ТочкаКБП - маршрутная точка 
//		ИсполнительСтрокиИсходный - ссылка на исходного исполнителя строки
//		ИсполнительНовый - ссылка на нового исполнителя строки
//		НомерСтроки - номер строки
// Возвращаемое значение: Истина или Ложь
Функция ЗаменитьИсполнителя(ТочкаКБП, ИсполнительСтрокиИсходный, ИсполнительНовый, НомерСтроки)
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	ЗаписатьВЖурналПроцесса("Замена исполнителя: "+СокрЛП(ИсполнительСтрокиИсходный)+" на "+СокрЛП(ИсполнительНовый), БизнесПроцесс, ТочкаКБП);
	
	//0 - динамический список, 1 - фиксированный список, 2 - автор процесса, 3 - контролер, 4- исполнитель в реквизите
	ИсточникИсполнителей=ТочкаКБП.ИсточникИсполнителей;
	
	Если ИсточникИсполнителей=0 Тогда
		//заменим запись в регистре основных исполнителей процесса
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ТочкаАдресации", ИсполнительСтрокиИсходный);
		СтруктураОтбора.Вставить("НомерСтрокиИсполнителя", НомерСтроки);

		МенеджерЗаписи=РегистрыСведений.КП_ОсновныеИсполнителиПроцесса.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.БизнесПроцесс=БизнесПроцесс;
		МенеджерЗаписи.ТочкаАдресации=ИсполнительСтрокиИсходный;
		МенеджерЗаписи.НомерСтрокиИсполнителя=НомерСтроки;
		МенеджерЗаписи.Прочитать();

		МенеджерЗаписи.ТочкаАдресации=ИсполнительНовый;
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	ИначеЕсли ИсточникИсполнителей=1 Тогда
		//заменим исполнителя в точке КБП
		ТочкаКБПОбъект=ТочкаКБП.ПолучитьОбъект();
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ТочкаАдресации", ИсполнительСтрокиИсходный);
		СтруктураОтбора.Вставить("НомерСтроки", НомерСтроки);
		МассивСтрок=ТочкаКБПОбъект.ИсполнителиТочки.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка поиска строки ""';en='Error search string ""'")+СокрЛП(ИсполнительСтрокиИсходный)+НСтр("ru='"" (';")+СокрЛП(НомерСтроки)+НСтр("ru=') в таблице исполнителей точки ""';en=') In Table users point ""'")+СокрЛП(ТочкаКБП)+""".");
	        Возврат Ложь;
		Иначе
			СтрокаИсполнителя=МассивСтрок[0];
		КонецЕсли;
		
		СтрокаИсполнителя.ТочкаАдресации=ИсполнительНовый;
		
		Попытка
			ТочкаКБПОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает структуру результата контроля точки 
// Параметры:
//		ТочкаКБП - маршрутная точка 
//		Исполнитель - 
// Возвращаемое значение: Структура данных
Функция ПолучитьСтруктуруРезультатаКонтроляТочки(ТочкаКБП, Исполнитель=Неопределено)
	
	Если Исполнитель=Неопределено Тогда
		Исполнитель=Справочники.Пользователи.ПустаяСсылка();
		
	КонецЕсли;
	
	ДатаРецензии=ТекущаяДата();
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_РецензииКонтролеровСрезПоследних.РезультатОдобрен,
	                    |	КП_РецензииКонтролеровСрезПоследних.Период КАК Период,
	                    |	КП_РецензииКонтролеровСрезПоследних.ТекстРецензии
	                    |ИЗ
	                    |	РегистрСведений.КП_РецензииКонтролеров.СрезПоследних(
	                    |			&ДатаКон,
	                    |			ТочкаКБП = &ТочкаКБП
	                    |				И Исполнитель = &Исполнитель) КАК КП_РецензииКонтролеровСрезПоследних
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	Период УБЫВ");
						
	Запрос.УстановитьПараметр("ДатаКон", ДатаРецензии);
	Запрос.УстановитьПараметр("ТочкаКБП", ТочкаКБП);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СтруктураРезультата=Новый Структура("РезультатОдобрен, ТекстРецензии", Ложь, "");
	
	Если Выборка.Следующий() Тогда
		СтруктураРезультата.РезультатОдобрен=Выборка.РезультатОдобрен;
		СтруктураРезультата.ТекстРецензии=Выборка.ТекстРецензии;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

// Функция возвращает значение параметра процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ПараметрПроцесса - параметр процесса 
//		ДатаПараметра - дата параметра
// Возвращаемое значение: Значение параметра
Функция ПолучитьЗначениеПараметраПроцесса(БизнесПроцесс, ПараметрПроцесса, ДатаПараметра=Неопределено) Экспорт
	
	Если ДатаПараметра=Неопределено Тогда
		ДатаПараметра=ТекущаяДата();
		
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_ПараметрыКорпоративныхПроцессовСрезПоследних.ЗначениеПараметра
	                    |ИЗ
	                    |	РегистрСведений.КП_ПараметрыПроцессов.СрезПоследних(
	                    |			&ДатаПараметра,
	                    |			БизнесПроцесс = &БизнесПроцесс
	                    |				И ПараметрПроцесса = &ПараметрПроцесса) КАК КП_ПараметрыКорпоративныхПроцессовСрезПоследних");
						
	Запрос.УстановитьПараметр("ДатаПараметра", ДатаПараметра);
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ПараметрПроцесса", ПараметрПроцесса);

	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеПараметра;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция устанавливает значение параметра процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ПараметрПроцесса - параметр процесса 
//		ЗначениеПараметра - значение параметра процесса 
//		ДатаПараметра - дата параметра
// Возвращаемое значение: Значение параметра
Функция УстановитьЗначениеПараметраПроцесса(БизнесПроцесс, ПараметрПроцесса, ЗначениеПараметра, ДатаПараметра=Неопределено) Экспорт
	
	Если ДатаПараметра=Неопределено Тогда
		ДатаПараметра=ТекущаяДата();
		
	КонецЕсли;
	
	//добавим запись в регистр точек в работе
	
	РегПараметров=РегистрыСведений.КП_ПараметрыПроцессов.СоздатьНаборЗаписей();
	РегПараметров.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегПараметров.Отбор.ПараметрПроцесса.Установить(ПараметрПроцесса);
	РегПараметров.Прочитать();
		
	КоличествоЗаписей=РегПараметров.Количество();
		
	Если КоличествоЗаписей>0 Тогда
		ЗаписьРегистра=РегПараметров[КоличествоЗаписей-1];
		
	Иначе
		ЗаписьРегистра=РегПараметров.Добавить();
		ЗаписьРегистра.БизнесПроцесс=БизнесПроцесс;
		ЗаписьРегистра.ПараметрПроцесса=ПараметрПроцесса;
	КонецЕсли;
	
	ЗаписьРегистра.Период=ДатаПараметра;
	ЗаписьРегистра.ЗначениеПараметра=ЗначениеПараметра;
	
	Попытка
		РегПараметров.Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция проверяет завершение подпроцесса бизнес-процесса
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Истина или Ложь
Функция ПроверитьЗавершениеПодпроцесса(БизнесПроцесс)
	
	Если БизнесПроцесс.Завершен Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	//проверим завершение по состоянию точеки завершения, т.к. сам 
	//процесс еще может не получить статуса Завершен, но весь маршрут уже выполнен
	
	СписокТочекЗавершения=КП_СхемаКБПСервер.ПолучитьСписокТочекПоТипу(БизнесПроцесс, Перечисления.КП_ВидыТочекБизнесПроцесса.Завершение);
	
	Если СписокТочекЗавершения.Количество()=0 Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокТочекЗавершения Цикл
		ТочкаЗавершения=ЭлементСписка.Значение;
		
		СостояниеТочки=ПолучитьСтруктуруСостоянияТочки(ТочкаЗавершения).Состояние;
		Если СостояниеТочки=Неопределено Тогда
			Продолжить;
			
		ИначеЕсли СостояниеТочки=Перечисления.КП_СостояниеТочек.Выполнена Тогда
			//нашли выполненную точку завершения, считаем процесс выполненным
			Возврат Истина;
			
		КонецЕсли;
		
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Функция формирует и возвращает таблицу реквизитов процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		ДатаРеквизитов - дата реквизитов
// Возвращаемое значение: Таблица значений
Функция ПолучитьТаблицуРеквизитовПроцессаДляФормы(БизнесПроцесс, ДатаРеквизитов=Неопределено) Экспорт
	
	Если ДатаРеквизитов=Неопределено Тогда
		ДатаРеквизитов=ТекущаяДата();
		
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.ЗначениеРеквизита,
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.РеквизитПроцесса,
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.РеквизитПроцесса.НаименованиеВФорме
	                    |ИЗ
	                    |	РегистрСведений.КП_РеквизитыЭкземпляраПроцесса.СрезПоследних(&ДатаКон, БизнесПроцесс = &БизнесПроцесс) КАК КП_РеквизитыЭкземпляраПроцессаСрезПоследних
	                    |ГДЕ
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.РеквизитПроцесса.ПометкаУдаления = ЛОЖЬ
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.Порядок");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ДатаКон", ДатаРеквизитов);
	
	ТаблицаРеквизитов=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Функция возвращает общее количество исполнителей процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Число
Функция ОбщееКоличествоИсполнителей(БизнесПроцесс) Экспорт
	
	//выберем исполнителей (точки адресации) из списка основных исполнителей процесса, а так же списка точек процесса
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.ТочкаАдресации) КАК ТочкаАдресацииКоличество
	                    |ИЗ
	                    |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |		КП_БизнесПроцессОсновныеИсполнители.ТочкаАдресации КАК ТочкаАдресации
	                    |	ИЗ
	                    |		БизнесПроцесс.КП_БизнесПроцесс.ОсновныеИсполнители КАК КП_БизнесПроцессОсновныеИсполнители
	                    |	ГДЕ
	                    |		КП_БизнесПроцессОсновныеИсполнители.Ссылка = &БизнесПроцесс
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |		КП_ТочкиПроцессовИсполнителиТочки.ТочкаАдресации
	                    |	ИЗ
	                    |		Справочник.КП_ТочкиПроцессов.ИсполнителиТочки КАК КП_ТочкиПроцессовИсполнителиТочки
	                    |	ГДЕ
	                    |		КП_ТочкиПроцессовИсполнителиТочки.Ссылка.ВладелецТочки = &БизнесПроцесс) КАК ВложенныйЗапрос");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		КоличествоПрямыхИсполнителей=Выборка.ТочкаАдресацииКоличество;
		
	Иначе
		КоличествоПрямыхИсполнителей=0;
		
	КонецЕсли;
	
	СписокРабочихГруппТочек=КП_ЗадачиПроцессов.ПолучитьСписокРабочихГруппТочек(БизнесПроцесс);
	
	//получим количество исполнителей в рабочих группах
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	КОЛИЧЕСТВО(КП_РабочиеГруппыСотрудники.ТочкаАдресации) КАК ТочкаАдресацииКоличество
	                    |ИЗ
	                    |	Справочник.КП_РабочиеГруппы.Сотрудники КАК КП_РабочиеГруппыСотрудники
	                    |ГДЕ
	                    |	КП_РабочиеГруппыСотрудники.Ссылка В(&СписокРабочихГрупп)
	                    |	И КП_РабочиеГруппыСотрудники.ТочкаАдресации ЕСТЬ НЕ NULL
						|	И КП_РабочиеГруппыСотрудники.ТочкаАдресации.ПометкаУдаления = ЛОЖЬ");
						
	Запрос.УстановитьПараметр("СписокРабочихГрупп", СписокРабочихГруппТочек);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		КоличествоВРабочихГруппах=Выборка.ТочкаАдресацииКоличество;
	Иначе
		КоличествоВРабочихГруппах=0;		
	КонецЕсли;
	
	КоличествоИсполнителей=КоличествоПрямыхИсполнителей+КоличествоВРабочихГруппах;
	
	//добавим исполнителей которые могут быть указаны в переменных процесса
	//но заполненность переменных не проверяем, так как они могут быть заполнены программно
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КОЛИЧЕСТВО(КП_ТочкиПроцессов.Ссылка) КАК ПеременнаяКоличество
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ИсточникИсполнителей > 1
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &БизнесПроцесс
	                    |	И КП_ТочкиПроцессов.ПометкаУдаления = Ложь");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		КоличествоИсполнителей=КоличествоИсполнителей+Выборка.ПеременнаяКоличество;
	КонецЕсли;
	
	Возврат КоличествоИсполнителей;
	
КонецФункции

// Процедура добавляет объект в список ссылок процесса
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
//		СсылкаНаОбъект - 
Процедура ДобавитьОбъектВСписокСсылок(БизнесПроцесс, СсылкаНаОбъект) Экспорт
	
	РегистрСсылок=РегистрыСведений.КП_СсылкиПроцессов.СоздатьНаборЗаписей();
	РегистрСсылок.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегистрСсылок.Отбор.Объект.Установить(СсылкаНаОбъект);
	
	РегистрСсылок.Прочитать();
	
	Если РегистрСсылок.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Бизнес-процесс уже ""';en='A business process is ""'")+СокрЛП(СсылкаНаОбъект)+""".");
		Возврат;
		
	КонецЕсли;
	
	НоваяЗапись=РегистрСсылок.Добавить();
	НоваяЗапись.БизнесПроцесс=БизнесПроцесс;
	НоваяЗапись.Объект=СсылкаНаОбъект;
	
	Попытка
		РегистрСсылок.Записать(Истина);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура получает управление из регламентного задания и выполняется обработку таймеров процессов
Процедура ОбработатьТаймеры() Экспорт
	//получим список таймеров
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	КП_ТочкиПроцессов.Ссылка КАК ТочкаКБП,
	                    |	КП_ТочкиПроцессов.ОбработкаТипДаты КАК ТипДаты,
	                    |	КП_ТочкиПроцессов.ОбработкаРеквизитСДатой,
	                    |	КП_ТочкиПроцессов.ОбработкаДата,
	                    |	КП_ТочкиПроцессов.ВладелецТочки КАК БизнесПроцесс
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ТипТочки = ЗНАЧЕНИЕ(Перечисление.КП_ВидыТочекБизнесПроцесса.Обработка)
	                    |	И КП_ТочкиПроцессов.ВладелецТочки ССЫЛКА БизнесПроцесс.КП_БизнесПроцесс
	                    |	И КП_ТочкиПроцессов.ТипОбработки = 4");
						
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		БизнесПроцесс=Выборка.БизнесПроцесс;
		ТочкаКБП=Выборка.ТочкаКБП;
		//проверим состояние точки, если она не выполняется, то продолжим обработку других таймеров
		СостояниеТаймера=КП_Процессы.ПолучитьСтруктуруСостоянияТочки(ТочкаКБП).Состояние;
		Если СостояниеТаймера<>Перечисления.КП_СостояниеТочек.Выполняется Тогда
			//до таймера еще не дошел процесс
			Продолжить;
			
		КонецЕсли;
		
		ТипДаты=Выборка.ТипДаты;
		Если ТипДаты=0 Тогда
			ДатаСрабатывания=ТекущаяДата();
			
		ИначеЕсли ТипДаты=1 Тогда
			ДатаСрабатывания=Выборка.ОбработкаДата;
			
		ИначеЕсли ТипДаты=2 Тогда
			ДатаСрабатывания=КП_Процессы.ПолучитьЗначениеРеквизитаПроцесса(БизнесПроцесс, Выборка.ОбработкаРеквизитСДатой);
			
		ИначеЕсли ТипДаты=3 Тогда
			ТаймерСекунд=Выборка.ОбработкаДата-Дата("00010101");
			
			//получим данные о начале таймера из регистра КП_ОбработкаТочек
			ДатаНачалаРаботыТаймера=ПолучитьДатуНачалаРаботыТаймера(ТочкаКБП);
			Если НЕ ЗначениеЗаполнено(ДатаНачалаРаботыТаймера) Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаСрабатывания=ДатаНачалаРаботыТаймера+ТаймерСекунд;
			
		Иначе
			Продолжить;
			
		КонецЕсли;
		
		Если ТекущаяДата()<ДатаСрабатывания Тогда
			//дата срабатывания еще не наступила
			Продолжить;
			
		КонецЕсли;
		
		//обработаем точку таймера
		
		ИсточникОбработки=Выборка.ТочкаКБП;
		ОбработатьМаршрутКБП(БизнесПроцесс, ИсточникОбработки);
		
	КонецЦикла;

КонецПроцедуры

// Функция находит по представлению нужный элемент списка 
// Параметры:
//		ИсходныйСписок - исходный список значений
//		ИскомоеПредставление - значение, которое необходимо найти
// Возвращаемое значение: Истина
Функция НайтиПоПредставлению(ИсходныйСписок, ИскомоеПредставление)
	Для Каждого ЭлементСписка Из ИсходныйСписок Цикл
		Если ЭлементСписка.Представление=ИскомоеПредставление Тогда
			Возврат ЭлементСписка.Значение;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
		
КонецФункции
	
// Функция возвращет связь реквизита с планом видов характеристик 
// Параметры:
//		РеквизитПроцесса - реквизит бизнес-процесса 
// Возвращаемое значение: Истина
Функция ПолучитьСвязьРеквизитаСПВХ(РеквизитПроцесса) Экспорт
	Возврат РеквизитПроцесса.ТипРеквизита.СвязьСПВХ;
	
КонецФункции
			
// Процедура записывает список ссылок процесса
// Параметры:
//		Подпроцесс - ссылка на подпроцесс
//		СписокСсылокПроцесса - список значений со ссылками процесса
Процедура ЗаписатьСписокСсылокПроцесса(Подпроцесс, СписокСсылокПроцесса) Экспорт
	
	Для Каждого ЭлементСписка Из СписокСсылокПроцесса Цикл
		СсылкаНаОбъект=ЭлементСписка.Значение;
		КП_Процессы.ДобавитьОбъектВСписокСсылок(Подпроцесс, СсылкаНаОбъект);

	КонецЦикла;
	
КонецПроцедуры

// Функция формирует и возвращает таблицу исполнителей по рабочей группе 
// Параметры:
//		ВидПроцесса - вид процесса
// Возвращаемое значение: Таблица значений
Функция ПолучитьТаблицуИсполнителейПоРабочейГруппе(ВидПроцесса)
	
	//подготовим таблицу
	ТаблицаИсполнителей=Новый ТаблицаЗначений;
	ТаблицаИсполнителей=ВидПроцесса.ОсновныеИсполнители.Выгрузить();
	ТаблицаИсполнителей.Очистить();
	
	Если ВидПроцесса.ОсновныеИсполнители.Количество()=1 Тогда
		СтрокаРГ=ВидПроцесса.ОсновныеИсполнители[0];
	Иначе
		СтрокаРГ=Неопределено;
	КонецЕсли;
	
	РабочаяГруппа=ВидПроцесса.РабочаяГруппаОсновныхИсполнителей;
	Если НЕ ЗначениеЗаполнено(РабочаяГруппа) Тогда
		Если НЕ ЗначениеЗаполнено(РабочаяГруппа) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! В рабочей группе ""';en='In the Workgroup ""'")+СокрЛП(РабочаяГруппа)+НСтр("ru='"" нет исполонителей.';"));
        	Возврат ТаблицаИсполнителей;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ЭлементИсполнителя Из РабочаяГруппа.Сотрудники Цикл
		ИсполнительГруппы=ЭлементИсполнителя.ТочкаАдресации;
		НоваяСтрока=ТаблицаИсполнителей.Добавить();
		НоваяСтрока.ТочкаАдресации=ИсполнительГруппы;
		НоваяСтрока.ИднИсполнителя=КП_ОбщееСервер.СформироватьИднИсполнителя(ИсполнительГруппы);
		
		Если СтрокаРГ=Неопределено Тогда
			НоваяСтрока.СрокВыполненияЧасов=-1;
		Иначе
			//скопируем данные строки настройки рабочей группы в строку исполнителя
			НоваяСтрока.ОтчетИсполнителя=СтрокаРГ.ОтчетИсполнителя;
			НоваяСтрока.СрокВыполненияТекст=СтрокаРГ.СрокВыполненияТекст;
			НоваяСтрока.ИндивидуальныйТекстЗадания=СтрокаРГ.ИндивидуальныйТекстЗадания;
			НоваяСтрока.ИндивидуальноеНаименованиеЗадания=СтрокаРГ.ИндивидуальноеНаименованиеЗадания;
			НоваяСтрока.СрокВыполненияЧасов=СтрокаРГ.СрокВыполненияЧасов;
			НоваяСтрока.ВидНаправленияПараллельное=СтрокаРГ.ВидНаправленияПараллельное;
			НоваяСтрока.НеИспользоватьГрафикРаботы=СтрокаРГ.НеИспользоватьГрафикРаботы;
			НоваяСтрока.ВидНаправленияПараллельное=СтрокаРГ.ВидНаправленияПараллельное;
			НоваяСтрока.СрокВыполненияДатаВремя=СтрокаРГ.СрокВыполненияДатаВремя;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаИсполнителей;
	
КонецФункции

// Функция выполняет создание нового бизнес-процесса
// Параметры:
//		ВидПроцесса - вид корпоративного процесса
// Возвращаемое значение: Ссылка на созданный бизнес-процесс
Функция СоздатьБизнесПроцесс(ВидПроцесса, АвторПроцесса, РабочаяГруппа=Неопределено) Экспорт
	
	//создаем новый процесс
	НовыйПроцессОбъект=БизнесПроцессы.КП_БизнесПроцесс.СоздатьБизнесПроцесс();
	
	//заполним параметры нового подпроцесса
	НовыйПроцессОбъект.ВидПроцесса=ВидПроцесса;
	НовыйПроцессОбъект.Дата=ТекущаяДата();
	
	Если НЕ ЗначениеЗаполнено(АвторПроцесса) Тогда
		АвторПроцесса=Пользователи.ТекущийПользователь();		
	КонецЕсли;
	
	НовыйПроцессОбъект.Автор=АвторПроцесса;
	
	Если ЗначениеЗаполнено(ВидПроцесса.Контролер) Тогда
		КонтролерПроцесса=ВидПроцесса.Контролер;
	Иначе
		КонтролерПроцесса=АвторПроцесса;
	КонецЕсли;
		
	НовыйПроцессОбъект.Контролер=КонтролерПроцесса;
	
	НовыйПроцессОбъект.ИднАвтора=КП_ОбщееСервер.СформироватьИднИсполнителя(НовыйПроцессОбъект.Автор);
	НовыйПроцессОбъект.ИднКонтролера=КП_ОбщееСервер.СформироватьИднИсполнителя(КонтролерПроцесса);
	
	НовыйПроцессОбъект.ОсновныеИсполнители.Загрузить(ВидПроцесса.ОсновныеИсполнители.Выгрузить());
			
	Попытка
		НовыйПроцессОбъект.Записать();
		НовыйПроцесс=НовыйПроцессОбъект.Ссылка;	
	Исключение
		СтрокаОшибки="Ошибка записи нового процесса """+СокрЛП(НовыйПроцесс)+"""! "+ОписаниеОшибки();
		Возврат Неопределено;		
	КонецПопытки;
	
	СписокИницализирован=КП_Процессы.СоздатьДинамическийСписокИсполнителей(НовыйПроцессОбъект.Ссылка, РабочаяГруппа);
	Если НЕ СписокИницализирован Тогда
		Возврат Ложь;	
	КонецЕсли;
			
	//скопируем точки из вида в подпроцесс
	КП_СхемаКБПСервер.СкопироватьТочкиВидаВЭкземплярБП(ВидПроцесса, НовыйПроцесс.Ссылка);
	
	//заполним процесс по выбранному виду (в том числе скопируем реквизиты)	
	ЗаполнятьСхемуПроцесса=Истина;
	ЗаполнятьТекстПроцесса=Истина;
	КП_Процессы.ЗаполнитьПроцессПоВиду(НовыйПроцессОбъект, ВидПроцесса, ЗаполнятьСхемуПроцесса, ЗаполнятьТекстПроцесса);
	
	Попытка
		НовыйПроцессОбъект.Записать();
		НовыйПроцесс=НовыйПроцессОбъект.Ссылка;
	Исключение
		ТекстОшибки="Ошибка записи нового процесса """+СокрЛП(НовыйПроцесс)+"""! "+ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Создание бизнес-процесса.", УровеньЖурналаРегистрации.Ошибка, ВидПроцесса, , ТекстОшибки);
		Возврат Неопределено;		
	КонецПопытки;
				
	//заполним маршрутную сеть процесса
	КП_СхемаКБПСервер.ЗаполнитьСетьМаршрутныхТочек(НовыйПроцессОбъект, Ложь);
	
	//запишем процесс
	Попытка
		НовыйПроцессОбъект.Записать();
		НовыйПроцесс=НовыйПроцессОбъект.Ссылка;	
	Исключение
		ТекстОшибки="Ошибка записи нового процесса """+СокрЛП(НовыйПроцесс)+"""! "+ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Создание бизнес-процесса.", УровеньЖурналаРегистрации.Ошибка, ВидПроцесса, , ТекстОшибки);
		Возврат Неопределено;		
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(НовыйПроцесс.Контролер) Тогда
		ТекстСообщения="В процессе """+СокрЛП(НовыйПроцесс.Наименование)+""" не указан контролер.";
		ЗаписьЖурналаРегистрации("Создание бизнес-процесса.", УровеньЖурналаРегистрации.Примечание, НовыйПроцесс, , ТекстСообщения);		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НовыйПроцесс.Автор) Тогда
		ТекстСообщения="В процессе """+СокрЛП(НовыйПроцесс.Наименование)+""" не указан автор.";
		ЗаписьЖурналаРегистрации("Создание бизнес-процесса.", УровеньЖурналаРегистрации.Предупреждение, НовыйПроцесс, , ТекстСообщения);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РабочаяГруппа) И НЕ СписокИницализирован Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	//запишем параметры процесса
	СтруктураПараметровКБП=Новый Структура;
	СтруктураПараметровКБП.Вставить("ДатаСтарта", ТекущаяДата());
	КП_Процессы.СохранитьСтруктуруПараметровКБП(СтруктураПараметровКБП, НовыйПроцесс);
    		
	Возврат НовыйПроцессОбъект.Ссылка;
	
КонецФункции

// Функция ищет и возвращает вид процесса по его наименованию
// Параметры:
//		НаименованиеВида - наименование вида процесса
// Возвращаемое значение: Ссылка на вид процесса
Функция ПолучитьВидПоНаименованию(НаименованиеВида) Экспорт
	
	ВидПроцесса=Справочники.КП_ВидыПроцессов.НайтиПоНаименованию(НаименованиеВида, Истина);
	
	Если НЕ ЗначениеЗаполнено(ВидПроцесса) Тогда
		Возврат Неопределено;
	Иначе
		Возврат ВидПроцесса;
	КонецЕсли;
	
КонецФункции

// Функция возвращает общее количество исполнителей процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс
// Возвращаемое значение: Число
Функция ПолучитьСписокВсехИсполнителейПроцесса(БизнесПроцесс) Экспорт
	
	СписокИсполнителей=Новый СписокЗначений;
	
	//выберем исполнителей (точки адресации) из списка основных исполнителей процесса, а так же списка точек процесса
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ВложенныйЗапрос.ТочкаАдресации КАК ТочкаАдресации
	                    |ИЗ
	                    |	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |		КП_БизнесПроцессОсновныеИсполнители.ТочкаАдресации КАК ТочкаАдресации
	                    |	ИЗ
	                    |		БизнесПроцесс.КП_БизнесПроцесс.ОсновныеИсполнители КАК КП_БизнесПроцессОсновныеИсполнители
	                    |	ГДЕ
	                    |		КП_БизнесПроцессОсновныеИсполнители.Ссылка = &БизнесПроцесс
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |		КП_ТочкиПроцессовИсполнителиТочки.ТочкаАдресации
	                    |	ИЗ
	                    |		Справочник.КП_ТочкиПроцессов.ИсполнителиТочки КАК КП_ТочкиПроцессовИсполнителиТочки
	                    |	ГДЕ
	                    |		КП_ТочкиПроцессовИсполнителиТочки.Ссылка.ВладелецТочки = &БизнесПроцесс) КАК ВложенныйЗапрос");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ТочкаАдресации=Выборка.ТочкаАдресации;
		
		Если КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ТочкаАдресации) Тогда
			//прямая адресация
			ИсполнительТочки=ТочкаАдресации;
			
		ИначеЕсли КП_ОбщееСерверПС.ЭтоРолеваяАдресацияИсполнителя(ТочкаАдресации) Тогда
			//ролевая адресация
			ИсполнительТочки=КП_ЗадачиПроцессов.ПолучитьИсполнителяПоРолиИАдресации(ТочкаАдресации);
			
		Иначе
			Продолжить;
			
		КонецЕсли;
		
		//обработаем заместителей
		ИсполнительТочки=КП_ЗадачиПроцессов.ПолучитьИсполнителяСУчетомМатрицыЗамены(ИсполнительТочки, БизнесПроцесс);		

		Если СписокИсполнителей.НайтиПоЗначению(ИсполнительТочки)=Неопределено Тогда
			СписокИсполнителей.Добавить(ИсполнительТочки);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокРабочихГруппТочек=КП_ЗадачиПроцессов.ПолучитьСписокРабочихГруппТочек(БизнесПроцесс);
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	КП_РабочиеГруппыСотрудники.ТочкаАдресации КАК ТочкаАдресации
	                    |ИЗ
	                    |	Справочник.КП_РабочиеГруппы.Сотрудники КАК КП_РабочиеГруппыСотрудники
	                    |ГДЕ
	                    |	КП_РабочиеГруппыСотрудники.Ссылка В(&СписокРабочихГрупп)
	                    |	И КП_РабочиеГруппыСотрудники.ТочкаАдресации ЕСТЬ НЕ NULL 
						|	И КП_РабочиеГруппыСотрудники.ТочкаАдресации.ПометкаУдаления = ЛОЖЬ");
						
	Запрос.УстановитьПараметр("СписокРабочихГрупп", СписокРабочихГруппТочек);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		ТочкаАдресации=Выборка.ТочкаАдресации;
		
		Если КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ТочкаАдресации) Тогда
			//прямая адресация
			ИсполнительТочки=ТочкаАдресации;
			
		ИначеЕсли КП_ОбщееСерверПС.ЭтоРолеваяАдресацияИсполнителя(ТочкаАдресации) Тогда
			//ролевая адресация
			ИсполнительТочки=КП_ЗадачиПроцессов.ПолучитьИсполнителяПоРолиИАдресации(ТочкаАдресации);
			
		Иначе
			Продолжить;
			
		КонецЕсли;
		
		//обработаем заместителей
		ИсполнительТочки=КП_ЗадачиПроцессов.ПолучитьИсполнителяСУчетомМатрицыЗамены(ИсполнительТочки, БизнесПроцесс);

		Если СписокИсполнителей.НайтиПоЗначению(ИсполнительТочки)=Неопределено Тогда
			СписокИсполнителей.Добавить(ИсполнительТочки);
		КонецЕсли;
			
		ИсполнительТочки=ТочкаАдресации;
		Если СписокИсполнителей.НайтиПоЗначению(ИсполнительТочки)=Неопределено Тогда
			СписокИсполнителей.Добавить(ИсполнительТочки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокИсполнителей;
	
КонецФункции

// Функция получает значение реквизита процесса по наименованию
// Параметры:
// 	БизнесПроцессСсылка - Бизнес процесс ссылка
// 	ИмяРеквизитаБизнесПроцесса - Имя реквизита бизнес-процесса
// Возвращаемое значение: Значение реквизита бизнес-процесса 
Функция ПолучитьЗначениеРеквизитаПроцессаПоНаименованию(БизнесПроцессСсылка, ИмяРеквизитаБизнесПроцесса) Экспорт
	
	ВидПроцесса=БизнесПроцессСсылка.ВидПроцесса;
	                                                                                                            
	РеквизитЗаявки=ПолучитьРеквизитВидаПоИмени(ВидПроцесса, ИмяРеквизитаБизнесПроцесса);
	
	Возврат КП_Процессы.ПолучитьЗначениеРеквизитаПроцесса(БизнесПроцессСсылка, РеквизитЗаявки);
	
КонецФункции

// Функция получает реквизит вида процесса по имени
// Параметры:
// 	ВидПроцесса - Вид процесса
// 	ИмяРеквизита - Имя реквизита
// Возвращаемое значение: Ссылка на реквизит
Функция ПолучитьРеквизитВидаПоИмени(ВидПроцесса, ИмяРеквизита) Экспорт
	
	Запрос=Новый Запрос( "ВЫБРАТЬ ПЕРВЫЕ 1
	                     |	КП_ВидыПроцессовРеквизитыПроцессов.РеквизитПроцесса
	                     |ИЗ
	                     |	Справочник.КП_ВидыПроцессов.РеквизитыПроцессов КАК КП_ВидыПроцессовРеквизитыПроцессов
	                     |ГДЕ
	                     |	КП_ВидыПроцессовРеквизитыПроцессов.Ссылка = &ВидБизнесПроцесса
	                     |	И КП_ВидыПроцессовРеквизитыПроцессов.РеквизитПроцесса.ИмяРеквизитаДляФункций = &НаименованиеДопРеквизита");
						 
	Запрос.УстановитьПараметр("ВидБизнесПроцесса", ВидПроцесса);
	Запрос.УстановитьПараметр("НаименованиеДопРеквизита", ИмяРеквизита);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РеквизитПроцесса;
	Иначе
		ТекстСообщения="В виде процесса """+СокрЛП(ВидПроцесса)+""" не найден реквизит """+ИмяРеквизита+"""!";
		ЗаписьЖурналаРегистрации("Корпоративный процесс", УровеньЖурналаРегистрации.Ошибка, ВидПроцесса, ТекстСообщения, ИмяРеквизита);	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция получает двоичные данные макета вида процесса
// Параметры:
// 	ИмяМакета - Имя макета
// Возвращаемое значение: Двоичные данные 
Функция ПолучитьДвоичныеДанныеМакетаВидаПроцесса(ИмяМакета) Экспорт
	
	Попытка
		Возврат Справочники.КП_ВидыПроцессов.ПолучитьМакет(ИмяМакета);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

// Функция очищает все сообщения
// Параметры:
// 	 - 
// Возвращаемое значение: Истина или Ложь
Функция ОчиститьВсеСообщения() Экспорт
	
	РегСообщений=РегистрыСведений.аКорпоративныйЧатСообщения.СоздатьНаборЗаписей();
	РегСообщений.Прочитать();
	Попытка
		РегСообщений.Очистить();
		РегСообщений.Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	РегПросмотра=РегистрыСведений.аКорпоративныйЧатПросмотрСообщений.СоздатьНаборЗаписей();
	РегПросмотра.Прочитать();
	Попытка
		РегПросмотра.Очистить();
		РегПросмотра.Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция получает вид бизнес-процесса по коду
// Параметры:
// 	КодВидаПроцесса - Код вида процесса
// Возвращаемое значение: Ссылка на вид бизнес-процесса
Функция ПолучитьВидБизнесПроцессаПоКоду(КодВидаПроцесса) Экспорт
		
	НайденныйВид=Справочники.КП_ВидыПроцессов.НайтиПоКоду(КодВидаПроцесса);
	Если НайденныйВид.Пустая() Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат НайденныйВид;
	
КонецФункции

// Функция возвращает наименование по шаблону
// Параметры:
// 	БизнесПроцесс - Бизнес процесс
// 	ВидПроцесса - Вид корпоративного процесса
// Возвращаемое значение: Строка
Функция ПолучитьНаименованиеПоШаблону(БизнесПроцесс, ВидПроцесса) Экспорт
	
	СтрокаШаблона=СокрЛП(ВидПроцесса.ФорматШаблонаНаименований);
	
	//получим список элементов из строки
	
	СписокТегов=Новый СписокЗначений;
	
	КоличествоСимволов=СтрДлина(СтрокаШаблона);
	СтрокаЭлемента="";
	
	Для НомерСимвола=1 По КоличествоСимволов Цикл
		СимволСтроки=Сред(СтрокаШаблона, НомерСимвола, 1);
		Если СимволСтроки="{" Тогда
			СтрокаЭлемента=""
		ИначеЕсли СимволСтроки="}" Тогда
			СписокТегов.Добавить("{"+СокрЛП(СтрокаЭлемента)+"}");
		Иначе 
			СтрокаЭлемента=СтрокаЭлемента+СимволСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	//теперь у нас есть список элементов для построения наименования
	
	Если Найти(СтрокаШаблона, "Реквизит.")>0 Тогда
		СтруктураРеквизитов=ПолучитьСтруктуруРеквизитовПроцесса(БизнесПроцесс.Ссылка);
	Иначе
		СтруктураРеквизитов=Новый Структура;
	КонецЕсли;
			
	НоваяСтрока=СтрокаШаблона;
	
	//заменим в строке теги
	Для Каждого ЭлементСписка из СписокТегов Цикл
		ТегЭлемента=ЭлементСписка.Значение;
		
		Если ТегЭлемента="{НаименованиеВида}" Тогда
			НоваяСтрока=СтрЗаменить(НоваяСтрока, "{НаименованиеВида}", СокрЛП(ВидПроцесса.Наименование));
			
		ИначеЕсли Найти(ТегЭлемента, "{Реквизит.")>0 Тогда
			ЗначениеТега="";
			ИмяРеквизита=СтрЗаменить(ТегЭлемента, "{Реквизит.", "");
			ИмяРеквизита=СтрЗаменить(ИмяРеквизита, "}", "");
			
			Попытка
				ЗначениеРеквизита=СтруктураРеквизитов[ИмяРеквизита];
				ЗначениеТега=СокрЛП(ЗначениеРеквизита);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В процессе не найден реквизит ""';en='While not found props ""'")+ИмяРеквизита+""".");
				
			КонецПопытки;
			
			НоваяСтрока=СтрЗаменить(НоваяСтрока, ТегЭлемента, ЗначениеТега);
			НоваяСтрока=СтрЗаменить(НоваяСтрока, "  ", " ");
			
		ИначеЕсли Найти(ТегЭлемента, "{ОсновныеИсполнители[")>0 Тогда
			ТегЭлементаПраво=СтрЗаменить(ТегЭлемента, "{ОсновныеИсполнители[", "");
			ЗначениеТега="";
			СтрокаНомераЭлемента=СтрЗаменить(ТегЭлементаПраво, "]}", "");
			Попытка
				НомерЭлемента=Число(СтрокаНомераЭлемента);
				//получим основного исполнителя по номеру
				СтрокаИсполнителя=БизнесПроцесс.ОсновныеИсполнители[НомерЭлемента];
				ЗначениеТега=СокрЛП(СтрокаИсполнителя.ТочкаАдресации);
				
			Исключение
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В процессе не определен исполнитель ';")+ТегЭлемента+НСтр("ru='.';en='.'"));
			КонецПопытки;
			
			НоваяСтрока=СтрЗаменить(НоваяСтрока, ТегЭлемента, ЗначениеТега);
			НоваяСтрока=СтрЗаменить(НоваяСтрока, "  ", " ");
			
		ИначеЕсли Найти(ТегЭлемента, "{СписокДокументов[")>0 Тогда
			ТегЭлементаПраво=СтрЗаменить(ТегЭлемента, "{СписокДокументов[", "");
			ЗначениеТега="";
			СтрокаНомераЭлемента=СтрЗаменить(ТегЭлементаПраво, "]}", "");
			
			Попытка
				НомерЭлемента=Число(СтрокаНомераЭлемента);
				//получим документ по номеру
				
				РегСписокСсылок=РегистрыСведений.КП_СсылкиПроцессов.СоздатьНаборЗаписей();
				РегСписокСсылок.Отбор.БизнесПроцесс.Установить(БизнесПроцесс.Ссылка);
				РегСписокСсылок.Прочитать();
				Если (РегСписокСсылок.Количество()-1)>=НомерЭлемента Тогда
				
					ЗаписьРегистра=РегСписокСсылок[НомерЭлемента];
					ДокументСтроки=ЗаписьРегистра.Объект;
					ЗначениеТега=СокрЛП(ДокументСтроки);
				КонецЕсли;
				
			Исключение
				//
			КонецПопытки;
				
			НоваяСтрока=СтрЗаменить(НоваяСтрока, ТегЭлемента, ЗначениеТега);
			НоваяСтрока=СтрЗаменить(НоваяСтрока, "  ", " ");
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Функция очищает рецензии контролера в точке маршрута бизнес-процесса
// Параметры:
// 	ТочкаКБП - Точка бизнес-процесса
// Возвращаемое значение: Истина или Ложь
Функция ОчиститьРецензииКонтролераВТочке(ТочкаКБП) Экспорт
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;

	//добавим запись в регистр точек в работе
	
	РегРецензий=РегистрыСведений.КП_РецензииКонтролеров.СоздатьНаборЗаписей();
	РегРецензий.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегРецензий.Отбор.ТочкаКБП.Установить(ТочкаКБП);
	РегРецензий.Прочитать();
		
	КоличествоЗаписей=РегРецензий.Количество();
		
	Если КоличествоЗаписей=0 Тогда
		Возврат Истина;
		
	КонецЕсли;
		
	Попытка
		РегРецензий.Очистить();
		РегРецензий.Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// Функция получает имя таблицы процесса
// Параметры:
// 	НаименованиеТаблицы - Наименование таблицы
// Возвращаемое значение: Строка
Функция ПолучитьИмяТаблицыПроцесса(НаименованиеТаблицы) Экспорт
	ИмяТаблицы="";
	
	Если НаименованиеТаблицы="Документы и прочие объекты" Тогда
		ИмяТаблицы="ДокументыИПрочиеОбъекты";
		
	ИначеЕсли НаименованиеТаблицы="Результаты исполнителей в точке" Тогда
		ИмяТаблицы="РезультатыИсполнителейВТочке";
		
	ИначеЕсли НаименованиеТаблицы="Рецензии контролеров в точке" Тогда
		ИмяТаблицы="РецензииКонтролеровВТочке";
		
	Иначе
		ИмяТаблицы=СтрЗаменить(НаименованиеТаблицы, " ","");
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
		
КонецФункции

// Функция ищет точку экземпляра по точке основанию
// Параметры:
// 	ТочкаОснование - Точка основание
// 	ВладелецТекущейТочки - Владелец текущей точки
// Возвращаемое значение: Ссылка на точку бизнес-процесса или Неопределено
Функция НайтиТочкуЭкземпляраПоТочкеОснованию(ТочкаОснование, ВладелецТекущейТочки) Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ТочкаОснование = &ТочкаОснование
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки");
						
	Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТекущейТочки);					
	Запрос.УстановитьПараметр("ТочкаОснование", ТочкаОснование);					
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
КонецФункции

// Функция заменяет значение тега бизнес-процесса
// Параметры:
// 	ИсходныйТекстСообщения - Исходный текст сообщения
// 	БизнесПроцесс - Бизнес-процесс
// 	ТочкаКБП - Точка маршрута бизнес-прцоесса
// Возвращаемое значение: Строка
Функция ЗаменитьЗначениеТегаБизнесПроцесса(ИсходныйТекстСообщения, БизнесПроцесс, ТочкаКБП)

	ТегОснова="БизнесПроцесс";
	НомерСимволаНачалаТега=Найти(ИсходныйТекстСообщения, "<"+ТегОснова);
	
	ТекстСообщения=ИсходныйТекстСообщения;
	
	//обработаем теги в цикле, так как в тексте может быть несколько однотипных тегов
	Пока НомерСимволаНачалаТега>0 Цикл
		ОстатокТекста=Сред(ТекстСообщения, НомерСимволаНачалаТега);
		//найдем окончание тега в остатке текста
		НомерСимволаОкончанияТега=Найти(ОстатокТекста, ">");
		Если НомерСимволаОкончанияТега=0 Тогда
			//ошибка поиска окончания тега
			Прервать;
		КонецЕсли;
		
		ДлинаТега=НомерСимволаОкончанияТега;
		ПолнаяСтрокаТега=Сред(ТекстСообщения, НомерСимволаНачалаТега+1, ДлинаТега-2);
		
		//получим имя тега
		ДополнениеБизнесПроцесса=СтрЗаменить(ПолнаяСтрокаТега, ТегОснова, "");
		Если ПустаяСтрока(ДополнениеБизнесПроцесса) Тогда
			ЗначениеТега=БизнесПроцесс;
			
		Иначе
			//уберем первую точку дополнения
			ДополнениеБизнесПроцесса=Сред(ДополнениеБизнесПроцесса, 2);
			ЗначениеТега=КП_ОбщееСервер.ПолучитьДополнениеОбъекта(БизнесПроцесс, ДополнениеБизнесПроцесса);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеТега) Тогда
			ЗначениеТега="<нет>";
		КонецЕсли;
	
		//заменим тег в тексте на его значение
		ПолноеИмяТега="<"+ПолнаяСтрокаТега+">";
		ТекстСообщения=СтрЗаменить(ТекстСообщения, ПолноеИмяТега, СокрЛП(ЗначениеТега));
		
		//найдем новый тег (если есть)
		НомерСимволаНачалаТега=Найти(ТекстСообщения, "<"+ТегОснова);
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
		                       	
КонецФункции

// Функция заменяет значение тега реквизита бизнес-процесса
// Параметры:
// 	ИсходныйТекстСообщения - Исходный текст сообщения
// 	БизнесПроцесс - Бизнес-процесс
// 	ТочкаКБП - Точка маршрута бизнес-процесса
// Возвращаемое значение: Строка
Функция ЗаменитьЗначениеТегаРеквизита(ИсходныйТекстСообщения, БизнесПроцесс, ТочкаКБП)
	
	Если ПустаяСтрока(ИсходныйТекстСообщения) Тогда
		Возврат ИсходныйТекстСообщения;
	КонецЕсли;
	
	ТегОснова="Реквизит";
	
	ВидПроцесса=БизнесПроцесс.ВидПроцесса;
	
	НомерСимволаНачалаТега=Найти(ИсходныйТекстСообщения, "<"+ТегОснова);
	
	ТекстСообщения=ИсходныйТекстСообщения;
	ОстатокТекста=ТекстСообщения;
	
	//обработаем теги в цикле, так как в тексте может быть несколько однотипных тегов
	Пока НомерСимволаНачалаТега>0 Цикл
		ОстатокТекста=Сред(ТекстСообщения, НомерСимволаНачалаТега);
		
		//найдем окончание тега в остатке текста
		НомерСимволаОкончанияТега=Найти(ОстатокТекста, ">");
		Если НомерСимволаОкончанияТега=0 Тогда
			//ошибка поиска окончания тега
			ТекстОшибки="Ошибка поиска окончания тега "">"".";
			ЗаписьЖурналаРегистрации("Замена тегов реквизитов в тексте бизнес-процесса", УровеньЖурналаРегистрации.Ошибка, БизнесПроцесс, ТочкаКБП, ТекстОшибки);
			Прервать;
		КонецЕсли;
		
		ДлинаТега=НомерСимволаОкончанияТега;
		
		СтрокаТега=Сред(ТекстСообщения, НомерСимволаНачалаТега+1, ДлинаТега-2);
		
		//получим имя тега
		ИмяРеквизита=СтрЗаменить(СтрокаТега, ТегОснова+".", "");
		НачалоДополненияРеквизита=Найти(ИмяРеквизита, ".");
		
		Если НачалоДополненияРеквизита>0 Тогда
			ДополнениеРеквизита=Сред(ИмяРеквизита, НачалоДополненияРеквизита+1);
			ИмяРеквизита=СтрЗаменить(ИмяРеквизита, "."+ДополнениеРеквизита, "");
			
		Иначе
			ДополнениеРеквизита="";
			
		КонецЕсли;
		
		РеквизитПроцесса=КП_Процессы.ПолучитьРеквизитВидаПоИмени(ВидПроцесса, ИмяРеквизита);
		Если НЕ ЗначениеЗаполнено(РеквизитПроцесса) Тогда
			//реквизит не найден
			ТекстОшибки="Не найден реквизит """+ИмяРеквизита+""".";
			ЗаписьЖурналаРегистрации("Замена тегов реквизитов в тексте бизнес-процесса", УровеньЖурналаРегистрации.Ошибка, БизнесПроцесс, ТочкаКБП, ТекстОшибки);
			//удалим данный тег
			ПолноеИмяТега="<"+СтрокаТега+">";
			ЗначениеТега="!Реквизит """+ИмяРеквизита+""" не найден!";
			ТекстСообщения=СтрЗаменить(ТекстСообщения, ПолноеИмяТега, СокрЛП(ЗначениеТега));
			НомерСимволаНачалаТега=Найти(ТекстСообщения, "<"+ТегОснова);
			Продолжить;
			
		КонецЕсли;
		
		//получим значение реквизита процесса по его имени
		ЗначениеРеквизита=КП_Процессы.ПолучитьЗначениеРеквизитаПроцесса(БизнесПроцесс, РеквизитПроцесса);
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ЗначениеТега=ЗначениеРеквизита;
		Иначе
			ЗначениеТега=Неопределено;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ДополнениеРеквизита) И ЗначениеЗаполнено(ЗначениеТега) Тогда
			ЗначениеТега=СокрЛП(КП_ОбщееСервер.ПолучитьДополнениеОбъекта(ЗначениеРеквизита, ДополнениеРеквизита));
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеТега) Тогда
			ЗначениеТега="<нет>";
		КонецЕсли;
	
		//заменим тег в тексте на его значение
		ПолноеИмяТега="<"+СтрокаТега+">";
		ТекстСообщения=СтрЗаменить(ТекстСообщения, ПолноеИмяТега, СокрЛП(ЗначениеТега));
		
		//найдем новый тег (если есть)
		НомерСимволаНачалаТега=Найти(ТекстСообщения, "<"+ТегОснова);
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
	
КонецФункции

// Функция заменяет значение тега приложения
// Параметры:
// 	ИсходныйТекстСообщения - Исходный текст сообщения
// 	БизнесПроцесс - Бизнес-процесс
// 	ТочкаКБП - Точка маршрута бизнес-процесса
// Возвращаемое значение: Строка
Функция ЗаменитьЗначениеТегаПриложения(ИсходныйТекстСообщения, БизнесПроцесс, ТочкаКБП)

	ТегОснова="Приложение";
	НомерСимволаНачалаТега=Найти(ИсходныйТекстСообщения, "<"+ТегОснова);
	
	ТекстСообщения=ИсходныйТекстСообщения;
	
	//обработаем теги в цикле, так как в тексте может быть несколько однотипных тегов
	Пока НомерСимволаНачалаТега>0 Цикл
		ОстатокТекста=Сред(ТекстСообщения, НомерСимволаНачалаТега);
		//найдем окончание тега в остатке текста
		НомерСимволаОкончанияТега=Найти(ОстатокТекста, ">");
		Если НомерСимволаОкончанияТега=0 Тогда
			//ошибка поиска окончания тега
			ТекстОшибки="Ошибка поиска окончания тега "">"".";
			ЗаписьЖурналаРегистрации("Замена тегов приложения в тексте бизнес-процесса", УровеньЖурналаРегистрации.Ошибка, БизнесПроцесс, ТочкаКБП, ТекстОшибки);
			Прервать;
		КонецЕсли;
		
		ДлинаТега=НомерСимволаОкончанияТега;
		ПолнаяСтрокаТега=Сред(ТекстСообщения, НомерСимволаНачалаТега+1, ДлинаТега-2);
		
		//определим номер приложения [N]
		НачалоОбластиНомера=Найти(ПолнаяСтрокаТега, "[");
		ОкончаниеОбластиНомера=Найти(ПолнаяСтрокаТега, "]");
		
		Если НачалоОбластиНомера=0 ИЛИ ОкончаниеОбластиНомера=0 Тогда
			//область номера приложения не найдена
			ТекстОшибки="Ошибка поиска области номера приложения [N].";
			ЗаписьЖурналаРегистрации("Замена тегов приложения в тексте бизнес-процесса", УровеньЖурналаРегистрации.Ошибка, БизнесПроцесс, ТочкаКБП, ТекстОшибки);
			Прервать;
		КонецЕсли;
		
		ОбластьНомераПриложения=Сред(ПолнаяСтрокаТега, НачалоОбластиНомера+1, ОкончаниеОбластиНомера-НачалоОбластиНомера-1);
		Попытка
			НомерЭлемента=Число(ОбластьНомераПриложения);
		Исключение
			ТекстОшибки="Ошибка определения значения области номера приложения [N]: " +ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Замена тегов приложения в тексте бизнес-процесса", УровеньЖурналаРегистрации.Ошибка, БизнесПроцесс, ТочкаКБП, ТекстОшибки);
			Прервать;
		КонецПопытки;
		
		//получим значение приложения 
		
		РегСписокСсылок=РегистрыСведений.КП_СсылкиПроцессов.СоздатьНаборЗаписей();
		РегСписокСсылок.Отбор.БизнесПроцесс.Установить(БизнесПроцесс.Ссылка);
		РегСписокСсылок.Прочитать();
		Если (РегСписокСсылок.Количество()-1)>=НомерЭлемента Тогда
			ЗаписьРегистра=РегСписокСсылок[НомерЭлемента];
			ЗначениеПриложения=ЗаписьРегистра.Объект;
		КонецЕсли;
		
		//получим имя тега
		ДополнениеБизнесПроцесса=СтрЗаменить(ПолнаяСтрокаТега, ТегОснова+"["+Строка(ОбластьНомераПриложения)+"]", "");
		Если ПустаяСтрока(ДополнениеБизнесПроцесса) Тогда
			ЗначениеТега=ЗначениеПриложения;
			
		Иначе
			//уберем первую точку дополнения
			ДополнениеБизнесПроцесса=Сред(ДополнениеБизнесПроцесса, 2);
			ЗначениеТега=КП_ОбщееСервер.ПолучитьДополнениеОбъекта(ЗначениеПриложения, ДополнениеБизнесПроцесса);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеТега) Тогда
			ЗначениеТега="<нет>";
		КонецЕсли;
	
		//заменим тег в тексте на его значение
		ПолноеИмяТега="<"+ПолнаяСтрокаТега+">";
		ТекстСообщения=СтрЗаменить(ТекстСообщения, ПолноеИмяТега, СокрЛП(ЗначениеТега));
		
		//найдем новый тег (если есть)
		НомерСимволаНачалаТега=Найти(ТекстСообщения, "<"+ТегОснова);
		
	КонецЦикла;
	
	Возврат ТекстСообщения;
		                       	
КонецФункции

// Функция преобразовывает текст по тегам точки бизнес-процесса
// Параметры:
// 	ИсходныйТекст - Исходный текст
// 	ТочкаКБП - Точка маршрута бизнес-процесса
// Возвращаемое значение: Строка
Функция ПреобразоватьТекстПоТегамКБП(ИсходныйТекст, ТочкаКБП) Экспорт
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	ВидПроцесса=БизнесПроцесс.ВидПроцесса;
	ТекстСообщения=СокрЛП(ИсходныйТекст);
	
	//определим простые теги
	ТекстСообщения=СтрЗаменить(ТекстСообщения, "<НаименованиеБизнесПроцесса>", СокрЛП(БизнесПроцесс.Наименование));
	ТекстСообщения=СтрЗаменить(ТекстСообщения, "<Автор>", СокрЛП(БизнесПроцесс.Автор));
	ТекстСообщения=СтрЗаменить(ТекстСообщения, "<Контролер>", СокрЛП(БизнесПроцесс.Контролер));
	
	//заменим теги бизнес-процесса
	ТекстСообщения=ЗаменитьЗначениеТегаБизнесПроцесса(ТекстСообщения, БизнесПроцесс, ТочкаКБП);
	
	//заменим теги реквизитов
	ТекстСообщения=ЗаменитьЗначениеТегаРеквизита(ТекстСообщения, БизнесПроцесс, ТочкаКБП);
	
	//теперь заменим теги приложений
	ТекстСообщения=ЗаменитьЗначениеТегаПриложения(ТекстСообщения, БизнесПроцесс, ТочкаКБП);

	Возврат ТекстСообщения;
	
КонецФункции

// Функция определяет состояние точки
// Параметры:
// 	ТочкаКБП - Точка бизнес-процесса
// 	СетьМаршрутныхТочек - Сеть маршрутных точек
// Возвращаемое значение: Перечисление или Неопределено
Функция ДополнительноОпределитьСостояниеТочки(ТочкаКБП, СетьМаршрутныхТочек)
	Если ТочкаКБП.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие Тогда
		//точка условия, данная точка может не иметь состояния, если у предыдущей точки отменено выполнение
		//проверим так ли это и если это так, то вернем значение отмены выполнения и точки условия
		СписокПредыдущихТочек=ПолучитьСписокПредыдущихТочек(СетьМаршрутныхТочек, ТочкаКБП);
		ТочкаОтменена=Ложь;
		
		Для Каждого ЭлементСписка Из СписокПредыдущихТочек Цикл
			ТочкаСписка=ЭлементСписка.Значение;
			//получим состояние точки
			СтруктураСостоянияПредыдущейТочки=ПолучитьСтруктуруСостоянияТочки(ТочкаСписка);
			СостояниеТочки=СтруктураСостоянияПредыдущейТочки.Состояние;
			Если 
				НЕ (СостояниеТочки=Перечисления.КП_СостояниеТочек.Выполнена 
				ИЛИ СостояниеТочки=Перечисления.КП_СостояниеТочек.НеВыполняется) Тогда
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Перечисления.КП_СостояниеТочек.Выполнена;

	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция выполняет очистку журнала записей бизнес-процесса
// Параметры:
// 	ОчиститьДоДаты - дата до которой будет выполняться очистка
// Возвращаемое значение: Булево
Функция ОчиститьЖурналПроцессов(ОчиститьДоДаты) Экспорт

	Запрос = Новый Запрос; 
	Запрос.Текст = "ВЫБРАТЬ 
	|    * 
	|ИЗ 
	|    РегистрСведений.КП_ЖурналВыполненияПроцесса КАК ЖурналВыполненияПроцесса 
	|ГДЕ 
	|    ЖурналВыполненияПроцесса.ДатаЗаписи >= &ОчиститьДоДаты
	|"; 
	
	Запрос.УстановитьПараметр("ОчиститьДоДаты", ОчиститьДоДаты);
	
	ТаблицаОставляемыхЗаписей = Запрос.Выполнить().Выгрузить(); 
	
	НаборЗаписей = РегистрыСведений.КП_ЖурналВыполненияПроцесса.СоздатьНаборЗаписей(); 
	НаборЗаписей.Загрузить(ТаблицаОставляемыхЗаписей); 
	Попытка
		НаборЗаписей.Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает таблицу наименований элементов вида бизнес-процесса
// Параметры:
// 	Нет
// Возвращаемое значение: Таблица значений
Функция ПолучитьТаблицуНаименованийЭлементовВидаПроцесса() Экспорт
	
	ТаблицаНаименований=Новый ТаблицаЗначений;
	ТаблицаНаименований.Колонки.Добавить("ЭлементФормы");
	ТаблицаНаименований.Колонки.Добавить("НаименованиеЭлемента");
	ТаблицаНаименований.Колонки.Добавить("НаименованиеЭлементаИностранное");
	ТаблицаНаименований.Колонки.Добавить("Видимость");
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Основная кнопка запуска";
	НоваяСтрока.НаименованиеЭлемента="Отправить на исполнение и закрыть";
	НоваяСтрока.НаименованиеЭлементаИностранное="Start and close";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Кнопка ""Старт""";
	НоваяСтрока.НаименованиеЭлемента="Отправить";
	НоваяСтрока.НаименованиеЭлементаИностранное="Start";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Текст процесса";
	НоваяСтрока.НаименованиеЭлемента="Описание бизнес-процесса";
	НоваяСтрока.НаименованиеЭлементаИностранное="Process description";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Страница ""Схема бизнес-процесса""";
	НоваяСтрока.НаименованиеЭлемента="Схема бизнес-процесса";
	НоваяСтрока.НаименованиеЭлементаИностранное="Process Flowchart";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Страница ""Параметры процесса""";
	НоваяСтрока.НаименованиеЭлемента="Параметры процесса";
	НоваяСтрока.НаименованиеЭлементаИностранное="Parameters";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Страница ""Основные исполнители""";
	НоваяСтрока.НаименованиеЭлемента="Основные исполнители";
	НоваяСтрока.НаименованиеЭлементаИностранное="General list";
    НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Страница ""Реквизиты процесса""";
	НоваяСтрока.НаименованиеЭлемента="Реквизиты процесса";
	НоваяСтрока.НаименованиеЭлементаИностранное="Variables";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Кнопка ""Обсудить процесс""";
	НоваяСтрока.НаименованиеЭлемента="Обсудить процесс";
	НоваяСтрока.НаименованиеЭлементаИностранное="Discuss process";
	НоваяСтрока.Видимость=Истина;
	
	Возврат ТаблицаНаименований;
	
КонецФункции

// Функция возвращает таблицу наименований элементов задач бизнес-процессов 
// Параметры:
// 	Нет
// Возвращаемое значение: Таблица значений
Функция ПолучитьТаблицуНаименованийЭлементовЗадачПроцессов() Экспорт
	
	ТаблицаНаименований=Новый ТаблицаЗначений;
	ТаблицаНаименований.Колонки.Добавить("ЭлементФормы");
	ТаблицаНаименований.Колонки.Добавить("НаименованиеЭлемента");
	ТаблицаНаименований.Колонки.Добавить("НаименованиеЭлементаИностранное");
	ТаблицаНаименований.Колонки.Добавить("Видимость");
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Исполнение: Кнопка ""Выполнить""";
	НоваяСтрока.НаименованиеЭлемента="Подтвердить выполнение";
	НоваяСтрока.НаименованиеЭлементаИностранное="Complete task";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Исполнение: Кнопка ""Переадресовать""";
	НоваяСтрока.НаименованиеЭлемента="Переадресовать";
	НоваяСтрока.НаименованиеЭлементаИностранное="Forward";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Исполнение: Кнопка ""Шаблон""";
	НоваяСтрока.НаименованиеЭлемента="Шаблон";
	НоваяСтрока.НаименованиеЭлементаИностранное="Template";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Исполнение: Поле ""Исполнитель""";
	НоваяСтрока.НаименованиеЭлемента="Исполнитель";
	НоваяСтрока.НаименованиеЭлементаИностранное="User";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Исполнение: Раздел ""Реквизиты процесса""";
	НоваяСтрока.НаименованиеЭлемента="Реквизиты процесса";
	НоваяСтрока.НаименованиеЭлементаИностранное="Process variables";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Контроль: Кнопка ""Выполнить""";
	НоваяСтрока.НаименованиеЭлемента="Подтвердить контроль";
	НоваяСтрока.НаименованиеЭлементаИностранное="Complete control";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Контроль: Поле ""Контролер""";
	НоваяСтрока.НаименованиеЭлемента="Контролер";
	НоваяСтрока.НаименованиеЭлементаИностранное="Controller";
    НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Все: Гиперссылка ""Объекты""";
	НоваяСтрока.НаименованиеЭлемента="Документы";
	НоваяСтрока.НаименованиеЭлементаИностранное="Documents";
	НоваяСтрока.Видимость=Истина;
	
	НоваяСтрока=ТаблицаНаименований.Добавить();
	НоваяСтрока.ЭлементФормы="Все: Гиперссылка ""Список объектов""";
	НоваяСтрока.НаименованиеЭлемента="Список документов";
	НоваяСтрока.НаименованиеЭлементаИностранное="Documents list";
    НоваяСтрока.Видимость=Истина;
	
	Возврат ТаблицаНаименований;
	
КонецФункции

// Функция возвращает список основных исполнителей бизнес-процесса
// Параметры:
// 	БизнесПроцесс - бизнес-процесс
// Возвращаемое значение: Список значений
Функция ПолучитьСписокОсновныхИсполнителейПроцесса(БизнесПроцесс) Экспорт
	
	СписокИсполнителей=новый СписокЗначений;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ОсновныеИсполнителиПроцесса.ТочкаАдресации
	                    |ИЗ
	                    |	РегистрСведений.КП_ОсновныеИсполнителиПроцесса КАК КП_ОсновныеИсполнителиПроцесса
	                    |ГДЕ
	                    |	КП_ОсновныеИсполнителиПроцесса.БизнесПроцесс = &БизнесПроцесс");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		
		ИсполнительПроцесса=Выборка.ТочкаАдресации;
		Если КП_ОбщееСерверПС.ЭтоРолеваяАдресацияИсполнителя(ИсполнительПроцесса) Тогда
			ИсполнительПроцесса=КП_ЗадачиПроцессов.ПолучитьИсполнителяПоРолиИАдресации(ИсполнительПроцесса);
			ИсполнительПроцесса=КП_ЗадачиПроцессов.ПолучитьИсполнителяСУчетомМатрицыЗамены(ИсполнительПроцесса, БизнесПроцесс);		
			
		КонецЕсли;
		
		Если СписокИсполнителей.НайтиПоЗначению(ИсполнительПроцесса)=Неопределено Тогда
			СписокИсполнителей.Добавить(ИсполнительПроцесса);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокИсполнителей;
	
КонецФункции

// Функция возвращает элемент справочника ролевой адресации по переданным в аргументах роли исполнителя, 
// основного и дополнительного объектов адресации.
// Параметры:
// 	РольИсполнителя - роль исполнителя
//	ОсновнойОбъектАдресации - основной объект адресаци
//	ДополнительныйОбъектАдресации - дополнительный объект адресаци
//	НаименованиеТочкиАдресации - наименование точки адресации
// Возвращаемое значение: Ссылка на элемент ролевой адресации
Функция ПолучитьЭлементРолевойАдресации(РольИсполнителя, ОсновнойОбъектАдресации=Неопределено, ДополнительныйОбъектАдресации=Неопределено, НаименованиеТочкиАдресации=Неопределено) Экспорт 
	
	Запрос=Новый Запрос;
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	             |	КП_РолеваяАдресация.Ссылка
	             |ИЗ
	             |	Справочник.КП_РолеваяАдресация КАК КП_РолеваяАдресация
	             |ГДЕ
	             |	КП_РолеваяАдресация.ПометкаУдаления = ЛОЖЬ
	             |	И КП_РолеваяАдресация.РольИсполнителя = &РольИсполнителя";
		
	Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
		ТекстЗапроса=ТекстЗапроса+" И КП_РолеваяАдресация.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации";
		Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
		ТекстЗапроса=ТекстЗапроса+" И КП_РолеваяАдресация.ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации";
		Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НаименованиеТочкиАдресации) Тогда
		ТекстЗапроса=ТекстЗапроса+" И КП_РолеваяАдресация.Наименование = &НаименованиеТочкиАдресации";
		Запрос.УстановитьПараметр("НаименованиеТочкиАдресации", НаименованиеТочкиАдресации);
	КонецЕсли;

	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	
	Запрос.Текст=ТекстЗапроса;
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция созадет и возвращает элемент справочника ролевой адресации по переданным в аргументах роли исполнителя, 
// основного и дополнительного объектов адресации.
// Параметры:
// 	РольИсполнителя - роль исполнителя
//	ОсновнойОбъектАдресации - основной объект адресаци
//	ДополнительныйОбъектАдресации - дополнительный объект адресаци
//	НаименованиеТочкиАдресации - наименование точки адресации
// Возвращаемое значение: Ссылка на элемент ролевой адресации
Функция СоздатьЭлементРолевойАдресации(РольИсполнителя, ОсновнойОбъектАдресации=Неопределено, ДополнительныйОбъектАдресации=Неопределено, НаименованиеТочкиАдресации=Неопределено) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос=Новый Запрос;
	
	НоваяАдресация=Справочники.КП_РолеваяАдресация.СоздатьЭлемент();
	
	НоваяАдресация.РольИсполнителя=РольИсполнителя;
	НоваяАдресация.ОсновнойОбъектАдресации=ОсновнойОбъектАдресации;
	НоваяАдресация.ДополнительныйОбъектАдресации=ДополнительныйОбъектАдресации;
	
	Если НаименованиеТочкиАдресации=Неопределено Тогда
		НоваяАдресация.Наименование=Справочники.КП_РолеваяАдресация.СформироватьНаименование(НоваяАдресация);
	Иначе
		НоваяАдресация.Наименование=НаименованиеТочкиАдресации;
	КонецЕсли;
	
	Попытка
		НоваяАдресация.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Справочники.КП_РолеваяАдресация.ПустаяСсылка();
	КонецПопытки;
	
	Возврат НоваяАдресация.Ссылка;
	
КонецФункции

// Выбрать одного любого исполнителя, назначенного на РольИсполнителя в ОсновнойОбъектАдресации.
// Параметры:
// 	РольИсполнителя - роль исполнителя
//	ОсновнойОбъектАдресации - основной объект адресаци
// Возвращаемое значение: Ссылка на исполнителя или пустой элемент
Функция ВыбратьИсполнителя(ОсновнойОбъектАдресации, РольИсполнителя) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КП_ИсполнителиЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.КП_ИсполнителиЗадач КАК КП_ИсполнителиЗадач
		|ГДЕ
		|	КП_ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя
		|	И КП_ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации"
	);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Запрос.Параметры.Вставить("РольИсполнителя", РольИсполнителя);
	ВыборкаЗапроса = Запрос.Выполнить().Выгрузить();
	Возврат ?(ВыборкаЗапроса.Количество() > 0, ВыборкаЗапроса[0].Исполнитель, Справочники.Пользователи.ПустаяСсылка());
	
КонецФункции	

// Выбрать список ролей, которые могут быть назначены в ОсновнойОбъектАдресации,
// и посчитать список назначений.
// Параметры:
//	ОсновнойОбъектАдресации - основной объект адресаци
// Возвращаемое значение: Выборка запроса
Функция ВыбратьРолиСКоличествомИсполнителей(ОсновнойОбъектАдресации) Экспорт
	Если ОсновнойОбъектАдресации <> Неопределено Тогда
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РолиИсполнителей.Ссылка КАК РольСсылка,
			|	РолиИсполнителей.Наименование КАК Роль,
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации КАК ТипыОсновногоОбъектаАдресации,
			|	СУММА(ВЫБОР
			|			КОГДА ИсполнителиЗадач.РольИсполнителя <> ЗНАЧЕНИЕ(Справочник.КП_РолиИсполнителей.ПустаяСсылка) 
			|				И ИсполнителиЗадач.РольИсполнителя ЕСТЬ НЕ NULL 
			|				И ИсполнителиЗадач.ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Исполнители
			|ИЗ
			|	Справочник.КП_РолиИсполнителей КАК РолиИсполнителей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО (ИсполнителиЗадач.РольИсполнителя = РолиИсполнителей.Ссылка)
			|ГДЕ
			|	РолиИсполнителей.ПометкаУдаления = ЛОЖЬ
			|	И РолиИсполнителей.ИспользуетсяСОбъектамиАдресации = ИСТИНА
			| СГРУППИРОВАТЬ ПО
			|	РолиИсполнителей.Ссылка,
			|	ИсполнителиЗадач.РольИсполнителя, 
			|	РолиИсполнителей.Наименование,
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации";
	Иначе
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РолиИсполнителей.Ссылка КАК РольСсылка,
			|	РолиИсполнителей.Наименование КАК Роль,
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации КАК ТипыОсновногоОбъектаАдресации,
			|	СУММА(ВЫБОР
			|			КОГДА ИсполнителиЗадач.РольИсполнителя <> ЗНАЧЕНИЕ(Справочник.КП_РолиИсполнителей.ПустаяСсылка) 
			|				И ИсполнителиЗадач.РольИсполнителя ЕСТЬ НЕ NULL 
			|				И (ИсполнителиЗадач.ОсновнойОбъектАдресации ЕСТЬ NULL 
			|					ИЛИ ИсполнителиЗадач.ОсновнойОбъектАдресации = Неопределено)
			|				ТОГДА 1
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК Исполнители
			|ИЗ
			|	Справочник.КП_РолиИсполнителей КАК РолиИсполнителей
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ИсполнителиЗадач КАК ИсполнителиЗадач
			|		ПО (ИсполнителиЗадач.РольИсполнителя = РолиИсполнителей.Ссылка)
			|ГДЕ
			|	РолиИсполнителей.ПометкаУдаления = ЛОЖЬ
			|	И РолиИсполнителей.ИспользуетсяБезОбъектовАдресации = ИСТИНА
			| СГРУППИРОВАТЬ ПО
			|	РолиИсполнителей.Ссылка,
			|	ИсполнителиЗадач.РольИсполнителя, 
			|	РолиИсполнителей.Наименование, 
			|	РолиИсполнителей.ТипыОсновногоОбъектаАдресации";
	КонецЕсли;		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	Возврат ВыборкаЗапроса;
	
КонецФункции

// Функция определяет, используется ли ролевая адресации в точке адресации, переданной в аргументе функции
// Если ролевая адресации используется, то возвращается Истина, в противном случае возвращается Ложь.
// Параметры:
//	ТочкаАдресации - точкаа адресации
// Возвращаемое значение: Булево
Функция ЭтоТочкаРолевойАдресации(ТочкаАдресации) Экспорт
	
	Возврат (ТипЗнч(ТочкаАдресации)=Тип("СправочникСсылка.КП_РолеваяАдресация"));
	
КонецФункции

// Функция возвращает список требуемых исполнителей по виду бизнес-процесса
// Параметры:
//	ВидПроцесса - вид процесса
//	ТолькоПредопределенные - флаг только предопредленные
// Возвращаемое значение: Список значений
Функция СписокТребуемыхРезультатовВВидеПроцесса(ВидПроцесса, ТолькоПредопределенные=Ложь) Экспорт
	СписокТребуемыхРезультатов=Новый СписокЗначений;
	
	СписокТочек=ПолучитьСписокТочекВладельца(ВидПроцесса);		
	
	//сформируем список требуемых от исполнителей результатов 
	
	Для Каждого ЭлементСписка Из СписокТочек Цикл
		//добавим 
		ТочкаПроцесса=ЭлементСписка.Значение;
		Если ТочкаПроцесса.ТипТочки<>Перечисления.КП_ВидыТочекБизнесПроцесса.Действие Тогда
			Продолжить;
		КонецЕсли;
		
		ТребуемыйРезультат=ТочкаПроцесса.ДействиеОсновнойОтчетИсполнителей;
		Если НЕ ЗначениеЗаполнено(ТребуемыйРезультат) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТолькоПредопределенные И НЕ ТребуемыйРезультат.Предопределенный Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокТребуемыхРезультатов.НайтиПоЗначению(ТребуемыйРезультат)=Неопределено Тогда
			СписокТребуемыхРезультатов.Добавить(ТребуемыйРезультат, ТочкаПроцесса, ТребуемыйРезультат.Предопределенный);
		КонецЕсли;
		
		//дополним индивидуальными требуемыми результатами исполнителей точки
		Для Каждого СтрокаТЧ Из ТочкаПроцесса.ИсполнителиТочки Цикл
			ТребуемыйРезультатИндивидуальный=СтрокаТЧ.ОтчетИсполнителя;
			Если ТолькоПредопределенные И НЕ ТребуемыйРезультатИндивидуальный.Предопределенный Тогда
				Продолжить;
			КонецЕсли;			
			Если СписокТребуемыхРезультатов.НайтиПоЗначению(ТребуемыйРезультатИндивидуальный)=Неопределено Тогда
				СписокТребуемыхРезультатов.Добавить(ТребуемыйРезультатИндивидуальный, ТочкаПроцесса, ТребуемыйРезультат.Предопределенный);
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	//дополним требуемыми результатами, указанными непосредственно в виде процесса
	Для Каждого СтрокаТЧ Из ВидПроцесса.ОсновныеИсполнители Цикл
		ТребуемыйРезультатОсновной=СтрокаТЧ.ОтчетИсполнителя;
		Если ТолькоПредопределенные И НЕ ТребуемыйРезультатОсновной.Предопределенный Тогда
			Продолжить;
		КонецЕсли;			
		Если СписокТребуемыхРезультатов.НайтиПоЗначению(ТребуемыйРезультатОсновной)=Неопределено Тогда
			СписокТребуемыхРезультатов.Добавить(ТребуемыйРезультатОсновной, ВидПроцесса, ТребуемыйРезультат.Предопределенный);
		КонецЕсли;

	КонецЦикла;

	Возврат СписокТребуемыхРезультатов;
	
КонецФункции

// Функция возвращает точку экземпляра процесса по наименованию
// Параметры:
//		БизнесПроцесс - бизнес-процесс
//		ИмяТочки - имя точки
// Возвращаемое значение: точка маршрута процесса
Функция НайтиТочкуЭкземпляраПоНаименованию(БизнесПроцесс, ИмяТочки) Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.Наименование = &Наименование
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки");
						
	Запрос.УстановитьПараметр("ВладелецТочки", БизнесПроцесс);
	Запрос.УстановитьПараметр("Наименование", ИмяТочки);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция проверяет, есть ли бизнес-процесс по какому-либо объекту
// Параметры:
//	ВидПроцесса - ссылка на вид процесса
//	СсылкаНаЭлемент - ссылка на объект
// Возвращаемое значение: Булево
Функция ЕстьПроцессПоОбъекту(ВидПроцесса, СсылкаНаЭлемент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_СсылкиПроцессов.БизнесПроцесс КАК БизнесПроцесс
	                    |ИЗ
	                    |	РегистрСведений.КП_СсылкиПроцессов КАК КП_СсылкиПроцессов
	                    |ГДЕ
	                    |	КП_СсылкиПроцессов.Объект = &Объект
	                    |	И КП_СсылкиПроцессов.БизнесПроцесс.ВидПроцесса = &ВидПроцесса
	                    |	И КП_СсылкиПроцессов.БизнесПроцесс.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Объект", СсылкаНаЭлемент);
	Запрос.УстановитьПараметр("ВидПроцесса", ВидПроцесса);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Возврат Выборка.Следующий();
	
КонецФункции

// Функция возвращает список процессов по объекту
// Параметры:
//	ВидПроцесса - ссылка на вид процесса
//	СсылкаНаЭлемент - ссылка на объект
// Возвращаемое значение: Список значений
Функция СписокПроцессовПоОбъекту(ВидПроцесса, СсылкаНаЭлемент) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос=Новый Запрос("ВЫБРАТЬ
						|	КП_СсылкиПроцессов.БизнесПроцесс КАК БизнесПроцесс
	                    |ИЗ
	                    |	РегистрСведений.КП_СсылкиПроцессов КАК КП_СсылкиПроцессов
	                    |ГДЕ
	                    |	КП_СсылкиПроцессов.Объект = &Объект
	                    |	И КП_СсылкиПроцессов.БизнесПроцесс.ВидПроцесса = &ВидПроцесса
	                    |	И КП_СсылкиПроцессов.БизнесПроцесс.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Объект", СсылкаНаЭлемент);
	Запрос.УстановитьПараметр("ВидПроцесса", ВидПроцесса);
	
	Список=Новый СписокЗначений;
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		БизнесПроцесс=Выборка.БизнесПроцесс;
		Если Список.НайтиПоЗначению(БизнесПроцесс)=Неопределено Тогда
			Список.Добавить(БизнесПроцесс);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Функция возвращает дату первой записи журнала процессов
// Параметры:
//	ПроцессСсылка - ссылка на процесс
// Возвращаемое значение: Дата
Функция ПолучитьДатуПервойЗаписиЖурнала(ПроцессСсылка) Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_ЖурналВыполненияПроцесса.ДатаЗаписи КАК ДатаЗаписи
	                    |ИЗ
	                    |	РегистрСведений.КП_ЖурналВыполненияПроцесса КАК КП_ЖурналВыполненияПроцесса
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	ДатаЗаписи ВОЗР");
	
	Запрос.УстановитьПараметр("Процесс", ПроцессСсылка);
	Выборка=Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаЗаписи;
	Иначе
		Возврат Дата("00010101");
	КонецЕсли;
КонецФункции

// Функция возвращает дату начала работы точки процесса с типом Таймер
// Параметры:
//	ТочкаТаймер - точка процесса с типом Таймер
// Возвращаемое значение: Дата
Функция ПолучитьДатуНачалаРаботыТаймера(ТочкаТаймер) Экспорт
	
	БизнесПроцесс=ТочкаТаймер.ВладелецТочки;
	
	//в запросе получим последнее состояние точки таймера, если оно не будет равно "Выполняется",
	//то значит точка таймера уже выполнена ранее или еще не сработала
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_ОбработкаТочекСрезПоследних.Период КАК Дата,
	                    |	КП_ОбработкаТочекСрезПоследних.Состояние КАК Состояние
	                    |ИЗ
	                    |	РегистрСведений.КП_ОбработкаТочек.СрезПоследних(
	                    |			&ДатаКон,
	                    |			БизнесПроцесс = &БизнесПроцесс
	                    |				И ТочкаКБП = &ТочкаТаймер) КАК КП_ОбработкаТочекСрезПоследних
	                    |ГДЕ
	                    |	КП_ОбработкаТочекСрезПоследних.ТочкаКБП.ТипТочки = ЗНАЧЕНИЕ(Перечисление.КП_ВидыТочекБизнесПроцесса.Обработка)
	                    |	И КП_ОбработкаТочекСрезПоследних.ТочкаКБП.ТипОбработки = 4
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	Дата УБЫВ");
	
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаТаймер", ТочкаТаймер);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	
	Выборка=Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если Выборка.Состояние=Перечисления.КП_СостояниеТочек.Выполняется Тогда
			Возврат Выборка.Дата; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
