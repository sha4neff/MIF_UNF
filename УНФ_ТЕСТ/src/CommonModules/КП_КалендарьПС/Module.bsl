// Общий модуль (выполняется на стороне сервера, повторно на время сеанса) 
// Модуль "Конструктор процессов для 1С:УНФ"
// Разработчик Компания "Аналитика. Проекты и решения" +7 495 005-1653, https://kp-unf.ru

#Область СлужебныеПроцедурыИФункции

// Функция расчитывает и возвращает дату по календарю
// Параметры:
//	Календарь - ссылка на календарь (Справочник.Календари)
//	ДатаНачала - начальная дата
//	КоличествоЧасов - количество часов которые нужно прибавить к начальной дате
// Возвращаемое значение: Дата и время
Функция ПолучитьДатуПоКалендарю(Календарь, ДатаНачала, КоличествоЧасов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаВыборки=ДатаНачала;
	КоличествоЧасовОсталось=КоличествоЧасов;
	
	//можно было получить набор записей сразу с запасом, но неизвестно, какой примерно запас брать
	//поэтому будем выбирать по одной, обычно в задачах не очень большие сроки выполнения
	
	НаборЗаписей=РегистрыСведений.КалендарныеГрафики.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Календарь.Установить(Календарь);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 Тогда
		ЗаписьЖурналаРегистрации("В графике нет данных о дневных расписаниях", УровеньЖурналаРегистрации.Ошибка,КалендарныеГрафики,,"График """+СокрЛП(КалендарныеГрафики)+""" без расписания");
		Возврат Неопределено;
	КонецЕсли;
	
	МаксимальнаяДата=НаборЗаписей[НаборЗаписей.Количество()-1].ДатаГрафика;

	Пока КоличествоЧасовОсталось>=0 Цикл
		НаборЗаписей=РегистрыСведений.КалендарныеГрафики.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Календарь.Установить(Календарь);
		НаборЗаписей.Отбор.ДатаГрафика.Установить(ДатаВыборки);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()>0 Тогда
			ЗаписьКалендаря=НаборЗаписей[0];
			Если НЕ ЗаписьКалендаря.ДеньВключенВГрафик Тогда
				//перейдем к следующей дате
				ДатаВыборки=ДатаВыборки+24*60*60;
				Если ДатаВыборки>=МаксимальнаяДата Тогда
					ЗаписьЖурналаРегистрации("В графике не хватило данных о дневных расписаниях", УровеньЖурналаРегистрации.Ошибка,КалендарныеГрафики,,"Максимальная дата графика """+СокрЛП(КалендарныеГрафики)+""" "+СокрЛП(МаксимальнаяДата));
					Возврат Неопределено;
				КонецЕсли;				
				Продолжить;
			КонецЕсли;
			
			НомерДняНедели=ДеньНедели(ДатаВыборки);
			КоличествоЧасовВДне=ПолучитьКоличествоРабочихЧасовДняНедели(Календарь, НомерДняНедели);
			
			ВычестьПолныйДень=Истина;
			Если КоличествоЧасовВДне>=КоличествоЧасовОсталось Тогда
				//на этом дне будем останавливаться
				//теперь нужно в этом дне найти конкретное время окончания, 
				//соответствующее внутридневному расписанию работы сотрудника
				//НомерДняЦикла=ЗаписьКалендаря.НомерДняЦикла;
				МассивРасписанияДня=Календарь.РасписаниеРаботы.НайтиСтроки(Новый Структура("НомерДня", НомерДняНедели));
				ИскомоеВремя=НачалоДня(ДатаВыборки);
				
				//сбросим флаг, т.к. будем обрабатывать внутри дня детально
				ВычестьПолныйДень=Ложь;	
				
				КоличествоИспользованныхЧасовВнутриДня=0;
				
				Для НомерРасписания=0 По МассивРасписанияДня.Количество()-1 Цикл
					СтрокаРасписания=МассивРасписанияДня[НомерРасписания];
					
					Если ДатаВыборки=ДатаНачала Тогда
						//это текущий день
						ТекущееВремяСекунд=ТекущаяДата()-НачалоДня(ТекущаяДата());
						ВремяНачалаРаботы=Дата("00010101")+ТекущееВремяСекунд;
					Иначе
						ВремяНачалаРаботы=СтрокаРасписания.ВремяНачала;
					КонецЕсли;
					
					КоличествоЧасовПоСтроке=(СтрокаРасписания.ВремяОкончания-ВремяНачалаРаботы)/3600;
					Если КоличествоЧасовПоСтроке<0 Тогда
						//Такая ситуация возможна, если в текущей дате текущее время уже больше, чем время
						//окончания работы по расписанию. Например, задача выдается вечером, после окончания 
						//рабочего дня пользователя
						КоличествоЧасовПоСтроке=0;
					КонецЕсли;
					
					Если КоличествоЧасовПоСтроке>=КоличествоЧасовОсталось Тогда
						//это нужный интервал расписания
						ВремяОкончания=ВремяНачалаРаботы+КоличествоЧасовОсталось*60*60;
						ВремяОкончанияСекундОтНачалаДня=ВремяОкончания-НачалоДня(ВремяНачалаРаботы);
						ИскомоеВремя=НачалоДня(ДатаВыборки)+ВремяОкончанияСекундОтНачалаДня;
						Возврат ИскомоеВремя;
						
					Иначе
						//в строке расписания нехватило часов, будем смореть следующую строку
						КоличествоЧасовОсталось=КоличествоЧасовОсталось-КоличествоЧасовПоСтроке;
						//перейдем к следующей строке расписания
						Продолжить;
						
					КонецЕсли;
					
					//если дошли до этого места и не вышли из функции,
					//то в текущем дне оказалось рабочих часов меньше, чем ожидалось 
					//например, задача выдана текущим днем, часов на её выполнение было бы достаточно
					//с начала рабочего дня, но задача выдана позже и рабочего времени не хватило
					//придется переходить к следующему дню			
					
				КонецЦикла; //по расписанию дня
				
			КонецЕсли; //нужный день
			
			//уменьшим количество часов на количество в обработанном дне
			Если ВычестьПолныйДень Тогда
				КоличествоЧасовОсталось=КоличествоЧасовОсталось-КоличествоЧасовВДне;
			КонецЕсли;
				
		КонецЕсли; //в дне были рабочие часы
				
		//перейдем к следующей дате
		ДатаВыборки=ДатаВыборки+24*60*60;
		Если ДатаВыборки>=МаксимальнаяДата Тогда
			ЗаписьЖурналаРегистрации("В графике не хватило данных о дневных расписаниях", УровеньЖурналаРегистрации.Ошибка,КалендарныеГрафики,,"Максимальная дата графика """+СокрЛП(КалендарныеГрафики)+""" "+СокрЛП(МаксимальнаяДата));
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла; //по остатку часов и дням календаря
	
	//нужная дата не найдена
	Возврат Неопределено;
	
КонецФункции

// Функция расчитывает и возвращает дату по календарю ранее, чем указанная
// Параметры:
//	Календарь - ссылка на календарь (Справочник.Календари)
//	ДатаНачала - начальная дата
//	КоличествоЧасов - количество часов которые нужно вычесть из начальной даты
// Возвращаемое значение: Дата и время
Функция ПолучитьДатуПоКалендарюПредыдущую(Календарь, ДатаНачала, КоличествоЧасов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаВыборки=ДатаНачала;
	КоличествоЧасовОсталось=КоличествоЧасов;
		
	НаборЗаписей=РегистрыСведений.КалендарныеГрафики.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Календарь.Установить(Календарь);
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество()=0 Тогда
		ЗаписьЖурналаРегистрации("В графике нет данных о дневных расписаниях", УровеньЖурналаРегистрации.Ошибка,КалендарныеГрафики,,"График """+СокрЛП(КалендарныеГрафики)+""" без расписания");
		Возврат Неопределено;
	КонецЕсли;              
	
	МинимальнаяДатаКалендаря=НаборЗаписей[0].ДатаГрафика;

	Пока КоличествоЧасовОсталось>=0 Цикл
		
		ЭтоПервыйДень=(НачалоДня(ДатаВыборки)=НачалоДня(ДатаНачала));
		
		НаборЗаписей=РегистрыСведений.КалендарныеГрафики.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Календарь.Установить(Календарь);
		НаборЗаписей.Отбор.ДатаГрафика.Установить(ДатаВыборки);
		НаборЗаписей.Прочитать();
		
		НомерДняНедели=ДеньНедели(ДатаВыборки);
		КоличествоЧасовВДне=ПолучитьКоличествоРабочихЧасовДняНедели(Календарь, НомерДняНедели);

		Если НаборЗаписей.Количество()>0 Тогда
			ЗаписьКалендаря=НаборЗаписей[0];
			Если НЕ ЗаписьКалендаря.ДеньВключенВГрафик Тогда
				//перейдем к следующей дате
				ДатаВыборки=ДатаВыборки-24*60*60;
				Если ДатаВыборки<=МинимальнаяДатаКалендаря Тогда
					ЗаписьЖурналаРегистрации("В графике не хватило данных о дневных расписаниях", УровеньЖурналаРегистрации.Ошибка,КалендарныеГрафики,,"Минимальная дата графика """+СокрЛП(КалендарныеГрафики)+""" "+СокрЛП(МинимальнаяДатаКалендаря));
					Возврат Неопределено;
				КонецЕсли;				
				Продолжить;
			КонецЕсли;
			
			ВычестьПолныйДень=Истина; //ниже может быть переопределено
			Если ЭтоПервыйДень ИЛИ ((КоличествоЧасовОсталось-КоличествоЧасовВДне)<0) Тогда
				//на этом дне (первый или последний) будем останавливаться и анализировать внутридневное расписание
				МассивРасписанияДня=Календарь.РасписаниеРаботы.НайтиСтроки(Новый Структура("НомерДня", НомерДняНедели));
				ИскомоеВремя=НачалоДня(ДатаВыборки);
				
				//сбросим флаг, т.к. будем обрабатывать внутри дня детально
				ВычестьПолныйДень=Ложь;	
				
				КоличествоИспользованныхЧасовВнутриДня=0;
				
				ИндексМаксимальнойСтрокаРасписанияДня=МассивРасписанияДня.Количество()-1;
				Для НомерРасписания=0 По ИндексМаксимальнойСтрокаРасписанияДня Цикл
					//будем двигаться от конца дня к началу
					СтрокаРасписания=МассивРасписанияДня[ИндексМаксимальнойСтрокаРасписанияДня-НомерРасписания];
					
					Если ЭтоПервыйДень Тогда
						СекундОтНачалаПервогоДня=ДатаНачала-НачалоДня(ДатаНачала);
						ВремяНачалаРаботы=Дата("00010101")+СекундОтНачалаПервогоДня;
					Иначе
						ВремяНачалаРаботы=СтрокаРасписания.ВремяОкончания;
					КонецЕсли;
					
					КоличествоЧасовПоСтроке=(ВремяНачалаРаботы-СтрокаРасписания.ВремяНачала)/3600;
					Если КоличествоЧасовПоСтроке<0 Тогда
						//Такая ситуация возможна, если в текущей дате текущее время уже меньше, чем время
						//начала работы по расписанию. Например, задача выдается утром, до начала
						//рабочего дня пользователя
						КоличествоЧасовПоСтроке=0;
					КонецЕсли;
					
					Если КоличествоЧасовПоСтроке>=КоличествоЧасовОсталось Тогда
						//это нужный интервал расписания
						ВремяОкончания=ВремяНачалаРаботы-КоличествоЧасовОсталось*60*60;
						ВремяОкончанияСекундОтНачалаДня=ВремяОкончания-НачалоДня(ВремяНачалаРаботы);
						ИскомоеВремя=НачалоДня(ДатаВыборки)+ВремяОкончанияСекундОтНачалаДня;
						Возврат ИскомоеВремя;
						
					Иначе
						//в строке расписания нехватило часов, будем смореть следующую строку
						КоличествоЧасовОсталось=КоличествоЧасовОсталось-КоличествоЧасовПоСтроке;
						//перейдем к следующей строке расписания
						Продолжить;
						
					КонецЕсли;
					
					//если дошли до этого места и не вышли из функции,
					//то в текущем дне оказалось рабочих часов меньше, чем ожидалось 
					//например, задача выдана текущим днем, часов на её выполнение было бы достаточно
					//с начала рабочего дня, но задача выдана позже и рабочего времени не хватило
					//придется переходить к следующему дню			
					
				КонецЦикла; //по расписанию дня
				
			КонецЕсли; //нужный день
			
			//уменьшим количество часов на количество в обработанном дне
			Если ВычестьПолныйДень Тогда
				КоличествоЧасовОсталось=КоличествоЧасовОсталось-КоличествоЧасовВДне;
			КонецЕсли;
				
		КонецЕсли; //в дне были рабочие часы
				
		//перейдем к предыдущей дате
		ДатаВыборки=ДатаВыборки-24*60*60;
		Если ДатаВыборки<=МинимальнаяДатаКалендаря Тогда
			ЗаписьЖурналаРегистрации("В графике не хватило данных о дневных расписаниях", УровеньЖурналаРегистрации.Ошибка,КалендарныеГрафики,,"Минимальная дата графика """+СокрЛП(КалендарныеГрафики)+""" "+СокрЛП(МинимальнаяДатаКалендаря));
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла; //по остатку часов и дням календаря
	
	//нужная дата не найдена
	Возврат Неопределено;
	
КонецФункции

// Функция расчитывает и возвращает количество рабочих часов для недели
// Параметры:
//	Календарь - ссылка на календарь (Справочник.Календари)
//	НомерДняНедели - номер дня недели
// Возвращаемое значение: Число
Функция ПолучитьКоличествоРабочихЧасовДняНедели(Календарь, НомерДняНедели) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица=Календарь.РасписаниеРаботы.Выгрузить();
	
	Если Таблица.Количество()=0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ИтогоСекунд=0;
	
	Для Каждого СтрокаТЧ Из Таблица Цикл
		Если СтрокаТЧ.НомерДня<>НомерДняНедели Тогда
			Продолжить;
		КонецЕсли;
		
		Если Календарь.ШаблонЗаполнения.Количество()<НомерДняНедели Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаШаблона=Календарь.ШаблонЗаполнения[НомерДняНедели-1];
		Если НЕ СтрокаШаблона.ДеньВключенВГрафик Тогда
			Продолжить;
		КонецЕсли;		
		
		ДлительностьРаботыСекунд=СтрокаТЧ.ВремяОкончания-СтрокаТЧ.ВремяНачала;
		
		ИтогоСекунд=ИтогоСекунд+ДлительностьРаботыСекунд;
		
	КонецЦикла;
	
	ВсегоЧасов=ИтогоСекунд/(60*60);
	
	Возврат ВсегоЧасов;
	
КонецФункции

#КонецОбласти
