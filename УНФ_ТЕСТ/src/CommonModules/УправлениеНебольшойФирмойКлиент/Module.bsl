
#Область ПрограммныйИнтерфейс

#Область ХочуБольшеВозможностей

// Добавляет информацию о программе и создает письмо для сбора пожеланий о новых возможностях
//
// Параметры:
//	ИнформацияОПрограмме - Строка - Информация о программе, подставляемая в письмо
//	Текст				 - Строка - Вступительный текст письма
//
Процедура ПредложитьВозможностьНажатие(Тег, Текст = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Текст = НСтр("ru = 'Опишите, каких возможностей вам не хватает в программе:'");
	КонецЕсли;
	
	ИнформацияОПрограмме = УправлениеНебольшойФирмойВызовСервера.СлужебнаяИнформацияДляПисьма(Тег);
	ТекстПисьма = Текст + Символы.ПС + Символы.ПС + Символы.ПС + Символы.ПС + Символы.ПС + ИнформацияОПрограмме;
	
	Получатель = Новый СписокЗначений;
	Получатель.Добавить("sbm@1c.ru", НСтр("ru ='Команда разработки 1С:УНФ'"));
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Получатель", Получатель);
	ПараметрыПисьма.Вставить("Тема", НСтр("ru = 'Хочу эти возможности в будущей версии'"));
	ПараметрыПисьма.Вставить("Текст", ТекстПисьма);
	
	РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыПисьма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбщегоНазначения

// Выводит сообщение об ошибке заполнения поля.
//
Процедура СообщитьОбОшибке(ОбъектСОшибкой, ТекстСообщения, ИмяТабличнойЧасти = Неопределено, НомерСтроки = Неопределено, Поле = Неопределено, Отказ = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю();
	Сообщение.Текст = ТекстСообщения;
	
	Если ИмяТабличнойЧасти <> Неопределено Тогда
		Сообщение.Поле = ИмяТабличнойЧасти + "[" + (НомерСтроки - 1) + "]." + Поле;
	ИначеЕсли ЗначениеЗаполнено(Поле) Тогда
		Сообщение.Поле = Поле;
	КонецЕсли;
	
	Если ОбъектСОшибкой <> Неопределено Тогда
		Сообщение.УстановитьДанные(ОбъектСОшибкой);
	КонецЕсли;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры // СообщитьОбОшибке()

// Функция проверяет возможность печати чека на фискальном регистраторе.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма документа
//
// Возвращаемое значение:
//	Булево - Признак возможности печати
//
Функция ПроверитьВозможностьПечатиЧека(Форма, ПоказыватьПредупреждение = Ложь, ВыводитьОписаниеОшибки = Ложь) Экспорт
	
	ПечататьЧек = Истина;
	
	// Если объект не проведен или модифицирован - выполним проведение.
	Если НЕ Форма.Объект.Проведен
		ИЛИ Форма.Модифицированность Тогда
		
		Попытка
			Если НЕ Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение)) Тогда
				ПечататьЧек = Ложь;
			КонецЕсли;
		Исключение
			Если ВыводитьОписаниеОшибки Тогда
				Сообщить(ОписаниеОшибки());
			КонецЕсли;
			ПоказыватьПредупреждение = Истина;
			ПечататьЧек = Ложь;
		КонецПопытки;
			
	КонецЕсли;
	
	Возврат ПечататьЧек;
	
КонецФункции // ПроверитьВозможностьПечатиЧека()

// Функция пересчитывает сумму из одной валюты в другую
//
// Параметры:      
//	Сумма         - Число - сумма, которую следует пересчитать.
// 	КурсНач       - Число - курс из которого надо пересчитать.
// 	КурсКон       - Число - курс в который надо пересчитать.
// 	КратностьНач  - Число - кратность из которого надо пересчитать 
//                  (по умолчанию = 1).
// 	КратностьКон  - Число - кратность в который надо пересчитать 
//                  (по умолчанию = 1).
//
// Возвращаемое значение: 
//  Число - сумма, пересчитанная в другую валюту.
//
Функция ПересчитатьИзВалютыВВалюту(Сумма, КурсНач, КурсКон,	КратностьНач = 1, КратностьКон = 1) Экспорт
	
	Если (КурсНач = КурсКон) И (КратностьНач = КратностьКон) Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если КурсНач = 0 ИЛИ КурсКон = 0 ИЛИ КратностьНач = 0 ИЛИ КратностьКон = 0 Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Обнаружен нулевой курс валюты. Пересчет не выполнен.'");
		Сообщение.Сообщить();
		Возврат Сумма;
	КонецЕсли;
	
	СуммаПересчитанная = Окр((Сумма * КурсНач * КратностьКон) / (КурсКон * КратностьНач), 2);
	
	Возврат СуммаПересчитанная;
	
КонецФункции // ПересчитатьИзВалютыВВалюту()

// Процедура обновляет состояние документа.
//
Процедура ОбновитьСостояниеДокумента(Объект, СостояниеДокумента, КартинкаСостоянияДокумента, РазрешеноПроведение) Экспорт
	
	Если Объект.Проведен Тогда
		СостояниеДокумента = "Проведен";
		КартинкаСостоянияДокумента = 1;
	ИначеЕсли РазрешеноПроведение Тогда
		СостояниеДокумента = "Не проведен";
		КартинкаСостоянияДокумента = 0;
	Иначе
		СостояниеДокумента = "Записан";
		КартинкаСостоянияДокумента = 3;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСостояниеДокумента()

// Функция возвращает представление дня недели.
//
Функция ПолучитьПредставлениеДняНедели(ДеньНеделиКалендаря) Экспорт
	
	НомерДняНедели = ДеньНедели(ДеньНеделиКалендаря);
	Если НомерДняНедели = 1 Тогда
		
		Возврат НСтр("ru = 'Пн'");
		
	ИначеЕсли НомерДняНедели = 2 Тогда
		
		Возврат НСтр("ru = 'Вт'");
		
	ИначеЕсли НомерДняНедели = 3 Тогда
		
		Возврат НСтр("ru = 'Ср'");
		
	ИначеЕсли НомерДняНедели = 4 Тогда
		
		Возврат НСтр("ru = 'Чт'");
		
	ИначеЕсли НомерДняНедели = 5 Тогда
		
		Возврат НСтр("ru = 'Пт'");
		
	ИначеЕсли НомерДняНедели = 6 Тогда
		
		Возврат НСтр("ru = 'Сб'");
		
	Иначе
		
		Возврат НСтр("ru = 'Вс'");
		
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеДняНедели()

// Заполняет структуру данных для открытии формы выбора календаря
//
Функция ПолучитьПараметрыОткрытияФормыКалендаря(ДатаКалендаряПриОткрытии, 
		ЗакрыватьПриВыборе = Истина, 
		МножественныйВыбор = Ложь) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить(
		"ДатаКалендаря", 
			ДатаКалендаряПриОткрытии
		);
		
	СтруктураПараметров.Вставить(
		"ЗакрыватьПриВыборе", 
			ЗакрыватьПриВыборе
		);
		
	СтруктураПараметров.Вставить(
		"МножественныйВыбор", 
			МножественныйВыбор
		);
		
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьПараметрыОткрытияФормыКалендаря()

// Помещает переданное значение в СписокЗначений
// 
Функция ЗначениеВСписокЗначенийНаКлиенте(Значение, СписокЗначений = Неопределено, ДобавлятьДубликаты = Ложь) Экспорт
	
	Если ТипЗнч(СписокЗначений) = Тип("СписокЗначений") Тогда
		
		Если ДобавлятьДубликаты Тогда
			
			СписокЗначений.Добавить(Значение);
			
		ИначеЕсли СписокЗначений.НайтиПоЗначению(Значение) = Неопределено Тогда
			
			СписокЗначений.Добавить(Значение);
			
		КонецЕсли;
		
	Иначе
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить(Значение);
		
	КонецЕсли;
	
	Возврат СписокЗначений;
	
КонецФункции // ЗначениеВСписокЗначенийНаКлиенте()

// Заполняет список значеий Приемник из списка значений Источник
//
Процедура ЗаполнитьСписокИзСписка(Источник,Приемник) Экспорт

	Приемник.Очистить();
	Для каждого ЭлСписка Из Источник Цикл
		Приемник.Добавить(ЭлСписка.Значение, ЭлСписка.Представление);
	КонецЦикла;

КонецПроцедуры

// Процедура позволяет установить период через стандартный диалог выбора периода
//
// Параметры:
//  Объект                - Произвольный - Объект в котором устанавливается значения периода
//  ПараметрыПериода      - Структура - структура со свойствами "ДатаНачала", "ДатаОкончания" и в значениях имена полей
//                              объекта, для свойства "Вариант" - значение варианта стандартного периода.
//  ОповещениеПослеВыбора - ОписаниеОповещения - Описание оповещение которое выполняется после установки периода.
//                              Может быть установлена пост-обрабокта в месте вызова после выбора периода.
Процедура РедактироватьПериод(Объект, ПараметрыПериода = Неопределено, ОповещениеПослеВыбора = Неопределено) Экспорт
	
	Если ПараметрыПериода = Неопределено Тогда
		ПараметрыПериода = Новый Структура("ДатаНачала, ДатаОкончания", "ДатаНачала", "ДатаОкончания");
	КонецЕсли;
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
		Диалог.Период.ДатаНачала = Объект[ПараметрыПериода.ДатаНачала];
	КонецЕсли;
	Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
		Диалог.Период.ДатаОкончания = Объект[ПараметрыПериода.ДатаОкончания];
	КонецЕсли;
	Если ПараметрыПериода.Свойство("Вариант") Тогда
		Диалог.Период.Вариант = ПараметрыПериода.Вариант;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект",           Объект);
	ДополнительныеПараметры.Вставить("ПараметрыПериода", ПараметрыПериода);
	Если ОповещениеПослеВыбора <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("ОповещениеПослеВыбора", ОповещениеПослеВыбора);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(
		"РедактироватьПериодЗавершение", 
		ЭтотОбъект, 
		ДополнительныеПараметры);
	
	Диалог.Показать(Оповещение);

КонецПроцедуры

// Процедура завершения для РедактироватьПериод()
// см. подробней для процедуры РедактироватьПериод()
Процедура РедактироватьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт

	ПараметрыПериода = ДополнительныеПараметры.ПараметрыПериода;
	Объект           = ДополнительныеПараметры.Объект;
	Если Период <> Неопределено Тогда
		Если ПараметрыПериода.Свойство("ДатаНачала") Тогда
			Объект[ПараметрыПериода.ДатаНачала]= Период.ДатаНачала;
		КонецЕсли;
		Если ПараметрыПериода.Свойство("ДатаОкончания") Тогда
			Объект[ПараметрыПериода.ДатаОкончания]= Период.ДатаОкончания;
		КонецЕсли;
		Если ПараметрыПериода.Свойство("Вариант") Тогда
			Объект[ПараметрыПериода.Вариант]= Период.Вариант;
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеПослеВыбора") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеПослеВыбора, Период);
	КонецЕсли;
	
КонецПроцедуры

// Дополняет параметры формы из параметров выбора элемента.
// Используется, например, когда следует заполнить реквизиты "Покупатель", "Поставщик"
// в открывшейся форме создания контрагенента из классификатора контактов.
//
// Параметры:
//  ПараметрыФормы	 - Структура - параметры формы, которые следует дополнить,
//  Элемент			 - ЭлементФормы - элемент формы, для которого вызвается процедура.
//
Процедура ДополнитьПараметрыФормыИзПараметровВыбораЭлемента(ПараметрыФормы, Знач Элемент) Экспорт
	
	Для Каждого ТекПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
		
		КомпонентыИмени = СтрРазделить(ТекПараметрВыбора.Имя, ".", Ложь);
		
		Если КомпонентыИмени.Количество() = 1 Тогда
			ПараметрыФормы.Вставить(КомпонентыИмени[0], ТекПараметрВыбора.Значение);
			Продолжить;
		КонецЕсли;
		
		Если КомпонентыИмени[0] <> "Отбор" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПараметрыФормы.Свойство("ЗначенияЗаполнения") Тогда
			ПараметрыФормы.Вставить("ЗначенияЗаполнения", Новый Структура);
		КонецЕсли;
		
		ПараметрыФормы.ЗначенияЗаполнения.Вставить(КомпонентыИмени[1], ТекПараметрВыбора.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаСобытийПриложения

// Реализует обработку события ПередНачаломРаботыСистемы() клиентского
// приложения. Необходимо реализовать вызов метода из
// МодульУправляемогоПриложения.ПередНачаломРаботыСистемы()
// и МодульОбычногоПриложения.ПередНачаломРаботыСистемы().
//
// Обработчик, вызываемый перед началом работы системы.
//
Процедура ПередНачаломРаботыСистемы() Экспорт
	
	ПараметрыПередНачаломРаботы =
		УправлениеНебольшойФирмойСервер.ПередНачаломРаботыСистемы(ПараметрыКлиента());
		
	#Если МобильныйКлиент Тогда
	СчетчикОткрытияФормыОценкиПриложения = УправлениеНебольшойФирмойВызовСервера.ПолучитьСчетчикДляОткрытияФормыОценкиМобильногоКлиента();
	Если СчетчикОткрытияФормыОценкиПриложения >= 3 Тогда
		ОткрытьФорму("ОбщаяФорма.ОценитьМобильныйКлиент", Новый Структура("ПоказатьНеСпрашивать", Истина));
	ИначеЕсли СчетчикОткрытияФормыОценкиПриложения <> -1 Тогда
		СчетчикОткрытияФормыОценкиПриложения = СчетчикОткрытияФормыОценкиПриложения + 1;
		УправлениеНебольшойФирмойВызовСервера.УстановитьСчетчикДляОткрытияФормыОценкиМобильногоКлиента(СчетчикОткрытияФормыОценкиПриложения);
	КонецЕсли;
	#КонецЕсли

	ЭтоМобильныйКлиент = Ложь;
	
	#Если МобильныйКлиент Тогда
	ЭтоМобильныйКлиент = Истина;
	#КонецЕсли
	
	УправлениеНебольшойФирмойВызовСервера.УвеличитьСчетчикЗапусковКлиента(ЭтоМобильныйКлиент);
	
	ЗначенияСчетчикаЗапусковКлиента = УправлениеНебольшойФирмойВызовСервера.ПолучитьЗначенияСчетчикаЗапусковКлиента();
	Если ЗначенияСчетчикаЗапусковКлиента <> 0
		И НЕ ЗначенияСчетчикаЗапусковКлиента.ЗапретОткрытияФормыПереходаВМК
		И ЗначенияСчетчикаЗапусковКлиента.ЭтоМобильныйБраузер Тогда
		ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗапуске();
		Если ПараметрыРаботыКлиента.Свойство("ПоказатьОкноНачалоРаботыСПрограммой")
			И ПараметрыРаботыКлиента.ПоказатьОкноНачалоРаботыСПрограммой = Истина Тогда
			Возврат;
		КонецЕсли;
		НачалоРаботыСПрограммойСервер.УстановитьИнтерфейсНачалаРаботы("ОбщаяФорма.ФормаПереходаВМобильныйКлиент");
		ОбновитьИнтерфейс();
		НачалоРаботыСПрограммойСервер.УстановитьСтандартныйИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры
	
// Возвращает параметры клиентского приложения.
//
// Возвращаемое значение:
//	Структура - параметры клиентского приложения.
//		* ТипПлатформы - Строка - тип платформы;
//		* ВерсияОС - Строка - версия операционной системы;
//		* ЭтоКлиентЧерезВебСервер - Булево - признак того, что тонкий клиент
//			подключен через веб-сервер.
//
Функция ПараметрыКлиента() Экспорт
	
	Результат = Новый Структура;
	
	#Если МобильныйКлиент Тогда
	Результат.Вставить("ЭтоМобильныйКлиент", Истина);
	#Иначе
	Результат.Вставить("ЭтоМобильныйКлиент", Ложь);
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодчиненныеТабличныеЧасти

// Процедура добавляет ключ связи в табличную часть.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//
Процедура ДобавитьКлючСвязиВСтрокуТабличнойЧасти(ФормаДокумента, Строка = Неопределено) Экспорт
	
	Если Строка <> Неопределено Тогда
		СтрокаТабличнойЧасти = Строка;
	Иначе
		СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.КлючСвязи = СоздатьНовыйКлючСвязи(ФормаДокумента);
	
КонецПроцедуры // ДобавитьКлючСвязиВСтрокуТабличнойЧасти()

// Процедура добавляет ключ связи в подчиненную табличную часть.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Процедура ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти, Строка = Неопределено) Экспорт
	
	ПодчиненнаяТабличнаяЧасть = ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти];
	
	Если Строка = Неопределено Тогда
		СтрокаПодчиненнойТабличнойЧасти = ПодчиненнаяТабличнаяЧасть.ТекущиеДанные;
	Иначе
		СтрокаПодчиненнойТабличнойЧасти = Строка;
	КонецЕсли;
	СтрокаПодчиненнойТабличнойЧасти.КлючСвязи = ПодчиненнаяТабличнаяЧасть.ОтборСтрок["КлючСвязи"];
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", ПодчиненнаяТабличнаяЧасть.ОтборСтрок["КлючСвязи"]);
	ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти].ОтборСтрок = СтрОтбора;

КонецПроцедуры // ДобавитьКлючСвязиВСтрокуПодчиненнойТабличнойЧасти()

// Процедура запрещает добавление новой строки, если не выбрана строка в основной табличной части.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Функция ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти) Экспорт

	Если ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбрана строка основной табличной части!'");
		Сообщение.Сообщить();
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции // ПередНачаломДобавленияВПодчиненнуюТабличнуюЧасть()

// Процедура удаляет строки из подчиненной табличной части.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой
//	ИмяПодчиненнойТабличнойЧасти - Строка, содержащая имя подчиненной табличной
//                 части.
//
Процедура УдалитьСтрокиПодчиненнойТабличнойЧасти(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти) Экспорт
	
	СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодчиненнаяТабличнаяЧасть = ФормаДокумента.Объект[ИмяПодчиненнойТабличнойЧасти];
	
	РезультатПоиска = ПодчиненнаяТабличнаяЧасть.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
	Для каждого СтрокаПоиска Из  РезультатПоиска Цикл
		ИндексУдаления = ПодчиненнаяТабличнаяЧасть.Индекс(СтрокаПоиска);
		ПодчиненнаяТабличнаяЧасть.Удалить(ИндексУдаления);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиПодчиненнойТабличнойЧасти()

// Процедура создает новый ключ связи для таблиц.
//
// Параметры:
//  ФормаДокумента - ФормаКлиентскогоПриложения, содержит форму документа, реквизиты
//                 которой обрабатываются процедурой.
//
Функция СоздатьНовыйКлючСвязи(ФормаДокумента) Экспорт

	СписокЗначений = Новый СписокЗначений;
	
	ТабличнаяЧасть = ФормаДокумента.Объект[ФормаДокумента.ИмяТабличнойЧасти];
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
        СписокЗначений.Добавить(СтрокаТЧ.КлючСвязи);
	КонецЦикла;

    Если СписокЗначений.Количество() = 0 Тогда
		КлючСвязи = 1;
	Иначе
		СписокЗначений.СортироватьПоЗначению();
		КлючСвязи = СписокЗначений.Получить(СписокЗначений.Количество() - 1).Значение + 1;
	КонецЕсли;

	Возврат КлючСвязи;

КонецФункции //  СоздатьНовыйКлючСвязи()

// Процедура устанавливает отбор на подчиненную табличную часть.
//
Процедура УстановитьОтборНаПодчиненнуюТабличнуюЧасть(ФормаДокумента, ИмяПодчиненнойТабличнойЧасти, Строка = Неопределено) Экспорт
	
	Если Строка <> Неопределено Тогда
		СтрокаТабличнойЧасти = Строка;
	Иначе
		СтрокаТабличнойЧасти = ФормаДокумента.Элементы[ФормаДокумента.ИмяТабличнойЧасти].ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СтрОтбора = Новый ФиксированнаяСтруктура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	ФормаДокумента.Элементы[ИмяПодчиненнойТабличнойЧасти].ОтборСтрок = СтрОтбора;
	
КонецПроцедуры //УстановитьОтборНаПодчиненнуюТабличнуюЧасть()

#КонецОбласти

#Область ФормыСпискаИВыбораСправочникаКонтрагенты

// Функция проверяет корректность позиционирования при активизации строки.
//
Функция ПозиционированиеКорректно(Форма) Экспорт
	
	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		
	Если ТипЗнч(Форма.Элементы.Список.ТекущаяСтрока) <> ТипГруппировка И ЗначениеЗаполнено(Форма.Элементы.Список.ТекущаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПозиционированиеКорректно()

// Процедура заполняет надпись подвала: Основание выбора справочника Контрагенты.
//
Процедура ЗаполнитьСтрокуОснования(Форма) Экспорт
	
	Основание = Форма.Основания.НайтиСтроки(Новый Структура("Контрагент", Форма.Элементы.Список.ТекущаяСтрока));
	Если Основание.Количество() = 0 Тогда
		Форма.ОснованиеВыбора = "";
	Иначе
		Форма.ОснованиеВыбора = Основание[0].Основание;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуОснования()

// Процедура восстанваливает отображение списка после полнотекстового поиска.
//
Процедура ВостановитьОтображениеСпискаПослеПолнотекстовогоПоиска(Форма) Экспорт
	
	Если Строка(Форма.Элементы.Список.Отображение) <> Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска Тогда
		Если Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = "Иерархический список" Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		ИначеЕсли Форма.РежимОтображенияДоПримененияПолнотекстовогоПоиска = "Дерево" Тогда
			Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Дерево;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВостановитьОтображениеСпискаПослеПолнотекстовогоПоиска()

#КонецОбласти

#Область ИнформационнаяПанель

// Обрабатывает событие активизации строки списка документов.
//
Процедура ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(Форма, ПараметрыИнфПанели) Экспорт
	
	ТекущиеДанныеСписка = Форма.Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка <> Неопределено
		И ТекущиеДанныеСписка.Свойство(ПараметрыИнфПанели.РеквизитКИ) Тогда
		
		ТекущийРеквизитКИ = ТекущиеДанныеСписка[ПараметрыИнфПанели.РеквизитКИ];
		
		Если Форма.ИнформацияСсылка <> ТекущийРеквизитКИ Тогда
			
			Если ЗначениеЗаполнено(ТекущийРеквизитКИ) Тогда
				
				ДанныеИП = УправлениеНебольшойФирмойСервер.ИнформационнаяПанельПолучитьДанные(ТекущийРеквизитКИ, ПараметрыИнфПанели);
				ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП);
				
				Форма.ИнформацияСсылка = ТекущийРеквизитКИ;
				
			Иначе
				
				ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка()

// Процедура заполняет данные информационной панели списка.
//
Процедура ИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП = Неопределено)
	
	Если ДанныеИП = Неопределено Тогда
	
		Форма.ИнформацияСсылка = Неопределено;
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон = "";
			Форма.ИнформацияКонтрагентЭП = "";
			Форма.ИнформацияКонтрагентФакс = "";
			
			Форма.ИнформацияКонтрагентФактАдрес = "";
			Если Форма.Элементы.Найти("ИнформацияКонтрагентАдресДоставки") <> Неопределено
				ИЛИ Форма.Элементы.Найти("РасшифровкаСпискаКонтрагентАдресДоставки") <> Неопределено Тогда
				
				Форма.ИнформацияКонтрагентАдресДоставки = "";
				
			КонецЕсли;
			Форма.ИнформацияКонтрагентЮрАдрес = "";
			
			Форма.ИнформацияКонтрагентПочтовыйАдрес = "";
			Форма.ИнформацияКонтрагентДругаяИнформация = "";
			
			// Взаиморасчеты.
			Если ПараметрыИнфПанели.Свойство("Взаиморасчеты") Тогда
				
				Форма.ИнформацияДолгКонтрагента = 0;
				Форма.ИнформацияНашДолг = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Контактная информация контактных лиц.
		Если ПараметрыИнфПанели.Свойство("КонтактноеЛицо") Тогда
			
			Форма.ИнформацияКонтактноеЛицоТелефон = "";
			Форма.ИнформацияКонтактноеЛицоЭП = "";
			
		КонецЕсли;
		
	Иначе
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон 	= ДанныеИП.Телефон;
			Форма.ИнформацияКонтрагентЭП 		= ДанныеИП.ЭлПочта;
			Форма.ИнформацияКонтрагентФакс 		= ДанныеИП.Факс;
			
			Форма.ИнформацияКонтрагентФактАдрес = ДанныеИП.ФактАдрес;
			Если Форма.Элементы.Найти("ИнформацияКонтрагентАдресДоставки") <> Неопределено
				ИЛИ Форма.Элементы.Найти("РасшифровкаСпискаКонтрагентАдресДоставки") <> Неопределено Тогда
				
				Форма.ИнформацияКонтрагентАдресДоставки = ДанныеИП.АдресДоставки;
				
			КонецЕсли;
			Форма.ИнформацияКонтрагентЮрАдрес 	= ДанныеИП.ЮрАдрес;
			
			Форма.ИнформацияКонтрагентПочтовыйАдрес 	= ДанныеИП.ПочтовыйАдрес;
			Форма.ИнформацияКонтрагентДругаяИнформация 	= ДанныеИП.ДругаяИнформация;
			
			// Взаиморасчеты.
			Если ПараметрыИнфПанели.Свойство("Взаиморасчеты") Тогда
				
				Форма.ИнформацияДолгКонтрагента = ДанныеИП.Долг;
				Форма.ИнформацияНашДолг 		= ДанныеИП.НашДолг;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Контактная информация контактных лиц.
		Если ПараметрыИнфПанели.Свойство("КонтактноеЛицо") Тогда
			
			Форма.ИнформацияКонтактноеЛицоТелефон 	= ДанныеИП.ТелефонКЛ;
			Форма.ИнформацияКонтактноеЛицоЭП 		= ДанныеИП.ЭлПочтаКЛ;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельЗаполнить()

#КонецОбласти

#Область ДисконтныеКарты

// Обрабатывает событие активизации строки списка документов.
//
Процедура ДисконтныеКартыИнформационнаяПанельОбработатьАктивизациюСтрокиСписка(Форма, ПараметрыИнфПанели) Экспорт
	
	ТекущиеДанныеСписка = Форма.Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка <> Неопределено
		И ТекущиеДанныеСписка.Свойство(ПараметрыИнфПанели.РеквизитКИ) Тогда
		
		ТекущийРеквизитКИ = ТекущиеДанныеСписка[ПараметрыИнфПанели.РеквизитКИ];
		
		Если Форма.ИнформацияСсылка <> ПараметрыИнфПанели.ДисконтнаяКарта Тогда
			
			Если ЗначениеЗаполнено(ПараметрыИнфПанели.ДисконтнаяКарта) Тогда
				
				ДанныеИП = УправлениеНебольшойФирмойСервер.ИнформационнаяПанельПолучитьДанные(ТекущийРеквизитКИ, ПараметрыИнфПанели);
				ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП);
				
				Форма.ИнформацияСсылка = ТекущийРеквизитКИ;
				
			Иначе
				
				ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели);
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельОбработатьАктивизациюСтрокиСписка()

// Процедура заполняет данные информационной панели списка.
//
Процедура ДисконтныеКартыИнформационнаяПанельЗаполнить(Форма, ПараметрыИнфПанели, ДанныеИП = Неопределено)
	
	Если ДанныеИП = Неопределено Тогда
	
		Форма.ИнформацияСсылка = Неопределено;
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон = "";
			Форма.ИнформацияКонтрагентЭП = "";
			Форма.ИнформацияПроцентСкидкиПоДисконтнойКарте = "";
			Форма.ИнформацияСуммаПродажПоДисконтнойКарте = "";
			
		КонецЕсли;
		
	Иначе
		
		// Контактная информация контрагентов.
		Если ПараметрыИнфПанели.Свойство("Контрагент") Тогда
			
			Форма.ИнформацияКонтрагентТелефон 				= ДанныеИП.Телефон;
			Форма.ИнформацияКонтрагентЭП 					= ДанныеИП.ЭлПочта;
			Форма.ИнформацияПроцентСкидкиПоДисконтнойКарте 	= ДанныеИП.ПроцентСкидкиПоДисконтнойКарте;
			Форма.ИнформацияСуммаПродажПоДисконтнойКарте	= ДанныеИП.СуммаПродажПоДисконтнойКарте;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнформационнаяПанельЗаполнить()

#КонецОбласти

#Область ЗУП

// Процедура устанавливает период регистрации на начало месяца.
// А так же обновляет надпись периода на форме
Процедура ПриИзмененииПериодаРегистрации(ПереданнаяФорма) Экспорт
	
	Если СтрНайти(ПереданнаяФорма.ИмяФормы, "ЖурналДокументов") > 0 
		ИЛИ СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаОтчета") Тогда
		ПереданнаяФорма.ПериодРегистрации 				= НачалоМесяца(ПереданнаяФорма.ПериодРегистрации);
		ПереданнаяФорма.ОтображениеПериодаРегистрации 	= Формат(ПереданнаяФорма.ПериодРегистрации, "ДФ='MMMM yyyy'");
	ИначеЕсли СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаСписка") > 0 Тогда
		ПереданнаяФорма.ОтборПериодРегистрации 			= НачалоМесяца(ПереданнаяФорма.ОтборПериодРегистрации);
		ПереданнаяФорма.ОтображениеПериодаРегистрации 	= Формат(ПереданнаяФорма.ОтборПериодРегистрации, "ДФ='MMMM yyyy'");
	Иначе
		ПереданнаяФорма.Объект.ПериодРегистрации 		= НачалоМесяца(ПереданнаяФорма.Объект.ПериодРегистрации);
		ПереданнаяФорма.ОтображениеПериодаРегистрации 	= Формат(ПереданнаяФорма.Объект.ПериодРегистрации, "ДФ='MMMM yyyy'");
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииПериодаРегистрации()

// Процедура выполняет приращение даты по кнопкам регулирования
// Используется в журнале и документах зарплаты, Расзод ДС из кассы, отчетах Расчетные листки
// Шаг равняется месяцу
//
// Параметры:
//   ПереданнаяФорма 	- форма, данные которой правятся
//   Направление 		- значение приращения, может быть положительным и отрицательным
Процедура ПриРегулированииПериодаРегистрации(ПереданнаяФорма, Направление) Экспорт
	
	Если СтрНайти(ПереданнаяФорма.ИмяФормы, "ЖурналДокументов") > 0 
		ИЛИ СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаОтчета") Тогда
		
		ПереданнаяФорма.ПериодРегистрации = ?(ЗначениеЗаполнено(ПереданнаяФорма.ПериодРегистрации), 
							ДобавитьМесяц(ПереданнаяФорма.ПериодРегистрации, Направление),
							ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), Направление));
		
	ИначеЕсли СтрНайти(ПереданнаяФорма.ИмяФормы, "ФормаСписка") > 0 Тогда
		
		ПереданнаяФорма.ОтборПериодРегистрации = ?(ЗначениеЗаполнено(ПереданнаяФорма.ОтборПериодРегистрации), 
							ДобавитьМесяц(ПереданнаяФорма.ОтборПериодРегистрации, Направление),
							ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), Направление));
		
	Иначе
		
		ПереданнаяФорма.Объект.ПериодРегистрации = ?(ЗначениеЗаполнено(ПереданнаяФорма.Объект.ПериодРегистрации), 
							ДобавитьМесяц(ПереданнаяФорма.Объект.ПериодРегистрации, Направление),
							ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), Направление));
		
	КонецЕсли;
	
КонецПроцедуры // ПриРегулированииПериодаРегистрации()

#КонецОбласти

#Область Ценообразование

// Процедура рассчитывает сумму строки табличной части при заполнение по "Цены и валюта".
//
Процедура РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабЧасти, ОбнулятьАвтоСкидки = Истина)
	
	Если СтрокаТабЧасти.Свойство("Количество") И СтрокаТабЧасти.Свойство("Цена") Тогда
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена;
	КонецЕсли;
	
	Если СтрокаТабЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		СтрокаТабЧасти.СуммаСкидкиНаценки = Окр(СтрокаТабЧасти.Количество * СтрокаТабЧасти.Цена * СтрокаТабЧасти.ПроцентСкидкиНаценки / 100, 2);
		СтрокаТабЧасти.Сумма = СтрокаТабЧасти.Сумма - СтрокаТабЧасти.СуммаСкидкиНаценки;
	КонецЕсли; 
	
	Если СтрокаТабЧасти.Свойство("СтавкаНДС") Тогда
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабЧасти.СтавкаНДС);
		
		Если ФормаДокумента.Объект.Свойство("СуммаВключаетНДС") Тогда
			
			Если СтрокаТабЧасти.Свойство("Сумма") Тогда
				
				СтрокаТабЧасти.СуммаНДС = ?(
				ФормаДокумента.Объект.СуммаВключаетНДС, 
				СтрокаТабЧасти.Сумма - (СтрокаТабЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабЧасти.Сумма * СтавкаНДС / 100
				);
				СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабЧасти.СуммаНДС);
				
			Иначе
				
				БазаРасчетаНДС = СтрокаТабЧасти.ТаможеннаяСтоимость + СтрокаТабЧасти.СуммаПошлины;
				
				СтрокаТабЧасти.СуммаНДС = ?(
				ФормаДокумента.Объект.СуммаВключаетНДС, 
				БазаРасчетаНДС - (БазаРасчетаНДС) / ((СтавкаНДС + 100) / 100),
				БазаРасчетаНДС * СтавкаНДС / 100
				);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТабЧасти.СуммаНДС = СтрокаТабЧасти.Сумма * СтавкаНДС / 100;
			СтрокаТабЧасти.Всего = СтрокаТабЧасти.Сумма + СтрокаТабЧасти.СуммаНДС;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// АвтоматическиеСкидки
	Если ОбнулятьАвтоСкидки Тогда
		Если СтрокаТабЧасти.Свойство("ПроцентАвтоматическойСкидки") Тогда
			СтрокаТабЧасти.ПроцентАвтоматическойСкидки = 0;
			СтрокаТабЧасти.СуммаАвтоматическойСкидки = 0;
		КонецЕсли;
	КонецЕсли;
	// Конец АвтоматическиеСкидки
	
КонецПроцедуры // РассчитатьСуммуСтрокиТабличнойЧасти()	

// Выполняем пересчет цены по флагу СуммаВключаетНДС табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			
			Если ФормаДокумента.Объект.СуммаВключаетНДС Тогда
				
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * (100 + СтавкаНДС)) / 100;
				
			Иначе
				
				СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Цена * 100) / (100 + СтавкаНДС);
				
			КонецЕсли;
			
		КонецЕсли;
		
		РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		
	КонецЦикла;
	
КонецПроцедуры // ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен(ФормаДокумента, ИмяТабличнойЧасти, ПересчитатьСкидки = Ложь, ПересчитыватьЦеныСЗаказом = Истина) Экспорт
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				ФормаДокумента.Объект.Дата);
	СтруктураДанных.Вставить("Организация",			ФормаДокумента.Компания);
	СтруктураДанных.Вставить("ВидЦен",				ФормаДокумента.Объект.ВидЦен);
	СтруктураДанных.Вставить("ВалютаДокумента",		ФормаДокумента.Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	ФормаДокумента.Объект.СуммаВключаетНДС);
	
	Если ПересчитатьСкидки Тогда
		СтруктураДанных.Вставить("ВидСкидкиНаценки", ФормаДокумента.Объект.ВидСкидкиНаценки);
		СтруктураДанных.Вставить("ПроцентСкидкиНаценки", 0);
		Если УправлениеНебольшойФирмойСервер.ЕстьРеквизитДокументаПоСсылке("ПроцентСкидкиПоДисконтнойКарте", ФормаДокумента.Объект.Ссылка) Тогда
			СтруктураДанных.Вставить("ПроцентСкидкиПоДисконтнойКарте", ФормаДокумента.Объект.ПроцентСкидкиПоДисконтнойКарте);		
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если ТипЗнч(СтрокаТЧ.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтрокаТабличнойЧасти.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		// Наборы
		Если СтрокаТЧ.Свойство("НоменклатураНабора") Тогда
			СтрокаТабличнойЧасти.Вставить("НоменклатураНабора",		СтрокаТЧ.НоменклатураНабора);
			СтрокаТабличнойЧасти.Вставить("ХарактеристикаНабора",	СтрокаТЧ.ХарактеристикаНабора);
			СтрокаТабличнойЧасти.Вставить("ДоляСтоимости",			СтрокаТЧ.ДоляСтоимости);
			СтрокаТабличнойЧасти.Вставить("Количество",				СтрокаТЧ.Количество);
			Если ФормаДокумента.Объект.Свойство("ДобавленныеНаборы") Тогда
				// Количество добавленных наборов
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("НоменклатураНабора", СтрокаТЧ.НоменклатураНабора);
				СтруктураОтбора.Вставить("ХарактеристикаНабора", СтрокаТЧ.ХарактеристикаНабора);
				Если СтрокаТЧ.Свойство("НомерВариантаКП") Тогда
					СтруктураОтбора.Вставить("НомерВариантаКП", СтрокаТЧ.НомерВариантаКП);
				КонецЕсли;
				ДобавленныеСтроки = ФормаДокумента.Объект.ДобавленныеНаборы.НайтиСтроки(СтруктураОтбора);
				Если ДобавленныеСтроки.Количество()=0 Тогда
					СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", 1);
				Иначе
					СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", ДобавленныеСтроки[0].Количество);
				КонецЕсли;
			Иначе
				СтрокаТабличнойЧасти.Вставить("КоличествоНаборов", 1);
			КонецЕсли;
			Если СтрокаТЧ.Свойство("НомерВариантаКП") Тогда
				СтрокаТабличнойЧасти.Вставить("НомерВариантаКП", СтрокаТЧ.НомерВариантаКП);
			Иначе
				СтрокаТабличнойЧасти.Вставить("НомерВариантаКП", 0);
			КонецЕсли; 
		КонецЕсли;
		// Конец Наборы
		СтрокаТабличнойЧасти.Вставить("Цена",				0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	УправлениеНебольшойФирмойСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦен(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",		СтрокаТЧ.Характеристика);
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		Если СтрокаТЧ.Свойство("НоменклатураНабора") Тогда
			СтруктураПоиска.Вставить("НоменклатураНабора",	 СтрокаТЧ.НоменклатураНабора);
			СтруктураПоиска.Вставить("ХарактеристикаНабора", СтрокаТЧ.ХарактеристикаНабора);
		КонецЕсли; 
		
		РезультатПоиска = ФормаДокумента.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			Если ПересчитыватьЦеныСЗаказом ИЛИ 
				(НЕ ПересчитыватьЦеныСЗаказом И НЕ ЗначениеЗаполнено(СтрокаРезультат.Заказ)) Тогда
				СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			КонецЕсли;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаРезультат);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Наборы
	// Округление цен составляющих набора
	Если СтруктураДанных.Свойство("ОкругленияНаборов") И СтруктураДанных.ОкругленияНаборов.Количество()>0 Тогда
		Для каждого ОписаниеОкругления Из СтруктураДанных.ОкругленияНаборов Цикл
			НаборыКлиентСервер.ОкруглениеЦеныНабора(
			ОписаниеОкругления.НоменклатураНабора, 
			ОписаниеОкругления.ХарактеристикаНабора, 
			?(ОписаниеОкругления.Свойство("НомерВариантаКП"), ОписаниеОкругления.НомерВариантаКП, Неопределено), 
			ФормаДокумента.Объект[ИмяТабличнойЧасти], 
			ОписаниеОкругления.Округление);
		КонецЦикла; 
	КонецЕсли;
	// Конец Наборы
	
	Если ПересчитатьСкидки Тогда
		Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
			СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = СтруктураДанных.ПроцентСкидкиНаценки;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

// Выполняем пересчет цены табличной части документа после изменений в форме 
// "Цены и валюта".
//
Процедура ПерезаполнитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
	
	СтруктураДанных = Новый Структура;
	ТабличнаяЧастьДокумента = Новый Массив;

	СтруктураДанных.Вставить("Дата",				ФормаДокумента.Объект.Дата);
	СтруктураДанных.Вставить("Организация",			ФормаДокумента.Компания);
	СтруктураДанных.Вставить("ВидЦенКонтрагента",	ФормаДокумента.Объект.ВидЦенКонтрагента);
	СтруктураДанных.Вставить("ВалютаДокумента",		ФормаДокумента.Объект.ВалютаДокумента);
	СтруктураДанных.Вставить("СуммаВключаетНДС",	ФормаДокумента.Объект.СуммаВключаетНДС);
	
	Для каждого СтрокаТЧ Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТЧ.Цена = 0;
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;	
		КонецЕсли; 
		
		СтрокаТабличнойЧасти = Новый Структура();
		СтрокаТабличнойЧасти.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		
		Если СтрокаТЧ.Свойство("Характеристика") Тогда
			
			СтрокаТабличнойЧасти.Вставить("Характеристика",	СтрокаТЧ.Характеристика);
			
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтрокаТабличнойЧасти.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		СтрокаТабличнойЧасти.Вставить("Цена",				0);
		
		ТабличнаяЧастьДокумента.Добавить(СтрокаТабличнойЧасти);
		
	КонецЦикла;
		
	УправлениеНебольшойФирмойСервер.ПолучитьЦеныТабличнойЧастиПоВидуЦенКонтрагента(СтруктураДанных, ТабличнаяЧастьДокумента);
		
	Для каждого СтрокаТЧ Из ТабличнаяЧастьДокумента Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",		СтрокаТЧ.Номенклатура);
		
		Если СтрокаТЧ.Свойство("Характеристика") Тогда
			
			СтруктураПоиска.Вставить("Характеристика",	СтрокаТЧ.Характеристика);
			
		КонецЕсли;
		
		СтруктураПоиска.Вставить("ЕдиницаИзмерения",	СтрокаТЧ.ЕдиницаИзмерения);
		СтруктураПоиска.Вставить("СтавкаНДС",			СтрокаТЧ.СтавкаНДС);
		
		РезультатПоиска = ФормаДокумента.Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаРезультат Из РезультатПоиска Цикл
			
			СтрокаРезультат.Цена = СтрокаТЧ.Цена;
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаРезультат);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЦеныТабличнойЧастиПоВидуЦен()

// Выполняем пересчет цены по валюте табличной части документа после изменений в форме 
// "Цены и валюта".
//
// Параметры:
//  ПредыдущаяВалюта - СправочникСсылка.Валюты, содержит ссылку на предыдущую
//                 валюту.
//
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ФормаДокумента, ПредыдущаяВалюта, ИмяТабличнойЧасти, КурсПересчетаЦен = Неопределено) Экспорт
	
	СтруктураКурсы = УправлениеНебольшойФирмойСервер.ПолучитьКурсыВалют(ПредыдущаяВалюта, ФормаДокумента.Объект.ВалютаДокумента, ФормаДокумента.Объект.Дата);
	
	Если КурсПересчетаЦен <> Неопределено И КурсПересчетаЦен.Свойство("Курс") И КурсПересчетаЦен.Свойство("Кратность") Тогда
		Если ФормаДокумента.Объект.ВалютаДокумента = УправлениеНебольшойФирмойПовтИсп.ПолучитьНациональнуюВалюту() Тогда
			СтруктураКурсы.КурсНач 	 	= ?(КурсПересчетаЦен.Курс	   = 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.КратностьНач = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		Иначе
			СтруктураКурсы.Курс 	 = ?(КурсПересчетаЦен.Курс 		= 0, 1, КурсПересчетаЦен.Курс);
			СтруктураКурсы.Кратность = ?(КурсПересчетаЦен.Кратность = 0, 1, КурсПересчетаЦен.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		// Цена.
		Если СтрокаТабличнойЧасти.Свойство("Цена") Тогда
			
			СтрокаТабличнойЧасти.Цена = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
																	СтруктураКурсы.КурсНач, 
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);
																	
			РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
			
		// Сумма.
		ИначеЕсли СтрокаТабличнойЧасти.Свойство("Сумма") Тогда
			
			СтрокаТабличнойЧасти.Сумма = ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, 
																	СтруктураКурсы.КурсНач,
																	СтруктураКурсы.Курс, 
																	СтруктураКурсы.КратностьНач, 
																	СтруктураКурсы.Кратность);
					
			Если СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
				
				// Скидки.
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
					СтрокаТабличнойЧасти.Сумма = 0;
				ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки <> 0 И СтрокаТабличнойЧасти.Количество <> 0 Тогда
					СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма * (1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100);
				КонецЕсли;
								
			КонецЕсли;														
			
			СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			
	        СтрокаТабличнойЧасти.СуммаНДС = ?(ФормаДокумента.Объект.СуммаВключаетНДС, 
								  				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
								  				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
					        		
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ФормаДокумента.Объект.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры // ПересчитатьЦеныТабличнойЧастиПоВалюте()

#КонецОбласти

#Область ОбработкаТабличнойЧасти

Процедура РассчитатьСуммыВСтрокеТЧ(СтрокаТабличнойЧасти, ПараметрыРасчета) Экспорт

	Если НЕ ПараметрыРасчета.Свойство("РассчитатьСуммуСкидки") И НЕ ПараметрыРасчета.Свойство("РассчитатьПроцентСкидки") Тогда
		ПараметрыРасчета.Вставить("РассчитатьСуммуСкидки", Истина);
	КонецЕсли;
	Если НЕ ПараметрыРасчета.Свойство("РассчитатьСумму") И НЕ ПараметрыРасчета.Свойство("РассчитатьЦену") Тогда
		ПараметрыРасчета.Вставить("РассчитатьСумму", Истина);
	КонецЕсли;

	Если СтрокаТабличнойЧасти.Свойство("Кратность") И СтрокаТабличнойЧасти.Свойство("Коэффициент") Тогда
		КоличествоСтроки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Коэффициент;
	Иначе
		КоличествоСтроки = СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 
	
	Если ПараметрыРасчета.Свойство("СброситьФлагСкидкиРассчитаны") И ПараметрыРасчета.СброситьФлагСкидкиРассчитаны
		И СтрокаТабличнойЧасти.Свойство("ПроцентАвтоматическойСкидки")
		Тогда
		СтрокаТабличнойЧасти.ПроцентАвтоматическойСкидки = 0;
		СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("ПроцентСкидкиНаценки") Тогда
		
		ЕстьСкидкаБонусом = СтрокаТабличнойЧасти.Свойство("СуммаСкидкиОплатыБонусом");
		
		Если ПараметрыРасчета.Свойство("РассчитатьЦену") И ПараметрыРасчета.РассчитатьЦену=Истина Тогда //Введена сумма строки, нужно пересчитать цену и сумму скидки
			Если КоличествоСтроки <> 0 Тогда
				Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки >= 100 Тогда
					// Если введена сумма строки и скидка 100%, меняем процент скидки
					СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Окр(100* (1 - СтрокаТабличнойЧасти.Сумма / (КоличествоСтроки * СтрокаТабличнойЧасти.Цена - ?(ЕстьСкидкаБонусом, СтрокаТабличнойЧасти.СуммаСкидкиОплатыБонусом, 0))), 2);
					СтрокаТабличнойЧасти.СуммаСкидкиНаценки = Окр((КоличествоСтроки * СтрокаТабличнойЧасти.Цена - ?(ЕстьСкидкаБонусом, СтрокаТабличнойЧасти.СуммаСкидкиОплатыБонусом, 0)) * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100, 2);	
				Иначе
					СтрокаТабличнойЧасти.Цена = (СтрокаТабличнойЧасти.Сумма - ?(ЕстьСкидкаБонусом, СтрокаТабличнойЧасти.СуммаСкидкиОплатыБонусом, 0))/((1 - СтрокаТабличнойЧасти.ПроцентСкидкиНаценки/100)*КоличествоСтроки);	
					СтрокаТабличнойЧасти.СуммаСкидкиНаценки = Окр((КоличествоСтроки * СтрокаТабличнойЧасти.Цена - ?(ЕстьСкидкаБонусом, СтрокаТабличнойЧасти.СуммаСкидкиОплатыБонусом, 0)) * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100, 2);	
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ПараметрыРасчета.Свойство("РассчитатьПроцентСкидки") И ПараметрыРасчета.РассчитатьПроцентСкидки И СтрокаТабличнойЧасти.Сумма > 0 Тогда //Введена сумма скидки, нужно пересчитать процент скидки
			Если СтрокаТабличнойЧасти.СуммаСкидкиНаценки >= СтрокаТабличнойЧасти.Сумма Тогда
				СтрокаТабличнойЧасти.СуммаСкидкиНаценки = СтрокаТабличнойЧасти.Сумма;
				СтрокаТабличнойЧасти.Сумма = 0;
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100;
			Иначе
				СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Окр(100*СтрокаТабличнойЧасти.СуммаСкидкиНаценки / (КоличествоСтроки * СтрокаТабличнойЧасти.Цена - ?(ЕстьСкидкаБонусом, СтрокаТабличнойЧасти.СуммаСкидкиОплатыБонусом, 0)), 2);
			КонецЕсли;
			СтрокаТабличнойЧасти.Сумма = КоличествоСтроки * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.СуммаСкидкиНаценки - ?(ЕстьСкидкаБонусом, СтрокаТабличнойЧасти.СуммаСкидкиОплатыБонусом, 0);
		Иначе  //Если введен процент скидки, или если указаны и процент, и сумма, пересчитываем сумму скидки из процента, указанного в строке
			СтрокаТабличнойЧасти.СуммаСкидкиНаценки = Окр((КоличествоСтроки * СтрокаТабличнойЧасти.Цена - ?(ЕстьСкидкаБонусом, СтрокаТабличнойЧасти.СуммаСкидкиОплатыБонусом, 0)) * СтрокаТабличнойЧасти.ПроцентСкидкиНаценки / 100, 2);
			СтрокаТабличнойЧасти.Сумма = КоличествоСтроки * СтрокаТабличнойЧасти.Цена - СтрокаТабличнойЧасти.СуммаСкидкиНаценки - ?(ЕстьСкидкаБонусом, СтрокаТабличнойЧасти.СуммаСкидкиОплатыБонусом, 0);
		КонецЕсли;
	Иначе 	
		Если ПараметрыРасчета.Свойство("РассчитатьЦену") И ПараметрыРасчета.РассчитатьЦену=Истина Тогда //Введена сумма строки, нужно пересчитать цену с сумму скидки
			СтрокаТабличнойЧасти.Цена = ?(КоличествоСтроки=0, 0, СтрокаТабличнойЧасти.Сумма / КоличествоСтроки);
		Иначе
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * КоличествоСтроки;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Свойство("СуммаСкидки") Тогда
		СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.СуммаСкидкиНаценки;
	КонецЕсли; 
	
	РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, ПараметрыРасчета);
	
КонецПроцедуры

Процедура РассчитатьСуммуНДСИВсего(СтрокаТабличнойЧасти, ПараметрыРасчета) Экспорт
	
	СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(ПараметрыРасчета.СуммаВключаетНДС, 
									  СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
									  
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧасти, "Всего") Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(ПараметрыРасчета.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТабличнойЧасти, "СуммаСНДС") Тогда // в документе ВыводИзОборотаИСМП
		СтрокаТабличнойЧасти.СуммаСНДС = СтрокаТабличнойЧасти.Сумма + ?(ПараметрыРасчета.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуНДС()

Функция НоваяСтоимостьСУчетомИзмененийПоНДС2018(СтоимостьТекущая, СтавкаНДСТекущая, СтавкаНДСНовая) Экспорт
	
	СтавкаНДСРасчетная = СтавкаНДСТекущая + 100;
	
	СтоимостьНовая = (СтоимостьТекущая - (СтоимостьТекущая*СтавкаНДСТекущая/СтавкаНДСРасчетная)) + (СтоимостьТекущая - (СтоимостьТекущая*СтавкаНДСТекущая/СтавкаНДСРасчетная)) * СтавкаНДСНовая / 100;
	
	Возврат СтоимостьНовая;
	
КонецФункции

#КонецОбласти

#Область ДисконтныеКарты

// Выполняем пересчет суммы табличной части документа после считывания дисконтной карты.
Процедура ПерезаполнитьСкидкиТабличнойЧастиПослеСчитыванияДисконтнойКарты(ФормаДокумента, ИмяТабличнойЧасти) Экспорт
																	   
	Скидка = УправлениеНебольшойФирмойСервер.ПолучитьПроцентСкдикиПоВидуСкидокНаценок(ФормаДокумента.Объект.ВидСкидкиНаценки) + ФормаДокумента.Объект.ПроцентСкидкиПоДисконтнойКарте;
	
	Для каждого СтрокаТабличнойЧасти Из ФормаДокумента.Объект[ИмяТабличнойЧасти] Цикл
		
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = Скидка;
		
		РассчитатьСуммуСтрокиТабличнойЧасти(ФормаДокумента, СтрокаТабличнойЧасти);
		        
	КонецЦикла;
	
КонецПроцедуры // ПересчитаемСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()

#КонецОбласти

#Область СчетФактура

// Устанавливает надпись гиперссылки на Счет-фактуру
//
Процедура УстановитьТекстПроСчетФактуру(ФормаДокумента, Полученный = Ложь) Экспорт

	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ФормаДокумента.Объект.Ссылка, Полученный);
	Если ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		ФормаДокумента.СчетФактураТекст = ПредставлениеСчетаФактуры(НайденныйСчетФактура.Номер, НайденныйСчетФактура.Дата);	
	Иначе
	    ФормаДокумента.СчетФактураТекст = "Ввести счет-фактуру";
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

// Формирует надпись гиперссылки на Счет-фактуру
//
Функция ПредставлениеСчетаФактуры(Дата, Номер) Экспорт

	ТекстПроСчетФактуру = НСтр("ru = '№ %Номер% от %Дата% г.'");
	КороткийНомер = РаботаСФормойДокументаКлиентСервер.ПолучитьКороткийНомерДокумента(Номер);
	ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Номер%", КороткийНомер);
	ТекстПроСчетФактуру = СтрЗаменить(ТекстПроСчетФактуру, "%Дата%", Формат(Дата, "ДФ=dd.MM.yyyy"));	
	Возврат ТекстПроСчетФактуру;

КонецФункции // ПолучитьПредставлениеСчетаФактуры()

// Устанавливает надпись гиперссылки на Счет-фактуру
//
Процедура ОткрытьСчетФактуру(ФормаДокумента, Полученный = Ложь) Экспорт
	
	НайденныйСчетФактура = УправлениеНебольшойФирмойСервер.ПолучитьПодчиненныйСчетФактуру(ФормаДокумента.Объект.Ссылка, Полученный);
	
	Если ФормаДокумента.Объект.ПометкаУдаления 
		И НЕ ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Счет-фактуру нельзя вводить на основании документа, помеченного на удаление!'");	
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли;
	
	Если ФормаДокумента.Модифицированность Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Документ был изменен. Сначала следует записать документ!'");	
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ФормаДокумента.Объект.Ссылка) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Документ не записан. Сначала следует записать документ!'");	
		Сообщение.Сообщить();
		Возврат;	
	КонецЕсли;
	
	Если Полученный Тогда
		ИмяФормы = "Документ.СчетФактураПолученный.ФормаОбъекта";
	Иначе
		ИмяФормы = "Документ.СчетФактура.ФормаОбъекта";
	КонецЕсли;
	
	// Откроем или введем новый документ
	СтруктураПараметровСчетФактуры = Новый Структура;
	Если ЗначениеЗаполнено(НайденныйСчетФактура) Тогда
		
		СтруктураПараметровСчетФактуры.Вставить("Ключ", НайденныйСчетФактура.Ссылка);
		
	Иначе
		
		СтруктураПараметровСчетФактуры.Вставить("Основание", ФормаДокумента.Объект.Ссылка);
		
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормы, СтруктураПараметровСчетФактуры, ФормаДокумента);
	
КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру() 

// Процедура оповещает открытые формы с целью обновления надписи-гиперссылки о счет фактуре
// 
// Используется при печати УПД (Универсального передаточного документа)
// ОписаниеСчетовФактур. Тип Массив (многомерный).
// 
// Каждая строка массива содержит описание созданной счет фактуры.
// Расшифровка описания:
//  [0] - ссылка на документ основание
//  [1] - дата счет фактуры
//  [2] - номер счет фактуры
//
Процедура ОбновитьНадписиОСчетахФактурахОткрытыхФормах(ОписаниеСчетовФактур)
	
	Если ТипЗнч(ОписаниеСчетовФактур) = Тип("Массив") Тогда
		
		Для каждого СчетФактураСозданная Из ОписаниеСчетовФактур Цикл
		
			Структура = Новый Структура;
			Структура.Вставить("ДокументОснование", СчетФактураСозданная[0]);
			Структура.Вставить("Представление", ПредставлениеСчетаФактуры(СчетФактураСозданная[2], СчетФактураСозданная[1]));
			Оповестить("ОбновлениеТекстаПроСчетФактуру", Структура);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНадписиОСчетахФактурахОткрытыхФормах()

// Процедура - обработчик общей команды УниверсальныйКорректировочныйДокумент
//
Процедура СформироватьПечатныеФормыУКД(ПараметрКоманды) Экспорт
	
	СообщенияПользователю = Новый Массив;
	ИсточникиПечати = Новый Структура("ИмяИсточника, СчетФактура, ДокументыРеализации, СозданныеСчетаФактуры", Неопределено, Неопределено, Неопределено, Неопределено);
	
	УправлениеНебольшойФирмойСервер.ЗаполнитьПараметрыПечатиУКД(ПараметрКоманды, ИсточникиПечати, СообщенияПользователю);
	
	Если ИсточникиПечати.СчетФактура <> Неопределено Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьУКД", "УКДСтатус1", ИсточникиПечати.СчетФактура,, ПолучитьЗаголовокПечатнойФормы(ИсточникиПечати.СчетФактура));
		
	ИначеЕсли ИсточникиПечати.ДокументыРеализации <> Неопределено Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПечатьУКД", "УКДСтатус2", ИсточникиПечати.ДокументыРеализации,, ПолучитьЗаголовокПечатнойФормы(ИсточникиПечати.ДокументыРеализации));
		ОбновитьНадписиОСчетахФактурахОткрытыхФормах(ИсточникиПечати.СозданныеСчетаФактуры);
		
	КонецЕсли;
	
	Для каждого Сообщение Из СообщенияПользователю Цикл
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДополнительныеРеквизиты

// Процедура разворачивает дерево значений на форме.
//
Процедура РазвернутьДеревоЗначенийСвойств(ЭлементФормы, Дерево) Экспорт
	
	Для каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
		Идентификатор = Элемент.ПолучитьИдентификатор();
		ЭлементФормы.Развернуть(Идентификатор, Истина);
	КонецЦикла;
	
КонецПроцедуры // РазвернутьДеревоЗначенийСвойств()

// Процедура обработчик события ПередУдалением.
//
Процедура ДеревоЗначенийСвойствПередУдалением(Элемент, Отказ, Модифицированность) Экспорт
	
	Отказ = Истина;
	Элемент.ТекущиеДанные.Значение = Элемент.ТекущиеДанные.ТипЗначенияСвойства.ПривестиЗначение(Неопределено);
	Модифицированность = Истина;
	
КонецПроцедуры // ДеревоЗначенийСвойствПередУдалением()

// Процедура обработчик события ПриНачалеРедактирования.
//
Процедура ДеревоЗначенийСвойствПриНачалеРедактирования(Элемент) Экспорт
	
	Элемент.ПодчиненныеЭлементы.Значение.ОграничениеТипа = Элемент.ТекущиеДанные.ТипЗначенияСвойства;
	
КонецПроцедуры // ДеревоЗначенийСвойствПриНачалеРедактирования()

#КонецОбласти

#Область ДинамическиеСписки

// Добавление группы отбора
// Параметры:
//  КоллекцияЭлементов - контейнер с элементами и группами отбора, например
//                      Список.Отбор.Элементы или группа в отборе.
//  ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных - тип группы.
//  Представление строка - представление группы.
//
Функция СоздатьГруппуЭлементовОтбора(КоллекцияЭлементов, Представление, ТипГруппы) Экспорт
	
	ГруппаЭлементовОтбора = НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление);
	Если ГруппаЭлементовОтбора = Неопределено Тогда
		ГруппаЭлементовОтбора = КоллекцияЭлементов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	Иначе
		ГруппаЭлементовОтбора.Элементы.Очистить();
	КонецЕсли;
	
	ГруппаЭлементовОтбора.Представление    = Представление;
	ГруппаЭлементовОтбора.Применение       = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппы;
	ГруппаЭлементовОтбора.Использование    = Истина;
	
	Возврат ГруппаЭлементовОтбора;
	
КонецФункции

// Процедура изменения элемента отбора в группе элементов отбора.
//
Процедура ИзменитьЭлементОтбораГруппыСписка(Группа, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено) Экспорт
	
	УдалитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля);
	
	Если Установить Тогда
		УстановитьЭлементОтбораКоллекции(Группа.Элементы, ИмяПоля, ПравоеЗначение, ВидСравнения);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлементОтбораПоПредставлению(КоллекцияЭлементов, Представление)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Для каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ЭлементОтбора.Представление = Представление Тогда
			ВозвращаемоеЗначение = ЭлементОтбора;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение
	
КонецФункции

Процедура УстановитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено)
	
	ЭлементОтбора = КоллекцияЭлементов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

Процедура УдалитьЭлементОтбораКоллекции(КоллекцияЭлементов, ИмяПоля)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КоллекцияЭлементов Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			КоллекцияЭлементов.Удалить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Удаляет элемент отбора динамического списка
//
// Параметры:
//  Список  - обрабатываемый динамический список,
//  ИмяПоля - имя поля компоновки, отбор по которому нужно удалить
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля) Экспорт
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Счетчик = 1;
	Пока Счетчик <= Список.Отбор.Элементы.Количество() Цикл
		ЭлементОтбора = Список.Отбор.Элементы[Счетчик - 1];
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных")
			И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			Список.Отбор.Элементы.Удалить(ЭлементОтбора);
		Иначе
			Счетчик = Счетчик + 1;
		КонецЕсли;	
	КонецЦикла; 
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

// Устанавливает элемент отбор динамического списка
//
// Параметры:
//  Список			- обрабатываемый динамический список,
//  ИмяПоля			- имя поля компоновки, отбор по которому нужно установить,
//  ВидСравнения		- вид сравнения отбора, по умолчанию - Равно,
//  ПравоеЗначение 	- значение отбора
//
Процедура УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения = Неопределено) Экспорт
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения     = ?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения);
	ЭлементОтбора.Использование    = Истина;
	ЭлементОтбора.ПравоеЗначение   = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	
КонецПроцедуры // УстановитьЭлементОтбораСписка()

// Изменяет элемент отбора динамического списка
//
// Параметры:
//  Список         - обрабатываемый динамический список,
//  ИмяПоля        - имя поля компоновки, отбор по которому нужно установить,
//  ВидСравнения   - вид сравнения отбора, по умолчанию - Равно,
//  ПравоеЗначение - значение отбора,
//  Установить     - признак необходимости установить отбор
//
Процедура ИзменитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение = Неопределено, Установить = Ложь, ВидСравнения = Неопределено, ОтборПоПериоду = Ложь) Экспорт
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	Если Установить Тогда
		Если ОтборПоПериоду Тогда
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаНачала, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение.ДатаОкончания, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);		
		Иначе
		    УстановитьЭлементОтбораСписка(Список, ИмяПоля, ПравоеЗначение, ВидСравнения);	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЭлементОтбораСписка()

// Функция считывает значения элементов отбора динамического списка
//
Функция ПрочитатьЗначенияОтбораДинамическогоСписка(Список) Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	
	Если ТипЗнч(Список) = Тип("ДинамическийСписок") Тогда
		
		Для каждого ЭлементОтбораДинамическогоСписка Из Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			
			ИмяОтбора = Строка(ЭлементОтбораДинамическогоСписка.ЛевоеЗначение);
			ЗначениеОтбора = ЭлементОтбораДинамическогоСписка.ПравоеЗначение;
			
			Если Найти(ИмяОтбора, ".") > 0 ИЛИ НЕ ЭлементОтбораДинамическогоСписка.Использование Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДанныеЗаполнения.Вставить(ИмяОтбора, ЗначениеОтбора);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции // ПрочитатьЗначенияОтбораДинамическогоСписка()

#КонецОбласти

#Область РасчетИтогов

// Процедура открывает форму самостоятельного управления расчетами итогов
//
Процедура УправлениеИтогами() Экспорт
	
КонецПроцедуры //УправлениеИтогами()

#КонецОбласти

#Область Печать

// Функция формирует заголовок для общей формы "Печать".
// ПараметрКоманды - параметр команды печати.
//
Функция ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") 
		И ПараметрКоманды.Количество() = 1 Тогда 
		
		Возврат Новый Структура("ЗаголовокФормы", ПараметрКоманды[0]);
		
	КонецЕсли;

	Возврат Новый Структура;
	
КонецФункции // ПолучитьЗаголовокПечатнойФормы()

Функция ПечатьСчетовФактур(ПараметрКоманды) Экспорт
	
	ПараметрыПечати = ПолучитьЗаголовокПечатнойФормы(ПараметрКоманды);
	
	Если ПараметрКоманды.Свойство("ДополнительныеПараметры") 
		И ПараметрыПечати <> Неопределено Тогда
		ПараметрыПечати.Вставить("ДополнительныеПараметры", ПараметрКоманды.ДополнительныеПараметры);
	КонецЕсли; 
	
	СписокМакетов = УправлениеНебольшойФирмойСервер.ПолучитьСписокМакетовСчетовФактур(ПараметрКоманды.ОбъектыПечати);
	Если СписокМакетов <> "" Тогда 
		
		Если ПараметрКоманды.ОбъектыПечати.Количество() > 0
			И ТипЗнч(ПараметрКоманды.ОбъектыПечати[0]) = Тип("ДокументСсылка.СчетФактура") Тогда
			ИмяМенеджераПечати = "Документ.СчетФактура";
		Иначе
			ИмяМенеджераПечати = "Документ.СчетФактураПолученный";
		КонецЕсли;
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
			ИмяМенеджераПечати,
			СписокМакетов,
			ПараметрКоманды.ОбъектыПечати,
			ПараметрКоманды.Форма,
			ПараметрыПечати);
			
	КонецЕсли;
	
КонецФункции

// Функция формирования УКД
//
Функция ПечатьУКД(ПараметрКоманды) Экспорт
	Перем Ошибки;
	
	МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
	УправлениеНебольшойФирмойСервер.ПроверитьВозможностьПечатиУКД(МассивОбъектовПечати, Ошибки);
	
	Если МассивОбъектовПечати.Количество() > 0 Тогда
		
		СформироватьПечатныеФормыУКД(МассивОбъектовПечати);
		
	КонецЕсли;
	
	Если Ошибки <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Функция формирования Приложения 4 (ТН)
//
Функция ПечатьТН(ПараметрКоманды) Экспорт
	
	МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
	
	Если МассивОбъектовПечати.Количество() > 0 Тогда
		
		ОткрытьФорму("Обработка.ПечатьТН.Форма", Новый Структура("Документ", МассивОбъектовПечати[0]));
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПечатьТН()

// Процедура обработки команды "ПечатьЭтикетки" или "ПечатьЦенника" из документов 
// - Перемещения товаров
// - Приходная накладная
//
Функция ПечатьЭтикетокИЦенниковИзДокументов(ПараметрКоманды) Экспорт
	
	Если ПараметрКоманды.Количество() > 0 Тогда
		
		МассивОбъектовПечати = ПараметрКоманды.ОбъектыПечати;
		ЭтоЦенники = СтрНайти(ПараметрКоманды.Идентификатор, "ПечатьЦенников") > 0;
		АдресВХранилище = УправлениеНебольшойФирмойСервер.ПодготовитьСтруктуруДанныхПечатиЭтикетокИЦенниковИзДокументов(МассивОбъектовПечати, ЭтоЦенники);
		СтруктураПараметры = Новый Структура("АдресВХранилище", АдресВХранилище);
		ОткрытьФорму("Обработка.ПечатьЭтикетокИЦенников.Форма.Форма", СтруктураПараметры, , Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПечатьЭтикетокИзПеремещенияТоваров()

Функция СформироватьБланкиДоговоров(ПараметрКоманды) Экспорт
	
	Для каждого ОбъектПечати Из ПараметрКоманды.ОбъектыПечати Цикл
		
		Параметры = Новый Структура;
		Параметры.Вставить("Ключ", УправлениеНебольшойФирмойСервер.ПолучитьДоговорДокумента(ОбъектПечати));
		Параметры.Вставить("Документ", ОбъектПечати);
		ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", Параметры);
		ОткрытьФорму(ФормаДоговора);
		ФормаДоговора.Элементы.Страницы.ТекущаяСтраница = ФормаДоговора.Элементы.СтраницаТекстДоговора;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПечатьДоговорКонтрагента(ПараметрКоманды) Экспорт
	
	Если ПараметрКоманды.Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента" Тогда 
		ИсточникПечати = ПараметрКоманды.Форма;
	Иначе
		ПараметрыФормы = Новый Структура("Ключ", ПараметрКоманды.Форма.Элементы.Список.ТекущиеДанные.Ссылка);
		ФормаДоговора = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы);
		ОткрытьФорму(ФормаДоговора);
		ИсточникПечати = ФормаДоговора;
	КонецЕсли;
	
	ИсточникПечати.Элементы.Страницы.ТекущаяСтраница = ИсточникПечати.Элементы.СтраницаТекстДоговора;
	
	Если ПараметрКоманды.Форма.ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента" Тогда
		
		Объект = ПараметрКоманды.Форма.Объект;
		Договор = ИсточникПечати.ДоговорHTMLДокумент;
		
		Если НЕ ЗначениеЗаполнено(Объект.БланкДоговора) Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СсылкаБланка", Объект.БланкДоговора);
		
		МассивРедактируемыхПараметров = Объект.РедактируемыеПараметры.НайтиСтроки(ПараметрыОтбора);
		ВсеРедактируемыеПараметрыЗаполнены = Истина;
		Для Каждого Строка Из МассивРедактируемыхПараметров Цикл 
			Если СтрНайти(Договор, Строка.Идентификатор) <> 0 Тогда
				Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда 
					ВсеРедактируемыеПараметрыЗаполнены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ВсеРедактируемыеПараметрыЗаполнены Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПечатьДоговорКонтрагентаВопрос", ЭтотОбъект,
			               Новый Структура("ИсточникПечати", ИсточникПечати)),
			               НСтр("ru='Не все редактируемые вручную поля заполнены, продолжить печать?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ПечатьДоговорКонтрагентаЗавершение(ИсточникПечати);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПечатьДоговорКонтрагентаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	ИсточникПечати = ДополнительныеПараметры.ИсточникПечати;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПечатьДоговорКонтрагентаЗавершение(ИсточникПечати);
	КонецЕсли;
	
КонецФункции

Функция ПечатьДоговорКонтрагентаЗавершение(ИсточникПечати)
	
	document = ИсточникПечати.Элементы.ДоговорHTMLДокумент.Документ;
	Если document.execCommand("Print") = Ложь Тогда 
		document.defaultView.print();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ЭлектроннаяПочта

// Интерфейсная клиентская процедура, поддерживающая вызов формы редактирования нового письма.
// При отправке письма через стандартную общую форму ОтправкаСообщения сообщения не сохраняются в информационной базе.
//
// Параметры см. в описании функции РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо.
//
Процедура ОткрытьФормуОтправкиПочтовогоСообщения(Отправитель, Получатель, Тема, Текст, СписокФайлов, ДокументыОснования, УдалятьФайлыПослеОтправки, ОписаниеОповещенияОЗакрытии) Экспорт
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("ЗначенияЗаполнения", Новый Структура("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий.ЭлектронноеПисьмо")));
	
	ПараметрыПисьма.Вставить("УчетнаяЗапись", Отправитель);
	ПараметрыПисьма.Вставить("Кому", Получатель);
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", Текст);
	ПараметрыПисьма.Вставить("Вложения", СписокФайлов);
	ПараметрыПисьма.Вставить("ДокументыОснования", ДокументыОснования);
	ПараметрыПисьма.Вставить("УдалятьФайлыПослеОтправки", УдалятьФайлыПослеОтправки);
	
	ОткрытьФорму("Документ.Событие.Форма.ФормаЭлектронногоПисьма", ПараметрыПисьма, , , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочитатьЗначениеРеквизита

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ТестНастроекСертификата() формы элемента справочника СертификатыЭП
//
Функция ПрочитатьЗначениеРеквизита_ПарольПользователя_ЗапомнитьПарольКСертификату_Отпечаток_Ссылка(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_ПарольПользователя_ЗапомнитьПарольКСертификату_Отпечаток_Ссылка(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_СправочникСертификатыЭПФормаЭлемента()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ОбработкаКоманды() команды ТестНастроекСоглашения справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_СправочникСоглашенияОбИспользованииЭД_КомандаТестНастроекСоглашения(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_СправочникСоглашенияОбИспользованииЭД_КомандаТестНастроекСоглашения(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_СправочникСертификатыЭПФормаЭлемента()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры Добавить() формы обработки Прайс-лист
//
Функция ПрочитатьЗначениеРеквизита_Владелец(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_Владелец(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_ОбработкаПрайсЛистФормаОбработки()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ДеревоПодчиненныеЭДВыбор() формы ДеревоЭД обработки ЭлектронныеДокументы
//
Функция ПрочитатьЗначениеРеквизита_Соглашение(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_Соглашение(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_СертификатАбонента(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_СертификатАбонента(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_ЗапомнитьПарольКСертификату(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_ЗапомнитьПарольКСертификату(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ПарольСертификата() формы ФормаЭлементаЧерезОЭДО справочника СоглашенияОбИспользованииЭД
//
Функция ПрочитатьЗначениеРеквизита_ПарольПользователя(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_ПарольПользователя(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

// Заменяет вызов ОбщегоНазначения.ЗначениеРеквизитаОбъекта
// из процедуры ОбработатьОтклонениеЭД() формы ФормаПросмотраЭД справочника ЭДПрисоединенныеФайлы
//
Функция ПрочитатьЗначениеРеквизита_СпособОбменаЭД(ОбъектИлиСсылка) Экспорт
	
	Возврат УправлениеНебольшойФирмойСервер.ПрочитатьЗначениеРеквизита_СпособОбменаЭД(ОбъектИлиСсылка);
	
КонецФункции // ПрочитатьЗначениеРеквизита_Соглашение()

#КонецОбласти

#Область ОбменСБанками

// Начальная процедура работы с загрузкой данных из выписки
// 
// Праметры:
//		- ЗагруженныеДокументы - Массив - список загруженных документов
// 
// Возвращает:
// 		Булево - Истина - если загрузка произведена и ложь, если пользователь отказался
//			или произошла ошибка загрузки
Процедура ЗагрузитьДанныеИзФайлаВыписки(
		ИдентификаторФормы = Неопределено,
		ИмяФайла = "",
		Организация = Неопределено,
		БанковскийСчет = Неопределено,
		СтатьяДДСВходящий = Неопределено,
		СтатьяДДСИсходящий = Неопределено,
		ПроводитьЗагружаемые = Ложь,
		ЗаполнятьДолгиАвтоматически = Ложь,
		Программа = "",
		Кодировка = "Авто",
		ВерсияФормата = "1.02",
		АвтоматическиПодставлятьДокументы = Истина,
		АнализироватьИсториюВыбораЗначенийРеквизитов = Истина,
		НастройкиПолучены = Ложь,
		НеУдалятьДокументыКоторыхНетВВыписке = Ложь,
		КонтролироватьБезопасностьОбменаСБанком = Истина,
		СпособЗачета = Неопределено) Экспорт
		
	СтатьяДДСВходящий = ?(ЗначениеЗаполнено(СтатьяДДСВходящий), СтатьяДДСВходящий, ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаОтПокупателей"));
	СтатьяДДСИсходящий = ?(ЗначениеЗаполнено(СтатьяДДСИсходящий), СтатьяДДСИсходящий, ПредопределенноеЗначение("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщикам"));
	
	ЗагруженныеДокументы = Новый Массив;
	АдресВХранилище = "";
	Результат = Ложь;
	ПутьДоФайла1 = "kl_to_1c.txt";
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресВХранилище", АдресВХранилище);
	ДополнительныеПараметры.Вставить("ПутьДоФайла1", ПутьДоФайла1);
	ДополнительныеПараметры.Вставить("Организация", Организация);
	ДополнительныеПараметры.Вставить("БанковскийСчет", БанковскийСчет);
	ДополнительныеПараметры.Вставить("НастройкиПолучены", НастройкиПолучены);
	ДополнительныеПараметры.Вставить("_ИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ИдентификаторФормы", ИдентификаторФормы);
	
	Если НЕ НастройкиПолучены Тогда
		КлиентБанкВызовСервера.ЗагрузитьНастройкиОбменаСБанкомЧерезФайлы(БанковскийСчет, ДополнительныеПараметры);
	Иначе
		ДополнительныеПараметры.Вставить("СтатьяДДСВходящий", СтатьяДДСВходящий);
		ДополнительныеПараметры.Вставить("СтатьяДДСИсходящий", СтатьяДДСИсходящий);
		ДополнительныеПараметры.Вставить("ПроводитьЗагружаемые", ПроводитьЗагружаемые);
		ДополнительныеПараметры.Вставить("ЗаполнятьДолгиАвтоматически", ЗаполнятьДолгиАвтоматически);
		ДополнительныеПараметры.Вставить("Программа", Программа);
		ДополнительныеПараметры.Вставить("Кодировка", Кодировка);
		ДополнительныеПараметры.Вставить("ВерсияФормата", ВерсияФормата);
		ДополнительныеПараметры.Вставить("АвтоматическиПодставлятьДокументы", АвтоматическиПодставлятьДокументы);
		ДополнительныеПараметры.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", НеУдалятьДокументыКоторыхНетВВыписке);
		ДополнительныеПараметры.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", АнализироватьИсториюВыбораЗначенийРеквизитов);
		ДополнительныеПараметры.Вставить("КонтролироватьБезопасностьОбменаСБанком", КонтролироватьБезопасностьОбменаСБанком);
		ДополнительныеПараметры.Вставить("СпособЗачета", СпособЗачета);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры

Процедура ДействияПоВыборуФайла(ДополнительныеПараметры)
	
	Диалог = ПолучитьДиалогВыбораФайла(ДополнительныеПараметры.ПутьДоФайла1);
	Оповещение = Новый ОписаниеОповещения("ДиалогОткрытияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Диалог.Показать(Оповещение);
	
КонецПроцедуры

Функция ПолучитьДиалогВыбораФайла(пПутьДоФайла)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = НСтр("ru='Выберите файл для загрузки...'");
	Диалог.Фильтр = НСтр("ru='Файлы обмена с 1С (*.txt)|*.txt|Все файлы (*.*)|*.*'");
	Диалог.ПолноеИмяФайла = пПутьДоФайла;
	
	Возврат Диалог;
	
КонецФункции

Процедура ПодключитьРасширениеРаботыСФайламиЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	ИдентификаторФормы = ДополнительныеПараметры.ИдентификаторФормы;
	
	//#Если Не ВебКлиент Тогда
	Если Подключено Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры._ИмяФайла) Тогда // Если есть настройки, то чтение файла сразу.
			ДополнительныеПараметры.Вставить("ВыполнитьДействияЕслиФайлНеПрочитан", Истина);
			ДополнительныеПараметры.ПутьДоФайла1 = ДополнительныеПараметры._ИмяФайла;
			ПрочитатьТекстовыйДокумент(ДополнительныеПараметры, Истина);
		Иначе // Если настроек нет, то диалог открытия файла.
			ДействияПоВыборуФайла(ДополнительныеПараметры);
		КонецЕсли;
		
	Иначе
	//#КонецЕсли
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьДанныеИзФайлаВыпискиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		Диалог = ПолучитьДиалогВыбораФайла(ДополнительныеПараметры.ПутьДоФайла1);
		НачатьПомещениеФайла(ОписаниеОповещения, ДополнительныеПараметры.АдресВХранилище, Диалог, Истина, ДополнительныеПараметры.ИдентификаторФормы);
		
	//#Если Не ВебКлиент Тогда
	КонецЕсли;
	//#КонецЕсли
	
КонецПроцедуры

Процедура ДиалогОткрытияФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено ИЛИ ВыбранныеФайлы.Количество() = 0  Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры._ИмяФайла = ВыбранныеФайлы[0];
	ДополнительныеПараметры.ПутьДоФайла1 = ВыбранныеФайлы[0];
	
	ПрочитатьТекстовыйДокумент(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ВыполнитьДействияЕслиФайлНеПрочитан(ДополнительныеПараметры) Экспорт

	ДействияПоВыборуФайла(ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ПрочитатьТекстовыйДокумент(ДополнительныеПараметры, ИмяФайлаИзНастройки = Ложь)
	
	#Если ВебКлиент Тогда
		
		ДополнительныеПараметры.Вставить("ИмяФайлаИзНастройки", ИмяФайлаИзНастройки);
		ЗагрузитьНаВебКлиенте(ДополнительныеПараметры);
		
	#Иначе
	
		ДанныеФайла = ПолучитьТекстФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки, Ложь);
		Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
			ТекстФайла = ДанныеФайла.ТекстФайла;
			
			Если ДанныеФайла.КоличествоСтрокВФайле = 1 Тогда
				// Скорее всего в файле используется одиночный разделитель строк.
				ДанныеФайла = ПолучитьТекстФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки, Истина);
				ТекстФайла = ДанныеФайла.ТекстФайла;
			КонецЕсли;
			
			ПрочитатьТекстовыйДокументФрагмент(ТекстФайла, ДополнительныеПараметры);
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

Процедура ПрочитатьТекстовыйДокументФрагмент(ТекстФайла, ДополнительныеПараметры)
	
	// Пользователь отказался от передачи файла
	Если СтрДлина(ТекстФайла) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресВХранилище = ПоместитьВоВременноеХранилище(ТекстФайла, ДополнительныеПараметры.ИдентификаторФормы);
	
	ДополнительныеПараметры.АдресВХранилище = АдресВХранилище;
	ЗагрузитьДанныеИзФайлаВыпискиФрагмент(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНаВебКлиентеЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт

	Если Результат Тогда
		
		АдресВременногоХранилища = Адрес;
		
		Состояние(НСтр("ru = 'Загрузка данных...'"),, НСтр("ru = 'Выполняется загрузка данных из файла'"));
		
		ОдиночныйРазделительСтрок = Ложь;
		ДанныеФайла = УправлениеНебольшойФирмойСервер.ПолучитьТекстФайлаНаВебКлиентеФрагмент(АдресВременногоХранилища, ДополнительныеПараметры, ОдиночныйРазделительСтрок);
		ТекстФайла = ДанныеФайла.ТекстФайла;
		
		Если Не ДанныеФайла.БылоИсключение
			И ДанныеФайла.КоличествоСтрокВФайле = 1 Тогда
			// Скорее всего в файле используется одиночный разделитель строк.
			ОдиночныйРазделительСтрок = Истина;
			ДанныеФайла = УправлениеНебольшойФирмойСервер.ПолучитьТекстФайлаНаВебКлиентеФрагмент(
				ДополнительныеПараметры,
				ДополнительныеПараметры.ИмяФайлаИзНастройки,
				ОдиночныйРазделительСтрок);
			ТекстФайла = ДанныеФайла.ТекстФайла;
		КонецЕсли;
		
		Если ДанныеФайла.БылоИсключение Тогда
			ОбработатьИключениеПриПолученииТекстаФайла(ДополнительныеПараметры, ДополнительныеПараметры.ИмяФайлаИзНастройки);
			Возврат;
		КонецЕсли;
		
		ПрочитатьТекстовыйДокументФрагмент(ТекстФайла, ДополнительныеПараметры);
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Загрузка завершена'"),,, БиблиотекаКартинок.Информация32);
		
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru = 'Не удалось поместить файл. Проверьте путь к файлу (кнопка ""Настройка"")'"),,, БиблиотекаКартинок.Ошибка32);
	КонецЕсли;

КонецПроцедуры

Функция ЗагрузитьНаВебКлиенте(ДополнительныеПараметры)
	
	Попытка
		ИмяФайла = ДополнительныеПараметры.ПутьДоФайла1;
		АдресВременногоХранилища = "";
		УникальныйИдентификатор = ДополнительныеПараметры.ИдентификаторФормы;
		
		СистемнаяИнформация = Новый СистемнаяИнформация();
		ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьНаВебКлиентеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения, АдресВременногоХранилища, ИмяФайла, Ложь, УникальныйИдентификатор);
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат ОбработатьИключениеПриПолученииТекстаФайла(ДополнительныеПараметры, ДополнительныеПараметры.ИмяФайлаИзНастройки);
	КонецПопытки
	
КонецФункции

// Возвращаемое значение:
//   Структура   - Ключи структуры:
//                   ТекстФайла
//                   КоличествоСтрокВФайле
Функция ПолучитьТекстФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки, ОдиночныйРазделительСтрок = Ложь)
	
	ИмяФайла = ДополнительныеПараметры.ПутьДоФайла1;
	Кодировка = ДополнительныеПараметры.Кодировка;
	
	БылоИсключение = Ложь;
	Попытка
		
		// Тип файла передаем в виде строки, чтобы обеспечить корректное чтение файла в нелокализованных средах
		// (Linux, англоязычная Windows + англоязычный MS SQL и др.)
		Если Кодировка = Неопределено ИЛИ Кодировка = "Авто" Тогда
			ТипФайла = ТипФайла(ИмяФайла);
		ИначеЕсли (Кодировка = КодировкаТекста.OEM) ИЛИ (Кодировка = "DOS") Тогда
			ТипФайла = "cp866";
		ИначеЕсли ДополнительныеПараметры.Кодировка = "Windows" ИЛИ НЕ ЗначениеЗаполнено(ДополнительныеПараметры.Кодировка) Тогда
			ТипФайла = "windows-1251";
		Иначе
			ТипФайла = ДополнительныеПараметры.Кодировка;
		КонецЕсли;
		
		Если ТипФайла = "cp866" Тогда
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, ТипФайла,,,Ложь);
		Иначе
			// Если в файле строки разделены CR+LF, то одиночные LF не разделяют логические строки файла, а содержится в прикладных данных.
			// При этом в отдельных полях (многострочных) они разделяют подстроки,
			// а в остальных, как правило, содержатся по ошибке и должны быть проигнорированы.
			//
			// Чтобы отличить ошибочные одиночные LF от корректных разделителей CR+LF,
			// при чтении файла используем только двухсимвольный разделитель (CR+LF),
			// а если необходимо избавиться от ошибочных LF (Символы.ПС), то делаем это после чтения строк (перед помещением
			// данных в Секция.Данные).
			//
			// Если же в файле строки разделены одиночным LF, то отличить ошибочные LF от корректных нельзя.
			// Поэтому при чтении файла используем обычный набор разделителей. При этом ошибочно отделенные элементы строк могут
			// быть проигнорированы.
			ДвухсимвольныйРазделительСтрок = Символы.ВК + Символы.ПС;
			Если ОдиночныйРазделительСтрок Тогда
				// Значения по умолчанию. В конструктор их следует передать явно, так как значение пятого параметра указано явно.
				РазделительСтрок               = Символы.ПС;
				КонвертируемыйРазделительСтрок = ДвухсимвольныйРазделительСтрок;
			Иначе
				РазделительСтрок               = ДвухсимвольныйРазделительСтрок;
				КонвертируемыйРазделительСтрок = "";
			КонецЕсли;
			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла, ТипФайла, РазделительСтрок, КонвертируемыйРазделительСтрок, Ложь);
		КонецЕсли;
		
		ВремТекстовыйДокумент = Новый ТекстовыйДокумент;
		КоличествоСтрокВФайле = 0;
		
		Пока Истина Цикл
			
			ТекстСтрокиФайла = ЧтениеТекста.ПрочитатьСтроку();
			
			Если ТекстСтрокиФайла = Неопределено Тогда 
				Прервать;
			КонецЕсли;
			
			ВремТекстовыйДокумент.ДобавитьСтроку(СтрЗаменить(ТекстСтрокиФайла, Символы.ПС, " "));
			КоличествоСтрокВФайле = КоличествоСтрокВФайле + 1;
			
		КонецЦикла;
		
		СтруктураДляВозврата = Новый Структура(
			"ТекстФайла, КоличествоСтрокВФайле",
			ВремТекстовыйДокумент.ПолучитьТекст(), КоличествоСтрокВФайле);
		
		Возврат СтруктураДляВозврата;
		
	Исключение
		
		БылоИсключение = Истина;
		
	КонецПопытки;
	
	Если БылоИсключение Тогда
		Возврат ОбработатьИключениеПриПолученииТекстаФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки);
	КонецЕсли;
	
КонецФункции

Функция ОбработатьИключениеПриПолученииТекстаФайла(ДополнительныеПараметры, ИмяФайлаИзНастройки)

	ИмяФайла = ДополнительныеПараметры.ПутьДоФайла1;
	
	Если ДополнительныеПараметры.Свойство("ВыполнитьДействияЕслиФайлНеПрочитан") И ДополнительныеПараметры.ВыполнитьДействияЕслиФайлНеПрочитан Тогда
		ТекстСообщения = НСтр("ru = 'Ошибка чтения файла %Файл%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Файл%", ИмяФайла);
		Если ИмяФайлаИзНастройки Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Возможно файл, который указан в настройках обмена, не существует.'");
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Выберите другой файл.'");
		
		ПоказатьПредупреждение(
			Новый ОписаниеОповещения("ВыполнитьДействияЕслиФайлНеПрочитан", ЭтотОбъект, ДополнительныеПараметры),
			ТекстСообщения
		);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Ошибка чтения файла %Файл%.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Файл%", ИмяФайла);
		Если ИмяФайлаИзНастройки Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Возможно файл, который указан в настройках обмена, не существует. Выбрать другой файл можно в настройках (кнопка в правом верхнем углу).'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Проверяет строку на соответствие требованиям
//
// Параметры:
//  ПроверяемаяСтрока - Строка - проверяемый строка.
//
// Возвращаемое значение:
//  Булево - Истина, если ошибок нет.
//
Функция ТолькоСимволыВСтроке(Знач ПроверяемаяСтрока) Экспорт
	
	Если ПустаяСтрока(ПроверяемаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// приводим строку к нижнему регистру
	ПроверяемаяСтрока = НРег(СокрЛП(ПроверяемаяСтрока));
	
	// допустимые символы
	СпецСимволы = ".,;:$№#@&_-+*=?'/|\""%()[]{} ";
	
	// проверяем наличие спецсимволов в начале или конце строке
	Если ЕстьСимволыВНачалеСтроки(Лев(ПроверяемаяСтрока, 1), СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем допустимые символы
	Если НЕ СтрокаСодержитТолькоДопустимыеСимволы(ПроверяемаяСтрока, СпецСимволы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЕстьСимволыВНачалеСтроки(Строка, ПроверяемыеСимволы)
	
	Для Позиция = 1 По СтрДлина(ПроверяемыеСимволы) Цикл
		Символ = Сред(ПроверяемыеСимволы, Позиция, 1);
		СимволНайден = СтрНачинаетсяС(Строка, Символ) ИЛИ СтрЗаканчиваетсяНа(Строка, Символ);
		Если СимволНайден Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СтрокаСодержитТолькоДопустимыеСимволы(СтрокаПроверки, ДопустимыеСимволы)
	
	// Кириллица
	КодСимволаА = КодСимвола("а"); 
	КодСимволаЯ = КодСимвола("я");
	
	// Цифры
	КодСимвола0 = КодСимвола("0");
	КодСимвола9 = КодСимвола("9");
	
	// Латиница
	КодСимволаA = КодСимвола("a");
	КодСимволаZ = КодСимвола("z");
	
	// Спецсимволы
	КодыДопустимыхСимволов = Новый Массив;
	Для Индекс = 1 По СтрДлина(ДопустимыеСимволы) Цикл
		Символ = Сред(ДопустимыеСимволы, Индекс, 1);
		КодыДопустимыхСимволов.Добавить(КодСимвола(Символ));
	КонецЦикла;
	
	КодыДопустимыхСимволов.Добавить(1105); // "ё"
	
	// Проверяем каждым символ в строке
	// допустим ли он.
	Для Индекс = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодПроверяемогоСимвола = КодСимвола(Сред(СтрокаПроверки, Индекс, 1));
		ЭтоДопустимыйСимвол = 
			КодСимволаА <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаЯ     // Кириллица
			ИЛИ КодСимволаA <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимволаZ // Латиница
			ИЛИ КодСимвола0 <= КодПроверяемогоСимвола И КодПроверяемогоСимвола <= КодСимвола9 // Цифры
			ИЛИ КодыДопустимыхСимволов.Найти(КодПроверяемогоСимвола) <> Неопределено;         // Спецсимволы и ё
			
		Если НЕ ЭтоДопустимыйСимвол Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает тип файла после прочтения первых 5 строк
// Определяем кодировку
Функция ТипФайла(ИмяФайла)
	
	Текст              = Новый ЧтениеТекста(ИмяФайла, "windows-1251");
	СтрокаТекста       = Текст.ПрочитатьСтроку();
	НомерТекущейСтроки = 0;
	
	Пока СтрокаТекста <> Неопределено Цикл
		// Проверяем кодировку файла
		Если НомерТекущейСтроки = 0 И НЕ ТолькоСимволыВСтроке(СтрокаТекста) Тогда // UTF-8.
			Возврат "UTF-8";
			Прервать;
		ИначеЕсли НЕ ТолькоСимволыВСтроке(СтрокаТекста) Тогда
			Возврат "cp866";
			Прервать;
		КонецЕсли;
		// Читаем первые пять строк, этого должно быть достаточно,
		// чтобы определить кодировку
		Если НомерТекущейСтроки > 5 Тогда 
			Прервать;
		КонецЕсли;
		НомерТекущейСтроки = НомерТекущейСтроки + 1;
		СтрокаТекста       = Текст.ПрочитатьСтроку();
	КонецЦикла;
	
	Возврат "windows-1251";
	
КонецФункции

Процедура ЗагрузитьДанныеИзФайлаВыпискиЗавершение(Успешно, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Успешно Тогда
		ДополнительныеПараметры.АдресВХранилище = Адрес;
		ДополнительныеПараметры.ПутьДоФайла1 = ВыбранноеИмяФайла;
		ЗагрузитьДанныеИзФайлаВыпискиФрагмент(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеИзФайлаВыпискиФрагмент(ДополнительныеПараметры)
	
	Состояние(
		НСтр("ru='Выполняется чтение файла выписки...'"),
		,
		НСтр("ru='Пожалуйста, подождите'"),
		БиблиотекаКартинок.ЗагрузкаДанных32
	);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресФайлаКОбработке", ДополнительныеПараметры.АдресВХранилище);
	ПараметрыОткрытия.Вставить("ПутьДоФайла", ДополнительныеПараметры.ПутьДоФайла1);
	ПараметрыОткрытия.Вставить("Организация", ДополнительныеПараметры.Организация);
	ПараметрыОткрытия.Вставить("БанковскийСчетОрганизации", ДополнительныеПараметры.БанковскийСчет);
	ПараметрыОткрытия.Вставить("СтатьяДДСВходящий", ДополнительныеПараметры.СтатьяДДСВходящий);
	ПараметрыОткрытия.Вставить("СтатьяДДСИсходящий", ДополнительныеПараметры.СтатьяДДСИсходящий);
	ПараметрыОткрытия.Вставить("ПроводитьЗагружаемые", ДополнительныеПараметры.ПроводитьЗагружаемые);
	ПараметрыОткрытия.Вставить("ЗаполнятьДолгиАвтоматически", ДополнительныеПараметры.ЗаполнятьДолгиАвтоматически);
	ПараметрыОткрытия.Вставить("Программа", ДополнительныеПараметры.Программа);
	ПараметрыОткрытия.Вставить("Кодировка", ДополнительныеПараметры.Кодировка);
	ПараметрыОткрытия.Вставить("ВерсияФормата", ДополнительныеПараметры.ВерсияФормата);
	ПараметрыОткрытия.Вставить("АвтоматическиПодставлятьДокументы", ДополнительныеПараметры.АвтоматическиПодставлятьДокументы);
	ПараметрыОткрытия.Вставить("АнализироватьИсториюВыбораЗначенийРеквизитов", ДополнительныеПараметры.АнализироватьИсториюВыбораЗначенийРеквизитов);
	ПараметрыОткрытия.Вставить("НастройкиПолучены", ДополнительныеПараметры.НастройкиПолучены);
	ПараметрыОткрытия.Вставить("НеУдалятьДокументыКоторыхНетВВыписке", ДополнительныеПараметры.НеУдалятьДокументыКоторыхНетВВыписке);
	ПараметрыОткрытия.Вставить("КонтролироватьБезопасностьОбменаСБанком", ДополнительныеПараметры.КонтролироватьБезопасностьОбменаСБанком);
	ПараметрыОткрытия.Вставить("СпособЗачета", ДополнительныеПараметры.СпособЗачета);
	
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.ФормаЗагрузка",
		ПараметрыОткрытия
	);
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныПечатиОфисныхДокументов

Функция ПечатьПоШаблонуОфисногоДокумента(ПараметрКоманды) Экспорт
	
	Если ТипЗнч(ПараметрКоманды.ОбъектыПечати) <> Тип("Массив") ИЛИ ПараметрКоманды.ОбъектыПечати.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ШаблонПечати", ПараметрКоманды.ДополнительныеПараметры.ШаблонПечатиОфисныхДокументов);
	ПараметрыФормы.Вставить("ОбъектыПечати", ПараметрКоманды.ОбъектыПечати);
	
	ОткрытьФорму("Справочник.ШаблоныПечатиОфисныхДокументов.Форма.ФормаПечати", ПараметрыФормы);
	
КонецФункции

Процедура ОткрытьШаблоныПечатиОфисныхДокументов(Назначение = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	Если Назначение <> Неопределено Тогда
		ПараметрыФормы.Вставить("Отбор", Новый Структура("Назначение", Назначение));
	КонецЕсли;
	ОткрытьФорму("Справочник.ШаблоныПечатиОфисныхДокументов.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

Процедура УстановитьПризнакПоявленияНовойКомандыПечати(ГруппаКомандПечати) Экспорт
	
	Если ЗначениеЗаполнено(ГруппаКомандПечати.Картинка) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаКомандПечати.Картинка = БиблиотекаКартинок.ВосклицательныйЗнакКрасный;
	ГруппаКомандПечати.Заголовок = ГруппаКомандПечати.Заголовок + НСтр("ru=' (требуется переоткрыть форму)'");
	
КонецПроцедуры

#КонецОбласти

#Область ТелефонАдресЭП

Процедура УстановитьДоступностьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП,
	ОчищатьРеквизиты = Ложь, ИмяГруппаТелефон = "", ИмяГруппаАдресЭП = "") Экспорт
	
	Если ПустаяСтрока(ИмяГруппаТелефон) Тогда
		ИмяГруппаТелефон = "ГруппаТелефон";
	КонецЕсли;
	Если ПустаяСтрока(ИмяГруппаАдресЭП) Тогда
		ИмяГруппаАдресЭП = "ГруппаАдресЭП";
	КонецЕсли;
	
	Если ТелефонАдресЭП = "Телефон" Тогда
		ЭтаФорма.Элементы[ИмяГруппаТелефон].Видимость = Истина;
		ЭтаФорма.Элементы[ИмяГруппаАдресЭП].Видимость = Ложь;
	ИначеЕсли ТелефонАдресЭП = "АдресЭП" Тогда
		ЭтаФорма.Элементы[ИмяГруппаТелефон].Видимость = Ложь;
		ЭтаФорма.Элементы[ИмяГруппаАдресЭП].Видимость = Истина;
	Иначе
		ЭтаФорма.Элементы[ИмяГруппаТелефон].Видимость = Ложь;
		ЭтаФорма.Элементы[ИмяГруппаАдресЭП].Видимость = Ложь;
	КонецЕсли;
	
	Если ОчищатьРеквизиты
		И НЕ ЭтаФорма.ТолькоПросмотр Тогда
		ОчиститьТелефонАдресЭП(ЭтаФорма.Объект, ТелефонАдресЭП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьТелефонАдресЭП(Объект, ТелефонАдресЭП)
	
	Если ТелефонАдресЭП = "Телефон" Тогда
		Объект.АдресЭП = "";
	ИначеЕсли ТелефонАдресЭП = "АдресЭП" Тогда
		Объект.Телефон = "";
	Иначе
		Объект.Телефон = "";
		Объект.АдресЭП = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТелефонАдресЭП(ЭтаФорма, ТелефонАдресЭП) Экспорт
	
	Если ЗначениеЗаполнено(ЭтаФорма.Объект.Телефон) Тогда
		ТелефонАдресЭП = "Телефон";
	ИначеЕсли ЗначениеЗаполнено(ЭтаФорма.Объект.АдресЭП) Тогда
		ТелефонАдресЭП = "АдресЭП";
	Иначе
		ТелефонАдресЭП = "НеОтправлять";
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СборСтатистики

// Отправляет информацию о запуске приложения.
//
Процедура ОтправитьИнформациюОЗапускеПриложения() Экспорт
	
	ЭтоМобильныйКлиент = ОбщегоНазначенияКлиентСервер.ЭтоМобильныйКлиент();
	ЭтоВебКлиент = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент();
	ЭтоПрочийКлиент = НЕ ЭтоМобильныйКлиент И НЕ ЭтоВебКлиент;
	
	ДопДанные = "<data><ЭтоМобильныйКлиент>{ЭтоМобильныйКлиент}</ЭтоМобильныйКлиент><ЭтоВебКлиент>{ЭтоВебКлиент}</ЭтоВебКлиент><ЭтоПрочийКлиент>{ЭтоПрочийКлиент}</ЭтоПрочийКлиент></data>";
	ДопДанные = СтрЗаменить(ДопДанные, "{ЭтоМобильныйКлиент}", ЭтоМобильныйКлиент);
	ДопДанные = СтрЗаменить(ДопДанные, "{ЭтоВебКлиент}", ЭтоВебКлиент);
	ДопДанные = СтрЗаменить(ДопДанные, "{ЭтоПрочийКлиент}", ЭтоПрочийКлиент);
	
	УправлениеНебольшойФирмойСервер.ОтправитьСобытиеСДопДаннымиВФоне("Запуск приложения", ДопДанные);
	
КонецПроцедуры // ОтправитьИнформациюОЗапускеПриложения()

#КонецОбласти

#Область РаботаСДатамиИПериодами

Процедура ПересчитатьДатуОкончания(пФормаИлиСтрока, пИмяРеквизитаНачало, пИмяРеквизитаОкончание, пИспользоватьСтрокуТЧ = Ложь) Экспорт
	
	Если пИспользоватьСтрокуТЧ Тогда
		ДанныеДляИзменения = пФормаИлиСтрока;
	Иначе
		ДанныеДляИзменения = пФормаИлиСтрока.Объект;
	КонецЕсли;

	Дельта = ДанныеДляИзменения[пИмяРеквизитаОкончание] - пФормаИлиСтрока.НачалоСобытияПередИзменением;
	ДанныеДляИзменения[пИмяРеквизитаОкончание] = ДанныеДляИзменения[пИмяРеквизитаНачало] + Дельта;
	пФормаИлиСтрока.НачалоСобытияПередИзменением = ДанныеДляИзменения[пИмяРеквизитаНачало];
	
КонецПроцедуры

#КонецОбласти

#Область РаспределениеПродаж

Процедура ПроверитьПредупредитьОРаспределении(Идентификатор) Экспорт
	
	Если УправлениеНебольшойФирмойСервер.НадоПредупредитьОРаспределенииПоЗаказам(Идентификатор) Тогда
		ТекстПредупреждения = НСтр("ru = 'Продажа по заказу покупателя может быть разбита на несколько чеков. Если получились чеки с разными организациями и сброшен флаг ""По компании"", то разбиение не выполняется.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПредпросмотрЧека

Процедура ПредпросмотрЧекаДенежныхДокументов(Параметры, Владелец, ИдентификаторУстройства) Экспорт
	
	Если ИдентификаторУстройства <> Неопределено Тогда
		
		ПараметрыРегистрации = УправлениеНебольшойФирмойВызовСервера.ПолучитьПараметрыРегистрацииККТ(ИдентификаторУстройства);
		
		Если ПараметрыРегистрации.Свойство("ОрганизацияНазвание") Тогда
			Параметры.Вставить("ОрганизацияНазвание", ПараметрыРегистрации.ОрганизацияНазвание);
		КонецЕсли;
		
		Если ПараметрыРегистрации.Свойство("АдресРасчетов") Тогда
			Параметры.Вставить("АдресРасчетов", ПараметрыРегистрации.АдресРасчетов);
		КонецЕсли;
		
		Если ПараметрыРегистрации.Свойство("ОрганизацияИНН") Тогда
			Параметры.Вставить("ОрганизацияИНН", ПараметрыРегистрации.ОрганизацияИНН);
		КонецЕсли;
		
		СтатусПоследнейСмены = МенеджерОборудованияВызовСервера.ПолучитьСтатусПоследнейСмены(ИдентификаторУстройства);
		Параметры.НомерЧека = СтатусПоследнейСмены.ТекущийНомерЧека;
		Параметры = МенеджерОборудованияВызовСервера.СформироватьШаблонЧека(Параметры, , ИдентификаторУстройства);
		ОсновныеПараметры = Параметры;
		ОписаниеОшибки = "";
		Если НЕ МенеджерОборудованияВызовСервера.ВыполненаПроверкаОбязательностиИПравильностиЗаполненияТэгов(ОсновныеПараметры, ИдентификаторУстройства, ОписаниеОшибки) Тогда
			СообщитьОбОшибке(Неопределено, ОписаниеОшибки);
		КонецЕсли;
		Отказ = Ложь;
		ИсправленыОсновныеПараметры = Ложь;
		МенеджерОборудованияВызовСервера.ПривестиДанныеКТребуемомуФормату(ОсновныеПараметры, Отказ, ОписаниеОшибки, ИсправленыОсновныеПараметры);
		Если Отказ Тогда
			СообщитьОбОшибке(Неопределено, ОписаниеОшибки);
		ИначеЕсли ИсправленыОсновныеПараметры Тогда
			Параметры = ОсновныеПараметры;
		КонецЕсли;
		
	КонецЕсли;
	
	Разделитель = "------------------------------------------------";
	КУдалению = "================================================";
	ТекстЧека = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(Параметры, 48);
	ТекстЧека = СтрЗаменить(ТекстЧека, КУдалению, "");
	Позиция1 = СтрНайти(ТекстЧека, Разделитель);
	Позиция2 = СтрНайти(ТекстЧека, Разделитель,, Позиция1 + 1);
	Позиция3 = СтрНайти(ТекстЧека, Разделитель,, Позиция2 + 1);
	Шапка = Лев(ТекстЧека, Позиция1 - 1);
	Состав = Сред(ТекстЧека, Позиция1 + 49, Позиция2 - Позиция1 - 50);
	Итог = Сред(ТекстЧека, Позиция2 + 49, Позиция3 - Позиция2 - 49);
	Подвал = Сред(ТекстЧека, Позиция3 + 49);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РеквизитыЧека", Шапка + Итог + Подвал);
	ПараметрыФормы.Вставить("СоставЧека", Состав);
	ПараметрыФормы.Вставить("Документ", Параметры.ДокументОснование);
	ПараметрыФормы.Вставить("КоличествоСтрок", Параметры.ПозицииЧека.Количество());
	
	ОткрытьФорму("ОбщаяФорма.ПредпросмотрЧека", ПараметрыФормы, Владелец,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаФизлицаКассира

// Определяет сотрудника пользователя и открывает форму элемента справочника
//
// Параметры:
//  Форма - УправляемаяФорма - форма, в которой пробивается чек
//
Процедура ОткрытьФормуСотрудника(Форма) Экспорт
	
	РеквизитыДокумента = УправлениеНебольшойФирмойКлиентСервер.СформироватьСтруктуруДляПроверкиКассира();
	ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Форма.Объект);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Форма, "КассаДляПроверкиОтветственного")
		И ЗначениеЗаполнено(Форма.КассаДляПроверкиОтветственного) Тогда
		
		РеквизитыДокумента.КассаККМ = Форма.КассаДляПроверкиОтветственного;
		
	КонецЕсли;
	Реквизиты = УправлениеНебольшойФирмойСервер.ПолучитьРеквизитыКассира(РеквизитыДокумента);
	Сотрудник = Реквизиты.Сотрудник;
	
	Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Произошла ошибка'"));
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("УстановитьВидимостьПредупрежденияОКассире", Форма);
	ПараметрыОткрытия = Новый Структура("Ключ", Сотрудник);
	
	ОткрытьФорму(
		"Справочник.Сотрудники.ФормаОбъекта",
		ПараметрыОткрытия,
		Форма,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти