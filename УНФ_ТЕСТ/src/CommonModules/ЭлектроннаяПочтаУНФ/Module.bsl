
#Область ПрограммныйИнтерфейс

// Выполняет отправку сообщений с помощью SMTP или Gmail API, в зависимости от настройки учетной записи.
// Использование параметров аналогично РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(),
// за исключением порядка их следования в функции.
//
// Параметры:
//  ПараметрыПисьма - Структура - содержит всю необходимую информацию о письме.
//    См. описание РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(), дополнительно добавляется поле
//    * Заголовки - Соответствие - ключ - ИмяПоля, значение - ЗначениеПоля для передачи в УстановитьПолеЗаголовка(),
//  УчетнаяЗапись	 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись электронной почты.
// 
// Возвращаемое значение:
//  Структура - ключи: 
//    * Идентификатор - Строка - идентификатор События
//    * ИдентификаторыСообщений - Массив - идентификаторы сообщений (RFC 822)
//
Функция ОтправитьПочтовоеСообщение(Знач ПараметрыПисьма, Знач УчетнаяЗапись) Экспорт
	
	Если ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")
		Или НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ВызватьИсключение НСтр("ru = 'Учетная запись не заполнена или заполнена неправильно.'");
	КонецЕсли;
	
	ОбработатьПараметрыПисьма(ПараметрыПисьма, УчетнаяЗапись);
	
	Результат = Новый Структура("Идентификатор, ИдентификаторыСообщений", "", Новый Массив);
	
	Если ОбменСGoogle.ЭтоУчетнаяЗаписьGoogle(УчетнаяЗапись) Тогда
		
		ПользовательУчетнойЗаписи = РегистрыСведений.СеансовыеДанныеGoogle.ПользовательУчетнойЗаписи(УчетнаяЗапись);
		
		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
		ПользовательУчетнойЗаписи,
		Перечисления.ОбластиДоступаGoogle.Почта,
		УчетнаяЗапись);
		
		Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
			ВызватьИсключение НСтр(
			"ru = 'Отсутствует токен доступа: повторно подключите Gmail для текущего пользователя УНФ.'");
		КонецЕсли;
		
		Если Не РегистрыСведений.СеансовыеДанныеGoogle.ТокенДоступаДействителен(СеансовыеДанные.access_token) Тогда
			
			РегистрыСведений.СеансовыеДанныеGoogle.ОбновитьСеансовыеДанные(
			СеансовыеДанные,
			ПользовательУчетнойЗаписи,
			Перечисления.ОбластиДоступаGoogle.Почта,
			УчетнаяЗапись);
			
			СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
			ПользовательУчетнойЗаписи,
			Перечисления.ОбластиДоступаGoogle.Почта,
			УчетнаяЗапись);
			
		КонецЕсли;
		
		Результат.Идентификатор = ОбменСGoogle.ОтправитьПочтовоеСообщение(ПараметрыПисьма, СеансовыеДанные);
		Результат.ИдентификаторыСообщений.Добавить(ОбменСGoogle.ИдентификаторСообщения(Результат.Идентификатор, СеансовыеДанные));
		
	Иначе
		
		ИнтернетПочтовоеСообщение = НовоеИнтернетПочтовоеСообщение(ПараметрыПисьма);
		Профиль = НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		
		Соединение = Новый ИнтернетПочта;
		
		ПомещатьОтправляемоеСообщениеНаСерверIMAP = РегистрыСведений.УчетныеЗаписиПользователя.ПомещатьОтправляемоеСообщениеНаСерверIMAP(
		УчетнаяЗапись);
		
		Если ПомещатьОтправляемоеСообщениеНаСерверIMAP Тогда
			Соединение.Подключиться(Профиль, ПротоколИнтернетПочтыIMAP(УчетнаяЗапись));
		Иначе
			Соединение.Подключиться(Профиль);
		КонецЕсли;
		
		ОбрабатыватьТекстСообщения = ОбрабатыватьТекстСообщения(ПараметрыПисьма);
		
		Соединение.Послать(ИнтернетПочтовоеСообщение, ОбрабатыватьТекстСообщения);
		
		Результат.ИдентификаторыСообщений.Добавить(ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
		
		Если ПомещатьОтправляемоеСообщениеНаСерверIMAP Тогда
			ПеренестиИдентификаторСообщенияВПолеReferences(ИнтернетПочтовоеСообщение);
			ПоместитьПочтовоеСообщениеВОтправленныеIMAP(ИнтернетПочтовоеСообщение, ОбрабатыватьТекстСообщения, Соединение, Результат, УчетнаяЗапись);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.Идентификатор) Тогда
			Результат.Идентификатор = ИнтернетПочтовоеСообщение.ИдентификаторСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(Результат);
	
КонецФункции

// Выполняет загрузку сообщений с почтового сервера по команде пользователя.
//
// Параметры:
//  Параметры		 - Структура - ключи: 
//    * РежимЗагрузки - Строка - ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения()
//      или ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения(),
//    * ОтборПоКонтакту - СправочникСсылка.КонтактныеЛица, СправочникСсылка.Контрагенты, Неопределено - отбор по контакту,
//  АдресХранилища	 - Строка - адрес во временном хранилище, куда будут помещены результаты выполнения задания.
//
Процедура ЗагрузитьПочтуПоКомандеПользователя(Знач Параметры, Знач АдресХранилища) Экспорт
	
	Результаты = Новый Массив;
	
	Для Каждого ТекНастройка Из РегистрыСведений.УчетныеЗаписиПользователя.НастройкаПользователя(Пользователи.ТекущийПользователь()) Цикл
		
		Если Не ТекНастройка.ЗагружатьПочту Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатЗагрузкиЗаголовков = ЗагрузитьЗаголовкиСообщений(ТекНастройка.УчетнаяЗапись, Параметры.РежимЗагрузки, Параметры.ОтборПоКонтакту);
		Результаты.Добавить(РезультатЗагрузкиЗаголовков);
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Результаты, АдресХранилища);
	
КонецПроцедуры

// Загружает содержание почтового сообщения с почтового сервера.
//
// Параметры:
//  Параметры		 - Структура - ключи:
//    * УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты,
//    * Идентификатор - Строка - идентификатор События,
//    * ВходящееИсходящееСобытие - Перечисление.ВходящееИсходящееСобытие,
//    * СеансовыеДанные - Соответствие - сеансовые данные авторизации в Google API,
//  АдресХранилища	 - Строка - адрес во временном хранилище, куда будут помещены данные загруженного события.
//
Процедура ЗагрузитьСодержаниеСообщения(Знач Параметры, Знач АдресХранилища) Экспорт
	
	Если Не ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
		ВызватьИсключение НСтр("ru = 'Не указана учетная запись для задания ""ЗагрузитьСодержаниеСообщения()"".'");
	КонецЕсли;
	
	Если Не ОбменСGoogle.ЭтоУчетнаяЗаписьGoogle(Параметры.УчетнаяЗапись) Тогда
		ЗагрузитьСодержаниеСообщенияИнтернетПочты(Параметры.Идентификатор, Параметры.ВходящееИсходящееСобытие, Параметры.УчетнаяЗапись, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(Параметры.СеансовыеДанные) Тогда
		ВызватьИсключение НСтр(
		"ru = 'Отсутствует токен доступа: повторно подключите Gmail для текущего пользователя УНФ.'");
	КонецЕсли;
	
	ОбменСGoogle.ЗагрузитьСодержаниеСообщенияGmail(Параметры.Идентификатор, Параметры.СеансовыеДанные, АдресХранилища);
	
КонецПроцедуры

// Добавляет в результат загрузки заголовков сведения о вновь обработанном Событии.
//
// Параметры:
//  РезультатЗагрузкиЗаголовков	 - Структура - ключи:
//    * ЗагруженныеСобытия - Соответствие - хранит ссылки на загруженные события,
//    * Загружено - Число - количество загруженных,
//    * ДатаОтправления - Дата - граничная дата отправления письма, установка зависит от параметра РежимЗагрузки,
//    * СсылкаНаСобытие - ДокументСсылка.Событие - ссылка на последнее загруженное Событие,
//  СсылкаНаСобытие				 - ДокументСсылка.Событие - ссылка на последнее загруженное Событие,
//  ДатаОтправления				 - Дата - дата отправления письма,
//  РежимЗагрузки				 - Строка - ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения()
//                                 или ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения().
//
Процедура ОбработатьРезультатЗагрузкиЗаголовков(РезультатЗагрузкиЗаголовков, СсылкаНаСобытие, ДатаОтправления, РежимЗагрузки) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаСобытие) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузкиЗаголовков.ЗагруженныеСобытия[СсылкаНаСобытие] = Истина;
	
	РезультатЗагрузкиЗаголовков.Загружено = РезультатЗагрузкиЗаголовков.ЗагруженныеСобытия.Количество();
	
	Если РежимЗагрузки = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() Тогда
		
		Если РезультатЗагрузкиЗаголовков.ДатаОтправления < ДатаОтправления Тогда
			РезультатЗагрузкиЗаголовков.ДатаОтправления = ДатаОтправления;
			РезультатЗагрузкиЗаголовков.СсылкаНаСобытие = СсылкаНаСобытие;
		КонецЕсли;
		
	ИначеЕсли РежимЗагрузки = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения() Тогда
		
		Если РезультатЗагрузкиЗаголовков.ДатаОтправления > ДатаОтправления
			Или Не ЗначениеЗаполнено(РезультатЗагрузкиЗаголовков.ДатаОтправления) Тогда
			РезультатЗагрузкиЗаголовков.ДатаОтправления = ДатаОтправления;
			РезультатЗагрузкиЗаголовков.СсылкаНаСобытие = СсылкаНаСобытие;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Метод для создания нового объекта ИнтернетПочтовоеСообщение
// в соответствии с переданнми параметрами письма.
//
// Параметры:
//  ПараметрыПисьма	 - Структура - см. описание РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение().
// 
// Возвращаемое значение:
//  ИнтернетПочтовоеСообщение - созданный объект.
//
Функция НовоеИнтернетПочтовоеСообщение(Знач ПараметрыПисьма) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство структуры ПараметрыПисьма.
	// Переменные содержат значения переданных в функцию параметров.
	Перем Кому, Тема, Тело, Вложения, ИмяОтправителя, АдресОтправителя, АдресОтвета, ТипТекста, Копии, СлепыеКопии;
	
	Если Не ПараметрыПисьма.Свойство("Тема", Тема) Тогда
		Тема = "";
	КонецЕсли;
	
	Если Не ПараметрыПисьма.Свойство("Тело", Тело) Тогда
		Тело = "";
	КонецЕсли;
	
	Кому = ПараметрыПисьма.Кому;
	
	Если ТипЗнч(Кому) = Тип("Строка") Тогда
		Кому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Кому);
	КонецЕсли;
	
	ПараметрыПисьма.Свойство("Вложения", Вложения);
	
	Результат = Новый ИнтернетПочтовоеСообщение;
	Результат.Тема = Тема;
	
	// Формируем адрес получателя.
	Для Каждого ПочтовыйАдресПолучателя Из Кому Цикл
		Получатель = Результат.Получатели.Добавить(ПочтовыйАдресПолучателя.Адрес);
		Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателя.Представление;
	КонецЦикла;
	
	Если ПараметрыПисьма.Свойство("Копии", Копии) Тогда
		// Формируем адрес получателя поля Копии.
		Для Каждого ПочтовыйАдресПолучателяКопии Из Копии Цикл
			Получатель = Результат.Копии.Добавить(ПочтовыйАдресПолучателяКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии) Тогда
		// Формируем адрес получателя поля СлепыеКопии.
		Для Каждого ПочтовыйАдресПолучателяСлепыеКопии Из СлепыеКопии Цикл
			Получатель = Результат.СлепыеКопии.Добавить(ПочтовыйАдресПолучателяСлепыеКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяСлепыеКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("СкрытыеКопии", СлепыеКопии) Тогда
		// Формируем адрес получателя поля СлепыеКопии.
		Для Каждого ПочтовыйАдресПолучателяСлепыеКопии Из СлепыеКопии Цикл
			Получатель = Результат.СлепыеКопии.Добавить(ПочтовыйАдресПолучателяСлепыеКопии.Адрес);
			Получатель.ОтображаемоеИмя = ПочтовыйАдресПолучателяСлепыеКопии.Представление;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем адрес ответа, если необходимо.
	Если ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета) Тогда
		Для Каждого ПочтовыйАдресОтвета Из АдресОтвета Цикл
			ПочтовыйАдресОбратный = Результат.ОбратныйАдрес.Добавить(ПочтовыйАдресОтвета.Адрес);
			ПочтовыйАдресОбратный.ОтображаемоеИмя = ПочтовыйАдресОтвета.Представление;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("ИмяОтправителя", ИмяОтправителя) Тогда
		Результат.ИмяОтправителя              = ИмяОтправителя;
		Результат.Отправитель.ОтображаемоеИмя = ИмяОтправителя;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("АдресОтправителя", АдресОтправителя) Тогда
		Результат.Отправитель.Адрес           = АдресОтправителя;
	КонецЕсли;
	
	// Добавляем вложения к письму.
	Если Вложения <> Неопределено Тогда
		Для Каждого Вложение Из Вложения Цикл
			Если ТипЗнч(Вложение) = Тип("Структура") Тогда
				НовоеВложение = Результат.Вложения.Добавить(ПолучитьИзВременногоХранилища(Вложение.АдресВоВременномХранилище), Вложение.Представление);
				Если Вложение.Свойство("Кодировка") И Не ПустаяСтрока(Вложение.Кодировка) Тогда
					НовоеВложение.Кодировка = Вложение.Кодировка;
				КонецЕсли;
				Если Вложение.Свойство("Идентификатор") Тогда
					НовоеВложение.Идентификатор = Вложение.Идентификатор;
				КонецЕсли;
			Иначе // Поддержка обратной совместимости с 2.2.1.
				Если ТипЗнч(Вложение.Значение) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(Вложение.Значение.ДвоичныеДанные) Тогда
						НовоеВложение = Результат.Вложения.Добавить(Вложение.Значение.ДвоичныеДанные, Вложение.Ключ);
						НовоеВложение.Идентификатор = Вложение.Значение.Идентификатор;
						Если Вложение.Значение.Свойство("Кодировка") Тогда
							НовоеВложение.Кодировка = Вложение.Значение.Кодировка;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Результат.Вложения.Добавить(Вложение.Значение, Вложение.Ключ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("ИдентификаторОснования") Тогда
		Результат.УстановитьПолеЗаголовка(
		"In-Reply-To",
		ПараметрыПисьма.ИдентификаторОснования,
		СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
	КонецЕсли;
	
	// Установим строку с идентификаторами оснований.
	Если ПараметрыПисьма.Свойство("ИдентификаторыОснований") Тогда
		Результат.УстановитьПолеЗаголовка(
		"References",
		ПараметрыПисьма.ИдентификаторыОснований,
		СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("Заголовки") 
		И ТипЗнч(ПараметрыПисьма.Заголовки) = Тип("Соответствие") Тогда
		Для Каждого ТекЗаголовок Из ПараметрыПисьма.Заголовки Цикл
			Результат.УстановитьПолеЗаголовка(
			ТекЗаголовок.Ключ,
			ТекЗаголовок.Значение,
			СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
		КонецЦикла;
	КонецЕсли;
	
	// добавляем текст
	Текст = Результат.Тексты.Добавить(Тело);
	Если ПараметрыПисьма.Свойство("ТипТекста", ТипТекста) Тогда
		Если ТипЗнч(ТипТекста) = Тип("Строка") Тогда
			Если      ТипТекста = "HTML" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = "RichText" Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТипТекста) = Тип("ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем") Тогда
			Если      ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML
				  ИЛИ ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTMLСКартинками Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;
			ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.РазмеченныйТекст Тогда
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.РазмеченныйТекст;
			Иначе
				Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
			КонецЕсли;
		Иначе
			Текст.ТипТекста = ТипТекста;
		КонецЕсли;
	Иначе
		Текст.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	КонецЕсли;

	// Зададим важность
	Важность = Неопределено;
	Если ПараметрыПисьма.Свойство("Важность", Важность) Тогда
		Результат.Важность = Важность;
	КонецЕсли;
	
	// Зададим кодировку
	Кодировка = Неопределено;
	Если ПараметрыПисьма.Свойство("Кодировка", Кодировка) Тогда
		Результат.Кодировка = Кодировка;
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("УведомитьОДоставке")
		И ЗначениеЗаполнено(АдресОтправителя) Тогда
		Результат.УведомитьОДоставке = ПараметрыПисьма.УведомитьОДоставке;
		Результат.АдресаУведомленияОДоставке.Добавить(АдресОтправителя);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("УведомитьОПрочтении")
		И ЗначениеЗаполнено(АдресОтправителя) Тогда
		Результат.УведомитьОПрочтении = ПараметрыПисьма.УведомитьОПрочтении;
		Результат.АдресаУведомленияОПрочтении.Добавить(АдресОтправителя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Метод для создания нового обьекта РезультатЗагрузкиЗаголовков.
// 
// Возвращаемое значение:
//  Структура - ключи: 
//    * Загружено - Число,
//    * ЗагруженныеСобытия - Соответствие,
//    * СсылкаНаСобытие - ДокументСсылка.Событие,
//    * ДатаОтправления - Дата.
//
Функция НовыйРезультатЗагрузкиЗаголовков() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Загружено", 0);
	Результат.Вставить("ЗагруженныеСобытия", Новый Соответствие);
	Результат.Вставить("СсылкаНаСобытие", Документы.Событие.ПустаяСсылка());
	Результат.Вставить("ДатаОтправления", '00010101');
	
	Возврат Результат;
	
КонецФункции

// Заполняет участников в указанном Событии, полученные в Почтовом сообщении.
//
// Параметры:
//  Событие					 - ДокументОбъект.Событие - Событие, в котором необходимо заполнить участников,
//  ПочтовоеСообщение		 - ИнтернетПочтовоеСообщение, Структура - данные, по которым будет заполняться участники,
//  СопоставленныеКонтакты	 - Соответствие - соответствие адресов электронной почты и ссылок на участников события.
//
Процедура ЗаполнитьКонтакты(Событие, Знач ПочтовоеСообщение, Знач СопоставленныеКонтакты) Экспорт
	
	Если СопоставленныеКонтакты = Неопределено Тогда
		СопоставленныеКонтакты = СопоставленныеКонтактыИзПочтовогоСообщения(ПочтовоеСообщение);
	КонецЕсли;
	
	Если Событие.ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		НормализованныйАдресОтправителя = НормализованныйАдрес(ПочтовоеСообщение.Отправитель.Адрес);
		Контакты = СопоставленныеКонтакты[НормализованныйАдресОтправителя];
		Если ЗначениеЗаполнено(Контакты) Тогда
			Для Каждого Контакт Из Контакты Цикл
				ДобавитьУчастникаСобытия(Событие, Контакт, НормализованныйАдресОтправителя);
			КонецЦикла;
		Иначе
			ДобавитьУчастникаСобытия(
			Событие,
			ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ПочтовоеСообщение.Отправитель.ОтображаемоеИмя),
			НормализованныйАдресОтправителя);
		КонецЕсли;
	Иначе
		Для Каждого Получатель Из ПочтовоеСообщение.Получатели Цикл
			НормализованныйАдресПолучателя = НормализованныйАдрес(Получатель.Адрес);
			Контакты = СопоставленныеКонтакты[НормализованныйАдресПолучателя];
			Если ЗначениеЗаполнено(Контакты) Тогда
				Для Каждого Контакт Из Контакты Цикл
					ДобавитьУчастникаСобытия(Событие, Контакт, НормализованныйАдресПолучателя);
				КонецЦикла;
			Иначе
				ДобавитьУчастникаСобытия(
				Событие,
				ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(Получатель.ОтображаемоеИмя),
				НормализованныйАдресПолучателя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого АдресЭП Из ОбщегоНазначенияКлиентСервер.СвернутьМассив(Событие.Участники.ВыгрузитьКолонку("КакСвязаться")) Цикл
		Событие.ОчиститьДублиУчастников(АдресЭП);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив идентификаторов связанных сообщений.
//
// Параметры:
//  СтрокаИдентификаторов	 - Строка - идентификаторы, разделенные пробелом.
// 
// Возвращаемое значение:
//  Массив - массив идентификаторов связанных сообщений.
//
Функция ИдентификаторыСвязанныхСообщений(СтрокаИдентификаторов) Экспорт
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СтрокаИдентификаторов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из СтрРазделить(СтрокаИдентификаторов, " ") Цикл
		ТекИдентификатор = ЭлектроннаяПочтаУНФКлиентСервер.СократитьУгловыеСкобки(ТекЭлемент);
		Если ЗначениеЗаполнено(ТекИдентификатор) Тогда
			Результат.Добавить(ТекИдентификатор);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие адресов электронной почты и контактов.
//
// Параметры:
//  АдресаЭП - Массив - массив строк адресов электронной почты.
// 
// Возвращаемое значение:
//  Соответствие - Соответствие адресов электронной почты и ссылок
//  на контакты (контрагенты или контактные лица).
//
Функция СопоставленныеКонтактыПоАдресамЭП(АдресаЭП) Экспорт
	
	Результат = Новый Соответствие;
	
	Если Не ЗначениеЗаполнено(АдресаЭП) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьКонтрагентыКонтактыПоАдресамЭП(АдресаЭП, Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ПолучитьЛидыПоАдресамЭП(АдресаЭП, Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив всех адресов электронной почты из контактной информации
// для указанного контрагента или контактного лица.
//
// Параметры:
//  Контакт	 - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица - ссылка на контакт.
// 
// Возвращаемое значение:
//  Массив - массив строк адресов электронной почты указанного контакта.
//
Функция ВсеАдресаЭлектроннойПочтыКонтакта(Контакт) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ 
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контакт,
	|	КонтрагентыКонтактнаяИнформация.АдресЭП КАК АдресЭП
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Контакт
	|	И КонтрагентыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка = &Контакт
	|	И КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвязиКонтрагентКонтакт.Контрагент,
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент = &Контакт) КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|		ПО СвязиКонтрагентКонтакт.Контакт = КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.АдресЭП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Результат.Найти(НРег(Выборка.АдресЭП)) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(НРег(Выборка.АдресЭП));
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает массив адресов электронной почты, полученный из строки.
//
// Параметры:
//  АдресаЭлектроннойПочты	 - Строка - адреса электронной почты в строке.
// 
// Возвращаемое значение:
//  Массив - массив структур с полями:
//    * Адрес - Строка,
//    * ОтображаемоеИмя - Строка.
//
Функция АдресаЭлектроннойПочтыИзСтроки(АдресаЭлектроннойПочты) Экспорт
	
	Результат = Новый Массив;
	
	НачальнаяПозиция = 1;
	ПромежуточнаяПозиция = 0;
	Пока НачальнаяПозиция < СтрДлина(АдресаЭлектроннойПочты) Цикл
		
		АдресИОтображаемоеИмя = АдресЭлектроннойПочтыИзСтроки(АдресаЭлектроннойПочты, НачальнаяПозиция, ПромежуточнаяПозиция);
		Если Не ЗначениеЗаполнено(АдресИОтображаемоеИмя.Адрес) И Не ЗначениеЗаполнено(АдресИОтображаемоеИмя.ОтображаемоеИмя) Тогда
			Прервать;
		КонецЕсли;
		
		Результат.Добавить(АдресИОтображаемоеИмя);
		
		НачальнаяПозиция = ПромежуточнаяПозиция + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Разбирает адрес электронной почты из строки и возвращает в виде структуры
// с полями Адрес и ОтображаемоеИмя.
//
// Параметры:
//  АдресаЭлектроннойПочты	 - Строка - строка с адресами электронной почты,
//  НачальнаяПозиция		 - Число - начальная позиция в строке, с которой
//  будет производиться разбор адреса электронной почты,
//  ПромежуточнаяПозиция	 - Число - промежуточная позиция в строке, до которой
//  будет производиться разбор адреса электронной почты.
// 
// Возвращаемое значение:
//  Структура - разобранный адрес электроной почты в формате структуры с полями:
//    * Адрес - Строка - адрес электронной почты,
//    * ОтображаемоеИмя - Строка - отображаемое имя.
//
Функция АдресЭлектроннойПочтыИзСтроки(АдресаЭлектроннойПочты, НачальнаяПозиция = 1, ПромежуточнаяПозиция = 0) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Адрес", "");
	Результат.Вставить("ОтображаемоеИмя", "");
	
	ПромежуточнаяПозиция = СтрНайти(АдресаЭлектроннойПочты, ",", НаправлениеПоиска.СНачала, НачальнаяПозиция);
	Если ПромежуточнаяПозиция = 0 Тогда
		ПромежуточнаяПозиция = СтрДлина(АдресаЭлектроннойПочты);
	КонецЕсли;
	
	ПозицияОткрывающейУгловойСкобки = СтрНайти(АдресаЭлектроннойПочты, "<", НаправлениеПоиска.СНачала, НачальнаяПозиция);
	Если ПозицияОткрывающейУгловойСкобки = 0 Или ПозицияОткрывающейУгловойСкобки > ПромежуточнаяПозиция Тогда
		Если ПромежуточнаяПозиция = СтрДлина(АдресаЭлектроннойПочты) Тогда
			Результат.Адрес = СокрЛП(Сред(АдресаЭлектроннойПочты, НачальнаяПозиция));
		Иначе
			Результат.Адрес = СокрЛП(Сред(АдресаЭлектроннойПочты, НачальнаяПозиция, ПромежуточнаяПозиция - НачальнаяПозиция));
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	ПозицияЗакрывающейУгловойСкобки = СтрНайти(АдресаЭлектроннойПочты, ">", НаправлениеПоиска.СНачала, ПозицияОткрывающейУгловойСкобки);
	Если ПозицияЗакрывающейУгловойСкобки = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПромежуточнаяПозиция = СтрНайти(АдресаЭлектроннойПочты, ",", НаправлениеПоиска.СНачала, ПозицияЗакрывающейУгловойСкобки);
	Если ПромежуточнаяПозиция = 0 Тогда
		ПромежуточнаяПозиция = СтрДлина(АдресаЭлектроннойПочты);
	КонецЕсли;
	
	ДлинаАдреса = ПозицияЗакрывающейУгловойСкобки - ПозицияОткрывающейУгловойСкобки;
	Если ДлинаАдреса <= 1 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПозицияКоммерческогоЭт = СтрНайти(АдресаЭлектроннойПочты, "@", НаправлениеПоиска.СНачала, ПозицияОткрывающейУгловойСкобки);
	Если ПозицияКоммерческогоЭт < ПозицияОткрывающейУгловойСкобки
		ИЛИ ПозицияКоммерческогоЭт > ПозицияЗакрывающейУгловойСкобки Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Адрес = Сред(АдресаЭлектроннойПочты, ПозицияОткрывающейУгловойСкобки + 1, ДлинаАдреса - 1);
	Результат.ОтображаемоеИмя = СокрЛП(Сред(АдресаЭлектроннойПочты, НачальнаяПозиция, ПозицияОткрывающейУгловойСкобки - НачальнаяПозиция));
	Результат.ОтображаемоеИмя = СтрЗаменить(Результат.ОтображаемоеИмя, "\""", "&quot;");
	Результат.ОтображаемоеИмя = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(Результат.ОтображаемоеИмя);
	Результат.ОтображаемоеИмя = СтрЗаменить(Результат.ОтображаемоеИмя, "&quot;", """");
	Результат.ОтображаемоеИмя = СокрЛП(Результат.ОтображаемоеИмя);
	
	Возврат Результат;
	
КонецФункции

// Запускает фоновое задание для сопоставления контакта и адреса электронной почты в Событиях.
//
// Параметры:
//  Контакт				 - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица,
//  АдресЭП				 - Строка - адрес электронной почты,
//  ИдентификаторФормы	 - УникальныйИдентификатор - идентификатор формы для запуска фонового задания.
//
Процедура СопоставитьВФонеКонтактИАдресЭПВСобытиях(Знач Контакт, Знач АдресЭП, Знач ИдентификаторФормы) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресЭП) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Контакт", Контакт);
	ПараметрыЗадания.Вставить("АдресЭП", АдресЭП);
	
	Результат = УправлениеНебольшойФирмойСервер.ЗапуститьВыполнениеВФоне(
	ИдентификаторФормы,
	"ЭлектроннаяПочтаУНФ.СопоставитьКонтактИАдресЭПВСобытиях",
	ПараметрыЗадания,,,
	Ложь);
	
КонецПроцедуры

// Фоновое задание для сопоставления контакта и адреса электронной почты в События.
//
// Параметры:
//  Параметры		 - Структура - ключи:
//    * Контакт - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица,
//    * АдресЭП - Строка - адрес электронной почты,
//  АдресХранилища	 - Строка - адрес во временном хранилище, требуется
//  для совместимости с ЗапуститьВыполнениеВФоне().
//
Процедура СопоставитьКонтактИАдресЭПВСобытиях(Параметры, АдресХранилища) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СобытиеУчастники.Ссылка
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СобытиеУчастники.Контакт) = ТИП(СТРОКА)
	|	И СобытиеУчастники.КакСвязаться = &АдресЭП
	|	И СобытиеУчастники.Ссылка.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)");
	Запрос.УстановитьПараметр("АдресЭП", Параметры.АдресЭП);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Событие = Выборка.Ссылка.ПолучитьОбъект();
		Событие.УстановитьСсылкиУчастниковПоАдресуЭП(Параметры.Контакт, Параметры.АдресЭП);
		Событие.ЗаполнитьРеквизитСписокУчастников();
		Событие.ОбменДанными.Загрузка = Истина;
		Событие.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив контрагентов и контактных лиц связанных с указанным адресом электронной почты.
//
// Параметры:
//  Контакт	 - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица,
//  АдресЭП	 - Строка - адрес электронной почты.
// 
// Возвращаемое значение:
//  Массив - контрагенты и контактные лица, в контактной информации которых встречается
//  указанный адрес электронной почты.
//
Функция СвязанныеКонтрагентыИКонтактныеЛица(Контакт, АдресЭП) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос(
	
	"ВЫБРАТЬ
	|	&Контакт КАК Контакт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка
	|ИЗ
	|	РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контрагент = &Контакт) КАК СвязиКонтрагентКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|		ПО (КонтактныеЛицаКонтактнаяИнформация.Ссылка = СвязиКонтрагентКонтакт.Контакт)
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП = &АдресЭП
	|	И СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СвязиКонтрагентКонтакт.Контрагент
	|ИЗ
	|	Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиКонтрагентКонтакт.СрезПоследних(, Контакт = &Контакт) КАК СвязиКонтрагентКонтакт
	|		ПО КонтактныеЛица.Ссылка = СвязиКонтрагентКонтакт.Контакт
	|ГДЕ
	|	СвязиКонтрагентКонтакт.СвязьНедействительна = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Контакт", Контакт);
	Запрос.УстановитьПараметр("АдресЭП", АдресЭП);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
	Результат,
	Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контакт"),
	Истина);
	
	Возврат Результат;
	
КонецФункции

// Заполняет список для авто подбора из классификатора контактов
//
// Параметры:
//  СписокАвтоПодбораКонтрагента - СписокЗначений - список, полученный из классификатора контактов по полю КакСвязаться,
//  Событие						 - ДокументСсылка.Событие - Событие, из которого будет получен заполняться список.
//
Процедура ЗаполнитьСписокАвтоПодбораКонтрагентаИзСобытия(СписокАвтоПодбораКонтрагента, Событие) Экспорт
	
	Если Не ЗначениеЗаполнено(Событие) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Событие) <> Тип("ДокументСсылка.Событие") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СобытиеУчастники.КакСвязаться
	|ИЗ
	|	Документ.Событие.Участники КАК СобытиеУчастники
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СобытиеУчастники.Контакт) = ТИП(СТРОКА)
	|	И СобытиеУчастники.Ссылка = &Ссылка
	|	И СобытиеУчастники.Ссылка.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)");
	Запрос.УстановитьПараметр("Ссылка", Событие);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.КакСвязаться) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокАвтоПодбора = Справочники.КлассификаторКонтактов.СписокАвтоПодбора(
		Выборка.КакСвязаться,
		Истина,
		Тип("СправочникСсылка.Контрагенты"),
		Неопределено);
		
		Для Каждого ТекЭлемент Из СписокАвтоПодбора Цикл
			СписокАвтоПодбораКонтрагента.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление, ТекЭлемент.Пометка, ТекЭлемент.Картинка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Метод для организации блокировки идентификаторов писем в разрезе учетных записей электронной почты
// и предотвращения коллизий при параллельной работе заданий загрузки сообщений с почтового сервера.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты.
// 
// Возвращаемое значение:
//  БлокировкаДанных - вновь созданная блокировка данных.
//
Функция НоваяБлокировкаИдентификаторовПисем(Знач УчетнаяЗапись) Экспорт
	
	Результат = Новый БлокировкаДанных;
	
	ЭлементБлокировкиИдентификаторыСобытий = Результат.Добавить("РегистрСведений.ИдентификаторыСобытий");
	ЭлементБлокировкиИдентификаторыСобытий.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
	
	ЭлементБлокировкиИдентификаторыСообщений = Результат.Добавить("РегистрСведений.ИдентификаторыСообщений");
	ЭлементБлокировкиИдентификаторыСообщений.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
	
	ЭлементБлокировкиИдентификаторыПисемДляОтложеннойПривязки = Результат.Добавить("РегистрСведений.ИдентификаторыПисемДляОтложеннойПривязки");
	ЭлементБлокировкиИдентификаторыПисемДляОтложеннойПривязки.УстановитьЗначение("УчетнаяЗапись", УчетнаяЗапись);
	
	Возврат Результат;
	
КонецФункции

// Возвращает заголовок для информирования пользователя о ходе выполнения задания загузки заголовков писем.
//
// Параметры:
//  УчетнаяЗапись	 - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись,
//  для которой выполняется задание загрузки заголовков писем,
//  ОтборПоКонтакту	 - СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица - для случая,
//  когда выполняется загрузка переписки по указанному контрагенту или контактному лицу.
// 
// Возвращаемое значение:
//  Строка - представление заголовка для информирования пользователя
//  о ходе выполнения задани загрузки заголовков писем.
//
Функция ЗаголовокПрогресса(Знач УчетнаяЗапись, Знач ОтборПоКонтакту) Экспорт
	
	Если ЗначениеЗаполнено(ОтборПоКонтакту) Тогда
		Возврат СтрШаблон(НСтр("ru = 'Загружается переписка с ""%1"" из ""%2""'"), ОтборПоКонтакту, УчетнаяЗапись);
	Иначе
		Возврат СтрШаблон(НСтр("ru = 'Получение почты ""%1""'"), УчетнаяЗапись);
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу вариантов настройки подключения к серверу SMTP.
// Используется механизм автоопределения настроек из DNS по SRV-записям (см. RFC 6186).
// Таблица заполняется с помощью сервиса https://dns.google.com/resolve.
//
// Параметры:
//  ИмяДомена	 - Строка - имя домена из почтового адреса электронной почты.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//    * Приоритет - Число - приоритет варианта, таблица отсортирована по возрастанию по этому полю,
//    * Вес - Число - вес варианта, таблица отсортирована по убыванию по этому полю,
//    * СерверИсходящейПочты - Строка - имя сервера исходящей почты,
//    * ПортСервераИсходящейПочты - Число - порт сервера исходящей почты,
//    * ИспользоватьЗащищенноеСоединениеДляИсходящейПочты - Булево - признак использования защищенного соединения
//    для исходящей почты.
//
Функция ВариантыНастройкиПодключенияКСерверуSMTP(ИмяДомена) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("СерверИсходящейПочты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПортСервераИсходящейПочты", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ИспользоватьЗащищенноеСоединениеДляИсходящейПочты", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТекЗаписьSRV Из ОбменСGoogle.ЗаписиDNSSRV("_submission", ИмяДомена) Цикл
		ПоляЗаписи = СтрРазделить(ТекЗаписьSRV["data"], " ");
		Если ПоляЗаписи.Количество() <> 4 Тогда
			Продолжить;
		КонецЕсли;
		НовыйВариант = Результат.Добавить();
		НовыйВариант.Приоритет = ПоляЗаписи[0];
		НовыйВариант.Вес = ПоляЗаписи[1];
		НовыйВариант.ПортСервераИсходящейПочты = ПоляЗаписи[2];
		НовыйВариант.СерверИсходящейПочты = ПоляЗаписи[3];
		НовыйВариант.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты = Истина;
		НовыйВариант = Результат.Добавить();
		НовыйВариант.Приоритет = ПоляЗаписи[0];
		НовыйВариант.Вес = ПоляЗаписи[1];
		НовыйВариант.ПортСервераИсходящейПочты = ПоляЗаписи[2];
		НовыйВариант.СерверИсходящейПочты = ПоляЗаписи[3];
		НовыйВариант.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты = Ложь;
	КонецЦикла;
	
	Результат.Сортировать("Приоритет Возр, Вес Убыв, ИспользоватьЗащищенноеСоединениеДляИсходящейПочты Убыв");
	
	Возврат Результат;
	
КонецФункции

// Возвращает таблицу вариантов настройки подключения к серверу IMAP.
// Используется механизм автоопределения настроек из DNS по SRV-записям (см. RFC 6186).
// Таблица заполняется с помощью сервиса https://dns.google.com/resolve.
//
// Параметры:
//  ИмяДомена	 - Строка - имя домена из почтового адреса электронной почты.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками:
//    * Приоритет - Число - приоритет варианта, таблица отсортирована по возрастанию по этому полю,
//    * Вес - Число - вес варианта, таблица отсортирована по убыванию по этому полю,
//    * СерверВходящейПочты - Строка - имя сервера входящей почты,
//    * ПортСервераВходящейПочты - Число - порт сервера входящей почты,
//    * ИспользоватьЗащищенноеСоединениеДляВходящейПочты - Булево - признак использования защищенного соединения
//    для входящей почты.
//
Функция ВариантыНастройкиПодключенияКСерверуIMAP(ИмяДомена) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("СерверВходящейПочты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПортСервераВходящейПочты", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("ИспользоватьЗащищенноеСоединениеДляВходящейПочты", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТекЗаписьSRV Из ОбменСGoogle.ЗаписиDNSSRV("_imaps", ИмяДомена) Цикл
		ПоляЗаписи = СтрРазделить(ТекЗаписьSRV["data"], " ");
		Если ПоляЗаписи.Количество() <> 4 Тогда
			Продолжить;
		КонецЕсли;
		НовыйВариант = Результат.Добавить();
		НовыйВариант.Приоритет = ПоляЗаписи[0];
		НовыйВариант.Вес = ПоляЗаписи[1];
		НовыйВариант.ПортСервераВходящейПочты = ПоляЗаписи[2];
		НовыйВариант.СерверВходящейПочты = ПоляЗаписи[3];
		НовыйВариант.ИспользоватьЗащищенноеСоединениеДляВходящейПочты = Истина;
	КонецЦикла;
	
	Для Каждого ТекЗаписьSRV Из ОбменСGoogle.ЗаписиDNSSRV("_imap", ИмяДомена) Цикл
		ПоляЗаписи = СтрРазделить(ТекЗаписьSRV["data"], " ");
		Если ПоляЗаписи.Количество() <> 4 Тогда
			Продолжить;
		КонецЕсли;
		НовыйВариант = Результат.Добавить();
		НовыйВариант.Приоритет = ПоляЗаписи[0];
		НовыйВариант.Вес = ПоляЗаписи[1];
		НовыйВариант.ПортСервераВходящейПочты = ПоляЗаписи[2];
		НовыйВариант.СерверВходящейПочты = ПоляЗаписи[3];
		НовыйВариант.ИспользоватьЗащищенноеСоединениеДляВходящейПочты = Ложь;
	КонецЦикла;
	
	Результат.Сортировать("Приоритет Возр, Вес Убыв, ИспользоватьЗащищенноеСоединениеДляВходящейПочты Убыв");
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьПочтовыеПапки(Знач УчетнаяЗапись) Экспорт
	
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(
	НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись),
	ПротоколИнтернетПочтыIMAP(УчетнаяЗапись));
	
	СохраненныеЗначения = Новый Соответствие;
	
	НаборЗаписей = РегистрыСведений.НастройкиЗагрузкиПисем.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(УчетнаяЗапись);
	НаборЗаписей.Прочитать();
	
	Для Каждого ТекНастройка Из НаборЗаписей Цикл
		
		Если Не ЗначениеЗаполнено(ТекНастройка.ВариантЗагрузки)
			И Не ЗначениеЗаполнено(ТекНастройка.ВариантСинхронизации) Тогда
			Продолжить;
		КонецЕсли;
		
		СохраненныеЗначения[ТекНастройка.ПочтоваяПапка] = Новый Структура;
		СохраненныеЗначения[ТекНастройка.ПочтоваяПапка].Вставить("ВариантЗагрузки", ТекНастройка.ВариантЗагрузки);
		СохраненныеЗначения[ТекНастройка.ПочтоваяПапка].Вставить("ВариантСинхронизации", ТекНастройка.ВариантСинхронизации);
		
	КонецЦикла;
	
	НаборЗаписей.Очистить();
	
	Для Каждого ТекЯщик Из Соединение.ПолучитьПочтовыеЯщики() Цикл
		
		НоваяНастройка = НаборЗаписей.Добавить();
		НоваяНастройка.УчетнаяЗапись = УчетнаяЗапись;
		НоваяНастройка.ПочтоваяПапка = ТекЯщик;
		
		Если ЗначениеЗаполнено(СохраненныеЗначения) 
			И ЗначениеЗаполнено(СохраненныеЗначения[НоваяНастройка.ПочтоваяПапка]) Тогда
			НоваяНастройка.ВариантЗагрузки = СохраненныеЗначения[НоваяНастройка.ПочтоваяПапка].ВариантЗагрузки;
			НоваяНастройка.ВариантСинхронизации = СохраненныеЗначения[НоваяНастройка.ПочтоваяПапка].ВариантСинхронизации;
		ИначеЕсли ЭтоЯщикВходящие(ТекЯщик) Тогда
			НоваяНастройка.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.ТолькоЗаголовки;
			НоваяНастройка.ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать;
		ИначеЕсли ЭтоЯщикОтправленные(ТекЯщик) Тогда
			НоваяНастройка.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.ТолькоЗаголовки;
			НоваяНастройка.ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать;
		Иначе
			НоваяНастройка.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.НеЗагружать;
			НоваяНастройка.ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей.Записать(Истина);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ЗагрузитьПриОткрытии(Знач ВариантЗагрузки) Экспорт
	
	Возврат ВариантЗагрузки <> Перечисления.ВариантыЗагрузкиПисем.ТекстыИВложения;
	
КонецФункции

Функция ЗначениеПоляЗаголовкаПисьма(Знач ЗаголовокПисьма, Знач Поле) Экспорт
	
	СимволыПереводаСтроки = Новый Массив;
	СимволыПереводаСтроки.Добавить(Символы.ВК);
	СимволыПереводаСтроки.Добавить(Символы.ВТаб);
	СимволыПереводаСтроки.Добавить(Символы.ПС);
	СимволыПереводаСтроки.Добавить(Символы.ПФ);
	СимволыПереводаСтроки.Добавить(Символы.Таб);
	СимволыПереводаСтроки.Добавить(Символ(32));
	
	КоличествоСтрок = СтрЧислоСтрок(ЗаголовокПисьма);
	Для Индекс = 1 По КоличествоСтрок Цикл
		Строка = СтрПолучитьСтроку(ЗаголовокПисьма, Индекс);
		Если СтрНайти(НРег(Строка), НРег(Поле) + ":") <> 1 Тогда
			Продолжить;
		КонецЕсли;
		Результат = Сред(Строка, СтрДлина(Поле) + 3);
		Для ВнутреннийИндекс = Индекс + 1 По КоличествоСтрок Цикл
			Строка = СтрПолучитьСтроку(ЗаголовокПисьма, ВнутреннийИндекс);
			Если СимволыПереводаСтроки.Найти(Лев(Строка, 1)) = Неопределено Тогда
				Прервать;
			КонецЕсли;
			Результат = Результат + " " + Сред(Строка, 2);
		КонецЦикла;
		Возврат Результат;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Функция СледуетСинхронизироватьУдаление(Знач ВариантСинхронизации) Экспорт
	
	Если ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.ПросмотрИУдаление Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция СледуетСинхронизироватьПросмотр(Знач ВариантСинхронизации) Экспорт
	
	Если ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.Просмотр Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.ПросмотрИУдаление Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОчиститьУдалениеСобытий(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УдалениеСобытий.Событие КАК Событие,
	|	ПросмотрСобытий.Просмотрено КАК Просмотрено
	|ИЗ
	|	РегистрСведений.ИдентификаторыСобытий КАК ИдентификаторыСобытий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалениеСобытий КАК УдалениеСобытий
	|		ПО ИдентификаторыСобытий.Событие = УдалениеСобытий.Событие
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПросмотрСобытий КАК ПросмотрСобытий
	|		ПО ИдентификаторыСобытий.Событие = ПросмотрСобытий.Событие
	|ГДЕ
	|	ИдентификаторыСобытий.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.УдалениеСобытий.УдалитьЗапись(Выборка.Событие);
		Если Выборка.Просмотрено <> Null Тогда
			РегистрыСведений.ПросмотрСобытий.УдалитьЗапись(Выборка.Событие);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьПросмотрСобытий(УчетнаяЗапись) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПросмотрСобытий.Событие КАК Событие,
	|	ПросмотрСобытий.Просмотрено КАК Просмотрено
	|ИЗ
	|	РегистрСведений.ИдентификаторыСобытий КАК ИдентификаторыСобытий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПросмотрСобытий КАК ПросмотрСобытий
	|		ПО ИдентификаторыСобытий.Событие = ПросмотрСобытий.Событие
	|ГДЕ
	|	ИдентификаторыСобытий.УчетнаяЗапись = &УчетнаяЗапись
	|	И ПросмотрСобытий.Просмотрено");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ПросмотрСобытий.УдалитьЗапись(Выборка.Событие);
	КонецЦикла;
	
КонецПроцедуры

// См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаЭлектроннойПочты;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Обработчик регламентного задания ЗагрузкаЭлектроннойПочты
//
Процедура ЗаданиеЗагрузитьПочту() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаЭлектроннойПочты);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УчетныеЗаписиПользователя.УчетнаяЗапись КАК УчетнаяЗапись,
	|	МИНИМУМ(УчетныеЗаписиПользователя.Пользователь) КАК Пользователь
	|ИЗ
	|	РегистрСведений.УчетныеЗаписиПользователя КАК УчетныеЗаписиПользователя
	|ГДЕ
	|	НЕ УчетныеЗаписиПользователя.УчетнаяЗапись.ПометкаУдаления
	|	И НЕ УчетныеЗаписиПользователя.УчетнаяЗапись.Недействителен
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетныеЗаписиПользователя.УчетнаяЗапись");
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ОтключитьЗаданиеЗагрузкиПочты();
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если РегистрыСведений.ОшибкиПодключенияЭлектроннойПочтыУНФ.ПревышеноДопустимоеКоличествоОшибок(Выборка.УчетнаяЗапись) Тогда
			ОтключитьЗагрузкуПочтыДляУчетнойЗаписи(Выборка.Пользователь, Выборка.УчетнаяЗапись);
			Продолжить;
		КонецЕсли;
		
		Если Не ОбменСGoogle.ЭтоУчетнаяЗаписьGoogle(Выборка.УчетнаяЗапись) Тогда
			ЗагрузитьЗаголовкиСообщенийСКонтролемОшибок(Выборка.Пользователь, Выборка.УчетнаяЗапись);
			Продолжить;
		КонецЕсли;
		
		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
		Выборка.Пользователь,
		Перечисления.ОбластиДоступаGoogle.Почта,
		Выборка.УчетнаяЗапись);
		
		Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не РегистрыСведений.СеансовыеДанныеGoogle.ТокенДоступаДействителен(СеансовыеДанные.access_token) Тогда
			
			РегистрыСведений.СеансовыеДанныеGoogle.ОбновитьСеансовыеДанные(
			СеансовыеДанные,
			Выборка.Пользователь,
			Перечисления.ОбластиДоступаGoogle.Почта,
			Выборка.УчетнаяЗапись);
			
			СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
			Выборка.Пользователь,
			Перечисления.ОбластиДоступаGoogle.Почта,
			Выборка.УчетнаяЗапись);
			
		КонецЕсли;
		
		ЗагрузитьЗаголовкиСообщенийСКонтролемОшибок(Выборка.Пользователь, Выборка.УчетнаяЗапись, СеансовыеДанные);
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик подписки на событие ПриЗаписи элемента справочника УчетныеЗаписиЭлектроннойПочты
//
// Параметры:
//  Источник - СправочникОбъект.УчетныеЗаписиЭлектроннойПочты,
//  Отказ	 - Булево.
//
Процедура НастроитьУчетныеЗаписиТекущегоПользователяПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователи.ТекущийПользователь(),
		"ОсновнаяУчетнаяЗаписьЭлектроннойПочты")) Тогда
		
		УправлениеНебольшойФирмойСервер.УстановитьНастройкуПользователя(
		Источник.Ссылка,
		"ОсновнаяУчетнаяЗаписьЭлектроннойПочты");
		
	КонецЕсли;
	
	Если Источник.ИспользоватьДляПолучения Тогда
		
		РегистрыСведений.ОшибкиПодключенияЭлектроннойПочтыУНФ.ОчиститьЗарегистрированныеОшибки(Источник.Ссылка);
		
		РегистрыСведений.УчетныеЗаписиПользователя.УстановитьПризнакЗагружатьПочту(
		Пользователи.ТекущийПользователь(),
		Источник.Ссылка,
		Истина);
		
		РегистрыСведений.ЗаданияОбменаСGoogle.ВключитьПоОбластиДоступа(Перечисления.ОбластиДоступаGoogle.Почта);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Создает профиль переданной учетной записи для подключения к почтовому серверу.
//
// Параметры:
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись.
//
// Возвращаемое значение:
//  ИнтернетПочтовыйПрофиль - профиль учетной записи;
//  Неопределено - не удалось получить учетную запись по ссылке.
//
Функция НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетныеЗаписиЭлектроннойПочты.СерверВходящейПочты КАК АдресСервераIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераВходящейПочты КАК ПортIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляВходящейПочты КАК ИспользоватьSSLIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.Пользователь КАК ПользовательIMAP,
	|	УчетныеЗаписиЭлектроннойПочты.СерверИсходящейПочты КАК АдресСервераSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПортСервераИсходящейПочты КАК ПортSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты КАК ИспользоватьSSLSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ПользовательSMTP КАК ПользовательSMTP,
	|	УчетныеЗаписиЭлектроннойПочты.ВремяОжидания КАК Таймаут
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Не Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый ИнтернетПочтовыйПрофиль;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль,ПарольSMTP");
	УстановитьПривилегированныйРежим(Ложь);
	Результат.ПарольIMAP = Пароли.Пароль;
	Результат.ПарольSMTP = Пароли.ПарольSMTP;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьПараметрыПисьма(ПараметрыПисьма, УчетнаяЗапись)
	
	Если ПараметрыПисьма = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не заданы параметры отправки.'");
	КонецЕсли;
	
	ТипЗнчКому = ?(ПараметрыПисьма.Свойство("Кому"), ТипЗнч(ПараметрыПисьма.Кому), Неопределено);
	ТипЗнчКопии = ?(ПараметрыПисьма.Свойство("Копии"), ТипЗнч(ПараметрыПисьма.Копии), Неопределено);
	ТипЗнчСлепыеКопии = ?(ПараметрыПисьма.Свойство("СлепыеКопии"), ТипЗнч(ПараметрыПисьма.СлепыеКопии), Неопределено);
	ТипЗнчСкрытыеКопии = ?(ПараметрыПисьма.Свойство("СкрытыеКопии"), ТипЗнч(ПараметрыПисьма.СкрытыеКопии), Неопределено);
	
	Если ТипЗнчКому = Неопределено
		И ТипЗнчКопии = Неопределено
		И ТипЗнчСлепыеКопии = Неопределено
		И ТипЗнчСкрытыеКопии = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не указано ни одного получателя.'");
	КонецЕсли;
	
	Если ТипЗнчКому = Тип("Строка") Тогда
		ПараметрыПисьма.Кому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.Кому);
	ИначеЕсли ТипЗнчКому <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("Кому", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнчКопии = Тип("Строка") Тогда
		ПараметрыПисьма.Копии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.Копии);
	ИначеЕсли ТипЗнчКопии <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("Копии", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнчСлепыеКопии = Тип("Строка") Тогда
		ПараметрыПисьма.СлепыеКопии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.СлепыеКопии);
	ИначеЕсли ТипЗнчСлепыеКопии <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("СлепыеКопии", Новый Массив);
	КонецЕсли;
	
	Если ТипЗнчСкрытыеКопии = Тип("Строка") Тогда
		ПараметрыПисьма.СкрытыеКопии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.СкрытыеКопии);
	ИначеЕсли ТипЗнчСкрытыеКопии <> Тип("Массив") Тогда
		ПараметрыПисьма.Вставить("СкрытыеКопии", Новый Массив);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("АдресОтвета") И ТипЗнч(ПараметрыПисьма.АдресОтвета) = Тип("Строка") Тогда
		ПараметрыПисьма.АдресОтвета = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПараметрыПисьма.АдресОтвета);
	КонецЕсли;
	
	РеквизитыОтправителя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗапись, "ИмяПользователя,АдресЭлектроннойПочты");
	
	Если ЗначениеЗаполнено(РеквизитыОтправителя.ИмяПользователя)
		И Не ПараметрыПисьма.Свойство("ИмяОтправителя") Тогда
		ПараметрыПисьма.Вставить("ИмяОтправителя", РеквизитыОтправителя.ИмяПользователя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОтправителя.АдресЭлектроннойПочты)
		И Не ПараметрыПисьма.Свойство("АдресОтправителя") Тогда
		ПараметрыПисьма.Вставить("АдресОтправителя", РеквизитыОтправителя.АдресЭлектроннойПочты);
	КонецЕсли;
	
	Если ПараметрыПисьма.Свойство("Вложения") Тогда
		Если ТипЗнч(ПараметрыПисьма.Вложения) = Тип("Соответствие") Тогда
			Для Каждого Вложение Из ПараметрыПисьма.Вложения Цикл
				ПараметрыПисьма.Вложения.Вставить(Вложение.Ключ, ПривестиВложениеДляВставкиВПисьмо(Вложение.Значение));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПривестиВложениеДляВставкиВПисьмо(Вложение)
	Если ТипЗнч(Вложение) = Тип("Строка") И ЭтоАдресВременногоХранилища(Вложение) Тогда
		Возврат ПривестиВложениеДляВставкиВПисьмо(ПолучитьИзВременногоХранилища(Вложение));
		
	ИначеЕсли ТипЗнч(Вложение) = Тип("Картинка") Тогда
		Возврат Вложение.ПолучитьДвоичныеДанные();
		
	ИначеЕсли ТипЗнч(Вложение) = Тип("Файл") И Вложение.Существует() И Вложение.ЭтоФайл() Тогда
		Возврат Новый ДвоичныеДанные(Вложение.ПолноеИмя);
		
	Иначе
		Возврат Вложение;
	КонецЕсли;
КонецФункции

Функция ОбрабатыватьТекстСообщения(ПараметрыПисьма)
	
	Если ПараметрыПисьма.Свойство("ОбрабатыватьТексты") И НЕ ПараметрыПисьма.ОбрабатыватьТексты Тогда
		Возврат ОбработкаТекстаИнтернетПочтовогоСообщения.НеОбрабатывать;
	Иначе
		Возврат ОбработкаТекстаИнтернетПочтовогоСообщения.Обрабатывать;
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьЗаголовкиСообщенийСКонтролемОшибок(Знач Пользователь, Знач УчетнаяЗапись, Знач СеансовыеДанные = Неопределено)
	
	Попытка
		
		Если СеансовыеДанные = Неопределено Тогда
			ЗагрузитьЗаголовкиСообщенийИнтернетПочты(
			УчетнаяЗапись,
			ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения(),
			Пользователь);
		Иначе
			ОбменСGoogle.ЗагрузитьЗаголовкиСообщенийGmail(
			УчетнаяЗапись,
			СеансовыеДанные,
			ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения(),
			Пользователь);
		КонецЕсли;
		
		РегистрыСведений.ОшибкиПодключенияЭлектроннойПочтыУНФ.ОчиститьЗарегистрированныеОшибки(УчетнаяЗапись);
		
	Исключение
		
		РегистрыСведений.ОшибкиПодключенияЭлектроннойПочтыУНФ.ЗарегистрироватьОшибку(
		УчетнаяЗапись,
		ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Функция ЗагрузитьЗаголовкиСообщений(УчетнаяЗапись, РежимЗагрузки, ОтборПоКонтакту)
	
	Если Не ОбменСGoogle.ЭтоУчетнаяЗаписьGoogle(УчетнаяЗапись) Тогда
		Возврат ЗагрузитьЗаголовкиСообщенийИнтернетПочты(
		УчетнаяЗапись,
		РежимЗагрузки,
		Пользователи.ТекущийПользователь(),
		ОтборПоКонтакту);
	КонецЕсли;
	
	СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
	Пользователи.ТекущийПользователь(),
	Перечисления.ОбластиДоступаGoogle.Почта,
	УчетнаяЗапись);
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		ВызватьИсключение НСтр(
		"ru = 'Отсутствует токен доступа: повторно подключите Gmail для текущего пользователя УНФ.'");
	КонецЕсли;
	
	Если Не РегистрыСведений.СеансовыеДанныеGoogle.ТокенДоступаДействителен(СеансовыеДанные.access_token) Тогда
		
		РегистрыСведений.СеансовыеДанныеGoogle.ОбновитьСеансовыеДанные(
		СеансовыеДанные,
		Пользователи.ТекущийПользователь(),
		Перечисления.ОбластиДоступаGoogle.Почта,
		УчетнаяЗапись);
		
		СеансовыеДанные = РегистрыСведений.СеансовыеДанныеGoogle.СеансовыеДанные(
		Пользователи.ТекущийПользователь(),
		Перечисления.ОбластиДоступаGoogle.Почта,
		УчетнаяЗапись);
		
	КонецЕсли;
	
	Возврат ОбменСGoogle.ЗагрузитьЗаголовкиСообщенийGmail(
	УчетнаяЗапись,
	СеансовыеДанные,
	РежимЗагрузки,
	Пользователи.ТекущийПользователь(),
	ОтборПоКонтакту);
	
КонецФункции

Функция ЗагрузитьЗаголовкиСообщенийИнтернетПочты(УчетнаяЗапись, РежимЗагрузки, Знач Пользователь, Знач ОтборПоКонтакту = Неопределено)
	
	РезультатЗагрузкиЗаголовков = НовыйРезультатЗагрузкиЗаголовков();
	
	ЗаголовокПрогресса = ЗаголовокПрогресса(УчетнаяЗапись, ОтборПоКонтакту);
	
	ДлительныеОперации.СообщитьПрогресс(0, ЗаголовокПрогресса);
	
	Профиль = НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	
	Соединение = Новый ИнтернетПочта;
	Соединение.Подключиться(Профиль, ПротоколИнтернетПочтыIMAP(УчетнаяЗапись));
	
	СобытияПоИдентификаторам = Новый Соответствие;
	
	ТаблицаИнтернетПочтовыхСообщений = Новый ТаблицаЗначений;
	ТаблицаИнтернетПочтовыхСообщений.Колонки.Добавить("ИнтернетПочтовоеСообщение");
	ТаблицаИнтернетПочтовыхСообщений.Колонки.Добавить("ПочтовыйЯщик");
	ТаблицаИнтернетПочтовыхСообщений.Колонки.Добавить("ВариантЗагрузки");
	ТаблицаИнтернетПочтовыхСообщений.Колонки.Добавить("ВариантСинхронизации");
	
	Если ЗначениеЗаполнено(ОтборПоКонтакту) Тогда
		ЗагрузитьСообщенияВТаблицуСОтборомПоКонтакту(ТаблицаИнтернетПочтовыхСообщений, СобытияПоИдентификаторам, УчетнаяЗапись, Соединение, ОтборПоКонтакту);
	Иначе
		ЗагрузитьСообщенияВТаблицу(ТаблицаИнтернетПочтовыхСообщений, СобытияПоИдентификаторам, УчетнаяЗапись, Соединение, РежимЗагрузки);
	КонецЕсли;
	
	Если ТаблицаИнтернетПочтовыхСообщений.Количество() = 0 Тогда
		Возврат РезультатЗагрузкиЗаголовков;
	КонецЕсли;
	
	АдресаУчастников = АдресаУчастников(ТаблицаИнтернетПочтовыхСообщений);
	
	// Если адресов не слишком много, то сопоставляем их все сразу: так быстрее.
	// Если адресов много, то для предотвращения нехватки памяти, будем сопоставлять индивидуально для каждого сообщения.
	Если АдресаУчастников.Количество() <= ЭлектроннаяПочтаУНФКлиентСервер.МаксимальноеКоличествоПакетноСопоставляемыхАдресов() Тогда
		СопоставленныеКонтактыПоАдресамЭП = СопоставленныеКонтактыПоАдресамЭП(АдресаУчастников);
	КонецЕсли;
	
	ОтправленныеСобытияПоИдентификаторамСообщений = РегистрыСведений.ИдентификаторыСообщений.ОтправленныеСобытияПоИдентификаторамСообщений(УчетнаяЗапись);
	ОтправленныеСобытияПоВсемИдентификаторамСообщений = РегистрыСведений.ИдентификаторыСообщений.ОтправленныеСобытияПоВсемИдентификаторамСообщений(УчетнаяЗапись);
	
	Для Каждого ТекСтрока Из ТаблицаИнтернетПочтовыхСообщений Цикл
		
		ДлительныеОперации.СообщитьПрогресс(Окр(РезультатЗагрузкиЗаголовков.Загружено / ТаблицаИнтернетПочтовыхСообщений.Количество() * 100),
		СтрШаблон(НСтр("ru = '%1: загружено %2 из %3'"),
		ЗаголовокПрогресса,
		РезультатЗагрузкиЗаголовков.Загружено,
		ТаблицаИнтернетПочтовыхСообщений.Количество()));
		
		ИдентификаторСообщения = ЭлектроннаяПочтаУНФКлиентСервер.СократитьУгловыеСкобки(ТекСтрока.ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
		
		Для Каждого ТекИдентификатор Из ТекСтрока.ИнтернетПочтовоеСообщение.Идентификатор Цикл
			
			Если ОтправленныеСобытияПоИдентификаторамСообщений[ИдентификаторСообщения] <> Неопределено Тогда
				РегистрыСведений.ИдентификаторыСобытий.ЗаписатьИдентификатор(
				УчетнаяЗапись,
				ОтправленныеСобытияПоИдентификаторамСообщений[ИдентификаторСообщения],
				ТекИдентификатор);
				Продолжить;
			КонецЕсли;
			
			Если СобытияПоИдентификаторам[ТекИдентификатор] <> Неопределено Тогда
				РегистрыСведений.ИдентификаторыСобытий.ЗаписатьИдентификатор(
				УчетнаяЗапись,
				СобытияПоИдентификаторам[ТекИдентификатор],
				ТекИдентификатор);
				Продолжить;
			КонецЕсли;
			
			Если ОтправленныеСобытияПоВсемИдентификаторамСообщений[ИдентификаторСообщения] <> Неопределено Тогда
				РегистрыСведений.ИдентификаторыСобытий.ЗаписатьИдентификатор(
				УчетнаяЗапись,
				ОтправленныеСобытияПоВсемИдентификаторамСообщений[ИдентификаторСообщения],
				ТекИдентификатор);
				Продолжить;
			КонецЕсли;
			
			СсылкаНаСобытие = ЗаписатьСобытие(
			ТекСтрока.ИнтернетПочтовоеСообщение,
			ТекСтрока.ПочтовыйЯщик,
			ТекИдентификатор,
			УчетнаяЗапись,
			СопоставленныеКонтактыПоАдресамЭП,
			Пользователь,
			ТекСтрока.ВариантЗагрузки,
			ТекСтрока.ВариантСинхронизации);
			
			ОбработатьРезультатЗагрузкиЗаголовков(
			РезультатЗагрузкиЗаголовков,
			СсылкаНаСобытие,
			ТекСтрока.ИнтернетПочтовоеСообщение.ДатаОтправления,
			РежимЗагрузки);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат РезультатЗагрузкиЗаголовков;
	
КонецФункции

Процедура ЗагрузитьСообщенияВТаблицуСОтборомПоКонтакту(ТаблицаИнтернетПочтовыхСообщений, СобытияПоИдентификаторам, УчетнаяЗапись, Соединение, ОтборПоКонтакту)
	
	ИменаПараметровОтбора = Новый Массив;
	ИменаПараметровОтбора.Добавить("Отправитель");
	ИменаПараметровОтбора.Добавить("Получатели");
	
	ИдентификаторыУжеЗагруженныхСобытий = РегистрыСведений.ИдентификаторыСобытий.ИдентификаторыПоКонтакту(УчетнаяЗапись, ОтборПоКонтакту);
	
	Для Каждого АдресЭП Из ВсеАдресаЭлектроннойПочтыКонтакта(ОтборПоКонтакту) Цикл
		
		Для Каждого ИмяПараметраОтбора Из ИменаПараметровОтбора Цикл
			
			ПараметрыОтбора = Новый Структура(ИмяПараметраОтбора, АдресЭП);
			
			Для Каждого ТекНастройка Из НастройкиЗагрузкиПисем(УчетнаяЗапись, Соединение) Цикл
				
				Соединение.ТекущийПочтовыйЯщик = ТекНастройка.ПочтоваяПапка;
				
				ДополнитьТаблицуИнтернетПочтовыхСообщений(
				ТаблицаИнтернетПочтовыхСообщений,
				УчетнаяЗапись,
				Соединение,
				ИдентификаторыУжеЗагруженныхСобытий,
				ПараметрыОтбора,
				СобытияПоИдентификаторам,
				ТекНастройка.ВариантЗагрузки,
				ТекНастройка.ВариантСинхронизации);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьСообщенияВТаблицу(ТаблицаИнтернетПочтовыхСообщений, СобытияПоИдентификаторам, УчетнаяЗапись, Соединение, РежимЗагрузки)
	
	ПослеДатыОтправления = ПослеДатыОтправления(УчетнаяЗапись, РежимЗагрузки);
	Если РежимЗагрузки = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения() Тогда
		РегистрыСведений.ИнкрементнаяСинхронизацияПочты.ЗаписатьДатуОтправления(ПослеДатыОтправления, УчетнаяЗапись);
	КонецЕсли;

	ИдентификаторыРанееПолученныхСообщений = РегистрыСведений.ИдентификаторыСобытий.ИдентификаторыПослеДатыОтправления(УчетнаяЗапись, ПослеДатыОтправления);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ПослеДатыОтправления", ПослеДатыОтправления);
	
	Для Каждого ТекНастройка Из НастройкиЗагрузкиПисем(УчетнаяЗапись, Соединение) Цикл
		
		Соединение.ТекущийПочтовыйЯщик = ТекНастройка.ПочтоваяПапка;
		
		ДополнитьТаблицуИнтернетПочтовыхСообщений(
		ТаблицаИнтернетПочтовыхСообщений,
		УчетнаяЗапись,
		Соединение,
		ИдентификаторыРанееПолученныхСообщений,
		ПараметрыОтбора,
		СобытияПоИдентификаторам,
		ТекНастройка.ВариантЗагрузки,
		ТекНастройка.ВариантСинхронизации);
		
		СинхронизироватьУдаление(ТекНастройка.ВариантСинхронизации, УчетнаяЗапись, Соединение);
		СинхронизироватьПросмотр(ТекНастройка.ВариантСинхронизации, УчетнаяЗапись, Соединение);
		
	КонецЦикла;
	
	ОчиститьУдалениеСобытий(УчетнаяЗапись);
	ОчиститьПросмотрСобытий(УчетнаяЗапись);
	
КонецПроцедуры

Процедура ДополнитьТаблицуИнтернетПочтовыхСообщений(
	ТаблицаИнтернетПочтовыхСообщений,
	Знач УчетнаяЗапись,
	Знач Соединение,
	Знач ИдентификаторыРанееПолученныхСообщений,
	Знач ПараметрыОтбора,
	Знач СобытияПоИдентификаторам,
	Знач ВариантЗагрузки,
	Знач ВариантСинхронизации)
	
	Если Не ЗначениеЗаполнено(ВариантЗагрузки) Тогда
		Возврат;
	КонецЕсли;
	
	Если ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.НеЗагружать Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыПисемДляЗагрузки = Соединение.ПолучитьИдентификаторы(ИдентификаторыРанееПолученныхСообщений, ПараметрыОтбора);
	Если Не ЗначениеЗаполнено(ИдентификаторыПисемДляЗагрузки) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
	СобытияПоИдентификаторам,
	РегистрыСведений.ИдентификаторыСобытий.СобытияПоИдентификаторам(УчетнаяЗапись, ИдентификаторыПисемДляЗагрузки),
	Истина);
	
	ИнтернетПочтовыеСообщения = Соединение.Выбрать(Ложь, ИдентификаторыПисемДляЗагрузки, Ложь);
	
	Для Каждого ТекИнтернетПочтовоеСообщение Из ИнтернетПочтовыеСообщения Цикл
		НоваяСтрока = ТаблицаИнтернетПочтовыхСообщений.Добавить();
		НоваяСтрока.ИнтернетПочтовоеСообщение = ТекИнтернетПочтовоеСообщение;
		НоваяСтрока.ПочтовыйЯщик = Соединение.ТекущийПочтовыйЯщик;
		НоваяСтрока.ВариантЗагрузки = ВариантЗагрузки;
		НоваяСтрока.ВариантСинхронизации = ВариантСинхронизации;
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьУдаление(ВариантСинхронизации, УчетнаяЗапись, Соединение)
	
	Если Не СледуетСинхронизироватьУдаление(ВариантСинхронизации) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	УдалениеСобытий.Событие КАК Событие,
	|	ИдентификаторыСобытий.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыСобытий КАК ИдентификаторыСобытий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалениеСобытий КАК УдалениеСобытий
	|		ПО ИдентификаторыСобытий.Событие = УдалениеСобытий.Событие
	|ГДЕ
	|	ИдентификаторыСобытий.УчетнаяЗапись = &УчетнаяЗапись");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУдалено = РезультатЗапроса.Выгрузить();
	
	Соединение.Выбрать(Истина, ТаблицаУдалено.ВыгрузитьКолонку("Идентификатор"));
	Соединение.ОчиститьУдаленныеСообщения();
	
КонецПроцедуры

Процедура СинхронизироватьПросмотр(ВариантСинхронизации, УчетнаяЗапись, Соединение)
	
	Если Не СледуетСинхронизироватьПросмотр(ВариантСинхронизации) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПросмотрСобытий.Событие КАК Событие,
	|	ПросмотрСобытий.Просмотрено КАК Просмотрено,
	|	ИдентификаторыСобытий.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.ИдентификаторыСобытий КАК ИдентификаторыСобытий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПросмотрСобытий КАК ПросмотрСобытий
	|		ПО ИдентификаторыСобытий.Событие = ПросмотрСобытий.Событие
	|ГДЕ
	|	ИдентификаторыСобытий.УчетнаяЗапись = &УчетнаяЗапись
	|	И ПросмотрСобытий.Просмотрено");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПросмотрено = РезультатЗапроса.Выгрузить();
	
	Соединение.Выбрать(Ложь, ТаблицаПросмотрено.ВыгрузитьКолонку("Идентификатор"), Истина);
	
КонецПроцедуры

Функция АдресаУчастников(Знач ТаблицаИнтернетПочтовыхСообщений)
	
	Результат = Новый Массив;
	
	Для Каждого ТекСтрока Из ТаблицаИнтернетПочтовыхСообщений Цикл
		
		Если ЭтоЯщикОтправленные(ТекСтрока.ПочтовыйЯщик) Тогда
			
			Для Каждого ТекПолучатель Из ТекСтрока.ИнтернетПочтовоеСообщение.Получатели Цикл
				НормализованныйАдресПолучателя = НормализованныйАдрес(ТекПолучатель.Адрес);
				Если Результат.Найти(НормализованныйАдресПолучателя) = Неопределено Тогда
					Результат.Добавить(НормализованныйАдресПолучателя)
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			НормализованныйАдресОтправителя = НормализованныйАдрес(ТекСтрока.ИнтернетПочтовоеСообщение.Отправитель.Адрес);
			Если Не ЗначениеЗаполнено(НормализованныйАдресОтправителя) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Результат.Найти(НормализованныйАдресОтправителя) = Неопределено Тогда
				Результат.Добавить(НормализованныйАдресОтправителя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает соответствие адресов электронной почты для всех контактов,
// встречающихся в переданном сообщении.
//
// Параметры:
//  ПочтовоеСообщение - ИнтернетПочтовоеСообщение - почтовое сообщение,
//                      контакты из которого нужно сопоставить.
// 
// Возвращаемое значение:
//  Соответствие - Соответствие адресов электронной почты и ссылок
//  на контакты (контрагенты или контактные лица).
//
Функция СопоставленныеКонтактыИзПочтовогоСообщения(Знач ПочтовоеСообщение)
	
	АдресаЭП = Новый Массив;
	
	НормализованныйАдресОтправителя = НормализованныйАдрес(ПочтовоеСообщение.Отправитель.Адрес);
	
	Если ЗначениеЗаполнено(НормализованныйАдресОтправителя)
		И АдресаЭП.Найти(НормализованныйАдресОтправителя) = Неопределено Тогда
		АдресаЭП.Добавить(НормализованныйАдресОтправителя);
	КонецЕсли;

	Для Каждого ТекПолучатель Из ПочтовоеСообщение.Получатели Цикл
		НормализованныйАдресПолучателя = НормализованныйАдрес(ТекПолучатель.Адрес);
		Если Не ЗначениеЗаполнено(НормализованныйАдресПолучателя) Тогда
			Продолжить;
		КонецЕсли;
		Если АдресаЭП.Найти(НормализованныйАдресПолучателя) = Неопределено Тогда
			АдресаЭП.Добавить(НормализованныйАдресПолучателя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СопоставленныеКонтактыПоАдресамЭП(АдресаЭП);
	
КонецФункции

Функция НормализованныйАдрес(АдресЭП)
	
	Возврат НРег(ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(АдресЭП, ""));
	
КонецФункции

Функция ПослеДатыОтправления(УчетнаяЗапись, РежимЗагрузки)
	
	Если РежимЗагрузки = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиНовыеСообщения() Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Событие.НачалоСобытия КАК НачалоСобытия
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.УчетнаяЗапись = &УчетнаяЗапись
		|	И Событие.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.ТипыСобытий.ЭлектронноеПисьмо)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НачалоСобытия УБЫВ");
		Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ДатаОтправления = Выборка.НачалоСобытия;
		КонецЕсли;
		
	Иначе
		
		ДатаОтправления = РегистрыСведений.ИнкрементнаяСинхронизацияПочты.ДатаОтправления(УчетнаяЗапись);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОтправления) Тогда
		// При первой синхронизации загружаем письма за последний месяц
		Возврат ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), -1);
	КонецЕсли;
	
	Если РежимЗагрузки = ЭлектроннаяПочтаУНФКлиентСервер.РежимЗагрузкиПредыдущиеСообщения() Тогда
		Возврат ДобавитьМесяц(НачалоДня(ДатаОтправления), -1);
	Иначе
		// Для компенсации разницы в часовых поясах используем прошедшую дату
		Возврат НачалоДня(НачалоДня(ДатаОтправления) - 1);
	КонецЕсли;
	
КонецФункции

Процедура ЗагрузитьСодержаниеСообщенияИнтернетПочты(Идентификатор, ВходящееИсходящееСобытие, УчетнаяЗапись, АдресХранилища)
	
	Профиль = НовыйИнтернетПочтовыйПрофиль(УчетнаяЗапись);
	Соединение = Новый ИнтернетПочта;
	
	Соединение.Подключиться(Профиль, ПротоколИнтернетПочтыIMAP(УчетнаяЗапись));
	Для Каждого ТекНастройка Из НастройкиЗагрузкиПисем(УчетнаяЗапись, Соединение) Цикл
		
		Если Не ЗначениеЗаполнено(ТекНастройка.ВариантЗагрузки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекНастройка.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.НеЗагружать Тогда
			Продолжить;
		КонецЕсли;
		
		Соединение.ТекущийПочтовыйЯщик = ТекНастройка.ПочтоваяПапка;
		
		ИнтернетПочтовыеСообщения = Соединение.Выбрать(Ложь, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор), Ложь);
		Если ЗначениеЗаполнено(ИнтернетПочтовыеСообщения) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеСобытия = Документы.Событие.НовыеДанныеСобытия();
	
	Для Каждого ТекИнтернетПочтовоеСообщение Из ИнтернетПочтовыеСообщения Цикл
		Для Каждого ТекИдентификатор Из ТекИнтернетПочтовоеСообщение.Идентификатор Цикл
			
			Документы.Событие.ЗаполнитьТекстыИзПочтовогоСообщения(ДанныеСобытия, ТекИнтернетПочтовоеСообщение);
			Документы.Событие.ЗаполнитьВложенияИзПочтовогоСообщения(ДанныеСобытия, ТекИнтернетПочтовоеСообщение);
			
		КонецЦикла;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеСобытия, АдресХранилища);
	
КонецПроцедуры

Функция ЗаписатьСобытие(ИнтернетПочтовоеСообщение, ПочтовыйЯщик, Идентификатор, УчетнаяЗапись, СопоставленныеКонтакты, Пользователь, ВариантЗагрузки, ВариантСинхронизации)
	
	Результат = Документы.Событие.ПустаяСсылка();
	
	ИдентификаторыСвязанныхСообщений = ИдентификаторыСвязанныхСообщений(ЗначениеПоляЗаголовкаПисьма(ИнтернетПочтовоеСообщение.Заголовок, "References"));
	
	ИдентификаторОснования = ЗначениеПоляЗаголовкаПисьма(ИнтернетПочтовоеСообщение.Заголовок, "In-Reply-To");
	
	Блокировка = НоваяБлокировкаИдентификаторовПисем(УчетнаяЗапись);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		СобытияПоИдентификатору = РегистрыСведений.ИдентификаторыСобытий.СобытияПоИдентификаторам(УчетнаяЗапись, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Идентификатор));
		Если ЗначениеЗаполнено(СобытияПоИдентификатору) Тогда
			ТекстИсключения = СтрШаблон(
			НСтр("ru = 'Возможно, запущено несколько заданий загрузки почты: сообщение с идентификатором %1 уже записано.'"),
			Идентификатор);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		НовоеСобытие = Документы.Событие.СоздатьДокумент();
		НовоеСобытие.ДополнительныеСвойства.Вставить("Идентификатор", Идентификатор);
		НовоеСобытие.ДополнительныеСвойства.Вставить("ИдентификаторыСообщений",
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИнтернетПочтовоеСообщение.ИдентификаторСообщения));
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Дата", ИнтернетПочтовоеСообщение.ДатаПолучения);
		ЗначенияЗаполнения.Вставить("НачалоСобытия", ЛокальнаяДатаОтправления(ИнтернетПочтовоеСообщение));
		ЗначенияЗаполнения.Вставить("ОкончаниеСобытия", ИнтернетПочтовоеСообщение.ДатаПолучения);
		Если ЗначенияЗаполнения.ОкончаниеСобытия < ЗначенияЗаполнения.НачалоСобытия Тогда
			ЗначенияЗаполнения.ОкончаниеСобытия = ЗначенияЗаполнения.НачалоСобытия;
		КонецЕсли;
		ЗначенияЗаполнения.Вставить("УчетнаяЗапись", УчетнаяЗапись);
		ЗначенияЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.ЭлектронноеПисьмо);
		ЗначенияЗаполнения.Вставить("Тема", ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыXML(ИнтернетПочтовоеСообщение.Тема));
		Если ЭтоЯщикОтправленные(ПочтовыйЯщик) Тогда
			ЗначенияЗаполнения.Вставить("ВходящееИсходящееСобытие", Перечисления.ВходящееИсходящееСобытие.Исходящее);
		Иначе
			ЗначенияЗаполнения.Вставить("ВходящееИсходящееСобытие", Перечисления.ВходящееИсходящееСобытие.Входящее);
		КонецЕсли;
		ЗначенияЗаполнения.Вставить("Состояние", Справочники.СостоянияСобытий.Завершено);
		ЗначенияЗаполнения.Вставить("ЗагрузитьПриОткрытии", ЗагрузитьПриОткрытии(ВариантЗагрузки));
		
		НовоеСобытие.Заполнить(ЗначенияЗаполнения);
		
		ЗаполнитьКонтакты(НовоеСобытие, ИнтернетПочтовоеСообщение, СопоставленныеКонтакты);
		
		ЗаполнитьСодержимое(НовоеСобытие, ИнтернетПочтовоеСообщение, ВариантЗагрузки);
		
		НовоеСобытие.ЗаполнитьДокументыОснования(ИдентификаторОснования, ИдентификаторыСвязанныхСообщений);
		
		НовоеСобытие.Автор = Пользователь;
		
		НовоеСобытие.Ответственный = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ОсновнойОтветственный");
		
		Если СтрНайти(НовоеСобытие.Тема, "Заполнена форма") <> 0 Тогда
			Справочники.КонтактныеФормыGoogle.ЗаполнитьСобытиеПоДаннымКонтактнойФормы(НовоеСобытие);
		КонецЕсли;
		
		НовоеСобытие.Записать();
		
		Если СледуетСинхронизироватьПросмотр(ВариантСинхронизации) Тогда
			РегистрыСведений.ПросмотрСобытий.ДобавитьОжиданиеПросмотра(НовоеСобытие.Ссылка);
		КонецЕсли;
		
		РегистрыСведений.ОтказалисьОтРассылки.ЗарегистрироватьОтказОтРассылкиЕслиТребуется(ИнтернетПочтовоеСообщение.Тема, ИнтернетПочтовоеСообщение.Отправитель);
		
		Если НовоеСобытие.ВходящееИсходящееСобытие <> Перечисления.ВходящееИсходящееСобытие.Исходящее Тогда
			ОписаниеВходящего = КонтактЦентр.ОписаниеВходящего();
			ОписаниеВходящего.Ответственный = НовоеСобытие.Ответственный;
			КонтактЦентр.ДобавитьВоВходящее(НовоеСобытие.Ссылка, ОписаниеВходящего);
		КонецЕсли;
		
		Результат = НовоеСобытие.Ссылка;
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка заголовков сообщений электронной почты'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,,,
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Результат = Документы.Событие.ПустаяСсылка();
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьСодержимое(СобытиеОбъект, ИнтернетПочтовоеСообщение, ВариантЗагрузки)
	
	ДанныеСобытия = Документы.Событие.НовыеДанныеСобытия();
	
	Документы.Событие.ЗаполнитьТекстыИзПочтовогоСообщения(ДанныеСобытия, ИнтернетПочтовоеСообщение);
	
	Если ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.ТекстыИВложения Тогда
		
		ЗаполнитьЗначенияСвойств(СобытиеОбъект, ДанныеСобытия);
		Документы.Событие.ЗаполнитьВложенияИзПочтовогоСообщения(СобытиеОбъект.ДополнительныеСвойства, ИнтернетПочтовоеСообщение);
		
	КонецЕсли;
	
	ТемаИСодержание = Документы.Событие.ТемаИСодержание(
	ДанныеСобытия.Тема,
	ДанныеСобытия.Содержание,
	ДанныеСобытия.СодержаниеHTML);
	
	СобытиеОбъект.ДополнительныеСвойства.Вставить("ТемаИСодержание", ТемаИСодержание);
	
КонецПроцедуры

Процедура ДобавитьУчастникаСобытия(Событие, Контакт, КакСвязаться)
	
	Если Событие.КонтактУжеЯвляетсяУчастником(Контакт) Тогда
		Возврат;
	КонецЕсли;
	
	НовыйУчастник = Событие.Участники.Добавить();
	НовыйУчастник.Контакт = ?(ЗначениеЗаполнено(Контакт), Контакт, КакСвязаться);
	НовыйУчастник.КакСвязаться = КакСвязаться;
	
КонецПроцедуры

Функция ПротоколИнтернетПочтыIMAP(УчетнаяЗапись)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ПротоколВходящейПочты") = "IMAP" Тогда
		Возврат ПротоколИнтернетПочты.IMAP;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Подключение к серверу входящей почты может быть выполнено только по протоколу IMAP.'");
	
КонецФункции

// Дата отправления, приведенная к дате получателя. Смещение рассчитано на момент
// отправления сообщения.
Функция ЛокальнаяДатаОтправления(Сообщение)
	
	// Дата отправления сообщения, приведенная к UTC.
	ДатаОтправленияUTC = Сообщение.ДатаОтправления - Сообщение.СмещениеДатыОтправления;
	
	// Смещение времени получателя относительно UTC на дату отправки письма с учетом
	// смещения летнего времени.
	СмещениеПолучателя = СмещениеСтандартногоВремени(ЧасовойПоясСеанса(), ДатаОтправленияUTC)
	+ СмещениеЛетнегоВремени(ЧасовойПоясСеанса(), ДатаОтправленияUTC);
	
	Возврат Сообщение.ДатаОтправления + (СмещениеПолучателя - Сообщение.СмещениеДатыОтправления);
	
КонецФункции

Процедура ПеренестиИдентификаторСообщенияВПолеReferences(ИнтернетПочтовоеСообщение)
	
	ИдентификаторСообщения = ЭлектроннаяПочтаУНФКлиентСервер.СократитьУгловыеСкобки(ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
	
	Если Не ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентыПоляЗаголовка = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрШаблон("<%1>", ИдентификаторСообщения));
	ИдентификаторыОснований = ИнтернетПочтовоеСообщение.ПолучитьПолеЗаголовка("References", "");
	Если ЗначениеЗаполнено(ИдентификаторыОснований) Тогда
		КомпонентыПоляЗаголовка.Добавить(ИдентификаторыОснований);
	КонецЕсли;
	
	ИнтернетПочтовоеСообщение.УстановитьПолеЗаголовка(
	"References",
	СтрСоединить(КомпонентыПоляЗаголовка, " "),
	СпособКодированияНеASCIIСимволовИнтернетПочтовогоСообщения.БезКодирования);
	
КонецПроцедуры

Функция ЭтоЯщикВходящие(ИмяЯщика)
	
	Если СтрНайти(ВРег(ИмяЯщика), "INBOX") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНайти(ВРег(ИмяЯщика), "ВХОДЯЩИЕ") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоЯщикОтправленные(ИмяЯщика)
	
	Если СтрНайти(ВРег(ИмяЯщика), "SENT") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если СтрНайти(ВРег(ИмяЯщика), "ОТПРАВЛЕННЫЕ") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПоместитьПочтовоеСообщениеВОтправленныеIMAP(ИнтернетПочтовоеСообщение, ОбрабатыватьТекстСообщения, Соединение, Идентификаторы, УчетнаяЗапись)
	
	ЧислоПопытокУзнатьИдентификаторОтправленногоПисьма = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "ЧислоПопытокУзнатьИдентификаторОтправленногоПисьма");
	
	Для Каждого ТекЯщик Из Соединение.ПолучитьПочтовыеЯщики() Цикл
		
		Если Не ЭтоЯщикОтправленные(ТекЯщик) Тогда
			Продолжить;
		КонецЕсли;
		
		Соединение.ТекущийПочтовыйЯщик = ТекЯщик;
		
		Для Индекс = 1 По ЧислоПопытокУзнатьИдентификаторОтправленногоПисьма Цикл
			ОтправленноеСообщение = ОтправленноеСообщение(Соединение, ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
			Если ТипЗнч(ОтправленноеСообщение) = Тип("ИнтернетПочтовоеСообщение") Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТипЗнч(ОтправленноеСообщение) = Тип("ИнтернетПочтовоеСообщение") Тогда
			Если ЗначениеЗаполнено(ОтправленноеСообщение.Идентификатор) Тогда
				Идентификаторы.Идентификатор = ОтправленноеСообщение.Идентификатор[0];
			КонецЕсли;
			Идентификаторы.ИдентификаторыСообщений.Добавить(ОтправленноеСообщение.ИдентификаторСообщения);
			Прервать;
		КонецЕсли;
		
		Соединение.Послать(
		ИнтернетПочтовоеСообщение,
		ОбрабатыватьТекстСообщения,
		ПротоколИнтернетПочты.IMAP);
		
		Идентификаторы.Идентификатор = ИнтернетПочтовоеСообщение.ИдентификаторСообщения;
		Идентификаторы.ИдентификаторыСообщений.Добавить(ИнтернетПочтовоеСообщение.ИдентификаторСообщения);
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтправленноеСообщение(Соединение, ИдентификаторСообщения)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Недавние", Истина);
	ИдентификаторыСообщений = Соединение.ПолучитьИдентификаторы(, ПараметрыОтбора);
	
	Если Не ЗначениеЗаполнено(ИдентификаторыСообщений) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИнтернетПочтовыеСообщения = Соединение.Выбрать(Ложь, ИдентификаторыСообщений, Ложь);
	Для Каждого ТекСообщение Из ИнтернетПочтовыеСообщения Цикл
		Если СтрНайти(ТекСообщение.Заголовок, ИдентификаторСообщения) <> 0 Тогда
			Возврат ТекСообщение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НастройкиЗагрузкиПисем(Знач УчетнаяЗапись, Знач Соединение)
	
	ПочтовыеЯщикиНаСервереIMAP = Соединение.ПолучитьПочтовыеЯщики();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиЗагрузкиПисем.ПочтоваяПапка КАК ПочтоваяПапка,
	|	НастройкиЗагрузкиПисем.ВариантЗагрузки КАК ВариантЗагрузки,
	|	НастройкиЗагрузкиПисем.ВариантСинхронизации КАК ВариантСинхронизации
	|ИЗ
	|	РегистрСведений.НастройкиЗагрузкиПисем КАК НастройкиЗагрузкиПисем
	|ГДЕ
	|	НастройкиЗагрузкиПисем.УчетнаяЗапись = &УчетнаяЗапись
	|	И НастройкиЗагрузкиПисем.ПочтоваяПапка В(&ПочтовыеЯщикиНаСервереIMAP)
	|	И НастройкиЗагрузкиПисем.ВариантЗагрузки <> ЗНАЧЕНИЕ(Перечисление.ВариантыЗагрузкиПисем.НеЗагружать)");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ПочтовыеЯщикиНаСервереIMAP", ПочтовыеЯщикиНаСервереIMAP);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат НастройкиЗагрузкиПисемПоУмолчанию(ПочтовыеЯщикиНаСервереIMAP);
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

Функция НастройкиЗагрузкиПисемПоУмолчанию(Знач ПочтовыеЯщикиНаСервереIMAP)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ПочтоваяПапка", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВариантЗагрузки", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыЗагрузкиПисем"));
	Результат.Колонки.Добавить("ВариантСинхронизации", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыСинхронизацииПисем"));
	
	ДобавляемаяНастройка = Результат.Добавить();
	ДобавляемаяНастройка.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.ТолькоЗаголовки;
	ДобавляемаяНастройка.ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать;
	
	Для Каждого ТекПочтовыйЯщик Из ПочтовыеЯщикиНаСервереIMAP Цикл
		Если ЭтоЯщикОтправленные(ТекПочтовыйЯщик) Тогда
			ДобавляемаяНастройка = Результат.Добавить();
			ДобавляемаяНастройка.ПочтоваяПапка = ТекПочтовыйЯщик;
			ДобавляемаяНастройка.ВариантЗагрузки = Перечисления.ВариантыЗагрузкиПисем.ТолькоЗаголовки;
			ДобавляемаяНастройка.ВариантСинхронизации = Перечисления.ВариантыСинхронизацииПисем.НеСинхронизировать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтключитьЗаданиеЗагрузкиПочты()
	
	РегистрыСведений.ЗаданияОбменаСGoogle.ОтключитьПоОбластиДоступа(Перечисления.ОбластиДоступаGoogle.Почта);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка электронной почты по расписанию'", ОбщегоНазначения.КодОсновногоЯзыка()),
	УровеньЖурналаРегистрации.Предупреждение,,,
	НСтр("ru = 'Задание загрузки почты было отключено, так как отсутствуют учетные записи с признаком ""Получать почту"".
	|Проверьте настройки в диалоге ""Больше возможностей"" - ""Персональные настройки"" - ""Почта и SMS"" - ""Мои учетные записи"".'",
	ОбщегоНазначения.КодОсновногоЯзыка()));

КонецПроцедуры

Процедура ОтключитьЗагрузкуПочтыДляУчетнойЗаписи(Знач Пользователь, Знач УчетнаяЗапись)
	
	РегистрыСведений.УчетныеЗаписиПользователя.УстановитьПризнакЗагружатьПочту(
	Пользователь,
	УчетнаяЗапись,
	Ложь);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Загрузка электронной почты по расписанию'", ОбщегоНазначения.КодОсновногоЯзыка()),
	УровеньЖурналаРегистрации.Предупреждение,,,
	СтрШаблон(
	НСтр("ru = 'Загрузка электронной почты для учетной записи ""%1"" приостановлена из-за большого количества ошибок.
	|Проверьте настройки в диалоге ""Больше возможностей"" - ""Персональные настройки"" - ""Почта и SMS"" - ""Мои учетные записи"".'",
	ОбщегоНазначения.КодОсновногоЯзыка()),
	УчетнаяЗапись));

КонецПроцедуры

Функция ПолучитьКонтрагентыКонтактыПоАдресамЭП(АдресаЭП, Результат)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Ссылка КАК Контакт,
	|	КонтрагентыКонтактнаяИнформация.АдресЭП КАК АдресЭП
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.АдресЭП В(&АдресаЭП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КонтактныеЛицаКонтактнаяИнформация.Ссылка,
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	Справочник.КонтактныеЛица.КонтактнаяИнформация КАК КонтактныеЛицаКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаКонтактнаяИнформация.АдресЭП В(&АдресаЭП)");
	
	Запрос.УстановитьПараметр("АдресаЭП", АдресаЭП);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаАдресЭП = НРег(Выборка.АдресЭП);
		
		Если Результат[ВыборкаАдресЭП] = Неопределено Тогда
			Результат[ВыборкаАдресЭП] = Новый Массив;
		КонецЕсли;
		
		Если Результат[ВыборкаАдресЭП].Найти(Выборка.Контакт) = Неопределено Тогда
			Если ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
				Результат[ВыборкаАдресЭП].Вставить(0, Выборка.Контакт);
			Иначе
				Результат[ВыборкаАдресЭП].Добавить(Выборка.Контакт);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьЛидыПоАдресамЭП(АдресаЭП, Результат)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЛидыКонтактнаяИнформация.Ссылка КАК Контакт,
	|	ЛидыКонтактнаяИнформация.АдресЭП КАК АдресЭП
	|ИЗ
	|	Справочник.Лиды.КонтактнаяИнформация КАК ЛидыКонтактнаяИнформация
	|ГДЕ
	|	ЛидыКонтактнаяИнформация.АдресЭП В(&АдресаЭП)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛидыКонтактнаяИнформация.Ссылка,
	|	ЛидыКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	Справочник.КонтактыЛидов.КонтактнаяИнформация КАК ЛидыКонтактнаяИнформация
	|ГДЕ
	|	ЛидыКонтактнаяИнформация.АдресЭП В(&АдресаЭП)");

	Запрос.УстановитьПараметр("АдресаЭП", АдресаЭП);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВыборкаАдресЭП = НРег(Выборка.АдресЭП);
		
		Если Результат[ВыборкаАдресЭП] = Неопределено Тогда
			Результат[ВыборкаАдресЭП] = Новый Массив;
		КонецЕсли;
		
		Если Результат[ВыборкаАдресЭП].Найти(Выборка.Контакт) = Неопределено Тогда
			Если ТипЗнч(Выборка.Контакт) = Тип("СправочникСсылка.Лиды") Тогда
				Результат[ВыборкаАдресЭП].Вставить(0, Выборка.Контакт);
			Иначе
				Результат[ВыборкаАдресЭП].Добавить(Выборка.Контакт);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти