
#Область ПрограммныйИнтерфейс

// Перед началом формирования документа
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - .
//  ПервыйДокумент		 - Булево - .
//  НомерСтрокиНачало	 - Число - .
//  ДанныеПечати		 - Структура - .
//
Процедура ПередНачаломФормированияДокумента(ТабличныйДокумент, ПервыйДокумент, НомерСтрокиНачало,
	ДанныеПечати = Неопределено) Экспорт
	
	Если ПервыйДокумент = Истина
		ИЛИ ПервыйДокумент = Неопределено Тогда
		
		ПервыйДокумент = Ложь;
		
	Иначе
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЕсли;
	
	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
	
	Если ТипЗнч(ДанныеПечати) = Тип("Структура") Тогда
		
		ДанныеПечати.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак необходимости выделить как составляющую набора
//
// Параметры:
//  ПараметрыНоменклатуры	 - Структура - .
// 
// Возвращаемое значение:
//  Булево - необходимо выделить как состав набора
//
Функция НеобходимоВыделитьКакСоставляющуюНабора(ПараметрыНоменклатуры) Экспорт
	
	Перем НеобходимоВыделитьКакСоставНабора;
	
	ПараметрыНоменклатуры.Свойство("НеобходимоВыделитьКакСоставНабора", НеобходимоВыделитьКакСоставНабора);
	Возврат НеобходимоВыделитьКакСоставНабора = Истина;
	
КонецФункции

// Формирует представление номенклатуры в печатной форме
//
// Параметры:
//  ПараметрыНоменклатуры - Структура - параметры, по которым формируется представление, возможные ключи:
//   * ПредставлениеНоменклатуры - Строка, СправочникСсылка.Номенклатура - .
//   * ПредставлениеХарактеристики - Строка, СправочникСсылка.ХарактеристикиНоменклатуры - .
//   * ПредставлениеСерийногоНомера - Строка, СправочникСсылка.ПартииНоменклатуры - .
//   * ПредставлениеПартии  - Строка, СправочникСсылка.ПартииНоменклатуры - .
//   * ПредставлениеКодаТНВЭД - Строка, СправочникСсылка.КлассификаторТНВЭД - .
//
// Возвращаемое значение:
//  Строка - представление номенклатуры в печатной форме.
//
Функция ПредставлениеНоменклатуры(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеНоменклатуры = "";
	ПредставлениеХарактеристики = "";
	ПредставлениеСерийногоНомера = "";
	ПредставлениеПартии = "";
	ПредставлениеКодаТНВЭД = "";
	// "ПредставлениеАртикула" начиная с версии 1.6.11 не используется в представлении номенклатуры.
	
	НеобходимоВыделитьКакСоставНабора = НеобходимоВыделитьКакСоставляющуюНабора(ПараметрыНоменклатуры);
	
	Если ПараметрыНоменклатуры.Свойство("Содержание") 
		И НЕ ПустаяСтрока(ПараметрыНоменклатуры.Содержание) Тогда
		
		ПредставлениеНоменклатуры = ПараметрыНоменклатуры.Содержание;
		
	Иначе
		
		ПредставлениеНоменклатуры = СтрокаПредставленияНоменклатуры(ПараметрыНоменклатуры);
		ПредставлениеХарактеристики = СтрокаПредставленияХарактеристики(ПараметрыНоменклатуры);
		ПредставлениеСерийногоНомера = СтрокаПредставленияСерийногоНомера(ПараметрыНоменклатуры);
		ПредставлениеПартии = СтрокаПредставленияПартии(ПараметрыНоменклатуры);
		ПредставлениеКодаТНВЭД = СтрокаПредставленияКодаТНВЭД(ПараметрыНоменклатуры);
		
	КонецЕсли;
	
	Возврат ПредставлениеНоменклатурыДляПечати(ПредставлениеНоменклатуры, ПредставлениеХарактеристики,
		ПредставлениеСерийногоНомера, ПредставлениеПартии, ПредставлениеКодаТНВЭД, НеобходимоВыделитьКакСоставНабора);
	
КонецФункции // ПредставлениеНоменклатуры()

Функция СтрокаПредставленияНоменклатуры(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеНоменклатуры = "";
	Если ПараметрыНоменклатуры.Свойство("ПредставлениеНоменклатуры") Тогда
		
		Если ТипЗнч(ПараметрыНоменклатуры.ПредставлениеНоменклатуры) = Тип("СправочникСсылка.Номенклатура") Тогда
			
			ПредставлениеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеНоменклатуры, "НаименованиеПолное");
			Если ПустаяСтрока(ПредставлениеНоменклатуры) Тогда
				
				ПредставлениеНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеНоменклатуры, "Наименование");
				
			КонецЕсли;
			
		Иначе
			
			ПредставлениеНоменклатуры = СокрЛП(ПараметрыНоменклатуры.ПредставлениеНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат ПредставлениеНоменклатуры;
	
КонецФункции

Функция СтрокаПредставленияХарактеристики(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеХарактеристики = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристики") Тогда
		
		Если ПараметрыНоменклатуры.Свойство("ПредставлениеХарактеристики") Тогда
			
			Если ТипЗнч(ПараметрыНоменклатуры.ПредставлениеХарактеристики) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
				
				ПредставлениеХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеХарактеристики, "НаименованиеДляПечати");
				Если ПустаяСтрока(ПредставлениеХарактеристики) Тогда
					
					ПредставлениеХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеХарактеристики, "Наименование");
					
				КонецЕсли;
				
			Иначе
				
				ПредставлениеХарактеристики = СокрЛП(ПараметрыНоменклатуры.ПредставлениеХарактеристики);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеХарактеристики;
	
КонецФункции

Функция СтрокаПредставленияПартии(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеПартии = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартии") Тогда
		
		Если ПараметрыНоменклатуры.Свойство("ПредставлениеПартии") Тогда
			
			Если ТипЗнч(ПараметрыНоменклатуры.ПредставлениеПартии) = Тип("СправочникСсылка.ПартииНоменклатуры") Тогда
				
				ПредставлениеПартии = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеПартии, "Наименование");
				
			Иначе
				
				ПредставлениеПартии = СокрЛП(ПараметрыНоменклатуры.ПредставлениеПартии);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеПартии;
	
КонецФункции

Функция СтрокаПредставленияКодаТНВЭД(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеКодаТНВЭД = "";
	Если ПараметрыНоменклатуры.Свойство("КодТНВЭД") Тогда
		
		Если ТипЗнч(ПараметрыНоменклатуры.КодТНВЭД) = Тип("СправочникСсылка.КлассификаторТНВЭД") Тогда
			
			ПредставлениеКодаТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.КодТНВЭД, "Код");
			
		Иначе
			
			ПредставлениеКодаТНВЭД = СокрЛП(ПараметрыНоменклатуры.КодТНВЭД);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеКодаТНВЭД;
	
КонецФункции

Функция СтрокаПредставленияСерийногоНомера(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеСерийногоНомера = "";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСерийныеНомера") Тогда
		
		Если ПараметрыНоменклатуры.Свойство("ПредставлениеСерийногоНомера") Тогда
			
			Если ТипЗнч(ПараметрыНоменклатуры.ПредставлениеСерийногоНомера) = Тип("СправочникСсылка.СерийныеНомера") Тогда
				
				ПредставлениеСерийногоНомера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыНоменклатуры.ПредставлениеСерийногоНомера, "Наименование");
				
			Иначе
				
				ПредставлениеСерийногоНомера = СокрЛП(ПараметрыНоменклатуры.ПредставлениеСерийногоНомера);
				
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредставлениеСерийногоНомера;
	
КонецФункции

Функция ПредставлениеДатыВДокументах(ЗначениеДаты) Экспорт
	
	Возврат Формат(ЗначениеДаты, "ДЛФ=DD");
	
КонецФункции

Функция ПредставлениеЗаголовкаНДС(СуммаНДС, СуммаВключаетНДС, ЧастичнаяОплата, ЕстьСтавкаНольПроцентов = Ложь) Экспорт
	Перем ЗаголовокИтоговНДС;
	
	ТекстНДС = НСтр("ru ='НДС'");
	Если ЧастичнаяОплата Тогда
		
		ТекстНДС = ТекстНДС + НСтр("ru =' оплаты'");
		
	КонецЕсли;
	
	Если СуммаНДС = 0 
		И НЕ ЕстьСтавкаНольПроцентов Тогда
		
		ЗаголовокИтоговНДС = НСтр("ru ='Без налога (НДС)'");
		
	ИначеЕсли СуммаВключаетНДС Тогда
		
		ЗаголовокИтоговНДС = СтрШаблон(НСтр("ru ='В том числе %1:'"), ТекстНДС);
		
	Иначе
		
		ЗаголовокИтоговНДС = СтрШаблон(НСтр("ru ='Сумма %1:'"), ТекстНДС);
		
	КонецЕсли;
	
	Возврат ЗаголовокИтоговНДС;
	
КонецФункции

Функция ПредставлениеОснованияПечати(ОснованиеПечатиСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОснованиеПечатиСсылка) Тогда
		
		Если ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			
			Возврат ПараметрЭтотДокументЗаказПокупателя();
			
		ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.СчетНаОплату") Тогда
			
			Возврат ПараметрЭтотДокументСчетНаОплату();
			
		Иначе
			
			Возврат "";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ЗаголовокПредставления = "";
		Если Константы.ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати.Получить() Тогда
			
			ЗаголовокПредставления = Нстр("ru = 'Договор: '");
			
		КонецЕсли;
		
		Возврат ЗаголовокПредставления + Строка(ОснованиеПечатиСсылка.Наименование);
		
	ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.СчетНаОплату")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПокупателя")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.РасходнаяНакладная")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ПриемИПередачаВРемонт")
		Тогда
		
		Возврат Строка(ОснованиеПечатиСсылка);
		
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеНомераДатыОснованияПечати(ОснованиеПечатиСсылка) Экспорт
	
	ДанныеОснованияПечати = Новый Структура("Номер, Дата");
	
	Если ЗначениеЗаполнено(ОснованиеПечатиСсылка) Тогда
		
		Если ТипЗнч(ОснованиеПечатиСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ДанныеОснованияПечати.Номер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПечатиСсылка, "НомерДоговора");
			ДанныеОснованияПечати.Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеПечатиСсылка, "ДатаДоговора");
			
		ИначеЕсли ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.СчетНаОплату")
			ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПокупателя")
			ИЛИ ТипЗнч(ОснованиеПечатиСсылка) = Тип("ДокументСсылка.ЗаказПоставщику")
			Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеОснованияПечати, ОснованиеПечатиСсылка, "Номер, Дата");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеОснованияПечати;
	
КонецФункции

Функция ПредставлениеКодаНоменклатуры(ПараметрыНоменклатуры) Экспорт
	
	ПредставлениеКодаНоменклатуры = "";
	ИмяПоля = "";
	
	ВидПредставления = Константы.ПредставлениеКодовВПечатныхФормах.Получить();
	Если ВидПредставления = Перечисления.КодыНоменклатурыВДокументах.Код Тогда
		
		ИмяПоля = "Код";
		
	ИначеЕсли ВидПредставления = Перечисления.КодыНоменклатурыВДокументах.Артикул Тогда
		
		ИмяПоля = "Артикул";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяПоля) Тогда
		
		// обработка не требуется
		
	ИначеЕсли ТипЗнч(ПараметрыНоменклатуры) = Тип("СтрокаТаблицыЗначений")
		ИЛИ ТипЗнч(ПараметрыНоменклатуры) = Тип("СтрокаДереваЗначений")
		ИЛИ ТипЗнч(ПараметрыНоменклатуры) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		Попытка
			ПредставлениеКодаНоменклатуры = ПараметрыНоменклатуры[ИмяПоля];
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(ПараметрыНоменклатуры) = Тип("Структура") Тогда
		
		ПараметрыНоменклатуры.Свойство(ИмяПоля, ПредставлениеКодаНоменклатуры);
		
	КонецЕсли;
	
	Возврат ПредставлениеКодаНоменклатуры;
	
КонецФункции

Функция ПредставлениеСерийногоНомераПоКлючу(ТаблицаСерийныхНомеров, КлючСвязи) Экспорт
	
	ПредставлениеСерийногоНомера = "";
	
	Если ТипЗнч(ТаблицаСерийныхНомеров) = Тип("ТаблицаЗначений")
		И ТаблицаСерийныхНомеров.Количество() > 0 Тогда
		
		МассивНайденныхСтрок = ТаблицаСерийныхНомеров.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
		Для каждого СтрокаМассива Из МассивНайденныхСтрок Цикл
			
			ПредставлениеСерийногоНомера = ПредставлениеСерийногоНомера + ?(ПустаяСтрока(ПредставлениеСерийногоНомера), "", ", ") + СокрЛП(СтрокаМассива.СерийныйНомер);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ПредставлениеСерийногоНомера;
	
КонецФункции

Функция ПредставлениеСкидки(СтрокаТабличнойЧасти, СтруктураИтогов) Экспорт
	
	СкидкаСумма = 0;
	СкидкаПроцент = 0;
	
	ТочностьОкругленияСкидки = 2; // Знаков после запятой
	
	Если СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 Тогда
		
		СкидкаСумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		СкидкаПроцент = НСтр("ru ='100%'");
		
	ИначеЕсли СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 0 
		И СтрокаТабличнойЧасти.СуммаАвтоматическойСкидки = 0 Тогда
		
		СкидкаСумма = 0;
		СкидкаПроцент = НСтр("ru ='-'");
		
	Иначе
		
		СкидкаСумма = (СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена) - СтрокаТабличнойЧасти.Сумма;
		
		Если СкидкаСумма > 0 Тогда
			
			Знаменатель = (СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена);
			Если Знаменатель = 0 Тогда
				
				СкидкаПроцент = 0;
				
			Иначе
				
				СкидкаПроцент = (СтрокаТабличнойЧасти.Сумма * 100) / Знаменатель;
				СкидкаПроцент = Строка(100 - Окр(СкидкаПроцент, ТочностьОкругленияСкидки)) + "%";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураИтогов.Свойство("СкидкаПоСтроке") Тогда
		
		СтруктураИтогов.СкидкаПоСтроке = СкидкаСумма;
		
	КонецЕсли;
	
	Возврат ?(СтруктураИтогов.ПредставлениеСкидки = Перечисления.СпособОтображенияСкидок.Процент, СкидкаПроцент, Формат(СкидкаСумма, "ЧДЦ=2; ЧГ="));
	
КонецФункции

Функция ПредставлениеКомплектаДокументов() Экспорт
	
	Возврат НСтр("ru = 'Настраиваемый комплект документов'");
	
КонецФункции

Функция ПараметрЭтотДокументЗаказПокупателя() Экспорт
	
	Возврат НСтр("ru ='Этот документ (Заказ покупателя)'");
	
КонецФункции

Функция ПараметрЭтотДокументСчетНаОплату() Экспорт
	
	Возврат НСтр("ru ='Этот документ (Счет на оплату)'");
	
КонецФункции

// Представление номенклатуры для печати
//
// Параметры:
//  ПредставлениеНоменклатуры - Строка, СправочникСсылка.Номенклатура - .
//  ПредставлениеХарактеристики - Строка, СправочникСсылка.ХарактеристикиНоменклатуры - .
//  ПредставлениеСерийногоНомера - Строка, СправочникСсылка.ПартииНоменклатуры - .
//  ПредставлениеПартии - Строка, СправочникСсылка.ПартииНоменклатуры - .
//  ПредставлениеКодаТНВЭД - Строка, СправочникСсылка.КлассификаторТНВЭД - .
//  НеобходимоВыделитьКакСоставНабора - Булево
// 
// Возвращаемое значение:
//  Строка - представление номенклатуры в печатной форме.
Функция ПредставлениеНоменклатурыДляПечати(ПредставлениеНоменклатуры, ПредставлениеХарактеристики = "",
	ПредставлениеСерийногоНомера = "", ПредставлениеПартии = "", ПредставлениеКодаТНВЭД = "",
	НеобходимоВыделитьКакСоставНабора = Ложь) Экспорт
	
	ПараметрыСтроки = Новый Структура;
	ПараметрыСтроки.Вставить("ПредставлениеНоменклатуры", ПредставлениеНоменклатуры);
	ПараметрыСтроки.Вставить("ПредставлениеХарактеристики", ПредставлениеХарактеристики);
	ПараметрыСтроки.Вставить("ПредставлениеСерийногоНомера", ПредставлениеСерийногоНомера);
	ПараметрыСтроки.Вставить("ПредставлениеПартии", ПредставлениеПартии);
	ПараметрыСтроки.Вставить("ПредставлениеКодаТНВЭД", ПредставлениеКодаТНВЭД);
	
	// Шаблон представления:
	// [ПредставлениеНоменклатуры] ([ПредставлениеХарактеристики], [ПредставлениеСерийногоНомера]), [ПредставлениеПартии],
	// {код ТН ВЭД [ПредставлениеКодаТНВЭД]};
	
	Если ПустаяСтрока(ПредставлениеХарактеристики)
		И ПустаяСтрока(ПредставлениеСерийногоНомера) Тогда
		
		ШаблонПредставления = "[ПредставлениеНоменклатуры]";
		
	ИначеЕсли НЕ ПустаяСтрока(ПредставлениеХарактеристики)
		И НЕ ПустаяСтрока(ПредставлениеСерийногоНомера) Тогда
		
		ШаблонПредставления = "[ПредставлениеНоменклатуры] ([ПредставлениеХарактеристики], [ПредставлениеСерийногоНомера])";
		
	ИначеЕсли ПустаяСтрока(ПредставлениеСерийногоНомера) Тогда 
		
		ШаблонПредставления = "[ПредставлениеНоменклатуры] ([ПредставлениеХарактеристики])";
		
	Иначе
		
		ШаблонПредставления = "[ПредставлениеНоменклатуры] ([ПредставлениеСерийногоНомера])";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПредставлениеПартии) Тогда
		
		ШаблонПредставления = ШаблонПредставления + ", [ПредставлениеПартии]";
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПредставлениеКодаТНВЭД) Тогда
		
		ШаблонПредставления = ШаблонПредставления + НСтр("ru=', код ТН ВЭД '") + " [ПредставлениеКодаТНВЭД]";
		
	КонецЕсли;
	
	Если НеобходимоВыделитьКакСоставНабора Тогда
		
		ШаблонПредставления = Нстр("ru ='    • '") + ШаблонПредставления;
		
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонПредставления, ПараметрыСтроки);
	
КонецФункции

Функция ПолучитьИсходныйДокументКорректировки(ДокументСсылка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		Возврат ПолучитьИсходныйДокументКорректировки(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ДокументОснование"));
		
	Иначе
		
		Возврат ДокументСсылка;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбластьБезопасно(Макет, ИмяОбласти, ПредставлениеОбласти, Ошибки) Экспорт
	Перем ОбластьМакета;
	
	Если Макет.Области.Найти(ИмяОбласти) = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Не обнаружена область макета %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеОбласти), ИмяОбласти, ПредставлениеОбласти));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
		
	Иначе
		
		ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
		
	КонецЕсли;
	
	Возврат ОбластьМакета;
	
КонецФункции

Процедура УстановитьПараметрБезопасно(Область, ИмяПараметра, Значение) Экспорт
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить(ИмяПараметра, Значение);
	Область.Параметры.Заполнить(ЗначенияПараметров);
	
КонецПроцедуры

Функция ПолучитьПлашкуПодписиБезопастно(ОбластьМакета, ИмяПлашки, ПредставлениеПодписи, Ошибки) ЭКспорт
	
	ПлашкаПодписи = ОбластьМакета.Области.Найти(ИмяПлашки);
	Если ПлашкаПодписи = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru ='ВНИМАНИЕ! Нет места для подписи %1. Возможно используется пользовательский макет.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ?(ПустаяСтрока(ПредставлениеПодписи), ИмяПлашки, ПредставлениеПодписи));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки, , ТекстСообщения, Неопределено);
		
	Иначе
		
		ПлашкаПодписи.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
		
	КонецЕсли;
	
	Возврат ПлашкаПодписи;
	
КонецФункции

Функция ПолучитьНомерНаПечатьСУчетомДатыДокумента(ДатаДокумента, НомерДокумента, Префикс) Экспорт
	
	Если ДатаДокумента < Дата('20110101') Тогда
		
		Возврат УправлениеНебольшойФирмойСервер.ПолучитьНомерНаПечать(НомерДокумента, Префикс);
		
	Иначе
		
		БезПрефиксаИнформационнойБазы = Константы.ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы.Получить();
		БезПрефиксаПользователя = Константы.ПредставлениеНомераДокументаБезПрефиксаПользователя.Получить();
		
		Возврат ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерДокумента, БезПрефиксаИнформационнойБазы, БезПрефиксаПользователя);
		
	КонецЕсли;
	
КонецФункции

Процедура КорректировкаРазмещениеПодчиненнойГруппыКомандПечати(Форма, ЭлементФормы_ПодменюПечать, ЭлементФормы_ГруппаКомандУНФ) Экспорт
	
	ИмяГруппыФормыПоУмолчанию = "ПодменюПечатьОбычное";
	
	ГруппаФормыСКоммандамиПечати = Форма.Элементы.Найти(ИмяГруппыФормыПоУмолчанию);
	Если ГруппаФормыСКоммандамиПечати = Неопределено Тогда
		
		ГруппаФормыСКоммандамиПечати = ЭлементФормы_ПодменюПечать;
		
	КонецЕсли;
	
	Форма.Элементы.Переместить(ЭлементФормы_ГруппаКомандУНФ, ГруппаФормыСКоммандамиПечати);
	
КонецПроцедуры

Функция ШаблонТекстаПредупрежденияПравкиМакета() Экспорт
	
	Возврат НСтр("ru ='ВНИМАНИЕ! Возможно используется пользовательский макет. Штатный механизм печати счетов может работать некоректно.'");
	
КонецФункции

Функция ИтоговаяСтрока(КоличествоПозиций, СуммаДокумента, ВалютаДокумента) Экспорт
	
	Возврат СтрШаблон(
		НСтр("ru='Всего наименований %1, на сумму %2'"),
		КоличествоПозиций,
		УправлениеНебольшойФирмойСервер.ФорматСумм(СуммаДокумента, ВалютаДокумента)
	);
	
КонецФункции

Функция ДокументФормируетсяСогласноФЗ56(Дата) Экспорт
	
	// Используется при формирование
	// - СФ
	// - УПД
	// - Корректировочный СФ
	
	НачалоПримененияФЗ56 = '20170701';
	ПрименяетсяПостановление981 = (Дата >= Константы.НачалоИспользованияСФ981.Получить());
	
	Возврат (Дата >= НачалоПримененияФЗ56) И НЕ ПрименяетсяПостановление981;
	
КонецФункции

// Возвращает версию постановления Правительства РФ от 26.12.2011 г. № 1137
//
// Параметры
//  Период  -  тип дата, в данном параметре передается
//             дата на которую необходимо определить версию постановления
// Возвращаемое значение:
//  Число   -  версия постановления,
//              "1137" (БП = 1) - исходная версия постановления Правительства РФ от 26.12.2011 г. № 1137
//              "952"  (БП = 2) - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 952
//              "735"  (БП = 3) - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 735
//              "981"  (БП = 4) - постановление Правительства РФ от 26.12.2011 г. № 1137 в редакции постановления № 981
//
Функция ВерсияПостановленияНДС1137(Период) Экспорт
	
	Если Период >= '20171001' Тогда			// Постановление № 981 вступает в силу с 1 октября 2017 года.
		Возврат "981"; 						//  в БП = 4
	ИначеЕсли Период >= '20141001' Тогда	// Постановление № 735 вступает в силу с 1 октября 2014 года.
		Возврат "735";						//  в БП = 3
	ИначеЕсли Период >= '20131106' Тогда	// Постановление № 952 вступает в силу с 6 ноября 2013 года.
		Возврат "952";						//  в БП = 2
	Иначе									// Исходная версия Постановления Правительства РФ от 26.12.2011 г. № 1137.
		Возврат "1137";						//  в БП = 1
	КонецЕсли;
	
КонецФункции // ВерсияПостановленияНДС1137()

Функция ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, ВыводимыеОбласти, Ошибки) Экспорт
	
	Попытка
		
		Возврат ТабличныйДокумент.ПроверитьВывод(ВыводимыеОбласти);
		
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке();
		ТекстОшибки = НСТр("ru = 'Невозможно получить информацию о текущем принтере (возможно, в системе не установлено ни одного принтера)'");
		
		ЗаписьЖурналаРегистрации(ТекстОшибки, УровеньЖурналаРегистрации.Ошибка , , , ОписаниеОшибки.Описание);
		
	КонецПопытки;

КонецФункции

Процедура ОбработкаЗаполненияОснованияПечати(ЭтотОбъект) Экспорт
	
	СоответствиеТиповКонстант = Новый Соответствие;
	СоответствиеТиповКонстант.Вставить(Тип("ДокументСсылка.ЗаказПокупателя"), "ОснованиеПечатиЗаказПокупателя");
	СоответствиеТиповКонстант.Вставить(Тип("ДокументСсылка.СчетНаОплату"), "ОснованиеПечатиСчетНаОплату");
	
	ИмяКонстанты = СоответствиеТиповКонстант.Получить(ТипЗнч(ЭтотОбъект.Ссылка));
	
	ЗначениеКонстанты = Константы[ИмяКонстанты].Получить();
	Если ЗначениеКонстанты = Перечисления.ОснованиеПечатиСпособНачальногоЗаполнение.ТекущийДокумент Тогда
		
		Если ИмяКонстанты = "ОснованиеПечатиЗаказПокупателя" Тогда
			
			ЭтотОбъект.ОснованиеПечатиСсылка = Документы.ЗаказПокупателя.ПустаяСсылка();
			ЭтотОбъект.ОснованиеПечати = ПараметрЭтотДокументЗаказПокупателя();
			
		ИначеЕсли ИмяКонстанты = "ОснованиеПечатиСчетНаОплату" Тогда
			
			ЭтотОбъект.ОснованиеПечатиСсылка = Документы.СчетНаОплату.ПустаяСсылка();
			ЭтотОбъект.ОснованиеПечати = ПараметрЭтотДокументСчетНаОплату();
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеКонстанты = Перечисления.ОснованиеПечатиСпособНачальногоЗаполнение.ДоговорКонтрагента Тогда
		
		Если ЗначениеЗаполнено(ЭтотОбъект.Договор) Тогда
			
			ЭтотОбъект.ОснованиеПечатиСсылка = ЭтотОбъект.Договор;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ВалютныеСуммы

Функция ДобавитьСуммовыеПоля(ПараметрыЗапроса, ТабличнаяЧастьДокумента, ЗначениеПеречисленияТабличныеЧастиДокументов)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыЗапроса.Ссылка);
	Запрос.УстановитьПараметр("КурсДокумента", ПараметрыЗапроса.КурсДокумента);
	Запрос.УстановитьПараметр("КратностьДокумента", ПараметрыЗапроса.КратностьДокумента);
	Запрос.УстановитьПараметр("ТабличнаяЧастьДокумента", ТабличнаяЧастьДокумента);
	Запрос.УстановитьПараметр("ЗначениеПеречисленияТабличныеЧастиДокументов", ЗначениеПеречисленияТабличныеЧастиДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧастьДокумента.НомерСтроки КАК НомерСтроки
	|	,ТабличнаяЧастьДокумента.ПредставлениеНоменклатуры
	|	,ТабличнаяЧастьДокумента.Код
	|	,ТабличнаяЧастьДокумента.Артикул
	|	,ТабличнаяЧастьДокумента.ТипНоменклатуры
	|	,ТабличнаяЧастьДокумента.Склад
	|	,ТабличнаяЧастьДокумента.Ячейка
	|	,ТабличнаяЧастьДокумента.Характеристика
	|	,ТабличнаяЧастьДокумента.Партия
	|	,ТабличнаяЧастьДокумента.ЕдиницаИзмерения
	|	,ТабличнаяЧастьДокумента.ЕдиницаИзмеренияПоОКЕИ_Наименование
	|	,ТабличнаяЧастьДокумента.ЕдиницаИзмеренияПоОКЕИ_Код
	|	,ТабличнаяЧастьДокумента.Цена
	|	,ТабличнаяЧастьДокумента.Сумма
	|	,ТабличнаяЧастьДокумента.СтавкаНДС
	|	,ТабличнаяЧастьДокумента.СуммаНДС
	|	,ТабличнаяЧастьДокумента.Всего
	|	,ТабличнаяЧастьДокумента.Количество
	|	,ТабличнаяЧастьДокумента.КоличествоПоКоэффициенту
	|	,ТабличнаяЧастьДокумента.Содержание
	|	,ТабличнаяЧастьДокумента.ПроцентСкидкиНаценки
	|	,ТабличнаяЧастьДокумента.ЕстьСкидка
	|	,ТабличнаяЧастьДокумента.СуммаАвтоматическойСкидки
	|	,ТабличнаяЧастьДокумента.КлючСвязи
	|	,ТабличнаяЧастьДокумента.Заказ
	|	,ТабличнаяЧастьДокумента.ЭтоРазделитель
	|ПОМЕСТИТЬ ТабличнаяЧастьДокумента
	|ИЗ &ТабличнаяЧастьДокумента КАК ТабличнаяЧастьДокумента
	|Индексировать ПО НомерСтроки
	|
	|;Выбрать
	|	СтрокиДокумента.НомерСтроки КАК НомерСтроки
	|	,СтрокиДокумента.ПредставлениеНоменклатуры
	|	,СтрокиДокумента.Код
	|	,СтрокиДокумента.Артикул
	|	,СтрокиДокумента.ТипНоменклатуры
	|	,СтрокиДокумента.Склад
	|	,СтрокиДокумента.Ячейка
	|	,СтрокиДокумента.Характеристика
	|	,СтрокиДокумента.Партия
	|	,СтрокиДокумента.ЕдиницаИзмерения
	|	,СтрокиДокумента.ЕдиницаИзмеренияПоОКЕИ_Наименование
	|	,СтрокиДокумента.ЕдиницаИзмеренияПоОКЕИ_Код
	|	,СтрокиДокумента.Цена
	|	,СтрокиДокумента.Сумма
	|	,СтрокиДокумента.СтавкаНДС
	|	,СтрокиДокумента.СуммаНДС
	|	,ЕстьNULL(СуммыДокументовРегламентированныйУчет.НДС, СтрокиДокумента.СуммаНДС * &КурсДокумента / &КратностьДокумента) КАК СуммаНДСВНациональнойВалюте
	|	,СтрокиДокумента.Всего
	|	,ЕстьNULL(СуммыДокументовРегламентированныйУчет.Всего, СтрокиДокумента.Всего * &КурсДокумента / &КратностьДокумента) КАК ВсегоВНациональнойВалюте
	|	,СтрокиДокумента.Количество
	|	,СтрокиДокумента.КоличествоПоКоэффициенту
	|	,СтрокиДокумента.Содержание
	|	,СтрокиДокумента.ПроцентСкидкиНаценки
	|	,СтрокиДокумента.ЕстьСкидка
	|	,СтрокиДокумента.СуммаАвтоматическойСкидки
	|	,СтрокиДокумента.КлючСвязи
	|	,СтрокиДокумента.Заказ
	|	,СтрокиДокумента.ЭтоРазделитель
	|ИЗ ТабличнаяЧастьДокумента КАК СтрокиДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовРегламентированныйУчет КАК СуммыДокументовРегламентированныйУчет
	|	ПО СуммыДокументовРегламентированныйУчет.Регистратор = &Ссылка
	|		И СуммыДокументовРегламентированныйУчет.ТабличнаяЧастьДокумента = &ЗначениеПеречисленияТабличныеЧастиДокументов
	|		И СтрокиДокумента.НомерСтроки = СуммыДокументовРегламентированныйУчет.НомерСтрокиДокумента
	|УПОРЯДОЧИТЬ ПО НомерСтроки";
	
	// Наборы
	Если ТабличнаяЧастьДокумента.Колонки.Найти("НоменклатураНабора")<>Неопределено Тогда
		Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"ПОМЕСТИТЬ ТабличнаяЧастьДокумента", 
		"	,ТабличнаяЧастьДокумента.НоменклатураНабора
		|	,ТабличнаяЧастьДокумента.ХарактеристикаНабора
		|	,ТабличнаяЧастьДокумента.ЭтоНабор
		|	,ТабличнаяЧастьДокумента.НеобходимоВыделитьКакСоставНабора
		|ПОМЕСТИТЬ ТабличнаяЧастьДокумента");
		Запрос.Текст = СтрЗаменить(
		Запрос.Текст,
		"ИЗ ТабличнаяЧастьДокумента КАК СтрокиДокумента", 
		"	,СтрокиДокумента.НоменклатураНабора КАК НоменклатураНабора
		|	,СтрокиДокумента.ХарактеристикаНабора КАК ХарактеристикаНабора
		|	,СтрокиДокумента.ЭтоНабор КАК ЭтоНабор
		|	,СтрокиДокумента.НеобходимоВыделитьКакСоставНабора КАК НеобходимоВыделитьКакСоставНабора
		|ИЗ ТабличнаяЧастьДокумента КАК СтрокиДокумента");
	КонецЕсли; 
	// Конец Наборы
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДобавитьСуммовыеПоляЭквивалентовВНациональнойВалюте(ДанныеДокументов, ИспользуемыеТЧ) Экспорт
	
	НеобходимПересчет = ПолучитьФункциональнуюОпцию("УчетВалютныхОпераций");
	НациональнаяВалюта = Константы.НациональнаяВалюта.Получить();
	
	Для каждого ДанныеОбъекта Из ДанныеДокументов Цикл
		
		НеобходимПересчет = НеобходимПересчет И (НациональнаяВалюта <> ДанныеОбъекта.ВалютаДокумента);
		
		Для каждого ОписаниеТЧ Из ИспользуемыеТЧ Цикл
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("Ссылка", ДанныеОбъекта.Ссылка);
			ПараметрыЗапроса.Вставить("КурсДокумента", ?(НеобходимПересчет, ДанныеОбъекта.Курс, 1));
			ПараметрыЗапроса.Вставить("КратностьДокумента", ?(НеобходимПересчет, ДанныеОбъекта.Кратность, 1));
			
			ДанныеОбъекта[ОписаниеТЧ.Ключ] = ДобавитьСуммовыеПоля(ПараметрыЗапроса, ДанныеОбъекта[ОписаниеТЧ.Ключ], ОписаниеТЧ.Значение);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти