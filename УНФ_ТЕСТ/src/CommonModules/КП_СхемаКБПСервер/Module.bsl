// Общий модуль (выполняется на стороне сервера) модуля "Конструктор процессов для 1С:УНФ"
// Разработчик Компания "Аналитика. Проекты и решения" +7 495 005-1653, https://kp-unf.ru

#Область СлужебныеПроцедурыИФункции

// Функция возвращает тип точки схемы 
// Параметры:
//		ЭлементСхемы -  элемент схемы процесса
// Возвращаемое значение: Значение перечисления "Виды точек бизнес-процесса"
Функция ПолучитьТипТочкиСхемы(ЭлементСхемы) Экспорт
	
	Если ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыДействие") Тогда
		Возврат Перечисления.КП_ВидыТочекБизнесПроцесса.Действие;
		
	ИначеЕсли ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыСтарт") Тогда
		Возврат Перечисления.КП_ВидыТочекБизнесПроцесса.Старт;
		
	ИначеЕсли ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыЗавершение") Тогда
		Возврат Перечисления.КП_ВидыТочекБизнесПроцесса.Завершение;
		
	ИначеЕсли ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыУсловие") Тогда
		Возврат Перечисления.КП_ВидыТочекБизнесПроцесса.Условие;
		
	ИначеЕсли ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыВложенныйБизнесПроцесс") Тогда
		Возврат Перечисления.КП_ВидыТочекБизнесПроцесса.Подпроцесс;
		
	ИначеЕсли ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыОбработка") Тогда
		Возврат Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка;
		
	ИначеЕсли ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыСлияние") Тогда
		Возврат Перечисления.КП_ВидыТочекБизнесПроцесса.Слияние;
		
	ИначеЕсли ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыРазделение") Тогда
		Возврат Перечисления.КП_ВидыТочекБизнесПроцесса.Разделение;
		
	ИначеЕсли ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыДекорация") Тогда
		Возврат Перечисления.КП_ВидыТочекБизнесПроцесса.Декорация;
		
	ИначеЕсли ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
		Возврат Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта;

	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции

// Функция определяет являетяся ли тип настраиваемым
// Параметры:
//		ЭлементСхемы -  элемент схемы процесса
// Возвращаемое значение: Истина или Ложь
Функция ЭтоНастраиваемыйВидЭлементаСхемы(ЭлементСхемы) Экспорт
	
	ТипЭлемента=ТипЗнч(ЭлементСхемы);
	Если ТипЭлемента=Тип("ЭлементГрафическойСхемыСоединительнаяЛиния")
		ИЛИ ТипЭлемента=Тип("ЭлементГрафическойСхемыДекорация") 
		ИЛИ ТипЭлемента=Тип("ЭлементГрафическойСхемыДекоративнаяЛиния")
	Тогда
		Возврат Ложь;
		
	Иначе
		Возврат Истина;

	КонецЕсли;
	
КонецФункции

// Функция получает точку процесса по имени 
// Параметры:
//		ИмяТочки - имя точки 
//		ВладелецТочки - владелец точки (вид или экземпляр)
// Возвращаемое значение: Ссылка на маршрутную точку
Функция ПолучитьТочкуКБППоИмени(ИмяТочки, ВладелецТочки) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ИмяВСхеме = &ИмяВСхеме
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки");
						 
	Запрос.УстановитьПараметр("ИмяВСхеме", ИмяТочки);
	Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочки);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		ТочкаБП=Выборка.Ссылка;
	Иначе
		ТочкаБП=Неопределено;
	КонецЕсли;
	
	Возврат ТочкаБП;
	
КонецФункции

// Функция определяет, требуется ли предварительная запись вида процесса 
// Параметры:
//		ТочкаБП - маршрутная точка 
// Возвращаемое значение: Истина или Ложь
Функция ТребуетсяПредварительнаяЗаписьВидаПроцесса(ТочкаБП) Экспорт
	Если ТочкаБП=Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипТочки=ТочкаБП.ТипТочки;
	
	Если ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Действие
		ИЛИ ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Подпроцесс 
	Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает структуру маршрутной точки
// Параметры:
//		СсылкаНаТочку - ссылка на маршрутную точку  
// Возвращаемое значение: Структура данных
Функция ПолучитьСтруктуруТочки(СсылкаНаТочку) Экспорт
	
	СтруктураТочкиИмяТочки=Новый Структура;
	
	Если СсылкаНаТочку=Неопределено Тогда
		Возврат СтруктураТочкиИмяТочки;
		
	КонецЕсли;
	
	ОбъектСсылка=СсылкаНаТочку.ВладелецТочки;
	СтруктураТочкиИмяТочки.Вставить("ИмяВСхеме", СсылкаНаТочку.ИмяВСхеме);
	СтруктураТочкиИмяТочки.Вставить("Наименование", СсылкаНаТочку.Наименование);
	СтруктураТочкиИмяТочки.Вставить("ТипТочки", СсылкаНаТочку.ТипТочки);
	СтруктураТочкиИмяТочки.Вставить("ИсточникИсполнителей", СсылкаНаТочку.ИсточникИсполнителей);
	
	ЭтоГрупповаяТочка=Ложь;
	Если СсылкаНаТочку.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Действие Тогда

		//определим количество исполнителей и название исполнителя
		Если СсылкаНаТочку.ИсточникИсполнителей=0 Тогда
			//основной список бизнес-процесса
			
			ИспользуемыйСписок=ОбъектСсылка.ОсновныеИсполнители;
			КоличествоИсполнителейВТочке=ИспользуемыйСписок.Количество();
			НаименованиеИсполнителей=ПолучитьНаименованиеОсновныхИсполнителей(ОбъектСсылка);

			Если КоличествоИсполнителейВТочке>0 Тогда
				ПервыйИсполнитель=ИспользуемыйСписок[0].ТочкаАдресации;
			Иначе	
				ПервыйИсполнитель=Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
			
			ЭтоГрупповаяТочка=(КоличествоИсполнителейВТочке>1);
			
		ИначеЕсли СсылкаНаТочку.ИсточникИсполнителей=1 Тогда
			//фиксированный список исполнителей, заданный в точке
			
			ИспользуемыйСписок=СсылкаНаТочку.ИсполнителиТочки;
			КоличествоИсполнителейВТочке=ИспользуемыйСписок.Количество();
			НаименованиеИсполнителей="";

			Для Каждого ЭлементСписка Из ИспользуемыйСписок Цикл
				НаименованиеИсполнителей=НаименованиеИсполнителей+?(НаименованиеИсполнителей="", "", ", ")+СокрЛП(ЭлементСписка.ТочкаАдресации);
			КонецЦикла;
			
			Если ПустаяСтрока(НаименованиеИсполнителей) Тогда
				НаименованиеИсполнителей="<Нет>";
			КонецЕсли;
			
			Если КоличествоИсполнителейВТочке>0 Тогда
				ПервыйИсполнитель=ИспользуемыйСписок[0].ТочкаАдресации;
			Иначе	
				ПервыйИсполнитель=Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
			
			ЭтоГрупповаяТочка=(КоличествоИсполнителейВТочке>1);
			
		ИначеЕсли СсылкаНаТочку.ИсточникИсполнителей=2 Тогда
			//автор
			КоличествоИсполнителейВТочке=1;
			Если КП_ОбщееСерверПС.ЭтоЭкземплярБизнесПроцесса(СсылкаНаТочку.ВладелецТочки) Тогда
				НаименованиеИсполнителей="Инициатор "+СсылкаНаТочку.ВладелецТочки.Автор;
				ПервыйИсполнитель=СсылкаНаТочку.ВладелецТочки.Автор;
			Иначе
				НаименованиеИсполнителей="Инициатор";
				ПервыйИсполнитель=Справочники.Пользователи.ПустаяСсылка();
			КонецЕсли;
			
		ИначеЕсли СсылкаНаТочку.ИсточникИсполнителей=3 Тогда
			//контролер
			КоличествоИсполнителейВТочке=1;
			ПервыйИсполнитель=СсылкаНаТочку.ВладелецТочки.Контролер;
			НаименованиеИсполнителей="Контролер"+?(ПервыйИсполнитель.Пустая(), "", " "+СсылкаНаТочку.ВладелецТочки.Контролер);
			
		ИначеЕсли СсылкаНаТочку.ИсточникИсполнителей=4 Тогда
			//используется исполнитель из реквизита процесса
			РеквизитСИсполнителем=СсылкаНаТочку.РеквизитСИсполнителем;
			Если ЗначениеЗаполнено(РеквизитСИсполнителем) Тогда
				ТипРеквизита=РеквизитСИсполнителем.ТипРеквизита;
				Если ЗначениеЗаполнено(ТипРеквизита) И ТипРеквизита.ПолноеНаименование="Справочник.КП_РабочиеГруппы" Тогда
					ЭтоГрупповаяТочка=Истина;
				КонецЕсли;
			КонецЕсли;
			
			КоличествоИсполнителейВТочке=1;
			НаименованиеИсполнителей=СсылкаНаТочку.РеквизитСИсполнителем;
			ПервыйИсполнитель=Справочники.КП_ДополнительныеРеквизиты.ПустаяСсылка();
			
		ИначеЕсли СсылкаНаТочку.ИсточникИсполнителей=5 Тогда
			//рабочая группа
			РабочаяГруппаТочки=СсылкаНаТочку.РабочаяГруппа;
			Если ЗначениеЗаполнено(РабочаяГруппаТочки) Тогда
				КоличествоИсполнителейВТочке=РабочаяГруппаТочки.Сотрудники.Количество();
				НаименованиеИсполнителей=СокрЛП(РабочаяГруппаТочки);
				ПервыйИсполнитель=Справочники.КП_ДополнительныеРеквизиты.ПустаяСсылка();
				ЭтоГрупповаяТочка=Истина;
			Иначе
				КоличествоИсполнителейВТочке=1;
				НаименованиеИсполнителей="<исполнителей нет>";
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		КоличествоИсполнителейВТочке=0;
	КонецЕсли;
	
	СтруктураТочкиИмяТочки.Вставить("КоличествоИсполнителейВТочке", КоличествоИсполнителейВТочке);
	СтруктураТочкиИмяТочки.Вставить("НаименованиеИсполнителей", НаименованиеИсполнителей);	
	СтруктураТочкиИмяТочки.Вставить("ПервыйИсполнитель", ПервыйИсполнитель);	
	СтруктураТочкиИмяТочки.Вставить("ГрупповаяТочка", ЭтоГрупповаяТочка);
	СтруктураТочкиИмяТочки.Вставить("СсылкаНаТочку", СсылкаНаТочку);
	
	Возврат СтруктураТочкиИмяТочки;
	
КонецФункции

// Функция производит копирование маршрутной точки в экземпляр процесса
// Параметры:
//		ИсточникТочек -  ссылка на источник точек
//		ПриемникТочек - ссылка на приемник точек
// Возвращаемое значение: Истина или Ложь
Функция СкопироватьТочкиВидаВЭкземплярБП(ИсточникТочек, ПриемникТочек) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки");
						
	Запрос.УстановитьПараметр("ВладелецТочки", ИсточникТочек);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	//создадим таблицу соответствий, она потребуется для переназначения ссылок между точек в экземпляре
	ТаблицаСоответствияТочекВидаИЭкземпляра=Новый ТаблицаЗначений; 
	ТаблицаСоответствияТочекВидаИЭкземпляра.Колонки.Добавить("ТочкаВида");
	ТаблицаСоответствияТочекВидаИЭкземпляра.Колонки.Добавить("ТочкаЭкземпляра");
	
	Пока Выборка.Следующий() Цикл
		ТочкаИсточник=Выборка.Ссылка;
		
		НоваяТочка=ТочкаИсточник.Скопировать();
		
		НоваяТочка.ВладелецТочки=ПриемникТочек;
        НоваяТочка.ТочкаОснование=ТочкаИсточник.Ссылка;
		
		Попытка
			НоваяТочка.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		НоваяСтрока=ТаблицаСоответствияТочекВидаИЭкземпляра.Добавить();
		НоваяСтрока.ТочкаВида=ТочкаИсточник;
		НоваяСтрока.ТочкаЭкземпляра=НоваяТочка.Ссылка;
		
	КонецЦикла;
	
	//теперь обновим свази между точками (в точках ссылки на точки вида, а нам нужна на точки экземпляра)
	//будем использовать точку основание
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки"); 
						
	Запрос.УстановитьПараметр("ВладелецТочки", ПриемникТочек);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		
		ТочкаЭкземпляра=Выборка.Ссылка;
		
		//найдем точку экзепляра через реквизит ТочкаОснование
		УсловиеТочкаКонтроля=ТочкаЭкземпляра.УсловиеТочкаКонтроля;
		ДействиеКонтрольТочки=ТочкаЭкземпляра.ДействиеКонтрольТочки;
		
		//проверим, требуется ли восстанавливать связи
		Если НЕ ЗначениеЗаполнено(УсловиеТочкаКонтроля) 
			 И НЕ ЗначениеЗаполнено(ДействиеКонтрольТочки) 
		Тогда
			//связей между точками не было
			Продолжить;
			
		КонецЕсли;
		
		ТочкаЭкземпляраОбъект=ТочкаЭкземпляра.ПолучитьОбъект();
		
		//переназначим точку контроля
		УсловиеТочкаКонтроляВида=ТочкаЭкземпляраОбъект.УсловиеТочкаКонтроля;
		
		Если ЗначениеЗаполнено(УсловиеТочкаКонтроляВида) Тогда
			//найдем в таблице сооответствие
			НайденноеСоответствие=ТаблицаСоответствияТочекВидаИЭкземпляра.Найти(УсловиеТочкаКонтроляВида, "ТочкаВида");
			Если НайденноеСоответствие=Неопределено Тогда
				//если вид процесса меняли в форме, то могли остаться старые точки которые не входят в таблицу
				Продолжить;
				
			КонецЕсли;
			
			УсловиеТочкаКонтроляЭкземпляра=НайденноеСоответствие.ТочкаЭкземпляра;
			ТочкаЭкземпляраОбъект.УсловиеТочкаКонтроля=УсловиеТочкаКонтроляЭкземпляра;
			
		КонецЕсли;
		
		//переназначим точку условия после контроля
		ДействиеКонтрольТочкиВида=ТочкаЭкземпляраОбъект.ДействиеКонтрольТочки;
		
		Если ЗначениеЗаполнено(ДействиеКонтрольТочкиВида) Тогда
			//найдем в таблице сооответствие
			НайденноеСоответствие=ТаблицаСоответствияТочекВидаИЭкземпляра.Найти(ДействиеКонтрольТочкиВида, "ТочкаВида");
			Если НайденноеСоответствие=Неопределено Тогда
				//если вид процесса меняли в форме, то могли остаться старые точки которые не входят в таблицу
				Продолжить;
				
			КонецЕсли;
			
			ДействиеКонтрольТочкиЭкземпляра=НайденноеСоответствие.ТочкаЭкземпляра;
			ТочкаЭкземпляраОбъект.ДействиеКонтрольТочки=ДействиеКонтрольТочкиЭкземпляра;
			
		КонецЕсли;		
		
		Попытка
			ТочкаЭкземпляраОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает список точек процесса 
// Параметры:
//		ВладелецТочек - владелец точки (вид или экземпляр)
// Возвращаемое значение: Список значений
Функция ПолучитьСписокТочекПроцесса(ВладелецТочек) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки");
						
	Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочек);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокТочек=Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		Точка=Выборка.Ссылка;
		СписокТочек.Добавить(Точка);
	КонецЦикла;
	
	
	Возврат СписокТочек;
	
КонецФункции

// Функция создает точку процесса по элементу схемы 
// Параметры:
//		ЭлементСхемы -  элемент схемы процесса
//		ВладелецТочки - владелец точки (вид или экземпляр)
// Возвращаемое значение: Ссылка на новую маршрутную точку
Функция СоздатьТочкуКБППоЭлементу(ЭлементСхемы, ВладелецТочки) Экспорт
	
	Если НЕ КП_СхемаКБПСервер.ЭтоНастраиваемыйВидЭлементаСхемы(ЭлементСхемы) Тогда
		//для данных типов элементы не создаем
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИмяТочки=ЭлементСхемы.Имя;
	НаименованиеТочки=ЭлементСхемы.Наименование;
	
	Если ПустаяСтрока(НаименованиеТочки) Тогда
		НаименованиеТочки=ИмяТочки;
	КонецЕсли;
	
	ТипТочки=КП_СхемаКБПСервер.ПолучитьТипТочкиСхемы(ЭлементСхемы);
	
	НовыйЭлемент=Справочники.КП_ТочкиПроцессов.СоздатьЭлемент();
	НовыйЭлемент.ВладелецТочки=ВладелецТочки;
	
	НовыйЭлемент.Наименование=НаименованиеТочки;
	НовыйЭлемент.ИмяВСхеме=ИмяТочки;
	НовыйЭлемент.ТипТочки=ТипТочки;
	НовыйЭлемент.ДействиеТипФормыЗадач=0; //форма исполнителя
		
	//заполним тексты функций по умолчанию
	
	Если ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка Тогда
		НовыйЭлемент.ТекстФункции=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииОбработки();
					
	ИначеЕсли ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие Тогда
		НовыйЭлемент.ТекстФункции=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииУсловия();
		
	ИначеЕсли ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта Тогда
		НовыйЭлемент.ТекстФункции=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииВыбораВарианта();
		
		//добавим строки варианта
		Для Каждого ЭлементВыбора Из ЭлементСхемы.Элементы Цикл
			НоваяСтрока=НовыйЭлемент.ВыборВарианта.Добавить();
			НоваяСтрока.ВариантПерехода=ЭлементВыбора.Наименование;

		КонецЦикла;
		
	ИначеЕсли ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Действие Тогда
		НовыйЭлемент.ТекстФункции=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПриСоздании();
		НовыйЭлемент.ДействиеТекстФункцииПослеВыполнения=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПослеВыполнения();
		НовыйЭлемент.ДействиеТекстФункцииПередВыполнением=КП_СхемаКБПСервер.ПолучитьТекстНовойФункцииДействиеПередВыполнением();
		Попытка
			НовыйЭлемент.ДействиеОсновнойОтчетИсполнителей=Справочники.КП_ТребуемыеРезультатыИсполнителей.Основной;
		Исключение
			//
		КонецПопытки;
		
	ИначеЕсли ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Подпроцесс Тогда
		НовыйЭлемент.ПодпроцессЖдатьОкончания=Истина;
		
	КонецЕсли;
	
	//заполним наименования элементов формы для точки вида
	Если НЕ КП_ОбщееСерверПС.ЭтоЭкземплярБизнесПроцесса(ВладелецТочки) Тогда
		Справочники.КП_ТочкиПроцессов.ЗаполнитьСписокНаименованийЭлементовФормыЗадач(НовыйЭлемент, ВладелецТочки, НовыйЭлемент.ДействиеТипФормыЗадач);
	КонецЕсли;
	
	Попытка
		НовыйЭлемент.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

// Функция определяет, является ли элемент схемы линией
// Параметры:
//		ЭлементСхемы -  элемент схемы процесса
// Возвращаемое значение: Истина или Ложь
Функция ЭтоЛинияСхемы(ЭлементСхемы) Экспорт
	
	Возврат (ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыСоединительнаяЛиния"));
	
КонецФункции

// Функция определяет, является ли элемент схемы точкой действия 
// Параметры:
//		ЭлементСхемы -  элемент схемы процесса
// Возвращаемое значение: Истина или Ложь
Функция ЭтоТочкаДействияСхемы(ЭлементСхемы) Экспорт
	
	Возврат (ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыДействие"));
	
КонецФункции

// Функция возвращает наименование основных исполнителей 
// Параметры:
//		СсылкаНаОбъект - ссылка на  объект
// Возвращаемое значение: Строка
Функция ПолучитьНаименованиеОсновныхИсполнителей(СсылкаНаОбъект) Экспорт
	
	ИспользуемыйСписок=СсылкаНаОбъект.ОсновныеИсполнители;
	КоличествоИсполнителейВТочке=ИспользуемыйСписок.Количество();
	НаименованиеИсполнителей="";

	Для Каждого ЭлементСписка Из ИспользуемыйСписок Цикл
		НаименованиеИсполнителей=НаименованиеИсполнителей+?(НаименованиеИсполнителей="", "", ", ")+СокрЛП(ЭлементСписка.ТочкаАдресации);
	КонецЦикла;
	
	Если ИспользуемыйСписок.Количество()=1 Тогда
		НаименованиеИсполнителей=ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СокрЛП(НаименованиеИсполнителей));
	КонецЕсли;
	
	Если ПустаяСтрока(НаименованиеИсполнителей) Тогда
		НаименованиеИсполнителей="<Нет>";
	КонецЕсли;
	
	Возврат НаименованиеИсполнителей;
	
КонецФункции

// Процедура обновляет основных исполнителей схемы
// Параметры:
//		СхемаБизнесПроцесса - ссылка на бизнес-процесс 
//		Объект - ссылка на объект
Процедура ОбновитьВсехОсновныхИсполнителейСхемы(СхемаБизнесПроцесса, Знач Объект) Экспорт
	
	ВладелецТочек=Объект.Ссылка;
	
	//обновим всех исполнителей действий схемы
	КоличествоЭлементов=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы.Количество();
	Для НомерЭлемента=0 По КоличествоЭлементов-1 Цикл
		
		ЭлементСхемы=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы.Получить(НомерЭлемента);
		Если НЕ ЭтоТочкаДействияСхемы(ЭлементСхемы) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяТочки=ЭлементСхемы.Имя;
		СсылкаНаТочку=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ИмяТочки, ВладелецТочек);
		
		Если СсылкаНаТочку=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найдена точка ""';en='Point was not found ""'")+ИмяТочки+НСтр("ru='""! Данные исполнителей не обновлены.'; en='. Data have not been updated.';"));
			Продолжить;
		КонецЕсли;
		
		Если НЕ СсылкаНаТочку.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Действие Тогда
			Продолжить;
		КонецЕсли;
		
		Если СсылкаНаТочку.ИсточникИсполнителей<>0 Тогда
			Продолжить;
		КонецЕсли;
		
		//нашли действия схемы с основными исполнителями, 
		//обновим данные точки по данным нашего объекта
		
		ЭлементСхемы.Пояснение=ПолучитьНаименованиеОсновныхИсполнителей(Объект);
		КоличествоОсновныхИсполнителей=Объект.ОсновныеИсполнители.Количество();
		ЭлементСхемы.Групповая=(КоличествоОсновныхИсполнителей>1);
		ЭлементСхемы.Пояснение="<Нет>";
		Если КоличествоОсновныхИсполнителей>0 Тогда
			ПервыйИсполнитель=Объект.ОсновныеИсполнители[0].ТочкаАдресации;
			Если НЕ ПустаяСтрока(ПервыйИсполнитель) Тогда
				ПояснениеСхемы=ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СокрЛП(ПервыйИсполнитель));
				ЭлементСхемы.Пояснение=ПояснениеСхемы;
			КонецЕсли;
		Иначе
			ПервыйИсполнитель=Неопределено;
		КонецЕсли;
		
		//обновим картинку
		
		Если ТипЗнч(ПервыйИсполнитель)=Тип("СправочникСсылка.Пользователи") Тогда
			ДвоичныеДанные=КП_ОбщееСервер.ПолучитьДанныеФотографииПользователя(ПервыйИсполнитель);
			Если ДвоичныеДанные=Неопределено Тогда
				ЭлементСхемы.Картинка=Новый Картинка;
			Иначе
				ЭлементСхемы.Картинка=Новый Картинка(ДвоичныеДанные, Истина);
				НаименованиеИсполнителя=ФизическиеЛицаКлиентСервер.ФамилияИнициалы(СокрЛП(ПервыйИсполнитель));
				Если НЕ ПустаяСтрока(НаименованиеИсполнителя) Тогда
					ЭлементСхемы.Пояснение=НаименованиеИсполнителя;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ПервыйИсполнитель)=Тип("СправочникСсылка.КП_РолеваяАдресация") Тогда
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_РолеваяАдресация;
			
		ИначеЕсли ТипЗнч(ПервыйИсполнитель)=Тип("СправочникСсылка.КП_ДополнительныеРеквизиты") Тогда
			ЭлементСхемы.Картинка=БиблиотекаКартинок.КП_Задача;
			
		Иначе
			ЭлементСхемы.Картинка=Новый Картинка();
			
		КонецЕсли;		
		
	КонецЦикла; //по элементам графической схемы
	
КонецПроцедуры

// Процедура помечает на удаление маршрутные точки
// Параметры:
//		ВладелецТочки - владелец точки (вид или экземпляр) 
Процедура ПометитьНаУдалениеТочки(ВладелецТочки) Экспорт
	Запрос=Новый Запрос("ВЫБРАТЬ
                     |	КП_ТочкиПроцессов.Ссылка
                     |ИЗ
                     |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
                     |ГДЕ
                     |	КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки
                     |	И КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ");
					 
	Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочки);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		ТочкаОбъект=Выборка.Ссылка.ПолучитьОбъект();
		ТочкаОбъект.ПометкаУдаления=Истина;
		Попытка
			ТочкаОбъект.Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура снимает пометку удаления с маршрутных точек
// Параметры:
//		ВладелецТочки - владелец точки (вид или экземпляр) 
Процедура СнятьПометкуУдаления(ВладелецТочки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки
	                    |	И КП_ТочкиПроцессов.ПометкаУдаления = ИСТИНА");
					 
	Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочки);
	Попытка
		Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
		Пока Выборка.Следующий() Цикл
			ТочкаОбъект=Выборка.Ссылка.ПолучитьОбъект();
			ТочкаОбъект.ПометкаУдаления=Ложь;
			Попытка
				ТочкаОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	Исключение		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура выполняет раскраску элементов схемы взависимости от состояния точек процесса
// Параметры:
//		СхемаБизнесПроцесса - ссылка на бизнес-процесс
//		СсылкаНаПроцесс - ссылка на бизнес-процесс
Процедура ОформитьСхемуЭкземпляраПроцесса(СхемаБизнесПроцесса, СсылкаНаПроцесс) Экспорт
	
	//получим таблицу обработки точек
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ОбработкаТочекСрезПоследних.Состояние КАК Состояние,
	                    |	КП_ОбработкаТочекСрезПоследних.ТочкаКБП КАК ТочкаКБП
	                    |ИЗ
	                    |	РегистрСведений.КП_ОбработкаТочек.СрезПоследних(&ДатаКон, БизнесПроцесс = &БизнесПроцесс) КАК КП_ОбработкаТочекСрезПоследних
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	КП_ОбработкаТочекСрезПоследних.Период УБЫВ");
	
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	Запрос.УстановитьПараметр("БизнесПроцесс", СсылкаНаПроцесс);
	ТаблицаСостояний=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Если ТаблицаСостояний.Количество()=0 Тогда
		//раскрашивать нечего
		Возврат;
	КонецЕсли;
	
	//пройдем по схеме бизнес-процесса и изменим фон точек схемы
	
	КоличествоЭлементов=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы.Количество();
	Для НомерЭлемента=0 По КоличествоЭлементов-1 Цикл
		ЭлементСхемы=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы.Получить(НомерЭлемента);
		
		Если НЕ КП_СхемаКБПСервер.ЭтоНастраиваемыйВидЭлементаСхемы(ЭлементСхемы) Тогда
			Продолжить;
		КонецЕсли;
		
		ТипЭлементаСхемы=ТипЗнч(ЭлементСхемы);
		
		//установим цвет фона точек начала и завершения процесса
		Если ТипЭлементаСхемы=Тип("ЭлементГрафическойСхемыСтарт") И СсылкаНаПроцесс.Стартован Тогда
			ЭлементСхемы.ЦветФона=ЦветаСтиля.ЦветФонаФормы;
			Продолжить;
		КонецЕсли;
		
		Если ТипЭлементаСхемы=Тип("ЭлементГрафическойСхемыЗавершение") И СсылкаНаПроцесс.Завершен Тогда
			ЭлементСхемы.ЦветФона=ЦветаСтиля.ЦветФонаФормы;
			Продолжить;
		КонецЕсли;
		
		//найдем точку
		ТочкаКБП=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ЭлементСхемы.Имя, СсылкаНаПроцесс);
		
		Если ТочкаКБП=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//проверим есть ли запись об этой точке в таблице
		МассивСтрок=ТаблицаСостояний.НайтиСтроки(Новый Структура("ТочкаКБП", ТочкаКБП));
		Если МассивСтрок.Количество()>0 Тогда
			СостояниеТочки=МассивСтрок[0].Состояние;
		Иначе
			Если СсылкаНаПроцесс.Завершен Тогда
				//в завершенном процессе установим прозрачный фон для всех не обработанных элементов
				ЭлементСхемы.ПрозрачныйФон=Истина;
			Иначе
				//восстановим исходный цвет элемента
				УстановитьЦветЭлементаСхемы(ЭлементСхемы, Новый Цвет);
				ЭлементСхемы.ПрозрачныйФон=Ложь;

			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		//в зависимости от состояния раскрасим элемент схемы
		
		Если СостояниеТочки=Перечисления.КП_СостояниеТочек.Выполнена Тогда
			УстановитьЦветЭлементаСхемы(ЭлементСхемы, ЦветаСтиля.ЦветФонаФормы);
			ЭлементСхемы.ПрозрачныйФон=Ложь;
			
		ИначеЕсли СостояниеТочки=Перечисления.КП_СостояниеТочек.Выполняется Тогда
			//точку слиняния, находящуюся в работе не раскрашиваем
			УстановитьЦветЭлементаСхемы(ЭлементСхемы, WebЦвета.Желтый);
			ЭлементСхемы.ПрозрачныйФон=Ложь;
			
		ИначеЕсли СостояниеТочки=Перечисления.КП_СостояниеТочек.НеВыполняется Тогда
			ЭлементСхемы.ПрозрачныйФон=Истина;
			
		ИначеЕсли СостояниеТочки=Перечисления.КП_СостояниеТочек.Реинициализирована Тогда
			//вернет цвет в значение по-умолчанию
			УстановитьЦветЭлементаСхемы(ЭлементСхемы, Новый Цвет);
			ЭлементСхемы.ПрозрачныйФон=Ложь;

		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

// Функция устанавливает цвет элемента схемы 
// Параметры:
//		ЭлементСхемы -  элемент схемы процесса
//		ЦветСхемы - цвет схемы
// Возвращаемое значение: Истина или Ложь 
Функция УстановитьЦветЭлементаСхемы(ЭлементСхемы, ЦветСхемы)
	
	ЭлементСхемы.ЦветФона=ЦветСхемы;
	
	Если ТипЗнч(ЭлементСхемы)=Тип("ЭлементГрафическойСхемыВыборВарианта") Тогда
		
		//установим цвет дополнительно для вариантов элемента выбора
		
		Для Каждого ВариантСхемы Из ЭлементСхемы.Элементы Цикл
			ВариантСхемы.ЦветФона=ЦветСхемы;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция заполняет сеть маршрутных точек 
// Параметры:
//		Объект - ссылка на объект 
//		ВыводитьПредупреждения - флаг вывода предупреждений
// Возвращаемое значение: Истина или Ложь
Функция ЗаполнитьСетьМаршрутныхТочек(Объект, ВыводитьПредупреждения=Истина) Экспорт
	// пройдем по схеме бизнес-процесса и заполним сеть маршрутных точек
	// для последующего использования
	
	Объект.СетьМаршрутныхТочек.Очистить();
	
	Если КП_ОбщееСерверПС.ЭтоЭкземплярБизнесПроцесса(Объект.Ссылка) Тогда
		ВидПроцесса=Объект.ВидПроцесса;
		СхемаБизнесПроцесса=ВидПроцесса.ХранилищеКартыПроцесса.Получить();	
	Иначе
		//это вид процесса
		ВидПроцесса=Объект;
		СхемаБизнесПроцесса=Объект.ХранилищеКартыПроцесса.Получить();
	КонецЕсли;
		
	// пройдем по схеме бизнес-процесса и заполним сеть маршрутных точек
	// для последующего использования
	
	Объект.СетьМаршрутныхТочек.Очистить();
	
	Если СхемаБизнесПроцесса=Неопределено Тогда
		КоличествоЭлементов=0;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найдена схема бизнес-процесса.';en='Business process schema was not found.'"));
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоЭлементов=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы.Количество();
	
	Для НомерЭлемента=0 По КоличествоЭлементов-1 Цикл
		
		ЭлементСхемы=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы[НомерЭлемента];
		Если НЕ КП_СхемаКБПСервер.ЭтоНастраиваемыйВидЭлементаСхемы(ЭлементСхемы) Тогда
			Продолжить;
		КонецЕсли;
		
		ТочкаБП=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ЭлементСхемы.Имя, Объект.Ссылка);
		Если ТочкаБП=Неопределено Тогда
			ТочкаБП=КП_СхемаКБПСервер.СоздатьТочкуКБППоЭлементу(ЭлементСхемы, Объект.Ссылка);
		КонецЕсли;
	
		//обновим наименование элементов точек процесса при необходимости
		Если ТочкаБП<>Неопределено И ТочкаБП.Наименование<>ЭлементСхемы.Наименование Тогда
			ТочкаБПОбъект=ТочкаБП.ПолучитьОбъект();
			ТочкаБПОбъект.Наименование=ЭлементСхемы.Наименование;
			Попытка
				ТочкаБПОбъект.Записать();
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;				
	КонецЦикла;
	
	Для НомерЭлемента=0 По КоличествоЭлементов-1 Цикл
		
		ЭлементСхемы=СхемаБизнесПроцесса.ЭлементыГрафическойСхемы[НомерЭлемента];
		
		ЭтоЛинияСхемы=КП_СхемаКБПСервер.ЭтоЛинияСхемы(ЭлементСхемы);
		Если НЕ ЭтоЛинияСхемы Тогда
			//это не линия, а мы ищем только линии
			Продолжить;
		КонецЕсли;
		
		//далее работаем с линией схемы
		
		ЭлементНаКонцеЛинии=ЭлементСхемы.КонецЭлемент;
		ЭлементВНачалеЛинии=ЭлементСхемы.НачалоЭлемент;
		
		//проверим, есть ли у линий начальный и конечные элементы
		Если ЭлементНаКонцеЛинии=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Линия ""';en='Line ""'")+ЭлементСхемы.Имя+НСтр("ru='"" не имеет окончания.';"));
			Возврат Ложь;
		КонецЕсли;
		
		Если ЭлементВНачалеЛинии=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Линия ""';en='Line ""'")+ЭлементСхемы.Имя+НСтр("ru='"" не имеет начала.';"));
			Возврат Ложь;
		КонецЕсли;
		
		ТочкаНачало=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ЭлементВНачалеЛинии.Имя, Объект.Ссылка);
		ТочкаКонец=КП_СхемаКБПСервер.ПолучитьТочкуКБППоИмени(ЭлементНаКонцеЛинии.Имя, Объект.Ссылка);
		
		//добавим в сеть маршрута
		Если ТочкаНачало.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие Тогда
			ТипПерехода=1; //условный
			
		ИначеЕсли ТочкаНачало.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта Тогда
			ТипПерехода=2; //выбор варианта
			
		Иначе
			ТипПерехода=0; //обычный переход
			
		КонецЕсли;
		
		Если ТипПерехода=1 Тогда
			//условный переход
			НоваяСтрока=Объект.СетьМаршрутныхТочек.Добавить();
			НоваяСтрока.ТочкаВыход=ТочкаНачало;
			НоваяСтрока.ТочкаВход=ТочкаКонец;
			НоваяСтрока.ИмяЛинииНаСхеме=ЭлементСхемы.Имя;
			НоваяСтрока.УсловныйПереход=Истина;
			
			//получим количество уже созданных строк для этой точки условия в табличной части
			МассивСтрокТочкиВыбораВарианта=Объект.СетьМаршрутныхТочек.НайтиСтроки(Новый Структура("ТочкаВыход", ТочкаНачало));
			ИндексВарианта=МассивСтрокТочкиВыбораВарианта.Количество()-1;
			КоличествоСтрокВВыбореВарианта=ИндексВарианта; //0 - нет, 1 - да
			НоваяСтрока.УсловиеПерехода=КоличествоСтрокВВыбореВарианта;
			НоваяСтрока.УсловиеПереходаНаименование=?(ИндексВарианта=0, "Нет", "Да");

		ИначеЕсли ТипПерехода=2 Тогда
			//точка выбора варианта
			
			НоваяСтрока=Объект.СетьМаршрутныхТочек.Добавить();
			НоваяСтрока.ТочкаВыход=ТочкаНачало;
			НоваяСтрока.ТочкаВход=ТочкаКонец;
			НоваяСтрока.ИмяЛинииНаСхеме=ЭлементСхемы.Имя;
			НоваяСтрока.УсловныйПереход=Истина;
			
			//получим количество уже созданных строк для этой точки выбора варианта в табличной части
			МассивСтрокТочкиВыбораВарианта=Объект.СетьМаршрутныхТочек.НайтиСтроки(Новый Структура("ТочкаВыход", ТочкаНачало));
			КоличествоСтрокВВыбореВарианта=МассивСтрокТочкиВыбораВарианта.Количество();
			ИндексВарианта=КоличествоСтрокВВыбореВарианта;
			НоваяСтрока.УсловиеПерехода=КоличествоСтрокВВыбореВарианта;
			
			НаименованиеВарианта=ТочкаНачало.ВыборВарианта[ИндексВарианта-1].ВариантПерехода;
			НоваяСтрока.УсловиеПереходаНаименование=НаименованиеВарианта;
			
		Иначе
			//обычная точка
			НоваяСтрока=Объект.СетьМаршрутныхТочек.Добавить();
			НоваяСтрока.ТочкаВыход=ТочкаНачало;
			НоваяСтрока.ТочкаВход=ТочкаКонец;
			НоваяСтрока.ИмяЛинииНаСхеме=ЭлементСхемы.Имя;

		КонецЕсли;
		
	КонецЦикла; //по элементам схемы
	
	Возврат Истина;
		
КонецФункции

// Функция получает список маршрутных точек по типу 
// Параметры:
//		ВладелецТочек - владелец точек (вид или экземпляр)  
//		ТипТочек - ссылка на тип точек
// Возвращаемое значение: Список значений
Функция ПолучитьСписокТочекПоТипу(ВладелецТочек, ТипТочек) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ТипТочки = &ТипТочки
	                    |	И КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки");
						
	Запрос.УстановитьПараметр("ТипТочки", ТипТочек);
	Запрос.УстановитьПараметр("ВладелецТочки", ВладелецТочек);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	СписокТочек=Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		СписокТочек.Добавить(Выборка.Ссылка);	
		
	КонецЦикла;
	
	Возврат СписокТочек;
	
КонецФункции

// Функция возвращает текст программной функции 
// Возвращаемое значение: Строка
Функция ПолучитьТекстНовойФункцииДействиеПередСозданием() Экспорт
	
	ТекстФункции="//ссылка на объекты передается в аргументах
			|//СсылкаНаПроцесс
			|//ИсполнительЗадачи
			|
			|//доступ к данным осуществляется в виде:
			|//СтруктураОтчетаИсполнителя.<ВидОтчета>
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
			|//СтруктураПараметровПроцесса.<ИмяПараметра>
			|//СтруктураПараметровЗадачи.<ИмяПараметра>
			|
			|//при необходимости можно изменить данные присвоив значения структуре
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>=<ЗначениеРеквизита>
			|
			|//Отказ=Ложь; //можно отменить создание задачи, присвоив переменной Отказ значение Истина
			|";
			
	Возврат ТекстФункции;
			
КонецФункции

// Функция возвращает текст новой функции с типа Действие
// Параметры:
//		Нет
// Возвращаемое значение: Строка
Функция ПолучитьТекстНовойФункцииДействиеПриСоздании() Экспорт
	
	ТекстФункции="//ссылка на объекты передается в аргументах
			|//СсылкаНаПроцесс
			|//ИсполнительЗадачи
			|
			|//ЗадачаОбъект - созданная, но еще не записанная задача
			|//Возможно непосредственное изменение реквизитов задачи:
			|// ЗадачаОбъект.ДатаВыполненияПлан
			|// ЗадачаОбъект.ХранилищеТекстаЗадания и т.д.
			|
			|//доступ к данным осуществляется в виде:
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
			|//СтруктураПараметровПроцесса.<ИмяПараметра>
			|
			|//при необходимости можно изменить данные присвоив значения структуре
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>=<ЗначениеРеквизита>
			|
			|";
			
	Возврат ТекстФункции;
			
КонецФункции

// Функция возвращает текст программной функции
// Возвращаемое значение: Строка
Функция ПолучитьТекстНовойФункцииДействиеПередВыполнением() Экспорт
	
	ТекстФункции="//ссылка на объекты передается в аргументах
			|//СсылкаНаПроцесс
			|//ЗадачаОбъект //содержит объект задачи (не ссылку)
			|//ИсполнительЗадачи
			|
			|//доступ к данным осуществляется в виде:
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
			|//СтруктураПараметровПроцесса.<ИмяПараметра>
			|
			|//при необходимости можно изменить данные присвоив значения структуре
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>=<ЗначениеРеквизита>
			|
			|//Отказ=Ложь; //можно отменить выполнение задачи исполнителем, присвоив переменной Отказ значение Истина
			|";
			
	Возврат ТекстФункции;
			
КонецФункции

// Функция возвращает текст программной функции 
// Возвращаемое значение: Строка
Функция ПолучитьТекстНовойФункцииДействиеПослеВыполнения() Экспорт
	
	ТекстФункции="//ссылка на объекты передается в аргументах
			|//СсылкаНаПроцесс
			|//СсылкаНаЗадачу
			|//ИсполнительЗадачи
			|
			|//доступ к данным осуществляется в виде:
	        |//СтруктураОтчетаИсполнителя.<ВидОтчета>
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
			|//СтруктураПараметровПроцесса.<ИмяПараметра>
			|//СтруктураПараметровЗадачи.<ИмяПараметра>
			|
			|//ЗавершитьДействие=Истина; //при необходимости можно полностью завершить точку схемы ""Действие"" (в не зависимости от состояния других исполнителей)
			|//ЗавершитьПроцесс=Истина; //при необходимости можно полностью завершить бизнес-процесс (вне зависимости от дальнейшего маршрута процесса)
			|
			|//при необходимости можно изменить данные присвоив значения элементам структуры
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>=<ЗначениеРеквизита>
			|";
			
	Возврат ТекстФункции;

			
КонецФункции

// Функция возвращает текст программной функции 
// Возвращаемое значение: Строка
Функция ПолучитьТекстНовойФункцииДействиеПослеЗаписи() Экспорт
	
	ТекстФункции="//ссылка на объекты передается в аргументах
			|//СсылкаНаПроцесс
			|//СсылкаНаЗадачу
			|//ИсполнительЗадачи
			|
			|//доступ к данным осуществляется в виде:
	        |//СтруктураОтчетаИсполнителя.<ВидОтчета>
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
			|//СтруктураПараметровПроцесса.<ИмяПараметра>
			|//СтруктураПараметровЗадачи.<ИмяПараметра>
			|
			|//при необходимости можно изменить данные присвоив значения элементам структуры
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>=<ЗначениеРеквизита>
			|";
			
	Возврат ТекстФункции;

			
КонецФункции

// Функция возвращает текст программной функции 
// Возвращаемое значение: Строка
Функция ПолучитьТекстНовойФункцииОбработки() Экспорт
	
	ТекстФункции="//ссылка на процесс передается в аргументе
			|//СсылкаНаПроцесс
			|
			|//доступ к данным осуществляется в виде:
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
			|//СтруктураПараметровПроцесса.<ИмяПараметра>
			|
			|//Можно получить данные из прилагаемых к процессу объектов (документов), используя:
			|//СписокОбъектов[0].Значение;
			|
			|//при необходимости можно изменить данные присвоив значения элементам структуры
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>=<ЗначениеРеквизита>
			|//СтруктураПараметровПроцесса.<ИмяПараметра>=<ЗначениеРеквизита>
			|
			|//можно вывести сообщения в журнал процесса
			|//НомерПиктограммы=2; //0 - нет пиктограммы, 1 - информация, 2 - предупреждение, 3 - ошибка
			|//КП_Процессы.ЗаписатьВЖурналПроцесса(""Текст сообщения"", СсылкаНаПроцесс,,,НомерПиктограммы);
			|
			|//ЗавершитьПроцесс=Истина; //при необходимости можно полностью завершить бизнес-процесс (вне зависимости от дальнейшего маршрута процесса)
			|";
			
	Возврат ТекстФункции;
			
КонецФункции

// Функция возвращает текст программной функции 
// Возвращаемое значение: Строка
Функция ПолучитьТекстНовойФункцииУсловия() Экспорт
	
	ТекстФункции="//ссылка на процесс передается в аргументе
			|//СсылкаНаПроцесс
			|
			|//доступ к данным осуществляется в виде:
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
			|//СтруктураПараметровПроцесса.<ИмяПараметра>
			|
			|
			|
			|Возврат Истина;
			|";

	Возврат ТекстФункции;
			
КонецФункции

// Функция возвращает текст программной функции
// Возвращаемое значение: Строка
Функция ПолучитьТекстНовойФункцииВыбораВарианта() Экспорт
	
	ТекстФункции="//ссылка на процесс передается в аргументе
			|//СсылкаНаПроцесс
			|
			|//доступ к данным осуществляется в виде:
			|//СтруктураРеквизитовПроцесса.<ИмяРеквизита>
			|//СтруктураПараметровПроцесса.<ИмяПараметра>
			|
			|
			|Возврат 1; //результатом выполнения является выбранный вариант
			|";

	Возврат ТекстФункции;
			
КонецФункции

// Функция формирует и возвращает список отчетов исполнителей 
// Параметры:
//		СсылкаВидПроцессаНаОбъект -  
// Возвращаемое значение: Список значений
Функция ПолучитьСписокОтчетовИсполнителей(ВидПроцесса)
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                     |	КП_ТочкиПроцессов.ДействиеОсновнойОтчетИсполнителей КАК ОтчетИсполнителя
	                     |ИЗ
	                     |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                     |ГДЕ
	                     |	КП_ТочкиПроцессов.ВладелецТочки = &ВидПроцесса
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	КП_ТочкиПроцессовИсполнителиТочки.ОтчетИсполнителя
	                     |ИЗ
	                     |	Справочник.КП_ТочкиПроцессов.ИсполнителиТочки КАК КП_ТочкиПроцессовИсполнителиТочки
	                     |ГДЕ
	                     |	КП_ТочкиПроцессовИсполнителиТочки.Ссылка.ВладелецТочки = &ВидПроцесса
	                     |
	                     |ОБЪЕДИНИТЬ ВСЕ
	                     |
	                     |ВЫБРАТЬ
	                     |	КП_ВидыПроцессовОсновныеИсполнители.ОтчетИсполнителя
	                     |ИЗ
	                     |	Справочник.КП_ВидыПроцессов.ОсновныеИсполнители КАК КП_ВидыПроцессовОсновныеИсполнители
	                     |ГДЕ
	                     |	КП_ВидыПроцессовОсновныеИсполнители.Ссылка = &ВидПроцесса");
						 
	Запрос.УстановитьПараметр("ВидПроцесса", ВидПроцесса);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	СписокОтчетов=Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		
		ОтчетИсполнителя=Выборка.ОтчетИсполнителя;	
		
		Если НЕ ЗначениеЗаполнено(ОтчетИсполнителя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокОтчетов.НайтиПоЗначению(ОтчетИсполнителя)=Неопределено Тогда
			СписокОтчетов.Добавить(ОтчетИсполнителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокОтчетов;
	
КонецФункции

// Функция формирует и возвращает список точек контроля
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс 
// Возвращаемое значение: Список значенией
Функция ПолучитьСписокТочекКонтроля(БизнесПроцесс) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ТочкиПроцессов.Ссылка
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочки
	                    |	И КП_ТочкиПроцессов.ТипТочки = &ТипТочки
	                    |	И КП_ТочкиПроцессов.ДействиеТипФормыЗадач = 1
	                    |	И КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ");
						
	Запрос.УстановитьПараметр("ВладелецТочки", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТипТочки", Перечисления.КП_ВидыТочекБизнесПроцесса.Действие);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокТочекКонтроля=Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		ТочкаКонтроля=Выборка.Ссылка;
		Если СписокТочекКонтроля.НайтиПоЗначению(ТочкаКонтроля)=Неопределено Тогда
			СписокТочекКонтроля.Добавить(ТочкаКонтроля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокТочекКонтроля;

КонецФункции

// Процедура устанавливает статус "НеВыполнено" для элементов после невыполняющегося варианта условия
// Параметры:
//		ТочкаМаршрута -  точку маршрута
Процедура ОтменитьНаСхемеВетвьВыполнения(ТочкаМаршрута) Экспорт
	
	ТекущаяТочка=ТочкаМаршрута;
	
	БизнесПроцесс=ТекущаяТочка.ВладелецТочки;
	СетьМаршрутныхТочек=ТекущаяТочка.ВладелецТочки.СетьМаршрутныхТочек;
	
	Пока ЗначениеЗаполнено(ТекущаяТочка) Цикл
		Если ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта
			ИЛИ ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Разделение 
			ИЛИ ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие
			ИЛИ ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Завершение
			ИЛИ ТекущаяТочка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Слияние

		Тогда
			//в точке разветвления не изменяем статус
			Возврат;
			
		КонецЕсли;
		
		//проверка на точку в которую входит более одной ветви (в таком случае нужно прекращать очистку, т.к. не будет ясно состояние других ветвей)
		КоличествоВходящихВетвейВТочку=ПолучитьКоличествоВходящихВетвейВТочку(ТекущаяТочка, СетьМаршрутныхТочек);
		Если КоличествоВходящихВетвейВТочку>1 Тогда
			Возврат;
		КонецЕсли;
				
		СостояниеТочки=КП_Процессы.ПолучитьСтруктуруСостоянияТочки(ТекущаяТочка).Состояние;
		Если СостояниеТочки=Перечисления.КП_СостояниеТочек.Выполнена Тогда
			//встретили первую выполненную точку, прерываем отмену ветви на схеме
			Возврат;
			
		Иначе
			ПримечаниеОчистка="Очищено """+СокрЛП(ТекущаяТочка)+"""";
			
			//проверим, была ли когда-либо это точка выполнена, если была, то вернем состояние "Выполнена", иначе поставим "Не выполняется".
			КП_Процессы.УстановитьСостояниеОбработкиТочки(ТекущаяТочка, Перечисления.КП_СостояниеТочек.НеВыполняется, ,ПримечаниеОчистка);
			
		КонецЕсли;

		ТекущаяТочка=КП_Процессы.ПолучитьСледующуюТочку(СетьМаршрутныхТочек, ТекущаяТочка);	
		
		Если ТекущаяТочка=Неопределено Тогда
			Возврат;
			
		КонецЕсли;
		
		Если ТекущаяТочка=Неопределено ИЛИ ТекущаяТочка=ТекущаяТочка Тогда
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКоличествоВходящихВетвейВТочку(ТочкаКБП, СетьМаршрутныхТочек)
	
	//проверим, сколько раз в сети маршрутных точек встречается точка 
	//корпоративного бизнес-процесса как точка входа
	
	КоличествоЛиний=0;
	Для Каждого СтрокаТЧ Из СетьМаршрутныхТочек Цикл
		Если СтрокаТЧ.ТочкаВход=ТочкаКБП Тогда
			КоличествоЛиний=КоличествоЛиний+1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоЛиний;
	
КонецФункции

// Функция определяет тип обработки 
// Параметры:
//		ТочкаКБП - маршрутная точка процесса 
// Возвращаемое значение: Ссылка на Тип обработки
Функция ПолучитьТипОбработки(ТочкаКБП) Экспорт
	Возврат ТочкаКБП.ТипОбработки;
	
КонецФункции

// Функция формирует и возвращает xml-текст процесса 
// Параметры:
//		ВидКБП - вид процесса  
// Возвращаемое значение: Строка с XML
Функция ПолучитьXMLКорпоративногоПроцесса(ВидКБП) Экспорт
	
	ВерсияФайла=1.2;
	
    ЗаписьXML=Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку(); //вывод будет идти в строку, а не файл
	
	СтрокаДаты=Формат(ТекущаяДата(), "ДЛФ=DDT");
	СтрокаВерсии=СокрЛП(ВерсияФайла);
	
	//в список будем писать соответствие наименований метаданных
	//так как в разных базах UID у них разный
	СписокСоответствийМетаданных=Новый СписокЗначений;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Выгрузка вида процесса: ';")+СокрЛП(ВидКБП.Наименование));
    ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Версия файла: ';")+Формат(ВерсияФайла, "ЧДЦ=2; ЧРД=."));
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата: ';")+СтрокаДаты);	
	
	ИнформацияОСистеме=Новый СистемнаяИнформация;
	СтрокаВерсииПлатформы=СокрЛП(ИнформацияОСистеме.ВерсияПриложения);
	СтрокаРелиза=СокрЛП(Метаданные.Версия);
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("root");
	ЗаписьXML.ЗаписатьАтрибут("webLibrary", "https://документооборот.net/1c-unf");
	ЗаписьXML.ЗаписатьАтрибут("type", "process");
	ЗаписьXML.ЗаписатьАтрибут("version", СтрокаВерсии);
	ЗаписьXML.ЗаписатьАтрибут("platform", СтрокаВерсииПлатформы);
	ЗаписьXML.ЗаписатьАтрибут("release", СтрокаРелиза);
	ЗаписьXML.ЗаписатьАтрибут("date", СтрокаДаты);
	ЗаписьXML.ЗаписатьАтрибут("name", СокрЛП(ВидКБП.Наименование));
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("bp_main");
	
	Попытка
    	ЗаписатьXML(ЗаписьXML, ВидКБП.Ссылка.ПолучитьОбъект());
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат "";
		
	КонецПопытки;
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_main
	
	//запишем точки процесса
	СписокТочек=КП_Процессы.ПолучитьСписокТочекВладельца(ВидКБП);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Точки маршрута:';en='Waypoints:'"));
	Для Каждого ЭлементСписка Из СписокТочек Цикл
		ТочкаКБП=ЭлементСписка.Значение;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("bp_point");
		//добавим сериализацию точки
		ЗаписатьXML(ЗаписьXML, ТочкаКБП.Ссылка.ПолучитьОбъект());
		ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_point
		Если НЕ (ТочкаКБП.Ссылка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Слияние
				ИЛИ ТочкаКБП.Ссылка.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Разделение
				ИЛИ ПустаяСтрока(ТочкаКБП.Наименование)) Тогда
			ИмяТипаТочки=ПолучитьИмяТипаТочки(ТочкаКБП);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='   ';")+ИмяТипаТочки+НСтр("ru=': ';")+СокрЛП(ТочкаКБП));
			
		КонецЕсли;
		
	КонецЦикла;
	
	//запишем реквизиты процесса
	СписокРеквизитов=КП_Процессы.ПолучитьСписокРеквизитовВида(ВидКБП);
	Если СписокРеквизитов.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Реквизиты процесса:';en='Process variables:'"));
	КонецЕсли;

	Для Каждого ЭлементСписка Из СписокРеквизитов Цикл
		РеквизитКБП=ЭлементСписка.Значение;
		ТипРеквизита=РеквизитКБП.ТипРеквизита;
		
		Если СписокСоответствийМетаданных.НайтиПоЗначению(ТипРеквизита)=Неопределено Тогда
			СписокСоответствийМетаданных.Добавить(ТипРеквизита);
		КонецЕсли;
			
		Если ТипРеквизита.ПринадлежитЭлементу(Справочники.КП_СписокМетаданных.Свойства) Тогда
		
			//выгрузим соответствующий план видов характеристик
			СвязьСПВХ=ТипРеквизита.СвязьСПВХ;
			ЗаписьXML.ЗаписатьНачалоЭлемента("bp_pvh_rekv");
			ЗаписатьXML(ЗаписьXML, СвязьСПВХ.Ссылка.ПолучитьОбъект());
			ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_pvh_rekv
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='  ПВХ: ';")+СвязьСПВХ);
			//выгрузим свойства ПВХ
			Запрос=Новый Запрос("ВЫБРАТЬ
			                    |	ЗначенияСвойствОбъектов.Ссылка
			                    |ИЗ
			                    |	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			                    |ГДЕ
			                    |	ЗначенияСвойствОбъектов.Владелец = &Владелец");
					
			Запрос.УстановитьПараметр("Владелец", СвязьСПВХ.Ссылка);
			Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока Выборка.Следующий() Цикл
				ЗначениеСвойства=Выборка.Ссылка;
				ЗаписьXML.ЗаписатьНачалоЭлемента("bp_pvh_values");		
				ЗаписатьXML(ЗаписьXML, ЗначениеСвойства.Ссылка.ПолучитьОбъект());
				ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_pvh_values
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='  значение: ';")+СокрЛП(ЗначениеСвойства));
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("bp_rekv");		
		
		//добавим сериализацию ресурса
		ЗаписатьXML(ЗаписьXML, РеквизитКБП.Ссылка.ПолучитьОбъект());
		ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_rekv
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='  ';")+СокрЛП(РеквизитКБП));
		
	КонецЦикла;
	
	//запишем требуемые виды отчетов
	СписокОтчетовИсполнителей=ПолучитьСписокОтчетовИсполнителей(ВидКБП);
	Если СписокОтчетовИсполнителей.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Требуемые отчеты:';en='Required reports:'"));
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокОтчетовИсполнителей Цикл
		ВидОтчета=ЭлементСписка.Значение;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("bp_report");		
		ЗаписатьXML(ЗаписьXML, ВидОтчета.Ссылка.ПолучитьОбъект());
		ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_report
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='  Отчет: ';")+СокрЛП(ВидОтчета));
		
	КонецЦикла;
		
	//подготовим список используемых рабочих группы (в строках оставим только ролевую адресацию)
	СписокРабочихГрупп=КП_ЗадачиПроцессов.ПолучитьСписокИспользуемыхВВидеПроцессаРабочихГрупп(ВидКБП);
    	
	//подготовим список ролей
	СписокТребуемыхРолей=КП_ЗадачиПроцессов.ПолучитьСписокИспользуемыхРолей(ВидКБП);
	
	//дополним список ролей процесса, ролями из рабочих групп
	
	Для Каждого ЭлементСписка Из СписокРабочихГрупп Цикл
		РабочаяГруппа=ЭлементСписка.Значение;
		Для Каждого СтрокаТЧ Из РабочаяГруппа.Сотрудники Цикл
			ТочкаАдресации=СтрокаТЧ.ТочкаАдресации;
			Если КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ТочкаАдресации) Тогда
				//сотрудников в файл не выгружаем
				Продолжить;
			КонецЕсли;
			
			Если СписокТребуемыхРолей.НайтиПоЗначению(ТочкаАдресации)=Неопределено Тогда
				СписокТребуемыхРолей.Добавить(ТочкаАдресации);
			КонецЕсли;			
		КонецЦикла;
		
	КонецЦикла;
	
	//запишем роли исполнителей
	Если СписокТребуемыхРолей.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Роли сотрудников: ';"));
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокТребуемыхРолей Цикл
		ТочкаАдресации=ЭлементСписка.Значение;
		ЗаписьXML.ЗаписатьНачалоЭлемента("bp_adr_point");		
		ЗаписатьXML(ЗаписьXML, ТочкаАдресации.Ссылка.ПолучитьОбъект());
		ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_adr_point
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='  Точка адресации: ';")+СокрЛП(ТочкаАдресации));
		
		//выгрузим роль
		РольИсполнителя=ТочкаАдресации.РольИсполнителя;
		ЗаписьXML.ЗаписатьНачалоЭлемента("bp_role");		
		ЗаписатьXML(ЗаписьXML, РольИсполнителя.Ссылка.ПолучитьОбъект());
		ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_role
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='  Роль: ';")+СокрЛП(РольИсполнителя));
		
		//выгрузим объекты адресации
		ОсновнойОбъектАдресации=ТочкаАдресации.ОсновнойОбъектАдресации;
		ДополнительныйОбъектАдресации=ТочкаАдресации.ДополнительныйОбъектАдресации;
		Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
			СсылкаНаОбъектАдресации=ОсновнойОбъектАдресации.Ссылка;
			Если ТипЗнч(СсылкаНаОбъектАдресации)=Тип("СправочникСсылка.Организации")
				ИЛИ ТипЗнч(СсылкаНаОбъектАдресации)=Тип("СправочникСсылка.СтруктурныеЕдиницы") 
			Тогда
				Продолжить;
			КонецЕсли;
			ЗаписьXML.ЗаписатьНачалоЭлемента("bp_pvh_adrr");		
			ЗаписатьXML(ЗаписьXML, СсылкаНаОбъектАдресации.ПолучитьОбъект());
			ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_pvh_adrr
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='  Адресация: ';")+СокрЛП(ОсновнойОбъектАдресации));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
			СсылкаНаОбъектАдресации=ДополнительныйОбъектАдресации.Ссылка;
			Если ТипЗнч(СсылкаНаОбъектАдресации)=Тип("СправочникСсылка.Организации")
				ИЛИ ТипЗнч(СсылкаНаОбъектАдресации)=Тип("СправочникСсылка.СтруктурныеЕдиницы") 
			Тогда
				Продолжить;
			КонецЕсли;
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("bp_pvh_adrr");		
			ЗаписатьXML(ЗаписьXML, СсылкаНаОбъектАдресации.ПолучитьОбъект());
			ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_pvh_adrr
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='  Адресация: ';")+СокрЛП(ДополнительныйОбъектАдресации));
		КонецЕсли;
				
	КонецЦикла;
	
	//запишем используемые рабочие группы (роли из их состава уже были записаны ранее)
	Если СписокРабочихГрупп.Количество()>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Рабочие группы: ';"));
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокРабочихГрупп Цикл
		РабочаяГруппа=ЭлементСписка.Значение;
		ЗаписьXML.ЗаписатьНачалоЭлемента("bp_workgroup");		
		ЗаписатьXML(ЗаписьXML, РабочаяГруппа.Ссылка.ПолучитьОбъект());
		ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_workgroup
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='  Рабочая группа: ';")+СокрЛП(РабочаяГруппа));
		
	КонецЦикла;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_РезультатыИсполнителейЗадач.Ссылка
	                    |ИЗ
	                    |	ПланВидовХарактеристик.КП_РезультатыИсполнителейЗадач КАК КП_РезультатыИсполнителейЗадач
	                    |ГДЕ
	                    |	КП_РезультатыИсполнителейЗадач.ПометкаУдаления = Ложь
	                    |	И КП_РезультатыИсполнителейЗадач.Предопределенный = Истина");
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		ВидОтчета=Выборка.Ссылка;
		Если СписокСоответствийМетаданных.НайтиПоЗначению(ВидОтчета)=Неопределено Тогда
			СписокСоответствийМетаданных.Добавить(ВидОтчета);
		КонецЕсли;
	КонецЦикла;
	
	//добавим соответствие метаданных, что бы при загрузке можно было подставить
	//метаданные в реквизиты по имени (т.к. UID метаданных в разных базах отличается)
	//также используется для выгрузки предопределенных значений
	Для Каждого ЭлементСписка Из СписокСоответствийМетаданных Цикл
		ВидМетаданных=ЭлементСписка.Значение;
		ЗаписьXML.ЗаписатьНачалоЭлемента("bp_metadata_rekv_name");		
		
		Если ТипЗнч(ВидМетаданных)=Тип("СправочникСсылка.КП_СписокМетаданных") Тогда
			ЗаписьXML.ЗаписатьАтрибут("Тип", "СписокМетаданных");
			ЗаписьXML.ЗаписатьАтрибут("КодЭлемента", ВидМетаданных.Код);
			ЗаписьXML.ЗаписатьАтрибут("НаименованиеМетаданных", ВидМетаданных.ПолноеНаименование);
			
		ИначеЕсли ТипЗнч(ВидМетаданных)=Тип("ПланВидовХарактеристикСсылка.КП_РезультатыИсполнителейЗадач") Тогда
			ЗаписьXML.ЗаписатьАтрибут("Тип", "ВидРезультата");
			ЗаписьXML.ЗаписатьАтрибут("КодЭлемента", ВидМетаданных.Код);
			ЗаписьXML.ЗаписатьАтрибут("НаименованиеМетаданных", ВидМетаданных.Наименование);
		
		Иначе
			Продолжить;			
		КонецЕсли;
		
		UIDОригинал=ВидМетаданных.УникальныйИдентификатор();
		ЗаписьXML.ЗаписатьАтрибут("UIDОригинал", СокрЛП(UIDОригинал));
		
		Если ВидМетаданных.Предопределенный Тогда
			ЗаписьXML.ЗаписатьАтрибут("ЭтоПредопределенный", "Да");
			ЗаписьXML.ЗаписатьАтрибут("ИмяПредопределенного", ВидМетаданных.ИмяПредопределенныхДанных);
		Иначе
			ЗаписьXML.ЗаписатьАтрибут("ЭтоПредопределенный", "Нет");
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); //bp_metadata_rekv_name
		
	КонецЦикла;	
	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //root

	ТекстXML=ЗаписьXML.Закрыть();
	
	Возврат ТекстXML;
	
КонецФункции

// Функция формирует и возвращает имя типа точки 
// Параметры:
//		ТочкаКБП - маршрутная точка процесса 
// Возвращаемое значение: Строка
Функция ПолучитьИмяТипаТочки(ТочкаКБП)
	ТипТочки=ТочкаКБП.ТипТочки;
	
	Если ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта Тогда
		Возврат "Вариант";
		
	ИначеЕсли ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Действие Тогда
			Если ТочкаКБП.ДействиеТипФормыЗадач=1 Тогда
				Возврат "Контроль";
			Иначе
				Возврат "Действие";
			КонецЕсли;
		
	ИначеЕсли ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Обработка Тогда
			Возврат "Обработка";
			
	ИначеЕсли ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Подпроцесс Тогда
			Возврат "Подпроцесс";
			
	ИначеЕсли ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие Тогда
			Возврат "Условие";
			
	КонецЕсли;
		
	Возврат "Точка";
		
КонецФункции

// Процедура обновляет реквизиты по списку метаданных 
// Параметры:
//		СсылкаНаВидПроцесса - ссылка на вид процесса 
//		СписокСоответствийМетаданных - список соответствий метаданных
Процедура ОбновитьРеквизтыПоСпискуМетаданных(СсылкаНаВладельца, СписокСоответствийМетаданных) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ДополнительныеРеквизиты.Ссылка КАК РеквизитПроцесса,
						|	КП_ДополнительныеРеквизиты.Код КАК Код
	                    |ИЗ
	                    |	Справочник.КП_ДополнительныеРеквизиты КАК КП_ДополнительныеРеквизиты
	                    |ГДЕ
	                    |	КП_ДополнительныеРеквизиты.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ДополнительныеРеквизиты.Владелец = &Владелец
	                    |");
						
	Запрос.УстановитьПараметр("Владелец", СсылкаНаВладельца);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		РеквизитПроцесса=Выборка.РеквизитПроцесса;
		КодРеквизита=Выборка.Код;
		
		СтрокаТипаРеквизита=СокрЛП(РеквизитПроцесса.ТипРеквизита);
		Если НЕ ПустаяСтрока(СтрокаТипаРеквизита) И Найти(СтрокаТипаРеквизита, "<Объект не найден>")=0 Тогда
			//метаданные подгружены в реквизит
			Продолжить;
			
		КонецЕсли;
		
		//найдем наименование метаданных в списке соответствия
		НайденноеЗначение=СписокСоответствийМетаданных.НайтиПоЗначению(КодРеквизита);
		Если ПустаяСтрока(НайденноеЗначение) Тогда
			Продолжить;
			
		КонецЕсли;
		
		НаименованиеМетаданных=НайденноеЗначение.Представление;
		
		МетаданныеТекущейБазы=Справочники.КП_СписокМетаданных.НайтиПоРеквизиту("ПолноеНаименование", НаименованиеМетаданных);
		Если МетаданныеТекущейБазы.Пустая() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! В текущей базе не найдены метаданные ""';en='In the current database found metadata ""'")+НаименованиеМетаданных+""".");
			Продолжить;
		КонецЕсли;
		
		//обновим реквизит
		РеквизитПроцессаОбъект=РеквизитПроцесса.ПолучитьОбъект();
		РеквизитПроцессаОбъект.ТипРеквизита=МетаданныеТекущейБазы;
		Попытка
			РеквизитПроцессаОбъект.Записать();
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция проверяет, является ли переданная в аргументе точка точкой выбора или точкой условия
// Параметры:
//	ТочкаКБП - точка схемы корпоративного бизнес-процесса
// Возвращаемое значение: Истина или Ложь
Функция ЭтоТочкаВыбораИлиУсловия(ТочкаКБП) Экспорт
	
	Если ТочкаКБП.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.Условие
		ИЛИ 	ТочкаКБП.ТипТочки=Перечисления.КП_ВидыТочекБизнесПроцесса.ВыборВарианта Тогда
		Возврат Истина;

	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Функция выводит сообщение пользователю
// Параметры:
//	ВыводитьСообщения - Флаг вывода сообщений
//	ТекстСообщения - текст сообщения
Процедура ВывестиСообщениеПользователю(ВыводитьСообщения, ТекстСообщения)
	Если ВыводитьСообщения Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет чтение и запись вида корпоративного процесса из файла формата bpl
// Параметры:
//		ПутьКФайлу - содержит строку с путем к файлу из которого нужно произвести чтение
// Возвращаемое значение: Ссылка на прочитанный вид процесса или Неопределено
Функция ПрочитатьВидПроцессаXML(СтрокаXML, ВыводитьСообщения, СтруктураЗагрузкиПодчиненных=Неопределено) Экспорт
	#Если ВебКлиент Тогда
	ВывестиСообщениеПользователю(ВыводитьСообщения, "Данная операция не доступна в режиме веб-клиента.");
	Возврат Неопределено;
	#Иначе
		
	Если СокрЛП(СтрокаXML)="" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не содержит данных.';en='This file contains no data.'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если СтруктураЗагрузкиПодчиненных=Неопределено Тогда
		СтруктураЗагрузкиПодчиненных=Новый Структура;
	КонецЕсли;
	
	МинимальноДопустимаяВерсияФайла=1.2;
	ДатаИзмененияВерсии=Дата("20180831");
		
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	ЗагруженныйВидПроцесса=Неопределено;
	
	//список будет использоваться для поиска метаданных для реквизитов КБП по наименованию
	//так как в разных базах UID метаданных отличается
	СписокСоответствийМетаданных=Новый СписокЗначений;
	
	//составим таблицу замены в списке метаданных
	Пока ЧтениеXML.Прочитать() Цикл
		ИмяУзла=ЧтениеXML.ЛокальноеИмя;
		Если ИмяУзла="bp_metadata_rekv_name" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			ТипЭлемента=ЧтениеXML.ПолучитьАтрибут("Тип");
			КодЭлемента=ЧтениеXML.ПолучитьАтрибут("КодЭлемента");
			
			Если ТипЭлемента="СписокМетаданных" Тогда				
				НаименованиеМетаданных=ЧтениеXML.ПолучитьАтрибут("НаименованиеМетаданных");
				НаименованиеМетаданных=СтрЗаменить(НаименованиеМетаданных, "СправочникСсылка.", "Справочник.");
				UIDОригинал=ЧтениеXML.ПолучитьАтрибут("UIDОригинал");
				ЭтоПредопределенный=ЧтениеXML.ПолучитьАтрибут("ЭтоПредопределенный");
				Если ЭтоПредопределенный="Да" Тогда
					ИмяПредопределенного=ЧтениеXML.ПолучитьАтрибут("ИмяПредопределенного");				
					ЛокальныеМетаданныеСсылка=Справочники.КП_СписокМетаданных[ИмяПредопределенного];
				Иначе
					ЛокальныеМетаданныеСсылка=Справочники.КП_СписокМетаданных.НайтиПоРеквизиту("ПолноеНаименование", НаименованиеМетаданных);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЛокальныеМетаданныеСсылка) Тогда
					Сообщить("Не найден элемент """+НаименованиеМетаданных+""" в справочнике ""Список метаданных"". Возможно инициализация подсистемы ""Процессы"" не была выполнена");
					Возврат Неопределено;
				КонецЕсли;
				
			ИначеЕсли ТипЭлемента="ВидРезультата" Тогда				
				UIDОригинал=ЧтениеXML.ПолучитьАтрибут("UIDОригинал");
				ЛокальныеМетаданныеСсылка=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач[КодЭлемента];
			КонецЕсли;
			
			UIDЛокальный=СокрЛП(ЛокальныеМетаданныеСсылка.УникальныйИдентификатор());
			//заменим UIDы
			СтрокаXML=СтрЗаменить(СтрокаXML, UIDОригинал, UIDЛокальный);
		КонецЕсли;
		
	КонецЦикла;	
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(СтрокаXML);

	//основной цикл
	
	Пока ЧтениеXML.Прочитать() Цикл

		ИмяУзла=ЧтениеXML.ЛокальноеИмя;
		Если ИмяУзла="root" И ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			
			СтрокаТипа=ЧтениеXML.ПолучитьАтрибут("type");
			Если СтрокаТипа<>"process" Тогда
				
				СтрокаСообщения="Внимание! Файл не содержит данных о бизнес-процессе.";
				СтрокаСообщения=СтрокаСообщения+" "+КП_ОбщееСерверПС.ПолучитьСообщениеОТипеBPLФайла(СтрокаТипа);
				
				ВывестиСообщениеПользователю(ВыводитьСообщения, СтрокаСообщения+" Чтение не произведено.");
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			//прочитаем аттрибуты корневого элемента
			СтрокаВерсии=ЧтениеXML.ПолучитьАтрибут("version");
			СтрокаВерсииКонфигурации=ЧтениеXML.ПолучитьАтрибут("release");
			
			Если СтрокаВерсии=Неопределено ИЛИ ПустаяСтрока(СтрокаВерсии) Тогда
				ВывестиСообщениеПользователю(ВыводитьСообщения, "Не найдена версия файла. Загрузка не произведена.");
				Возврат Неопределено;
			КонецЕсли;
			
			ВерсияФайла=Число(СтрокаВерсии);
			
			Если ВерсияФайла<МинимальноДопустимаяВерсияФайла Тогда
				ВывестиСообщениеПользователю(ВыводитьСообщения, "Версия файла "+Формат(ВерсияФайла, "ЧДЦ=2; ЧРД=.")+" ниже чем необходимая ("+Формат(МинимальноДопустимаяВерсияФайла, "ЧДЦ=2; ЧРД=.")+"). Файл был сформирован до "+Формат(ДатаИзмененияВерсии, "ДФ=dd.MM.yyyy")+" в релизе "+СтрокаВерсииКонфигурации+". В связи с изменением структуры метаданных загрузка не произведена.");
				Возврат Неопределено;
			КонецЕсли;
						
			ВывестиСообщениеПользователю(ВыводитьСообщения, "Версия файла "+Формат(ВерсияФайла, "ЧДЦ=2; ЧРД=."));
			
			СтрокаДаты=ЧтениеXML.ПолучитьАтрибут("date");
			ВывестиСообщениеПользователю(ВыводитьСообщения, "Дата: "+СокрЛП(СтрокаДаты));
			
			СтрокаНаименования=ЧтениеXML.ПолучитьАтрибут("name");
			ВывестиСообщениеПользователю(ВыводитьСообщения, "Загрузка вида процесса: "+СокрЛП(СтрокаНаименования));

			//перейдем к следующим элементам
			Продолжить;
			
		ИначеЕсли ИмяУзла="bp_report" Тогда
			//прочитаем виды отчетов
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    ВидОтчета=ПрочитатьXML(ЧтениеXML);
					Если ВидОтчета<>Неопределено Тогда
						Если НЕ СтруктураЗагрузкиПодчиненных.Свойство("ВидыОтчетов") ИЛИ СтруктураЗагрузкиПодчиненных.ВидыОтчетов Тогда
							//если в структуре нет этого свойства или оно есть и установлено в Истина							
							Если ВидОтчета.Предопределенный Тогда
								ВывестиСообщениеПользователю(ВыводитьСообщения, "Внимание! Вид отчета: "+СокрЛП(ВидОтчета)+" является предопределенным и не может быть перезаписан при загрузке.");
							Иначе
								ВидОтчета.Записать();
								ВывестиСообщениеПользователю(ВыводитьСообщения, "  Вид отчета: "+СокрЛП(ВидОтчета));
							КонецЕсли;		    				
						КонецЕсли;		
					КонецЕсли;					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение вида отчета не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
		ИначеЕсли ИмяУзла="bp_main" Тогда
	        //прочитаем вид процесса
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    ЗагруженныйВидПроцесса=ПрочитатьXML(ЧтениеXML);
    				ЗагруженныйВидПроцесса.Записать();
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Загружен вид процесса: "+СокрЛП(ЗагруженныйВидПроцесса));
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение вида процесса не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
		ИначеЕсли ИмяУзла="bp_point" Тогда
			//прочитаем точки вида бизнес-процесса			
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    ТочкаКБП = ПрочитатьXML(ЧтениеXML);
    				ТочкаКБП.Записать();
					ВывестиСообщениеПользователю(ВыводитьСообщения, "  Точка: "+СокрЛП(ТочкаКБП));
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение точки процесса не возможно!");
					//Возврат Неопределено;
					Продолжить;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				//Возврат Неопределено;
				Продолжить;
		
			КонецПопытки;
			
		ИначеЕсли ИмяУзла="bp_metadata" Тогда
			//прочитаем свойства
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    ТипРеквизита= ПрочитатьXML(ЧтениеXML);
					Если НЕ ТипРеквизита.Предопределенный Тогда
    					ТипРеквизита.Записать();
					КонецЕсли;
					ВывестиСообщениеПользователю(ВыводитьСообщения, "  Тип реквизита: "+СокрЛП(ТипРеквизита));
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение типа реквизита не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
			
		ИначеЕсли ИмяУзла="bp_pvh_rekv" Тогда
			//прочитаем ПВХ реквизита
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    Реквизит = ПрочитатьXML(ЧтениеXML);
    				Реквизит.Записать();
					ВывестиСообщениеПользователю(ВыводитьСообщения, "  Реквизит: "+СокрЛП(Реквизит));
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение реквизита процесса не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
		ИначеЕсли ИмяУзла="bp_pvh_values" Тогда
			//прочитаем значения свойств
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    ЗначениеСвойства = ПрочитатьXML(ЧтениеXML);
    				ЗначениеСвойства.Записать();
					ВывестиСообщениеПользователю(ВыводитьСообщения, "  Свойство: "+СокрЛП(ЗначениеСвойства));
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение значения свойства не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
		ИначеЕсли ИмяУзла="bp_pvh_adrr" Тогда
			//прочитаем ПВХ объектов адресации
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
					//пропустим некоторые объекты, что бы не засорять текущие базы
					Если ЧтениеXML.Имя="CatalogObject.Организации"
						ИЛИ ЧтениеXML.Имя="CatalogObject.Подразделения" Тогда
						Продолжить;
					КонецЕсли;
					
				    ОбъектАдресации=ПрочитатьXML(ЧтениеXML);
    				ОбъектАдресации.Записать();
					ВывестиСообщениеПользователю(ВыводитьСообщения, "  Объект адресации: "+СокрЛП(ТочкаКБП));
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение объекта адресации не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение ПВХ объектов адресации: "+ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
			
		ИначеЕсли ИмяУзла="bp_role" Тогда
			//прочитаем роли
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    РольИсполнителя = ПрочитатьXML(ЧтениеXML);
    				РольИсполнителя.Записать();
					ВывестиСообщениеПользователю(ВыводитьСообщения, "  Роль: "+СокрЛП(ТочкаКБП));
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение роли не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
		ИначеЕсли ИмяУзла="bp_adr_point" Тогда
			//прочитаем точки адресации (ролевые)
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    ТочкаАдресации = ПрочитатьXML(ЧтениеXML);
    				ТочкаАдресации.Записать();
					ВывестиСообщениеПользователю(ВыводитьСообщения, "  Точка адресации: "+СокрЛП(ТочкаКБП));
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение точки адресации не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
		ИначеЕсли ИмяУзла="bp_resource" Тогда
			//прочитаем точки вида бизнес-процесса			
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    ТочкаКБП = ПрочитатьXML(ЧтениеXML);
    				ТочкаКБП.Записать();
					ВывестиСообщениеПользователю(ВыводитьСообщения, "  Ресурс: "+СокрЛП(ТочкаКБП));
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение ресурса процесса не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
		ИначеЕсли ИмяУзла="bp_rekv" Тогда
			//прочитаем реквизиты вида бизнес-процесса
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    РеквизитКБП = ПрочитатьXML(ЧтениеXML);
    				РеквизитКБП.Записать();
					ВывестиСообщениеПользователю(ВыводитьСообщения, "  Реквизит: "+СокрЛП(РеквизитКБП));
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение реквизита процесса не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
		ИначеЕсли ИмяУзла="bp_workgroup" Тогда
			//прочитаем реквизиты виды бизнес-процесса
			
			ЧтениеXML.Прочитать();
			
			Попытка 
				Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
				    РабочаяГруппа = ПрочитатьXML(ЧтениеXML);
					Если НЕ РабочаяГруппа=Неопределено Тогда
    					РабочаяГруппа.Записать();
						ВывестиСообщениеПользователю(ВыводитьСообщения, "  Рабочая группа: "+СокрЛП(РабочаяГруппа));
					Иначе
						ВывестиСообщениеПользователю(ВыводитьСообщения, "Рабочая группа не определена!");	
					КонецЕсли;
					
				Иначе
					ВывестиСообщениеПользователю(ВыводитьСообщения, "Чтение рабочей группы не возможно!");
					Возврат Неопределено;
					
				КонецЕсли;
				
			Исключение
				ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
				Возврат Неопределено;
		
			КонецПопытки;
			
		ИначеЕсли ИмяУзла="bp_metadata_rekv_name" Тогда
			
			
		Иначе
			//другие типы узлов xml
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧтениеXML.Закрыть();
	
	Если ЗагруженныйВидПроцесса=Неопределено Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ЗагруженныйВидПроцесса.Родитель.Код) Тогда
		//родитель не определен, сбросим значение
		ЗагруженныйВидПроцесса.Родитель=Неопределено;		
		Попытка
			ЗагруженныйВидПроцесса.Записать();
			ВывестиСообщениеПользователю(ВыводитьСообщения, "Родитель процесса заменен пустой ссылкой.");
			
		Исключение
			ВывестиСообщениеПользователю(ВыводитьСообщения, ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;
	
	СсылкаНаВидПроцесса=ЗагруженныйВидПроцесса.Ссылка;
	
	//обработаем реквизиты по списку метаданных
	КП_СхемаКБПСервер.ОбновитьРеквизтыПоСпискуМетаданных(СсылкаНаВидПроцесса, СписокСоответствийМетаданных);
		
	ВывестиСообщениеПользователю(ВыводитьСообщения, "Загрузка завершена!");

	Возврат СсылкаНаВидПроцесса;
	
	#КонецЕсли
	
КонецФункции

#КонецОбласти
