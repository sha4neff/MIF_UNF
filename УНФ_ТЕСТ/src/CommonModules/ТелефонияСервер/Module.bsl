
#Область ПрограммныйИнтерфейс

// См. ОбщегоНазначенияПереопределяемый.ПриДобавленииПараметровРаботыКлиентаПриЗапуске.
//
Процедура ПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	ИспользуетсяТелефония = ИспользуетсяТелефония();
	
	Параметры.Вставить("ИспользуетсяТелефония", ИспользуетсяТелефония);
	
	Если НЕ ИспользуетсяТелефония Тогда
		Возврат;
	КонецЕсли;
	
	ЖурналЗвонков = КлючОбсужденияЖурналЗвонков();
	
	Если ЖурналЗвонков <> Неопределено Тогда
		Параметры.Вставить("СлужебныйЖурналЗвонков", ЖурналЗвонков);
	КонецЕсли;
	
#Если НЕ ВнешнееСоединение Тогда
	Если (РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ДобавлениеИзменениеКонтрагентов"))
		И НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована()
		И НЕ УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеНастройки("ПредложениеИспользованияСистемыВзаимодействияДляТелефонииПоказано") Тогда
		
		Если ПравоДоступа("РегистрацияИнформационнойБазыСистемыВзаимодействия", Метаданные) Тогда
			Параметры.Вставить("ПредложитьРегистрациюСистемыВзаимодействия", Истина);
		Иначе
			Параметры.Вставить("ПредложитьИспользованиеСистемыВзаимодействия", Истина);
		КонецЕсли;
	КонецЕсли;
#КонецЕсли
	
КонецПроцедуры

// Проверяет использование телефонии в программе.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ИспользуетсяТелефония() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьОблачнуюТелефонию") ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьМобильнуюТелефонию");
	
КонецФункции

// Процедура обработчик подписки "ОчиститьВходящиеЗвонки". Очищает вспомогательные данные по удаляемому абоненту.
//
Процедура ОчиститьВходящиеЗвонкиПередУдалением(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеВходящиеЗвонки.ПользовательКому КАК ПользовательКому
		|ИЗ
		|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
		|ГДЕ
		|	ТекущиеВходящиеЗвонки.АбонентОтКого = &УдаляемыйАбонент";
	
	Запрос.УстановитьПараметр("УдаляемыйАбонент", Источник.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПользовательКому.Установить(Выборка.ПользовательКому);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Создает или выключает доступ служебного пользователя телефонии.
// Требуется для авторизации http-сервиса TelephonyAPI.
//
// Параметры:
//  Включить - Булево - Истина при включении телефонии.
// 
// Возвращаемое значение:
//   - Булево
//
Функция СоздатьИзменитьСлужебногоПользователяТелефонии(Включить = Ложь) Экспорт
	
	Логин = СлужебныйПользовательТелефонииЛогин();
	Пароль = СлужебныйПользовательТелефонииПароль();
	
	УстановитьПривилегированныйРежим(Истина);
	ПользовательИзСправочника = Пользователи.НайтиПоИмени(Логин);
	УстановитьПривилегированныйРежим(Ложь);
	
	Попытка
		Если ПользовательИзСправочника = Неопределено Тогда
			
			ИмяСобытия = "Телефония.СозданиеСлужебногоПользователя";
			
			ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
			ОписаниеПользователяИБ.Имя = Логин;
			ОписаниеПользователяИБ.ПолноеИмя = НСтр("ru='Служебный пользователь телефонии'");
			ОписаниеПользователяИБ.АутентификацияСтандартная = Включить;
			ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
			ОписаниеПользователяИБ.Вставить("Действие", "Записать");
			ОписаниеПользователяИБ.Вставить("ВходВПрограммуРазрешен", Истина);
			ОписаниеПользователяИБ.ЗапрещеноИзменятьПароль = Истина;
			ОписаниеПользователяИБ.Пароль = Пароль;
			ОписаниеПользователяИБ.Роли = Новый Массив;
			ОписаниеПользователяИБ.Роли.Добавить(Метаданные.Роли.ИспользованиеМетодовПровайдераТелефонии.Имя);
			
			НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
			НовыйПользователь.Наименование = ОписаниеПользователяИБ.ПолноеИмя;
			НовыйПользователь.Служебный = Истина;
			НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", ОписаниеПользователяИБ);
			НовыйПользователь.Записать();
			
		Иначе
			
			ИмяСобытия = "Телефония.ИзменениеДоступаСлужебногоПользователя";
			ИзменитьДоступВБазуСлужебногоПользователяТелефонии(Включить, Пароль, ПользовательИзСправочника);
			
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Информация, Метаданные.Справочники.Пользователи, ПользовательИзСправочника);
		Возврат Истина;
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

// Получает внутренний номер (данные АТС) для пользователя УНФ из настроек.
//
// Параметры:
//  Пользователь - СправочникСсылка.Пользователи - Пользователь.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ВнутреннийНомерПользователя(Пользователь = Неопределено) Экспорт
	
	ДанныеПользователяАТС = ДанныеПользователяАТС(Пользователь);
	
	Если ДанныеПользователяАТС = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеПользователяАТС.ВнутреннийНомер;
	
КонецФункции

// Поиск контакта (Контрагент/КонтактноеЛицо/Лид) по номеру телефона.
// Сперва выполняется поиск среди Контрагентов/Контактов. Если не найдено — среди лидов.
//
// Параметры:
//  НомерТелефонаАбонента - Строка - Номер телефона контакта.
//  ИскатьВКонтрагентах   - Булево - Указывает, искать ли среди справочника Контрагенты.
//  ИскатьВКонтактах      - Булево - Указывает, искать ли среди справочника КонтактныеЛица.
//  ИскатьВЛидах          - Булево - Указывает, искать ли среди справочника Лиды.
//                                   (Внимание! Поиск выполняется если контакт не найден среди Контрагентов и Контактных
//                                   лиц).
// 
// Возвращаемое значение:
//   - Неопределено, СправочникСсылка.Контрагенты, СправочникСсылка.КонтактныеЛица, СправочникСсылка.Лиды.
//
Функция ПолучитьАбонентаПоНомеруТелефона(Знач НомерТелефонаАбонента, ИскатьВКонтрагентах = Истина, ИскатьВКонтактах = Истина, ИскатьВЛидах = Истина) Экспорт
	
	Если НЕ ИскатьВКонтрагентах И НЕ ИскатьВКонтактах И НЕ ИскатьВЛидах Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоисковоеВыражение = СтрЗаменить(НомерТелефонаАбонента, "+", "") + "%";
	Если СтрНачинаетсяС(ПоисковоеВыражение, "7") Или СтрНачинаетсяС(ПоисковоеВыражение, "8") Тогда
		ПоисковоеВыражение = "[78]" + Сред(ПоисковоеВыражение, 2);
	КонецЕсли;
	
	ТипыАбонентов = Новый Массив;
	
	Если ИскатьВКонтрагентах Тогда
		ТипыАбонентов.Добавить(Метаданные.Справочники.Контрагенты);
	КонецЕсли;
	
	Если ИскатьВКонтактах Тогда
		ТипыАбонентов.Добавить(Метаданные.Справочники.КонтактныеЛица);
	КонецЕсли;
	
	Если ТипыАбонентов.Количество() <> 0 Тогда
		Контакт = АбонентПоНомеруТелефона(ПоисковоеВыражение, ТипыАбонентов);
		Если Контакт <> Неопределено Тогда
			Возврат Контакт;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ИскатьВЛидах Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипыАбонентов.Очистить();
	ТипыАбонентов.Добавить(Метаданные.Справочники.Лиды);
	ТипыАбонентов.Добавить(Метаданные.Справочники.КонтактыЛидов);
	
	Возврат АбонентПоНомеруТелефона(ПоисковоеВыражение, ТипыАбонентов);
	
КонецФункции

// Получает данные текущего входящего звонка для авторизованного пользователя.
// 
// Возвращаемое значение:
//   - Структура
//
Функция ДанныеВходящегоЗвонкаТекущегоПользователя(ОчиститьДанные = Неопределено) Экспорт
	
	Если ОчиститьДанные = Неопределено Тогда
		ОчиститьДанные = Истина;
	КонецЕсли;
	
	Результат = ПолучитьНастройкиТелефонии();
	ДанныеТекущегоЗвонка = Новый Структура("ПользовательКому,АбонентОтКого,ДатаЗвонка,НомерТелефонаАбонента,Событие,ПредставлениеАбонента,ВходящееИсходящее,ИдентификаторЗвонкаВАТС");
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Выборка = РегистрыСведений.ТекущиеВходящиеЗвонки.Выбрать(Новый Структура("ПользовательКому", ТекущийПользователь));
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеТекущегоЗвонка, Выборка);
		
		Если ОчиститьДанные Тогда
			Если ЗначениеЗаполнено(ДанныеТекущегоЗвонка.АбонентОтКого)
				Или Результат.ДействиеТекущегоЗвонкаНеизвестногоАбонента <> "ЗадаватьВопрос" Тогда
				
				МенеджерЗаписи = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПользовательКому = ТекущийПользователь;
				МенеджерЗаписи.Удалить();
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ТекущиеВходящиеЗвонки.ПользовательКому КАК ПользовательКому
				|ИЗ
				|	РегистрСведений.ТекущиеВходящиеЗвонки КАК ТекущиеВходящиеЗвонки
				|ГДЕ
				|	ТекущиеВходящиеЗвонки.Событие = &Событие";
				Запрос.УстановитьПараметр("Событие", ДанныеТекущегоЗвонка.Событие);
				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					МенеджерЗаписи = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ПользовательКому = Выборка.ПользовательКому;
					МенеджерЗаписи.Прочитать();
					Если МенеджерЗаписи.Выбран() Тогда
						МенеджерЗаписи.Удалить();
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеТекущегоЗвонка.АбонентОтКого) Тогда
		ДанныеТекущегоЗвонка.ПредставлениеАбонента = Строка(ДанныеТекущегоЗвонка.АбонентОтКого);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеТекущегоЗвонка.Событие) И ЗначениеЗаполнено(ДанныеТекущегоЗвонка.ИдентификаторЗвонкаВАТС) Тогда
		ДанныеЗвонка = НовыйДанныеЗвонка();
		ДанныеЗвонка.ИдентификаторЗвонкаВАТС = ДанныеТекущегоЗвонка.ИдентификаторЗвонкаВАТС;
		ДанныеТекущегоЗвонка.Событие = НайтиСобытиеПоДаннымЗвонка(ДанныеЗвонка);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Результат, ДанныеТекущегоЗвонка, Истина);
	
	Возврат Результат;
	
КонецФункции

// Получает данные телефонного звонка.
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие - Телефонный звонок.
// 
// Возвращаемое значение:
//   - Структура - См. ТелефонияСервер.НовыйДанныеЗвонка()
//
Функция ДанныеЗвонка(Событие) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДанныеЗвонков.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Событие.Значение = Событие;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗвонка = НовыйДанныеЗвонка();
	ДополнитьДанныеЗвонкаДаннымиРегистра(ДанныеЗвонка, НаборЗаписей[0]);
	Возврат ДанныеЗвонка;
	
КонецФункции

// Получает ссылку на запись разговора из АТС.
//
// Параметры:
//  Событие	 - ДокументСсылка.Событие - Телефонный звонок.
//  Ошибка	 - Строка - Возвращаемое значение. Содержит код ошибки.
// 
// Возвращаемое значение:
//   - Строка
//
Функция СсылкаНаЗаписьРазговора(Событие, Ошибка) Экспорт
	
	ДанныеЗвонка = ДанныеЗвонка(Событие);
	Возврат ТелефонияПереопределяемый.СсылкаНаЗаписьРазговора(ДанныеЗвонка, Ошибка);
	
КонецФункции

// Преобразует переданное соответствие в строку для логирования.
//
// Параметры:
//  Соответствие - Соответствие - Произвольное соответствие.
// 
// Возвращаемое значение:
//   - Строка
//
Функция ПредставлениеСоответствияСтрокой(Соответствие) Экспорт
	
	Строка = "";
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если ЗначениеЗаполнено(Строка) Тогда
			Строка = Строка + Символы.ПС;
		КонецЕсли;
		Строка = Строка + КлючИЗначение.Ключ + ": " + КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат Строка;
	
КонецФункции

// Определяет нужно ли показывать всплывающие оповещения о новом входящем звонке для используемой АТС.
// 
// Возвращаемое значение:
//   - Булево
//
Функция ПоказыватьУведомлениеОНовомЗвонке() Экспорт
	
	ИспользуемаяАТС = Константы.ИспользуемаяАТС.Получить();
	
	СписокАТС = Новый Массив;
	ТелефонияПереопределяемый.ПоказУведомленияОНовомЗвонкеНеИспользуетсяВ(СписокАТС);
	
	Возврат СписокАТС.Найти(ИспользуемаяАТС) = Неопределено;
	
КонецФункции

// Очищает выданные ранее токены доступа для доступа к АТС.
//
Процедура ОчиститьТокеныДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	НаборЗаписей = РегистрыСведений.ТокеныДоступаAPIТелефонии.СоздатьНаборЗаписей();
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

#Область РаботаСоЗвонками

// Создает пустое описание телефонного звонка.
// Используется для дальнейшей работы с созданием и изменением звонка в программе.
// 
// Возвращаемое значение:
//   - Структура
//
Функция НовыйДанныеЗвонка() Экспорт
	
	ПустаяДата = Дата(1, 1, 1, 0, 0, 0);
	
	ДанныеЗвонка = Новый Структура;
	ДанныеЗвонка.Вставить("Направление", Перечисления.ВходящееИсходящееСобытие.ПустаяСсылка());
	ДанныеЗвонка.Вставить("АТС", Перечисления.ДоступныеАТС.ПустаяСсылка());
	ДанныеЗвонка.Вставить("ИдентификаторЗвонкаВАТС", Неопределено);
	ДанныеЗвонка.Вставить("НомерКонтакта", "");
	ДанныеЗвонка.Вставить("НомерОрганизации", "");
	ДанныеЗвонка.Вставить("Событие", Документы.Событие.ПустаяСсылка());
	ДанныеЗвонка.Вставить("ДатаНачалаЗвонка", ПустаяДата);
	ДанныеЗвонка.Вставить("ДатаНачалаРазговора", ПустаяДата);
	ДанныеЗвонка.Вставить("ДатаЗавершенияРазговора", ПустаяДата);
	ДанныеЗвонка.Вставить("ДлительностьРазговора", Неопределено);
	ДанныеЗвонка.Вставить("Неотвеченный", Неопределено);
	ДанныеЗвонка.Вставить("ОпределятьНеотвеченный", Ложь);
	ДанныеЗвонка.Вставить("ВызовЗавершен", Ложь);
	
	ДанныеЗвонка.Вставить("Контакт", Новый Структура);
	ДанныеЗвонка.Контакт.Вставить("КонтактНайден", Неопределено);
	ДанныеЗвонка.Контакт.Вставить("Ссылка", Неопределено);
	ДанныеЗвонка.Контакт.Вставить("Ответственный", Справочники.Сотрудники.ПустаяСсылка());
	ДанныеЗвонка.Контакт.Вставить("ОсновнойКонтакт", Неопределено);
	
	ДанныеЗвонка.Вставить("Пользователь", Новый Структура);
	ДанныеЗвонка.Пользователь.Вставить("Ссылка", Справочники.Пользователи.ПустаяСсылка());
	ДанныеЗвонка.Пользователь.Вставить("ВнутреннийНомер", "");
	ДанныеЗвонка.Пользователь.Вставить("Сотрудник", Справочники.Сотрудники.ПустаяСсылка());
	
	ДанныеЗвонка.Вставить("ЗаписьРазговора", Новый Структура);
	ДанныеЗвонка.ЗаписьРазговора.Вставить("Ссылка", "");
	ДанныеЗвонка.ЗаписьРазговора.Вставить("ТребуетсяЗапросить", Ложь);
	
	Возврат ДанныеЗвонка;
	
КонецФункции

Функция ОбработатьВходящийЗвонок(ДанныеЗвонка, Знач РегистрироватьВходящийДляПользователя) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Направление) Тогда
		ДанныеЗвонка.Направление = Перечисления.ВходящееИсходящееСобытие.Входящее;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПривестиНомерТелефонаКФормату(ДанныеЗвонка);
	ДополнитьДанныеЗвонкаДаннымиКонтакта(ДанныеЗвонка);
	ДополнитьДанныеЗвонкаДаннымиПользователя(ДанныеЗвонка);
	
	НайтиСоздатьСобытиеПоДаннымЗвонка(ДанныеЗвонка);
	
	Если РегистрироватьВходящийДляПользователя Тогда
		РегистрироватьВходящийДляПользователя = ЗначениеЗаполнено(ДанныеЗвонка.Пользователь.Ссылка);
	КонецЕсли;
	
	Если РегистрироватьВходящийДляПользователя Тогда
		ЗарегистрироватьНовыйВходящийЗвонокДляПользователя(ДанныеЗвонка);
	КонецЕсли;
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() И ПоказыватьУведомлениеОНовомЗвонке() Тогда
		ШаблонСообщения = "ТипЗвонка=""[ТипЗвонка]""";
		ПараметрыСообщения = Новый Структура("ТипЗвонка", "НовыйЗвонок");
		ДанныеСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, ПараметрыСообщения);
		ДобавитьСообщениеВСистемуВзаимодействия(ДанныеЗвонка, ДанныеСообщения);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеЗвонка.Событие;
	
КонецФункции

Функция ОбработатьИзменениеЗвонка(ДанныеЗвонка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайтиСобытиеПоДаннымЗвонка(ДанныеЗвонка);
	ДополнитьДанныеЗвонкаДаннымиРегистра(ДанныеЗвонка);
	ДополнитьДанныеЗвонкаДаннымиПользователя(ДанныеЗвонка);
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Событие) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбновитьДанныеЗвонкаВРегистре(ДанныеЗвонка);
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ШаблонСообщения = "ТипЗвонка=""[ТипЗвонка]""";
		ПараметрыСообщения = Новый Структура("ТипЗвонка", "НачалоРазговора");
		ДанныеСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, ПараметрыСообщения);
		ДобавитьСообщениеВСистемуВзаимодействия(ДанныеЗвонка, ДанныеСообщения);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеЗвонка.Событие;
	
КонецФункции

Функция ОбработатьИсходящийЗвонок(ДанныеЗвонка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Направление) Тогда
		ДанныеЗвонка.Направление = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Событие = НайтиСобытиеПоДаннымЗвонка(ДанныеЗвонка, Истина);
	ДополнитьДанныеЗвонкаДаннымиРегистра(ДанныеЗвонка);
	ДополнитьДанныеЗвонкаДаннымиКонтакта(ДанныеЗвонка);
	ДополнитьДанныеЗвонкаДаннымиПользователя(ДанныеЗвонка);
	
	Если НЕ ЗначениеЗаполнено(Событие) Тогда
		Событие = НайтиСоздатьСобытиеПоДаннымЗвонка(ДанныеЗвонка);
	Иначе
		ЗаписатьДанныеЗвонкаВРегистр(ДанныеЗвонка);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Событие;
	
КонецФункции

Функция ОбработатьЗавершениеЗвонка(ДанныеЗвонка) Экспорт
	
	Если ЗначениеЗаполнено(ДанныеЗвонка.ЗаписьРазговора.Ссылка) Тогда
		ДанныеЗвонка.ЗаписьРазговора.ТребуетсяЗапросить = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайтиСобытиеПоДаннымЗвонка(ДанныеЗвонка);
	ДополнитьДанныеЗвонкаДаннымиПользователя(ДанныеЗвонка);
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Событие) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеЗвонкаДоИзменения = НовыйДанныеЗвонка();
	ДанныеЗвонкаДоИзменения.Событие = ДанныеЗвонка.Событие;
	ДанныеЗвонкаДоИзменения.ИдентификаторЗвонкаВАТС = ДанныеЗвонка.ИдентификаторЗвонкаВАТС;
	ДополнитьДанныеЗвонкаДаннымиРегистра(ДанныеЗвонкаДоИзменения);
	
	ДанныеЗвонка.ВызовЗавершен = Истина;
	ОбновитьДанныеЗвонкаВРегистре(ДанныеЗвонка);
	
	Если НЕ ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ШаблонСообщения = "ТипЗвонка=""[ТипЗвонка]""";
		ПараметрыСообщения = Новый Структура("ТипЗвонка", "КонецРазговора");
		ДанныеСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, ПараметрыСообщения);
		ДобавитьСообщениеВСистемуВзаимодействия(ДанныеЗвонка, ДанныеСообщения);
		
		Если ДанныеЗвонкаДоИзменения.Направление = Перечисления.ВходящееИсходящееСобытие.Входящее
			И НЕ ДанныеЗвонкаДоИзменения.Неотвеченный
			И ДанныеЗвонка.Неотвеченный Тогда
			
			СтрокиСообщения = Новый Массив;
			СтрокиСообщения.Добавить(ДанныеЗвонка.ДатаНачалаЗвонка);
			Если ЗначениеЗаполнено(ДанныеЗвонка.Контакт.Ссылка) Тогда
				СтрокиСообщения.Добавить(Строка(ДанныеЗвонка.Контакт.Ссылка));
			КонецЕсли;
			СтрокиСообщения.Добавить(СтрШаблон("(%1)", ДанныеЗвонка.НомерКонтакта));
			СообщениеПользователю = СтрСоединить(СтрокиСообщения, " ");
			
			ПараметрыСообщения = Новый Структура;
			ПараметрыСообщения.Вставить("ТипЗвонка", "Неотвеченный");
			ПараметрыСообщения.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(ДанныеЗвонка.Событие));
			ПараметрыСообщения.Вставить("Представление", СообщениеПользователю);
			ШаблонСообщения = "ТипЗвонка=""[ТипЗвонка]"";НавигационнаяСсылка=""[НавигационнаяСсылка]"";Представление=""[Представление]""";
			ДанныеСообщения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСообщения, ПараметрыСообщения);
			ДобавитьСообщениеВСистемуВзаимодействия(ДанныеЗвонка, ДанныеСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДанныеЗвонкаДоИзменения.Неотвеченный Тогда
		ДобавитьПропущенныйВКонтактЦентр(ДанныеЗвонка);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДанныеЗвонка.Событие;
	
КонецФункции

Процедура ПозвонитьПоНомеру(НомерКому, Контрагент = Неопределено, КонтактноеЛицо = Неопределено, Событие = Неопределено, Ошибка, СтрокаПояснения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ДанныеЗвонка = НовыйДанныеЗвонка();
	ДанныеЗвонка.Направление = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	ДанныеЗвонка.НомерКонтакта = НомерКому;
	ДанныеЗвонка.Пользователь.Ссылка = ТекущийПользователь;
	ДанныеЗвонка.Контакт.ОсновнойКонтакт = Контрагент;
	ДанныеЗвонка.Событие = Событие;
	ДанныеЗвонка.ДатаНачалаЗвонка = ТекущаяДатаСеанса();
	
	Если Константы.ИспользоватьМобильнуюТелефонию.Получить() Тогда
		
		МобильноеУстройство = ПерсональноеМобильноеУстройство();
		Если НЕ ЗначениеЗаполнено(МобильноеУстройство) Тогда
			ВызватьИсключение НСтр("ru='Не выбрано мобильное устройство в персональных настройках.'");
		КонецЕсли;
		
		ДополнитьДанныеЗвонкаДаннымиПользователя(ДанныеЗвонка);
		
		Если ЗначениеЗаполнено(ДанныеЗвонка.Событие) Тогда
			ЗаписатьДанныеЗвонкаВРегистр(ДанныеЗвонка);
		КонецЕсли;
		
		ОбменМобильноеПриложениеОбщее.ПозвонитьКонтрагенту(НомерКому, МобильноеУстройство);
		
		СтрокаПояснения = СтрШаблон(
			НСтр("ru='Вызов: %1,
			|с устройства: %2'"),
			НомерКому,
			МобильноеУстройство);
		
	ИначеЕсли Константы.ИспользоватьОблачнуюТелефонию.Получить() Тогда
		
		ДанныеПользователяАТС = ДанныеПользователяАТС(ТекущийПользователь);
		
		Если ДанныеПользователяАТС = Неопределено Тогда
			Ошибка = "НеЗаполненыНастройкиПользователя";
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеПользователяАТС.ВнутреннийНомер) Тогда
			Ошибка = "НеЗаполненВнутреннийНомерПользователя";
			Возврат;
		КонецЕсли;
		
		ДанныеЗвонка.Пользователь.ВнутреннийНомер = ДанныеПользователяАТС.ВнутреннийНомер;
		ДополнитьДанныеЗвонкаДаннымиПользователя(ДанныеЗвонка);
		
		ПриСозданииИсходящегоВызоваОблачнаяТелефония(ДанныеЗвонка, ДанныеПользователяАТС, Ошибка);
		
		Если ЗначениеЗаполнено(Ошибка) Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПояснения = СтрШаблон(НСтр("ru='Вызов: %1'"), НомерКому);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОблачнаяТелефония

Функция КорректнаяПодписьЗапроса(АТС, Ключ, ПараметрыЗапроса = Неопределено) Экспорт
	
	Возврат ТелефонияПереопределяемый.КорректнаяПодписьЗапроса(АТС, Ключ, ПараметрыЗапроса);
	
КонецФункции

Функция ПолучитьПользователяОтветственногоЗаАбонента(АбонентОтКого) Экспорт
	
	Если Не ЗначениеЗаполнено(АбонентОтКого) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если АбонентОтКого.Метаданные().Реквизиты.Найти("Ответственный") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АбонентОтКого, "Ответственный");
	Если ЗначениеЗаполнено(Ответственный) И ТипЗнч(Ответственный) = Тип("СправочникСсылка.Сотрудники") Тогда
		Ответственный = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(Ответственный);
	КонецЕсли;
	
	Возврат Ответственный;
	
КонецФункции

Процедура ОбработатьПолучениеИнформацииОВызывающемАбоненте(АТС, Знач НомерТелефона, Ответ) Экспорт
	
	ДанныеВызывающегоАбонента = ПолучитьДанныеКлиента(НомерТелефона);
	ТелефонияПереопределяемый.ПриОбработкеПолученияИнформацииОВызывающемАбоненте(АТС, ДанныеВызывающегоАбонента, Ответ);
	
КонецПроцедуры

Функция ПолучитьДанныеКлиента(НомерКонтакта) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Абонент = ПолучитьАбонентаПоНомеруТелефона(НомерКонтакта);
	
	Если НЕ ЗначениеЗаполнено(Абонент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ответственный = ПолучитьПользователяОтветственногоЗаАбонента(Абонент);
	ВнутреннийНомерОтветственного = "";
	Если ЗначениеЗаполнено(Ответственный) Тогда
		ВнутреннийНомерОтветственного = ВнутреннийНомерПользователя(Ответственный);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Представление", Строка(Абонент));
	Результат.Вставить("ВнутреннийНомерОтветственного", ВнутреннийНомерОтветственного);
	Результат.Вставить("МаршрутизироватьВызовНаОтветственного", Ложь);
	
	Если ЗначениеЗаполнено(ВнутреннийНомерОтветственного) Тогда
		Результат.МаршрутизироватьВызовНаОтветственного = ПолучитьНастройкиТелефонии().МаршрутизироватьВходящиеНаОтветственных;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область МобильнаяТелефония

Функция ОбработатьЗвонок(Знач НомерКонтакта, Знач Пользователь, Знач ДатаЗвонка, Знач ТипЗвонка, Знач ВариантСобытия) Экспорт
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НужноОбработатьЗвонок = Истина;
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьМобильнуюТелефонию") И ОбрабатыватьЗвонокСНомера(НомерКонтакта) Тогда
		НужноОбработатьЗвонок = Истина;
	Иначе
		НужноОбработатьЗвонок = Ложь;
	КонецЕсли;
	
	Если НЕ НужноОбработатьЗвонок Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВариантСобытия = "НачалоСигналаВходящего" ИЛИ ВариантСобытия = "НачалоВходящего" ИЛИ ВариантСобытия = "ЗавершениеВходящего" Тогда
		ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Входящее;
	ИначеЕсли ВариантСобытия = "НачалоИсходящего" ИЛИ ВариантСобытия = "ЗавершениеИсходящего" Тогда
		ВходящееИсходящееСобытие = Перечисления.ВходящееИсходящееСобытие.Исходящее;
	КонецЕсли;
	
	ДанныеЗвонка = НовыйДанныеЗвонка();
	ДанныеЗвонка.Направление = ВходящееИсходящееСобытие;
	ДанныеЗвонка.НомерКонтакта = НомерКонтакта;
	
	Если ТипЗвонка = "Входящий" ИЛИ ТипЗвонка = "Исходящий" Тогда
		
		Если ВариантСобытия = "НачалоСигналаВходящего" Тогда
			
			ДанныеЗвонка.ДатаНачалаРазговора = ДатаЗвонка;
			Событие = ОбработатьВходящийЗвонок(ДанныеЗвонка, Истина);
			
		ИначеЕсли ВариантСобытия = "НачалоВходящего" Тогда
			
			ДанныеЗвонка.ДатаНачалаРазговора = ДатаЗвонка;
			Событие = ОбработатьИзменениеЗвонка(ДанныеЗвонка);
			
		ИначеЕсли ВариантСобытия = "НачалоИсходящего" Тогда
			
			ДанныеЗвонка.ДатаНачалаЗвонка = ДатаЗвонка;
			ДанныеЗвонка.ДатаНачалаРазговора = ДатаЗвонка;
			Событие = ОбработатьИсходящийЗвонок(ДанныеЗвонка);
			
		ИначеЕсли ВариантСобытия = "ЗавершениеВходящего" ИЛИ ВариантСобытия = "ЗавершениеИсходящего" Тогда
			
			ДанныеЗвонка.ДатаЗавершенияРазговора = ДатаЗвонка;
			Событие = ОбработатьЗавершениеЗвонка(ДанныеЗвонка);
			
		Иначе
			
			ВызватьИсключение СтрШаблон(НСтр("ru='Не реализована обработка варианта события: ""%1""'"), ВариантСобытия);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗвонка = "Пропущенный" Тогда
		
		Если ВариантСобытия = "ЗавершениеВходящего" Тогда
			
			ДанныеЗвонка.ДатаЗавершенияРазговора = ДатаЗвонка;
			ДанныеЗвонка.Неотвеченный = Истина;
			Событие = ОбработатьЗавершениеЗвонка(ДанныеЗвонка);
			
		Иначе
			
			ВызватьИсключение СтрШаблон(НСтр("ru='Не реализована обработка варианта события: ""%1""'"), ВариантСобытия);
			
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(НСтр("ru='Не реализована обработка типа звонка: ""%1""'"), ТипЗвонка);
		
	КонецЕсли;
	
	Возврат Событие;
	
КонецФункции

Функция НайтиСобытиеПоДаннымЗвонка(ДанныеЗвонка, ИскатьПоНомеруКонтакта = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеЗвонков.Событие КАК Событие
	|ИЗ
	|	РегистрСведений.ДанныеЗвонков КАК ДанныеЗвонков
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ИскатьПоИдентификатору
	|				ТОГДА ДанныеЗвонков.ИдентификаторЗвонкаВАТС = &ИдентификаторЗвонкаВАТС
	|			ИНАЧЕ НЕ ДанныеЗвонков.ВызовЗавершен
	|					И ДанныеЗвонков.ВходящееИсходящее = &ВходящееИсходящее
	|					И ВЫБОР
	|						КОГДА &ВходящееИсходящее = ЗНАЧЕНИЕ(Перечисление.ВходящееИсходящееСобытие.Входящее)
	|							ТОГДА ДанныеЗвонков.НомерОтКого ПОДОБНО &ПоисковоеВыражение
	|						ИНАЧЕ ДанныеЗвонков.НомерКому ПОДОБНО &ПоисковоеВыражение
	|					КОНЕЦ
	|					И ДанныеЗвонков.ИдентификаторЗвонкаВАТС = """"
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеЗвонков.ДатаСобытия УБЫВ";
	
	ПоисковоеВыражение = СтрЗаменить(ДанныеЗвонка.НомерКонтакта, "+", "") + "%";
	Если СтрНачинаетсяС(ПоисковоеВыражение, "7") Или СтрНачинаетсяС(ПоисковоеВыражение, "8") Тогда
		ПоисковоеВыражение = "[78]" + Сред(ПоисковоеВыражение, 2);
	КонецЕсли;
	
	ИскатьПоИдентификатору = НЕ ИскатьПоНомеруКонтакта И ДанныеЗвонка.ИдентификаторЗвонкаВАТС <> Неопределено;
	
	Запрос.УстановитьПараметр("ИскатьПоИдентификатору", ИскатьПоИдентификатору);
	Запрос.УстановитьПараметр("ИдентификаторЗвонкаВАТС", ДанныеЗвонка.ИдентификаторЗвонкаВАТС);
	Запрос.УстановитьПараметр("ВходящееИсходящее", ДанныеЗвонка.Направление);
	Запрос.УстановитьПараметр("ПоисковоеВыражение", ПоисковоеВыражение);
	
	Событие = Документы.Событие.ПустаяСсылка();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Событие = Выборка.Событие;
	КонецЕсли;
	
	ДанныеЗвонка.Событие = Событие;
	
	Возврат Событие;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияСистемаВзаимодействия

Функция ИдентификаторОбсужденияЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
#Если НЕ ВнешнееСоединение Тогда
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	Обсуждение = Неопределено;
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Поиск обсуждения Системы взаимодействия по ключу'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Обсуждение <> Неопределено Тогда
		ОбсуждениеЖурналИдентификатор = Обсуждение.Идентификатор;
	КонецЕсли;
#КонецЕсли
	
	Возврат ОбсуждениеЖурналИдентификатор;
	
КонецФункции

Функция КлючОбсужденияЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
	Обсуждение = Неопределено;
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
#Если НЕ ВнешнееСоединение Тогда
	Если НЕ СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда
		Возврат ОбсуждениеЖурналИдентификатор;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(Ключ);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Поиск обсуждения Системы взаимодействия по ключу'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
#КонецЕсли
	
	Если Обсуждение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

Функция СоздатьОбсуждениеЖурналЗвонков() Экспорт
	
	ОбсуждениеЖурналИдентификатор = Неопределено;
	
#Если НЕ ВнешнееСоединение Тогда
	Ключ = КлючСлужебногоОбсужденияСистемыВзаимодействия();
	
	ОбсуждениеЖурнал = СистемаВзаимодействия.СоздатьОбсуждение();
	ОбсуждениеЖурнал.Ключ = Ключ;
	ОбсуждениеЖурнал.Отображаемое = Ложь;
	ОбсуждениеЖурнал.Заголовок = НСтр("ru='Журнал звонков'");
	ОбсуждениеЖурнал.Участники.Добавить(СистемаВзаимодействия.СтандартныеПользователи.ВсеПользователиПриложения);
	
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		ОбсуждениеЖурнал.Записать();
		ОбсуждениеЖурналИдентификатор = ОбсуждениеЖурнал.Идентификатор;
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru='Создание служебного обсуждения Системы взаимодействия'"), УровеньЖурналаРегистрации.Ошибка,, Ключ, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
#КонецЕсли
	
	Возврат ОбсуждениеЖурналИдентификатор;
	
КонецФункции

#КонецОбласти

#Область ИнтеграцияТехнологияСервиса

// См. ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриЗагрузкеПользователяИнформационнойБазы.
//
Процедура ПриЗагрузкеПользователяИнформационнойБазы(ПользовательИБ) Экспорт
	
	Если ПользовательИБ.Имя <> СлужебныйПользовательТелефонииЛогин() Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательИБ.ПоказыватьВСпискеВыбора = Ложь;
	
	Если НЕ ПользовательИБ.ПарольУстановлен Тогда
		ПользовательИБ.Пароль = СлужебныйПользовательТелефонииПароль();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкиТелефонии

Функция КорневойАдресАТС() Экспорт
	
	Возврат ТелефонияПереопределяемый.КорневойАдресАТС();
	
КонецФункции

Функция КорневойURLСервисаОсновнойПубликации(ИспользуемаяАТС) Экспорт
	
	Возврат ТелефонияПереопределяемый.КорневойURLСервисаОсновнойПубликации(ИспользуемаяАТС);
	
КонецФункции

Функция ПолучитьНастройкиТелефонии() Экспорт
	
	Результат = НастройкиТелефонииПоУмолчанию();
	СохраненныеНастройки = Константы.НастройкиТелефонии.Получить().Получить();
	
	Если СохраненныеНастройки <> Неопределено Тогда
		
		Для Каждого КлючИЗначение Из Результат Цикл
			Если СохраненныеНастройки.Свойство(КлючИЗначение.Ключ) Тогда
				Результат[КлючИЗначение.Ключ] = СохраненныеНастройки[КлючИЗначение.Ключ];
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановитьНастройкуТелефонии(Ключ, Значение) Экспорт
	
	НастройкиТелефонии = ПолучитьНастройкиТелефонии();
	НастройкиТелефонии.Вставить(Ключ, Значение);
	
	Константы.НастройкиТелефонии.Установить(Новый ХранилищеЗначения(НастройкиТелефонии, Новый СжатиеДанных(6)));
	
КонецФункции

Функция ПерсональноеМобильноеУстройство() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТелефонии", "УзелОбмена", Неопределено);
	
КонецФункции

Функция АдресОбратногоВызоваОблачнаяТелефония(ИспользуемаяАТС = Неопределено) Экспорт
	
	Перем НавигационнаяСсылка;
	
	Если ИспользуемаяАТС = Неопределено Тогда
		ИспользуемаяАТС = Константы.ИспользуемаяАТС.Получить();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИспользуемаяАТС) Тогда
		Возврат НавигационнаяСсылка;
	КонецЕсли;
	
	АдресСервераОсновнойПубликации = Неопределено;
	АдресРесурсаОсновнойПубликации = Неопределено;
	
	ОбщиеНастройкиТелефонии = Константы.ОбщиеНастройкиТелефонии.Получить().Получить();
	ЕстьНастройкиПубликации = ТипЗнч(ОбщиеНастройкиТелефонии) = Тип("Структура");
	
	НавигационнаяСсылкаИнформационнойБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	БазаОпубликованаНаВебСервере = СтрНачинаетсяС(НавигационнаяСсылкаИнформационнойБазы, "http://") ИЛИ СтрНачинаетсяС(НавигационнаяСсылкаИнформационнойБазы, "https://");
	
	ПараметрыПодключения = Новый Структура;
	ШаблонСтрокиПодключения = Неопределено;
	
	Если ЕстьНастройкиПубликации Тогда
		
		Если ОбщиеНастройкиТелефонии.Свойство("АдресСервераОсновнойПубликации") И ЗначениеЗаполнено(ОбщиеНастройкиТелефонии.АдресСервераОсновнойПубликации) Тогда
			ПараметрыПодключения.Вставить("АдресСервераОсновнойПубликации", ОбщиеНастройкиТелефонии.АдресСервераОсновнойПубликации);
		КонецЕсли;
		
		НастройкиПубликацииИнтеграции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОбщиеНастройкиТелефонии, "НастройкиПубликации", Новый Соответствие).Получить(ИспользуемаяАТС);
		
		Если ТипЗнч(НастройкиПубликацииИнтеграции) = Тип("Структура")
			И НастройкиПубликацииИнтеграции.Свойство("АдресРесурсаОсновнойПубликации")
			И ЗначениеЗаполнено(НастройкиПубликацииИнтеграции.АдресРесурсаОсновнойПубликации)Тогда
			
			ПараметрыПодключения.Вставить("АдресРесурсаОсновнойПубликации", НастройкиПубликацииИнтеграции.АдресРесурсаОсновнойПубликации);
		КонецЕсли;
		
	ИначеЕсли БазаОпубликованаНаВебСервере Тогда
		
		ПараметрыПодключения.Вставить("АдресСервераОсновнойПубликации", НавигационнаяСсылкаИнформационнойБазы);
		
	КонецЕсли;
	
	ПараметрыПодключения.Вставить("КорневойURL", КорневойURLСервисаОсновнойПубликации(ИспользуемаяАТС));
	ПараметрыПодключения.Вставить("ОбластьДанных", Формат(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "ЧГ=0"));
	
	Если БазаОпубликованаНаВебСервере И НЕ ЕстьНастройкиПубликации Тогда
		ШаблонСтрокиПодключения = "[АдресСервераОсновнойПубликации]/hs/[КорневойURL]";
	ИначеЕсли ОбщегоНазначения.РазделениеВключено() Тогда
		Если ПараметрыПодключения.Свойство("АдресРесурсаОсновнойПубликации") И ЗначениеЗаполнено(ПараметрыПодключения.АдресРесурсаОсновнойПубликации) Тогда
			ШаблонСтрокиПодключения = "[АдресСервераОсновнойПубликации]/[АдресРесурсаОсновнойПубликации]/[ОбластьДанных]/hs/[КорневойURL]";
		Иначе
			ШаблонСтрокиПодключения = "[АдресСервераОсновнойПубликации]/[ОбластьДанных]/hs/[КорневойURL]";
		КонецЕсли;
	Иначе
		ШаблонСтрокиПодключения = "[АдресСервераОсновнойПубликации]/[АдресРесурсаОсновнойПубликации]/hs/[КорневойURL]";
	КонецЕсли;
	
	АдресОбратногоВызова = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ШаблонСтрокиПодключения, ПараметрыПодключения);
	
	ТелефонияПереопределяемый.ПриПолученииАдресаОбратногоВызова(ИспользуемаяАТС, ШаблонСтрокиПодключения, ПараметрыПодключения, АдресОбратногоВызова);
	
	Возврат АдресОбратногоВызова;
	
	// для ростелеком Адрес публикации 1С:УНФ не должен содержать https
	
КонецФункции

Функция СтрокаАвторизацииФайлVRDТекстПодсказки() Экспорт
	
	Возврат СтрШаблон(
		"Usr=%1;Pwd=&quot;%2&quot;;",
		СлужебныйПользовательТелефонииЛогин(),
		СлужебныйПользовательТелефонииПароль());
	
КонецФункции

Функция ИспользоватьНастройкуМаршрутизацииЗвонковНаОтветственного(АТС) Экспорт
	
	СписокАТС = Новый Массив;
	
	ТелефонияПереопределяемый.НастройкаМаршрутизацииАТСИспользуетсяВ(СписокАТС);
	
	Возврат СписокАТС.Найти(АТС) <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область РаботаСJSON

// Преобразует текст JSON в структуру. Описание параметров см. в Синтакс-помощнике.
// Для преобразования полей с типом дата в формате UTC можно вызвать функцию восстановления:
// ТелефонияСервер.ВосстановлениеСвойствСоЗначениямиДатаUTC
// 
// Возвращаемое значение:
//   - Структура
//
Функция ПрочитатьJSONВСтруктуру(ТекстJSON,
		ИменаСвойствСоЗначениямиДата = Неопределено,
		Знач ОжидаемыйФорматДаты = Неопределено,
		ИмяФункцииВосстановления = Неопределено,
		МодульФункцииВосстановления = Неопределено,
		ДополнительныеПараметрыФункцииВосстановления = Неопределено,
		ИменаСвойствДляОбработкиВосстановления = Неопределено) Экспорт
	
	Если ТекстJSON = "" Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	Если ОжидаемыйФорматДаты = Неопределено Тогда
		ОжидаемыйФорматДаты = ФорматДатыJSON.ISO;
	КонецЕсли;
	
	МассивСвойствДляОбработкиВосстановления = Неопределено;
	Если ИменаСвойствДляОбработкиВосстановления <> Неопределено Тогда
		Если ТипЗнч(ИменаСвойствДляОбработкиВосстановления) = Тип("Строка") Тогда
			МассивСвойствДляОбработкиВосстановления = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаСвойствДляОбработкиВосстановления);
		Иначе
			МассивСвойствДляОбработкиВосстановления = ИменаСвойствДляОбработкиВосстановления;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = ПрочитатьJSON(
		ЧтениеJSON,
		Ложь,
		ИменаСвойствСоЗначениямиДата,
		ОжидаемыйФорматДаты,
		ИмяФункцииВосстановления,
		МодульФункцииВосстановления,
		ДополнительныеПараметрыФункцииВосстановления,
		МассивСвойствДляОбработкиВосстановления);
	
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Преобразует произвольную структуру в JSON. См. описание в Синтакс-помощнике.
//
// Параметры:
//  СтруктураПараметров - Структура
// 
// Возвращаемое значение:
//   - Строка
//
Функция СоздатьJSONИзСтруктуры(СтруктураПараметров, ПереносСтрок = Неопределено) Экспорт
	
	Если СтруктураПараметров.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ЗаписьJSON = Новый ЗаписьJSON;
	
	Если ПереносСтрок = Неопределено Тогда
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON;
	Иначе
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрок);
	КонецЕсли;
	
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураПараметров);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Функция восстановления значений JSON для вызова из ТелефонияСервер.ПрочитатьJSONВСтруктуру
//  См. описание параметров с синтакс-помощнике к методу ПрочитатьJSON (глобальный контекст).
//
// Возвращаемое значение:
//   - Произвольный
//
Функция ВосстановлениеСвойствСоЗначениямиДатаUTC(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	ПреобразованноеЗначение = Дата(1970,01,01) + Число(Значение);
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("ЧасовойПояс") Тогда
		ПреобразованноеЗначение = МестноеВремя(ПреобразованноеЗначение, ДополнительныеПараметры.ЧасовойПояс);
	КонецЕсли;
	
	Возврат ПреобразованноеЗначение;
	
КонецФункции

// Функция восстановления значений JSON для вызова из ТелефонияСервер.ПрочитатьJSONВСтруктуру
//  См. описание параметров с синтакс-помощнике к методу ПрочитатьJSON (глобальный контекст).
//
// Возвращаемое значение:
//   - Произвольный
//
Функция ВосстановлениеСвойствСоЗначениямиДатаISO(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	ПреобразованноеЗначение = СтрЗаменить(Значение, " ", "T");
	ПреобразованноеЗначение = ПрочитатьДатуJSON(ПреобразованноеЗначение, ФорматДатыJSON.ISO);
	Возврат ПреобразованноеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСДаннымиЗвонка

Процедура ПривестиНомерТелефонаКФормату(ДанныеЗвонка)
	
	Если ТипЗнч(ДанныеЗвонка.НомерКонтакта) <> Тип("Строка") Тогда
		ДанныеЗвонка.НомерКонтакта = Строка(ДанныеЗвонка.НомерКонтакта);
	КонецЕсли;
	
	Если СтрНачинаетсяС(ДанныеЗвонка.НомерКонтакта, "7") Тогда
		ДанныеЗвонка.НомерКонтакта = "+" + ДанныеЗвонка.НомерКонтакта;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗвонкаДаннымиКонтакта(ДанныеЗвонка)
	
	Если ЗначениеЗаполнено(ДанныеЗвонка.НомерКонтакта) И ДанныеЗвонка.Контакт.КонтактНайден = Неопределено Тогда
		ДанныеЗвонка.Контакт.Ссылка = ПолучитьАбонентаПоНомеруТелефона(ДанныеЗвонка.НомерКонтакта);
	КонецЕсли;
	
	ДанныеЗвонка.Контакт.КонтактНайден = ЗначениеЗаполнено(ДанныеЗвонка.Контакт.Ссылка);
	Если ДанныеЗвонка.Контакт.КонтактНайден Тогда
		ДанныеЗвонка.Контакт.Ответственный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗвонка.Контакт.Ссылка, "Ответственный");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗвонкаДаннымиПользователя(ДанныеЗвонка)
	
	Если ЗначениеЗаполнено(ДанныеЗвонка.Пользователь.Ссылка) И НЕ ЗначениеЗаполнено(ДанныеЗвонка.Пользователь.ВнутреннийНомер) Тогда
		ДанныеЗвонка.Пользователь.ВнутреннийНомер = ВнутреннийНомерПользователя(ДанныеЗвонка.Пользователь.Ссылка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Пользователь.Ссылка) И ЗначениеЗаполнено(ДанныеЗвонка.Пользователь.ВнутреннийНомер) Тогда
		ДанныеЗвонка.Пользователь.Ссылка = ПолучитьПользователяПоВнутреннемуНомеру(ДанныеЗвонка.Пользователь.ВнутреннийНомер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗвонка.Пользователь.Ссылка) И НЕ ЗначениеЗаполнено(ДанныеЗвонка.Пользователь.Сотрудник) Тогда
		ДанныеЗвонка.Пользователь.Сотрудник = ПолучитьСотрудникаПоПользователю(ДанныеЗвонка.Пользователь.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьДанныеЗвонкаВРегистр(ДанныеЗвонка)
	
	ТранзакцияАктивна = ТранзакцияАктивна();
	
	Если НЕ ТранзакцияАктивна Тогда
		НачатьТранзакцию();
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ДанныеЗвонков");
		Если ДанныеЗвонка.ИдентификаторЗвонкаВАТС <> Неопределено Тогда
			ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗвонкаВАТС", ДанныеЗвонка.ИдентификаторЗвонкаВАТС);
		КонецЕсли;
		БлокировкаДанных.Заблокировать();
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДанныеЗвонков.СоздатьНаборЗаписей(); 
	НаборЗаписей.Отбор.Событие.Значение = ДанныеЗвонка.Событие;
	НаборЗаписей.Отбор.Событие.Использование = Истина;
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		Запись = НаборЗаписей[0];
	Иначе
		Запись = НаборЗаписей.Добавить();
	КонецЕсли;
	
	ДополнитьСтрокуРегистраДаннымиЗвонка(Запись, ДанныеЗвонка);
	НаборЗаписей.Записать(Истина);
	
	Если НЕ ТранзакцияАктивна Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеЗвонкаВРегистре(ДанныеЗвонка)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ДанныеЗвонков");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Событие", ДанныеЗвонка.Событие);
	ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗвонкаВАТС", ДанныеЗвонка.ИдентификаторЗвонкаВАТС);
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.ДанныеЗвонков.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Событие = ДанныеЗвонка.Событие;
		МенеджерЗаписи.ИдентификаторЗвонкаВАТС = ДанныеЗвонка.ИдентификаторЗвонкаВАТС;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			ДополнитьСтрокуРегистраДаннымиЗвонка(МенеджерЗаписи, ДанныеЗвонка);
			МенеджерЗаписи.Записать();
			ДополнитьДанныеЗвонкаДаннымиРегистра(ДанныеЗвонка, МенеджерЗаписи);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ТелефонияПереопределяемый.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ДополнитьСтрокуРегистраДаннымиЗвонка(ЗаписьРегистра, ДанныеЗвонка)
	
	Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.Событие) Тогда
		ЗаписьРегистра.Событие = ДанныеЗвонка.Событие;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.ИдентификаторЗвонкаВАТС) Тогда
		ЗаписьРегистра.ИдентификаторЗвонкаВАТС = ДанныеЗвонка.ИдентификаторЗвонкаВАТС;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.ДатаСобытия) Тогда
		ЗаписьРегистра.ДатаСобытия = ДанныеЗвонка.ДатаНачалаЗвонка;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.НачалоРазговора) Тогда
		ЗаписьРегистра.НачалоРазговора = ДанныеЗвонка.ДатаНачалаРазговора;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.ВходящееИсходящее) Тогда
		ЗаписьРегистра.ВходящееИсходящее = ДанныеЗвонка.Направление;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.Контрагент) Тогда
		ЗаписьРегистра.Контрагент = ДанныеЗвонка.Контакт.Ссылка;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.НомерОрганизации) Тогда
		ЗаписьРегистра.НомерОрганизации = ДанныеЗвонка.НомерОрганизации;
	КонецЕсли;
	
	ОбновитьНомерКому = Ложь;
	ОбновитьНомерОтКого = Ложь;
	
	Если ЗаписьРегистра.ВходящееИсходящее = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		НомерКому   = ДанныеЗвонка.Пользователь.ВнутреннийНомер;
		НомерОтКого = ДанныеЗвонка.НомерКонтакта;
		
		ОбновитьНомерКому = ЗначениеЗаполнено(НомерКому);
	Иначе
		НомерКому   = ДанныеЗвонка.НомерКонтакта;
		НомерОтКого = ДанныеЗвонка.Пользователь.ВнутреннийНомер;
		
		ОбновитьНомерОтКого = ЗначениеЗаполнено(НомерОтКого);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.НомерКому) ИЛИ ОбновитьНомерКому Тогда
		ЗаписьРегистра.НомерКому = НомерКому;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.НомерОтКого) ИЛИ ОбновитьНомерОтКого Тогда
		ЗаписьРегистра.НомерОтКого = НомерОтКого;
	КонецЕсли;
	
	Если ДанныеЗвонка.ВызовЗавершен Тогда
		Если ЗначениеЗаполнено(ДанныеЗвонка.ДлительностьРазговора) Тогда
			ЗаписьРегистра.ДлительностьРазговора = ДанныеЗвонка.ДлительностьРазговора;
		ИначеЕсли ЗначениеЗаполнено(ДанныеЗвонка.ДатаЗавершенияРазговора) И ЗначениеЗаполнено(ЗаписьРегистра.НачалоРазговора) Тогда
			ЗаписьРегистра.ДлительностьРазговора = ДанныеЗвонка.ДатаЗавершенияРазговора - ЗаписьРегистра.НачалоРазговора;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗвонка.Пользователь.Сотрудник)Тогда
			ЗаписьРегистра.Сотрудник = ДанныеЗвонка.Пользователь.Сотрудник;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеЗвонка.ЗаписьРазговора.Ссылка) Тогда
			ЗаписьРегистра.СсылкаНаЗаписьРазговора = ДанныеЗвонка.ЗаписьРазговора.Ссылка;
		КонецЕсли;
		ЗаписьРегистра.ТребуетсяЗапроситьЗаписьРазговора = ДанныеЗвонка.ЗаписьРазговора.ТребуетсяЗапросить;
		
		Если ДанныеЗвонка.ОпределятьНеотвеченный Тогда
			ЗаписьРегистра.Неотвеченный = ЗаписьРегистра.ДлительностьРазговора = 0;
		Иначе
			ЗаписьРегистра.Неотвеченный = ДанныеЗвонка.Неотвеченный;
		КонецЕсли;
		
		ЗаписьРегистра.ВызовЗавершен = ДанныеЗвонка.ВызовЗавершен;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьДанныеЗвонкаДаннымиРегистра(ДанныеЗвонка, Запись = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Событие) Тогда
		НайтиСобытиеПоДаннымЗвонка(ДанныеЗвонка);
	КонецЕсли;
	
	Если Запись = Неопределено Тогда
		Запись = РегистрыСведений.ДанныеЗвонков.СоздатьМенеджерЗаписи();
		Запись.Событие = ДанныеЗвонка.Событие;
		Запись.ИдентификаторЗвонкаВАТС = ДанныеЗвонка.ИдентификаторЗвонкаВАТС;
		Запись.Прочитать();
		Если НЕ Запись.Выбран() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Запись.ВходящееИсходящее = Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		НомерКонтакта               = Запись.НомерОтКого;
		ПользовательВнутреннийНомер = Запись.НомерКому;
	Иначе
		НомерКонтакта               = Запись.НомерКому;
		ПользовательВнутреннийНомер = Запись.НомерОтКого;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Событие) Тогда
		ДанныеЗвонка.Событие = Запись.Событие;
	КонецЕсли;
	ДанныеЗвонка.ИдентификаторЗвонкаВАТС      = Запись.ИдентификаторЗвонкаВАТС;
	ДанныеЗвонка.НомерКонтакта                = НомерКонтакта;
	ДанныеЗвонка.Направление                  = Запись.ВходящееИсходящее;
	ДанныеЗвонка.НомерОрганизации             = Запись.НомерОрганизации;
	ДанныеЗвонка.Пользователь.Сотрудник       = Запись.Сотрудник;
	ДанныеЗвонка.ДатаНачалаЗвонка             = Запись.ДатаСобытия;
	ДанныеЗвонка.ДатаЗавершенияРазговора      = Запись.НачалоРазговора + Запись.ДлительностьРазговора;
	ДанныеЗвонка.Неотвеченный                 = Запись.Неотвеченный;
	ДанныеЗвонка.ВызовЗавершен                = Запись.ВызовЗавершен;
	ДанныеЗвонка.ЗаписьРазговора.Ссылка       = Запись.СсылкаНаЗаписьРазговора;
	ДанныеЗвонка.ЗаписьРазговора.ТребуетсяЗапросить = Запись.ТребуетсяЗапроситьЗаписьРазговора;
	
	ДанныеЗвонка.Контакт.Ссылка = Запись.Контрагент;
	ДанныеЗвонка.Контакт.КонтактНайден = ЗначениеЗаполнено(ДанныеЗвонка.Контакт.Ссылка);
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.Пользователь.ВнутреннийНомер) Тогда
		ДанныеЗвонка.Пользователь.ВнутреннийНомер = ПользовательВнутреннийНомер;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.ДатаНачалаРазговора) Тогда
		ДанныеЗвонка.ДатаНачалаРазговора = Запись.НачалоРазговора;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗвонка.ДлительностьРазговора) Тогда
		ДанныеЗвонка.ДлительностьРазговора = Запись.ДлительностьРазговора;
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиСоздатьСобытиеПоДаннымЗвонка(ДанныеЗвонка)
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ДанныеЗвонков");
	
	Если ДанныеЗвонка.ИдентификаторЗвонкаВАТС <> Неопределено Тогда
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторЗвонкаВАТС", ДанныеЗвонка.ИдентификаторЗвонкаВАТС);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		БлокировкаДанных.Заблокировать();
		
		Если ДанныеЗвонка.ИдентификаторЗвонкаВАТС <> Неопределено Тогда
			НайтиСобытиеПоДаннымЗвонка(ДанныеЗвонка);
		КонецЕсли;
		
		НужноСоздатьСобытие = НЕ ЗначениеЗаполнено(ДанныеЗвонка.Событие);
		Если НужноСоздатьСобытие Тогда
			СобытиеОбъект = Документы.Событие.СоздатьДокумент();
			ЗаполнитьСобытиеПоДаннымЗвонка(СобытиеОбъект, ДанныеЗвонка);
			СобытиеОбъект.Записать();
			
			ДанныеЗвонка.Событие = СобытиеОбъект.Ссылка;
		КонецЕсли;
		
		ЗаписатьДанныеЗвонкаВРегистр(ДанныеЗвонка);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ЗаписьЖурналаРегистрации(
			ТелефонияПереопределяемый.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДанныеЗвонка.Событие;
	
КонецФункции

Процедура ЗаполнитьСобытиеПоДаннымЗвонка(СобытиеОбъект, ДанныеЗвонка)
	
	ОсновнойКонтакт = Неопределено;
	ДанныеЗаполнения = Неопределено;
	
	Контакт = ДанныеЗвонка.Контакт.Ссылка;
	
	Если ЗначениеЗаполнено(Контакт) И ТипЗнч(Контакт) = Тип("СправочникСсылка.Лиды") Тогда
		ОсновнойКонтакт = Контакт;
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ТипСобытия", Перечисления.ТипыСобытий.ТелефонныйЗвонок);
		ДанныеЗаполнения.Вставить("Лид", Контакт);
	КонецЕсли;
	
	СобытиеОбъект.ДополнительныеСвойства.Вставить("НомерОрганизации", ДанныеЗвонка.НомерОрганизации);
	СобытиеОбъект.Заполнить(ДанныеЗаполнения);
	
	СобытиеОбъект.Дата = ТекущаяДатаСеанса();
	СобытиеОбъект.УстановитьНовыйНомер();
	СобытиеОбъект.НачалоСобытия = ДанныеЗвонка.ДатаНачалаЗвонка;
	СобытиеОбъект.ОкончаниеСобытия = ДанныеЗвонка.ДатаНачалаЗвонка;
	СобытиеОбъект.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок;
	СобытиеОбъект.Состояние = Справочники.СостоянияСобытий.Завершено;
	СобытиеОбъект.ВходящееИсходящееСобытие = ДанныеЗвонка.Направление;
	СобытиеОбъект.Ответственный = ДанныеЗвонка.Пользователь.Сотрудник;
	СобытиеОбъект.Автор = Пользователи.ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(Контакт) Тогда
		
		Участник = СобытиеОбъект.Участники.Добавить();
		Участник.Контакт = "";
		Участник.КакСвязаться = ДанныеЗвонка.НомерКонтакта;
		
		СобытиеОбъект.Участники.Вставить(0);
		
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		ОсновнойКонтакт = Контакт;
		
		Участник = СобытиеОбъект.Участники.Добавить();
		Участник.Контакт = Контакт;
		Участник.КакСвязаться = Документы.Событие.ПолучитьКакСвязаться(Контакт, Перечисления.ТипыКонтактнойИнформации.Телефон);
		
	ИначеЕсли ТипЗнч(Контакт) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
		
		Участник = СобытиеОбъект.Участники.Добавить();
		Участник.Контакт = Контакт;
		Участник.КакСвязаться = Документы.Событие.ПолучитьКакСвязаться(Контакт, Перечисления.ТипыКонтактнойИнформации.Телефон);
		
		СвязанныеКонтрагенты = Справочники.КонтактныеЛица.СвязанныеКонтрагенты(Контакт);
		Если СвязанныеКонтрагенты.Количество() = 1 Тогда
			ОсновнойКонтакт = СвязанныеКонтрагенты[0];
		Иначе
			ОсновнойКонтакт = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Если ОсновнойКонтакт <> Неопределено Тогда
			Участник = СобытиеОбъект.Участники.Вставить(0);
			Участник.Контакт = ОсновнойКонтакт;
			Участник.КакСвязаться = Документы.Событие.ПолучитьКакСвязаться(ОсновнойКонтакт, Перечисления.ТипыКонтактнойИнформации.Телефон);
		Иначе
			Участник = СобытиеОбъект.Участники.Вставить(0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаПриемЗапросовОтветов

Функция НовыйПараметрыОтправки()
	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("URL", "");
	ПараметрыОтправки.Вставить("Заголовки", Новый Соответствие);
	ПараметрыОтправки.Вставить("Json", "");
	ПараметрыОтправки.Вставить("ПараметрыТела", Новый Соответствие);
	ПараметрыОтправки.Вставить("Метод", "POST");
	ПараметрыОтправки.Вставить("КоличествоПеренаправлений", 0);
	ПараметрыОтправки.Вставить("ТелоЗапроса");
	
	Возврат ПараметрыОтправки;
	
КонецФункции

Функция НовыйЗащищенноеСоединениеПоПротоколу(Протокол)
	
	Если Протокол <> "https" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение(, Новый СертификатыУдостоверяющихЦентровОС);
	
КонецФункции

Функция ПрочитатьЗначениеЗаголовка(Заголовки, Заголовок, ЗначениеЗаголовка = Неопределено)
	
	Для каждого КлючЗначение Из Заголовки Цикл
		Если НРег(КлючЗначение.Ключ) = НРег(Заголовок) Тогда
			ЗначениеЗаголовка = КлючЗначение.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДополнитьПараметрыОтправкиНеобходимымиЗначениями(ПараметрыОтправки)
	
	ТипКонтентаПоУмолчанию = "application/x-www-form-urlencoded";
	ТипКонтентаJson = "application/json";
	
	Если НЕ ПрочитатьЗначениеЗаголовка(ПараметрыОтправки.Заголовки, "Content-Type") Тогда
		ПараметрыОтправки.Заголовки.Вставить("Content-Type", ТипКонтентаПоУмолчанию);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОтправки.ТелоЗапроса) Тогда
		Если ЗначениеЗаполнено(ПараметрыОтправки.Json) Тогда
			ПараметрыОтправки.Заголовки.Вставить("Content-Type", ТипКонтентаJson);
			Если ТипЗнч(ПараметрыОтправки.Json) = Тип("Строка") Тогда
				ПараметрыОтправки.ТелоЗапроса = ПараметрыОтправки.Json;
			ИначеЕсли ТипЗнч(ПараметрыОтправки.Json) = Тип("Структура") Тогда
				ПараметрыОтправки.ТелоЗапроса = СоздатьJSONИзСтруктуры(ПараметрыОтправки.Json);
			Иначе
				ТекстОшибки = НСтр("ru='Передан некорректный тип параметра Json: ""%1"".
					|Ожидается Строка или Структура.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ТипЗнч(ПараметрыОтправки.Json));
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
		ИначеЕсли ПараметрыОтправки.ПараметрыТела.Количество() <> 0 Тогда
			ПараметрыURL = Новый Массив;
			Для каждого КлючЗначение Из ПараметрыОтправки.ПараметрыТела Цикл
				ПараметрURL = СтрШаблон("%1=%2", КлючЗначение.Ключ, КодироватьСтроку(КлючЗначение.Значение, СпособКодированияСтроки.КодировкаURL));
				ПараметрыURL.Добавить(ПараметрURL);
			КонецЦикла;
			ПараметрыОтправки.ТелоЗапроса = СтрСоединить(ПараметрыURL, "&");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоПеренаправление(HTTPОтвет)
	
	Если HTTPОтвет.КодСостояния <> 301 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Location = "";
	Если НЕ ПрочитатьЗначениеЗаголовка(HTTPОтвет.Заголовки, "Location", Location) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(Location);
	
КонецФункции

Процедура ПроверитьКоличествоПеренаправлений(ПараметрыОтправки)
	
	ОграничениеКоличестваПеренаправлений = 1;
	Если ПараметрыОтправки.КоличествоПеренаправлений <= ОграничениеКоличестваПеренаправлений Тогда
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru='Превышено количество перенаправлений.'");
	
КонецПроцедуры

Функция ОтправитьЗапросРекурсивно(ПараметрыОтправки)
	
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПараметрыОтправки.URL);
	Протокол = СтруктураURI.Схема;
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(Протокол);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(HTTPЗапрос.Заголовки, ПараметрыОтправки.Заголовки);
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.УстановитьТелоИзСтроки(ПараметрыОтправки.ТелоЗапроса, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, СтруктураURI.Порт,,, Прокси, 20, НовыйЗащищенноеСоединениеПоПротоколу(Протокол));
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='ИнициализацияИсходящегоВызова'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТелефонияПереопределяемый.ЗаписатьЗапросВЖурналРегистрации(
		ИмяСобытияДляЖурналаРегистрации,
		ПредставлениеСоответствияСтрокой(HTTPЗапрос.Заголовки) + Символы.ПС + ПараметрыОтправки.ТелоЗапроса);
		
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(ПараметрыОтправки.Метод, HTTPЗапрос);
	
	Если ЭтоПеренаправление(HTTPОтвет) Тогда
		ПараметрыОтправки.КоличествоПеренаправлений = ПараметрыОтправки.КоличествоПеренаправлений + 1;
		ПроверитьКоличествоПеренаправлений(ПараметрыОтправки);
		
		НовыйURL = "";
		ПрочитатьЗначениеЗаголовка(HTTPОтвет.Заголовки, "Location", НовыйURL);
		НовыйURL = РаскодироватьСтроку(НовыйURL, СпособКодированияСтроки.URLВКодировкеURL);
		
		Если СтрНачинаетсяС(НовыйURL, "//") Тогда
			НовыйURL = Протокол + ":" + НовыйURL;
		КонецЕсли;
		
		ПараметрыОтправки.URL = НовыйURL;
		Возврат ОтправитьЗапросРекурсивно(ПараметрыОтправки);
	КонецЕсли;
	
	Возврат HTTPОтвет;
	
КонецФункции

#КонецОбласти

Процедура ПриСозданииИсходящегоВызоваОблачнаяТелефония(ДанныеЗвонка, ДанныеПользователяАТС, Ошибка)
	
	URL = КорневойАдресАТС();
	Если URL = Неопределено Тогда
		Ошибка = "НеЗаполненАдресАТС";
		Возврат;
	КонецЕсли;
	
	ПараметрыОтправки = НовыйПараметрыОтправки();
	ПараметрыОтправки.URL = URL;
	ТелефонияПереопределяемый.ПриСозданииИсходящегоВызова(ДанныеЗвонка, ДанныеПользователяАТС, ПараметрыОтправки, Ошибка);
	
	ДополнитьПараметрыОтправкиНеобходимымиЗначениями(ПараметрыОтправки);
	
	Если ЗначениеЗаполнено(Ошибка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗвонка.Событие) Тогда
		ЗаписатьДанныеЗвонкаВРегистр(ДанныеЗвонка);
	КонецЕсли;
	
	HTTPОтвет = ОтправитьЗапросРекурсивно(ПараметрыОтправки);
	
	ИмяСобытияДляЖурналаРегистрации = НСтр("ru='ИнициализацияИсходящегоВызова'", ОбщегоНазначения.КодОсновногоЯзыка());
	ТелефонияПереопределяемый.ПриОбработкеОтветаНаСозданиеИсходящегоВызова(HTTPОтвет, ИмяСобытияДляЖурналаРегистрации);
	
КонецПроцедуры

Функция КлючСлужебногоОбсужденияСистемыВзаимодействия()
	
	Возврат "ТелефонияЖурналЗвонков";
	
КонецФункции

Процедура ДобавитьСообщениеВСистемуВзаимодействия(ДанныеЗвонка, ДанныеСообщения)
	
#Если НЕ ВнешнееСоединение Тогда
	ЖурналЗвонков = ИдентификаторОбсужденияЖурналЗвонков();
	
	Если ЖурналЗвонков = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Получатели = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеЗвонка.Пользователь.Ссылка) Тогда
		ИдентификаторПользователяИБ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗвонка.Пользователь.Ссылка, "ИдентификаторПользователяИБ");
		Получатели.Добавить(СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ИдентификаторПользователяИБ));
	КонецЕсли;
		
	Сообщение = СистемаВзаимодействия.СоздатьСообщение(ЖурналЗвонков);
	Сообщение.Данные = ДанныеСообщения;
	Для каждого Получатель Из Получатели Цикл
		Сообщение.Получатели.Добавить(Получатель);
	КонецЦикла;
	Сообщение.Записать();
	
#КонецЕсли
	
КонецПроцедуры

Функция СлужебныйПользовательТелефонииЛогин() Экспорт
	Возврат "TelephonyService";
КонецФункции

Функция СлужебныйПользовательТелефонииПароль()
	Возврат "ae71f215-2d74-4528-be4f-f29923b8f3dd";
КонецФункции

Функция АбонентПоНомеруТелефона(ПоисковоеВыражение, ТипыАбонентов)
	
	СекцияОбъединить = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	БазаЗапроса = "
		|ВЫБРАТЬ
		|	КонтактнаяИнформация_1.Ссылка
		|ИЗ
		|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация_1
		|ГДЕ
		|	КонтактнаяИнформация_1.НомерТелефона ПОДОБНО &ПоисковоеВыражение
		|	И КонтактнаяИнформация_1.Тип = &ТипТелефон";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПоисковоеВыражение", ПоисковоеВыражение);
	Запрос.УстановитьПараметр("ТипТелефон", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.Текст = "";
	НомерОбъединения = 0;
	
	Для Каждого ТипАбонента Из ТипыАбонентов Цикл
		
		НомерОбъединения = НомерОбъединения + 1;
		ЧастьОбъединения = СтрЗаменить(БазаЗапроса, "Справочник.Контрагенты", ТипАбонента.ПолноеИмя());
		ЧастьОбъединения = СтрЗаменить(ЧастьОбъединения, "КонтактнаяИнформация_1", "КонтактнаяИнформация_" + НомерОбъединения);
		
		Запрос.Текст = Запрос.Текст + ?(ПустаяСтрока(Запрос.Текст), "", СекцияОбъединить) + ЧастьОбъединения;
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если ТипЗнч(Выборка.Ссылка) = Тип("СправочникСсылка.КонтактыЛидов") Тогда
			Возврат Справочники.КонтактыЛидов.ВладелецКонтакта(Выборка.Ссылка);
		КонецЕсли;
		
		Возврат Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗарегистрироватьНовыйВходящийЗвонокДляПользователя(ДанныеЗвонка)
	
	Набор = РегистрыСведений.ТекущиеВходящиеЗвонки.СоздатьНаборЗаписей();
	Набор.Отбор.ПользовательКому.Установить(ДанныеЗвонка.Пользователь.Ссылка);
	
	ЗаписьНабора = Набор.Добавить();
	ЗаписьНабора.ПользовательКому        = ДанныеЗвонка.Пользователь.Ссылка;
	ЗаписьНабора.НомерТелефонаАбонента   = ДанныеЗвонка.НомерКонтакта;
	ЗаписьНабора.АбонентОтКого           = ДанныеЗвонка.Контакт.Ссылка;
	ЗаписьНабора.ДатаЗвонка              = ДанныеЗвонка.ДатаНачалаЗвонка;
	ЗаписьНабора.Событие                 = ДанныеЗвонка.Событие;
	ЗаписьНабора.ВходящееИсходящее       = ДанныеЗвонка.Направление;
	ЗаписьНабора.ИдентификаторЗвонкаВАТС = ДанныеЗвонка.ИдентификаторЗвонкаВАТС;
	
	Набор.Записать(Истина);
	
КонецПроцедуры

Функция НастройкиТелефонииПоУмолчанию()
	
	Результат = Новый Структура();
	
	Результат.Вставить("МаршрутизироватьВходящиеНаОтветственных", Ложь);
	
	Результат.Вставить("ДействиеТекущегоЗвонкаНайденногоАбонента", "ОткрытьКарточкуАбонента");
	Результат.Вставить("ДействиеТекущегоЗвонкаНеизвестногоАбонента", "ЗадаватьВопрос");
	Результат.Вставить("ДействиеИсходящегоЗвонка", "НичегоНеДелать");
	
	// MangoOffice
	Результат.Вставить("vpbx_api_key", "");
	Результат.Вставить("vpbx_api_salt", "");
	
	// Itoolabs
	Результат.Вставить("АдресОблачнойАТС", "");
	Результат.Вставить("КлючДляАвторизацииВОблачнойАТС", "");
	Результат.Вставить("КлючДляАвторизацииВУНФ", Строка(Новый УникальныйИдентификатор));
	
	// Яндекс
	Результат.Вставить("КлючДляАвторизацииАТСЯндекс", "");
	
	// Ростелеком
	Результат.Вставить("УникальныйКодИдентификации", "");
	Результат.Вставить("УникальныйКлючДляПодписи", "");
	
	Возврат Результат;
	
КонецФункции

Функция ОбрабатыватьЗвонокСНомера(НомерТелефонаАбонента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НеобрабатываемыеТелефонныеНомера.НомерТелефонаАбонента
	|ИЗ
	|	РегистрСведений.НеобрабатываемыеТелефонныеНомера КАК НеобрабатываемыеТелефонныеНомера
	|ГДЕ
	|	НеобрабатываемыеТелефонныеНомера.НомерТелефонаАбонента = &НомерТелефонаАбонента";
	
	Запрос.УстановитьПараметр("НомерТелефонаАбонента", НомерТелефонаАбонента);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

Функция ПолучитьПользователяПоВнутреннемуНомеру(ВнутреннийНомер)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователейТелефонии.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.НастройкиПользователейТелефонии КАК НастройкиПользователейТелефонии
	|ГДЕ
	|	НастройкиПользователейТелефонии.ВнутреннийНомер = &ВнутреннийНомер";
	
	Запрос.УстановитьПараметр("ВнутреннийНомер", ВнутреннийНомер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Пользователь;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДанныеПользователяАТС(Знач ПользовательУНФ = Неопределено)
	
	Если ПользовательУНФ = Неопределено Тогда
		ПользовательУНФ = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПользователейТелефонии.ВнутреннийНомер КАК ВнутреннийНомер,
	|	НастройкиПользователейТелефонии.ИсходящийНомер КАК ИсходящийНомер
	|ИЗ
	|	РегистрСведений.НастройкиПользователейТелефонии КАК НастройкиПользователейТелефонии
	|ГДЕ
	|	НастройкиПользователейТелефонии.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", ПользовательУНФ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура("ВнутреннийНомер,ИсходящийНомер");
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСотрудникаПоПользователю(Пользователь)
	
	Возврат УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Пользователь,
		"ОсновнойОтветственный",
		Справочники.Сотрудники.ПустаяСсылка());
	
КонецФункции

Процедура ИзменитьДоступВБазуСлужебногоПользователяТелефонии(Включить, Знач Пароль, Знач ПользовательИзСправочника)
	
	ОбновляемыеСвойства = Новый Структура;
	ОбновляемыеСвойства.Вставить("СтарыйПароль", Пароль);
	ОбновляемыеСвойства.Вставить("АутентификацияСтандартная", Включить);
	
	УстановитьПривилегированныйРежим(Истина);
	Пользователи.УстановитьСвойстваПользователяИБ(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательИзСправочника, "ИдентификаторПользователяИБ"),
		ОбновляемыеСвойства,
		Ложь,
		Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ДобавитьПропущенныйВКонтактЦентр(ДанныеЗвонка)
	
	Если ДанныеЗвонка.Направление <> Перечисления.ВходящееИсходящееСобытие.Входящее Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеЗвонка.Неотвеченный Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеВходящего = КонтактЦентр.ОписаниеВходящего();
	ОписаниеВходящего.Ответственный.Добавить(ДанныеЗвонка.Пользователь.Сотрудник);
	
	КонтактЦентр.ДобавитьВоВходящее(ДанныеЗвонка.Событие, ОписаниеВходящего);
	
КонецПроцедуры

#КонецОбласти

#Область УстаревшиеПроцедуры

Процедура МаршрутизироватьВызовМанго(call_id, ВнутреннийНомер) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет));
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	
	ЗаписьJSON.ЗаписатьИмяСвойства("command_id");
	ЗаписьJSON.ЗаписатьЗначение(Строка(Новый УникальныйИдентификатор));
	
	ЗаписьJSON.ЗаписатьИмяСвойства("call_id");
	ЗаписьJSON.ЗаписатьЗначение(call_id);
	
	ЗаписьJSON.ЗаписатьИмяСвойства("to_number");
	ЗаписьJSON.ЗаписатьЗначение(ВнутреннийНомер);
	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	json = ЗаписьJSON.Закрыть();
	
	НастройкиТелефонии = ПолучитьНастройкиТелефонии();
	sign = ПолучитьSign(НастройкиТелефонии.vpbx_api_key, json, НастройкиТелефонии.vpbx_api_salt);
	
	ПараметрыТела = Новый Массив;
	ПараметрыТела.Добавить("vpbx_api_key=" + НастройкиТелефонии.vpbx_api_key);
	ПараметрыТела.Добавить("sign=" + sign);
	ПараметрыТела.Добавить(КодироватьСтроку("json=" + json, СпособКодированияСтроки.URLВКодировкеURL));
	
	URL = КорневойАдресАТС() + "commands/route";
	СтруктураURI = ОбщегоНазначенияКлиентСервер.СтруктураURI(URL);
	
	HTTPЗапрос = Новый HTTPЗапрос();
	HTTPЗапрос.АдресРесурса = СтруктураURI.ПутьНаСервере;
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрСоединить(ПараметрыТела, "&"),
		КодировкаТекста.UTF8,
		ИспользованиеByteOrderMark.НеИспользовать);
	
	Прокси = ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема);
	HTTPСоединение = Новый HTTPСоединение(
		СтруктураURI.Хост,
		СтруктураURI.Порт,,,
		Прокси,
		20,
		ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение());
	HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("POST", HTTPЗапрос);
	
	ЗаписьЖурналаРегистрации(
		ТелефонияПереопределяемый.СобытиеЖурналаРегистрации() + "./commands/route",
		УровеньЖурналаРегистрации.Примечание,,,
		json + Символы.ПС + НСтр("ru='Код состояния HTTP ответа: '") + HTTPОтвет.КодСостояния);
	
КонецПроцедуры

Функция ВосстановлениеJSON(Свойство, Значение, ДополнительныеПараметры) Экспорт
	
	Если Свойство = "timestamp" Тогда
		Возврат МестноеВремя(Дата(1970,01,01) + Число(Значение), ЧасовойПоясСеанса());
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьSign(vpbx_api_key, json, vpbx_api_salt) Экспорт
	
	ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.SHA256);
	ХешированиеДанных.Добавить(vpbx_api_key + json + vpbx_api_salt);
	
	Возврат НРег(СтрЗаменить(Строка(ХешированиеДанных.ХешСумма), " ", ""));
	
КонецФункции

#КонецОбласти
