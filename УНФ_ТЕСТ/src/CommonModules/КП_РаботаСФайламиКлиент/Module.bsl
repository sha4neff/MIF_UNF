// Общий модуль (выполняется на стороне клиента) модуля "Конструктор процессов для 1С:УНФ"
// Разработчик Компания "Аналитика. Проекты и решения" +7 495 005-1653, https://kp-unf.ru

#Область СлужебныеПроцедурыИФункции

// Функция открывает диалог выбора файлового каталога и возвращает выбранный пользователем 
// каталог как строковое значение
// Параметры:
//		Объект - объект для выбора каталога
//		РабочийКаталог - начальное значение рабочего каталога
// Возвращаемое значение: Выбранный рабочий каталог
Функция ВыбратьКаталог(Объект, РабочийКаталог="") Экспорт

	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытияФайла.Каталог = РабочийКаталог;
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Фильтр = НСтр("ru='Все файлы(*.*)|*.*';en='All files (*. *) | *. *'");
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите каталог';en='Choose a directory'");
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		РабочийКаталог = ДиалогОткрытияФайла.Каталог;
		// Добавляем слэш в конце, если его нет
		Если Прав(РабочийКаталог,1) <> "\" Тогда
			РабочийКаталог = РабочийКаталог + "\";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РабочийКаталог;
	
КонецФункции

// Функция открывает диалог выбора файлового каталога и возвращает выбранный пользователем 
// каталог как строковое значение
// Параметры:
//		Объект - объект для выбора каталога
//		РабочийКаталог - начальное значение рабочего каталога
// Возвращаемое значение: Выбранный рабочий каталог
Функция ВыбратьФайлСДиска(РежимДиалога, Фильтр="", РабочийКаталог="", ИмяФайла="") Экспорт

	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалога);
	Если РежимДиалога=РежимДиалогаВыбораФайла.Открытие Тогда
		ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите файл для открытия';en='Select a file to open'");
		
	ИначеЕсли РежимДиалога=РежимДиалогаВыбораФайла.Сохранение Тогда
		ДиалогОткрытияФайла.Заголовок = НСтр("ru='Выберите файл для сохранения';en='Select a file to save'");
		
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Режим диалога не поддерживается в этой функции.';en='Dialogue can not be supported in this function.'"));
		Возврат "";
	КонецЕсли;
	
	ДиалогОткрытияФайла.Каталог = РабочийКаталог;
	Если ПустаяСтрока(Фильтр) Тогда
		Фильтр = НСтр("ru='Все файлы(*.*)|*.*';en='All files (*. *) | *. *'");
	КонецЕсли;
		
	ДиалогОткрытияФайла.ПолноеИмяФайла = ИмяФайла;
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	
	ПолноеИмяФайла ="";
	
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПолноеИмяФайла = ДиалогОткрытияФайла.ПолноеИмяФайла;
		
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

// Функция выполняет запись шаблона файла в файл формата bpl
// Параметры:
//		ШаблонФайла - содержит ссылку на шаблон файла
//		ПутьКФайлу - содержит строку с путем к формируемому файлу
// Возвращаемое значение: Истина или Ложь
Функция ЗаписатьШаблонФайлаXML(ШаблонФайла, ПутьКФайлу) Экспорт
	
	ТекстXML=КП_РаботаСФайлами.ПолучитьXMLШаблонаФайл(ШаблонФайла);
	Если ПустаяСтрока(ТекстXML) Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекстовыйФайл=Новый ТекстовыйДокумент;
	ТекстовыйФайл.ДобавитьСтроку(ТекстXML);
	
	Попытка
		ТекстовыйФайл.Записать(ПутьКФайлу);
	
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Процедура выполняет печать задачи пользователя
// Параметры:
// 	ОбъектСсылка - Ссылка на объект
// 	ФайлСсылка - Ссылка на файл
// 	МакетИДанныеОбъекта - Макет и данные объекта
// 	ЛокальныйКаталогФайловПечати - Локальный каталог файлов печати
Процедура НапечататьЗадачуПользователя(ОбъектСсылка, ФайлСсылка, МакетИДанныеОбъекта, ЛокальныйКаталогФайловПечати) Экспорт
	
	Если НЕ МакетИДанныеОбъекта.Свойство("Макеты") Тогда
		Возврат;
		
	КонецЕсли;
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов["макет"];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ОбъектСсылка]["макет"];
	СписокВыведенныхШапок=Новый СписокЗначений;
	
	//Макет = УправлениеПечатьюКлиент.ИнициализироватьМакет(ДвоичныеДанныеМакетов["макет"], ТипМакета, ЛокальныйКаталогФайловПечати, "макет");
	Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов["макет"], ТипМакета, "макет");
	
	Попытка
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета, Макет);

		Если ПечатнаяФорма <> Неопределено И Макет <> Неопределено Тогда
			
			МассивСтруктурыОбластей=КП_ФормированиеПоШаблонам.ПолучитьМассивСтруктурОбластейШаблона(ФайлСсылка);
			Для Каждого ЭлементМассива Из МассивСтруктурыОбластей Цикл
				ИмяОбласти=СокрЛП(ЭлементМассива.Наименование);
				ТипОбласти=КП_ФормированиеПоШаблонам.ПолучитьПреобразованныйТипОбласти(ЭлементМассива.ТипОбласти);
				НовыйРаздел=КП_ФормированиеПоШаблонам.ПолучитьПреобразованныйТипОбласти(ЭлементМассива.НовыйРаздел);

				Если ТипОбласти="ШапкаТаблицы" Тогда
					Если СписокВыведенныхШапок.НайтиПоЗначению(ИмяОбласти)=Неопределено Тогда
						СписокВыведенныхШапок.Добавить(ИмяОбласти);
					Иначе
						Продолжить;
					КонецЕсли;
					
					//заполним как общую область
					СтруктураОбласти=Новый Структура("ИмяОбласти, ТипОбласти", ИмяОбласти, "СтрокаТаблицы");
					СтруктураОбласти.Вставить("НовыйРаздел", НовыйРаздел);
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, СтруктураОбласти);
				Иначе //остальные области, не шапка таблицы
					СтруктураОбласти=Новый Структура("ИмяОбласти, ТипОбласти", ИмяОбласти, ТипОбласти);
					СтруктураОбласти.Вставить("НовыйРаздел", НовыйРаздел);
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, СтруктураОбласти);
				КонецЕсли;
				
				
				Если Макет.Тип="DOC" И (ТипОбласти<>"ВерхнийКолонтитул" И ТипОбласти<>"НижнийКолонтитул") Тогда
					Если Область.Start<0 ИЛИ Область.End<0 Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Область ';")+ИмяОбласти+НСтр("ru=' не определена в шаблоне документа.';"));
						Продолжить; //области нет в документе
					КонецЕсли;
				КонецЕсли;
				
				Если ТипОбласти="Общая" Тогда
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				ИначеЕсли ТипОбласти="ВерхнийКолонтитул" ИЛИ ТипОбласти="НижнийКолонтитул" Тогда
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				ИначеЕсли ТипОбласти="СтрокаТаблицы" ИЛИ ТипОбласти="Список" Тогда
					ИмяТабличнойЧасти=КП_Процессы.ПолучитьИмяТаблицыПроцесса(ЭлементМассива.ТабличнаяЧасть);

					Если НЕ ДанныеОбъекта.Свойство(ИмяТабличнойЧасти) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данных для вывода строки ""';en='Data to output the string ""'")+ИмяТабличнойЧасти+НСтр("ru='"" нет.';"));
					Иначе	
						КоллекцияОбъекта=ДанныеОбъекта[ИмяТабличнойЧасти];
						Если ИмяТабличнойЧасти<>"ТаблицаЗначений" И (ДанныеОбъекта.Свойство("ТаблицаЗначений") И ДанныеОбъекта.ТаблицаЗначений.Количество()>0) Тогда							
							КоллекцияОбъекта=ДополнитьМассивСтруктур(КоллекцияОбъекта, ДанныеОбъекта.ТаблицаЗначений);
						КонецЕсли;
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, КоллекцияОбъекта, Ложь);
					КонецЕсли;
					
				ИначеЕсли ТипОбласти="ШапкаТаблицы" Тогда
					ИмяТабличнойЧасти=КП_Процессы.ПолучитьИмяТаблицыПроцесса(ЭлементМассива.ТабличнаяЧасть);
					Если НЕ ДанныеОбъекта.Свойство(ИмяТабличнойЧасти) Тогда
						//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данных для вывода шапки ""';en='Data for output caps ""'")+ИмяТабличнойЧасти+НСтр("ru='"" нет.';"));
						
					Иначе	
						КоллекцияОбъекта=ДанныеОбъекта[ИмяТабличнойЧасти];
						//для вывода шапки используем только первую строку
						Если КоллекцияОбъекта.Количество()>0 Тогда
							КоллекцияОбъектаПерваяСтрока=Новый Массив;
							КоллекцияОбъектаПерваяСтрока.Добавить(КоллекцияОбъекта[0]);
							//УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, КоллекцияОбъектаПерваяСтрока, Ложь, Ложь);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, КоллекцияОбъектаПерваяСтрока, Ложь);
						КонецЕсли;
					КонецЕсли;
				Иначе
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
				КонецЕсли;
			КонецЦикла; //по массиву структуры областей
							
			УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
			
		КонецЕсли;
	Исключение
		
		ТекстОшибки=ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		Возврат;
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		
КонецПроцедуры

// Процедура выполняет печать корпоративного бизнес-процесса
// Параметры:
// 	ОбъектСсылка - Ссылка на объект
// 	ФайлСсылка - Ссылка на файл
// 	МакетИДанныеОбъекта - Макет и данные объекта
// 	ЛокальныйКаталогФайловПечати - Локальный каталог файлов печати
Процедура НапечататьКорпоративныйБизнесПроцесс(ОбъектСсылка, ФайлСсылка, МакетИДанныеОбъекта, ЛокальныйКаталогФайловПечати) Экспорт
	
	Если НЕ МакетИДанныеОбъекта.Свойство("Макеты") Тогда
		Возврат;
	КонецЕсли;
	
	ТипМакета				= МакетИДанныеОбъекта.Макеты.ТипыМакетов["макет"];
	ДвоичныеДанныеМакетов	= МакетИДанныеОбъекта.Макеты.ДвоичныеДанныеМакетов;
	Области					= МакетИДанныеОбъекта.Макеты.ОписаниеОбластей;
	
	ДанныеОбъекта = МакетИДанныеОбъекта.Данные[ОбъектСсылка]["макет"];
	СписокВыведенныхШапок=Новый СписокЗначений;
	
	//Макет = УправлениеПечатьюКлиент.ИнициализироватьМакет(ДвоичныеДанныеМакетов["макет"], ТипМакета, ЛокальныйКаталогФайловПечати, "макет");
	Макет = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(ДвоичныеДанныеМакетов["макет"], ТипМакета, "макет");
	
	Попытка
		
		ПечатнаяФорма = УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму(ТипМакета, Макет.НастройкиСтраницыМакета, Макет);
		
		Если ПечатнаяФорма <> Неопределено И Макет <> Неопределено Тогда
			
			МассивСтруктурыОбластей=КП_ФормированиеПоШаблонам.ПолучитьМассивСтруктурОбластейШаблона(ФайлСсылка);
			Для Каждого ЭлементМассива Из МассивСтруктурыОбластей Цикл
				ИмяОбласти=СокрЛП(ЭлементМассива.Наименование);
				ТипОбласти=КП_ФормированиеПоШаблонам.ПолучитьПреобразованныйТипОбласти(ЭлементМассива.ТипОбласти);
				НовыйРаздел=КП_ФормированиеПоШаблонам.ПолучитьПреобразованныйТипОбласти(ЭлементМассива.НовыйРаздел);
				
				Если ТипОбласти="ШапкаТаблицы" Тогда
					Если СписокВыведенныхШапок.НайтиПоЗначению(ИмяОбласти)=Неопределено Тогда
						СписокВыведенныхШапок.Добавить(ИмяОбласти);
					Иначе
						Продолжить;
					КонецЕсли;
					
					//заполним как общую область
					СтруктураОбласти=Новый Структура("ИмяОбласти, ТипОбласти", ИмяОбласти, "СтрокаТаблицы");
					СтруктураОбласти.Вставить("НовыйРаздел", НовыйРаздел);
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, СтруктураОбласти);
				Иначе //остальные области, не шапка таблицы
					СтруктураОбласти=Новый Структура("ИмяОбласти, ТипОбласти", ИмяОбласти, ТипОбласти);
					СтруктураОбласти.Вставить("НовыйРаздел", НовыйРаздел);
					Область = УправлениеПечатьюКлиент.ПолучитьОбласть(Макет, СтруктураОбласти);
				КонецЕсли;
				
				
				Если Макет.Тип="DOC" И (ТипОбласти<>"ВерхнийКолонтитул" И ТипОбласти<>"НижнийКолонтитул") Тогда
					Если Область.Start<0 ИЛИ Область.End<0 Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Область ';")+ИмяОбласти+НСтр("ru=' не определена в шаблоне документа.';"));
						Продолжить; //области нет в документе
					КонецЕсли;
				КонецЕсли;
				
				Если ТипОбласти="Общая" Тогда
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				ИначеЕсли ТипОбласти="ВерхнийКолонтитул" ИЛИ ТипОбласти="НижнийКолонтитул" Тогда
					УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, ДанныеОбъекта, Ложь);
				ИначеЕсли ТипОбласти="СтрокаТаблицы" ИЛИ ТипОбласти="Список" Тогда
					ИмяТабличнойЧасти=КП_Процессы.ПолучитьИмяТаблицыПроцесса(ЭлементМассива.ТабличнаяЧасть);

					Если НЕ ДанныеОбъекта.Свойство(ИмяТабличнойЧасти) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данных для вывода строки ""';en='Data to output the string ""'")+ИмяТабличнойЧасти+НСтр("ru='"" нет.';"));
					Иначе	
						КоллекцияОбъекта=ДанныеОбъекта[ИмяТабличнойЧасти];
						Если ИмяТабличнойЧасти<>"ТаблицаЗначений" И (ДанныеОбъекта.Свойство("ТаблицаЗначений") И ДанныеОбъекта.ТаблицаЗначений.Количество()>0) Тогда							
							КоллекцияОбъекта=ДополнитьМассивСтруктур(КоллекцияОбъекта, ДанныеОбъекта.ТаблицаЗначений);
						КонецЕсли;
						УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, КоллекцияОбъекта, Ложь);
					КонецЕсли;
					
				ИначеЕсли ТипОбласти="ШапкаТаблицы" Тогда
					ИмяТабличнойЧасти=КП_Процессы.ПолучитьИмяТаблицыПроцесса(ЭлементМассива.ТабличнаяЧасть);
					Если НЕ ДанныеОбъекта.Свойство(ИмяТабличнойЧасти) Тогда
						//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Данных для вывода шапки ""';en='Data for output caps ""'")+ИмяТабличнойЧасти+НСтр("ru='"" нет.';"));
						
					Иначе	
						КоллекцияОбъекта=ДанныеОбъекта[ИмяТабличнойЧасти];
						//для вывода шапки используем только первую строку
						Если КоллекцияОбъекта.Количество()>0 Тогда
							КоллекцияОбъектаПерваяСтрока=Новый Массив;
							КоллекцияОбъектаПерваяСтрока.Добавить(КоллекцияОбъекта[0]);
							//УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, КоллекцияОбъектаПерваяСтрока, Ложь, Ложь);
							УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, КоллекцияОбъектаПерваяСтрока, Ложь);
						КонецЕсли;
					КонецЕсли;
				Иначе
					УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область);
				КонецЕсли;
			КонецЦикла; //по массиву структуры областей
							
			УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
			
		КонецЕсли;
	Исключение
		
		ТекстОшибки=ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма);
		УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		Возврат;
	КонецПопытки;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	УправлениеПечатьюКлиент.ОчиститьСсылки(Макет);
		
КонецПроцедуры

// Процедура дополняет массив структур
// Параметры:
// 	КоллекцияОбъекта - Коллекция объекта
// 	ДопМассивЗначений - Дополнительный массив значений
// Возвращаемое значение: Массив значений
Функция ДополнитьМассивСтруктур(КоллекцияОбъекта, ДопМассивЗначений)
	
	НовыйМассив=Новый Массив;
	ИндексТаблицы=0;
	МаксимальныйИндексТаблицы=ДопМассивЗначений.Количество()-1;
	
	Для Каждого ЭлементМассива Из КоллекцияОбъекта Цикл
		Если ТипЗнч(ЭлементМассива)<>Тип("Структура") Тогда
			//вернем исходный массив
			Возврат КоллекцияОбъекта;
		КонецЕсли;
		
		//скопируем текущие данные
		НоваяСтруктура=ЭлементМассива;
		
		//дополним данныи таблицы		
		Если ИндексТаблицы<=МаксимальныйИндексТаблицы Тогда
			
			СтрокаТаблицы=ДопМассивЗначений[ИндексТаблицы];
			Для Каждого КлючЗначение Из СтрокаТаблицы Цикл
				ИмяКлюча=КлючЗначение.Ключ;
				Данные=КлючЗначение.Значение;
				Если НоваяСтруктура.Свойство(ИмяКлюча) Тогда
					НоваяСтруктура[ИмяКлюча]=Данные;
				Иначе
					НоваяСтруктура.Вставить(ИмяКлюча, Данные);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ИндексТаблицы=ИндексТаблицы+1;
		
		НовыйМассив.Добавить(НоваяСтруктура);
		
	КонецЦикла;
	
	Возврат НовыйМассив;
	
КонецФункции
	
#КонецОбласти
