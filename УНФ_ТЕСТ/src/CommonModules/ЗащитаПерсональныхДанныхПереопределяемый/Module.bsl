///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2020, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Позволяет задать настройки для регистрации событий доступа к персональным данным.
//
// При расширении состава субъектов персональных данных следует иметь в виду, что регистрация событий для них
// не начнется автоматически (это отдельно настраивает администратор программы). Однако если необходимо управлять этим
// при переходе на новую версию программы, то следует реализовать обработчик обновления, вызывающий 
// процедуру ЗащитаПерсональныхДанных.УстановитьИспользованиеСобытияДоступ.
//
// Параметры:
//   ТаблицаСведений    - ТаблицаЗначений:
//    * Объект          - Строка - полное имя объекта метаданных с персональными данными;
//    * ПоляРегистрации - Строка - имена полей, значения которых выводятся в журнал событий доступа к персональным
//                                 данным для идентификации субъекта персональных данных. Для ссылочных типов, 
//                                 как правило, это поле "Ссылка". Отдельные поля регистрации отделяются запятой, 
//                                 альтернативные - символом "|";
//    * ПоляДоступа     - Строка - имена полей доступа через запятую. Обращение (попытка доступа) к этим полям 
//                                 приводит к записи журнала;
//    * ОбластьДанных   - Строка - идентификатор области данных, если их несколько. Необязательно для заполнения.
//
// Пример:
//  Сведения = ТаблицаСведений.Добавить();
//  Сведения.Объект				= "Справочник.ФизическиеЛица";
//  Сведения.ПоляРегистрации	= "Ссылка";
//  Сведения.ПоляДоступа		= "Наименование,ДатаРождения";
//  Сведения.ОбластьДанных		= "ЛичныеДанные";
//
//  Сведения = ТаблицаСведений.Добавить();
//  Сведения.Объект				= "Справочник.ФизическиеЛица";
//  Сведения.ПоляРегистрации	= "Ссылка";
//  Сведения.ПоляДоступа		= "СерияДокумента,НомерДокумента,КемВыданДокумент,ДатаВыдачиДокумента";
//  Сведения.ОбластьДанных		= "ПаспортныеДанные";
//
Процедура ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений) Экспорт
	
	// СтандартныеПодсистемы.ФизическиеЛица
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "Справочник.ФизическиеЛица";
	НовыеСведения.ПоляРегистрации	= "Ссылка";
	НовыеСведения.ПоляДоступа		= "ДатаРождения";
	НовыеСведения.ОбластьДанных		= "ЛичныеДанные";
	
	НовыеСведения = ТаблицаСведений.Добавить();
	НовыеСведения.Объект			= "РегистрСведений.ДокументыФизическихЛиц";
	НовыеСведения.ПоляРегистрации	= "Физлицо";
	НовыеСведения.ПоляДоступа		= "ВидДокумента,Серия,Номер,ДатаВыдачи,СрокДействия,КемВыдан,КодПодразделения,Представление";
	НовыеСведения.ОбластьДанных		= "ПаспортныеДанные";
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
КонецПроцедуры

// Обеспечивает составление коллекции областей персональных данных.
//
// Параметры:
//		ОбластиПерсональныхДанных - ТаблицаЗначений:
//			* Имя			- Строка - идентификатор области данных.
//			* Представление	- Строка - пользовательское представление области данных.
//			* Родитель		- Строка - идентификатор родительской области данных.
//
Процедура ЗаполнитьОбластиПерсональныхДанных(ОбластиПерсональныхДанных) Экспорт
	
	// Заполнение представлений для используемых областей
	// СтандартныеПодсистемы.ФизическиеЛица
	НоваяОбласть = ОбластиПерсональныхДанных.Добавить();
	НоваяОбласть.Имя = "ЛичныеДанные";
	НоваяОбласть.Представление = НСтр("ru = 'Личные данные'");
	
	НоваяОбласть = ОбластиПерсональныхДанных.Добавить();
	НоваяОбласть.Имя = "ПаспортныеДанные";
	НоваяОбласть.Представление = НСтр("ru = 'Паспортные данные'");
	НоваяОбласть.Родитель = "ЛичныеДанные";
	// Конец СтандартныеПодсистемы.ФизическиеЛица
	
КонецПроцедуры

// Вызывается при заполнении формы "Согласие на обработку персональных данных" данными, 
// переданных в качестве параметров, субъектов.
//
// Параметры:
//		СубъектыПерсональныхДанных 	- ДанныеФормыКоллекция - содержит сведения о субъектах.
//		ДатаАктуальности			- Дата - дата, на которую нужно заполнить сведения.
//
Процедура ДополнитьДанныеСубъектовПерсональныхДанных(СубъектыПерсональныхДанных, ДатаАктуальности) Экспорт
	
	Для каждого ДанныеСубъекта Из СубъектыПерсональныхДанных Цикл
		
		// ДанныеСубъекта.Субъект
		// ДанныеСубъекта.ФИО
		// ДанныеСубъекта.Адрес
		// ДанныеСубъекта.ПаспортныеДанные
		
		СубъектСсылка = ДанныеСубъекта.Субъект;
		Если ТипЗнч(СубъектСсылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			ЗаполнитьДанныеПоФизическомуЛицу(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности);
			
		ИначеЕсли ТипЗнч(СубъектСсылка) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			ЗаполнитьДанныеПоСотруднику(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности);
			
		ИначеЕсли ТипЗнч(СубъектСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			
			ЗаполнитьДанныеПоКонтактномуЛицу(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности);
			
		ИначеЕсли ТипЗнч(СубъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ЗаполнитьДанныеПоКонтагенту(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при заполнении формы "Согласие на обработку персональных данных" данными организации.
//
// Параметры:
//		Организация			- ОпределяемыйТип.Организация - оператор персональных данных.
//		ДанныеОрганизации	- Структура - данные об организации (адрес, ФИО ответственного и т.д.).
//		ДатаАктуальности	- Дата      - дата, на которую нужно заполнить сведения.
//
Процедура ДополнитьДанныеОрганизацииОператораПерсональныхДанных(Организация, ДанныеОрганизации, ДатаАктуальности) Экспорт
	
	Если НЕ УправлениеДоступом.ЧтениеРазрешено(Организация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СведенияОбОрганизации = УправлениеНебольшойФирмойСервер.СведенияОЮрФизЛице(Организация, ДатаАктуальности);
	ДанныеОрганизации.АдресОрганизации = УправлениеНебольшойФирмойСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ЮридическийАдрес");
	
	Если ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		
		ДанныеОрганизации.ОтветственныйЗаОбработкуПерсональныхДанных = Организация.ПодписьРуководителя.ФизическоеЛицо;
		
	КонецЕсли;
	
КонецПроцедуры

// Позволяет проверить возможность скрытия персональных данных и задать состав исключений для записи в данных.
//
// Параметры:
//   Субъекты - Массив - ссылки на объекты данных, чьи персональные данные будут скрыты.
//   ТаблицаИсключений - ТаблицаЗначений - таблица, в которую добавляются субъекты и причины отказа их скрытия.
//   							Состав полей см. в функции ЗащитаПерсональныхДанных.НоваяТаблицаИсключений.
//   Отказ - Булево - (по умолчанию Истина) признак отказа от скрытия. Если конфигурация адаптирована к обменам, и
//   							определены причины отказа от скрытия, то параметру необходимо установить значение Ложь.
//
Процедура ПередСкрытиемПерсональныхДанныхСубъектов(Субъекты, ТаблицаИсключений, Отказ) Экспорт
	
	Отказ = Ложь;
	
	ПричинаОтменыСкрытия = НСтр("ru = 'Субъект оформлен по ТК РФ'");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Субъекты", Субъекты); 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыНачисленияУдержания.Сотрудник.Физлицо КАК ФизическоеЛицо
	|ИЗ Документ.НачислениеЗарплаты.НачисленияУдержания КАК НачислениеЗарплатыНачисленияУдержания
	|ГДЕ НачислениеЗарплатыНачисленияУдержания.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыНалогиНаДоходы.Сотрудник.Физлицо
	|ИЗ Документ.НачислениеЗарплаты.НалогиНаДоходы КАК НачислениеЗарплатыНалогиНаДоходы
	|ГДЕ НачислениеЗарплатыНалогиНаДоходы.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыПогашениеЗаймов.Сотрудник.Физлицо
	|ИЗ Документ.НачислениеЗарплаты.ПогашениеЗаймов КАК НачислениеЗарплатыПогашениеЗаймов
	|ГДЕ НачислениеЗарплатыПогашениеЗаймов.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыВзносы.Сотрудник.Физлицо
	|ИЗ Документ.НачислениеЗарплаты.Взносы КАК НачислениеЗарплатыВзносы
	|ГДЕ НачислениеЗарплатыВзносы.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НачислениеЗарплатыПримененныеВычетыПоНДФЛ.Сотрудник.Физлицо
	|ИЗ Документ.НачислениеЗарплаты.ПримененныеВычетыПоНДФЛ КАК НачислениеЗарплатыПримененныеВычетыПоНДФЛ
	|ГДЕ НачислениеЗарплатыПримененныеВычетыПоНДФЛ.Сотрудник.Физлицо В(&Субъекты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РССотрудники.Сотрудник.Физлицо КАК ФизическоеЛицо
	|ИЗ РегистрСведений.Сотрудники КАК РССотрудники
	|ГДЕ РССотрудники.Сотрудник.Физлицо В(&Субъекты)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовоеИсключение = ТаблицаИсключений.Добавить();
		НовоеИсключение.Субъект					= Выборка.ФизическоеЛицо;
		НовоеИсключение.ПричинаОтменыСкрытия	= ПричинаОтменыСкрытия;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при заполнении формы "Согласие на обработку персональных данных".
// Предназначена для заполнения поля ФИО ответственного за обработку ПДн.
//
// Параметры:
//		ФизическоеЛицо	- ОпределяемыйТип.ФизическоеЛицо - ответственный за обработку персональных данных.
//		ФИО				- Строка - ФИО ответственного, которые нужно заполнить.
//
Процедура ЗаполнитьФИОФизическогоЛица(ФизическоеЛицо, ФИО) Экспорт
	
	ФИО = РегистрыСведений.ФИОФизЛиц.ФИОФизЛица(ТекущаяДатаСеанса(), ФизическоеЛицо);
	
КонецПроцедуры

#КонецОбласти

#Region СлужебныйИнтерфейсУНФ

Процедура ЗаполнитьДанныеПоФизическомуЛицу(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности)
	
	ФИО = РегистрыСведений.ФИОФизЛиц.ФИОФизЛица(ДатаАктуальности, СубъектСсылка);
	
	ДанныеСубъекта.ФИО = ?(ПустаяСтрока(ФИО), СубъектСсылка.Наименование, ФИО);
	ДанныеСубъекта.Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СубъектСсылка, Справочники.ВидыКонтактнойИнформации.АдресФизЛицаПоПрописке);
	
	ДокументыФизическихЛиц = Справочники.ФизическиеЛица.ДокументФизЛицаПоВиду(ДатаАктуальности, СубъектСсылка, Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);
	Если ДокументыФизическихЛиц.Количество() > 0 Тогда
		
		ДанныеСубъекта.ПаспортныеДанные	= ДокументыФизическихЛиц[0].Представление;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоСотруднику(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности)
	
	Если ЗначениеЗаполнено(СубъектСсылка.Физлицо) Тогда
		
		ЗаполнитьДанныеПоФизическомуЛицу(ДанныеСубъекта, СубъектСсылка.Физлицо, ДатаАктуальности)
		
	Иначе
		
		ДанныеСубъекта.ФИО = СубъектСсылка.Наименование;
		ДанныеСубъекта.Адрес = "";
		ДанныеСубъекта.ПаспортныеДанные = "";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоКонтактномуЛицу(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности)
	
	ДанныеСубъекта.ФИО = СубъектСсылка.Наименование;
	ДанныеСубъекта.Адрес = "";
	ДанныеСубъекта.ПаспортныеДанные = СубъектСсылка.ДокументУдостоверяющийЛичность;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоКонтагенту(ДанныеСубъекта, СубъектСсылка, ДатаАктуальности)
	
	Если СубъектСсылка.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ЮридическоеЛицо Тогда
		
		ДанныеСубъекта.ФИО = СубъектСсылка.Наименование;
		ДанныеСубъекта.ПаспортныеДанные = "";
		
	ИначеЕсли СубъектСсылка.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизическоеЛицо
		ИЛИ СубъектСсылка.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ИндивидуальныйПредприниматель Тогда
		
		ДанныеСубъекта.ФИО = СубъектСсылка.ФИО;
		Если ПустаяСтрока(ДанныеСубъекта.ФИО)
			И ЗначениеЗаполнено(СубъектСсылка.КонтактноеЛицо) Тогда
			
			ДанныеСубъекта.ФИО = СубъектСсылка.КонтактноеЛицо.Наименование;
			
		КонецЕсли;
		
		ДанныеСубъекта.ПаспортныеДанные = СубъектСсылка.ДокументУдостоверяющийЛичность;
		Если ПустаяСтрока(ДанныеСубъекта.ПаспортныеДанные)
			И ЗначениеЗаполнено(СубъектСсылка.КонтактноеЛицо) Тогда
			
			ДанныеСубъекта.ПаспортныеДанные = СубъектСсылка.КонтактноеЛицо.ДокументУдостоверяющийЛичность;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеСубъекта.Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СубъектСсылка, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
	
КонецПроцедуры

#EndRegion