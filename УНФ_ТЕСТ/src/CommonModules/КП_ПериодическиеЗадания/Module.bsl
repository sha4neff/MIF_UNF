// Общий модуль (выполняется на стороне сервера) 
// Модуль "Конструктор процессов для 1С:УНФ"
// Разработчик Компания "Аналитика. Проекты и решения" +7 495 005-1653, https://kp-unf.ru

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет управление периодическим заданиями посредством выборки регламентных заданий
// и формирования корпоративных бизнес-процессов по тем периодическим заданиям 
// которые должны быть выполнены в этот период
Процедура КП_ПериодическийПроцесс() Экспорт
	
	СтруктураОтбора=Новый Структура("Метаданные", "КП_ПериодическийПроцесс");
	ВыборкаРегламентныхЗаданий=РегламентныеЗадания.ПолучитьРегламентныеЗадания(СтруктураОтбора);
	
	БизнесПроцессЗапущен=Ложь;
	
	Для Каждого Задание Из ВыборкаРегламентныхЗаданий Цикл
		
		Если НЕ Задание.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Задание.Расписание.ТребуетсяВыполнение() Тогда			
			//выполнять пока рано, возможно было запущено вручную кнопкой "Выполнить сейчас"
			КП_ОбщееСервер.ЗаписатьИнформацию("По данным расписания выполнение периодического задания ("+СокрЛП(Задание)+") пока не требуется");
			Продолжить;
		КонецЕсли;
		
		Идентификатор=Строка(Задание.УникальныйИдентификатор);
		             
		СтруктураЗадания=КП_ПериодическиеЗадания.ПолучитьСтруктуруПериодическогоПроцесса(Идентификатор);
		
		ВидПроцесса=СтруктураЗадания.ВидПроцесса;
		
		Если НЕ ЗначениеЗаполнено(ВидПроцесса) Тогда
			КП_ОбщееСервер.ЗаписатьОшибку("Не указан вид процесса в задании "+СокрЛП(Задание));
			Продолжить;
		КонецЕсли;
		
		РабочаяГруппа=СтруктураЗадания.РабочаяГруппа;
		АвторПроцесса=СтруктураЗадания.Ответственный;
				
		НовыйБизнесПроцесс=КП_Процессы.СоздатьБизнесПроцесс(ВидПроцесса, АвторПроцесса, РабочаяГруппа);		
		
		Если НовыйБизнесПроцесс=Неопределено Тогда
			//экземпляр процесса не был создан
			Продолжить;
		КонецЕсли;
				
		ПроцессОбъект=НовыйБизнесПроцесс.ПолучитьОбъект();
		
		ПроцессОбъект.ПроектыБизнесПроцесса.Загрузить(ВидПроцесса.ПроектыБизнесПроцесса.Выгрузить());
		
		//сформируем наименование с датой формировния
		//ПроцессОбъект.Наименование=ПолучитьНаименованиеПоШаблону(ОбъектБизнесПроцесс, ВидПроцесса);	
		ПроцессОбъект.Наименование=СокрЛП(Задание.Наименование)+" | "+Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		ПроцессОбъект.Комментарий="Создано регламентным заданием "+Строка(ТекущаяДата());
		ПроцессОбъект.Дата=ТекущаяДата();
		
		ТекстФорматированный=СтруктураЗадания.ТекстПроцессаХранилище.Получить();
		
		Если НЕ ПустаяСтрока(ТекстФорматированный.ПолучитьТекст()) Тогда
			//установим текст процесса из настроек периодического процесса
			ПроцессОбъект.ХранилищеТекстаПроцесса=Новый ХранилищеЗначения(ТекстФорматированный);
		КонецЕсли;
				
		//запишем бизнес-процесс
		Попытка
			ПроцессОбъект.Записать();
		Исключение
			ТекстОшибки="Ошибка записи бизнес-процесса. "+ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Создание бизнес-процесса в регламентном задании.", УровеньЖурналаРегистрации.Ошибка, ПроцессОбъект.Ссылка, , ТекстОшибки);			
			Возврат;			
		КонецПопытки;
			
		//стартуем бизнес-процесс
		Попытка
			ПроцессОбъект.Старт(БизнесПроцессы.КП_БизнесПроцесс.ТочкиМаршрута.Старт);
		Исключение
			ТекстОшибки="Ошибка старта бизнес-процесса. "+ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Старт бизнес-процесса из регламентного задания.", УровеньЖурналаРегистрации.Ошибка, ПроцессОбъект.Ссылка, , ТекстОшибки);
			Возврат;
			
		КонецПопытки;
		
		БизнесПроцессЗапущен=Истина;
		
	КонецЦикла;

КонецПроцедуры

// Функция получает структуру периодического процесса по его идентификатору
// Параметры:
//	ИдентификаторРегламентногоЗадания - идентификатор регламентного задания
// Возвращаемое значение: Структура
Функция ПолучитьСтруктуруПериодическогоПроцесса(ИдентификаторРегламентногоЗадания) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);	
		
	Результат=Новый Структура("ВидПроцесса, РабочаяГруппа, Ответственный, ТекстПроцессаХранилище", Неопределено, Неопределено, Неопределено, Неопределено);
		
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ПараметрыПериодическихПроцессов.Идентификатор,
	                    |	КП_ПараметрыПериодическихПроцессов.ВидПроцесса,
						|	КП_ПараметрыПериодическихПроцессов.РабочаяГруппа,
						|	КП_ПараметрыПериодическихПроцессов.ТекстПроцессаХранилище,
						|	КП_ПараметрыПериодическихПроцессов.Ответственный
	                    |ИЗ
	                    |	РегистрСведений.КП_ПараметрыПериодическихПроцессов КАК КП_ПараметрыПериодическихПроцессов
	                    |ГДЕ
	                    |	КП_ПараметрыПериодическихПроцессов.Идентификатор = &Идентификатор");
						
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторРегламентногоЗадания);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Результат.ВидПроцесса=Выборка.ВидПроцесса;
		Результат.РабочаяГруппа=Выборка.РабочаяГруппа;
		Результат.ТекстПроцессаХранилище=Выборка.ТекстПроцессаХранилище;
		Результат.Ответственный=Выборка.Ответственный;
	              		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция записывает структуру периодического процесса по его идентификатору
// Параметры:
//	ИдентификаторРегламентногоЗадания - идентификатор регламентного задания
//	СтруктураДанных - структура данных процесса
// Возвращаемое значение: Булево
Функция ЗаписатьСтруктуруПериодическогоПроцесса(ИдентификаторРегламентногоЗадания, СтруктураДанных) Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанных.ВидПроцесса) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РегСведений=РегистрыСведений.КП_ПараметрыПериодическихПроцессов.СоздатьНаборЗаписей();
	РегСведений.Отбор.Идентификатор.Установить(ИдентификаторРегламентногоЗадания);
	РегСведений.Прочитать();
	
	Если РегСведений.Количество()=0 Тогда
		//создадим новую запись в регистре
		ЗаписьРегистра=РегСведений.Добавить();
		ЗаписьРегистра.Идентификатор=ИдентификаторРегламентногоЗадания;
	Иначе
		ЗаписьРегистра=РегСведений[0];
	КонецЕсли;
	
	ЗаписьРегистра.ВидПроцесса=СтруктураДанных.ВидПроцесса;
	ЗаписьРегистра.РабочаяГруппа=СтруктураДанных.РабочаяГруппа;
	ЗаписьРегистра.Ответственный=СтруктураДанных.Ответственный;
	
	ЗаписьРегистра.ТекстПроцессаХранилище=СтруктураДанных.ТекстПроцессаХранилище;
	
	Попытка
		РегСведений.Записать(Истина);
	Исключение
		КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

	Возврат Истина;
	
КонецФункции

// Функция удаляет параметры периодического процесса по его идентификатору
// Параметры:
//	ИдентификаторРегламентногоЗадания - идентификатор регламентного задания
// Возвращаемое значение: Булево
Функция УдалитьПараметрыПроцесса(ИдентификаторРегламентногоЗадания) Экспорт
	
	РегСведений=РегистрыСведений.КП_ПараметрыПериодическихПроцессов.СоздатьНаборЗаписей();
	РегСведений.Отбор.Идентификатор.Установить(ИдентификаторРегламентногоЗадания);
	РегСведений.Прочитать();
	
	Попытка
		РегСведений.Очистить();
		РегСведений.Записать(Истина);
	Исключение
		КП_ОбщееСервер.ЗаписатьОшибку(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
		
КонецФункции

#КонецОбласти
