
#Область СлужебныеПроцедурыИФункции

Функция ИмяСобытияЖурналаРегистрации() Экспорт
	
	Возврат "РасчетОчередиЦен";
	
КонецФункции

Процедура ОтразитьЦеныКонтрагентов(ТаблицаНовыеЦены, ТаблицаТекущиеЦены, НаборЗаписейРегистра) Экспорт
	
	Если ТаблицаНовыеЦены.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтборЦен = Новый Структура("ВидЦенКонтрагента, Номенклатура, Характеристика");
	Для каждого СтрокаТаблицы Из ТаблицаНовыеЦены Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборЦен, СтрокаТаблицы);
		
		МассивТекущихЦен = ТаблицаТекущиеЦены.НайтиСтроки(ОтборЦен);
		Если МассивТекущихЦен.Количество() > 0 Тогда
			
			Для каждого СтрокаМассива Из МассивТекущихЦен Цикл
				
				ТаблицаТекущиеЦены.Удалить(СтрокаМассива);
				
			КонецЦикла;
			
		КонецЕсли;
		
		НоваяЗапись = ТаблицаТекущиеЦены.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаТаблицы);
		
	КонецЦикла; 
	
	НаборЗаписейРегистра.Загрузить(ТаблицаТекущиеЦены);
	НаборЗаписейРегистра.Записать(Истина);
	
КонецПроцедуры

Функция ЗаписьОЦенеСуществует(КлючЗаписи) Экспорт
	
	СтруктураВозврата = Новый Структура("ЗаписьСуществует, Период, ВидЦен, Номенклатура, Характеристика", Ложь);
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, КлючЗаписи);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РС.Период
	|	,РС.Актуальность
	|	,РС.ВидЦен
	|	,РС.Номенклатура
	|	,РС.Характеристика
	|	,РС.ЕдиницаИзмерения
	|	,РС.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РС
	|ГДЕ
	|	РС.Период = &Период
	|	И РС.ВидЦен = &ВидЦен
	|	И РС.Номенклатура = &Номенклатура
	|	И РС.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Период", НачалоДня(КлючЗаписи.Период));
	Запрос.УстановитьПараметр("ВидЦен", КлючЗаписи.ВидЦен);
	Запрос.УстановитьПараметр("Номенклатура", КлючЗаписи.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", КлючЗаписи.Характеристика);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	СтруктураВозврата.ЗаписьСуществует = (ТаблицаРезультат.Количество() > 0);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЗаписьОЦенеКонтрагентаСуществует(КлючЗаписи) Экспорт
	
	СтруктураВозврата = Новый Структура("ЗаписьСуществует, Период, ВидЦенКонтрагента, Номенклатура, Характеристика", Ложь);
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, КлючЗаписи);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РС.Период
	|	,РС.Актуальность
	|	,РС.ВидЦенКонтрагента
	|	,РС.Номенклатура
	|	,РС.Характеристика
	|	,РС.ЕдиницаИзмерения
	|	,РС.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыКонтрагентов КАК РС
	|ГДЕ
	|	РС.Период = &Период
	|	И РС.ВидЦенКонтрагента = &ВидЦенКонтрагента
	|	И РС.Номенклатура = &Номенклатура
	|	И РС.Характеристика = &Характеристика";
	
	Запрос.УстановитьПараметр("Период",				НачалоДня(КлючЗаписи.Период));
	Запрос.УстановитьПараметр("ВидЦенКонтрагента",	КлючЗаписи.ВидЦенКонтрагента);
	Запрос.УстановитьПараметр("Номенклатура",		КлючЗаписи.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",		КлючЗаписи.Характеристика);
	
	ТаблицаРезультат = Запрос.Выполнить();
	СтруктураВозврата.ЗаписьСуществует = НЕ ТаблицаРезультат.Пустой();
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ОбновитьПризнакиАктуальностиВидовЦен()
	
	// Актуальность не ключевой признак, поэтому использование блокировок считаем не целесообразным...
	
	Запрос			= Новый Запрос;
	Запрос.Текст	= 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	ВидыЦенДинамические.Ссылка КАК Ссылка
	|	,ВидыЦенДинамические.ЦеныАктуальны КАК ЦеныАктуальны
	|ПОМЕСТИТЬ ВидыЦенДинамические
	|ИЗ Справочник.ВидыЦен КАК ВидыЦенДинамические
	|ГДЕ ВидыЦенДинамические.ТипВидаЦен <> Значение(Перечисление.ТипыВидовЦен.Статический)
	|
	|;Выбрать РАЗЛИЧНЫЕ
	|	ВидыЦенОчередиЦен.ВидЦенРасчетный КАК Ссылка
	|ПОМЕСТИТЬ ВидыЦенОчередиЦен
	|ИЗ РегистрСведений.ОчередьРасчетаЦен КАК ВидыЦенОчередиЦен
	|
	|;Выбрать 
	|	ВидыЦенДинамические.Ссылка КАК ВидЦен
	|	,ВидыЦенДинамические.ЦеныАктуальны КАК ЦеныАктуальны
	|	,Выбор КОГДА ВидыЦенОчередиЦен.Ссылка ЕСТЬ NULL
	|		ТОГДА ЛОЖЬ 
	|		ИНАЧЕ ИСТИНА КОНЕЦ КАК ЕстьЗаписиОчередиЦен
	|ИЗ ВидыЦенДинамические КАК ВидыЦенДинамические
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВидыЦенОчередиЦен КАК ВидыЦенОчередиЦен
	|	ПО ВидыЦенДинамические.Ссылка = ВидыЦенОчередиЦен.Ссылка
	|
	|;Выбрать ПЕРВЫЕ 1 * ИЗ ВидыЦенОчередиЦен";
	
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВидовЦен = РезультатЗапроса[2].Выгрузить();
	Для каждого ЗаписьОВидеЦен Из ТаблицаВидовЦен Цикл
		
		Если НЕ ЗначениеЗаполнено(ЗаписьОВидеЦен.ВидЦен) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ЗаписьОВидеЦен.ЦеныАктуальны = Истина
			И ЗаписьОВидеЦен.ЕстьЗаписиОчередиЦен = Истина Тогда
			
			ИзменитьПризнакАктуальностиВидаЦен(ЗаписьОВидеЦен.ВидЦен, Ложь);
			
		КонецЕсли;
			
		Если ЗаписьОВидеЦен.ЦеныАктуальны = Ложь
			И ЗаписьОВидеЦен.ЕстьЗаписиОчередиЦен = Ложь Тогда
			
			ИзменитьПризнакАктуальностиВидаЦен(ЗаписьОВидеЦен.ВидЦен, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РезультатЗапроса[3].Пустой() Тогда
		
		СброситьРабочийНомерОчередиЦен();
		
		УстановитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчередьРасчетаЦен, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПризнакАктуальностиВидаЦен(ВидЦен, ЦеныАктуальны)

	ВидЦенОбъект 				= ВидЦен.ПолучитьОбъект();
	ВидЦенОбъект.ЦеныАктуальны	= ЦеныАктуальны;
	ВидЦенОбъект.КоличествоПопытокСлужебный = 0;
	ВидЦенОбъект.ОписаниеОшибки	= "";
	
	Попытка
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦенОбъект, Ложь, Ложь);
		
	Исключение
		
		ТекстОшибки = НСтр("ru ='Ошибка обновления свойства ""Цены актуальны"" вида цен [%1]'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ВидЦен);
		
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦен, ТекстОшибки);
		
	КонецПопытки;
	
	
КонецПроцедуры

Процедура СнятьПризнакНовинка() Экспорт
	
	// Расписание 14 400 секунд, т.е. 2 раза в течении 8 часов
	
	СрокДействияФлагаНовинка = НачалоДня(ТекущаяДатаСеанса());
	
	Запрос 			= Новый Запрос;
	Запрос.Текст	= "ВЫБРАТЬ СпрНоменклатура.Ссылка ИЗ Справочник.Номенклатура КАК СпрНоменклатура ГДЕ СпрНоменклатура.ЭтоНовинка И СпрНоменклатура.СрокДействияФлагаНовинка <= &СрокДействияФлагаНовинка И СпрНоменклатура.СрокДействияФлагаНовинка <> ДАТАВРЕМЯ(01, 01, 01, 00, 00, 00)";
	Запрос.УстановитьПараметр("СрокДействияФлагаНовинка", СрокДействияФлагаНовинка);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		МассивНоменклатуры = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.Номенклатура");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		Попытка
			
			НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
			
			Блокировка.Заблокировать();
			Для каждого ЭлементМассива Из МассивНоменклатуры Цикл
				
				СправочникОбъект = ЭлементМассива.ПолучитьОбъект();
				СправочникОбъект.ЭтоНовинка = Ложь;
				СправочникОбъект.Записать();
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			Комментарий = НСтр("ru = 'Ошибка работы фонового регламентного задания: СнятиеПризнакаНовинка'")
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации("ПризнакНовинка", УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Номенклатура, , Комментарий);
			ОтменитьТранзакцию();
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПересчетЕдиницИзмерения(ЕдиницаИзмеренияИсточник, ЕдиницаИзмеренияПриемник, РезультатСтрокой = Ложь) Экспорт
	
	КоэффициентИсточник = 0;
	Если ТипЗнч(ЕдиницаИзмеренияИсточник) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		
		КоэффициентИсточник = 1;
		
	ИначеЕсли ТипЗнч(ЕдиницаИзмеренияИсточник) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		
		КоэффициентИсточник = ЕдиницаИзмеренияИсточник.Коэффициент;
		
	КонецЕсли;
	
	Если КоэффициентИсточник = 0 Тогда
		
		КоэффициентИсточник = 1;
		
	КонецЕсли;
	
	КоэффициентПриемник = 0;
	Если ТипЗнч(ЕдиницаИзмеренияПриемник) = Тип("СправочникСсылка.КлассификаторЕдиницИзмерения") Тогда
		
		КоэффициентПриемник = 1;
		
	ИначеЕсли ТипЗнч(ЕдиницаИзмеренияПриемник) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
		
		КоэффициентПриемник = ЕдиницаИзмеренияПриемник.Коэффициент;
		
	КонецЕсли;
	
	Если КоэффициентПриемник = 0 Тогда
		
		КоэффициентПриемник = 1;
		
	КонецЕсли;
	
	Если РезультатСтрокой = Истина Тогда
		
		Возврат Формат(КоэффициентПриемник / КоэффициентИсточник, "ЧЦ=20; ЧДЦ=8; ЧРД=.; ЧГ=");
		
	Иначе
		
		Возврат КоэффициентПриемник / КоэффициентИсточник;
		
	КонецЕсли;
	
КонецФункции

Функция УстановитьРабочийНомерОчередиЦен() Экспорт
	
	РабочийНомерОчередиЦен = Константы.ВакантныйНомерОчередиРасчетаЦен.Получить();
	Попытка
		
		Константы.ВакантныйНомерОчередиРасчетаЦен.Установить(РабочийНомерОчередиЦен + 1);
		Возврат РабочийНомерОчередиЦен;
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецФункции

Процедура СброситьРабочийНомерОчередиЦен()
	
	Попытка
		
		Константы.ВакантныйНомерОчередиРасчетаЦен.Установить(0);
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДеревоЗначенийВТаблицуЗначений(Дерево, Таблица) Экспорт
	
	Для Каждого СтрокаДерева Из Дерево.Строки Цикл
		
		НоваяСтрока = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			
			ДеревоЗначенийВТаблицуЗначений(СтрокаДерева, Таблица);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ДинамическиеЦены

#Область РасчетПроцентом

Процедура РасчетДинамическихЦенНаПроцент(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки = "", ЗаписыватьЦены = Истина) Экспорт
	
	МенеджерЗаписейИспользуется = 500;
	
	Если ЗаписыватьЦены
		И ПараметрыРасчета.КоличествоЗаписей < МенеджерЗаписейИспользуется Тогда
		
		РасчетДинамическихЦенПроцентМенеджерЗаписи(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки, ЗаписыватьЦены);
		
	Иначе
		
		РасчетДинамическихЦенПроцентНаборЗаписей(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки, ЗаписыватьЦены);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетДинамическихЦенПроцентМенеджерЗаписи(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки, ЗаписыватьЦены) Экспорт
	
	ПериодЗаписи 			= ПараметрыРасчета.ПериодЗаписи;
	ВидЦенРасчетный			= ПараметрыРасчета.ВидЦенРасчетный;
	НомерОчередиЦен			= ПараметрыРасчета.НомерОчередиЦен;
	ФормаВладелец			= ПараметрыРасчета.УникальныйИдентификатор;
	ЦеныРасчитаны			= Ложь;
	БазовыйВидЦен			= ВидЦенРасчетный.БазовыйВидЦен;
	ОкруглятьВБольшуюСторону= ВидЦенРасчетный.ОкруглятьВБольшуюСторону;
	ПравилоОкругления		= ВидЦенРасчетный.ПорядокОкругления;
	
	БлокировкаДанных		= Новый БлокировкаДанных;
	
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
	ЭлементБлокировки.УстановитьЗначение("ВидЦен", ВидЦенРасчетный);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ОчередьРасчетаЦен");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НомерОчередиЦен", НомерОчередиЦен);
	ЭлементБлокировки.УстановитьЗначение("ВидЦенРасчетный",	ВидЦенРасчетный);
	
	Запрос					= Новый Запрос;
	Запрос.УстановитьПараметр("Период", 			НачалоДня(ПериодЗаписи));
	Запрос.УстановитьПараметр("ВидЦенРасчетный",	ВидЦенРасчетный);
	Запрос.УстановитьПараметр("НомерОчередиЦен",	НомерОчередиЦен);
	
	Запрос.Текст			=
	"ВЫБРАТЬ
	|	ВидыЦенПоЦеновымГруппам.Ссылка КАК ВидЦенРасчетный,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВидыЦенПоЦеновымГруппам.БазовыйВидЦен КАК БазовыйВидЦен,
	|	ВидыЦенПоЦеновымГруппам.Процент КАК Процент
	|ПОМЕСТИТЬ УсловияРасчетаСЦеновымиГруппами
	|ИЗ
	|	Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенПоЦеновымГруппам
	|ГДЕ
	|	ВидыЦенПоЦеновымГруппам.Ссылка = &ВидЦенРасчетный
	|	И ВидыЦенПоЦеновымГруппам.БазовыйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидыЦенПоЦеновымГруппам.Ссылка,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ОчередьЦен.Номенклатура КАК Номенклатура,
	|	ОчередьЦен.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОчередьЦен.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(УсловияРасчетаСЦеновымиГруппами.БазовыйВидЦен, ОчередьЦен.ВидЦенРасчетный.БазовыйВидЦен) КАК БазовыйВидЦен,
	|	ЕСТЬNULL(УсловияРасчетаСЦеновымиГруппами.Процент, ОчередьЦен.ВидЦенРасчетный.Процент) КАК Процент,
	|	ИСТИНА КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ РасчитываемыеЗаписи
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияРасчетаСЦеновымиГруппами КАК УсловияРасчетаСЦеновымиГруппами
	|		ПО ОчередьЦен.ВидЦенРасчетный = УсловияРасчетаСЦеновымиГруппами.ВидЦенРасчетный
	|			И ОчередьЦен.Номенклатура.ЦеноваяГруппа = УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа
	|ГДЕ
	|	ОчередьЦен.ПериодЗаписи = &Период
	|	И ОчередьЦен.НомерОчередиЦен = &НомерОчередиЦен
	|	И ОчередьЦен.ВидЦенРасчетный = &ВидЦенРасчетный
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОчередьЦен.Номенклатура,
	|	ОчередьЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчитываемыеЗаписи.БазовыйВидЦен КАК БазовыйВидЦен
	|ПОМЕСТИТЬ ОтборБазовыхВидовЦен
	|ИЗ
	|	РасчитываемыеЗаписи КАК РасчитываемыеЗаписи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчитываемыеЗаписи.БазовыйВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Актуальность,
	|	РасчитываемыеЗаписи.НомерОчередиЦен КАК НомерОчередиЦен,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК Период,
	|	РасчитываемыеЗаписи.ВидЦенРасчетный КАК ВидЦен,
	|	РасчитываемыеЗаписи.Номенклатура КАК Номенклатура,
	|	РасчитываемыеЗаписи.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(БазовыеЦены.Цена, 0) + ЕСТЬNULL(БазовыеЦены.Цена, 0) * РасчитываемыеЗаписи.Процент / 100 КАК Цена,
	|	БазовыеЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК ВключаяХарактеристики,
	|	БазовыеЦены.Автор КАК Автор
	|ИЗ
	|	РасчитываемыеЗаписи КАК РасчитываемыеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Актуальность
	|					И ВидЦен В
	|						(ВЫБРАТЬ
	|							ОтборБазовыхВидовЦен.БазовыйВидЦен
	|						ИЗ
	|							ОтборБазовыхВидовЦен)) КАК БазовыеЦены
	|		ПО РасчитываемыеЗаписи.БазовыйВидЦен = БазовыеЦены.ВидЦен
	|			И РасчитываемыеЗаписи.Номенклатура = БазовыеЦены.Номенклатура
	|			И РасчитываемыеЗаписи.Характеристика = БазовыеЦены.Характеристика";
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Цена <> 0 Тогда // Нулевые цены не пишем, а только почистим очередь
				
				ЗаписьРегистра = РегистрыСведений.ЦеныНоменклатуры.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ЗаписьРегистра, Выборка);
				ЗаписьРегистра.Цена = ЦенообразованиеФормулыСервер.ОкруглитьЧислоПоПравилу(ЗаписьРегистра.Цена, ОкруглятьВБольшуюСторону, ПравилоОкругления);
				ЗаписьРегистра.Записать(Истина);
				
			КонецЕсли;
			
			ОчередьРасчетаЦен = РегистрыСведений.ОчередьРасчетаЦен.СоздатьМенеджерЗаписи();
			ОчередьРасчетаЦен.ПериодЗаписи = НачалоДня(Выборка.Период);
			ОчередьРасчетаЦен.ВидЦенРасчетный = Выборка.ВидЦен;
			ОчередьРасчетаЦен.Номенклатура = Выборка.Номенклатура;
			ОчередьРасчетаЦен.Характеристика = Выборка.Характеристика;
			ОчередьРасчетаЦен.НомерОчередиЦен = Выборка.НомерОчередиЦен;
			ОчередьРасчетаЦен.Удалить();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		ЦеныРасчитаны = Истина;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru ='Ошибка расчета цен из очереди.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦенРасчетный, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура РасчетДинамическихЦенПроцентНаборЗаписей(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки, ЗаписыватьЦены) Экспорт
	
	ПериодЗаписи 			= ПараметрыРасчета.ПериодЗаписи;
	ВидЦенРасчетный			= ПараметрыРасчета.ВидЦенРасчетный;
	НомерОчередиЦен			= ПараметрыРасчета.НомерОчередиЦен;
	ФормаВладелец			= ПараметрыРасчета.УникальныйИдентификатор;
	ЦеныРасчитаны			= Ложь;
	БазовыйВидЦен			= ВидЦенРасчетный.БазовыйВидЦен;
	ОкруглятьВБольшуюСторону= ВидЦенРасчетный.ОкруглятьВБольшуюСторону;
	ПравилоОкругления		= ВидЦенРасчетный.ПорядокОкругления;
	
	БлокировкаДанных		= Новый БлокировкаДанных;
	
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
	ЭлементБлокировки.УстановитьЗначение("ВидЦен", ВидЦенРасчетный);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ОчередьРасчетаЦен");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НомерОчередиЦен", НомерОчередиЦен);
	ЭлементБлокировки.УстановитьЗначение("ВидЦенРасчетный",	ВидЦенРасчетный);
	
	Запрос					= Новый Запрос;
	Запрос.УстановитьПараметр("Период", 		НачалоДня(ПериодЗаписи));
	Запрос.УстановитьПараметр("ВидЦенРасчетный",ВидЦенРасчетный);
	Запрос.УстановитьПараметр("НомерОчередиЦен",НомерОчередиЦен);
	
	Запрос.Текст			=
	"ВЫБРАТЬ
	|	ВидыЦенПоЦеновымГруппам.Ссылка КАК ВидЦенРасчетный,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВидыЦенПоЦеновымГруппам.БазовыйВидЦен КАК БазовыйВидЦен,
	|	ВидыЦенПоЦеновымГруппам.Процент КАК Процент
	|ПОМЕСТИТЬ УсловияРасчетаСЦеновымиГруппами
	|ИЗ
	|	Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенПоЦеновымГруппам
	|ГДЕ
	|	ВидыЦенПоЦеновымГруппам.Ссылка = &ВидЦенРасчетный
	|	И ВидыЦенПоЦеновымГруппам.БазовыйВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидыЦенПоЦеновымГруппам.Ссылка,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьЦен.ПериодЗаписи КАК ПериодЗаписи,
	|	ОчередьЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦен,
	|	ОчередьЦен.Номенклатура КАК Номенклатура,
	|	ОчередьЦен.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОчередьЦен.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(УсловияРасчетаСЦеновымиГруппами.БазовыйВидЦен, ОчередьЦен.ВидЦенРасчетный.БазовыйВидЦен) КАК БазовыйВидЦен,
	|	ЕСТЬNULL(УсловияРасчетаСЦеновымиГруппами.Процент, ОчередьЦен.ВидЦенРасчетный.Процент) КАК Процент,
	|	ИСТИНА КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ РасчитываемыеЗаписиБезРасчета
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияРасчетаСЦеновымиГруппами КАК УсловияРасчетаСЦеновымиГруппами
	|		ПО ОчередьЦен.ВидЦенРасчетный = УсловияРасчетаСЦеновымиГруппами.ВидЦенРасчетный
	|			И ОчередьЦен.Номенклатура.ЦеноваяГруппа = УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа
	|ГДЕ
	|	ОчередьЦен.ПериодЗаписи = &Период
	|	И ОчередьЦен.НомерОчередиЦен = &НомерОчередиЦен
	|	И ОчередьЦен.ВидЦенРасчетный = &ВидЦенРасчетный
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОчередьЦен.Номенклатура,
	|	ОчередьЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчитываемыеЗаписиБезРасчета.БазовыйВидЦен КАК БазовыйВидЦен
	|ПОМЕСТИТЬ ОтборБазовыхВидовЦен
	|ИЗ
	|	РасчитываемыеЗаписиБезРасчета КАК РасчитываемыеЗаписиБезРасчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчитываемыеЗаписиБезРасчета.БазовыйВидЦен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК Актуальность,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК Период,
	|	РасчитываемыеЗаписиБезРасчета.НомерОчередиЦен КАК НомерОчередиЦен,
	|	РасчитываемыеЗаписиБезРасчета.ВидЦен КАК ВидЦен,
	|	РасчитываемыеЗаписиБезРасчета.Номенклатура КАК Номенклатура,
	|	РасчитываемыеЗаписиБезРасчета.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(БазовыеЦены.Цена, 0) + ЕСТЬNULL(БазовыеЦены.Цена, 0) * РасчитываемыеЗаписиБезРасчета.Процент / 100 КАК Цена,
	|	БазовыеЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЛОЖЬ КАК ВключаяХарактеристики,
	|	БазовыеЦены.Автор КАК Автор,
	|	РасчитываемыеЗаписиБезРасчета.ТребуетсяРасчет КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ РасчитываемыеЗаписи
	|ИЗ
	|	РасчитываемыеЗаписиБезРасчета КАК РасчитываемыеЗаписиБезРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Период,
	|				Актуальность
	|					И ВидЦен В
	|						(ВЫБРАТЬ
	|							ОтборБазовыхВидовЦен.БазовыйВидЦен
	|						ИЗ
	|							ОтборБазовыхВидовЦен)) КАК БазовыеЦены
	|		ПО РасчитываемыеЗаписиБезРасчета.БазовыйВидЦен = БазовыеЦены.ВидЦен
	|			И РасчитываемыеЗаписиБезРасчета.Номенклатура = БазовыеЦены.Номенклатура
	|			И РасчитываемыеЗаписиБезРасчета.Характеристика = БазовыеЦены.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РаннееРасчитаныеЦены.Период КАК Период,
	|	&НомерОчередиЦен КАК НомерОчередиЦен,
	|	РаннееРасчитаныеЦены.ВидЦен КАК ВидЦен,
	|	РаннееРасчитаныеЦены.Номенклатура КАК Номенклатура,
	|	РаннееРасчитаныеЦены.Характеристика КАК Характеристика,
	|	РаннееРасчитаныеЦены.Цена КАК Цена,
	|	РаннееРасчитаныеЦены.Актуальность КАК Актуальность,
	|	РаннееРасчитаныеЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РаннееРасчитаныеЦены.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	РаннееРасчитаныеЦены.Автор КАК Автор,
	|	ЛОЖЬ КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ ТекущиеЦеныРасчетногоВидаЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РаннееРасчитаныеЦены
	|ГДЕ
	|	РаннееРасчитаныеЦены.Период = &Период
	|	И РаннееРасчитаныеЦены.ВидЦен = &ВидЦенРасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаннееРасчитаныеЦены.Номенклатура,
	|	РаннееРасчитаныеЦены.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеЦеныРасчетногоВидаЦен.Период КАК Период,
	|	ТекущиеЦеныРасчетногоВидаЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВидЦен КАК ВидЦен,
	|	ТекущиеЦеныРасчетногоВидаЦен.Номенклатура КАК Номенклатура,
	|	ТекущиеЦеныРасчетногоВидаЦен.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА РасчитываемыеЗаписи.ТребуетсяРасчет = ИСТИНА
	|			ТОГДА 0
	|		ИНАЧЕ ТекущиеЦеныРасчетногоВидаЦен.Цена
	|	КОНЕЦ КАК Цена,
	|	ТекущиеЦеныРасчетногоВидаЦен.Актуальность КАК Актуальность,
	|	ТекущиеЦеныРасчетногоВидаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ТекущиеЦеныРасчетногоВидаЦен.Автор КАК Автор
	|ПОМЕСТИТЬ ТекущиеЦеныСПометкойДублирующихсяЗаписей
	|ИЗ
	|	ТекущиеЦеныРасчетногоВидаЦен КАК ТекущиеЦеныРасчетногоВидаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчитываемыеЗаписи КАК РасчитываемыеЗаписи
	|		ПО ТекущиеЦеныРасчетногоВидаЦен.Номенклатура = РасчитываемыеЗаписи.Номенклатура
	|			И ТекущиеЦеныРасчетногоВидаЦен.Характеристика = РасчитываемыеЗаписи.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НеТребующиеПерерасчета.Период КАК Период,
	|	НеТребующиеПерерасчета.НомерОчередиЦен КАК НомерОчередиЦен,
	|	НеТребующиеПерерасчета.ВидЦен КАК ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура КАК Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика КАК Характеристика,
	|	НеТребующиеПерерасчета.Цена КАК Цена,
	|	НеТребующиеПерерасчета.Актуальность КАК Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор КАК Автор
	|ПОМЕСТИТЬ НеТребующиеПерерасчета
	|ИЗ
	|	ТекущиеЦеныСПометкойДублирующихсяЗаписей КАК НеТребующиеПерерасчета
	|ГДЕ
	|	НеТребующиеПерерасчета.Цена <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ТребуетсяНовыйРасчет,
	|	НеТребующиеПерерасчета.Период КАК Период,
	|	НеТребующиеПерерасчета.НомерОчередиЦен КАК НомерОчередиЦен,
	|	НеТребующиеПерерасчета.ВидЦен КАК ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура КАК Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика КАК Характеристика,
	|	НеТребующиеПерерасчета.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппаНоменклатуры,
	|	НеТребующиеПерерасчета.Цена КАК Цена,
	|	НеТребующиеПерерасчета.Актуальность КАК Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор КАК Автор,
	|	ИСТИНА КАК ПересчетВыполнен
	|ПОМЕСТИТЬ ВсеЗаписиОЦенах
	|ИЗ
	|	НеТребующиеПерерасчета КАК НеТребующиеПерерасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	&Период,
	|	РасчитываемыеЗаписи.НомерОчередиЦен,
	|	РасчитываемыеЗаписи.ВидЦен,
	|	РасчитываемыеЗаписи.Номенклатура,
	|	РасчитываемыеЗаписи.Характеристика,
	|	РасчитываемыеЗаписи.Номенклатура.ЦеноваяГруппа,
	|	РасчитываемыеЗаписи.Цена,
	|	ИСТИНА,
	|	РасчитываемыеЗаписи.ЕдиницаИзмерения,
	|	ЛОЖЬ,
	|	РасчитываемыеЗаписи.Автор,
	|	ИСТИНА
	|ИЗ
	|	РасчитываемыеЗаписи КАК РасчитываемыеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеЗаписиОЦенах.ТребуетсяНовыйРасчет КАК ТребуетсяНовыйРасчет,
	|	ВсеЗаписиОЦенах.Период КАК Период,
	|	ВсеЗаписиОЦенах.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ВсеЗаписиОЦенах.ВидЦен КАК ВидЦен,
	|	ВсеЗаписиОЦенах.Номенклатура КАК Номенклатура,
	|	ВсеЗаписиОЦенах.Характеристика КАК Характеристика,
	|	ВсеЗаписиОЦенах.ЦеноваяГруппаНоменклатуры КАК ЦеноваяГруппаНоменклатуры,
	|	ВсеЗаписиОЦенах.Цена КАК Цена,
	|	ВсеЗаписиОЦенах.Актуальность КАК Актуальность,
	|	ВсеЗаписиОЦенах.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВсеЗаписиОЦенах.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ВсеЗаписиОЦенах.Автор КАК Автор,
	|	ВсеЗаписиОЦенах.ПересчетВыполнен КАК ПересчетВыполнен
	|ИЗ
	|	ВсеЗаписиОЦенах КАК ВсеЗаписиОЦенах";
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		ЗаписиРегистраЗаПериода = Запрос.Выполнить().Выгрузить();
		КоличествоЗаписей		= ЗаписиРегистраЗаПериода.Количество();
		Пока КоличествоЗаписей > 0 Цикл
			
			ЗаписьРегистра = ЗаписиРегистраЗаПериода.Получить(КоличествоЗаписей - 1);
			
			ЗаписьРегистра.Цена = ЦенообразованиеФормулыСервер.ОкруглитьЧислоПоПравилу(ЗаписьРегистра.Цена, ОкруглятьВБольшуюСторону, ПравилоОкругления);
			Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.Цена) Тогда
				
				ЗаписиРегистраЗаПериода.Удалить(ЗаписьРегистра);
				
			КонецЕсли;
			
			КоличествоЗаписей = КоличествоЗаписей - 1;
			
		КонецЦикла;
		
		Если ЗаписыватьЦены Тогда
			
			ЗаписатьЦеныИОчиститьОчередьЦен(ПериодЗаписи, ВидЦенРасчетный, НомерОчередиЦен, ЗаписиРегистраЗаПериода);
			
		Иначе
			
			ПараметрыРасчета.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ЗаписиРегистраЗаПериода, ФормаВладелец));
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ЦеныРасчитаны = Истина;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru ='Ошибка расчета цен из очереди.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦенРасчетный, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область РасчетФормулой

Процедура РасчетДинамическихЦенПоФормуле(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки = "", ЗаписыватьЦены = Истина) Экспорт
	
	ПериодЗаписи 			= НачалоДня(ПараметрыРасчета.ПериодЗаписи);
	НомерОчередиЦен			= ПараметрыРасчета.НомерОчередиЦен;
	ВидЦенРасчетный			= ПараметрыРасчета.ВидЦенРасчетный;
	ФормаВладелец			= ПараметрыРасчета.УникальныйИдентификатор;
	
	РасчетКоллекции			= Новый Структура;
	РасчетКоллекции.Вставить("ВидЦен",		ПараметрыРасчета.ВидЦенРасчетный);
	РасчетКоллекции.Вставить("Курс",		ПараметрыРасчета.ВидЦенРасчетныйКурс);
	РасчетКоллекции.Вставить("Кратность",	ПараметрыРасчета.ВидЦенРасчетныйКратность);
	
	БлокировкаДанных		= Новый БлокировкаДанных;
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ЦеныНоменклатуры");
	ЭлементБлокировки.УстановитьЗначение("ВидЦен", ВидЦенРасчетный);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки		= БлокировкаДанных.Добавить("РегистрСведений.ОчередьРасчетаЦен");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НомерОчередиЦен", НомерОчередиЦен);
	ЭлементБлокировки.УстановитьЗначение("ВидЦенРасчетный",	ВидЦенРасчетный);
	
	Запрос					= Новый Запрос;
	Запрос.УстановитьПараметр("Период", 		ПериодЗаписи);
	Запрос.УстановитьПараметр("ВидЦенРасчетный",ВидЦенРасчетный);
	Запрос.УстановитьПараметр("НомерОчередиЦен",НомерОчередиЦен);
	
	Запрос.Текст			=
	"ВЫБРАТЬ
	//
	//::: [0]
	//
	|	ВидыЦенПоЦеновымГруппам.Ссылка КАК ВидЦенРасчетный,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ВидыЦенПоЦеновымГруппам.Формула КАК Формула
	|ПОМЕСТИТЬ УсловияРасчетаСЦеновымиГруппами
	|ИЗ
	|	Справочник.ВидыЦен.ЦеновыеГруппы КАК ВидыЦенПоЦеновымГруппам
	|ГДЕ
	|	ВидыЦенПоЦеновымГруппам.Ссылка = &ВидЦенРасчетный
	|	И ВидыЦенПоЦеновымГруппам.БазовыйВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидыЦенПоЦеновымГруппам.Ссылка,
	|	ВидыЦенПоЦеновымГруппам.ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [1]
	//
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьЦен.ПериодЗаписи КАК ПериодЗаписи,
	|	ОчередьЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьЦен.ВидЦенРасчетный КАК ВидЦен,
	|	ОчередьЦен.Номенклатура КАК Номенклатура,
	|	ОчередьЦен.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ОчередьЦен.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА УсловияРасчетаСЦеновымиГруппами.Формула ЕСТЬ NULL
	|			ТОГДА ВЫРАЗИТЬ(ОчередьЦен.ВидЦенРасчетный.Формула КАК СТРОКА(1024))
	|		ИНАЧЕ ВЫРАЗИТЬ(УсловияРасчетаСЦеновымиГруппами.Формула КАК СТРОКА(1024))
	|	КОНЕЦ КАК Формула,
	|	ИСТИНА КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ РасчитываемыеЗаписи
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ УсловияРасчетаСЦеновымиГруппами КАК УсловияРасчетаСЦеновымиГруппами
	|		ПО ОчередьЦен.ВидЦенРасчетный = УсловияРасчетаСЦеновымиГруппами.ВидЦенРасчетный
	|			И ОчередьЦен.Номенклатура.ЦеноваяГруппа = УсловияРасчетаСЦеновымиГруппами.ЦеноваяГруппа
	|ГДЕ
	|	ОчередьЦен.ПериодЗаписи = &Период
	|	И ОчередьЦен.НомерОчередиЦен = &НомерОчередиЦен
	|	И ОчередьЦен.ВидЦенРасчетный = &ВидЦенРасчетный
	|	И НЕ ОчередьЦен.ПересчетВыполнен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОчередьЦен.Номенклатура,
	|	ОчередьЦен.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [2]
	//
	|ВЫБРАТЬ
	|	РаннееРасчитаныеЦены.Период КАК Период,
	|	&НомерОчередиЦен КАК НомерОчередиЦен,
	|	РаннееРасчитаныеЦены.ВидЦен КАК ВидЦен,
	|	РаннееРасчитаныеЦены.Номенклатура КАК Номенклатура,
	|	РаннееРасчитаныеЦены.Характеристика КАК Характеристика,
	|	РаннееРасчитаныеЦены.Цена КАК Цена,
	|	РаннееРасчитаныеЦены.Актуальность КАК Актуальность,
	|	РаннееРасчитаныеЦены.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	РаннееРасчитаныеЦены.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	РаннееРасчитаныеЦены.Автор КАК Автор,
	|	ЛОЖЬ КАК ТребуетсяРасчет
	|ПОМЕСТИТЬ ТекущиеЦеныРасчетногоВидаЦен
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК РаннееРасчитаныеЦены
	|ГДЕ
	|	РаннееРасчитаныеЦены.Период = &Период
	|	И РаннееРасчитаныеЦены.ВидЦен = &ВидЦенРасчетный
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РаннееРасчитаныеЦены.Номенклатура,
	|	РаннееРасчитаныеЦены.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [3]
	//
	|ВЫБРАТЬ
	|	ТекущиеЦеныРасчетногоВидаЦен.Период КАК Период,
	|	ТекущиеЦеныРасчетногоВидаЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВидЦен КАК ВидЦен,
	|	ТекущиеЦеныРасчетногоВидаЦен.Номенклатура КАК Номенклатура,
	|	ТекущиеЦеныРасчетногоВидаЦен.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА РасчитываемыеЗаписи.ТребуетсяРасчет = ИСТИНА
	|			ТОГДА 0
	|		ИНАЧЕ ТекущиеЦеныРасчетногоВидаЦен.Цена
	|	КОНЕЦ КАК Цена,
	|	ТекущиеЦеныРасчетногоВидаЦен.Актуальность КАК Актуальность,
	|	ТекущиеЦеныРасчетногоВидаЦен.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТекущиеЦеныРасчетногоВидаЦен.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	ТекущиеЦеныРасчетногоВидаЦен.Автор КАК Автор
	|ПОМЕСТИТЬ ТекущиеЦеныРасчетногоВидаЦенПослеОбъединения
	|ИЗ
	|	ТекущиеЦеныРасчетногоВидаЦен КАК ТекущиеЦеныРасчетногоВидаЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасчитываемыеЗаписи КАК РасчитываемыеЗаписи
	|		ПО ТекущиеЦеныРасчетногоВидаЦен.Номенклатура = РасчитываемыеЗаписи.Номенклатура
	|			И ТекущиеЦеныРасчетногоВидаЦен.Характеристика = РасчитываемыеЗаписи.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [4]
	//
	|ВЫБРАТЬ
	|	НеТребующиеПерерасчета.Период КАК Период,
	|	НеТребующиеПерерасчета.НомерОчередиЦен КАК НомерОчередиЦен,
	|	НеТребующиеПерерасчета.ВидЦен КАК ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура КАК Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика КАК Характеристика,
	|	НеТребующиеПерерасчета.Цена КАК Цена,
	|	НеТребующиеПерерасчета.Актуальность КАК Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор КАК Автор
	|ПОМЕСТИТЬ НеТребующиеПерерасчета
	|ИЗ
	|	ТекущиеЦеныРасчетногоВидаЦенПослеОбъединения КАК НеТребующиеПерерасчета
	|ГДЕ
	|	НеТребующиеПерерасчета.Цена <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [5]
	//
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ТребуетсяНовыйРасчет,
	|	НеТребующиеПерерасчета.Период КАК Период,
	|	НеТребующиеПерерасчета.НомерОчередиЦен КАК НомерОчередиЦен,
	|	НеТребующиеПерерасчета.ВидЦен КАК ВидЦен,
	|	НеТребующиеПерерасчета.Номенклатура КАК Номенклатура,
	|	НеТребующиеПерерасчета.Характеристика КАК Характеристика,
	|	НеТребующиеПерерасчета.Цена КАК Цена,
	|	НеТребующиеПерерасчета.Актуальность КАК Актуальность,
	|	НеТребующиеПерерасчета.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	НеТребующиеПерерасчета.ВключаяХарактеристики КАК ВключаяХарактеристики,
	|	НеТребующиеПерерасчета.Автор КАК Автор,
	|	"""" КАК Формула,
	|	ИСТИНА КАК ПересчетВыполнен
	|ИЗ
	|	НеТребующиеПерерасчета КАК НеТребующиеПерерасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	&Период,
	|	РасчитываемыеЗаписи.НомерОчередиЦен,
	|	РасчитываемыеЗаписи.ВидЦен,
	|	РасчитываемыеЗаписи.Номенклатура,
	|	РасчитываемыеЗаписи.Характеристика,
	|	0,
	|	ИСТИНА,
	|	НЕОПРЕДЕЛЕНО,
	|	ЛОЖЬ,
	|	НЕОПРЕДЕЛЕНО,
	|	РасчитываемыеЗаписи.Формула,
	|	ИСТИНА
	|ИЗ
	|	РасчитываемыеЗаписи КАК РасчитываемыеЗаписи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	//
	//::: [6]
	//
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчитываемыеЗаписи.Формула КАК Формула
	|ИЗ
	|	РасчитываемыеЗаписи КАК РасчитываемыеЗаписи";
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных.Заблокировать();
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		ЗаписиРегистраЗаПериода = РезультатЗапроса[5].Выгрузить();
		
		ИспользуемыеФормулы = РезультатЗапроса[6].Выгрузить().ВыгрузитьКолонку("Формула");
		ТаблицаОперандов = ЦенообразованиеФормулыСервер.ПолучитьТаблицуОперандовФормулы(ПериодЗаписи, ИспользуемыеФормулы);
		ЗначенияЦенВТаблицуОперандов(НачалоДня(ПериодЗаписи), ТаблицаОперандов, ЗаписиРегистраЗаПериода);
		
		ЦенообразованиеФормулыСервер.РасчитатьДанныеКоллекции(ЗаписиРегистраЗаПериода, ТаблицаОперандов, РасчетКоллекции);
		
		Если ЗаписыватьЦены Тогда
			
			ЗаписатьЦеныИОчиститьОчередьЦен(ПериодЗаписи, ВидЦенРасчетный, НомерОчередиЦен, ЗаписиРегистраЗаПериода);
			
		Иначе
			
			ПараметрыРасчета.Вставить("АдресВХранилище", ПоместитьВоВременноеХранилище(ЗаписиРегистраЗаПериода, ФормаВладелец));
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ЦеныРасчитаны = Истина;
		
	Исключение
		
		ОписаниеОшибки = НСтр("ru ='Ошибка расчета цен из очереди.'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, ВидЦенРасчетный, ОписаниеОшибки);
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗначенияЦенВТаблицуОперандов(ПериодЗаписи, ТаблицаОперандов, ЗаписиРегистраЗаПериода) Экспорт
	
	Если ТаблицаОперандов.Колонки.Найти("Значение") = Неопределено Тогда
		
		ТаблицаОперандов.Колонки.Добавить("Значение");
		
	КонецЕсли;
	
	Если ТаблицаОперандов.Колонки.Найти("КлючСвязи") = Неопределено Тогда
		
		ТаблицаОперандов.Колонки.Добавить("КлючСвязи");
		
	КонецЕсли;
	
	ШаблонТекстаЗапроса =
	"; 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиОЦене.%1 КАК ВидЦен,
	|	ЗаписиОЦене.%1.ИдентификаторФормул КАК Идентификатор,
	|	ЗаписиОЦене.Номенклатура КАК Номенклатура,
	|	ЗаписиОЦене.Характеристика КАК Характеристика,
	|	ЗаписиОЦене.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаписиОЦене.Цена КАК Значение,
	|	&%3_Курс КАК Курс,
	|	&%3_Кратность КАК Кратность
	|ИЗ
	|	НоменклатураХарактеристики КАК НоменклатураХарактеристики
	|		ЛЕВОЕ СОЕДИНЕНИЕ %2(
	|				&ПериодЗаписи,
	|				Актуальность
	|					И %1 = &%3) КАК ЗаписиОЦене
	|		ПО НоменклатураХарактеристики.Номенклатура = ЗаписиОЦене.Номенклатура
	|			И НоменклатураХарактеристики.Характеристика = ЗаписиОЦене.Характеристика
	|ГДЕ
	|	НЕ ЗаписиОЦене.Номенклатура ЕСТЬ NULL";
	
	ЗапросПоЦенам = Новый Запрос;
	ЗапросПоЦенам.УстановитьПараметр("ПериодЗаписи", ПериодЗаписи);
	ЗапросПоЦенам.УстановитьПараметр("ЗаписиРегистраЗаПериода", ЗаписиРегистраЗаПериода);
	
	ЗапросПоЦенам.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиРегистраЗаПериода.Номенклатура КАК Номенклатура,
	|	ЗаписиРегистраЗаПериода.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НоменклатураХарактеристики
	|ИЗ
	|	&ЗаписиРегистраЗаПериода КАК ЗаписиРегистраЗаПериода
	|ГДЕ
	|	ЗаписиРегистраЗаПериода.ТребуетсяНовыйРасчет = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ИндексРезультатаЗапроса = 1;
	Для каждого СтрокаТаблицы Из ТаблицаОперандов Цикл
		
		Если СтрокаТаблицы.ЭтоЦеныНоменклатуры = Истина Тогда
			
			ИмяПоляВидЦен = "ВидЦен";
			ИмяТаблицы = "РегистрСведений.ЦеныНоменклатуры.СрезПоследних"
			
		ИначеЕсли СтрокаТаблицы.ЭтоЦеныНоменклатуры = Ложь Тогда
			
			ИмяПоляВидЦен = "ВидЦенКонтрагента";
			ИмяТаблицы = "РегистрСведений.ЦеныНоменклатурыКонтрагентов.СрезПоследних"
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		ЗапросПоЦенам.УстановитьПараметр(СтрокаТаблицы.ВидЦен.ИдентификаторФормул, СтрокаТаблицы.ВидЦен);
		ЗапросПоЦенам.УстановитьПараметр(СтрокаТаблицы.ВидЦен.ИдентификаторФормул + "_Курс", СтрокаТаблицы.ВидЦенКурс);
		ЗапросПоЦенам.УстановитьПараметр(СтрокаТаблицы.ВидЦен.ИдентификаторФормул + "_Кратность", СтрокаТаблицы.ВидЦенКратность);
		ЗапросПоЦенам.Текст = ЗапросПоЦенам.Текст + СтрШаблон(ШаблонТекстаЗапроса, ИмяПоляВидЦен, ИмяТаблицы, СтрокаТаблицы.ВидЦен.ИдентификаторФормул);
		
		СтрокаТаблицы.КлючСвязи = ИндексРезультатаЗапроса;
		ИндексРезультатаЗапроса = ИндексРезультатаЗапроса + 1;
		
	КонецЦикла;
	
	РезультатЗапроса = ЗапросПоЦенам.ВыполнитьПакет();
	Для каждого СтрокаТаблицы Из ТаблицаОперандов Цикл
		
		Если СтрокаТаблицы.КлючСвязи = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицы.Значение = РезультатЗапроса[СтрокаТаблицы.КлючСвязи].Выгрузить();
		
	КонецЦикла;
	
	ТаблицаОперандов.Колонки.Удалить("КлючСвязи");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОчередьРасчетаЦен

Процедура РассчитатьЦеныИзОчередиЦен()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОчередьРасчетаЦен.ПериодЗаписи КАК ПериодЗаписи,
	|	ОчередьРасчетаЦен.НомерОчередиЦен КАК НомерОчередиЦен,
	|	ОчередьРасчетаЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ОчередьРасчетаЦен.ВидЦенРасчетный.ВалютаЦены КАК ВалютаЦены,
	|	КОЛИЧЕСТВО(1) КАК КоличествоЗаписей
	|ИЗ
	|	РегистрСведений.ОчередьРасчетаЦен КАК ОчередьРасчетаЦен
	|ГДЕ
	|	ОчередьРасчетаЦен.ВидЦенРасчетный.КоличествоПопытокСлужебный < 2
	|	И ОчередьРасчетаЦен.ВидЦенРасчетный.РассчитыватьАвтоматически
	|
	|СГРУППИРОВАТЬ ПО
	|	ОчередьРасчетаЦен.ПериодЗаписи,
	|	ОчередьРасчетаЦен.НомерОчередиЦен,
	|	ОчередьРасчетаЦен.ВидЦенРасчетный,
	|	ОчередьРасчетаЦен.ВидЦенРасчетный.ВалютаЦены
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОчередьРасчетаЦен.НомерОчередиЦен,
	|	ОчередьРасчетаЦен.ПериодЗаписи,
	|	ОчередьРасчетаЦен.ВидЦенРасчетный
	|ИТОГИ ПО
	|	НомерОчередиЦен";
	
	ВыборкаНомеровОчередей = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	Пока ВыборкаНомеровОчередей.Следующий() Цикл
		
		Выборка = ВыборкаНомеровОчередей.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПараметрыРасчета = Новый Структура;
			ПараметрыРасчета.Вставить("ПериодЗаписи", НачалоДня(Выборка.ПериодЗаписи));
			ПараметрыРасчета.Вставить("НомерОчередиЦен", ВыборкаНомеровОчередей.НомерОчередиЦен);
			ПараметрыРасчета.Вставить("ВидЦенРасчетный", Выборка.ВидЦенРасчетный);
			ПараметрыРасчета.Вставить("КоличествоЗаписей", Выборка.КоличествоЗаписей);
			ПараметрыРасчета.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);
			
			КурсВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютаЦены, ПараметрыРасчета.ПериодЗаписи);
			ПараметрыРасчета.Вставить("ВидЦенРасчетныйКурс", ?(ЗначениеЗаполнено(КурсВалюты.Курс), КурсВалюты.Курс, 1));
			ПараметрыРасчета.Вставить("ВидЦенРасчетныйКратность", ?(ЗначениеЗаполнено(КурсВалюты.Кратность), КурсВалюты.Кратность, 1));
			
			ЦеныРасчитаны	= Ложь;
			ОписаниеОшибки	= "";
			Если Выборка.ВидЦенРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийПроцент Тогда
				
				РасчетДинамическихЦенНаПроцент(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки, Истина);
				
			ИначеЕсли Выборка.ВидЦенРасчетный.ТипВидаЦен = Перечисления.ТипыВидовЦен.ДинамическийФормула Тогда
				
				РасчетДинамическихЦенПоФормуле(ПараметрыРасчета, ЦеныРасчитаны, ОписаниеОшибки, Истина);
				
			КонецЕсли;
			
			Если НЕ ЦеныРасчитаны Тогда
				
				ВидЦенОбъект							= Выборка.ВидЦенРасчетный.ПолучитьОбъект();
				ВидЦенОбъект.КоличествоПопытокСлужебный = ВидЦенОбъект.КоличествоПопытокСлужебный + 1;
				ВидЦенОбъект.ОписаниеОшибки				= ОписаниеОшибки;
				
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВидЦенОбъект, Ложь, Ложь);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьЦеныИОчиститьОчередьЦен(ПериодЗаписи, ВидЦенРасчетный, НомерОчередиЦен, ЗаписиРегистраЗаПериода) Экспорт
		
	ЦеныНоменклатуры = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	ЦеныНоменклатуры.Отбор.Период.Установить(ПериодЗаписи, Истина);
	ЦеныНоменклатуры.Отбор.ВидЦен.Установить(ВидЦенРасчетный, Истина);
	ЦеныНоменклатуры.Загрузить(ЗаписиРегистраЗаПериода);
	ЦеныНоменклатуры.Записать(Истина);
	
	ОчередьРасчетаЦен = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
	ОчередьРасчетаЦен.Отбор.ПериодЗаписи.Установить(ПериодЗаписи, Истина);
	ОчередьРасчетаЦен.Отбор.ВидЦенРасчетный.Установить(ВидЦенРасчетный, Истина);
	ОчередьРасчетаЦен.Отбор.НомерОчередиЦен.Установить(НомерОчередиЦен, Истина);
	ОчередьРасчетаЦен.Очистить();
	ОчередьРасчетаЦен.Записать();
	
КонецПроцедуры

#Область ПодпискиНаСобытие

#Область ЦенообразованиеДобавитьЗаписиОчередиЦен

Процедура ПодпискаНаСобытиеПриЗаписиЦены(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ЭтоРаботаПодпискиНаСобытие") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НовыеЦены 				= Источник.Выгрузить();
	ЭтоЦеныНоменклатуры		= Истина;
	РабочийНомерОчередиЦен	= Неопределено;
	
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатурыКонтрагентов") Тогда
		
		ЭтоЦеныНоменклатуры = Ложь;
		
		НовыеЦены.Колонки.ВидЦенКонтрагента.Имя = "ВидЦен";
		
	КонецЕсли;
	
	Если НовыеЦены.Количество() > 0 Тогда
		
		Источник.ДополнительныеСвойства.Свойство("РабочийНомерОчередиЦен", РабочийНомерОчередиЦен);
		АктуализироватьОчередьРасчетаДинамическихЦен(НовыеЦены, ЭтоЦеныНоменклатуры, РабочийНомерОчередиЦен);
		
	Иначе
		
		УдалитьЗаписиОЦенахВДинамическихВидахЦен(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьОчередьРасчетаДинамическихЦен(НовыеЦены, ЭтоЦеныНоменклатуры, РабочийНомерОчередиЦен)
	
	Если РабочийНомерОчередиЦен = Неопределено Тогда
		
		РабочийНомерОчередиЦен = УстановитьРабочийНомерОчередиЦен();
		
	КонецЕсли;
	
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОчередьРасчетаЦен");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("НомерОчередиЦен", РабочийНомерОчередиЦен);
	
	ЭлементБлокировки = Блокировка.Добавить(?(ЭтоЦеныНоменклатуры = Истина, "Справочник.ВидыЦен", "Справочник.ВидыЦенКонтрагентов"));
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = НовыеЦены;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ВидЦен");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НовыеЦены", НовыеЦены);
	Запрос.УстановитьПараметр("НомерОчередиЦен", РабочийНомерОчередиЦен);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НовыеЦены.Период КАК ПериодЗаписи,
	|	НовыеЦены.ВидЦен КАК ВидЦен,
	|	ВЫРАЗИТЬ(НовыеЦены.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	НовыеЦены.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НовыеЦены
	|ИЗ
	|	&НовыеЦены КАК НовыеЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЦены.ПериодЗаписи КАК ПериодЗаписи,
	|	НовыеЦены.ВидЦен КАК ВидЦен,
	|	НовыеЦены.Номенклатура КАК Номенклатура,
	|	НовыеЦены.Номенклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	НовыеЦены.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ НовыеЦеныСЦеновымиГруппами
	|ИЗ
	|	НовыеЦены КАК НовыеЦены
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидЦен,
	|	ЦеноваяГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЦеныСЦеновымиГруппами.ПериодЗаписи КАК ПериодЗаписи,
	|	СвязиВидовЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	НовыеЦеныСЦеновымиГруппами.ВидЦен КАК ВидЦенБазовый,
	|	НовыеЦеныСЦеновымиГруппами.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяССылка) КАК ВидЦенБазовыйЦеновойГруппы,
	|	НовыеЦеныСЦеновымиГруппами.Номенклатура КАК Номенклатура,
	|	НовыеЦеныСЦеновымиГруппами.Характеристика КАК Характеристика,
	|	&НомерОчередиЦен КАК НомерОчередиЦен,
	|	ВЫБОР
	|		КОГДА СвязиВидовЦенУточнениеЦеновыхГрупп.ВидЦенРасчетный ЕСТЬ NULL
	|			ТОГДА ""NULL""
	|		ИНАЧЕ СвязиВидовЦенУточнениеЦеновыхГрупп.ВидЦенРасчетный
	|	КОНЕЦ КАК ПризнакУточнения
	|ИЗ
	|	НовыеЦеныСЦеновымиГруппами КАК НовыеЦеныСЦеновымиГруппами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен
	|		ПО НовыеЦеныСЦеновымиГруппами.ВидЦен = СвязиВидовЦен.ВидЦенБазовый
	|			И (СвязиВидовЦен.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяССылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦенУточнениеЦеновыхГрупп
	|		ПО (СвязиВидовЦенУточнениеЦеновыхГрупп.ВидЦенБазовый = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|			И НовыеЦеныСЦеновымиГруппами.ВидЦен = СвязиВидовЦенУточнениеЦеновыхГрупп.ВидЦенБазовыйЦеновойГруппы
	|			И НовыеЦеныСЦеновымиГруппами.ЦеноваяГруппа = СвязиВидовЦенУточнениеЦеновыхГрупп.ЦеноваяГруппа
	|ГДЕ
	|	СвязиВидовЦен.ВидЦенРасчетный <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяССылка)
	|	И СвязиВидовЦенУточнениеЦеновыхГрупп.ВидЦенРасчетный ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеЦеныСЦеновымиГруппами.ПериодЗаписи КАК ПериодЗаписи,
	|	СвязиВидовЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	НовыеЦеныСЦеновымиГруппами.ВидЦен КАК ВидЦенБазовый,
	|	НовыеЦеныСЦеновымиГруппами.ЦеноваяГруппа КАК ЦеноваяГруппа,
	|	НовыеЦеныСЦеновымиГруппами.ВидЦен КАК ВидЦенБазовыйЦеновойГруппы,
	|	НовыеЦеныСЦеновымиГруппами.Номенклатура КАК Номенклатура,
	|	НовыеЦеныСЦеновымиГруппами.Характеристика КАК Характеристика,
	|	&НомерОчередиЦен КАК НомерОчередиЦен
	|ИЗ
	|	НовыеЦеныСЦеновымиГруппами КАК НовыеЦеныСЦеновымиГруппами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен
	|		ПО НовыеЦеныСЦеновымиГруппами.ЦеноваяГруппа = СвязиВидовЦен.ЦеноваяГруппа
	|			И НовыеЦеныСЦеновымиГруппами.ВидЦен = СвязиВидовЦен.ВидЦенБазовыйЦеновойГруппы
	|ГДЕ
	|	НЕ СвязиВидовЦен.ВидЦенРасчетный ЕСТЬ NULL";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РегистрацияПоБазовымВидамЦен = РезультатЗапроса[2].Выгрузить();
	РегистрацияПоЦеновымГруппам = РезультатЗапроса[3].Выгрузить();
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка.Заблокировать();
		
		Для каждого СтрокаТаблицы Из РегистрацияПоБазовымВидамЦен Цикл
			
			МенеджерЗаписиОчередиРасчета = РегистрыСведений.ОчередьРасчетаЦен.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиОчередиРасчета, СтрокаТаблицы);
			МенеджерЗаписиОчередиРасчета.Записать(Истина);
			
		КонецЦикла;
		
		Для каждого СтрокаТаблицы Из РегистрацияПоЦеновымГруппам Цикл
			
			МенеджерЗаписиОчередиРасчета = РегистрыСведений.ОчередьРасчетаЦен.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиОчередиРасчета, СтрокаТаблицы);
			МенеджерЗаписиОчередиРасчета.Записать(Истина);
			
		КонецЦикла;
		
		Если РегистрацияПоБазовымВидамЦен.Количество() > 0
			ИЛИ РегистрацияПоЦеновымГруппам.Количество() > 0
			Тогда
			
			УстановитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчередьРасчетаЦен, Истина);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УдалитьЗаписиОЦенахВДинамическихВидахЦен(Источник)
	
	ПроверитьЗавимыеЦены = Ложь;
	Если ТипЗнч(Источник) = Тип("РегистрСведенийНаборЗаписей.ЦеныНоменклатурыКонтрагентов") Тогда
		
		ВидЦен = Источник.Отбор.ВидЦенКонтрагента.Значение;
		ПроверитьЗавимыеЦены = Истина;
		
	Иначе
		
		ВидЦен = Источник.Отбор.ВидЦен.Значение;
		ПроверитьЗавимыеЦены = ЗначениеЗаполнено(ВидЦен) И ВидЦен.ТипВидаЦен = Перечисления.ТипыВидовЦен.Статический;
		
	КонецЕсли;
	
	Если ПроверитьЗавимыеЦены Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		КлючУдаляемойЗаписи					= Новый Структура("Период, ВидЦен, Номенклатура, Характеристика");
		КлючУдаляемойЗаписи.Период			= НачалоДня(Источник.Отбор.Период.Значение);
		КлючУдаляемойЗаписи.Номенклатура	= Источник.Отбор.Номенклатура.Значение;
		КлючУдаляемойЗаписи.Характеристика	= Источник.Отбор.Характеристика.Значение;
		
		ЦеноваяГруппа						= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КлючУдаляемойЗаписи.Номенклатура, "ЦеноваяГруппа");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидЦен", ВидЦен);
		Запрос.УстановитьПараметр("ЦеноваяГруппа", ЦеноваяГруппа);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СвязиВидовЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
		|	СвязиВидовЦен.ВидЦенБазовый КАК ВидЦенБазовый,
		|	СвязиВидовЦен.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СвязиВидовЦен.ВидЦенБазовыйЦеновойГруппы КАК ВидЦенБазовыйЦеновойГруппы
		|ИЗ
		|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен
		|ГДЕ
		|	СвязиВидовЦен.ВидЦенБазовый = &ВидЦен
		|	И СвязиВидовЦен.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяССылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СвязиВидовЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
		|	СвязиВидовЦен.ВидЦенБазовый КАК ВидЦенБазовый,
		|	СвязиВидовЦен.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СвязиВидовЦен.ВидЦенБазовыйЦеновойГруппы КАК ВидЦенБазовыйЦеновойГруппы
		|ИЗ
		|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦен
		|ГДЕ
		|	СвязиВидовЦен.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяССылка)";
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		РегистрацияПоБазовымВидамЦен = РезультатЗапроса[0].Выгрузить();
		РегистрацияПоЦеновымГруппам = РезультатЗапроса[1].Выгрузить();
		
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ВидЦенБазовый", ВидЦен);
		
		СвязиПоБазовому = РегистрацияПоБазовымВидамЦен.НайтиСтроки(ОтборСтрок);
		Если СвязиПоБазовому.Количество() > 0 Тогда
			
			Для каждого СтрокаТаблицы Из СвязиПоБазовому Цикл
				
				ОтборСтрок.Вставить("ВидЦенРасчетный", СтрокаТаблицы.ВидЦенРасчетный);
				ОтборСтрок.Вставить("ЦеноваяГруппа", ЦеноваяГруппа);
				
				СвязиПоЦеновойГруппе = РегистрацияПоЦеновымГруппам.НайтиСтроки(ОтборСтрок);
				Если СвязиПоЦеновойГруппе.Количество() = 0 Тогда
					
					КлючУдаляемойЗаписи.ВидЦен = СтрокаТаблицы.ВидЦенРасчетный;
					УдалитьОднуЗаписьПоКлючу(КлючУдаляемойЗаписи);
					
				ИначеЕсли СвязиПоЦеновойГруппе.Количество() = 1
					И СвязиПоЦеновойГруппе[0].ВидЦенБазовыйЦеновойГруппы = ВидЦен Тогда
					
					КлючУдаляемойЗаписи.ВидЦен = СвязиПоЦеновойГруппе[0].ВидЦенРасчетный;
					УдалитьОднуЗаписьПоКлючу(КлючУдаляемойЗаписи);
					
				ИначеЕсли  СвязиПоЦеновойГруппе.Количество() > 1 Тогда
					
					// В случае коллизии пройдем мимо (рассмотреть добавление сообщения об ошибке)
					ОписаниеОшибки = СтрШаблон(НСтр("ru ='Для вида цен <%1> есть два уточнения по ценовой группе <%2>.'"), СтрокаТаблицы.ВидЦенРасчетный, ЦеноваяГруппа);
					ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.ВидыЦен, СтрокаТаблицы.ВидЦенРасчетный, ОписаниеОшибки);
					
					Продолжить;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЦеноваяГруппа) Тогда
			
			ОтборСтрок.Очистить();
			ОтборСтрок.Вставить("ЦеноваяГруппа", ЦеноваяГруппа);
			ОтборСтрок.Вставить("ВидЦенБазовыйЦеновойГруппы", ВидЦен);
			
			СвязиПоЦеновойГруппе = РегистрацияПоЦеновымГруппам.НайтиСтроки(ОтборСтрок);
			Для каждого СтрокаТаблицы Из СвязиПоЦеновойГруппе Цикл
				
				КлючУдаляемойЗаписи.ВидЦен = СтрокаТаблицы.ВидЦенРасчетный;
				УдалитьОднуЗаписьПоКлючу(КлючУдаляемойЗаписи);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьОднуЗаписьПоКлючу(КлючУдаляемойЗаписи)
	
	НаборЗаписей = РегистрыСведений.ЦеныНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(КлючУдаляемойЗаписи.Период, Истина);
	НаборЗаписей.Отбор.ВидЦен.Установить(КлючУдаляемойЗаписи.ВидЦен, Истина);
	НаборЗаписей.Отбор.Номенклатура.Установить(КлючУдаляемойЗаписи.Номенклатура, Истина);
	НаборЗаписей.Отбор.Характеристика.Установить(КлючУдаляемойЗаписи.Характеристика, Истина);
	НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоРаботаПодпискиНаСобытие", Истина);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ЦенообразованиеПриИзмененииКурсаВалюты

Процедура ПодпискаНаСобытиеПриИзмененииКурсаВалюты(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Источник.Выгрузить().Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭлементОтбора = Источник.Отбор.Найти("Период");
	Если ЭлементОтбора = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Период = ЭлементОтбора.Значение;
	
	ЭлементОтбора = Источник.Отбор.Найти("Валюта");
	Если ЭлементОтбора = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РабочийНомерОчередиЦен	= УстановитьРабочийНомерОчередиЦен();
	ВалютаИзменение			= ЭлементОтбора.Значение;
	
	СпособУстановкиКурса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВалютаИзменение, "СпособУстановкиКурса");
	Если СпособУстановкиКурса <> Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТребуетсяПереключитьИспользованиеЗадания = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("ВалютаИзменение", ВалютаИзменение);
	Запрос.УстановитьПараметр("НомерОчередиЦен", РабочийНомерОчередиЦен);
	
	Запрос.Текст =
	"
	//
	// ::: [0] Динамические виды цен (формула) с валютой, у которой изменился курс
	//
	|ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК ВидЦенРасчетный
	|ПОМЕСТИТЬ ВидыЦенПоВалюте
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.ДинамическийФормула)
	|	И ВидыЦен.ВалютаЦены = &ВалютаИзменение
	|;
	|
	//
	// ::: [1] Очередь расчета для видов цен из [0]
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыЦен.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ПересчетВыполнен,
	|	&Период КАК ПериодЗаписи,
	|	&НомерОчередиЦен КАК НомерОчередиЦен
	|ИЗ
	|	ВидыЦенПоВалюте КАК ВидыЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Актуальность) КАК ЦеныНоменклатуры
	|		ПО ВидыЦен.ВидЦенРасчетный = ЦеныНоменклатуры.ВидЦен
	|ГДЕ
	|	НЕ ЦеныНоменклатуры.Номенклатура ЕСТЬ NULL
	|ИТОГИ ПО
	|	ВидЦенРасчетный
	|;
	|
	//
	// ::: [2] Статические виды цен с валютой, у которой изменился курс
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК ВидЦен
	|ПОМЕСТИТЬ СтатическиеВидыЦенПоВалюте
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.ТипВидаЦен = ЗНАЧЕНИЕ(Перечисление.ТипыВидовЦен.Статический)
	|	И ВидыЦен.ВалютаЦены = &ВалютаИзменение
	|;
	|
	//
	// ::: [3] Расчетные виды цен, которые связаны с [2] по формулам ценовым групп
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязиВидовЦенСлужебный.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	СвязиВидовЦенСлужебный.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ПОМЕСТИТЬ СтатическиеВидыЦенВФормулахПоЦеновымГруппам
	|ИЗ
	|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦенСлужебный
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатическиеВидыЦенПоВалюте КАК СтатическиеВидыЦенПоВалюте
	|		ПО (СвязиВидовЦенСлужебный.ЦеноваяГруппа <> ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|			И СвязиВидовЦенСлужебный.ВидЦенБазовыйЦеновойГруппы = СтатическиеВидыЦенПоВалюте.ВидЦен
	|ГДЕ
	|	НЕ СтатическиеВидыЦенПоВалюте.ВидЦен ЕСТЬ NULL
	|;
	|
	//
	// ::: [4] Расчетные виды цен, которые связаны с [2] по основным формулам (без привязки к ценовым группам)
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СвязиВидовЦенСлужебный.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	СвязиВидовЦенСлужебный.ЦеноваяГруппа КАК ЦеноваяГруппа
	|ПОМЕСТИТЬ СтатическиеВидыЦенВОсновныхФормулах
	|ИЗ
	|	РегистрСведений.СвязиВидовЦенСлужебный КАК СвязиВидовЦенСлужебный
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатическиеВидыЦенПоВалюте КАК СтатическиеВидыЦенПоВалюте
	|		ПО (СвязиВидовЦенСлужебный.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
	|			И СвязиВидовЦенСлужебный.ВидЦенБазовый = СтатическиеВидыЦенПоВалюте.ВидЦен
	|ГДЕ
	|	НЕ СтатическиеВидыЦенПоВалюте.ВидЦен ЕСТЬ NULL
	|;
	|
	//
	// ::: [5] Очередь расчета по видам цен из [3]
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатическиеВидыЦенВФормулахПоЦеновымГруппам.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ПересчетВыполнен,
	|	&Период КАК ПериодЗаписи
	|ПОМЕСТИТЬ ОчередьРасчетаЦенПоФормуламЦеновыхГрупп
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Актуальность) КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатическиеВидыЦенВФормулахПоЦеновымГруппам КАК СтатическиеВидыЦенВФормулахПоЦеновымГруппам
	|		ПО ЦеныНоменклатуры.ВидЦен = СтатическиеВидыЦенВФормулахПоЦеновымГруппам.ВидЦенРасчетный
	|			И ЦеныНоменклатуры.Номенклатура.ЦеноваяГруппа = СтатическиеВидыЦенВФормулахПоЦеновымГруппам.ЦеноваяГруппа
	|ГДЕ
	|	НЕ СтатическиеВидыЦенВФормулахПоЦеновымГруппам.ВидЦенРасчетный ЕСТЬ NULL
	|;
	|
	//
	// ::: [6] Очередь расчета по видам цен из [4] исключая [3]
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатическиеВидыЦенВОсновныхФормулах.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
	|	ЛОЖЬ КАК ПересчетВыполнен,
	|	&Период КАК ПериодЗаписи
	|ПОМЕСТИТЬ ОчередьРасчетаЦенПоОсновнымФормулам
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Актуальность) КАК ЦеныНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтатическиеВидыЦенВОсновныхФормулах КАК СтатическиеВидыЦенВОсновныхФормулах
	|		ПО ЦеныНоменклатуры.ВидЦен = СтатическиеВидыЦенВОсновныхФормулах.ВидЦенРасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОчередьРасчетаЦенПоФормуламЦеновыхГрупп КАК ОчередьРасчетаЦенПоФормуламЦеновыхГрупп
	|		ПО ЦеныНоменклатуры.ВидЦен = ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.ВидЦенРасчетный
	|			И ЦеныНоменклатуры.Номенклатура = ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.Номенклатура
	|			И ЦеныНоменклатуры.Характеристика = ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.Характеристика
	|ГДЕ
	|	НЕ СтатическиеВидыЦенВОсновныхФормулах.ВидЦенРасчетный ЕСТЬ NULL
	|	И ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.Номенклатура ЕСТЬ NULL
	|;
	|
	//
	// ::: [7] Сводная очередь расчета цен без дублей
	//
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОчередьРасчетаЦенПоОсновнымФормулам.ВидЦенРасчетный КАК ВидЦенРасчетный,
	|	ОчередьРасчетаЦенПоОсновнымФормулам.Номенклатура КАК Номенклатура,
	|	ОчередьРасчетаЦенПоОсновнымФормулам.Характеристика КАК Характеристика,
	|	ОчередьРасчетаЦенПоОсновнымФормулам.ПересчетВыполнен КАК ПересчетВыполнен,
	|	ОчередьРасчетаЦенПоОсновнымФормулам.ПериодЗаписи КАК ПериодЗаписи,
	|	&НомерОчередиЦен КАК НомерОчередиЦен
	|ИЗ
	|	ОчередьРасчетаЦенПоОсновнымФормулам КАК ОчередьРасчетаЦенПоОсновнымФормулам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.ВидЦенРасчетный,
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.Номенклатура,
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.Характеристика,
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.ПересчетВыполнен,
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп.ПериодЗаписи,
	|	&НомерОчередиЦен КАК НомерОчередиЦен
	|ИЗ
	|	ОчередьРасчетаЦенПоФормуламЦеновыхГрупп КАК ОчередьРасчетаЦенПоФормуламЦеновыхГрупп
	|ИТОГИ ПО
	|	ВидЦенРасчетный";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	АктуализироватьОчередьРасчетаИзмениласьВалютаВидаЦен(Период, РезультатЗапроса[1], ТребуетсяПереключитьИспользованиеЗадания);
	АктуализироватьОчередьРасчетаИзмениласьВалютаПараметраФормулы(Период, РезультатЗапроса[7], ТребуетсяПереключитьИспользованиеЗадания);
	
	Если ТребуетсяПереключитьИспользованиеЗадания Тогда
		
		УстановитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчередьРасчетаЦен, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АктуализироватьОчередьРасчетаИзмениласьВалютаВидаЦен(Период, РезультатЗапроса, ТребуетсяПереключитьИспользованиеЗадания)
	
	ВыборкаВидыЦен = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидыЦен.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодЗаписи.Установить(Период, Истина);
		НаборЗаписей.Отбор.ВидЦенРасчетный.Установить(ВыборкаВидыЦен.ВидЦенРасчетный, Истина);
		НаборЗаписей.Очистить();
		
		ВыборкаЗаписей = ВыборкаВидыЦен.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), ВыборкаЗаписей);
			
		КонецЦикла;
		
		ТребуетсяПереключитьИспользованиеЗадания = (НаборЗаписей.Количество() > 0);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура АктуализироватьОчередьРасчетаИзмениласьВалютаПараметраФормулы(Период, РезультатЗапроса, ТребуетсяПереключитьИспользованиеЗадания)
	
	ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика");
	
	ВыборкаВидыЦен = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидыЦен.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ОчередьРасчетаЦен.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодЗаписи.Установить(Период, Истина);
		НаборЗаписей.Отбор.ВидЦенРасчетный.Установить(ВыборкаВидыЦен.ВидЦенРасчетный, Истина);
		НаборЗаписей.Прочитать();
		
		ТекущиеЗаписиОчередиЦен = НаборЗаписей.Выгрузить();
		НаборЗаписей.Очистить();
		
		ВыборкаЗаписей = ВыборкаВидыЦен.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			ПараметрыОтбора.Номенклатура = ВыборкаЗаписей.Номенклатура;
			ПараметрыОтбора.Характеристика = ВыборкаЗаписей.Характеристика;
			
			Если ТекущиеЗаписиОчередиЦен.НайтиСтроки(ПараметрыОтбора).Количество() > 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ТекущиеЗаписиОчередиЦен.Добавить(), ВыборкаЗаписей);
			
		КонецЦикла;
		
		Если ТекущиеЗаписиОчередиЦен.Количество() > 0 Тогда
			
			ТребуетсяПереключитьИспользованиеЗадания = Истина;
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Загрузить(ТекущиеЗаписиОчередиЦен);
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РегламентныеЗадания

Процедура УстановитьИспользованиеРегламентногоЗадания(МетаданныеРегЗадания, Использование) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", МетаданныеРегЗадания);
	
	Параметры = Новый Структура;
	Параметры.Вставить("Использование", Использование);
	
	МассивЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Для каждого Задание Из МассивЗаданий Цикл
		
		Если Задание.Использование = Использование Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Параметры);
		
	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ОчередьРасчетаЦен() Экспорт
	
	ОчередьРасчетаЦенСтартИтерации();
	
КонецПроцедуры

Процедура ОчередьРасчетаЦенСтартИтерации()
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , НСтр("ru ='Процесс запущен.'"));
	
	РассчитатьЦеныИзОчередиЦен();
	ОбновитьПризнакиАктуальностиВидовЦен();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИБ

Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ЦенообразованиеСервер.ОчередьРасчетаЦен");
	
	// Старые задания оставлены на случай, если задание было запланировано, но не успело выполнится до обновления.
	СоответствиеИменПсевдонимам.Вставить("ЦенообразованиеСервер.РасчетОчередиЦен");
	СоответствиеИменПсевдонимам.Вставить("ЦенообразованиеСервер.РасчетОчередиЦенРазовымЗаданием");
	
КонецПроцедуры

#КонецОбласти

#Область УстарелоРегламентныеЗадания

Процедура РасчетОчередиЦен() Экспорт
	
	РасчетОчередиЦенРазовымЗаданием();
	
КонецПроцедуры

Процедура РасчетОчередиЦенРазовымЗаданием() Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация, , , НСтр("ru ='Отключение устаревшего задания <Обработка очереди цен>.'"));
	УстановитьИспользованиеРегламентногоЗадания(Метаданные.РегламентныеЗадания.УдалитьОбработкаОчередиЦен, Ложь);
	
	// Устарело. Методы выполняются из ОчередьРасчетаЦен()
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти