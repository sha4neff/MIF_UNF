// Общий модуль (выполняется на стороне сервера) модуля "Конструктор процессов для 1С:УНФ"
// Разработчик Компания "Аналитика. Проекты и решения" +7 495 005-1653, https://kp-unf.ru

#Область СлужебныеПроцедурыИФункции

// Функция формирует задачу для исполнителя 
// Параметры:
//		СтруктураЗадачи - структура создаваемой задачи 
//		НомерПрохода - номер прохода по маршруту
// Возвращаемое значение: Структура данных
Функция ВыдатьЗадачуИсполнителю(СтруктураЗадачи, НомерПрохода) Экспорт
	
	//выполним текст функции ПередСозданием, в случае, если переменная Отказ будет равна Истина, отменим создание задачи
	
	СтруктураРезультатаВыдачи=Новый Структура("ЗавершеноУспешно, Отказ");
	
	БизнесПроцесс=СтруктураЗадачи.БизнесПроцесс;
	ТочкаКБП=СтруктураЗадачи.ТочкаКБП;
	
	//получим параметры процесса
	ПараметрыПроцесса=КП_Процессы.ПолучитьСтруктуруПараметровКБП(БизнесПроцесс);
	
	//определим исполнителя
	ИсполнительЗадачи=СтруктураЗадачи.Исполнитель;
	ИднИсполнителя=СтруктураЗадачи.ИднИсполнителя;
	
	//Выполним обработчик ПередСозданием
	
	ИсходныйТекстФункции=ТочкаКБП.ТекстФункции; //обработчик ПередСозданием
	ТекстФункции=КП_Процессы.СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции);
	
	Если НЕ ПустаяСтрока(ТекстФункции) Тогда
	
		//подготовим аргументы программной функции
		СсылкаНаЗадачу=Неопределено; //не используется
		ОбрабатыватьСтруктуруПараметровПроцесса=Истина; 
		ОбрабатыватьСтруктуруПараметровЗадачи=Истина;
		ОбрабатыватьСтруктуруРеквизитовПроцесса=Истина;
		ОбрабатыватьСтруктуруОтчетаИсполнителя=Истина;
		
		СтуктураРезультата=КП_Процессы.ПодготовитьИВыполнитьПрограммнуюФункцию(ТочкаКБП, ТекстФункции, ИсполнительЗадачи, БизнесПроцесс, СсылкаНаЗадачу, 
				ОбрабатыватьСтруктуруРеквизитовПроцесса,
				ОбрабатыватьСтруктуруПараметровПроцесса,
				ОбрабатыватьСтруктуруПараметровЗадачи,
				ОбрабатыватьСтруктуруОтчетаИсполнителя, "Событие перед созданием задачи");
				
		Если СтуктураРезультата=Неопределено Тогда
			СтруктураРезультатаВыдачи.ЗавершеноУспешно=Ложь;
			СтруктураРезультатаВыдачи.Отказ=Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки ""ПередСозданием"" в точке ""';en='Runtime Error handling ""PeredSozdaniem"" at ""'")+СокрЛП(ТочкаКБП)+"""."+ОписаниеОшибки());
			Возврат СтруктураРезультатаВыдачи;
			
		КонецЕсли;
		
		Если СтуктураРезультата.Свойство("Отказ") И СтуктураРезультата.Отказ Тогда
			//отказ от исполнения
			//запишем в регистр отказ от выполнения
			
			//СтруктураРезультатаВыдачи.ЗавершеноУспешно=ЗаписатьЗадачуТочки(ИсполнительЗадачи, ТочкаКБП, ИсполнительЗадачи, Истина, НомерПрохода);
			СтруктураРезультатаВыдачи.ЗавершеноУспешно=ЗаписатьЗадачуТочки(Неопределено, ТочкаКБП, ИсполнительЗадачи, ИднИсполнителя, Истина, НомерПрохода, "Отказ в обработчике ""ПередСозданием""");
			СтруктураРезультатаВыдачи.Отказ=Истина;
			
			Возврат СтруктураРезультатаВыдачи;
						
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураЗадачи.СрокВыполненияДатаВремя) Тогда
		//указана точная дата и время срока выполнения задачи
		ДатаВыполненияПлан=СтруктураЗадачи.СрокВыполненияДатаВремя;
		
	ИначеЕсли СтруктураЗадачи.НеИспользоватьГрафикРаботы Тогда
		СрокВыполненияЧасов=СтруктураЗадачи.СрокВыполненияЧасов;
		ДатаВыполненияПлан=ТекущаяДата()+СрокВыполненияЧасов*60*60;
		
	Иначе
		//расчитаем дату выполнения план по графику работы и производственному календарю
		СрокВыполненияЧасов=СтруктураЗадачи.СрокВыполненияЧасов;

		ОсновнойКалендарь=Константы.КП_ОсновнойКалендарь.Получить();
		
		Если ЗначениеЗаполнено(ОсновнойКалендарь) Тогда
			
			ДатаВыполненияПлан=КП_КалендарьПС.ПолучитьДатуПоКалендарю(ОсновнойКалендарь, ТекущаяДата(), СрокВыполненияЧасов);
			
			Если ДатаВыполненияПлан=Неопределено Тогда
				ТекстОшибки="Внимание! Планируемая дата выполнения не определена. Возможно не заполнен календарь """+ОсновнойКалендарь+""" и/или внутридневное расписание работы.";
				КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, СтруктураЗадачи.БизнесПроцесс, СтруктураЗадачи.ТочкаКБП,,3);				
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выполнить настройку календаря можно в разделе ""Компания"" или ""Процессы \ Настройка и версия"".");
				
				ТекстОшибки="Выполнить настройку календаря можно в разделе ""Компания"" или ""Процессы \ Настройка и версия"".";
				КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, СтруктураЗадачи.БизнесПроцесс, СтруктураЗадачи.ТочкаКБП,,3);
				
				СтруктураРезультатаВыдачи.ЗавершеноУспешно=Ложь;
				СтруктураРезультатаВыдачи.Отказ=Ложь;
				
				Возврат СтруктураРезультатаВыдачи;

			КонецЕсли;
			
		Иначе
			//просто добавим количество часов к текущей дате
			ДатаВыполненияПлан=ТекущаяДата()+СрокВыполненияЧасов*60*60;
			
		КонецЕсли;
		
	КонецЕсли; //определение срока выполнения
	
	//определим наименование задачи
	НаименованиеЗадачи=СтруктураЗадачи.ИндивидуальноеНаименованиеЗадания;
	Если ПустаяСтрока(НаименованиеЗадачи) Тогда
		Если ТочкаКБП.ДействиеИспользоватьНаименованиеПроцесса=0 Тогда
			НаименованиеЗадачи=СокрЛП(ТочкаКБП.Наименование);
		Иначе
			НаименованиеЗадачи=СокрЛП(ТочкаКБП.ВладелецТочки.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	НаименованиеЗадачи=КП_Процессы.ПреобразоватьТекстПоТегамКБП(НаименованиеЗадачи, ТочкаКБП);
	
	//сформируем текст задания, сначала проверим, есть ли индивидуальный текст в строке
	ИндивидуальныйТекстЗадания=СтруктураЗадачи.ИндивидуальныйТекстЗадания;
	Если НЕ ПустаяСтрока(ИндивидуальныйТекстЗадания) Тогда
		//создадим новый форматированный документ
		ИндивидуальныйТекстЗадания=КП_Процессы.ПреобразоватьТекстПоТегамКБП(ИндивидуальныйТекстЗадания, ТочкаКБП);
		ЗадачаХранилищеТекстаЗадания=Новый ФорматированныйДокумент;
		ЗадачаХранилищеТекстаЗадания.Добавить(ИндивидуальныйТекстЗадания);
	Иначе
		//индивидуального текста нет, возмем его из точки или из процесса
		Если ТочкаКБП.ДействиеИсточникТекстаЗаданийЧисло=0 Тогда
			//текст задания из бизнес-процесса
			ЗадачаТекстЗаданияФорматированныйДокумент=БизнесПроцесс.ХранилищеТекстаПроцесса.Получить();
			
		Иначе
			//текст задания из точки
			ЗадачаТекстЗаданияФорматированныйДокумент=ТочкаКБП.ХранилищеТекстаТочки.Получить();
			
		КонецЕсли;

		ЗадачаТекстHTML="";
		ЗадачаТекстВложения=Новый Структура;
		ЗадачаТекстЗаданияФорматированныйДокумент.ПолучитьHTML(ЗадачаТекстHTML, ЗадачаТекстВложения);
		
		ЗадачаТекстHTML=СтрЗаменить(ЗадачаТекстHTML, "&lt;", "<");
		ЗадачаТекстHTML=СтрЗаменить(ЗадачаТекстHTML, "&gt;", ">");
		НовыйТекстЗадания=КП_Процессы.ПреобразоватьТекстПоТегамКБП(ЗадачаТекстHTML, ТочкаКБП);
		
		ЗадачаТекстHTML=СтрЗаменить(ЗадачаТекстHTML, "<", "&lt;");
		ЗадачаТекстHTML=СтрЗаменить(ЗадачаТекстHTML, "<", "&lt;");
		ЗадачаХранилищеТекстаЗадания=Новый ФорматированныйДокумент;
		ЗадачаХранилищеТекстаЗадания.УстановитьHTML(НовыйТекстЗадания, ЗадачаТекстВложения);
			
	КонецЕсли;
	
	//проверим, нет ли записи о выполненной ранее переадресации в этой точке процесса
	ПереадресованныйИсполнитель=ПолучитьДействующегоИсполнителяПереадресацииВТочке(ТочкаКБП, ИсполнительЗадачи);
	
	Если ЗначениеЗаполнено(ПереадресованныйИсполнитель) Тогда
		ИсполнительЗадачи=ПереадресованныйИсполнитель;
	КонецЕсли;

	//создадим задачу исполнителю
	
	НоваяЗадача=Задачи.КП_Задача.СоздатьЗадачу();
	НоваяЗадача.Исполнитель=ИсполнительЗадачи;
	НоваяЗадача.ИднИсполнителя=ИднИсполнителя;
	НоваяЗадача.Наименование=НаименованиеЗадачи;
	НоваяЗадача.БизнесПроцесс=БизнесПроцесс;
	НоваяЗадача.ТочкаКБП=ТочкаКБП;
	НоваяЗадача.Автор=БизнесПроцесс.Автор;
	НоваяЗадача.ДатаВыполненияПлан=ДатаВыполненияПлан;
	НоваяЗадача.НомерПрохода=НомерПрохода;
	
	//сохраним форматированный текст задачи
	НоваяЗадача.ХранилищеТекстаЗадания=Новый ХранилищеЗначения(ЗадачаХранилищеТекстаЗадания);
	
	НоваяЗадача.Дата=ТекущаяДата();
	
	//выполним обработчик ПриСоздании
	
	ИсходныйТекстФункции=ТочкаКБП.ДействиеТекстФункцииПриСоздании; //обработчик ПриСоздании
	ТекстФункции=КП_Процессы.СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции);
	
	Если НЕ ПустаяСтрока(ТекстФункции) Тогда
	
		//подготовим аргументы программной функции
		СсылкаНаЗадачу=НоваяЗадача;
		ОбрабатыватьСтруктуруПараметровПроцесса=Истина; 
		ОбрабатыватьСтруктуруПараметровЗадачи=Ложь;
		ОбрабатыватьСтруктуруРеквизитовПроцесса=Истина;
		ОбрабатыватьСтруктуруОтчетаИсполнителя=Ложь;
		
		СтуктураРезультата=КП_Процессы.ПодготовитьИВыполнитьПрограммнуюФункцию(ТочкаКБП, ТекстФункции, ИсполнительЗадачи, БизнесПроцесс, СсылкаНаЗадачу, 
				ОбрабатыватьСтруктуруРеквизитовПроцесса,
				ОбрабатыватьСтруктуруПараметровПроцесса,
				ОбрабатыватьСтруктуруПараметровЗадачи,
				ОбрабатыватьСтруктуруОтчетаИсполнителя);
				
		Если СтуктураРезультата=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки ""ПриСоздании"" в точке ""';en='Runtime Error handling ""PriSozdanii"" at ""'")+СокрЛП(ТочкаКБП)+"""."+ОписаниеОшибки());
			
		КонецЕсли;
				
	КонецЕсли;	
	
	Попытка
		НоваяЗадача.Записать();
		КП_Процессы.ЗаписатьВЖурналПроцесса("Выдана задача """+НаименованиеЗадачи+""". Исполнитель: "+СокрЛП(ИсполнительЗадачи), БизнесПроцесс, ТочкаКБП);
		
	Исключение
		ТекстОшибки="Ошибка выдачи задачи исполнителю """+ИсполнительЗадачи+"""! "+ОписаниеОшибки();
		КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		СтруктураРезультатаВыдачи.ЗавершеноУспешно=Ложь;
		СтруктураРезультатаВыдачи.Отказ=Ложь;
		
		Возврат СтруктураРезультатаВыдачи;
		
	КонецПопытки;
	
	//заполним параметры задачи
	
	ОтчетИсполнителя="";

	СтруктураПараметровЗадачи=Новый Структура;
	//СтруктураПараметровЗадачи.Вставить("ДатаВыполненияПлан", ДатаВыполненияПлан);
	СтруктураПараметровЗадачи.Вставить("ОтчетИсполнителя", СтруктураЗадачи.ОтчетИсполнителя);
	
	КП_ЗадачиПроцессов.СохранитьСтруктуруПараметровЗадачи(СтруктураПараметровЗадачи, НоваяЗадача.Ссылка);
	
	//запишем задачу в регистр
	ЗаписатьЗадачуТочки(НоваяЗадача.Ссылка, ТочкаКБП, ИсполнительЗадачи, ИднИсполнителя, Ложь, НомерПрохода, "Задача выдана");
	
	//запишем состояние новой задачи
	КП_ЗадачиПроцессов.УстановитьСостояниеЗадачи(НоваяЗадача.Ссылка, Перечисления.КП_СостояниеЗадач.ОжидаетВыполнения);

	СтруктураРезультатаВыдачи.ЗавершеноУспешно=Истина;
	СтруктураРезультатаВыдачи.Отказ=Ложь;
	
	//уведомим исполнителя о выданной задаче
	
	Если ТочкаКБП.ДействиеУведомлятьИсполнителейПриСозданииЗадач Тогда
		СоздатьНапоминание("Новая задача: "+СокрЛП(НаименованиеЗадачи), ИсполнительЗадачи, НоваяЗадача.Дата, "Дата", НоваяЗадача.Ссылка, "Новая задача");
	КонецЕсли;
	
	Если ТочкаКБП.ДействиеУведомлятьИсполнителейПриНаступленииСрокаВыполнения Тогда
		СоздатьНапоминание("Срок выполнения истек: "+СокрЛП(НаименованиеЗадачи), ИсполнительЗадачи, НоваяЗадача.ДатаВыполненияПлан, "ДатаВыполненияПлан", НоваяЗадача.Ссылка, "Срок выполнения истек");
	КонецЕсли;
	
	КП_ОбщееСервер.ОбработатьНастройкиУведомлений(НоваяЗадача.Ссылка);
	
	//вернем структуру результата выдачи 
	Возврат СтруктураРезультатаВыдачи;
	
КонецФункции

// Процедура создает напоминание пользователю
// Параметры:
//	Описание - описание напоминания
//	Пользователь - ссылка на пользователя
//	ДатаНапоминания - дата напоминания
//	ИмяРеквизитаИсточника - имя реквизита источника
//	Источник - источник напоминания
//	Идентификатор - идентификатор напоминания
Процедура СоздатьНапоминание(Описание, Пользователь, ДатаНапоминания, ИмяРеквизитаИсточника, Источник, Идентификатор)
	
	РегНапоминаний=РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	РегНапоминаний.Отбор.Пользователь.Установить(Пользователь);
	РегНапоминаний.Отбор.Источник.Установить(Источник);
	РегНапоминаний.Отбор.ВремяСобытия.Установить(ДатаНапоминания);
	
	РегНапоминаний.Прочитать();
	
	Если РегНапоминаний.Количество()>0 Тогда
		Запись=РегНапоминаний[0];
	Иначе
		Запись=РегНапоминаний.Добавить();
		Запись.Пользователь=Пользователь;
		Запись.ВремяСобытия=ДатаНапоминания;	
		Запись.Источник=Источник;		
	КонецЕсли;
	
	Запись.Описание=Описание;
	Запись.СрокНапоминания=ДатаНапоминания;
	Запись.СпособУстановкиВремениНапоминания=Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
	Запись.ИнтервалВремениНапоминания=0;
	Запись.ИмяРеквизитаИсточника=ИмяРеквизитаИсточника;
	Запись.ПредставлениеИсточника="Задача";
	Запись.Идентификатор=Идентификатор;
	
	Попытка
		РегНапоминаний.Записать(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;	
	
КонецПроцедуры

// Функция выполяет обрработку программной функции
// Параметры:
//		Объект - ссылка на объект
// Возвращаемое значение: Структура данных
Функция ВыполнитьОбработчикПослеВыполнения(Знач Объект) Экспорт

	БизнесПроцесс=Объект.БизнесПроцесс;
	ТочкаКБП=Объект.ТочкаКБП;
	
	СтруктураВыполненияОбработки=Новый Структура("ЗавершеноУспешно, ЗавершитьДействие, ЗавершитьПроцесс", Истина, Ложь, Ложь);
	
	//получим параметры процесса
	ПараметрыПроцесса=КП_Процессы.ПолучитьСтруктуруПараметровКБП(БизнесПроцесс);
	
	//определим исполнителя
	ИсполнительЗадачи=Объект.Исполнитель;
	
	ИсходныйТекстФункции=ТочкаКБП.ДействиеТекстФункцииПослеВыполнения; //обработчик ПослеСоздания
	ТекстФункции=КП_Процессы.СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции);
	
	Если НЕ ПустаяСтрока(ТекстФункции) Тогда
	
		//подготовим аргументы программной функции
		СсылкаНаЗадачу=Объект.Ссылка;
		ОбрабатыватьСтруктуруПараметровПроцесса=Истина; 
		ОбрабатыватьСтруктуруПараметровЗадачи=Истина;
		ОбрабатыватьСтруктуруРеквизитовПроцесса=Истина;
		ОбрабатыватьСтруктуруОтчетаИсполнителя=Истина;
		
		СтуктураРезультата=КП_Процессы.ПодготовитьИВыполнитьПрограммнуюФункцию(ТочкаКБП, ТекстФункции, ИсполнительЗадачи, БизнесПроцесс, СсылкаНаЗадачу, 
				ОбрабатыватьСтруктуруРеквизитовПроцесса,
				ОбрабатыватьСтруктуруПараметровПроцесса,
				ОбрабатыватьСтруктуруПараметровЗадачи,
				ОбрабатыватьСтруктуруОтчетаИсполнителя);
				
		Если СтуктураРезультата=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки ""ПослеВыполения"" в точке ""';en='Runtime Error handling ""PosleVypoleniya"" at ""'")+СокрЛП(ТочкаКБП)+"""."+ОписаниеОшибки());
			
			СтруктураВыполненияОбработки.ЗавершеноУспешно=Ложь;
			Возврат СтруктураВыполненияОбработки;
			
		Иначе
			СтруктураВыполненияОбработки.ЗавершеноУспешно=Истина;
			СтруктураВыполненияОбработки.ЗавершитьПроцесс=СтуктураРезультата.ЗавершитьПроцесс;
			СтруктураВыполненияОбработки.ЗавершитьДействие=СтуктураРезультата.ЗавершитьДействие;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат СтруктураВыполненияОбработки;
	
КонецФункции

// Функция формирует и возвращает структуру параметров исполнителя 
// Параметры:
//		СсылкаНаЗадачу - ссылка на задачу бизнес-процесса
// Возвращаемое значение: Структура данных
Функция ПолучитьСтруктуруПараметровОтчетаИсполнителя(СсылкаНаЗадачу) Экспорт
	
	СтруктураОтчетаПоЗадаче=Новый Структура;
	
	//заполним структуру отчета исполнителя по задаче
	//ключи структуры находятся в КП_РезультатыИсполнителей, значения в задаче
	
	Запрос=Новый Запрос("ВЫБРАТЬ
                     | КП_РезультатыИсполнителейЗадачСрезПоследних.ЗначениеПараметра КАК ЗначениеПараметра,
                     | КП_РезультатыИсполнителейЗадачСрезПоследних.Задача,
                     | КП_РезультатыИсполнителейЗадачСрезПоследних.ПараметрРезультата
                     |ПОМЕСТИТЬ КП_РезультатыИсполнителейЗадачСрезПоследних
                     |ИЗ
                     | РегистрСведений.КП_РезультатыИсполнителейЗадач.СрезПоследних(, Задача = &Задача) КАК КП_РезультатыИсполнителейЗадачСрезПоследних
                     |;
                     |
                     |////////////////////////////////////////////////////////////////////////////////
                     |ВЫБРАТЬ
                     | КП_РезультатыИсполнителейЗадач.Ссылка,
                     | КП_РезультатыИсполнителейЗадачСрезПоследних.ЗначениеПараметра КАК ЗначениеПараметра,
                     | КП_РезультатыИсполнителейЗадачСрезПоследних.Задача,
                     | КП_РезультатыИсполнителейЗадач.Код
                     |ИЗ
                     | ПланВидовХарактеристик.КП_РезультатыИсполнителейЗадач КАК КП_РезультатыИсполнителейЗадач
                     | ВНУТРЕННЕЕ СОЕДИНЕНИЕ КП_РезультатыИсполнителейЗадачСрезПоследних КАК КП_РезультатыИсполнителейЗадачСрезПоследних
                     | ПО (КП_РезультатыИсполнителейЗадачСрезПоследних.ПараметрРезультата = КП_РезультатыИсполнителейЗадач.Ссылка)");
 			
	Запрос.УстановитьПараметр("Задача", СсылкаНаЗадачу);					
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		КлючОтчета=Выборка.Код;
		ЗначениеОтчета=Выборка.ЗначениеПараметра;
		
		СтруктураОтчетаПоЗадаче.Вставить(КлючОтчета, ЗначениеОтчета);
		
	КонецЦикла;
	
	//заполним пустые значения
	ЗапросПВХ=Новый Запрос("ВЫБРАТЬ
			|	КП_РезультатыИсполнителейЗадач.Код,
			|	КП_РезультатыИсполнителейЗадач.Ссылка
			|ИЗ
			|	ПланВидовХарактеристик.КП_РезультатыИсполнителейЗадач КАК КП_РезультатыИсполнителейЗадач");
			
	Выборка=ЗапросПВХ.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		
		КлючОтчета=Выборка.Код;
		
		Если НЕ СтруктураОтчетаПоЗадаче.Свойство(КлючОтчета) Тогда
			СтруктураОтчетаПоЗадаче.Вставить(КлючОтчета, Неопределено);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураОтчетаПоЗадаче;
	
КонецФункции
 
// Функция записывает задачу маршрутной точки в регистр сведений 
// Параметры:
//		СсылкаНаЗадачу - ссылка на задачу бизнес-процесса
//		ТочкаКБП - маршрутная точка 
//		ИсполнительЗадачи - ссылка на исполнителя задачи
//		ИднИсполнителя - уникальный идентификататор исполнителя
//		Отказ - флаг отказа от исполнения
//		НомерПрохода - номер прохода по маршруту
//		Примечание - текстовое примечание
// Возвращаемое значение: Истина или Ложь
Функция ЗаписатьЗадачуТочки(СсылкаНаЗадачу, ТочкаКБП, ИсполнительЗадачи, ИднИсполнителя, Отказ, НомерПрохода, Примечание="") Экспорт
	
	РегЗадачиТочек=РегистрыСведений.КП_ЗадачиТочек.СоздатьНаборЗаписей();
	РегЗадачиТочек.Отбор.Задача.Установить(СсылкаНаЗадачу);
	РегЗадачиТочек.Отбор.ТочкаКБП.Установить(ТочкаКБП);
	РегЗадачиТочек.Отбор.Исполнитель.Установить(ИсполнительЗадачи);
	РегЗадачиТочек.Отбор.НомерПрохода.Установить(НомерПрохода);
	РегЗадачиТочек.Отбор.ИднИсполнителя.Установить(ИднИсполнителя);
	
	РегЗадачиТочек.Прочитать();
		
	КоличествоПараметров=РегЗадачиТочек.Количество();
		
	Если КоличествоПараметров>0 Тогда
		ЗаписьЗадачи=РегЗадачиТочек[0];
		
	Иначе
		ЗаписьЗадачи=РегЗадачиТочек.Добавить();
		
	КонецЕсли;

	ЗаписьЗадачи.Задача=СсылкаНаЗадачу;
	ЗаписьЗадачи.ТочкаКБП=ТочкаКБП;
	ЗаписьЗадачи.Исполнитель=ИсполнительЗадачи;
	ЗаписьЗадачи.НомерПрохода=НомерПрохода;
	ЗаписьЗадачи.ИднИсполнителя=ИднИсполнителя;
	
	ЗаписьЗадачи.Отказ=Отказ;
	ЗаписьЗадачи.Примечание=Примечание;
	
	Попытка
		РегЗадачиТочек.Записать(Истина);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция формирует и возвращает таблицу исполнителей точки  
// Параметры:
//		ТочкаКБП - маршрутная точка 
// Возвращаемое значение: Таблица значений
Функция ПолучитьТаблицуИсполнителейТочки(ТочкаКБП) Экспорт
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	ОсновнойОтчетИсполнителя=ТочкаКБП.ДействиеОсновнойОтчетИсполнителей;
	ИсточникИсполнителей=ТочкаКБП.ИсточникИсполнителей; //0 - динамический список, 1 - фиксированный список, 2 - автор процесса, 3 - контролер, 4 - исполнитель в реквизите, 5 - рабочая группа
	
	Если ИсточникИсполнителей=0 Тогда
		//получим динамический список из регистра на данный момент
		
		Запрос=Новый Запрос("ВЫБРАТЬ
		                    |	КП_ОсновныеИсполнителиПроцесса.ТочкаАдресации,
		                    |	КП_ОсновныеИсполнителиПроцесса.ОтчетИсполнителя,
		                    |	КП_ОсновныеИсполнителиПроцесса.ИндивидуальныйТекстЗадания,
		                    |	КП_ОсновныеИсполнителиПроцесса.ИндивидуальноеНаименованиеЗадания,
		                    |	КП_ОсновныеИсполнителиПроцесса.СрокВыполненияЧасов,
							|	КП_ОсновныеИсполнителиПроцесса.СрокВыполненияДатаВремя,
		                    |	КП_ОсновныеИсполнителиПроцесса.НеИспользоватьГрафикРаботы,
		                    |	КП_ОсновныеИсполнителиПроцесса.ИднИсполнителя,
							|	КП_ОсновныеИсполнителиПроцесса.НомерСтрокиИсполнителя КАК НомерСтроки
		                    |ИЗ
		                    |	РегистрСведений.КП_ОсновныеИсполнителиПроцесса КАК КП_ОсновныеИсполнителиПроцесса
		                    |ГДЕ
		                    |	КП_ОсновныеИсполнителиПроцесса.БизнесПроцесс = &БизнесПроцесс
		                    |
		                    |УПОРЯДОЧИТЬ ПО
		                    |	НомерСтроки");
							
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
		
		ТаблицаИсполнителей=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		Если ТаблицаИсполнителей.Количество()=0 И НЕ БизнесПроцесс.ВидПроцесса.СистемныйВидПроцесса Тогда
			ТекстОшибки="Внимание! В точке """+ТочкаКБП+""" бизнес-процесса динамический список исполнителей пустой.";
			КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,2);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			//запишем в журнал событий системы
			ЗаписьЖурналаРегистрации("Создание бизнес-процесса", УровеньЖурналаРегистрации.Предупреждение, БизнесПроцесс, ТекстОшибки,"При записи бизнес-процесса");
			ТаблицаИсполнителей=ТочкаКБП.ИсполнителиТочки.Выгрузить();
			ТаблицаИсполнителей.Очистить();
			Возврат ТаблицаИсполнителей;
			
		КонецЕсли;
			
	ИначеЕсли ИсточникИсполнителей=1 Тогда
		//фиксированный список исполнителей точки
		ТаблицаИсполнителей=ТочкаКБП.ИсполнителиТочки.Выгрузить();
		Если ТаблицаИсполнителей.Количество()=0 Тогда
			ТекстОшибки="Внимание! В точке """+ТочкаКБП+""" нет исполнителей в фиксированном списке!";
			КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,2);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			//Возврат Неопределено;
			Возврат ТаблицаИсполнителей;
						
		КонецЕсли;
		
	ИначеЕсли ИсточникИсполнителей=2 Тогда 	//автор процесса
		//сформируем структуру таблицы
		ТаблицаИсполнителей=ТочкаКБП.ИсполнителиТочки.Выгрузить();
		ТаблицаИсполнителей.Очистить();
		
		Инициатор=БизнесПроцесс.Автор;
		Если ЗначениеЗаполнено(Инициатор) Тогда    
	        //эти параметры могут быть изменены далее при выдаче задачи по нулевой строке
            //исполнителей, где содержатся индивидуальные данные для переменной процесса		
			НоваяСтрока=ТаблицаИсполнителей.Добавить();
			НоваяСтрока.ТочкаАдресации=Инициатор;
			НоваяСтрока.ОтчетИсполнителя=ОсновнойОтчетИсполнителя;
			НоваяСтрока.ИндивидуальныйТекстЗадания="";
			НоваяСтрока.СрокВыполненияЧасов=-1; 
			НоваяСтрока.СрокВыполненияДатаВремя=Дата("00010101");
			НоваяСтрока.ИднИсполнителя=ТочкаКБП.ВладелецТочки.ИднАвтора;
			НоваяСтрока.ВидНаправленияПараллельное=1;
			НоваяСтрока.НеИспользоватьГрафикРаботы=Истина;
			НоваяСтрока.НомерСтроки=1;
			
		Иначе
			ТекстОшибки="Внимание! В точке """+ТочкаКБП+""" не удалось определить автора процесса!";
			КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,2);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли ИсточникИсполнителей=3 Тогда //контролер процесса
		//сформируем структуру таблицы
		ТаблицаИсполнителей=ТочкаКБП.ИсполнителиТочки.Выгрузить();
		ТаблицаИсполнителей.Очистить();

		Контролер=БизнесПроцесс.Контролер;
		Если ЗначениеЗаполнено(Контролер) Тогда
			НоваяСтрока=ТаблицаИсполнителей.Добавить();
			НоваяСтрока.ТочкаАдресации=БизнесПроцесс.Контролер;
			НоваяСтрока.ОтчетИсполнителя=ОсновнойОтчетИсполнителя;
			НоваяСтрока.ИндивидуальныйТекстЗадания="";
			НоваяСтрока.СрокВыполненияЧасов=-1; //без срока выполнения
			НоваяСтрока.СрокВыполненияДатаВремя=Дата("00010101");
			НоваяСтрока.ИднИсполнителя=ТочкаКБП.ВладелецТочки.ИднКонтролера;
			НоваяСтрока.ВидНаправленияПараллельное=1;
			НоваяСтрока.НеИспользоватьГрафикРаботы=Истина;
			НоваяСтрока.НомерСтроки=1;
			
		Иначе
			ТекстОшибки="Внимание! В точке """+ТочкаКБП+""" не удалось определить контролера процесса!";
			КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,2);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;

		КонецЕсли;
		
	ИначеЕсли ИсточникИсполнителей=4 Тогда 
		//исполнитель из реквизита процесса
		ТаблицаИсполнителей=ТочкаКБП.ИсполнителиТочки.Выгрузить();
		ТаблицаИсполнителей.Очистить();
		РеквизитСИсполнителем=ТочкаКБП.РеквизитСИсполнителем;
		ЗначениеИсполнителя=КП_Процессы.ПолучитьЗначениеРеквизитаПроцесса(БизнесПроцесс, РеквизитСИсполнителем);
		
		Если НЕ ЗначениеЗаполнено(ЗначениеИсполнителя) Тогда
			ТекстОшибки="Внимание! В точке """+ТочкаКБП+""" значение реквизита процесса """+СокрЛП(РеквизитСИсполнителем)+""" является пустым.";
			КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,3);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если КП_ОбщееСерверПС.ЭтоИсполнительПроцесса(ЗначениеИсполнителя) Тогда
			//прямая адресация
			ИсполнительТочки=ЗначениеИсполнителя;
			
			//обработаем заместителей
			ИсполнительТочки=КП_ЗадачиПроцессов.ПолучитьИсполнителяСУчетомМатрицыЗамены(ИсполнительТочки, БизнесПроцесс);		

		ИначеЕсли КП_ОбщееСерверПС.ЭтоРолеваяАдресацияИсполнителя(ЗначениеИсполнителя) Тогда
			//ролевая адресация
			ИсполнительТочки=КП_ЗадачиПроцессов.ПолучитьИсполнителяПоРолиИАдресации(ЗначениеИсполнителя);
			
			//обработаем заместителей
			ИсполнительТочки=КП_ЗадачиПроцессов.ПолучитьИсполнителяСУчетомМатрицыЗамены(ИсполнительТочки, БизнесПроцесс);		
			
			Если НЕ ЗначениеЗаполнено(ИсполнительТочки) Тогда
				ТекстОшибки="Внимание! В точке """+ТочкаКБП+""" по значению реквизита процесса с ролевой адресацией """+СокрЛП(РеквизитСИсполнителем)+""" исполнитель не найден!";
				КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,2);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Неопределено;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеИсполнителя)=Тип("СправочникСсылка.КП_РабочиеГруппы") Тогда
			//рабочая группа, заданная в переменной
			РабочаяГруппа=ЗначениеИсполнителя;
			Если ТребуетсяПерезаполнитьСписокИсполнителейТочкиПоРабочейГруппе(РабочаяГруппа, ТочкаКБП) Тогда
				ПерезаполнитьСписокИсполнителейТочкиПоРабочейГруппе(РабочаяГруппа, ТочкаКБП);
			КонецЕсли;
			
			ТекстСообщения="В точке """+ТочкаКБП+""" по реквизиту процесса """+СокрЛП(РеквизитСИсполнителем)+""" выданы задачи рабочей группе """+СокрЛП(РабочаяГруппа)+""".";
			КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстСообщения, БизнесПроцесс, ТочкаКБП,,1);
			ТаблицаИсполнителей=ТочкаКБП.ИсполнителиТочки.Выгрузить();
			Если ТаблицаИсполнителей.Количество()=0 Тогда
				ТекстОшибки="Внимание! В точке """+ТочкаКБП+""" нет исполнителей в сформированном на основе рабочей группы списке.";
				КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,2);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
			КонецЕсли;
			
			Возврат ТаблицаИсполнителей;
	
		Иначе
			ТекстОшибки="Внимание! В точке """+ТочкаКБП+""" реквизит процесса """+СокрЛП(РеквизитСИсполнителем)+""" не является пользователем или ролевой адресацией.";
			КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,2);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
			
		КонецЕсли;
		
		НоваяСтрока=ТаблицаИсполнителей.Добавить();
		НоваяСтрока.ТочкаАдресации=ИсполнительТочки;
		НоваяСтрока.ОтчетИсполнителя=ОсновнойОтчетИсполнителя;
		НоваяСтрока.ИндивидуальныйТекстЗадания="";
		НоваяСтрока.ИднИсполнителя=КП_ОбщееСервер.СформироватьИднИсполнителя(ЗначениеИсполнителя, Истина);
		НоваяСтрока.СрокВыполненияЧасов=-1;
		НоваяСтрока.СрокВыполненияДатаВремя=Дата("00010101");
		НоваяСтрока.ВидНаправленияПараллельное=1;
		НоваяСтрока.НеИспользоватьГрафикРаботы=Ложь;
		НоваяСтрока.НомерСтроки=1;
		
	ИначеЕсли ИсточникИсполнителей=5 Тогда
		//при прохождении точки с источником исполнителей формируется
		//фиксированный список исполнителей точки на основе рабочей группы
		Если ТребуетсяПерезаполнитьСписокИсполнителейТочкиПоРабочейГруппе(ТочкаКБП.РабочаяГруппа, ТочкаКБП) Тогда
			ПерезаполнитьСписокИсполнителейТочкиПоРабочейГруппе(ТочкаКБП.РабочаяГруппа, ТочкаКБП);
		КонецЕсли;
		
		ТаблицаИсполнителей=ТочкаКБП.ИсполнителиТочки.Выгрузить();
		Если ТаблицаИсполнителей.Количество()=0 Тогда
			ТекстОшибки="Внимание! В точке """+ТочкаКБП+""" нет исполнителей в сформированном на основе рабочей группы списке.";
			КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, БизнесПроцесс, ТочкаКБП,,2);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			//Возврат Неопределено;
			Возврат ТаблицаИсполнителей;
						
		КонецЕсли;
				
	КонецЕсли;	
	
	Возврат ТаблицаИсполнителей;
	
КонецФункции

// Функция формирует и возвращает описание требуемого результата 
// Параметры:
//		ОсновнойОтчетИсполнителей - основной отчет, требуемый от исполнителей 
// Возвращаемое значение: Строка
Функция ПолучитьОписаниеТребуемогоРезультата(ОсновнойОтчетИсполнителей) Экспорт
	
	СтрокаОписания=СокрЛП(ОсновнойОтчетИсполнителей.ОписаниеТребуемогоРезультата);
	
	Возврат СтрокаОписания;
	
КонецФункции

// Функция возвращает исполнителя с учетом применения матрицы заместителей на текущую дату
// В параметре передается исполнитель для котрого необходимо определить наличие заместителей
// если действующий заместитель есть, то возвращается ссылка на заместителя иначе возвращается сам исполнитель.
//	Параметры:
//		ИсполнительВход - ссылка на исходного исполнителя
//	Возвращаемое значение: Ссылка на пользователя
Функция ПолучитьИсполнителяСУчетомМатрицыЗамены(ИсполнительВход, БизнесПроцесс=Неопределено, НеИспользоватьОтборПоВиду=Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(БизнесПроцесс) Тогда
		ВидПроцесса=Неопределено;
		НеИспользоватьОтборПоВиду=Истина;
		
	Иначе
		ВидПроцесса=БизнесПроцесс.ВидПроцесса;
		
	КонецЕсли;
	//проверим по матрице замены, если для текущего исполнителя 
	//существует замещающий его сотрудник, то выдадим задачу ему
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	             |	КП_МатрицаЗаместителейСрезПоследних.Заместитель
	             |ИЗ
	             |	РегистрСведений.КП_МатрицаЗаместителей.СрезПоследних(
	             |			&ДатаКон,
	             |			ЗаменаНеАктуальна = ЛОЖЬ
	             |				И ЗамещаемыйСотрудник = &ЗамещаемыйСотрудник) КАК КП_МатрицаЗаместителейСрезПоследних
	             |ГДЕ
	             |	(КП_МатрицаЗаместителейСрезПоследних.ДатаОкончания = &ПустаяДата
	             |			ИЛИ КП_МатрицаЗаместителейСрезПоследних.ДатаОкончания >= &ДатаКон)
				 |
	             |	УсловиеПоВидуПроцесса
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	КП_МатрицаЗаместителейСрезПоследних.Период УБЫВ";
						
	Если НеИспользоватьОтборПоВиду Тогда
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "УсловиеПоВидуПроцесса", "");
		
	Иначе
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "УсловиеПоВидуПроцесса", "И (КП_МатрицаЗаместителейСрезПоследних.ТолькоДляВидаПроцесса=&ПустойВидПроцесса ИЛИ КП_МатрицаЗаместителейСрезПоследних.ТолькоДляВидаПроцесса = &ВидаПроцесса)");
		
	КонецЕсли;
	
	Запрос=Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ЗамещаемыйСотрудник", ИсполнительВход.Ссылка); 
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));	
	
	Если НЕ НеИспользоватьОтборПоВиду Тогда
		Запрос.УстановитьПараметр("ПустойВидПроцесса", Справочники.КП_ВидыПроцессов.ПустаяСсылка());
		Запрос.УстановитьПараметр("ВидаПроцесса", ВидПроцесса);
		
	КонецЕсли;
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		//заменим
		ИсполнительВыход=Выборка.Заместитель;
	Иначе
		//оставим того же исполнителя
		ИсполнительВыход=ИсполнительВход;
	КонецЕсли;
	
	Возврат ИсполнительВыход;
	
КонецФункции

// Функция возвращает исполнителя по переданным в аргументах роли и дате, на которую необходимо определить 
// исполнителя роли 
// Параметры:
//		ТочкаАдресации - ссылка на точку адресации маршрута 
//		ДатаАдресации - дата адресации
// Возвращаемое значение: Ссылка на пользователя
Функция ПолучитьИсполнителяПоРолиИАдресации(ТочкаАдресации, ДатаАдресации=Неопределено) Экспорт
	
	Если ДатаАдресации=Неопределено Тогда
		ДатаАдресации=ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТочкаАдресации) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Пустая точка адресции.';en='Empty address point.'"));
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	//найдем сотрудника, подходящего к роли и объектам адресации
	
	РольИсполнителя=ТочкаАдресации.РольИсполнителя;
	ОсновнойОбъектАдресации=ТочкаАдресации.ОсновнойОбъектАдресации;
	ДополнительныйОбъектАдресации=ТочкаАдресации.ДополнительныйОбъектАдресации;
	
	Запрос=Новый Запрос;
	
	ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	КП_ИсполнителиРолейСрезПоследних.Исполнитель
	                    |ИЗ
	                    |	РегистрСведений.КП_ИсполнителиРолей.СрезПоследних(
	                    |			&ДатаКон,
	                    |			РольИсполнителя = &РольИсполнителя
	                    |				УсловиеОбъектАдресации
	                    |				УсловиеДополнительныйОбъектАдресации
						|) КАК КП_ИсполнителиРолейСрезПоследних
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	КП_ИсполнителиРолейСрезПоследних.Период УБЫВ";
						
	Если ЗначениеЗаполнено(ОсновнойОбъектАдресации) Тогда
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "УсловиеОбъектАдресации", " И ОсновнойОбъектАдресации = &ОсновнойОбъектАдресации ");
		Запрос.УстановитьПараметр("ОсновнойОбъектАдресации", ОсновнойОбъектАдресации);
	Иначе
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "УсловиеОбъектАдресации", " ");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныйОбъектАдресации) Тогда
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "УсловиеДополнительныйОбъектАдресации", " И ДополнительныйОбъектАдресации = &ДополнительныйОбъектАдресации ");
		Запрос.УстановитьПараметр("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресации);
	Иначе 
		ТекстЗапроса=СтрЗаменить(ТекстЗапроса, "УсловиеДополнительныйОбъектАдресации", " ");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("РольИсполнителя", РольИсполнителя);
	Запрос.УстановитьПараметр("ДатаКон", ДатаАдресации);
	
	Запрос.Текст=ТекстЗапроса;
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		ИсполнительРоли=Выборка.Исполнитель;
	Иначе //не найден
		ИсполнительРоли=Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ИсполнительРоли;
	
КонецФункции

// Функция возвращает структуру параметров задачи корпоративного бизнес-процесса
// В парамтерах функции передается ссылка на задачу и дата, на которую необходимо получить структуру.
// Параметры:
//		ЗадачаКБП - задача корпоративного бизнес-процесса 
//		ДатаПараметров - дата параметров
// Возвращаемое значение: Структура данных
Функция ПолучитьСтруктуруПараметровЗадачи(ЗадачаКБП, ДатаПараметров=Неопределено) Экспорт
	
	Если ДатаПараметров=Неопределено Тогда
		ДатаПараметров=ТекущаяДата();
	КонецЕсли;
	
	СтруктураЗадачиКБП=Новый Структура;
	
	//Левое объединение с ПВХ на данном релизе платформы не работает, поэтому просто выберем параметры задач
	//и дополним их значениями в цикле обработки запроса
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_ПараметрыЗадач.Ссылка КАК ПараметрПроцесса,
	                    |	КП_ПараметрыЗадач.Код КАК Код
	                    |ИЗ
	                    |	ПланВидовХарактеристик.КП_ПараметрыЗадач КАК КП_ПараметрыЗадач
	                    |ГДЕ
	                    |	КП_ПараметрыЗадач.Предопределенный = ИСТИНА");
						
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ИмяПараметраЗадачи=Выборка.Код;
		ПараметрЗадачи=ПланыВидовХарактеристик.КП_ПараметрыЗадач.НайтиПоКоду(ИмяПараметраЗадачи);
		Если ПараметрЗадачи=Неопределено ИЛИ ПараметрЗадачи.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра=КП_ЗадачиПроцессов.ПолучитьЗначениеПараметраЗадачи(ЗадачаКБП, ПараметрЗадачи, ДатаПараметров);
		
		Если НЕ СтруктураЗадачиКБП.Свойство(ИмяПараметраЗадачи) Тогда
			СтруктураЗадачиКБП.Вставить(ИмяПараметраЗадачи, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураЗадачиКБП;
	
КонецФункции

// Функция определяет значение параметра задачи  
// Параметры:
//		Задача - задача корпоративного бизнес-процесса
//      ПараметрЗадачи - параметр задачи
//      ДатаПараметра -  дата параметров
// Возвращаемое значение: Значение параметра
Функция ПолучитьЗначениеПараметраЗадачи(Задача, ПараметрЗадачи, ДатаПараметра=Неопределено) Экспорт
	
	Если ДатаПараметра=Неопределено Тогда
		ДатаПараметра=ТекущаяДата();
		
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                    |	КП_ПараметрыЗадачСрезПоследних.ЗначениеПараметра
	                    |ИЗ
	                    |	РегистрСведений.КП_ПараметрыЗадач.СрезПоследних(
	                    |			&ДатаПараметра,
	                    |			Задача = &Задача
	                    |				И ПараметрЗадачи = &ПараметрЗадачи) КАК КП_ПараметрыЗадачСрезПоследних");
						
	Запрос.УстановитьПараметр("ДатаПараметра", ДатаПараметра);
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("ПараметрЗадачи", ПараметрЗадачи);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ЗначениеПараметра;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Процедура сохраняет структуру параметров задачи корпоративного бизнес-процесса
// В параметрах процедуры передаются структура параметров, ссылка на задачу и дата, 
// на которую необходимо получить структуру.
// Параметры:
//		СтруктураПараметров - структура праметров задачи
//     ЗадачаКБП - ссылка на задачу бизнес-процесса
//     ДатаПараметров - дата параметров
Процедура СохранитьСтруктуруПараметровЗадачи(СтруктураПараметров, ЗадачаКБП, ДатаПараметров=Неопределено) Экспорт
	
	Если ДатаПараметров=Неопределено Тогда
		ДатаПараметров=ТекущаяДата();
	КонецЕсли;
	
	Если ДатаПараметров=Неопределено Тогда
		ДатаПараметров=ТекущаяДата();
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
		
		НаименованиеПараметраПроцесса=ЭлементСтруктуры.Ключ;
		ПараметрЗадачи=ПланыВидовХарактеристик.КП_ПараметрыЗадач[НаименованиеПараметраПроцесса];
		ЗначениеПараметра=ЭлементСтруктуры.Значение;
		
		РегПараметры=РегистрыСведений.КП_ПараметрыЗадач.СоздатьНаборЗаписей();
		РегПараметры.Отбор.Задача.Установить(ЗадачаКБП);
		РегПараметры.Отбор.ПараметрЗадачи.Установить(ПараметрЗадачи);
		
		РегПараметры.Прочитать();
		
		КоличествоПараметров=РегПараметры.Количество();
		
		Если КоличествоПараметров>0 Тогда
			ЗаписьПараметра=РегПараметры[КоличествоПараметров-1];
			Если ДатаПараметров<>ЗаписьПараметра.Период Тогда
				//создадим новую запись
				ЗаписьПараметра=РегПараметры.Добавить();
				ЗаписьПараметра.Период=ДатаПараметров;
			КонецЕсли;
		Иначе
			//создадим новую запись
			ЗаписьПараметра=РегПараметры.Добавить();
			ЗаписьПараметра.Период=ДатаПараметров;
		КонецЕсли;
		
		ЗаписьПараметра.Задача=ЗадачаКБП;
		ЗаписьПараметра.ПараметрЗадачи=ПараметрЗадачи;
		ЗаписьПараметра.ЗначениеПараметра=ЗначениеПараметра;
		
		Попытка
			РегПараметры.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла; //структура	параметров
	
	Возврат;
	
КонецПроцедуры

// Функция формирует и возвращает структуру результатов задачи 
// Параметры:
//		ЗадачаКБП - задача корпоративного бизнес-процесса 
//		ДатаРезультатов - дата результатов
// Возвращаемое значение: Структура данных
Функция ПолучитьСтруктуруРезультатовЗадачи(ЗадачаКБП, ДатаРезультатов=Неопределено) Экспорт
	
	Если ДатаРезультатов=Неопределено Тогда
		ДатаРезультатов=ТекущаяДата();
	КонецЕсли;
	
	БизнесПроцесс=ЗадачаКБП.БизнесПроцесс;
	ТочкаКБП=ЗадачаКБП.ТочкаКБП;
	Исполнитель=ЗадачаКБП.Исполнитель;
	
	СтруктураРезультатаИсполнителя=Новый Структура;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_РезультатыИсполнителейЗадач.Ссылка КАК ПараметрПроцесса,
	                    |	КП_РезультатыИсполнителейЗадачСрезПоследних.ЗначениеПараметра,
	                    |	КП_РезультатыИсполнителейЗадач.Код
	                    |ИЗ
	                    |	ПланВидовХарактеристик.КП_РезультатыИсполнителейЗадач КАК КП_РезультатыИсполнителейЗадач
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_РезультатыИсполнителейЗадач.СрезПоследних(&ДатаРезультатов, ) КАК КП_РезультатыИсполнителейЗадачСрезПоследних
	                    |		ПО КП_РезультатыИсполнителейЗадач.Ссылка = КП_РезультатыИсполнителейЗадачСрезПоследних.ПараметрРезультата
	                    |ГДЕ
	                    |	КП_РезультатыИсполнителейЗадачСрезПоследних.Задача = &Задача");
						
	Запрос.УстановитьПараметр("ДатаРезультатов", ДатаРезультатов);
	Запрос.УстановитьПараметр("Задача", ЗадачаКБП);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ИмяРезультата=Выборка.Код;
		ЗначениеРезультата=Выборка.ЗначениеПараметра;
		
		Если НЕ СтруктураРезультатаИсполнителя.Свойство(ИмяРезультата) Тогда
			СтруктураРезультатаИсполнителя.Вставить(ИмяРезультата, ЗначениеРезультата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРезультатаИсполнителя;
	
КонецФункции

// Процедура сохраняет структуру результатов задачи
// Параметры:
//		СтруктураРезультатов - структура результатов по задаче
//		ЗадачаКБП - задача корпоративного бизнес-процесса 
//		ДатаРезультатов - дата результатов
Процедура СохранитьСтруктуруРезультатовЗадачи(СтруктураРезультатов, ЗадачаКБП, ДатаРезультатов=Неопределено) Экспорт
	
	Если ДатаРезультатов=Неопределено Тогда
		ДатаРезультатов=ТекущаяДата();
	КонецЕсли;
	
	ИднИсполнителя=ЗадачаКБП.ИднИсполнителя;
	
	БизнесПроцесс=ЗадачаКБП.БизнесПроцесс;
	ТочкаКБП=ЗадачаКБП.ТочкаКБП;
	Исполнитель=ЗадачаКБП.Исполнитель;
	
	Для Каждого ЭлементСтруктуры Из СтруктураРезультатов Цикл
		
		НаименованиеРезультата=ЭлементСтруктуры.Ключ;
		ПараметрРезультата=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач[НаименованиеРезультата];
		ЗначениеРезультата=ЭлементСтруктуры.Значение;
		
		РегРезультаты=РегистрыСведений.КП_РезультатыИсполнителейЗадач.СоздатьНаборЗаписей();
		РегРезультаты.Отбор.Задача.Установить(ЗадачаКБП);
		РегРезультаты.Отбор.ПараметрРезультата.Установить(ПараметрРезультата);
		РегРезультаты.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		РегРезультаты.Отбор.ТочкаКБП.Установить(ТочкаКБП);
		РегРезультаты.Отбор.Исполнитель.Установить(Исполнитель);
		РегРезультаты.Отбор.ИднИсполнителя.Установить(ИднИсполнителя);
		
		РегРезультаты.Прочитать();
		
		КоличествоРезультатов=РегРезультаты.Количество();
		
		Если КоличествоРезультатов>0 Тогда
			ЗаписьРезультата=РегРезультаты[КоличествоРезультатов-1];
			Если ДатаРезультатов<>ЗаписьРезультата.Период Тогда
				//создадим новую запись
				ЗаписьРезультата=РегРезультаты.Добавить();
				ЗаписьРезультата.Период=ДатаРезультатов;
				
			КонецЕсли;
			
		Иначе
			//создадим новую запись
			ЗаписьРезультата=РегРезультаты.Добавить();
			ЗаписьРезультата.Период=ДатаРезультатов;
		КонецЕсли;
		
		ЗаписьРезультата.Задача=ЗадачаКБП;
		ЗаписьРезультата.ПараметрРезультата=ПараметрРезультата;
		ЗаписьРезультата.БизнесПроцесс=БизнесПроцесс;
		ЗаписьРезультата.Исполнитель=Исполнитель;
		ЗаписьРезультата.ТочкаКБП=ТочкаКБП;
		ЗаписьРезультата.Исполнитель=Исполнитель;
		ЗаписьРезультата.ИднИсполнителя=ИднИсполнителя;
		ЗаписьРезультата.НомерПрохода=ЗадачаКБП.НомерПрохода;
		
		ЗаписьРезультата.ЗначениеПараметра=ЗначениеРезультата;
		
		Попытка
			РегРезультаты.Записать(Истина);
		Исключение
			ТекстОшибки=ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("Сохранение результатов задачи.", УровеньЖурналаРегистрации.Ошибка, ЗадачаКБП, "", ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
		КонецПопытки;
		
	КонецЦикла; //структура	результатов	
	
КонецПроцедуры

// Функция определяет количество рецензий в маршрутной точке 
// Параметры:
//		ИднИсполнителя - уникальный идентификататор исполнителя 
//		ТочкаКБП - маршрутная точка 
//		ЗадачаИсполнителя - ссылка на задачу бизнес-процесса
// Возвращаемое значение: Число
Функция КоличествоРецензий(ИднИсполнителя, ТочкаКБП, ЗадачаИсполнителя=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	КОЛИЧЕСТВО(КП_РецензииКонтролеров.Период) КАК Количество
	                    |ИЗ
	                    |	РегистрСведений.КП_РецензииКонтролеров КАК КП_РецензииКонтролеров
	                    |ГДЕ
	                    |	КП_РецензииКонтролеров.ТочкаКБП = &ТочкаКБП
	                    |	И КП_РецензииКонтролеров.ИднИсполнителя = &ИднИсполнителя
	                    |	И (&ЗадачаИсполнителя ЕСТЬ NULL ИЛИ КП_РецензииКонтролеров.ЗадачаИсполнителя = &ЗадачаИсполнителя)");
						
	Запрос.УстановитьПараметр("ТочкаКБП", ТочкаКБП);
	Запрос.УстановитьПараметр("ИднИсполнителя", ИднИсполнителя);
	
	Если ЗадачаИсполнителя=Неопределено Тогда
		Запрос.УстановитьПараметр("ЗадачаИсполнителя", NULL);
		
	Иначе 
		Запрос.УстановитьПараметр("ЗадачаИсполнителя", ЗадачаИсполнителя);
		
	КонецЕсли;
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
		
	Иначе
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

// Функция формирует и возвращает таблицу реквизитов процесса в маршрутной точке 
// Параметры:
//		ТочкаКБП - маршрутная точка 
//		ДатаРеквизита - дата получения данных реквизита
// Возвращаемое значение: Таблица значений
Функция ПолучитьТаблицуРеквизитовПроцессаВТочке(ТочкаКБП, ДатаРеквизита=Неопределено) Экспорт
	
	Если ДатаРеквизита=Неопределено Тогда
		ДатаРеквизита=ТекущаяДата();
		
	КонецЕсли;
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.ЗначениеРеквизита,
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.РеквизитПроцесса,
	                    |	КП_ТочкиПроцессовРеквизитыПроцесса.НаименованиеВФорме,
						|	КП_ТочкиПроцессовРеквизитыПроцесса.НаименованиеВФормеИностранное,
	                    |	КП_ТочкиПроцессовРеквизитыПроцесса.ТолькоПросмотр,
	                    |	КП_ТочкиПроцессовРеквизитыПроцесса.Обязательный
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов.РеквизитыПроцесса КАК КП_ТочкиПроцессовРеквизитыПроцесса
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_РеквизитыЭкземпляраПроцесса.СрезПоследних(&ДатаКон, БизнесПроцесс = &БизнесПроцесс) КАК КП_РеквизитыЭкземпляраПроцессаСрезПоследних
	                    |		ПО (КП_РеквизитыЭкземпляраПроцессаСрезПоследних.РеквизитПроцесса = КП_ТочкиПроцессовРеквизитыПроцесса.РеквизитПроцесса)
	                    |			И (КП_РеквизитыЭкземпляраПроцессаСрезПоследних.БизнесПроцесс = КП_ТочкиПроцессовРеквизитыПроцесса.Ссылка.ВладелецТочки)
	                    |ГДЕ
	                    |	КП_ТочкиПроцессовРеквизитыПроцесса.Ссылка = &ТочкаКБП
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	КП_РеквизитыЭкземпляраПроцессаСрезПоследних.Порядок");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ДатаКон", ДатаРеквизита);
	Запрос.УстановитьПараметр("ТочкаКБП", ТочкаКБП);
	
	ТаблицаРеквизитов=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции

// Функция получает список результатов по отчету 
// Параметры:
//		ОтчетИсполнителя - отчет, требуемый от исполнителей 
// Возвращаемое значение: Список значений
Функция ПолучитьСписокРезультатовПоОтчету(ОтчетИсполнителя) Экспорт
	
	СписокРеквизитовОтчета=Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(ОтчетИсполнителя) Тогда
		Возврат СписокРеквизитовОтчета;
	КонецЕсли;
	
	ИспользоватьИностранныеНаименования=КП_ОбщееСервер.ИспользоватьИностранныеНаименованияВФормахПроцессов();

	Для Каждого СтрокаТЧ Из ОтчетИсполнителя.ВидыОтчетов Цикл
		
		Если НЕ СтрокаТЧ.Использование Тогда
			Продолжить;
			
		КонецЕсли;
		
		НаименованиеРеквизитаРезультата=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(СтрокаТЧ.НаименованиеРеквизитаВидаИностранное), СтрокаТЧ.НаименованиеРеквизитаВидаИностранное, СтрокаТЧ.НаименованиеРеквизитаВида);
		СписокРеквизитовОтчета.Добавить(СтрокаТЧ.ВидОтчета, НаименованиеРеквизитаРезультата, СтрокаТЧ.Обязательный);
		
	КонецЦикла;
	
	Возврат СписокРеквизитовОтчета;
	
КонецФункции

// Функция получает имя реквизита из вида отчета 
// Параметры:
//		ВидОтчета - вид отчета исполнителей
// Возвращаемое значение: Строка
Функция ПолучитьИмяРеквизитаОтчетаИзВидаОтчета(ВидОтчета) Экспорт
	
	Если ВидОтчета=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ЛичнаяВстреча Тогда
		Возврат "РезультатЛичнаяВстреча";
		
	ИначеЕсли ВидОтчета=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ТелефонныйОтчет Тогда
		Возврат "РезультатТелефонныйЗвонок";
		
	ИначеЕсли ВидОтчета=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ПриложенныйФайл Тогда
		Возврат "РезультатФайл";
		
	ИначеЕсли ВидОтчета=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ПриложенныйДокумент Тогда
		Возврат "РезультатДокумент";
		
	ИначеЕсли ВидОтчета=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.БулевыйРезультат Тогда
		Возврат "РезультатДаНет";
		
	ИначеЕсли ВидОтчета=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ТекстовоеСообщение Тогда
		Возврат "РезультатТекстФорматированный";
		
	ИначеЕсли ВидОтчета=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ВыборКнопками Тогда
		Возврат "РезультатВыборКнопками";
		
	Иначе
		Возврат СокрЛП(ВидОтчета.Код);
		
	КонецЕсли;

КонецФункции

// Функция возвращает Истина в случае, если в требуемых от исполнителя результатах необходим 
// текстовый результат.
// Параметры:
//		ВидНеобходимогоОтчета - вид необходимого отчета исполнителя 
// Возвращаемое значение: Истина или Ложь
Функция ТребуемыйРезультатТекст(ВидНеобходимогоОтчета) Экспорт
	
	СтруктураПоиска=Новый Структура("ВидОтчета, Использование", ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ТекстовоеСообщение, Истина);
	
	НайденныеСтроки=ВидНеобходимогоОтчета.ВидыОтчетов.НайтиСтроки(СтруктураПоиска);
	
	Возврат (НайденныеСтроки.Количество()>0);

КонецФункции

// Функция возвращает Истина в случае, если в требуемых от исполнителя результатах необходимо предоставить 
// ссылку на файл. 
// Параметры:
//		ВидНеобходимогоОтчета - вид необходимого отчета исполнителя 
// Возвращаемое значение: Истина или Ложь
Функция ТребуемыйРезультатФайл(ВидНеобходимогоОтчета) Экспорт
	
	СтруктураПоиска=Новый Структура("ВидОтчета, Использование", ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ПриложенныйФайл, Истина);
	
	НайденныеСтроки=ВидНеобходимогоОтчета.ВидыОтчетов.НайтиСтроки(СтруктураПоиска);
	
	Возврат (НайденныеСтроки.Количество()>0);

КонецФункции

// Функция возвращает Истина в случае, если в требуемых от исполнителя результатах необходимо предоставить документ
// Параметры:
//		ВидНеобходимогоОтчета - вид необходимого отчета исполнителя 
// Возвращаемое значение: Истина или Ложь
Функция ТребуемыйРезультатДокумент(ВидНеобходимогоОтчета) Экспорт
	
	СтруктураПоиска=Новый Структура("ВидОтчета, Использование", ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ПриложенныйДокумент, Истина);
	
	НайденныеСтроки=ВидНеобходимогоОтчета.ВидыОтчетов.НайтиСтроки(СтруктураПоиска);
	
	Возврат (НайденныеСтроки.Количество()>0);

КонецФункции

// Функция возвращает Истина в случае, если в требуемых от исполнителя результатах можно указать произвольный отчет
// Параметры:
//		ВидНеобходимогоОтчета - вид необходимого отчета исполнителя 
// Возвращаемое значение: Истина или Ложь
Функция ТребуемыйРезультатПроизвольныйОтчет(ВидНеобходимогоОтчета) Экспорт
	
	Возврат (ВидНеобходимогоОтчета.ТипКонтроляРезультата>1);
	
КонецФункции

// Функция возвращает Истина в случае, если в требуемых от исполнителя результатах необходимо провести 
// личную встречу. 
// Параметры:
//		ВидНеобходимогоОтчета - вид необходимого отчета исполнителя 
// Возвращаемое значение: Истина или Ложь
Функция ТребуемыйРезультатЛичнаяВстреча(ВидНеобходимогоОтчета) Экспорт
	
	СтруктураПоиска=Новый Структура("ВидОтчета, Использование", ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ЛичнаяВстреча, Истина);
	
	НайденныеСтроки=ВидНеобходимогоОтчета.ВидыОтчетов.НайтиСтроки(СтруктураПоиска);
	
	Возврат (НайденныеСтроки.Количество()>0);

КонецФункции

// Функция возвращает Истина в случае, если в требуемых от исполнителя результатах необходимо произвести 
// телефонный звонок.
// Параметры:
//		ВидНеобходимогоОтчета - вид необходимого отчета исполнителя 
// Возвращаемое значение: Истина или Ложь
Функция ТребуемыйРезультатТелефонныйОтчет(ВидНеобходимогоОтчета) Экспорт
	
	СтруктураПоиска=Новый Структура("ВидОтчета, Использование", ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ТелефонныйОтчет, Истина);
	
	НайденныеСтроки=ВидНеобходимогоОтчета.ВидыОтчетов.НайтиСтроки(СтруктураПоиска);
	
	Возврат (НайденныеСтроки.Количество()>0);

КонецФункции

// Функция возвращает Истина в случае, если в требуемых от исполнителя результатах необходим булевый 
// результат (да/нет).
// Параметры:
//		ВидНеобходимогоОтчета - вид необходимого отчета исполнителя 
// Возвращаемое значение: Истина или Ложь
Функция ТребуемыйРезультатБулево(ВидНеобходимогоОтчета) Экспорт
	
	СтруктураПоиска=Новый Структура("ВидОтчета, Использование", ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.БулевыйРезультат, Истина);
	
	НайденныеСтроки=ВидНеобходимогоОтчета.ВидыОтчетов.НайтиСтроки(СтруктураПоиска);
	
	Возврат (НайденныеСтроки.Количество()>0);

КонецФункции

// Функция возвращает Истина в случае, если в требуемых от исполнителя результатах необходимо указать число
// Параметры:
//		ВидНеобходимогоОтчета - вид необходимого отчета исполнителя 
// Возвращаемое значение: Истина или Ложь
Функция ТребуемыйРезультатЧисло(ВидНеобходимогоОтчета) Экспорт
	
	СтруктураПоиска=Новый Структура("ВидОтчета, Использование", ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.РезультатЧисло, Истина);
	
	НайденныеСтроки=ВидНеобходимогоОтчета.ВидыОтчетов.НайтиСтроки(СтруктураПоиска);
	
	Возврат (НайденныеСтроки.Количество()>0);

КонецФункции

// Функция возвращает Истина в случае, если в требуемых от исполнителя результатах необходимо указать дату
// Параметры:
//		ВидНеобходимогоОтчета - вид необходимого отчета исполнителя 
// Возвращаемое значение: Истина или Ложь
Функция ТребуемыйРезультатДата(ВидНеобходимогоОтчета) Экспорт
	
	СтруктураПоиска=Новый Структура("ВидОтчета, Использование", ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.РезультатДата, Истина);
	
	НайденныеСтроки=ВидНеобходимогоОтчета.ВидыОтчетов.НайтиСтроки(СтруктураПоиска);
	
	Возврат (НайденныеСтроки.Количество()>0);

КонецФункции

// Функция удаляет задачи процесса 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс 
//		УдалятьТолькоНеВыполненные - 
// Возвращаемое значение: Истина или Ложь
Функция УдалитьЗадачиПроцесса(БизнесПроцесс, УдалятьТолькоНеВыполненные=Истина) Экспорт
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	КП_Задача.Ссылка
	             |ИЗ
	             |	Задача.КП_Задача КАК КП_Задача
	             |ГДЕ
	             |	КП_Задача.ПометкаУдаления = ЛОЖЬ
	             |	И КП_Задача.БизнесПроцесс = &БизнесПроцесс
	             |";
							
							
	Если УдалятьТолькоНеВыполненные Тогда
		ТекстЗапроса=ТекстЗапроса+" И КП_Задача.Выполнена = Ложь";
		
	КонецЕсли;							
	
	Запрос=Новый Запрос(ТекстЗапроса);
							
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ЗадачаСсылка=Выборка.Ссылка;
		ЗадачаОбъект=ЗадачаСсылка.ПолучитьОбъект();
		Попытка
			ЗадачаОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ЗадачаСсылка.ТочкаКБП) Тогда
			КП_Процессы.ЗаписатьВЖурналПроцесса("Задача """+СокрЛП(ЗадачаСсылка)+""" ("+СокрЛП(ЗадачаСсылка.Исполнитель)+") удалена автоматически!", БизнесПроцесс, ЗадачаСсылка.ТочкаКБП,,1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

// Функция удаляет задачи процесса в маршрутной точке 
// Параметры:
//		ТочкаКБП - маршрутная точка 
//		УдалятьТолькоНеВыполненные - 
// Возвращаемое значение: Истина или Ложь
Функция УдалитьЗадачиПроцессаВТочке(ТочкаКБП, УдалятьТолькоНеВыполненные=Истина) Экспорт
	
	БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	
	ТекстЗапроса="ВЫБРАТЬ
	             |	КП_Задача.Ссылка
	             |ИЗ
	             |	Задача.КП_Задача КАК КП_Задача
	             |ГДЕ
	             |	КП_Задача.ПометкаУдаления = ЛОЖЬ
	             |	И КП_Задача.ТочкаКБП = &ТочкаКБП";							
							
	Если УдалятьТолькоНеВыполненные Тогда
		ТекстЗапроса=ТекстЗапроса+" И КП_Задача.Выполнена = Ложь";
		
	КонецЕсли;							
	
	Запрос=Новый Запрос(ТекстЗапроса);
							
	Запрос.УстановитьПараметр("ТочкаКБП", ТочкаКБП);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ЗадачаСсылка=Выборка.Ссылка;
		ЗадачаОбъект=ЗадачаСсылка.ПолучитьОбъект();
		Попытка
			ЗадачаОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
		УдалитьНапоминанияПоЗадаче(ЗадачаСсылка);
		
		Если ЗначениеЗаполнено(ЗадачаСсылка.ТочкаКБП) Тогда
			КП_Процессы.ЗаписатьВЖурналПроцесса("Задача """+СокрЛП(ЗадачаСсылка)+""" ("+СокрЛП(ЗадачаСсылка.Исполнитель)+") удалена автоматически!", БизнесПроцесс, ТочкаКБП,,1);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Процедура удаляет напомнания по задаче
// Параметры:
//	Задача - ссылка на задачу
Процедура УдалитьНапоминанияПоЗадаче(Задача) Экспорт
	//проверим и удалим напомнинания задачи
	МассивНапоминанийПоЗадаче=ПолучитьМассивНапоминанийПредмета(Задача);
	
	НачатьТранзакцию();
	Для Каждого Напоминание Из МассивНапоминанийПоЗадаче Цикл
		НапоминанияПользователя.УдалитьНапоминание(Напоминание);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Функция формирует и возвращает массив напоминаний предмета
// Параметры:
//	Предмет - предмет напоминаний
// Возвращаемое значение: Массив
Функция ПолучитьМассивНапоминанийПредмета(Предмет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	НапоминанияПользователя.Пользователь КАК Пользователь,
	                    |	НапоминанияПользователя.ВремяСобытия КАК ВремяСобытия,
	                    |	НапоминанияПользователя.Источник КАК Источник
	                    |ИЗ
	                    |	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	                    |ГДЕ
	                    |	НапоминанияПользователя.Источник = &Источник");
	Запрос.УстановитьПараметр("Источник", Предмет);
	
	ТаблицаНапоминаний = Запрос.Выполнить().Выгрузить();
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаНапоминаний);
	
КонецФункции

// Функция возвращает номер текущего прохода по маршруту 
// Параметры:
//		ТочкаКБП - маршрутная точка 
//		ДатаТочки - дата номера прохода точки
// Возвращаемое значение: Число
Функция ПолучитьАктуальныйНомерПроходаТочки(ТочкаКБП, ДатаТочки=Неопределено) Экспорт
	
	Если ДатаТочки=Неопределено Тогда
		ДатаТочки=ТекущаяДата();
		
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	МАКСИМУМ(КП_ОбработкаТочекСрезПоследних.НомерПрохода) КАК НомерПроходаМаксимум
	                    |ИЗ
	                    |	РегистрСведений.КП_ОбработкаТочек.СрезПоследних(&ДатаКон, ТочкаКБП = &ТочкаКБП) КАК КП_ОбработкаТочекСрезПоследних
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	КП_ОбработкаТочекСрезПоследних.НомерПрохода");
						
	Запрос.УстановитьПараметр("ТочкаКБП", ТочкаКБП);
	Запрос.УстановитьПараметр("ДатаКон", ДатаТочки);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерПроходаМаксимум;
		
	Иначе
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

// Функция определяет одобрен ли результат исполнителя 
// Параметры:
//		ТочкаКБП - маршрутная точка 
//		Исполнитель - ссылка на исполнителя
// Возвращаемое значение: Истина или Ложь
Функция ТочкаИсполнителяОдобрена(ТочкаКБП, Исполнитель) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_РецензииКонтролеровСрезПоследних.РезультатОдобрен
	                    |ИЗ
	                    |	РегистрСведений.КП_РецензииКонтролеров.СрезПоследних(
	                    |			&ДатаКон,
	                    |			Исполнитель = &Исполнитель
	                    |				И ТочкаКБП = &ТочкаКБП) КАК КП_РецензииКонтролеровСрезПоследних
						|
						|УПОРЯДОЧИТЬ ПО
						|Период УБЫВ");
						
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	Запрос.УстановитьПараметр("ТочкаКБП", ТочкаКБП);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РезультатОдобрен;
		
	Иначе
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Функция формирует и возвращает состояние задачи 
// Параметры:
//		Задача - ссылка на задачу бизнес-процесса
//		ДатаПараметров - дата параметров
// Возвращаемое значение: Ссылка на состояние задачи
Функция ПолучитьСостояниеЗадачи(Задача, ДатаПараметров=Неопределено) Экспорт
	
	Если ДатаПараметров=Неопределено Тогда
		ДатаПараметров=ТекущаяДата();
		
	КонецЕсли;
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	КП_СостоянияЗадачСрезПоследних.СостояниеЗадачи
	                    |ИЗ
	                    |	РегистрСведений.КП_СостоянияЗадач.СрезПоследних(&ДатаПараметров, Задача = &Задача) КАК КП_СостоянияЗадачСрезПоследних");
						
	Запрос.УстановитьПараметр("ДатаПараметров", ДатаПараметров);
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Состояние;
		
	Иначе
		Возврат Перечисления.КП_СостояниеЗадач.ОжидаетВыполнения;
		
	КонецЕсли;

КонецФункции

// Функция устанавливает состояние задачи 
// Параметры:
//		Задача - ссылка на задачу процесса
//		Состояние - устанавливаемое состояние
//		ДатаПараметров - дата прараметров
// Возвращаемое значение: Истина или Ложь
Функция УстановитьСостояниеЗадачи(Задача, Состояние, ДатаПараметров=Неопределено) Экспорт
	
	Если ДатаПараметров=Неопределено Тогда
		ДатаПараметров=ТекущаяДата();
		
	КонецЕсли;
	
   	НаборРегистра=РегистрыСведений.КП_СостоянияЗадач.СоздатьНаборЗаписей();
	НаборРегистра.Отбор.Период.Установить(ДатаПараметров);
	НаборРегистра.Отбор.Задача.Установить(Задача);
	НаборРегистра.Прочитать();
	
	Если НаборРегистра.Количество()=0 Тогда
		ЗаписьРегистра=НаборРегистра.Добавить();
		ЗаписьРегистра.Задача=Задача;
		ЗаписьРегистра.Период=ДатаПараметров;
		
	Иначе
		ЗаписьРегистра=НаборРегистра[0];
		
	КонецЕсли;
	
	ЗаписьРегистра.СостояниеЗадачи=Состояние;
	
	Попытка
		НаборРегистра.Записать(Истина);
	Исключение
		ТекстОшибки=ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("Запись состояния задачи.", УровеньЖурналаРегистрации.Ошибка, Задача, "", ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Функция определяет тип контроля результатов исполнителей
// Параметры:
//		ОтчетИсполнителя - отчет исполнителя 
// Возвращаемое значение: Число (тип контроля результата)
Функция ПолучитьТипКонтроляРезультата(ОтчетИсполнителя) Экспорт
	Возврат ОтчетИсполнителя.ТипКонтроляРезультата;
	
КонецФункции

// Функция отменяет выполнение всех выполняющихся задач 
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс 
// Возвращаемое значение: Истина или Ложь
Функция ОтменитьВыполнениеВсехВыполняющихсяЗадач(БизнесПроцесс) Экспорт
	
	РегОбработкаТочек=РегистрыСведений.КП_ОбработкаТочек.СоздатьНаборЗаписей();
	РегОбработкаТочек.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегОбработкаТочек.Прочитать();
	
	ИзмененияБыли=Ложь;
	Для Каждого ЗаписьРегистра Из РегОбработкаТочек Цикл
		Если ЗаписьРегистра.Состояние=Перечисления.КП_СостояниеТочек.Выполняется Тогда
			ЗаписьРегистра.Состояние=Перечисления.КП_СостояниеТочек.НеВыполняется;
			ИзмененияБыли=Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИзмененияБыли Тогда
		Попытка
			РегОбработкаТочек.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает текстовый результат исполнителя 
// Параметры:
//		ЗадачаИсполнителя - ссылка на задачу исполнителя
// Возвращаемое значение: Строка
Функция ПолучитьТекстовыйРезультатСервером(ЗадачаИсполнителя) Экспорт
	
	РезультатТекстФорматированный=ЗадачаИсполнителя.ХранилищеТекстовогоРезультата.Получить();
	Если РезультатТекстФорматированный<>Неопределено Тогда
		РезультатТекст=РезультатТекстФорматированный.ПолучитьТекст();
    	Возврат РезультатТекст
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Функция возвращает список используемых ролей в виде процесса 
// Параметры:
//		ВидПроцесса - вид процесса
// Возвращаемое значение: Список значений
Функция ПолучитьСписокИспользуемыхРолей(ВидПроцесса) Экспорт
	
	СписокРолей=Новый СписокЗначений;

	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	КП_ВидыПроцессовОсновныеИсполнители.ТочкаАдресации
	                    |ИЗ
	                    |	Справочник.КП_ВидыПроцессов.ОсновныеИсполнители КАК КП_ВидыПроцессовОсновныеИсполнители
	                    |ГДЕ
	                    |	КП_ВидыПроцессовОсновныеИсполнители.Ссылка = &ВидПроцесса
	                    |	И КП_ВидыПроцессовОсновныеИсполнители.Ссылка.ПометкаУдаления = ЛОЖЬ
						|	И КП_ВидыПроцессовОсновныеИсполнители.ТочкаАдресации ССЫЛКА Справочник.КП_РолеваяАдресация
	                    |
	                    |ОБЪЕДИНИТЬ ВСЕ
	                    |
	                    |ВЫБРАТЬ
	                    |	КП_ТочкиПроцессовИсполнителиТочки.ТочкаАдресации
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов.ИсполнителиТочки КАК КП_ТочкиПроцессовИсполнителиТочки
	                    |ГДЕ
	                    |	КП_ТочкиПроцессовИсполнителиТочки.Ссылка.ВладелецТочки = &ВидПроцесса
	                    |	И КП_ТочкиПроцессовИсполнителиТочки.Ссылка.ВладелецТочки.ПометкаУдаления = ЛОЖЬ
						|	И КП_ТочкиПроцессовИсполнителиТочки.ТочкаАдресации ССЫЛКА Справочник.КП_РолеваяАдресация
						|");
						
	Запрос.УстановитьПараметр("ВидПроцесса", ВидПроцесса);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока Выборка.Следующий() Цикл
		ТочкаАдресации=Выборка.ТочкаАдресации;
		
		Если СписокРолей.НайтиПоЗначению(ТочкаАдресации)=Неопределено Тогда
			СписокРолей.Добавить(ТочкаАдресации);
			
		КонецЕсли;
		
	КонецЦикла;

    Возврат СписокРолей;
	
КонецФункции

// Функция возвращает начальное значение результата 
// Параметры:
//		ВидРезультатаИсполнителя - вид результата процесса
// Возвращаемое значение: Истина или Ложь
Функция ПолучитьНачальноеЗначениеТребуемогоЗначения(ВидРезультатаИсполнителя) Экспорт
	
	Если ВидРезультатаИсполнителя=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.БулевыйРезультат Тогда
		Возврат Ложь;
		
	ИначеЕсли ВидРезультатаИсполнителя=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ВыборКнопками Тогда
		Возврат Ложь;
		
	ИначеЕсли ВидРезультатаИсполнителя=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ПриложенныйФайл Тогда
		Возврат Справочники.Файлы.ПустаяСсылка();
		
	ИначеЕсли ВидРезультатаИсполнителя=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.РезультатДата Тогда
		Возврат Дата("00010101");
		
	ИначеЕсли ВидРезультатаИсполнителя=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.РезультатЧисло Тогда
		Возврат 0;
		
	ИначеЕсли ВидРезультатаИсполнителя=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ТекстовоеСообщение Тогда
		Возврат "";
		
	ИначеЕсли ВидРезультатаИсполнителя=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ЛичнаяВстреча Тогда
		Возврат Ложь;
		
	ИначеЕсли ВидРезультатаИсполнителя=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ТелефонныйОтчет Тогда
		Возврат Ложь;
				
	КонецЕсли;
	
КонецФункции

// Функция возвращает список рабочих групп маршрутных  точек 
// Параметры:
//		ВладелецТочек - владелец точек (вид или экземпляр) 
// Возвращаемое значение: Список значений
Функция ПолучитьСписокРабочихГруппТочек(ВладелецТочек) Экспорт

	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	КП_ТочкиПроцессов.РабочаяГруппа
	                    |ИЗ
	                    |	Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |ГДЕ
	                    |	КП_ТочкиПроцессов.ВладелецТочки = &ВладелецТочек
	                    |	И КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ТочкиПроцессов.ИсточникИсполнителей = 5");
						
	Запрос.УстановитьПараметр("ВладелецТочек", ВладелецТочек);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокРабочихГрупп=Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		РабочаяГруппа=Выборка.РабочаяГруппа;
		Если НЕ ЗначениеЗаполнено(РабочаяГруппа) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокРабочихГрупп.Добавить(РабочаяГруппа);
	КонецЦикла;
	
	Возврат СписокРабочихГрупп;

КонецФункции

// Функция возвращает список используемых в виде процесса рабочих групп 
// Параметры:
//		ВидПроцесса - вид процесса
// Возвращаемое значение: Список значений
Функция ПолучитьСписокИспользуемыхВВидеПроцессаРабочихГрупп(ВидПроцесса) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	ВложенныйЗапрос.РабочаяГруппа
	                    |ИЗ
	                    |	(ВЫБРАТЬ
	                    |		КП_ВидыПроцессов.РабочаяГруппаОсновныхИсполнителей КАК РабочаяГруппа
	                    |	ИЗ
	                    |		Справочник.КП_ВидыПроцессов КАК КП_ВидыПроцессов
	                    |	ГДЕ
	                    |		КП_ВидыПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |		И КП_ВидыПроцессов.Ссылка = &ВидПроцесса
	                    |	
	                    |	ОБЪЕДИНИТЬ ВСЕ
	                    |	
	                    |	ВЫБРАТЬ
	                    |		КП_ТочкиПроцессов.РабочаяГруппа
	                    |	ИЗ
	                    |		Справочник.КП_ТочкиПроцессов КАК КП_ТочкиПроцессов
	                    |	ГДЕ
	                    |		КП_ТочкиПроцессов.ПометкаУдаления = ЛОЖЬ
	                    |		И КП_ТочкиПроцессов.ВладелецТочки = &ВидПроцесса) КАК ВложенныйЗапрос");
						
	Запрос.УстановитьПараметр("ВидПроцесса", ВидПроцесса);
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокРабочихГруппПроцесса=Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		РабочаяГруппа=Выборка.РабочаяГруппа;
		Если НЕ ЗначениеЗаполнено(РабочаяГруппа) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СписокРабочихГруппПроцесса.НайтиПоЗначению(РабочаяГруппа)=Неопределено Тогда
			СписокРабочихГруппПроцесса.Добавить(РабочаяГруппа);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокРабочихГруппПроцесса;
	
КонецФункции

// Функция возвращает основной отчет маршрутной точки
// Параметры:
//		ТочкаКБП - маршрутная точка 
// Возвращаемое значение: Ссылка на основной отчет исполнителей
Функция ПолучитьОсновнойОтчетТочки(ТочкаКБП) Экспорт
	Возврат ТочкаКБП.ДействиеОсновнойОтчетИсполнителей;
	
КонецФункции

// Функция возвращает строку текущих результатов исполнителя  
// Параметры:
//		БизнесПроцесс - ссылка на бизнес-процесс 
//		ИднИсполнителя - уникальный идентификататор исполнителя 
// Возвращаемое значение: Строка
Функция ПолучитьСтрокуТекущихРезультатовИсполнителя(БизнесПроцесс, ИднИсполнителя) Экспорт
	
	Запрос=Новый Запрос("ВЫБРАТЬ
	                    |	РезультатыИсполнителейЗадачСрезПоследних.ЗначениеПараметра КАК ЗначениеРезультата,
	                    |	РезультатыИсполнителейЗадачСрезПоследних.ПараметрРезультата КАК ПараметрРезультата,
	                    |	РезультатыИсполнителейЗадачСрезПоследних.Задача,
	                    |	СтруктураПараметровЗадачСрезПоследних.ЗначениеПараметра КАК ОтчетИсполнителя
	                    |ИЗ
	                    |	РегистрСведений.КП_РезультатыИсполнителейЗадач.СрезПоследних(&ДатаКон, ) КАК РезультатыИсполнителейЗадачСрезПоследних
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ПараметрыЗадач.СрезПоследних(&ДатаКон, ПараметрЗадачи = &ПараметрОтчетИсполнителя) КАК СтруктураПараметровЗадачСрезПоследних
	                    |		ПО РезультатыИсполнителейЗадачСрезПоследних.Задача = СтруктураПараметровЗадачСрезПоследних.Задача
	                    |ГДЕ
	                    |	РезультатыИсполнителейЗадачСрезПоследних.БизнесПроцесс = &БизнесПроцесс
	                    |	И РезультатыИсполнителейЗадачСрезПоследних.ИднИсполнителя = &ИднИсполнителя
	                    |ИТОГИ ПО
	                    |	ПараметрРезультата,
	                    |	ЗначениеРезультата");
						
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	Запрос.УстановитьПараметр("ИднИсполнителя", ИднИсполнителя);
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ПараметрОтчетИсполнителя", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ОтчетИсполнителя);
	
	ВыборкаПараметр=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокаРезультатов="";
	
	Пока ВыборкаПараметр.Следующий() Цикл
		ВидОтчета=ВыборкаПараметр.ПараметрРезультата;
		ВыборкаЗначение=ВыборкаПараметр.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗначение.Следующий() Цикл
			ВыборкаДетали=ВыборкаЗначение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДетали.Следующий() Цикл
				//найдем наименование требуемого результата в отчете исполнителя
				НаименованиеРезультата=СокрЛП(ВыборкаПараметр.ПараметрРезультата);
				ОтчетИсполнителя=ВыборкаДетали.ОтчетИсполнителя;
				Если ЗначениеЗаполнено(ОтчетИсполнителя) Тогда
					МассивВидовОтчетов=ОтчетИсполнителя.ВидыОтчетов.НайтиСтроки(Новый Структура("ВидОтчета", ВидОтчета));
					Если МассивВидовОтчетов.Количество()>0 Тогда
						НаименованиеРезультата=МассивВидовОтчетов[0].НаименованиеРеквизитаВида;
					КонецЕсли;
				КонецЕсли;	
				СтрокаРезультатов=СтрокаРезультатов+?(ПустаяСтрока(СтрокаРезультатов), "", Символы.ПС)+НаименованиеРезультата+": "+СокрЛП(ВыборкаЗначение.ЗначениеРезультата);
				
			КонецЦикла; //детали
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтрокаРезультатов;
	
КонецФункции

// Функция выполяет обрработку программной функции события ПослеЗаписи
// Параметры:
//		Объект - ссылка на объект
// Возвращаемое значение: Структура данных
Функция ВыполнитьОбработчикПослеЗаписи(СсылкаНаЗадачу) Экспорт

	БизнесПроцесс=СсылкаНаЗадачу.БизнесПроцесс;
	ТочкаКБП=СсылкаНаЗадачу.ТочкаКБП;
	
	СтруктураВыполненияОбработки=Новый Структура("ЗавершеноУспешно, ЗавершитьДействие, ЗавершитьПроцесс", Истина, Ложь, Ложь);
	
	//получим параметры процесса
	ПараметрыПроцесса=КП_Процессы.ПолучитьСтруктуруПараметровКБП(БизнесПроцесс);
	
	//определим исполнителя
	ИсполнительЗадачи=СсылкаНаЗадачу.Исполнитель;
	
	ИсходныйТекстФункции=ТочкаКБП.ДействиеТекстФункцииПослеЗаписи; //обработчик ПослеЗаписи
	ТекстФункции=КП_Процессы.СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции);
	
	Если НЕ ПустаяСтрока(ТекстФункции) Тогда
	
		//подготовим аргументы программной функции
		ОбрабатыватьСтруктуруПараметровПроцесса=Истина; 
		ОбрабатыватьСтруктуруПараметровЗадачи=Истина;
		ОбрабатыватьСтруктуруРеквизитовПроцесса=Истина;
		ОбрабатыватьСтруктуруОтчетаИсполнителя=Истина;
		
		СтуктураРезультата=КП_Процессы.ПодготовитьИВыполнитьПрограммнуюФункцию(ТочкаКБП, ТекстФункции, ИсполнительЗадачи, БизнесПроцесс, СсылкаНаЗадачу, 
				ОбрабатыватьСтруктуруРеквизитовПроцесса,
				ОбрабатыватьСтруктуруПараметровПроцесса,
				ОбрабатыватьСтруктуруПараметровЗадачи,
				ОбрабатыватьСтруктуруОтчетаИсполнителя);
				
		Если СтуктураРезультата=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки ""ПослеЗаписи"" в точке ""';en='Runtime Error handling ""PosleZapisi"" at ""'")+СокрЛП(ТочкаКБП)+"""."+ОписаниеОшибки());
			
			СтруктураВыполненияОбработки.ЗавершеноУспешно=Ложь;
			Возврат СтруктураВыполненияОбработки;
			
		Иначе
			СтруктураВыполненияОбработки.ЗавершеноУспешно=Истина;
			СтруктураВыполненияОбработки.ЗавершитьПроцесс=СтуктураРезультата.ЗавершитьПроцесс;
			СтруктураВыполненияОбработки.ЗавершитьДействие=СтуктураРезультата.ЗавершитьДействие;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат СтруктураВыполненияОбработки;
	
КонецФункции

// Функция проверяет необходимость перезаполнить список исполнителей 
// точки в рабочей группе
// Параметры:
// 	РабочаяГруппаТочки - Рабочая группа точки
// 	ТочкаКБП - Точка бизнес-процесса
// Возвращаемое значение: Истина или Ложь
Функция ТребуетсяПерезаполнитьСписокИсполнителейТочкиПоРабочейГруппе(РабочаяГруппаТочки, ТочкаКБП)

	Если НЕ ЗначениеЗаполнено(РабочаяГруппаТочки) Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	КоличествоВРабочейГруппе=РабочаяГруппаТочки.Сотрудники.Количество();
	Если КоличествоВРабочейГруппе<>ТочкаКБП.ИсполнителиТочки.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	//проверим совпадают ли строки
	Для НомерСотрудника=0 По КоличествоВРабочейГруппе-1 Цикл
		Если РабочаяГруппаТочки.Сотрудники[НомерСотрудника].ТочкаАдресации<>ТочкаКБП.ИсполнителиТочки[НомерСотрудника].ТочкаАдресации Тогда
			//перезаполнение требуется
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//презаполнение не требуется
	Возврат Ложь;
	
КонецФункции

// Процедура перезаполняет список исполнителей точки по рабочей группе
// Параметры:
// 	РабочаяГруппаТочки - Рабочая группа точки
// 	ТочкаКБП - Точка бизнес-процесса
Процедура ПерезаполнитьСписокИсполнителейТочкиПоРабочейГруппе(РабочаяГруппаТочки, ТочкаКБП)

	Если НЕ ЗначениеЗаполнено(РабочаяГруппаТочки) Тогда
		Возврат;
		
	КонецЕсли;
	
	Если ТочкаКБП.ИсполнителиТочки.Количество()=1 Тогда
		//прочитаем параметры сроков исполнения для рабочей группы
		СтрокаРГ=ТочкаКБП.ИсполнителиТочки[0];
	Иначе
		СтрокаРГ=Неопределено;
	КонецЕсли;
	
	ТочкаОбъект=ТочкаКБП.ПолучитьОбъект();
	ТочкаОбъект.ИсполнителиТочки.Очистить();
	Для Каждого СтрокаИсполнителя Из РабочаяГруппаТочки.Сотрудники Цикл
		НоваяСтрока=ТочкаОбъект.ИсполнителиТочки.Добавить();
		НоваяСтрока.ТочкаАдресации=СтрокаИсполнителя.ТочкаАдресации;
		НоваяСтрока.ИднИсполнителя=КП_ОбщееСервер.СформироватьИднИсполнителя(СтрокаИсполнителя.ТочкаАдресации);
		
		Если СтрокаРГ=Неопределено Тогда
			НоваяСтрока.ОтчетИсполнителя=ТочкаКБП.ДействиеОсновнойОтчетИсполнителей;
			НоваяСтрока.ИндивидуальныйТекстЗадания="";
			НоваяСтрока.СрокВыполненияЧасов=-1;
			НоваяСтрока.ВидНаправленияПараллельное=?(ТочкаКБП.ДействиеПараллельное, 1, 0);
			НоваяСтрока.НеИспользоватьГрафикРаботы=Ложь;
			
		Иначе
			//скопируем данные строки настройки рабочей группы в строку исполнителя
			НоваяСтрока.ОтчетИсполнителя=СтрокаРГ.ОтчетИсполнителя;
			НоваяСтрока.СрокВыполненияТекст=СтрокаРГ.СрокВыполненияТекст;
			НоваяСтрока.ИндивидуальныйТекстЗадания=СтрокаРГ.ИндивидуальныйТекстЗадания;
			НоваяСтрока.ИндивидуальноеНаименованиеЗадания=СтрокаРГ.ИндивидуальноеНаименованиеЗадания;
			НоваяСтрока.СрокВыполненияЧасов=СтрокаРГ.СрокВыполненияЧасов;
			НоваяСтрока.ВидНаправленияПараллельное=СтрокаРГ.ВидНаправленияПараллельное;
			НоваяСтрока.НеИспользоватьГрафикРаботы=СтрокаРГ.НеИспользоватьГрафикРаботы;
			НоваяСтрока.ВидНаправленияПараллельное=СтрокаРГ.ВидНаправленияПараллельное;
			НоваяСтрока.СрокВыполненияДатаВремя=СтрокаРГ.СрокВыполненияДатаВремя;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		ТочкаОбъект.Записать();
		
	Исключение
		ТекстОшибки="Ошибка построения списка исполнителей точки """+СокрЛП(ТочкаКБП)+""" по рабочей группе! "+ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КП_Процессы.ЗаписатьВЖурналПроцесса(ТекстОшибки, ТочкаКБП.ВладелецТочки, ТочкаКБП,,3);		
		ЗаписьЖурналаРегистрации("Сохранение результатов задачи.", УровеньЖурналаРегистрации.Ошибка, ТочкаКБП, "", ТекстОшибки);		
		
	КонецПопытки;
	
КонецПроцедуры

// Функция получает структуру наименований кнопок результата
// Параметры:
// 	СтрокаКнопок - Строка кнопок
// Возвращаемое значение:  Структура
Функция ПолучитьСтруктуруНаименованийКнопокРезультата(СтрокаКнопок) Экспорт
	СтруктураКнопок=Новый Структура;
	
	МестоРазделителя=Найти(СтрокаКнопок, "|");
	Если МестоРазделителя<=1 Тогда
		Возврат Неопределено;
		
	КонецЕсли;
	
	НаименованиеКнопкиЛевой=СокрЛП(Лев(СтрокаКнопок, МестоРазделителя-1));
	НаименованиеКнопкиПравой=СокрЛП(Сред(СтрокаКнопок, МестоРазделителя+1));

	СтруктураКнопок.Вставить("ЛеваяКнопка", НаименованиеКнопкиЛевой);
	СтруктураКнопок.Вставить("ПраваяКнопка", НаименованиеКнопкиПравой);
	
	Возврат СтруктураКнопок;
	
КонецФункции

// Функция проверяет является ли текст функции пустым
// Параметры:
// 	ТекстФункции - Текст функции
// Возвращаемое значение: Истина или Ложь
Функция ТекстФункцииСобытияПустой(ТекстФункции) Экспорт
	//пройдем по строкам, если одна из строк не пустая и не начинается с // 
	//тогда считаем что текст присутствует
	
	ТекстОбъект=Новый ТекстовыйДокумент;
	ТекстОбъект.УстановитьТекст(ТекстФункции);
	НомерПоследнейСтроки=ТекстОбъект.КоличествоСтрок();
	Для НомерСтроки=1 По НомерПоследнейСтроки Цикл
		СтрокаТекста=ТекстОбъект.ПолучитьСтроку(НомерСтроки);
		Если ПустаяСтрока(СтрокаТекста) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Лев(СокрЛП(СтрокаТекста), 2)<>"//" Тогда
			//строка кода
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//в тексте только пустые строки и/или комментарии
	Возврат Истина;
	                                                 	
КонецФункции

// Процедура выполняет фиксацию произведенной замены исполнителей в точке 
// маршрута бизнес-процесса
// Параметры:
//	ТочкаКБП - маршрутная точка
//	ИсходныйИсполнитель - исходный исполнитель
//	НовыйИсполнитель - новый исполнитель
Процедура ЗафиксироватьЗаменуИсполнителяПереадресциейВТочке(ТочкаКБП, ИсходныйИсполнитель, НовыйИсполнитель) Экспорт
	
	//зафиксируем в регистре для последующего использования данной точке
	РегИсполнители=РегистрыСведений.КП_ЗаменыИсполнителейВТочекПроцесса.СоздатьНаборЗаписей();
	РегИсполнители.Отбор.ТочкаКБП.Установить(ТочкаКБП);
	РегИсполнители.Отбор.ИсходныйИсполнитель.Установить(ИсходныйИсполнитель);
	РегИсполнители.Прочитать();
	
	КоличествоЗаместителей=РегИсполнители.Количество();
	
	Если КоличествоЗаместителей>0 Тогда
		ЗаписьИсполнителя=РегИсполнители[КоличествоЗаместителей-1];
	Иначе
		//создадим новую запись
		ЗаписьИсполнителя=РегИсполнители.Добавить();
	КонецЕсли;
	
	ЗаписьИсполнителя.ТочкаКБП=ТочкаКБП;
	ЗаписьИсполнителя.БизнесПроцесс=ТочкаКБП.ВладелецТочки;
	ЗаписьИсполнителя.ИсходныйИсполнитель=ИсходныйИсполнитель;
	ЗаписьИсполнителя.ДействующийИсполнитель=НовыйИсполнитель;
	
	Попытка
		РегИсполнители.Записать(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Функция возвращает действующего исполнителя переадресации в точке
// Параметры:
//	ТочкаКБП - маршрутная точка
//	ИсходныйИсполнитель - исходный исполнитель
//	ИсполнительВЗадаче - исполнитель, указанный в задаче
// Возвращаемое значение: Ссылка на исполнителя
Функция ПолучитьДействующегоИсполнителяПереадресацииВТочке(ТочкаКБП, ИсходныйИсполнитель, ИсполнительВЗадаче=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИсполнительВЗадаче) Тогда
		//зафиксируем исполнителя из задачи, что бы избежать зацикливания
		//при рекурсивной обработе возможных переадресаций
		ИсполнительВЗадаче=ИсходныйИсполнитель;
	КонецЕсли;
	
	//зафиксируем в регистре для последующего использования данной точке
	РегИсполнители=РегистрыСведений.КП_ЗаменыИсполнителейВТочекПроцесса.СоздатьНаборЗаписей();
	РегИсполнители.Отбор.ТочкаКБП.Установить(ТочкаКБП);
	РегИсполнители.Отбор.ИсходныйИсполнитель.Установить(ИсходныйИсполнитель);
	РегИсполнители.Прочитать();
	
	КоличествоЗаместителей=РегИсполнители.Количество();
	
	Если КоличествоЗаместителей=0 Тогда
		//заместителей нет, вернем пустую строку
		Возврат Справочники.Пользователи.ПустаяСсылка();
	Иначе
		//заместитель есть
		НовыйИсполнитель=РегИсполнители[КоличествоЗаместителей-1].ДействующийИсполнитель;
	КонецЕсли;
	
	Если НовыйИсполнитель=ИсполнительВЗадаче Тогда
		//вернулись к первому исполнителю
		Возврат НовыйИсполнитель;
	КонецЕсли;
	
	//теперь проверим есть ли у найденного заместителя своя переадресация
	ЗаместительНовогоИсполнителя=ПолучитьДействующегоИсполнителяПереадресацииВТочке(ТочкаКБП, НовыйИсполнитель, ИсполнительВЗадаче);
	
	Если ЗначениеЗаполнено(ЗаместительНовогоИсполнителя) Тогда 
		Возврат ЗаместительНовогоИсполнителя;
	Иначе
		//заместитель не переадресовывал 
		Возврат НовыйИсполнитель;
	КонецЕсли;
	
КонецФункции

// Проверяет, находится ли в ячейке отчета ссылка на задачу и в параметре
// ЗначениеРасшифровки возвращает значение расшифровки.
// Параметры:
//	Расшифровка - Расшифровка
//	ДанныеРасшифровкиОтчета - Данные расшифровки отчета
//	ЗначениеРасшифровки - значение расшифровки
// Возвращаемое значение: Булево
Функция ЭтоЗадачаИсполнителю(Знач Расшифровка, Знач ДанныеРасшифровкиОтчета, ЗначениеРасшифровки) Экспорт
	
	ДанныеРасшифровкиОбъект = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиОтчета);
	ЗначениеРасшифровки = ДанныеРасшифровкиОбъект.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	Возврат ТипЗнч(ЗначениеРасшифровки) = Тип("ЗадачаСсылка.КП_Задача");
	
КонецФункции

// Получить структуру с описанием формы выполнения задачи.
//
// Параметры
//  ЗадачаСсылка  – ЗадачаСсылка.КП_Задача – задача
//
// Возвращаемое значение:
//   Структура   – структуру с описанием формы выполнения задачи.
Функция ПолучитьФормуВыполненияЗадачи(Знач ЗадачаСсылка) Экспорт
	
	//Если ТипЗнч(ЗадачаСсылка) <> Тип("ЗадачаСсылка.КП_Задача") Тогда
	//	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	//	  НСтр("ru='Неправильный тип параметра ЗадачаСсылка (передан: %1; ожидается: %2)';en='Invalid parameter type ЗадачаСсылка (transmitted:%1, expected:%2)'"),
	//	  ТипЗнч(ЗадачаСсылка), "ЗадачаСсылка.КП_Задача");
	//	
	//	ВызватьИсключение ТекстСообщения;
	//	
	//КонецЕсли;
	//
	//Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, "БизнесПроцесс,ТочкаМаршрута");
	//Если Реквизиты.БизнесПроцесс = Неопределено ИЛИ Реквизиты.БизнесПроцесс.Пустая() Тогда
	//	Возврат Новый Структура();
	//КонецЕсли;
	//
	//ТипБизнесПроцесса = Метаданные.НайтиПоТипу(ТипЗнч(Реквизиты.БизнесПроцесс));
	//ПараметрыФормы = БизнесПроцессы[ТипБизнесПроцесса.Имя].ФормаВыполненияЗадачи(ЗадачаСсылка,
	//	Реквизиты.ТочкаМаршрута);
	//Возврат ПараметрыФормы;
	
КонецФункции

// Функция возвращает количество невыполненных задач пользователя
// Параметры:
//	Пользователь - ссылка на пользователя
//	Фильтр - строка фильтра
// Возвращаемое значение: Число задач
Функция ПолучитьКоличествоНевыполненныхЗадач(Пользователь, Фильтр="") Экспорт
	Запрос=Новый Запрос;
	
	ПустаяДата=Дата("00010101");
	ТекДата=ТекущаяДата();
	Если Фильтр="Новые" Тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(КП_Задача.Ссылка) КАК Количество
		|ИЗ
		|	Задача.КП_Задача КАК КП_Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ПараметрыЗадач.СрезПоследних(&ТекущаяДата, ПараметрЗадачи = &ПараметрВыполнениеПроцент) КАК ПараметрВыполнениеПроцентСрезПоследних
		|		ПО (ПараметрВыполнениеПроцентСрезПоследних.Задача = КП_Задача.Ссылка)
		|ГДЕ
		|	КП_Задача.Исполнитель = &Пользователь
		|	И (ПараметрВыполнениеПроцентСрезПоследних.ЗначениеПараметра = 0 ИЛИ (ПараметрВыполнениеПроцентСрезПоследних.ЗначениеПараметра ЕСТЬ NULL))
		|	И КП_Задача.Выполнена = ЛОЖЬ
		|	И КП_Задача.ПометкаУдаления = ЛОЖЬ
		|	И КП_Задача.Автор ЕСТЬ НЕ NULL 
		|	И (КП_Задача.ДатаВыполненияФакт ЕСТЬ NULL
		|			ИЛИ КП_Задача.ДатаВыполненияФакт = &ПустаяДата)";
		Запрос.УстановитьПараметр("ПустаяДата", ПустаяДата);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);		
		Запрос.УстановитьПараметр("ПараметрВыполнениеПроцент", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ВыполнениеПроцент);
		
	ИначеЕсли Фильтр="ВРаботе" Тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(КП_Задача.Ссылка) КАК Количество
		|ИЗ
		|	Задача.КП_Задача КАК КП_Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ПараметрыЗадач.СрезПоследних(&ТекущаяДата, ПараметрЗадачи = &ПараметрВыполнениеПроцент) КАК ПараметрВыполнениеПроцентСрезПоследних
		|		ПО (ПараметрВыполнениеПроцентСрезПоследних.Задача = КП_Задача.Ссылка)
		|ГДЕ
		|	КП_Задача.Исполнитель = &Пользователь
		|	И ПараметрВыполнениеПроцентСрезПоследних.ЗначениеПараметра > 0
		|	И КП_Задача.Выполнена = ЛОЖЬ
		|	И КП_Задача.ПометкаУдаления = ЛОЖЬ
		|	И КП_Задача.Автор ЕСТЬ НЕ NULL 
		|	И (КП_Задача.ДатаВыполненияФакт ЕСТЬ NULL
		|			ИЛИ КП_Задача.ДатаВыполненияФакт = &ПустаяДата)";
		Запрос.УстановитьПараметр("ПустаяДата", ПустаяДата);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);		
		Запрос.УстановитьПараметр("ПараметрВыполнениеПроцент", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ВыполнениеПроцент);
		
	Иначе
		//все задачи
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
                |	КОЛИЧЕСТВО(КП_Задача.Ссылка) КАК Количество
                |ИЗ
                |	Задача.КП_Задача КАК КП_Задача
                |ГДЕ
                |	КП_Задача.Выполнена = Ложь
                |	И КП_Задача.Исполнитель = &Пользователь";

	КонецЕсли;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);	
	Запрос.Текст=ТекстЗапроса;
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда		
		Возврат Выборка.Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Функция возвращает список задач пользователя
// Параметры:
//	Пользователь - ссылка на пользователя
//	Фильтр - строка фильтра
// Возвращаемое значение: Список задач
Функция ПолучитьСписокЗадачПользователя(Пользователь, Фильтр="") Экспорт
	
	Список=Новый СписокЗначений;
	Запрос=Новый Запрос;
	
	ПустаяДата=Дата("00010101");
	ТекДата=ТекущаяДата();
	Если Фильтр="Новые" Тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КП_Задача.Ссылка КАК Задача
		|ИЗ
		|	Задача.КП_Задача КАК КП_Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ПараметрыЗадач.СрезПоследних(&ТекущаяДата, ПараметрЗадачи = &ПараметрВыполнениеПроцент) КАК ПараметрВыполнениеПроцентСрезПоследних
		|		ПО (ПараметрВыполнениеПроцентСрезПоследних.Задача = КП_Задача.Ссылка)
		|ГДЕ
		|	КП_Задача.Исполнитель = &Пользователь
		|	И (ПараметрВыполнениеПроцентСрезПоследних.ЗначениеПараметра = 0 ИЛИ (ПараметрВыполнениеПроцентСрезПоследних.ЗначениеПараметра ЕСТЬ NULL))
		|	И КП_Задача.Выполнена = ЛОЖЬ
		|	И КП_Задача.ПометкаУдаления = ЛОЖЬ
		|	И КП_Задача.Автор ЕСТЬ НЕ NULL 
		|	И (КП_Задача.ДатаВыполненияФакт ЕСТЬ NULL
		|			ИЛИ КП_Задача.ДатаВыполненияФакт = &ПустаяДата)";
		Запрос.УстановитьПараметр("ПустаяДата", ПустаяДата);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);		
		Запрос.УстановитьПараметр("ПараметрВыполнениеПроцент", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ВыполнениеПроцент);
		
	ИначеЕсли Фильтр="ВРаботе" Тогда
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КП_Задача.Ссылка КАК Задача
		|ИЗ
		|	Задача.КП_Задача КАК КП_Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КП_ПараметрыЗадач.СрезПоследних(&ТекущаяДата, ПараметрЗадачи = &ПараметрВыполнениеПроцент) КАК ПараметрВыполнениеПроцентСрезПоследних
		|		ПО (ПараметрВыполнениеПроцентСрезПоследних.Задача = КП_Задача.Ссылка)
		|ГДЕ
		|	КП_Задача.Исполнитель = &Пользователь
		|	И ПараметрВыполнениеПроцентСрезПоследних.ЗначениеПараметра > 0
		|	И КП_Задача.Выполнена = ЛОЖЬ
		|	И КП_Задача.ПометкаУдаления = ЛОЖЬ
		|	И КП_Задача.Автор ЕСТЬ НЕ NULL 
		|	И (КП_Задача.ДатаВыполненияФакт ЕСТЬ NULL
		|			ИЛИ КП_Задача.ДатаВыполненияФакт = &ПустаяДата)";
		Запрос.УстановитьПараметр("ПустаяДата", ПустаяДата);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);		
		Запрос.УстановитьПараметр("ПараметрВыполнениеПроцент", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ВыполнениеПроцент);
		
	Иначе
		//все задачи
		ТекстЗапроса="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
                |	КП_Задача.Ссылка КАК Задача
                |ИЗ
                |	Задача.КП_Задача КАК КП_Задача
                |ГДЕ
                |	КП_Задача.Выполнена = Ложь
				|	И КП_Задача.ПометкаУдаления = ЛОЖЬ      
                |	И КП_Задача.Исполнитель = &Пользователь";

	КонецЕсли;
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);	
	Запрос.Текст=ТекстЗапроса;
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		Задача=Выборка.Задача.Ссылка;
		Если Список.НайтиПоЗначению(Задача)=Неопределено Тогда
			Список.Добавить(Задача);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции

// Процедура очищает все напоминания по задаче
// Параметры:
//	СсылкаНаЗадачу - ссылка на задачу
Процедура ОчиститьНапоминанияОЗадаче(СсылкаНаЗадачу) Экспорт
	//удалим все напоминания о задаче, т.к. она уже выполнена
	РегСведений=РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
	РегСведений.Отбор.Источник.Установить(СсылкаНаЗадачу);
	РегСведений.Прочитать();
	РегСведений.Очистить();
	Попытка
		РегСведений.Записать(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьПоложениеВПанели(СсылкаНаЗадачу, Пользователь, ИмяПанели) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегОбъектыКалендаря=РегистрыСведений.КП_ОбъектыПанели.СоздатьНаборЗаписей();
	РегОбъектыКалендаря.Отбор.ОбъектПанели.Установить(СсылкаНаЗадачу);	
	РегОбъектыКалендаря.Отбор.Пользователь.Установить(Пользователь);	
	РегОбъектыКалендаря.Отбор.ИмяПанели.Установить(ИмяПанели);
	РегОбъектыКалендаря.Прочитать();
		
	КоличествоПараметров=РегОбъектыКалендаря.Количество();
		
	Если КоличествоПараметров=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запись=РегОбъектыКалендаря[0];	
	Результат=Новый Структура("ДатаНачала, ДатаОкончания", Запись.ДатаНачала, Запись.ДатаОкончания);	
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьПоложениеВПанели(СсылкаНаЗадачу, Пользователь, ДатаНачала, ДатаОкончания, ИмяПанели) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РегОбъектыКалендаря=РегистрыСведений.КП_ОбъектыПанели.СоздатьНаборЗаписей();
	РегОбъектыКалендаря.Отбор.ОбъектПанели.Установить(СсылкаНаЗадачу);
	РегОбъектыКалендаря.Отбор.Пользователь.Установить(Пользователь);
	РегОбъектыКалендаря.Отбор.ИмяПанели.Установить(ИмяПанели);
	
	РегОбъектыКалендаря.Прочитать();
		
	КоличествоПараметров=РегОбъектыКалендаря.Количество();
		
	Если КоличествоПараметров>0 Тогда
		ЗаписьКалендаря=РегОбъектыКалендаря[0];
	Иначе
		ЗаписьКалендаря=РегОбъектыКалендаря.Добавить();
		ЗаписьКалендаря.ОбъектПанели=СсылкаНаЗадачу;
		ЗаписьКалендаря.Пользователь=Пользователь;
		ЗаписьКалендаря.ИмяПанели=ИмяПанели;
	КонецЕсли;

	ЗаписьКалендаря.ДатаНачала=ДатаНачала;	
	ЗаписьКалендаря.ДатаОкончания=ДатаОкончания;	
	
	Попытка
		РегОбъектыКалендаря.Записать(Истина);		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;		
	КонецПопытки;
	
КонецФункции

#КонецОбласти
