#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//заполним реквизиты формы
	БизнесПроцесс=Объект.БизнесПроцесс;
	ВидПроцесса=БизнесПроцесс.ВидПроцесса;
	ТекущийПользователь=Пользователи.ТекущийПользователь();

	ПрочитатьНастройкиСервером();
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Задача не может быть создана интерактивно. Воспользуйтесь бизнес-процессами.';en='The task can not be created interactively. Use business process.'"));
		Отказ=Истина;
		Возврат;
		
	Иначе
		Если Объект.ТочкаМаршрута=БизнесПроцессы.КП_БизнесПроцесс.ТочкиМаршрута.ВыполнениеКорпоративногоПроцесса Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Это системная вспомогательная задача. Открытие не предусмотрено.';en='This is a system of auxiliary tasks. Opening is provided.'"));
			Отказ=Истина;
			Возврат;
		КонецЕсли;

		ТочкаКБП=Объект.ТочкаКБП;
		
		ПрочитатьПараметрыЗадачи();
		
		ОбновитьСписокСсылокПроцесса();
		
	КонецЕсли;
	
	СписокЗадачИсполнителей=ПолучитьСписокЗадачИсполнителей();
	
	Если СписокЗадачИсполнителей.Количество()=1 Тогда
		//для одного пользователя скроем лишние элементы формы
		Элементы.ГруппаИтоговыйРезультат.Видимость=Ложь;
		
	КонецЕсли;
	
	ШрифтПользователя=КП_ОбщееСервер.ПолучитьШрифтПользователя();
	
	СписокАктульныхРецензий=ПолучитьСписокРецензийИсполнителей();
	
	ЗаполнитьСписокВыбораИсполнителей();
	
	ПрочитатьДанныеИсполнителя();
	
	УстановитьЗаголовок();
	
	КоличествоСсылокНаОбъекты=КП_Процессы.ПолучитьКоличествоСсылокБизнесПроцесса(БизнесПроцесс);	
	
	УстановитьОформлениеЭлементов();
	
	ЗаполнитьРеквизитыПроцесса();
	
	УстановитьДоступностьЭлементов();
	
	УстановитьОтображениеРезультатаКонтроля();
	
	ДатаВремяОткрытияФормы=ТекущаяДата();
	
	Элементы.ТекстЗаданияФорматированный.Шрифт=ШрифтПользователя;
	Элементы.ИсполнительРезультатТекстФорматированный.Шрифт=ШрифтПользователя;

	БылаНеВыполненной=НЕ Объект.Выполнена;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СокрЛП(Объект.ИднИсполнителя)="" Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("Оповещение_ПриОткрытииЗавершение", ЭтотОбъект), 
			НСтр("ru='В задаче ""';")+СокрЛП(Объект.Наименование)+НСтр("ru='"" не указан идентификатор контролера. Возможно он не был сформирован при создании бизнес-процесса.';"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
	Элементы.ИсполнительПредыдущий.Заголовок=" ← ";
	Элементы.ИсполнительСледующий.Заголовок=" → ";
	#Иначе
	Элементы.ИсполнительПредыдущий.Заголовок="<-";
	Элементы.ИсполнительСледующий.Заголовок="->";
	
	#КонецЕсли

	УстановитьИтоговыйРезультатПоИсполнителям();
	
	УстановитьОформлениеЗаголовка();
	
	Оповестить("КП_Задача", "Открыта", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	СохранитьПараметрыЗадачи();
	
	СохранитьРеквизитыЗадачи();
	
	ОбновитьСписокСсылокПроцесса();
	
	КП_ЗадачиПроцессов.ВыполнитьОбработчикПослеЗаписи(Объект.Ссылка);
	
		
	Если НЕ ЗначениеЗаполнено(ДатаНачалаВыполнения) И НЕ Параметры.Ключ.Пустая() Тогда
		//первая запись новой задачи
		ДатаНачалаВыполнения=ДатаВремяОткрытияФормы;
		СтруктураПараметровЗадачи=Новый Структура("ДатаНачалаВыполнения", ДатаНачалаВыполнения);
		КП_ЗадачиПроцессов.СохранитьСтруктуруПараметровЗадачи(СтруктураПараметровЗадачи, Объект.Ссылка);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПредварительнаяЗапись Тогда
		Возврат;
	КонецЕсли;
	
	//сохраним открытую рецензию
	Если НЕ ЗаписатьРецензиюВСписок() Тогда
		Отказ=Истина;
		Возврат;
		
	КонецЕсли;
	
	//запишем рецензии в базу данных
	Если НЕ ЗаписатьРезультатыКонтроляИсполнителей() Тогда
		Отказ=Истина;
		Модифицированность=Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектыНажатие(Элемент)
	
	Если КоличествоСсылокНаОбъекты=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В списке нет объектов.';en='The list contains no items.'"));
		Возврат;
		
	ИначеЕсли КоличествоСсылокНаОбъекты=1 Тогда
		//откроем документ
		СписокДокументов=КП_Процессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);
		Если СписокДокументов.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В списке нет объектов.';en='The list contains no items.'"));
			Возврат;
						
		Иначе
			ПервыйДокумент=СписокДокументов[0].Значение;
			
			Если КП_ОбщееСерверПС.ЭтоФайл(ПервыйДокумент) Тогда
				РаботаСФайламиКлиент.ОткрытьФайл(КП_ОбщееСервер.ПолучитьДанныеФайлаДляОткрытия(ПервыйДокумент, Неопределено, УникальныйИдентификатор)); 
					
			Иначе
				ПоказатьЗначение(Неопределено, ПервыйДокумент);
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Тип объекта не определен.';en='Object type is undefined.'"));
		
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		//количество больше единицы
		ФлагСписокДокументовРаскрыт=НЕ ФлагСписокДокументовРаскрыт;
		Элементы.ТаблицаСсылокПроцесса.Видимость=ФлагСписокДокументовРаскрыт;
		
	КонецЕсли;
	
	ДекорацияОбъектыНажатиеФрагмент();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ТекстЗаданияФорматированный=ТекущийОбъект.ХранилищеТекстаЗадания.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольРезультатыПриИзменении(Элемент)
	
	УстановитьОтображениеРезультатаКонтроля();
	
	КонтрольРезультаты=Объект.КонтрольРезультаты;
	Если КонтрольРезультаты=0 Тогда
		ВыполнениеПроцент=0;
		Если ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
			Объект.ДатаВыполненияФакт=Неопределено;
		КонецЕсли;
		
	Иначе
		ВыполнениеПроцент=100;
		Если НЕ ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
			Объект.ДатаВыполненияФакт=ТекущаяДата();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительРезультатЧислоПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительРезультатДатаПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительРезультатДаНетПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительРезультатЛичнаяВстречаПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительРезультатТелефонныйЗвонокПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьПараметрыЗадачи()
	
	СтруктураПараметровЗадачи=КП_ЗадачиПроцессов.ПолучитьСтруктуруПараметровЗадачи(Объект.Ссылка);
	
	СтруктураПараметровЗадачи.Свойство("ВыполнениеПроцент", ВыполнениеПроцент);
	СтруктураПараметровЗадачи.Свойство("ДатаНачалаВыполнения", ДатаНачалаВыполнения);
    	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыЗадачи()
	Если НЕ ЗначениеЗаполнено(ДатаНачалаВыполнения) Тогда
		ДатаНачалаВыполнения=ДатаВремяОткрытияФормы;
	КонецЕсли;
	
	СтруктураПараметровЗадачи=Новый Структура;
	СтруктураПараметровЗадачи.Вставить("ВыполнениеПроцент", ВыполнениеПроцент);
	СтруктураПараметровЗадачи.Вставить("ДатаНачалаВыполнения", ДатаНачалаВыполнения);
	
	КП_ЗадачиПроцессов.СохранитьСтруктуруПараметровЗадачи(СтруктураПараметровЗадачи, Объект.Ссылка);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	Если Объект.КонтрольРезультаты=0 Тогда
		СписокКнопокВопроса=Новый СписокЗначений;
		СписокКнопокВопроса.Добавить(КодВозвратаДиалога.Да, "Да, принят");
		СписокКнопокВопроса.Добавить(КодВозвратаДиалога.Нет);
		СписокКнопокВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ВыполнитьЗадачуВопросОПринятииРезультата", ЭтотОбъект), НСтр("ru='Результат исполнителей принят?';en='Do you want to accept the result of execution?'"), 
			СписокКнопокВопроса, 60, КодВозвратаДиалога.Отмена, КП_ОбщееКлиент.ЗаголовокДиалога());
    	
	Иначе
		СписокКнопокВопроса=Новый СписокЗначений;
		
		Если Объект.КонтрольРезультаты=1 Тогда		
			СтрокаРезультата=НСтр("ru='принятие результата'; en='result approvment';"); 
			СписокКнопокВопроса.Добавить(КодВозвратаДиалога.Да, "Да, принять");
		Иначе
			СтрокаРезультата=НСтр("ru='отклонение результата'; en='result rejection';");
			СписокКнопокВопроса.Добавить(КодВозвратаДиалога.Да, "Да, отклонить");
		КонецЕсли;		
		СписокКнопокВопроса.Добавить(КодВозвратаДиалога.Нет, "Отмена");
			
		СтрокаРезультата=?(Объект.КонтрольРезультаты=1, НСтр("ru='принятие результата'; en='result approvment';"), НСтр("ru='отклонение результата'; en='result rejection';"));
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ВыполнитьЗадачуЗавершение", ЭтотОбъект), НСтр("ru='Подтвердить '; en='Do you want to confirm ';")+СтрокаРезультата+НСтр("?"), 
			СписокКнопокВопроса, 60, КодВозвратаДиалога.Нет, КП_ОбщееКлиент.ЗаголовокДиалога());
    
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ВыполнитьЗадачуВопросОПринятииРезультата(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Отмена Тогда
        Возврат;
        
    ИначеЕсли РезультатВопроса=КодВозвратаДиалога.Да Тогда
        Объект.КонтрольРезультаты=1;
        
	Иначе
		//нет
        Объект.КонтрольРезультаты=2;
        
    КонецЕсли;
    
    ВыполнитьЗадачуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ВыполнитьЗадачуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    
    ВыполнитьЗадачуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуФрагмент()
	
	СтрокаНеобработанныхПользователей="";
	
	КоличествоНеобработанныхИсполнителей=0;
	Для Каждого ЭлементСписка Из СписокЗадачИсполнителей Цикл
		ЗадачаСписка=ЭлементСписка.Значение;
		
		Если СписокОбработанныхИсполнителей.НайтиПоЗначению(ЗадачаСписка)=Неопределено Тогда
			НеобработанныйИсполнитель=ПолучитьИсполнителяЗадачи(ЗадачаСписка);
			
			КоличествоНеобработанныхИсполнителей=КоличествоНеобработанныхИсполнителей+1;
			Если КоличествоНеобработанныхИсполнителей>3 Тогда
				СтрокаНеобработанныхПользователей=СтрокаНеобработанныхПользователей+" и другие";
				Прервать;
				
			КонецЕсли;
			
			СтрокаНеобработанныхПользователей=СтрокаНеобработанныхПользователей+?(ПустаяСтрока(СтрокаНеобработанныхПользователей), "", ", ")+КП_ОбщееСервер.ПадежКраткоеФИО(СокрЛП(НеобработанныйИсполнитель), 1);			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоНеобработанныхИсполнителей=0 Тогда
		//все исполнители обработаны
		ВыполнитьОбработкуРезультатов();
		Возврат;
		
	КонецЕсли;
	
	//есть необработанные исполнители
	
	Если Объект.КонтрольРезультаты=1 Тогда
		РезультатыПриняты=Истина;
		СтрокаВопроса=НСтр("ru='Принять их результаты автоматически?';en='Accept the results automatically?'");
	ИначеЕсли Объект.КонтрольРезультаты=2 Тогда
		РезультатыПриняты=Ложь;
		СтрокаВопроса=НСтр("ru='Отклонить их результаты автоматически?';en='Reject the results automatically?'");
	Иначе
		Возврат;
	КонецЕсли;
	
	
	Если КоличествоНеобработанныхИсполнителей=1 Тогда
		ТекстНачалаВопроса=НСтр("ru='Не был обработан исполнитель ';")
	Иначе
		ТекстНачалаВопроса=НСтр("ru='Не были обработаны исполнители: ';");
	КонецЕсли;
	
	СтрокаВопросаОбОтсутствииОбработкиИсполнителей=ТекстНачалаВопроса+СтрокаНеобработанныхПользователей+"."+Символы.ПС+Символы.ПС+СтрокаВопроса;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ОбработкаРезультатовИсполнителейРезультатВопроса", ЭтотОбъект), СтрокаВопросаОбОтсутствииОбработкиИсполнителей, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, КП_ОбщееКлиент.ЗаголовокДиалога());
    
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗадачуСервером()
	
	СтруктураОбработки=ОбработкаСобытияПередВыполнением();
	Если НЕ СтруктураОбработки.ЗавершеноУспешно Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка в настройке события ""ПередВыполнением"" задачи.';en='Error in setting up the event ""PeredVypolneniem"" task.'"));
		Возврат Ложь;
		
	КонецЕсли;
		
	ВыполнениеПроцент=100;
	
	Если Объект.КонтрольРезультаты=0 Тогда
		Объект.КонтрольРезультаты=1;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
		Объект.ДатаВыполненияФакт=ТекущаяДата();
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ДанныеЗадачиСохранены=Ложь;
		
	Иначе
		//сохраним данные перед записью и вызовом подписок на события
		СохранитьПараметрыЗадачи();
		ДанныеЗадачиСохранены=Истина;
		
	КонецЕсли;
	
	
	Если Модифицированность Тогда
		Попытка
			ПредварительнаяЗапись=Истина;
			Записать();
			ПредварительнаяЗапись=Ложь;
			
		Исключение
			ПредварительнаяЗапись=Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ ДанныеЗадачиСохранены Тогда
		СохранитьПараметрыЗадачи();
	КонецЕсли;
	
	СтруктураРезультатаФункции=КП_ЗадачиПроцессов.ВыполнитьОбработчикПослеВыполнения(Объект);
	
	Если НЕ СтруктураРезультатаФункции.ЗавершеноУспешно Тогда
		//если программная функция не выполнена, то и задачу считаем не выполненной
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Отметка выполнения не установлена из-за ошибки выполнения события ""ПослеВыполнения""';en='The mark is not installed error performance events ""PosleVypolneniya""'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	ЗафиксироватьРеквизитыПроцессаВЗадаче();
	ЗафиксироватьСписокЗадачКонтроля();
		
	Объект.Выполнена=Истина;
	
	Попытка
		Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	ЗаписаноУспешно=ЗаписатьИтоговыйРезультатКонтроля();
	
	Если НЕ ЗаписаноУспешно Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ Объект.ПометкаУдаления Тогда
		КП_Процессы.ОбработатьМаршрутКБП(Объект.БизнесПроцесс, Объект.Ссылка, СтруктураРезультатаФункции);
		
	КонецЕсли;
	
	//задача выполнена успешно
	Возврат Истина;
	
КонецФункции

Функция ОбработкаСобытияПередВыполнением()
	
	//выполним текст функции ПередВыполнением, в случае, если переменная Отказ будет равна Истина, отменим выполнение задачи исполнителем
	
	СтруктураРезультатаВыполнения=Новый Структура("ЗавершеноУспешно, Отказ");
	
	//получим параметры процесса
	ПараметрыПроцесса=КП_Процессы.ПолучитьСтруктуруПараметровКБП(БизнесПроцесс);
	
	//определим исполнителя
	ИсполнительЗадачи=Объект.Исполнитель;
	
	ИсходныйТекстФункции=ТочкаКБП.ДействиеТекстФункцииПередВыполнением; //обработчик ПередВыполнением
	ТекстФункции=КП_Процессы.СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции);
	
	Если НЕ ПустаяСтрока(ТекстФункции) Тогда
	
		//подготовим аргументы программной функции
		ОбрабатыватьСтруктуруПараметровПроцесса=Истина; 
		ОбрабатыватьСтруктуруПараметровЗадачи=Ложь;
		ОбрабатыватьСтруктуруРеквизитовПроцесса=Истина;
		ОбрабатыватьСтруктуруОтчетаИсполнителя=Ложь;
		
		СтуктураРезультата=КП_Процессы.ПодготовитьИВыполнитьПрограммнуюФункцию(ТочкаКБП, ТекстФункции, ИсполнительЗадачи, БизнесПроцесс, Объект, 
				ОбрабатыватьСтруктуруРеквизитовПроцесса,
				ОбрабатыватьСтруктуруПараметровПроцесса,
				ОбрабатыватьСтруктуруПараметровЗадачи,
				ОбрабатыватьСтруктуруОтчетаИсполнителя);
				
		Если СтуктураРезультата=Неопределено Тогда
			СтруктураРезультатаВыполнения.ЗавершеноУспешно=Ложь;
			СтруктураРезультатаВыполнения.Отказ=Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки ""ПередВыполнением"" в точке ""';en='Runtime Error handling ""PeredVypolneniem"" at ""'")+СокрЛП(ТочкаКБП)+"""."+ОписаниеОшибки());
			Возврат СтруктураРезультатаВыполнения;
			
		КонецЕсли;
		
		Если СтуктураРезультата.Свойство("Отказ") И СтуктураРезультата.Отказ Тогда
			СтруктураРезультатаВыполнения.ЗавершеноУспешно=Истина;
			СтруктураРезультатаВыполнения.Отказ=Истина;
			
			Возврат СтруктураРезультатаВыполнения;
						
		КонецЕсли;
		
	КонецЕсли;	
	
	СтруктураРезультатаВыполнения.ЗавершеноУспешно=Истина;
	СтруктураРезультатаВыполнения.Отказ=Ложь;
	
	Возврат СтруктураРезультатаВыполнения;
	
КонецФункции

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	Попытка
		Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	Модифицированность=Ложь;
	
	Состояние(НСтр("ru='Задача сохранена...';en='Task saved...'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ДекорацияОбъектыНажатиеЗавершение(ДополнительныеПараметры) Экспорт
    
    ПервыйДокумент = ДополнительныеПараметры.ПервыйДокумент;
    
    
    ДекорацияОбъектыНажатиеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектыНажатиеФрагмент()
    
    УстановитьОформлениеГруппыСсылок();

КонецПроцедуры

Процедура УстановитьОформлениеГруппыСсылок()
	
	Если КоличествоСсылокНаОбъекты=0 Тогда
		Элементы.ДекорацияОбъекты.Видимость=Ложь;
		
	Иначе
		
		Элементы.ДекорацияОбъекты.Видимость=Истина;
		СписокДокументов=КП_Процессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);

		Если КоличествоСсылокНаОбъекты=1 Тогда
			НаименованиеОбъекта=СписокДокументов[0].Представление;
			
			Если ПустаяСтрока(НаименованиеОбъекта) Тогда
				Элементы.ДекорацияОбъекты.Заголовок=НаименованиеСсылкиНаОбъект;
				
			Иначе
				Если СтрДлина(НаименованиеОбъекта)>100 Тогда
					НаименованиеОбъекта=Лев(НаименованиеОбъекта, 100-3)+"...";
				КонецЕсли;
				Элементы.ДекорацияОбъекты.Заголовок=НаименованиеОбъекта;
				
			КонецЕсли;
			
		Иначе
			
			Если ФлагСписокДокументовРаскрыт Тогда
				Элементы.ДекорацияОбъекты.Заголовок=НСтр("ru='Скрыть '; en='Hide ';")+НРег(НаименованиеСсылкиНаОбъект)+" ↑";
			Иначе
				Элементы.ДекорацияОбъекты.Заголовок=НаименованиеСсылкиНаОбъект+" ("+Формат(КоличествоСсылокНаОбъекты, "ЧЦ=10; ЧН=; ЧГ=")+" шт.) ↓";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОформлениеЭлементов()
	
	//определить наименования элементов формы по виду процесса
	УстановитьНаименованияПоВидуПроцесса();

	УстановитьОформлениеГруппыСсылок();
	
	//установим заголовок рамки Содержание
	
	Если Объект.ПометкаУдаления Тогда
		Элементы.ГруппаСодержание.Заголовок=НСтр("ru='Внимание! Задача отменена и помечена на удаление.'; en='Task canceled and marked for deletion.';");
		
	Иначе
		Если Объект.Выполнена Тогда
			Элементы.ГруппаСодержание.Заголовок=НСтр("ru='Задача выполнена'; en='Task completed';");
			
		ИначеЕсли ВыполнениеПроцент=0 Тогда
			Элементы.ГруппаСодержание.Заголовок=НСтр("ru='Новая задача'; en='New task';");
			
		Иначе
			Элементы.ГруппаСодержание.Заголовок=НСтр("ru='Задача в работе'; en='Task in proccess';");
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаВыполненияПлан) Тогда
		Элементы.ДекорацияДатаВыполненияНеУстановлена.Видимость=Ложь;
		Элементы.ДатаВыполненияПлан.Видимость=Истина;
		
	Иначе
		Элементы.ДатаВыполненияПлан.Видимость=Ложь;
		Элементы.ДекорацияДатаВыполненияНеУстановлена.Видимость=Истина;
		
	КонецЕсли;
	
	УстановитьОтображениеПараметровИсполнителя();
	УстановитьОтбражениеТекстаИсполнителя();
	
КонецПроцедуры

Процедура ОбновитьСписокСсылокПроцесса()
	ТаблицаСсылокПроцесса.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", БизнесПроцесс);
	
КонецПроцедуры

Процедура СохранитьРеквизитыЗадачи()
	
	СтруктураЗначенийРеквизитов=КП_Процессы.ПолучитьСтруктуруРеквизитовПроцесса(БизнесПроцесс);
	
	СтруктураИзмененныхРеквизитов=Новый Структура;
	
	//сохраним изменившиеся реквизиты
	
	Для Каждого ЭлементСписка Из СписокРеквизитовПроцесса Цикл
		Если ЭлементСписка.Пометка Тогда
			//реквизит только для чтения
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаВФорме=ЭлементСписка.Представление;
		ИмяРеквизита=СтрЗаменить(ИмяРеквизитаВФорме, "РеквизитПроцесса_", "");
		
		Попытка
			ЗначениеРеквизита=ЭтаФорма[ИмяРеквизитаВФорме];
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
		//получим текущее значение реквизита
		ТекущееЗначение=СтруктураЗначенийРеквизитов[ИмяРеквизита];
		Если ТекущееЗначение<>ЗначениеРеквизита Тогда
			СтруктураИзмененныхРеквизитов.Вставить(ИмяРеквизита, ЗначениеРеквизита);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураИзмененныхРеквизитов.Количество()>0 Тогда
		Примечание=СокрЛП(Объект.Ссылка);
		КП_Процессы.СохранитьСтруктуруРеквизитов(БизнесПроцесс, СтруктураИзмененныхРеквизитов, , Примечание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеПроцентПриИзменении(Элемент)
	
	Если ВыполнениеПроцент>100 Тогда
		ВыполнениеПроцент=100;
		Если НЕ ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
			Объект.ДатаВыполненияФакт=ТекущаяДата();
		
		КонецЕсли;
		
		Если Объект.КонтрольРезультаты=0 Тогда
			Объект.КонтрольРезультаты=1;
			
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
			Объект.ДатаВыполненияФакт=Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыполненияФактПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
		ВыполнениеПроцент=100;
		
	Иначе
		ВыполнениеПроцент=0;
		
	КонецЕсли;
	
	Если Объект.КонтрольРезультаты=0 Тогда
		Объект.КонтрольРезультаты=1;
		
	КонецЕсли;
	
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыполнениеПроцентНажатие(Элемент)
	
	//покажем список выбора
	СписокВыполнения=Новый СписокЗначений;
	СписокВыполнения.Добавить(25, " 25 %");
	СписокВыполнения.Добавить(50, " 50 %");
	СписокВыполнения.Добавить(75, " 75 %");
	СписокВыполнения.Добавить(100,"100 %");
		
	РезультатВыбора = Неопределено;

		
	СписокВыполнения.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("Оповещение_ДекорацияВыполнениеПроцентНажатиеЗавершение", ЭтотОбъект), "Выберите процент выполнения", СписокВыполнения[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ДекорацияВыполнениеПроцентНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора=ВыбранныйЭлемент;
    Если РезультатВыбора=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ВыполнениеПроцент=РезультатВыбора.Значение;
    
    Если ВыполнениеПроцент=100 Тогда
        Если НЕ ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
            Объект.ДатаВыполненияФакт=ТекущаяДата();
        КонецЕсли;
    Иначе
        Если ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
            Объект.ДатаВыполненияФакт=Неопределено;
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаписатьНастроенныеЦвета();

	Если НЕ ПредварительнаяЗапись Тогда
		УстановитьЗаголовок();
		ОповеститьОбИзменении(Объект.Ссылка);
		Оповестить("КП_Задача", "Записана", Объект.Ссылка);	
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовок()
	Если Параметры.Ключ.Пустая() Тогда
		ЭтаФорма.АвтоЗаголовок=Истина;
		
	Иначе
		ЭтаФорма.АвтоЗаголовок=Ложь;
		ЭтаФорма.Заголовок=СокрЛП(Объект.Наименование);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПроцесса()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Выполнена Тогда
		//заполним таблицу по зафиксированным данным
		ТаблицаРеквизитов=Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("РеквизитПроцесса");
		ТаблицаРеквизитов.Колонки.Добавить("ЗначениеРеквизита");
		ТаблицаРеквизитов.Колонки.Добавить("ТолькоПросмотр");
		ТаблицаРеквизитов.Колонки.Добавить("Обязательный");
		
		Для Каждого СтрокаТЧ Из Объект.ЗафиксированныеРеквизиты Цикл
			НоваяСтрока=ТаблицаРеквизитов.Добавить();
			НоваяСтрока.РеквизитПроцесса=СтрокаТЧ.РеквизитПроцесса;
			НоваяСтрока.ЗначениеРеквизита=СтрокаТЧ.ЗначениеРеквизита;
			НоваяСтрока.ТолькоПросмотр=Истина;
			НоваяСтрока.Обязательный=Ложь;
			
		КонецЦикла;
		
	Иначе
		//получим текущие значения
		ТаблицаРеквизитов=КП_ЗадачиПроцессов.ПолучитьТаблицуРеквизитовПроцессаВТочке(ТочкаКБП);	
		
	КонецЕсли;
	
	СписокРеквизитовПроцесса=Новый СписокЗначений;
	СписокОбязательныхРеквизитов=Новый СписокЗначений;
	
	//добавим реквизиты в структуру формы
	МассивДобавляемыхРеквизитов=Новый Массив;

	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		
		РеквизитПроцесса=СтрокаТаблицы.РеквизитПроцесса;
		ИмяРеквизита="РеквизитПроцесса_"+РеквизитПроцесса.ИмяРеквизитаДляФункций;	
		ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
		
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ЗначениеРеквизита=КП_Процессы.ПолучитьНачальноеЗначениеРеквизита(РеквизитПроцесса);
			
		КонецЕсли;

		Если Элементы.Найти(ИмяРеквизита)=Неопределено Тогда
			//реквизита еще нет
			
			НаименованиеРеквизита=РеквизитПроцесса.НаименованиеВФорме;
			
			ТипРеквизита=КП_Процессы.ПолучитьОписаниеТипаРеквизитаПроцесса(РеквизитПроцесса);
	
			Попытка
				НовыйРеквизитФормы=Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , НаименованиеРеквизита, Истина);
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизитФормы);

			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла; //по реквизитам процесса
	
	//добавим реквизиты в список реквизитов
	
	Попытка
		ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	//создадим элементы в форме задачи
	
	РазмещаемСлева=Истина;
	
	РазмещатьВДваСтолбца=ТочкаКБП.ДействиеРеквизитыРасполагатьВДваСтолбца;
	Если НЕ РазмещатьВДваСтолбца Тогда
		Элементы.ГруппаРеквизитыПраво.Видимость=Ложь;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		
		РеквизитПроцесса=СтрокаТаблицы.РеквизитПроцесса;
		ИмяРеквизита="РеквизитПроцесса_"+РеквизитПроцесса.ИмяРеквизитаДляФункций;	
		ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
		РеквизитТолькоПросмотр=СтрокаТаблицы.ТолькоПросмотр;

		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ЗначениеРеквизита=КП_Процессы.ПолучитьНачальноеЗначениеРеквизита(РеквизитПроцесса);
			
		КонецЕсли;
		
		//создадим новые элементы в форме задачи
		Если НЕ Элементы.Найти(ИмяРеквизита)=Неопределено Тогда
			//такой реквизит уже существует
			Продолжить;
			
		КонецЕсли;
		
		НаименованиеТипаРеквизита=КП_Процессы.ПолучитьНаименованиеТипаРеквизита(РеквизитПроцесса);
		
		Если РазмещаемСлева ИЛИ НЕ РазмещатьВДваСтолбца Тогда
			РодительскийЭлемент=Элементы.ГруппаРеквизитыЛево;
			
		Иначе
			РодительскийЭлемент = Элементы.ГруппаРеквизитыПраво;
			
		КонецЕсли;
		
		Элемент=Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), РодительскийЭлемент);
		
		Если РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Булево Тогда
			//флажок
			//Элемент.Вид=ВидПоляФормы.ПолеФлажка;
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			Элемент.ВыбиратьТип=Ложь;
			Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Право;
			
		Иначе	
			//поле ввода
			Элемент.Вид=ВидПоляФормы.ПолеВвода;
			Элемент.ВыбиратьТип=Ложь;
			
			Если РеквизитПроцесса.ТипРеквизита.РеквизитДлина>80
				И РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Строки 
			Тогда
				Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Верх;
				Элемент.МногострочныйРежим=Истина;
				
			Иначе
				Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;	
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент.ПутьКДанным=ИмяРеквизита; //привяжем в реквизиту
		Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;
		
		Элемент.ТолькоПросмотр=РеквизитТолькоПросмотр;
		
		СписокРеквизитовПроцесса.Добавить(РеквизитПроцесса, ИмяРеквизита, РеквизитТолькоПросмотр);
		
		//Если СтрокаТаблицы.Обязательный Тогда
		//	СписокОбработанныхИсполнителей.Добавить(РеквизитПроцесса, ИмяРеквизита);
		//КонецЕсли;
				
		//подключим обработки к полю формы
		//Если НаименованиеТипаРеквизита="СправочникСсылка.КП_СсылкиНаВнешниеОбъекты" Тогда
		//	//добавим обработку процедуры открытия для внешних объектов
		//	Элемент.УстановитьДействие("Открытие", "Подключаемый_ОткрытьВнешнююСсылкуДополнительногоРеквизита");
		//	Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_НачалоВыбораВнешнейСсылкиДополнительногоРеквизита");
			
		Если НаименованиеТипаРеквизита="СправочникСсылка.ЗначенияСвойствОбъектов" Тогда
			Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ОткрытьНачалоВыбора");
			
		КонецЕсли;
		
		//добвим обработчик ПриИзменении
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_РеквизитПриИзменении");
		
		Если РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Числа 
			ИЛИ РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Дата 
		Тогда
			Элемент.КнопкаРегулирования=Истина;
			Элемент.РастягиватьПоГоризонтали=Ложь;
			
		КонецЕсли;
			
		Если НаименованиеТипаРеквизита="Дата" Тогда
			Элемент.КнопкаВыбора=Истина;
			Элемент.РастягиватьПоГоризонтали=Ложь;
			
		КонецЕсли;
		
		Если РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Числа Тогда
			Элемент.Ширина=16;
			
		ИначеЕсли РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Дата Тогда
			Элемент.Ширина=16;

		КонецЕсли;
		
		//установим значение реквизиту
		ЭтаФорма[ИмяРеквизита]=ЗначениеРеквизита;
		
		РазмещаемСлева=НЕ РазмещаемСлева; //переключим на другую часть формы
		
	КонецЦикла; //по реквизитам процесса
	
КонецПроцедуры

// Процедура является динамически подключаемой и подключается к элементу 
// реквизита процесса на событие "ПриИзменении"
&НаКлиенте
Процедура Подключаемый_ПриИзменении(Элемент, СтандартнаяОбработка)
	
	Модифицированность=Истина;
	
КонецПроцедуры

//Процедура подключается к элементу реквизита процесса на событие "Открытие"
&НаКлиенте
Процедура Подключаемый_ОткрытьВнешнююСсылкуДополнительногоРеквизита(Элемент, СтандартнаяОбработка)	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ЗадачаВыполнена=Объект.Выполнена;
	
	ЭтоИсполнитель=ТекущийПользователь=Объект.Исполнитель;
	ЭтоКонтролер=(ТекущийПользователь=БизнесПроцесс.Контролер);
	ЭтоИнициатор=(ТекущийПользователь=БизнесПроцесс.Автор);
	
	ЭтоРольПолныеПрава=КП_ОбщееСерверПС.ЭтоРольПолныеПрава();
	КП_ОбщееСерверПС.ЭтоРольАдминистрированиеПроцессов();
	
	Если КП_ОбщееСервер.ПолучитьЗначениеКонстанты("КП_ИзменятьПлановыеДаты") Тогда
		Элементы.ДатаВыполненияПлан.ТолькоПросмотр=НЕ (ЭтоИнициатор 
			ИЛИ ЭтоРольПолныеПрава 
			ИЛИ КП_ОбщееСерверПС.ЭтоРольАдминистрированиеПроцессов()
			ИЛИ КП_ОбщееСерверПС.ЭтоРольАдминистрированиеЗадач());
	КонецЕсли;
	
	Если НЕ Константы.КП_ЗапретитьИнициаторамКБПВыполнятьЗадачиЗаИсполнителя.Получить() ИЛИ ЭтоРольПолныеПрава Тогда
		//инициатором разрешили выступать в качестве исполниетлей
		Если ЭтоИнициатор Тогда
			ЭтоИсполнитель=Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЭтоИсполнитель И КП_ОбщееСерверПС.ЭтоРольПолныеПрава() Тогда
		//разрешим работать как исполнитель
		ЭтоИсполнитель=Истина;
	КонецЕсли;

	
	Элементы.ВыполнениеПроцент.ТолькоПросмотр=ЗадачаВыполнена ИЛИ НЕ ЭтоИсполнитель;
	Элементы.ДатаВыполненияФакт.ТолькоПросмотр=ЗадачаВыполнена ИЛИ НЕ ЭтоИсполнитель;
	Элементы.ГруппаРеквизиты.ТолькоПросмотр=ЗадачаВыполнена ИЛИ НЕ ЭтоИсполнитель;
	
	Элементы.ФормаВыполнитьЗадачу.Доступность=ЭтоИсполнитель;
	Элементы.ФормаСохранитьИзменения.Доступность=ЭтоИсполнитель;
	
	Элементы.ДекорацияВыполнениеПроцент.Доступность=ЭтоИсполнитель И НЕ ЗадачаВыполнена;
	
	Если ЗадачаВыполнена Тогда
		Элементы.ФормаВыполнитьЗадачу.КнопкаПоУмолчанию=Ложь;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию=Истина;
		Элементы.ФормаВыполнитьЗадачу.Видимость=Ложь;
		Элементы.ФормаЗакрыть.Заголовок=НСтр("ru='   Закрыть     ';en='   Close     ';");
		Элементы.ФормаСохранитьИзменения.Видимость=Ложь;
		
	Иначе
		Элементы.ФормаВыполнитьЗадачу.Видимость=Истина;
		Элементы.ФормаВыполнитьЗадачу.КнопкаПоУмолчанию=Истина;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию=Ложь;
		Элементы.ФормаЗакрыть.Заголовок=НСтр("ru='Закрыть';en='Close';");
		Элементы.ФормаСохранитьИзменения.Видимость=Истина;
		
	КонецЕсли;
	
	Элементы.ГруппаИтоговыйРезультат.ТолькоПросмотр=ЗадачаВыполнена ИЛИ НЕ ЭтоИсполнитель;
	
	Элементы.ИсполнительКонтрольРезультатОдобрен.ТолькоПросмотр=ЗадачаВыполнена ИЛИ НЕ ЭтоИсполнитель;
	Элементы.ИсполнительКонтрольТекстРецензии.ТолькоПросмотр=ЗадачаВыполнена ИЛИ НЕ ЭтоИсполнитель;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовРезультата(ВидимостьЭлемента)
	
	Элементы.ИсполнительРезультатДаНет.Видимость=ВидимостьЭлемента;
	Элементы.ИсполнительРезультатДата.Видимость=ВидимостьЭлемента;
	Элементы.ИсполнительРезультатЧисло.Видимость=ВидимостьЭлемента;
	Элементы.ИсполнительРезультатТекстФорматированный.Видимость=ВидимостьЭлемента;
	Элементы.ИсполнительРезультатФайл.Видимость=ВидимостьЭлемента;
	Элементы.ИсполнительРезультатДокумент.Видимость=ВидимостьЭлемента;
	Элементы.ИсполнительРезультатЛичнаяВстреча.Видимость=ВидимостьЭлемента;
	Элементы.ИсполнительРезультатТелефонныйЗвонок.Видимость=ВидимостьЭлемента;
	Элементы.ИсполнительРезультатВыборКнопками.Видимость=ВидимостьЭлемента;
	Элементы.ДекорацияОтметкиВыполнения.Видимость=ВидимостьЭлемента;
	
КонецПроцедуры

Процедура ЗафиксироватьРеквизитыПроцессаВЗадаче()
	
	Объект.ЗафиксированныеРеквизиты.Очистить();
	
	//зафиксируем значения реквизитов на момент выполнения задачи
	Для Каждого ЭлементСписка Из СписокРеквизитовПроцесса Цикл
		РеквизитПроцесса=ЭлементСписка.Значение;
		ИмяРеквизита=ЭлементСписка.Представление;
		
		Попытка
			ЗначениеРеквизита=ЭтаФорма[ИмяРеквизита];
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
		НоваяСтрока=Объект.ЗафиксированныеРеквизиты.Добавить();
		НоваяСтрока.РеквизитПроцесса=РеквизитПроцесса;
		НоваяСтрока.ЗначениеРеквизита=ЗначениеРеквизита;
		
		ИмяВФорме=ЭлементСписка.Представление;
		НаименованиеВФорме=РеквизитПроцесса.НаименованиеВФорме;
		НоваяСтрока.НаименованиеВФорме=НаименованиеВФорме;

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗафиксироватьСписокЗадачКонтроля()
	
	Объект.ЗафиксированныеЗадачиКонтроля.Очистить();
	
	//зафиксируем значения реквизитов на момент выполнения задачи
	Для Каждого ЭлементСписка Из СписокЗадачИсполнителей Цикл
		ЗадачаИсполнителя=ЭлементСписка.Значение;
		
		НоваяСтрока=Объект.ЗафиксированныеЗадачиКонтроля.Добавить();
		НоваяСтрока.ЗадачаИсполнителя=ЗадачаИсполнителя;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНаименованияПоВидуПроцесса()
	
	//найдем точку-прототип в виде процесса
	ТочкаВидаКБП=ТочкаКБП.ТочкаОснование;
	ИспользоватьИностранныеНаименования=КП_ОбщееСервер.ИспользоватьИностранныеНаименованияВФормахПроцессов();

	Попытка
		СтруктураОтбора=Новый Структура("ЭлементФормы, ТипФормы");

		ТипФормы=1; //контролер
		
		СтруктураОтбора.ЭлементФормы="Кнопка ""Выполнить""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Элементы.ФормаВыполнитьЗадачу.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
			Элементы.ФормаВыполнитьЗадачу.Видимость=НайденныеСтроки[0].Видимость;
		КонецЕсли;
		
		СтруктураОтбора.ЭлементФормы="Поле ""Контролер""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Элементы.Исполнитель.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
			Элементы.Исполнитель.Видимость=НайденныеСтроки[0].Видимость;
		КонецЕсли;
		
		СтруктураОтбора.ЭлементФормы="Гиперссылка ""Объекты""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			НаименованиеСсылкиНаОбъект=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		КонецЕсли;	
		
		СтруктураОтбора.ЭлементФормы="Гиперссылка ""Список объектов""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			НаименованиеСпискаСсылокНаОбъекты=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьОтображениеРезультатаКонтроля()
	
	//установим цвет текста
	КонтрольРезультаты=Объект.КонтрольРезультаты;
	
	Если КонтрольРезультаты=0 Тогда
		Элементы.ДекорацияРезультатКонтроля.ЦветТекста=ЦветаСтиля.ЦветТекстаФормы;
		
	ИначеЕсли КонтрольРезультаты=1 Тогда	//результат принят
		Элементы.ДекорацияРезультатКонтроля.ЦветТекста=WebЦвета.Зеленый;
		
	ИначеЕсли КонтрольРезультаты=2 Тогда	//результат не принят
		Элементы.ДекорацияРезультатКонтроля.ЦветТекста=WebЦвета.Красный;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьИтоговыйРезультатКонтроля()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТочкаИсполненияКБП=ТочкаКБП.ДействиеКонтрольТочки;

	//запишем итоговый результат в регистр (с пустым изменрением Исполнитель)
	
	ПустойИсполнителель=Справочники.Пользователи.ПустаяСсылка();
	РегРецензии=РегистрыСведений.КП_РецензииКонтролеров.СоздатьНаборЗаписей();
	РегРецензии.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
	РегРецензии.Отбор.ТочкаКБП.Установить(ТочкаИсполненияКБП);
	РегРецензии.Отбор.Исполнитель.Установить(ПустойИсполнителель);
	РегРецензии.Отбор.Контролер.Установить(Объект.Исполнитель);
	
	РегРецензии.Прочитать();
	Если РегРецензии.Количество()=0 Тогда
		ЗаписьРецензии=РегРецензии.Добавить();
		ЗаписьРецензии.БизнесПроцесс=БизнесПроцесс;
		ЗаписьРецензии.ТочкаКБП=ТочкаИсполненияКБП;
		ЗаписьРецензии.Контролер=Объект.Исполнитель;
	Иначе
		ЗаписьРецензии=РегРецензии[0];
		
	КонецЕсли;
	
	ЗаписьРецензии.Период=ТекущаяДата();
	ЗаписьРецензии.Исполнитель=ПустойИсполнителель; //итоговый результат
	ЗаписьРецензии.ТекстРецензии="Итоговая рецензия по всей точке";
	ЗаписьРецензии.РезультатОдобрен=(Объект.КонтрольРезультаты=1);
	
	Попытка
		РегРецензии.Записать(Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Объект.КонтрольРезультаты=1 Тогда
		СтрокаРезультата="Результат принят.";
		
	ИначеЕсли Объект.КонтрольРезультаты=2 Тогда
		СтрокаРезультата="Результат отклонен.";
		
	Иначе
		СтрокаРезультата="<ошибка>";
		Возврат Ложь;
		
	КонецЕсли;
	
	КП_Процессы.ЗаписатьВЖурналПроцесса("Результат контроля точки """+СокрЛП(ТочкаИсполненияКБП)+""": "+СтрокаРезультата, БизнесПроцесс, ТочкаКБП);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияПараметрыИсполнителяНажатие(Элемент)
	
	ФлагПараметрыИсполнителяРаскрыты=НЕ ФлагПараметрыИсполнителяРаскрыты;
	ЗаписатьНастройкиСервером();
	
	УстановитьОтображениеПараметровИсполнителя();
	
КонецПроцедуры

Процедура УстановитьОтображениеПараметровИсполнителя()
	
	Элементы.ГруппаПараметрыИсполнителя.Видимость=ФлагПараметрыИсполнителяРаскрыты;
	
	Если ФлагПараметрыИсполнителяРаскрыты Тогда
		Элементы.ДекорацияПараметрыИсполнителя.Заголовок=НСтр("ru='Параметры ↑'; en='Parameters ↑';");
	
	Иначе
		Элементы.ДекорацияПараметрыИсполнителя.Заголовок=НСтр("ru='Параметры ↓'; en='Parameters ↓';");
		Элементы.ГруппаПараметрыИсполнителя.Видимость=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТаблицуИсполнителейИЗадачТочки(ТочкаКБП)
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос=Новый Запрос("ВЫБРАТЬ
						|	КП_Задача.Исполнитель,
	                    |	КП_Задача.Ссылка КАК Задача,
	                    |	КП_Задача.НомерПрохода
	                    |ИЗ
	                    |	Задача.КП_Задача КАК КП_Задача
	                    |ГДЕ
	                    |	КП_Задача.БизнесПроцесс = &БизнесПроцесс
	                    |	И КП_Задача.ТочкаКБП = &ТочкаКБП");
						
	Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
	Запрос.УстановитьПараметр("ТочкаКБП", ТочкаКБП);
	
	ТаблицаИсполнителей=Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
	
	Возврат ТаблицаИсполнителей;	
		
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораИсполнителей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТочкаДействия=ТочкаКБП.ДействиеКонтрольТочки;
	ТаблицаИсполнителей=ПолучитьТаблицуИсполнителейИЗадачТочки(ТочкаДействия);
	
	СписокВыбора=Элементы.СтрокаСпискаИсполнителей.СписокВыбора;
	
	Для Каждого ЭлементСписка Из СписокЗадачИсполнителей Цикл
		
		Задача=ЭлементСписка.Значение;
		ИсполнительЗадачи=Задача.Исполнитель;
				
		Если СписокВыбора.НайтиПоЗначению(Задача)=Неопределено Тогда
			СписокВыбора.Добавить(Задача, СокрЛП(ИсполнительЗадачи));
			
		КонецЕсли;
				
	КонецЦикла;
	
	ИсполнительТекущийИндекс=0;
	Элементы.ИсполнительПредыдущий.Доступность=Ложь;
	Элементы.ИсполнительСледующий.Доступность=(СписокВыбора.Количество()>1);
	
КонецПроцедуры

// Функция получает список задач, которые необходимо контролировать
Функция ПолучитьСписокЗадачИсполнителей()
	
	ТочкаДействия=ТочкаКБП.ДействиеКонтрольТочки;
	СписокТочек=Новый СписокЗначений;
	
	Если Объект.Выполнена Тогда
		//получим список исполнителей на тот проход
		
		Для Каждого СтрокаТЧ Из Объект.ЗафиксированныеЗадачиКонтроля Цикл
			ЗафиксированнаяЗадача=СтрокаТЧ.ЗадачаИсполнителя;
			Если СписокТочек.НайтиПоЗначению(ЗафиксированнаяЗадача)=Неопределено Тогда
				СписокТочек.Добавить(ЗафиксированнаяЗадача);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НомерПрохода=КП_ЗадачиПроцессов.ПолучитьАктуальныйНомерПроходаТочки(ТочкаДействия);
	
	ТаблицаТочек=КП_Процессы.ПолучитьТаблицуЗадачТочки(ТочкаДействия, НомерПрохода);
	
	Для Каждого СтрокаТЧ Из ТаблицаТочек Цикл
		ЗадачаИсполнителя=СтрокаТЧ.Задача;
		Исполнитель=СтрокаТЧ.Исполнитель;
	    Отказ=СтрокаТЧ.Отказ;
	    Выполнена=СтрокаТЧ.Выполнена;

		Если Отказ ИЛИ НЕ Выполнена Тогда
			Продолжить;
			
		КонецЕсли;
		
		Если СписокТочек.НайтиПоЗначению(ЗадачаИсполнителя)=Неопределено Тогда
			СписокТочек.Добавить(ЗадачаИсполнителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокТочек;
	
КонецФункции

&НаКлиенте
Процедура СтрокаСпискаИсполнителейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Если НЕ ЗаписатьРецензиюВСписок() Тогда
		Возврат;
		
	КонецЕсли;
	
	ИсполнительЗадача=ВыбранноеЗначение;
	
	//обновим текущий индекс
	НомерВСписке=0;
	Для Каждого ЭлементСписка Из СписокЗадачИсполнителей Цикл
		Если ЭлементСписка.Значение=ИсполнительЗадача Тогда
			Прервать;
		КонецЕсли;
		НомерВСписке=НомерВСписке+1;
		
	КонецЦикла;

	ИсполнительТекущийИндекс=НомерВСписке;
	
	УстановитьОформлениеКнопокВыбораИсполнителей();
	
	ИсполнительЗадача=СписокЗадачИсполнителей[ИсполнительТекущийИндекс].Значение;

	ПрочитатьДанныеИсполнителя();

КонецПроцедуры

&НаСервере
Функция СформироватьЗаголовокОткрытияЗадачи(Задача)
	
	СтрокаЗаголовка=НСтр("ru='Открыть задачу ""'; en='Open task ""';")+СокрЛП(Задача.Наименование)+"""";
	Возврат СтрокаЗаголовка;
	
КонецФункции

&НаСервере
Функция ПолучитьИсполнителяЗадачи(Задача)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Задача.Исполнитель;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияОткрытьЗадачуИсполнителяНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ИсполнительЗадача) Тогда
		ПоказатьЗначение(Неопределено, ИсполнительЗадача);
		
	Иначе
		Состояние(НСтр("ru='Задача исполнителя не найдена.';en='The task of the Executive was not found.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСпискаИсполнителейОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	//восстановим наименование исполнителя
	СтрокаСпискаИсполнителей=ПолучитьСтрокуСпискаИсполнителей();

КонецПроцедуры

Функция ПолучитьСтрокуСпискаИсполнителей()
	
	Если НЕ ЗначениеЗаполнено(ИсполнительТекущий) Тогда
		Возврат "<нет исполнителей>";
		
	КонецЕсли;
	
	Возврат СокрЛП(ИсполнительТекущий);
	
КонецФункции

&НаКлиенте
Процедура ИсполнительПредыдущий(Команда)
	
	Если НЕ ЗаписатьРецензиюВСписок() Тогда
		Возврат;
		
	КонецЕсли;
	
	Если ИсполнительТекущийИндекс<=0 Тогда
		ИсполнительТекущийИндекс=0;
		
	Иначе
		ИсполнительТекущийИндекс=ИсполнительТекущийИндекс-1;
		
	КонецЕсли;
	
	УстановитьОформлениеКнопокВыбораИсполнителей();
	
	ИсполнительЗадача=СписокЗадачИсполнителей[ИсполнительТекущийИндекс].Значение;
	
	ПрочитатьДанныеИсполнителя();

КонецПроцедуры

&НаКлиенте
Процедура ИсполнительСледующий(Команда)
	
	Если НЕ ЗаписатьРецензиюВСписок() Тогда
		Возврат;
		
	КонецЕсли;
	
	МаксимальноеЗначениеИндекса=СписокЗадачИсполнителей.Количество()-1;
	
	Если ИсполнительТекущийИндекс>=МаксимальноеЗначениеИндекса Тогда
		ИсполнительТекущийИндекс=МаксимальноеЗначениеИндекса;
		
	Иначе
		ИсполнительТекущийИндекс=ИсполнительТекущийИндекс+1;
		
	КонецЕсли;
	
	УстановитьОформлениеКнопокВыбораИсполнителей();
	
	ИсполнительЗадача=СписокЗадачИсполнителей[ИсполнительТекущийИндекс].Значение;

	ПрочитатьДанныеИсполнителя();
	
КонецПроцедуры

Процедура УстановитьОформлениеКнопокВыбораИсполнителей()
	
	ДоступностьНовая=(ИсполнительТекущийИндекс>0);
	Если Элементы.ИсполнительПредыдущий.Доступность<>ДоступностьНовая Тогда
		Элементы.ИсполнительПредыдущий.Доступность=ДоступностьНовая;
	КонецЕсли;
	
	МаксимальноеЗначениеИндекса=СписокЗадачИсполнителей.Количество()-1;
	
	ДоступностьНовая=(ИсполнительТекущийИндекс<МаксимальноеЗначениеИндекса);
	Если Элементы.ИсполнительСледующий.Доступность<>ДоступностьНовая Тогда
		Элементы.ИсполнительСледующий.Доступность=ДоступностьНовая;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеИсполнителя()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если СписокЗадачИсполнителей.Количество()>0 Тогда
		ИсполнительЗадача=СписокЗадачИсполнителей[ИсполнительТекущийИндекс].Значение;
		ИсполнительТекущий=ИсполнительЗадача.Исполнитель;
		
		ИсполнительПрисутствует=ЗначениеЗаполнено(ИсполнительТекущий);

		ИсполнительТекущий=ИсполнительЗадача.Исполнитель;

		Элементы.ДекорацияОткрытьЗадачуИсполнителя.Заголовок=СформироватьЗаголовокОткрытияЗадачи(ИсполнительЗадача);
		Элементы.ДекорацияОткрытьЗадачуИсполнителя.Подсказка=НСтр("ru='Открыть задачу исполнителя '; en='Open user task';")+СокрЛП(ИсполнительЗадача.Номер)+НСтр("ru=' от '; en=' from ';")+СокрЛП(ИсполнительЗадача.Дата);
		Если СписокЗадачИсполнителей.Количество()>1 Тогда
			Элементы.ГруппаРецензияИсполнителя.Заголовок=НСтр("ru='Рецензия по исполнителю: '; en='User review';")+СокрЛП(ИсполнительТекущий);
		КонецЕсли;
		
	Иначе
		ИсполнительПрисутствует=Ложь;
		ИсполнительЗадача=Неопределено;
		ИсполнительТекущий=Неопределено;
		
	КонецЕсли;
	
	СтрокаСпискаИсполнителей=ПолучитьСтрокуСпискаИсполнителей();	

	Если НЕ ИсполнительПрисутствует Тогда
		ИсполнительКонтрольРезультатОдобрен=0;
		ИсполнительКонтрольТекстРецензии="";
		Возврат;
		
	КонецЕсли;
	
	Если Элементы.ДекорацияПараметрыИсполнителя.Видимость<>ИсполнительПрисутствует Тогда
		Элементы.ДекорацияПараметрыИсполнителя.Видимость=ИсполнительПрисутствует;
		Элементы.ГруппаПараметрыИсполнителя.Видимость=ИсполнительПрисутствует;
		Элементы.ГруппаИсполнителиРезультаты.Видимость=ИсполнительПрисутствует;
		Элементы.ГруппаРецензияИсполнителя.Видимость=ИсполнительПрисутствует;
		
	КонецЕсли;
	
	//прочитаем параметры исполнителя
	СтруктураПараметровЗадачи=КП_ЗадачиПроцессов.ПолучитьСтруктуруПараметровЗадачи(ИсполнительЗадача);
	
	СтруктураПараметровЗадачи.Свойство("ОтчетИсполнителя", ИсполнительОтчетИсполнителя);
	//СтруктураПараметровЗадачи.Свойство("ДатаВыполненияПлан", ИсполнительДатаВыполненияПлан);	
	ИсполнительДатаВыполненияПлан=ИсполнительЗадача.ДатаВыполненияПлан;
	
	ИсполнительДатаВыполненияФакт=ИсполнительЗадача.ДатаВыполненияФакт;
	
	Элементы.ДекорацияТребуемыйРезультат.Заголовок=ИсполнительОтчетИсполнителя.ОписаниеТребуемогоРезультата;
	
	//заполним текущие данные о рецензии (если она уже есть)
	ПрочитатьРецензиюИзСписка();
	
	//прочитаем результаты задачи	
	СтруктураРезультатовЗадачи=КП_ЗадачиПроцессов.ПолучитьСтруктуруРезультатовЗадачи(ИсполнительЗадача);
	
	БулевыйРезультат=Ложь;
	СтруктураРезультатовЗадачи.Свойство("БулевыйРезультат", БулевыйРезультат);
	СтруктураРезультатовЗадачи.Свойство("ЛичнаяВстреча", ИсполнительРезультатЛичнаяВстреча);
	СтруктураРезультатовЗадачи.Свойство("ТелефонныйОтчет", ИсполнительРезультатТелефонныйЗвонок);
	СтруктураРезультатовЗадачи.Свойство("РезультатЧисло", ИсполнительРезультатЧисло);
	СтруктураРезультатовЗадачи.Свойство("РезультатДата", ИсполнительРезультатДата);
	СтруктураРезультатовЗадачи.Свойство("ПриложенныйФайл", ИсполнительРезультатФайл);
	СтруктураРезультатовЗадачи.Свойство("ПриложенныйДокумент", ИсполнительРезультатДокумент);
	
	ИсполнительВыборкКнопкамиОдобрено=Неопределено;
	СтруктураРезультатовЗадачи.Свойство("ВыборКнопками", ИсполнительВыборкКнопкамиОдобрено);
	
	ИсполнительРезультатДаНет=?(БулевыйРезультат=Неопределено ИЛИ НЕ БулевыйРезультат, 0, 1);
	ИсполнительРезультатТекстФорматированный=ИсполнительЗадача.ХранилищеТекстовогоРезультата.Получить();
	
	ИсполнительРезультатВыборКнопками=?(ИсполнительВыборкКнопкамиОдобрено=Неопределено ИЛИ НЕ ИсполнительВыборкКнопкамиОдобрено, 0, 1);
		
	//прочитаем результаты исполнителя
	ИсполнительСписокТребуемыхРезультатов=КП_ЗадачиПроцессов.ПолучитьСписокРезультатовПоОтчету(ИсполнительОтчетИсполнителя);	
	
	ХранилищеТекстаЗаданияИсполнителя=ИсполнительЗадача.ХранилищеТекстаЗадания.Получить();
	Если ТипЗнч(ХранилищеТекстаЗаданияИсполнителя)=Тип("ФорматированныйДокумент") Тогда
		ИсполнительТекстЗадания=ХранилищеТекстаЗаданияИсполнителя;
		Элементы.ИсполнительТекстЗадания.Шрифт=ШрифтПользователя;
	Иначе
		ИсполнительТекстЗадания.УстановитьHTML("", Новый Структура);
	КонецЕсли;
		
	ОформитьЭлементыРезультата();
	
	Элементы.ИсполнительРезультатТекстФорматированный.Шрифт=ШрифтПользователя;
	
КонецПроцедуры

Процедура ОформитьЭлементыРезультата()
	
	УстановитьВидимостьЭлементовРезультата(Ложь);
	
	Для Каждого ЭлементСписка Из ИсполнительСписокТребуемыхРезультатов Цикл
		ВидОтчета=ЭлементСписка.Значение;
		Если ВидОтчета=ПланыВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ВыборКнопками Тогда
			НаименованиеРезультата="";
			//установим наименования элементов списка
			СтрокаКнопок=ЭлементСписка.Представление;
			СтруктураКнопок=КП_ЗадачиПроцессов.ПолучитьСтруктуруНаименованийКнопокРезультата(СтрокаКнопок);
			
			Элементы.ИсполнительРезультатВыборКнопками.СписокВыбора.Очистить();
			
			Если СтруктураКнопок=Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Разделитель кнопок ""|"" задан не корректно.';en='Separator buttons ""|"" is set incorrectly.'"));
				
			Иначе
				КнопкаПринято=СтруктураКнопок.ЛеваяКнопка;
				КнопкаОтклонено=СтруктураКнопок.ПраваяКнопка;
				
				Элементы.ИсполнительРезультатВыборКнопками.СписокВыбора.Добавить(1, КнопкаПринято);
				Элементы.ИсполнительРезультатВыборКнопками.СписокВыбора.Добавить(0, КнопкаОтклонено);
				
			КонецЕсли;
			
		Иначе
			//другие виды отчетов
			НаименованиеРезультата=ЭлементСписка.Представление;
			
		КонецЕсли;
		
		ИмяРеквизита="Исполнитель"+КП_ЗадачиПроцессов.ПолучитьИмяРеквизитаОтчетаИзВидаОтчета(ВидОтчета);
		
		Попытка
			ЭлементРезультата=Элементы[ИмяРеквизита];
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
		ЭлементРезультата.Видимость=Истина;
		
		Если НЕ ПустаяСтрока(НаименованиеРезультата) Тогда
			ЭлементРезультата.Заголовок=НаименованиеРезультата;
			
		КонецЕсли;
		
	КонецЦикла; //по списку результатов
	
	Если Элементы.ИсполнительРезультатЛичнаяВстреча.Видимость И Элементы.ИсполнительРезультатТелефонныйЗвонок.Видимость Тогда
		Элементы.ДекорацияОтметкиВыполнения.Видимость=Истина;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьРецензиюВСписок()
	
	//проврерим, можно ли сохранять рецензию в список
	Если ИсполнительКонтрольРезультатОдобрен=0 И НЕ ПустаяСтрока(ИсполнительКонтрольТекстРецензии) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Для ';")+СокрЛП(ИсполнительТекущий)+НСтр("ru=' указан текст рецензии, но не указан результат.';"));
		Возврат Ложь;
		
	КонецЕсли;
	
	//сохраним рецензию в список (в базу будем записывать при сохранении задачи контроля)
	
	//проверим, есть ли в списке рецензия для текущего исполнителя
	ЭлементСписка=СписокАктульныхРецензий.НайтиПоЗначению(ИсполнительЗадача);
	
	Если ЭлементСписка=Неопределено Тогда
		//добавим новую рецензию в список
		СписокАктульныхРецензий.Добавить(ИсполнительЗадача, ИсполнительКонтрольТекстРецензии, (ИсполнительКонтрольРезультатОдобрен=1));
		
	Иначе
		ЭлементСписка.Представление=ИсполнительКонтрольТекстРецензии;
		ЭлементСписка.Пометка=(ИсполнительКонтрольРезультатОдобрен=1);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Процедура ПрочитатьРецензиюИзСписка()
	
	ИсполнительОбработан=(СписокОбработанныхИсполнителей.НайтиПоЗначению(ИсполнительЗадача)<>Неопределено);
	
	Если НЕ ИсполнительОбработан Тогда
		ИсполнительКонтрольТекстРецензии="";
		ИсполнительКонтрольРезультатОдобрен=0;
		Возврат;
		
	КонецЕсли;
	
	ЭлементСписка=СписокАктульныхРецензий.НайтиПоЗначению(ИсполнительЗадача);
	
	Если ЭлементСписка=Неопределено Тогда
		ИсполнительКонтрольТекстРецензии="";
		ИсполнительКонтрольРезультатОдобрен=0;
		
	Иначе
		
		ИсполнительКонтрольТекстРецензии=ЭлементСписка.Представление;
		ИсполнительКонтрольРезультатОдобрен=?(ЭлементСписка.Пометка, 1, 2);
		
	КонецЕсли;		
	
КонецПроцедуры

Функция ПолучитьСписокРецензийИсполнителей()
	
	УстановитьПривилегированныйРежим(Истина);	
	
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	КП_РецензииКонтролеровСрезПоследних.ТекстРецензии,
	                    |	КП_РецензииКонтролеровСрезПоследних.РезультатОдобрен,
	                    |	КП_РецензииКонтролеровСрезПоследних.ЗадачаИсполнителя,
	                    |	КП_РецензииКонтролеровСрезПоследних.ИднИсполнителя
	                    |ИЗ
	                    |	РегистрСведений.КП_РецензииКонтролеров.СрезПоследних(&ДатаКон, ) КАК КП_РецензииКонтролеровСрезПоследних
	                    |ГДЕ
	                    |	КП_РецензииКонтролеровСрезПоследних.ЗадачаИсполнителя В(&СписокЗадач)
	                    |	И КП_РецензииКонтролеровСрезПоследних.Контролер = &Контролер");
						
	Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
	Запрос.УстановитьПараметр("СписокЗадач", СписокЗадачИсполнителей);
	Запрос.УстановитьПараметр("Контролер", Объект.Исполнитель);	
	
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	СписокРецензийВБазеДанных=Новый СписокЗначений;
	
	СписокОбработанныхИсполнителей.Очистить();
	
	Пока Выборка.Следующий() Цикл
		Если СписокРецензийВБазеДанных.НайтиПоЗначению(Выборка.ЗадачаИсполнителя)=Неопределено Тогда
			СписокРецензийВБазеДанных.Добавить(Выборка.ЗадачаИсполнителя, Выборка.ТекстРецензии, Выборка.РезультатОдобрен);
			
		КонецЕсли;
		
		Если СписокОбработанныхИсполнителей.НайтиПоЗначению(Выборка.ЗадачаИсполнителя)=Неопределено Тогда
			СписокОбработанныхИсполнителей.Добавить(Выборка.ЗадачаИсполнителя);
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат СписокРецензийВБазеДанных;
	
КонецФункции

&НаСервере
Функция ЗаписатьРезультатыКонтроляИсполнителей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТочкаИсполненияКБП=ТочкаКБП.ДействиеКонтрольТочки;
	
	//запишем в регистр КП_РецензииКонтролеров результаты по каждому исполнителю
	
	Для Каждого ЭлементСписка Из СписокАктульныхРецензий Цикл
		ТекущаяЗадача=ЭлементСписка.Значение;
		ТекущийИсполнитель=ТекущаяЗадача.Исполнитель;
		ИднИсполнителяТекущий=ТекущаяЗадача.ИднИсполнителя;
		РезультатОдобрен=ЭлементСписка.Пометка;
		
		РегРецензии=РегистрыСведений.КП_РецензииКонтролеров.СоздатьНаборЗаписей();
		РегРецензии.Отбор.БизнесПроцесс.Установить(БизнесПроцесс);
		РегРецензии.Отбор.ТочкаКБП.Установить(ТочкаИсполненияКБП);
		РегРецензии.Отбор.Контролер.Установить(Объект.Исполнитель);
		РегРецензии.Отбор.Исполнитель.Установить(ТекущийИсполнитель);
		РегРецензии.Отбор.ЗадачаИсполнителя.Установить(ТекущаяЗадача);
		РегРецензии.Отбор.ИднИсполнителя.Установить(ИднИсполнителяТекущий);
				
		РегРецензии.Прочитать();
		
		Если РегРецензии.Количество()=0 Тогда
			ЗаписьРецензии=РегРецензии.Добавить();
			ЗаписьРецензии.БизнесПроцесс=БизнесПроцесс;
			ЗаписьРецензии.ТочкаКБП=ТочкаИсполненияКБП;
			ЗаписьРецензии.Контролер=Объект.Исполнитель;
			ЗаписьРецензии.ЗадачаИсполнителя=ТекущаяЗадача;
		Иначе
			ЗаписьРецензии=РегРецензии[0];
			
		КонецЕсли;
		
		ЗаписьРецензии.Период=ТекущаяДата();
		ЗаписьРецензии.Исполнитель=ТекущийИсполнитель;
		ЗаписьРецензии.ТекстРецензии=ЭлементСписка.Представление;
		ЗаписьРецензии.РезультатОдобрен=РезультатОдобрен;
		ЗаписьРецензии.ИднИсполнителя=ИднИсполнителяТекущий;
			
		Попытка
			РегРецензии.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
		//запишем состояние для проверенной задачи
		Если РезультатОдобрен Тогда
			КП_ЗадачиПроцессов.УстановитьСостояниеЗадачи(ТекущаяЗадача, Перечисления.КП_СостояниеЗадач.Одобрена);
		Иначе
			КП_ЗадачиПроцессов.УстановитьСостояниеЗадачи(ТекущаяЗадача, Перечисления.КП_СостояниеЗадач.Отклонена);
		КонецЕсли;

	КонецЦикла; //по списку рецензий
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ИсполнительКонтрольРезультатОдобренПриИзменении(Элемент)
	
	Если СписокОбработанныхИсполнителей.НайтиПоЗначению(ИсполнительЗадача)=Неопределено Тогда
		СписокОбработанныхИсполнителей.Добавить(ИсполнительЗадача);
		
	КонецЕсли;
	
	ЗаписатьРецензиюВСписок();
	
	УстановитьИтоговыйРезультатПоИсполнителям();
	
	Модифицированность=Истина;

КонецПроцедуры

&НаКлиенте
Процедура ИсполнительКонтрольТекстРецензииПриИзменении(Элемент)
	Модифицированность=Истина;

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ПриОткрытииЗавершение(ДополнительныеПараметры) Экспорт
    
    Попытка
        Закрыть();
    Исключение
    КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИтоговыйРезультатПоИсполнителям() Экспорт
	//если есть консолидированный ответ по всем исполнителям, то установим и итоговый
	
	Если СписокЗадачИсполнителей.Количество()<>СписокОбработанныхИсполнителей.Количество() Тогда
		//еще не все рецензии обработаны
		Возврат;
		
	КонецЕсли;
	
	КоличествоОдобрений=0;
	КоличествоОтклонений=0;
	
	Для Каждого ЭлементСписка Из СписокАктульныхРецензий Цикл
		РезультатОдобрен=ЭлементСписка.Пометка;
		Если РезультатОдобрен Тогда
			КоличествоОдобрений=КоличествоОдобрений+1;
		Иначе
			КоличествоОтклонений=КоличествоОтклонений+1;
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		Если КоличествоОдобрений>0 И КоличествоОтклонений=0 Тогда
			//единое решение по одобрению
			Объект.КонтрольРезультаты=1;
			
		ИначеЕсли КоличествоОдобрений=0 И КоличествоОтклонений>0 Тогда
			//единое решение по отклонению
			Объект.КонтрольРезультаты=2;
			
		Иначе 
			Возврат;
			
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	КонтрольРезультатыПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаСпискаИсполнителейОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ЗначениеЗаполнено(ИсполнительТекущий) Тогда
		ПоказатьЗначение(Неопределено, ИсполнительТекущий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка=Ложь;
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, "РеквизитПроцесса_", "");
	
	РеквизитПроцесса=КП_Процессы.НайтиРеквизитПроцессаПоИмени(Объект.БизнесПроцесс, ИмяРеквизита);
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	//откроем форму с установленным отбором
	ПараметрыОтбора=Новый Структура("Владелец", КП_Процессы.ПолучитьСвязьРеквизитаСПВХ(РеквизитПроцесса));
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	
	ВыбранноеЗначение = Неопределено;

	
	ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_ОткрытьНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
    
    
    ВыбранноеЗначение=Результат;
    Если ВыбранноеЗначение=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ЭтаФорма[Элемент.Имя]=ВыбранноеЗначение;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСсылокПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	СтрокаТЧ=Элемент.ТекущиеДанные;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект=СтрокаТЧ.Объект;
		
	Если КП_ОбщееСерверПС.ЭтоФайл(СсылкаНаОбъект) Тогда
		РаботаСФайламиКлиент.ОткрытьФайл(КП_ОбщееСервер.ПолучитьДанныеФайлаДляОткрытия(СсылкаНаОбъект, Неопределено, УникальныйИдентификатор)); 
		
	Иначе
		ПоказатьЗначение(Неопределено, СсылкаНаОбъект);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОбработкаРезультатовИсполнителейРезультатВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуРезультатов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуРезультатов()
	
	ТекстРецензииИсполнителя="";
	РезультатОдобрен=(Объект.КонтрольРезультаты=1);
	
	//установим автоматическую обработку исполнителей 
	Для Каждого ЭлементСписка Из СписокЗадачИсполнителей Цикл
		ЗадачаСписка=ЭлементСписка.Значение;
		
		Если СписокОбработанныхИсполнителей.НайтиПоЗначению(ЗадачаСписка)=Неопределено Тогда
			//добавим обработку исполнителя
			СписокОбработанныхИсполнителей.Добавить(ЗадачаСписка);
			
			//запишем результат исполнителя
			СписокАктульныхРецензий.Добавить(ЗадачаСписка, ТекстРецензииИсполнителя, РезультатОдобрен);			
			
		КонецЕсли;
		
	КонецЦикла;
	
	//установим при необходимости результат текущего исполнителя в экранной форме
	Если ИсполнительКонтрольРезультатОдобрен=0 Тогда
		ИсполнительКонтрольРезультатОдобрен=Объект.КонтрольРезультаты;
	КонецЕсли;
	
    Если НЕ ВыполнитьЗадачуСервером() Тогда
        Возврат;
        
    КонецЕсли;
	
	КП_ЗадачиПроцессов.ОчиститьНапоминанияОЗадаче(Объект.Ссылка);

    Оповестить("КП_Задача", "Выполнена", Объект.Ссылка);	
    
    Состояние(НСтр("ru='Задача выполнена.';en='Mission accomplished.'"));
    
    Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьСкрытьТекстЗаданияНажатие(Элемент)
	ФлагТекстЗаданияИсполнителяОткрыт=НЕ ФлагТекстЗаданияИсполнителяОткрыт;
	ЗаписатьНастройкиСервером();
	
	УстановитьОтбражениеТекстаИсполнителя();
	
КонецПроцедуры

Процедура УстановитьОтбражениеТекстаИсполнителя()
	
	Если ФлагТекстЗаданияИсполнителяОткрыт Тогда
		Элементы.ДекорацияПоказатьСкрытьТекстЗадания.Заголовок=НСтр("ru='Скрыть текст задания ←'; en='Hide task text ←';");
		Элементы.ДекорацияПоказатьСкрытьТекстЗадания.Подсказка=НСтр("ru='Скрыть текст задания исполнителя'; en='Hide user task text ←';");
		
	Иначе
		Элементы.ДекорацияПоказатьСкрытьТекстЗадания.Заголовок=НСтр("ru='Показать текст задания →'; en='Show task text →';");
		Элементы.ДекорацияПоказатьСкрытьТекстЗадания.Подсказка=НСтр("ru='Показать текст задания исполнителя'; en='Show user task text →';");
		
	КонецЕсли;
	
	Элементы.ИсполнительТекстЗадания.Видимость=ФлагТекстЗаданияИсполнителяОткрыт;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСервером()
	КП_ОбщееСервер.СохранитьНастройкуПользователя("ЗадачаИсполнителя.ФормаКонтроля", "ФлагТекстЗаданияИсполнителяОткрыт", ФлагТекстЗаданияИсполнителяОткрыт);	
	КП_ОбщееСервер.СохранитьНастройкуПользователя("ЗадачаИсполнителя.ФормаКонтроля", "ФлагПараметрыИсполнителяРаскрыты", ФлагПараметрыИсполнителяРаскрыты);	
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиСервером()
	ФлагТекстЗаданияИсполнителяОткрыт=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("ЗадачаИсполнителя.ФормаКонтроля", "ФлагТекстЗаданияИсполнителяОткрыт");	
	ФлагПараметрыИсполнителяРаскрыты=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("ЗадачаИсполнителя.ФормаКонтроля", "ФлагПараметрыИсполнителяРаскрыты");	
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗадачиПоШаблону(Команда)
	
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ПечатьЗадачиПоШаблонуЗавершение", ЭтотОбъект, Новый Структура("Команда", Команда)), НСтр("ru='Задача будет записана. Продолжить?';en='The task will be saved. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет,,, КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
		
	КонецЕсли;
	
	ПечатьЗадачиПоШаблонуФрагмент(Команда);
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ПечатьЗадачиПоШаблонуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Команда = ДополнительныеПараметры.Команда;
    
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        КП_ОбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
        Возврат;
    КонецПопытки;
    
    
    ПечатьЗадачиПоШаблонуФрагмент(Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗадачиПоШаблонуФрагмент(Знач Команда)
    
    Перем ИмяКоманды, КодШаблона, ШаблонФайла;
    
    ИмяКоманды=Команда.Имя;
    КодШаблона=СтрЗаменить(ИмяКоманды, "КомандаПечати_", "");
    
    ШаблонФайла=КП_РаботаСФайлами.ПолучитьШаблонКомандыПечатьПоКоду(КодШаблона, КП_ОбщееСервер.ПолучитьРеквизитОбъекта(ТочкаКБП, "ТочкаОснование"));
    
    Если ШаблонФайла=Неопределено Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найден шаблон файла по коду ';")+КодШаблона);
        Возврат;
    КонецЕсли;
    
    //напечатаем ШаблонФайла
    
    ПечатьЗадачиКонтролера(ШаблонФайла);

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗадачиКонтролера(ФайлСсылка)
	
	ТекстСообщения = НСтр("ru='Выполняется формирование печатной формы...';en='Performed forming the printed form ...'");
	Состояние(ТекстСообщения);
	
	ОбъектСсылка=Объект.Ссылка;
	
	//получим данные
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Формирование печатной формы начато. Получение данных макета.", ОбъектСсылка, ФайлСсылка);
	
	МакетИДанныеОбъекта=ПолучитьМакетИДанныеЗадачи(ФайлСсылка);
	
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Вывод макета.", ОбъектСсылка, ФайлСсылка);

	КП_РаботаСФайламиКлиент.НапечататьЗадачуПользователя(ОбъектСсылка, ФайлСсылка, МакетИДанныеОбъекта, МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
	
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Формирование закончено.", ОбъектСсылка, ФайлСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВЖурналСобытийФормированиеПечатнойФормы(ТекстСообщения, ДокументСсылка, ФайлСсылка)
	
	ЗаписьЖурналаРегистрации("Формирование задачи по шаблону.", УровеньЖурналаРегистрации.Информация, ДокументСсылка, ФайлСсылка, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетИДанныеЗадачи(ФайлСсылка)
	ПроцессСсылка=ЭтаФорма.РеквизитФормыВЗначение("Объект");
	МакетИДанныеОбъекта=Задачи.КП_Задача.ПолучитьДанныеПечати(ПроцессСсылка, ФайлСсылка);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", УправлениеПечатью.ПолучитьЛокальныйКаталогФайловПечати());
	Возврат МакетИДанныеОбъекта;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_НачалоВыбораВнешнейСсылкиДополнительногоРеквизита(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ИмяРеквизита=СтрЗаменить(Элемент.Имя, "РеквизитПроцесса_", "");
	
	РеквизитПроцесса=КП_Процессы.НайтиРеквизитПроцессаПоИмени(Объект.БизнесПроцесс, ИмяРеквизита);
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	ТипРеквизита=КП_ОбщееСервер.ПолучитьРеквизитОбъекта(РеквизитПроцесса, "ТипРеквизита");
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ВыборТипаВнешнегоОбъектаЗавершение(Результат, ИмяЭлемента) Экспорт
    
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[ИмяЭлемента]=Результат;

КонецПроцедуры

&НаКлиенте
Процедура Напомнить(Команда)
	Если Параметры.Ключ.Пустая() Тогда
		//обычно не записанных задач не бывает
		Возврат;
	КонецЕсли;
	
	Если Объект.Выполнена Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ОтветНаВопросОНапоминании", ЭтаФорма, Новый Структура), 
			"Задача уже выполнена. Продолжить установку напоминания?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНапоминания();
		
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОтветНаВопросОНапоминании(Результат, ДопПараметры) Экспорт
	
	Если Результат=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНапоминания()
	
	ПараметрыФормы = Новый Структура("Источник", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.Напоминание", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область НастройкаЦветовОформления

&НаКлиенте
Процедура ЗаписатьНастроенныеЦвета()
	
	Если НЕ ПустаяСтрока(АдресХраненияНастройкиЦветов) Тогда
		МассивНастройкиЦветов=ПолучитьИзВременногоХранилища(АдресХраненияНастройкиЦветов);
		Если ЗначениеЗаполнено(МассивНастройкиЦветов) Тогда
			СтруктураЦвета=Новый Структура;
			СтруктураЦвета.Вставить("ЦветТекста", МассивНастройкиЦветов[0]);
			СтруктураЦвета.Вставить("ЦветФона", МассивНастройкиЦветов[1]);
			СтруктураЦвета.Вставить("ШрифтЖирный", МассивНастройкиЦветов[2]);
			СтруктураЦвета.Вставить("ШрифтНаклонный", МассивНастройкиЦветов[3]);
			КП_ОформлениеСтрокСервер.ЗаписатьСтруктуруЦветаОбъекта(Объект.Ссылка, СтруктураЦвета, ТекущийПользователь);
		Иначе
			//адрес хранения был заполнен, но массив настройки теперь пустой
			СписокОбъектов=Новый СписокЗначений;
			СписокОбъектов.Добавить(Объект.Ссылка);
			КП_ОформлениеСтрокСервер.УдалитьОформлениеСпискаОбъектов(СписокОбъектов, ТекущийПользователь);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЗаголовка()
			
	Если НЕ Параметры.Ключ.Пустая() Тогда		
		
		ИмяРеквизита="Наименование";
		
		СтруктураЦвета=КП_ОформлениеСтрокСервер.ПолучитьСтруктуруЦветаОбъекта(Объект.Ссылка, ТекущийПользователь);
		
		Если СтруктураЦвета<>Неопределено Тогда
			МассивНастройкиЦветов=Новый Массив;
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ЦветТекста);
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ЦветФона);
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ШрифтЖирный);
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ШрифтНаклонный);
			
			АдресХраненияНастройкиЦветов=ПоместитьВоВременноеХранилище(МассивНастройкиЦветов, ЭтаФорма.УникальныйИдентификатор);
			
			КП_ОформлениеСтрокКлиент.УстановитьОформлениеНаименования(Элементы[ИмяРеквизита], МассивНастройкиЦветов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //НастройкаЦветовОформления
