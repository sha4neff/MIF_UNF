#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	//заполним реквизиты формы
	БизнесПроцесс=Объект.БизнесПроцесс;
	ВидПроцесса=БизнесПроцесс.ВидПроцесса;
	ТекущийПользователь=Пользователи.ТекущийПользователь();
	
	НаименованиеКнопкиПереадресации=?(КП_ОбщееСерверПС.ПользовательМожетСоздаватьПроцессы(), "ГруппаПереадресация", "ФормаПереадресоватьЗадачу");
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Задача не может быть создана интерактивно. Воспользуйтесь бизнес-процессами.';en='The task can not be created interactively. Use business process.'"));
		Отказ=Истина;
		Возврат;
		
	Иначе
		//не новая задача
		
		Если Объект.ТочкаМаршрута=БизнесПроцессы.КП_БизнесПроцесс.ТочкиМаршрута.ВыполнениеКорпоративногоПроцесса Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Это системная вспомогательная задача. Открытие не предусмотрено.';en='This is a system auxiliary tasks. Opening is provided.'"));
			Отказ=Истина;
			Возврат;
		КонецЕсли;

		ТочкаКБП=Объект.ТочкаКБП;
		
		ПрочитатьПараметрыЗадачи();
		
		ПрочитатьРезультатыЗадачи();
		
		КоличествоРецензий=КП_ЗадачиПроцессов.КоличествоРецензий(Объект.ИднИсполнителя, ТочкаКБП);
		ФлагРецензияРаскрыта=(КоличествоРецензий>0);
		
		Если КоличествоРецензий=0 Тогда
			Элементы.ДекорацияРецензияКонтролера.Видимость=Ложь;
			
		Иначе
			Элементы.ДекорацияРецензияКонтролера.Видимость=Истина;
			
		КонецЕсли;
		               		
		УстановитьОтображениеРецензии();
				
		ОбновитьСписокСсылокПроцесса();
		
		ОбновитьСписокРецензий();
		
	КонецЕсли;
	
	УстановитьЗаголовок();
	
	КоличествоСсылокНаОбъекты=КП_Процессы.ПолучитьКоличествоСсылокБизнесПроцесса(БизнесПроцесс);	
	
	УстановитьОформлениеЭлементов();
	
	ЗаполнитьРеквизитыПроцесса();
	
	ОформитьЭлементыРезультата();
	
	УстановитьДоступностьЭлементов();
	
	ДатаВремяОткрытияФормы=ТекущаяДата();	

	ШрифтПользователя=КП_ОбщееСервер.ПолучитьШрифтПользователя();
	Элементы.ТекстЗаданияФорматированный.Шрифт=ШрифтПользователя;
	Элементы.РезультатТекстФорматированный.Шрифт=ШрифтПользователя;
	
	БылаНеВыполненной=НЕ Объект.Выполнена;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СокрЛП(Объект.ИднИсполнителя)="" Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("Оповещение_ПриОткрытииЗавершение", ЭтотОбъект), 
			НСтр("ru='В задаче ""';")+СокрЛП(Объект.Наименование)+НСтр("ru='"" не указан идентификатор исполнителя. Возможно он не был сформирован при создании бизнес-процесса.';"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	#Если ВебКлиент ИЛИ МобильныйКлиент Тогда
	Элементы.ФормаЗаполнитьПоШаблону.Видимость=Ложь;
	#КонецЕсли
	
	#Если МобильныйКлиент Тогда
	Элементы.Напомнить.Видимость=Ложь;
	#КонецЕсли

	УстановитьОформлениеЗаголовка();
	
	Оповестить("КП_Задача", "Открыта", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
		
	ОбновитьСписокСсылокПроцесса();
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаВыполнения) И НЕ Параметры.Ключ.Пустая() Тогда
		//первая запись новой задачи
		ДатаНачалаВыполнения=ДатаВремяОткрытияФормы;
		СтруктураПараметровЗадачи=Новый Структура("ДатаНачалаВыполнения", ДатаНачалаВыполнения);
		КП_ЗадачиПроцессов.СохранитьСтруктуруПараметровЗадачи(СтруктураПараметровЗадачи, Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаписатьНастроенныеЦвета();
	
	Если НЕ ПредварительнаяЗапись Тогда
		УстановитьЗаголовок();
		ОповеститьОбИзменении(Объект.Ссылка);	
		Оповестить("КП_Задача", "Записана", Объект.Ссылка);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыполнениеПроцентПриИзменении(Элемент)
	
	Если ВыполнениеПроцент>100 Тогда
		ВыполнениеПроцент=100;
		Если НЕ ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
			Объект.ДатаВыполненияФакт=ТекущаяДата();
		
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
			Объект.ДатаВыполненияФакт=Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыполненияФактПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
		ВыполнениеПроцент=100;
		
	Иначе
		ВыполнениеПроцент=0;
		
	КонецЕсли;
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.ХранилищеТекстовогоРезультата=Новый ХранилищеЗначения(РезультатТекстФорматированный);
	ТекстРезультата=РезультатТекстФорматированный.ПолучитьТекст();
	ТекстРезультата=СтрЗаменить(ТекстРезультата, Символы.ПС, " "); //вытянем в однй строку для корректного отображения в строках таблиц
	ТекстРезультата=СокрЛП(ТекстРезультата);
	
	ТекущийОбъект.ТекстовыйРезультат=РезультатТекстФорматированный.ПолучитьТекст();
	ТекущийОбъект.ХранилищеТекстаЗадания=Новый ХранилищеЗначения(ТекстЗаданияФорматированный);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РезультатТекстФорматированный=ТекущийОбъект.ХранилищеТекстовогоРезультата.Получить();

	ТекстЗаданияФорматированный=ТекущийОбъект.ХранилищеТекстаЗадания.Получить();

КонецПроцедуры

&НаКлиенте
Процедура РезультатФайлПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЧислоПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДатаПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДаНетПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатЛичнаяВстречаПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПрочитатьПараметрыЗадачи()
	
	СтруктураПараметровЗадачи=КП_ЗадачиПроцессов.ПолучитьСтруктуруПараметровЗадачи(Объект.Ссылка);
	
	СтруктураПараметровЗадачи.Свойство("ОтчетИсполнителя", ОтчетИсполнителя);
	СтруктураПараметровЗадачи.Свойство("ДатаНачалаВыполнения", ДатаНачалаВыполнения);
	СтруктураПараметровЗадачи.Свойство("ВыполнениеПроцент", ВыполнениеПроцент);

	СписокТребуемыхРезультатов=КП_ЗадачиПроцессов.ПолучитьСписокРезультатовПоОтчету(ОтчетИсполнителя); //ВидОтчета|Наименование|Обязательный
    	
КонецПроцедуры

&НаСервере
Процедура СохранитьПараметрыЗадачи()
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаВыполнения) Тогда
		ДатаНачалаВыполнения=ДатаВремяОткрытияФормы;
	КонецЕсли;
	
	СтруктураПараметровЗадачи=Новый Структура;
	СтруктураПараметровЗадачи.Вставить("ВыполнениеПроцент", ВыполнениеПроцент);
	СтруктураПараметровЗадачи.Вставить("ДатаНачалаВыполнения", ДатаНачалаВыполнения);
	
	КП_ЗадачиПроцессов.СохранитьСтруктуруПараметровЗадачи(СтруктураПараметровЗадачи, Объект.Ссылка);
	
	Если Объект.Выполнена Тогда
		КП_ЗадачиПроцессов.УстановитьСостояниеЗадачи(Объект.Ссылка, Перечисления.КП_СостояниеЗадач.Выполнена);
	Иначе
		КП_ЗадачиПроцессов.УстановитьСостояниеЗадачи(Объект.Ссылка, Перечисления.КП_СостояниеЗадач.Выполняется);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачу(Команда)
	
	СтруктураПараметровВыполнения=Новый Структура("НажатаяКнопка", Элементы.ФормаВыполнитьЗадачу.Имя);
	
	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ВыполнитьЗадачуОтветНаПодтверждение", ЭтотОбъект, СтруктураПараметровВыполнения), 
		НСтр("ru='Подтвердить полное выполнение задачи?';en='Do you want to confirm the completion of the task?'"), 
		КП_ОбщееКлиент.КнопкиВопроса("Да, подтвердить", "Отмена"),,,КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ВыполнитьЗадачуОтветНаПодтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
	
	НажатаяКнопка=ДополнительныеПараметры.НажатаяКнопка;
	
	Если НажатаяКнопка=Элементы.КнопкаПринято.Имя Тогда
		РезультатВыборКнопками=1;
		
	ИначеЕсли НажатаяКнопка=Элементы.КнопкаОтклонено.Имя Тогда
		РезультатВыборКнопками=0;
		
	КонецЕсли;
	
	СтруктураПараметровВыполнения=Новый Структура("НажатаяКнопка, ЗадачаВыполнена", НажатаяКнопка, Ложь);
	
    ПроизвестиВыполнениеЗадачи(СтруктураПараметровВыполнения);

КонецПроцедуры

&НаКлиенте 
Процедура ОбработатьРезультатВыполненияЗадачи(СтруктураРезультатаВыполнения)
	
	//вызывается после окончания процедуры выполнения задачи

	ЗадачаВыполнена=СтруктураРезультатаВыполнения.ЗадачаВыполнена;
	НажатаяКнопка=СтруктураРезультатаВыполнения.НажатаяКнопка;
	
	Если НажатаяКнопка=Элементы.ФормаВыполнитьЗадачу.Имя Тогда
		//ни какой дополнительной обработки не требуется
		Возврат;
		
	ИначеЕсли НажатаяКнопка=Элементы.КнопкаПринято.Имя Тогда
		Если ЗадачаВыполнена Тогда
			Элементы.КнопкаОтклонено.Пометка=Ложь;
			Элементы.КнопкаПринято.Пометка=Истина;
		Иначе
			//задача не выполнена
			РезультатВыборКнопками=-1;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли НажатаяКнопка=Элементы.КнопкаОтклонено.Имя Тогда
		Если ЗадачаВыполнена Тогда
			Элементы.КнопкаОтклонено.Пометка=Истина;
			Элементы.КнопкаПринято.Пометка=Ложь;
		Иначе
			//задача не выполнена
			РезультатВыборКнопками=-1;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиВыполнениеЗадачи(СтруктураПараметровВыполнения)
		
	СтруктураОбработки=ОбработкаСобытияПередВыполнением();
	
	Если НЕ СтруктураОбработки.ЗавершеноУспешно Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка в настройке события ""ПередВыполнением"" задачи.';en='Error in setting up the event ""Befor execution"" task.'"));
		ОбработатьРезультатВыполненияЗадачи(СтруктураПараметровВыполнения);
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураОбработки.Отказ Тогда
		//ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроизвестиВыполнениеЗадачиЗавершение", ЭтотОбъект, Новый Структура("ОповещениеОВыполнении", ОповещениеОВыполненииЗадачи)), НСтр("ru='Выполнение не было принято.';en='Special requests can not be accepted.'"), , аОбщееКлиентПС.ЗаголовокДиалога());
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Выполнение не было принято.';en='Special requests can not be accepted.'"), , КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ВыполнитьЗадачуСервером() Тогда
		СтруктураПараметровВыполнения.ЗадачаВыполнена=Ложь;
		ОбработатьРезультатВыполненияЗадачи(СтруктураПараметровВыполнения);
		Возврат;
		
	КонецЕсли;
	
	Оповестить("КП_Задача", "Выполнена", Объект.Ссылка);	
	
	Состояние(НСтр("ru='Задача выполнена.';en='Task completed.'"));
	
	Попытка
		Закрыть();
		
	Исключение
		СтруктураПараметровВыполнения.ЗадачаВыполнена=Ложь;
		ОбработатьРезультатВыполненияЗадачи(СтруктураПараметровВыполнения);
		Возврат;
		
	КонецПопытки;
	
	СтруктураПараметровВыполнения.ЗадачаВыполнена=Истина;
	ОбработатьРезультатВыполненияЗадачи(СтруктураПараметровВыполнения);
	
	КП_ЗадачиПроцессов.ОчиститьНапоминанияОЗадаче(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьЗадачуСервером()
	РезультатыЗаполнены=ПроверитьЗаполнениеРезультатов();
	
	Если НЕ РезультатыЗаполнены Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Результат отчета не соответствует заданному: ';")+УдалитьПоследнююТочкуВСтроке(СокрЛП(Элементы.ДекорацияТребуемыйРезультат.Заголовок))+НСтр("ru='.';en='.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	РеквизитыЗаполнены=ПроверитьЗаполнениеРеквизитов();
	
	Если НЕ РеквизитыЗаполнены Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	ВыполнениеПроцент=100;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
		Объект.ДатаВыполненияФакт=ТекущаяДата();
		
	КонецЕсли;
	
	Если Объект.ДатаВыполненияФакт<(Объект.Дата-60*5) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата фактического выполнения меньше даты создания задачи! Задача не записана.';en='Date of actual performance is less than the creation date of the task! The task is not recorded.'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда
		ДанныеЗадачиСохранены=Ложь;
		
	Иначе
		//сохраним данные перед записью и вызовом подписок на события
		СохранитьДанныеЗадачи();
		ДанныеЗадачиСохранены=Истина;
		
	КонецЕсли;
	
	Если Модифицированность Тогда
		Попытка
			ПредварительнаяЗапись=Истина;
			Записать();
			ПредварительнаяЗапись=Ложь;
			
		Исключение
			ПредварительнаяЗапись=Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;

	Объект.Выполнена=Истина;

	Если НЕ ДанныеЗадачиСохранены Тогда
		СохранитьДанныеЗадачи();
	КонецЕсли;

	СтруктураРезультатаФункции=КП_ЗадачиПроцессов.ВыполнитьОбработчикПослеВыполнения(Объект);
	
	Если НЕ СтруктураРезультатаФункции.ЗавершеноУспешно Тогда
		//если программная функция не выполнена, то и задачу считаем не выполненной
		Объект.Выполнена=Ложь;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Отметка выполнения не установлена из-за ошибки выполнения события ""ПослеВыполнения""';en='The mark is not installed error performance events ""PosleVypolneniya""'"));
		Возврат Ложь;
		
	КонецЕсли;
	
	ЗафиксироватьРеквизитыПроцессаВЗадаче();
		
	Попытка
		Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	Если НЕ Объект.ПометкаУдаления Тогда
		КП_Процессы.ОбработатьМаршрутКБП(Объект.БизнесПроцесс, Объект.Ссылка, СтруктураРезультатаФункции);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	Попытка
		Записать();
		СохранитьДанныеЗадачи();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	Состояние(НСтр("ru='Задача сохранена...';en='Task saved...'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектыНажатие(Элемент)
	
	Если КоличествоСсылокНаОбъекты=0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В списке нет объектов.';en='List contains no items.'"));
		Возврат;
		
	ИначеЕсли КоличествоСсылокНаОбъекты=1 Тогда
		//откроем документ
		СписокДокументов=КП_Процессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);
		Если СписокДокументов.Количество()=0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='В списке нет объектов.';en='List contains no items.'"));
			Возврат;
			
		Иначе
			ПервыйДокумент=СписокДокументов[0].Значение;
				
			Если КП_ОбщееСерверПС.ЭтоФайл(ПервыйДокумент) Тогда
				ДанныеФайла = КП_ОбщееСервер.ПолучитьДанныеФайлаДляОткрытия(ПервыйДокумент, Неопределено, ЭтаФорма.УникальныйИдентификатор);
				РаботаСФайламиКлиент.Открыть(ДанныеФайла);
			Иначе
				ПоказатьЗначение(Неопределено, ПервыйДокумент);
		
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		//количество больше единицы
		ФлагСписокДокументовРаскрыт=НЕ ФлагСписокДокументовРаскрыт;
		Элементы.ТаблицаСсылокПроцесса.Видимость=ФлагСписокДокументовРаскрыт;
		
	КонецЕсли;
	
	ДекорацияОбъектыНажатиеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ДекорацияОбъектыНажатиеЗавершение(ДополнительныеПараметры) Экспорт
    
    ПервыйДокумент = ДополнительныеПараметры.ПервыйДокумент;
    
    ДекорацияОбъектыНажатиеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъектыНажатиеФрагмент()
    
    УстановитьОформлениеГруппыСсылок();

КонецПроцедуры

Процедура УстановитьОформлениеГруппыСсылок()
	
	Если КоличествоСсылокНаОбъекты=0 Тогда
		Элементы.ДекорацияОбъекты.Видимость=Ложь;
		
	Иначе
		
		Элементы.ДекорацияОбъекты.Видимость=Истина;
		СписокДокументов=КП_Процессы.ПолучитьСписокСсылокПроцесса(БизнесПроцесс, Истина);

		Если КоличествоСсылокНаОбъекты=1 Тогда
			НаименованиеОбъекта=СписокДокументов[0].Представление;
			
			Если ПустаяСтрока(НаименованиеОбъекта) Тогда
				Элементы.ДекорацияОбъекты.Заголовок=НаименованиеСсылкиНаОбъект;
				
			Иначе
				Если СтрДлина(НаименованиеОбъекта)>100 Тогда
					НаименованиеОбъекта=Лев(НаименованиеОбъекта, 100-3)+"...";
				КонецЕсли;
				Элементы.ДекорацияОбъекты.Заголовок=НаименованиеОбъекта;
				
			КонецЕсли;
			
		Иначе
			
			Если ФлагСписокДокументовРаскрыт Тогда
				Элементы.ДекорацияОбъекты.Заголовок=НСтр("ru='Скрыть '; en='Hide ';")+НРег(НаименованиеСсылкиНаОбъект)+" ↑";
			Иначе
				Элементы.ДекорацияОбъекты.Заголовок=НаименованиеСсылкиНаОбъект+" ("+Формат(КоличествоСсылокНаОбъекты, "ЧЦ=10; ЧН=; ЧГ=")+" шт.) ↓";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОформлениеЭлементов()
	
	//определить наименования элементов формы по виду процесса
	УстановитьНаименованияПоВидуПроцесса();

	УстановитьОформлениеГруппыСсылок();
	
	Если ЗначениеЗаполнено(ОтчетИсполнителя) Тогда
		Элементы.ДекорацияТребуемыйРезультат.Видимость=Истина;
		ТекстТребуемогоРезультата=ОтчетИсполнителя.ОписаниеТребуемогоРезультата;
		
		Если ПустаяСтрока(ТекстТребуемогоРезультата) Тогда
			ТекстТребуемогоРезультата="Требуется результат в произвольном виде.";
			
		КонецЕсли;
		
		Элементы.ДекорацияТребуемыйРезультат.Заголовок=ТекстТребуемогоРезультата;
		
		Если СтрДлина(ТекстТребуемогоРезультата)>100 Тогда
			ТекстТребуемогоРезультата=Лев(ТекстТребуемогоРезультата, 100-3)+"...";
			
		Иначе
			ТекстТребуемогоРезультата=ЗавершитьПредложение(ТекстТребуемогоРезультата);
			
		КонецЕсли;
		
	Иначе
		Элементы.ДекорацияТребуемыйРезультат.Видимость=Ложь;
		
	КонецЕсли;
	
	//установим заголовок рамки Содержание
	
	Если Объект.ПометкаУдаления Тогда
		Элементы.ГруппаСодержание.Заголовок=НСтр("ru='Внимание! Задача отменена и помечена на удаление.'; en='Task canceled and marked for deletion.';");
		
	Иначе
		Если Объект.Выполнена Тогда
			Элементы.ГруппаСодержание.Заголовок=НСтр("ru='Задача выполнена'; en='Task completed';");
			
		ИначеЕсли ВыполнениеПроцент=0 Тогда
			Элементы.ГруппаСодержание.Заголовок=НСтр("ru='Новая задача'; en='New task';");
			
		Иначе
			Элементы.ГруппаСодержание.Заголовок=НСтр("ru='Задача в работе'; en='Task in proccess';");
			
		КонецЕсли;	
		
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ДатаВыполненияПлан) Тогда
		Элементы.ДекорацияДатаВыполненияНеУстановлена.Видимость=Ложь;
		Элементы.ДатаВыполненияПлан.Видимость=Истина;
		
	Иначе
		Элементы.ДатаВыполненияПлан.Видимость=Ложь;
		Элементы.ДекорацияДатаВыполненияНеУстановлена.Видимость=Истина;
		
	КонецЕсли;

	Попытка
		Элементы.БизнесПроцессАвтор.Заголовок=?(ЗначениеЗаполнено(Объект.ПереадресованоИзЗадачи), НСтр("ru='Переадресовано от'; en='Forwarded from';"), НСтр("ru='Инициатор'; en='Initiator';"));
	Исключение
		//
	КонецПопытки;
		
КонецПроцедуры

Процедура ОбновитьСписокСсылокПроцесса()
	ТаблицаСсылокПроцесса.Параметры.УстановитьЗначениеПараметра("БизнесПроцесс", БизнесПроцесс);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеЗадачи()
	
	СохранитьПараметрыЗадачи();	
	
	СохранитьРезультатыЗадачи();
	
	СохранитьРеквизитыЗадачи();

	КП_ЗадачиПроцессов.ВыполнитьОбработчикПослеЗаписи(Объект.Ссылка);	

КонецПроцедуры

Процедура ПрочитатьРезультатыЗадачи()
	
	СтруктураРезультатовЗадачи=КП_ЗадачиПроцессов.ПолучитьСтруктуруРезультатовЗадачи(Объект.Ссылка);
	
	БулевыйРезультат=Ложь;
	РезультатВыборКнопкамиЗначение=Ложь;
	
	СтруктураРезультатовЗадачи.Свойство("БулевыйРезультат", БулевыйРезультат);
	СтруктураРезультатовЗадачи.Свойство("ЛичнаяВстреча", РезультатЛичнаяВстреча);
	СтруктураРезультатовЗадачи.Свойство("ТелефонныйОтчет", РезультатТелефонныйЗвонок);
	СтруктураРезультатовЗадачи.Свойство("РезультатЧисло", РезультатЧисло);
	СтруктураРезультатовЗадачи.Свойство("РезультатДата", РезультатДата);
	СтруктураРезультатовЗадачи.Свойство("ПриложенныйФайл", РезультатФайл);
	СтруктураРезультатовЗадачи.Свойство("ПриложенныйДокумент", РезультатДокумент);
	
	РезультатДаНет=?(БулевыйРезультат=Неопределено ИЛИ НЕ БулевыйРезультат, 0, 1);
		
	Если БулевыйРезультат=Неопределено Тогда
		РезультатДаНет=-1; //не установлен
	Иначе
		РезультатДаНет=?(БулевыйРезультат, 1, 0);
	КонецЕсли;
	
	СтруктураРезультатовЗадачи.Свойство("ВыборКнопками", РезультатВыборКнопкамиЗначение);
	Если РезультатВыборКнопкамиЗначение=Неопределено  Тогда
		РезультатВыборКнопками=-1;
	Иначе
		РезультатВыборКнопками=?(РезультатВыборКнопкамиЗначение, 1, 0);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьРезультатыЗадачи()
	
	СтруктураРезультатовЗадачи=Новый Структура;
	
	Если Элементы.РезультатДаНет.Видимость Тогда
		Если РезультатДаНет=-1 Тогда
			РезультатБулево=Неопределено;
		Иначе
			РезультатБулево=(РезультатДаНет=1);
			СтруктураРезультатовЗадачи.Вставить("БулевыйРезультат", РезультатБулево);
		КонецЕсли;
				
	КонецЕсли;
	
	Если Элементы.ГруппаРезультатТекст.Видимость Тогда
		ТекстРезультата=РезультатТекстФорматированный.ПолучитьТекст();
		ТекстРезультата=Лев(ТекстРезультата, 1024);
		ТекстРезультата=СокрЛП(ТекстРезультата);
		СтруктураРезультатовЗадачи.Вставить("ТекстовоеСообщение", ТекстРезультата);
	КонецЕсли;

	
	Если Элементы.РезультатЛичнаяВстреча.Видимость Тогда
		СтруктураРезультатовЗадачи.Вставить("ЛичнаяВстреча", РезультатЛичнаяВстреча);
	КонецЕсли;
	
	Если Элементы.РезультатТелефонныйЗвонок.Видимость Тогда
		СтруктураРезультатовЗадачи.Вставить("ТелефонныйОтчет", РезультатТелефонныйЗвонок);
	КонецЕсли;
	
	Если Элементы.РезультатЧисло.Видимость Тогда
		СтруктураРезультатовЗадачи.Вставить("РезультатЧисло", РезультатЧисло);
	КонецЕсли;
	
	Если Элементы.РезультатДата.Видимость Тогда
		СтруктураРезультатовЗадачи.Вставить("РезультатДата", РезультатДата);
	КонецЕсли;
	
	Если Элементы.РезультатФайл.Видимость Тогда
		СтруктураРезультатовЗадачи.Вставить("ПриложенныйФайл", РезультатФайл);
	КонецЕсли;
	
	Если Элементы.РезультатДокумент.Видимость Тогда
		СтруктураРезультатовЗадачи.Вставить("ПриложенныйДокумент", РезультатДокумент);
	КонецЕсли;
	
	Если Элементы.РезультатВыборКнопками.Видимость Тогда
		Если РезультатВыборКнопками=-1 Тогда
			ТекущийВыборКнопками=Неопределено;
		Иначе
			ВыборКнопкамиБулево=(РезультатВыборКнопками=1);
			СтруктураРезультатовЗадачи.Вставить("ВыборКнопками", ВыборКнопкамиБулево);
		КонецЕсли;
		
	КонецЕсли;
	
	КП_ЗадачиПроцессов.СохранитьСтруктуруРезультатовЗадачи(СтруктураРезультатовЗадачи, Объект.Ссылка);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРецензияКонтролераНажатие(Элемент)
	
	ФлагРецензияРаскрыта=НЕ ФлагРецензияРаскрыта;
	
	УстановитьОтображениеРецензии();
	
КонецПроцедуры

Процедура УстановитьОтображениеРецензии()
	
	Элементы.ГруппаРецензияКонтролера.Видимость=ФлагРецензияРаскрыта;
	
	Если ФлагРецензияРаскрыта Тогда
		Элементы.ДекорацияРецензияКонтролера.Заголовок=НСтр("ru='↑ Рецензия'; en='↑ Review';");
		Элементы.ГруппаРецензияКонтролера.Видимость=Истина;
		ОбновитьСписокРецензий();
		
	Иначе
		Элементы.ДекорацияРецензияКонтролера.Заголовок=НСтр("ru='↓ Рецензия'; en='↓ Review';");
		Элементы.ГруппаРецензияКонтролера.Видимость=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСписокРецензий()
	
	РецензииКонтролера.Параметры.УстановитьЗначениеПараметра("ДатаКон", КонецДня(ТекущаяДата()));
	РецензииКонтролера.Параметры.УстановитьЗначениеПараметра("ТочкаКБП", ТочкаКБП);
	РецензииКонтролера.Параметры.УстановитьЗначениеПараметра("ИднИсполнителя", Объект.ИднИсполнителя);
	
	Если Объект.Выполнена Тогда
		//для выполненных задач показываем только рецензии, относящиеся к ним
		РецензииКонтролера.Параметры.УстановитьЗначениеПараметра("ЗадачаИсполнителя", Объект.Ссылка);
		
	Иначе
		//пока задача не выполнена показываем все 
		РецензииКонтролера.Параметры.УстановитьЗначениеПараметра("ЗадачаИсполнителя", NULL);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	//откроем форму выбора шаблона
	ПараметрыОтбора=Новый Структура;
	ПараметрыОтбора.Вставить("ВидПроцесса", ВидПроцесса);
	ПараметрыОтбора.Вставить("ОтчетИсполнителя", ОтчетИсполнителя);
		
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
	
	ВыбранныйШаблон = Неопределено;

	ОткрытьФорму("Справочник.КП_ШаблоныОбработкиЗадач.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ЗаполнитьПоШаблонуЗавершениеВыполнения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ЗаполнитьПоШаблонуЗавершениеВыполнения(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбранныйШаблон=Результат;	
    Если ВыбранныйШаблон=Неопределено Тогда
        Возврат;
        
    КонецЕсли;
    
    ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоШаблонуЗавершение", ЭтотОбъект, Новый Структура("ВыбранныйШаблон", ВыбранныйШаблон)), 
		НСтр("ru='Заполнить задачу по шаблону ""';en='Do you want to fill the task by template ""'")+СокрЛП(ВыбранныйШаблон)+"""?", 
		КП_ОбщееКлиент.КнопкиВопроса("Да, заполнить"),,, КП_ОбщееКлиент.ЗаголовокДиалога());

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбранныйШаблон = ДополнительныеПараметры.ВыбранныйШаблон;
    
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;	
    
    ЗаполнитьЗадачуПоШаблону(ВыбранныйШаблон);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыполнениеПроцентНажатие(Элемент)
	
	//покажем список выбора
	СписокВыполнения=Новый СписокЗначений;
	СписокВыполнения.Добавить(25, " 25 %");
	СписокВыполнения.Добавить(50, " 50 %");
	СписокВыполнения.Добавить(75, " 75 %");
	СписокВыполнения.Добавить(100,"100 %");
		
	РезультатВыбора = Неопределено;

		
	СписокВыполнения.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("Оповещение_ДекорацияВыполнениеПроцентНажатиеЗавершение", ЭтотОбъект), НСтр("ru='Выберите процент выполнения'; en='Please select procent';"), СписокВыполнения[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ДекорацияВыполнениеПроцентНажатиеЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора=ВыбранныйЭлемент;
    Если РезультатВыбора=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ВыполнениеПроцент=РезультатВыбора.Значение;
    
    Если ВыполнениеПроцент=100 Тогда
        Если НЕ ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
            Объект.ДатаВыполненияФакт=ТекущаяДата();
        КонецЕсли;
    Иначе
        Если ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
            Объект.ДатаВыполненияФакт=Неопределено;
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

Функция ЗавершитьПредложение(ИсходныйТекст)
	Если Прав(ИсходныйТекст, 1)<>"." Тогда
		Возврат ИсходныйТекст+".";
		
	Иначе
		Возврат ИсходныйТекст;
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьЗаголовок()
	Если Параметры.Ключ.Пустая() Тогда
		ЭтаФорма.АвтоЗаголовок=Истина;
		
	Иначе
		ЭтаФорма.АвтоЗаголовок=Ложь;
		ЭтаФорма.Заголовок=СокрЛП(Объект.Наименование);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыПроцесса()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Объект.Выполнена Тогда
		//заполним таблицу по зафиксированным данным
		ТаблицаРеквизитов=Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("РеквизитПроцесса");
		ТаблицаРеквизитов.Колонки.Добавить("ЗначениеРеквизита");
		ТаблицаРеквизитов.Колонки.Добавить("НаименованиеВФорме");
		ТаблицаРеквизитов.Колонки.Добавить("НаименованиеВФормеИностранное");
		ТаблицаРеквизитов.Колонки.Добавить("ТолькоПросмотр");
		ТаблицаРеквизитов.Колонки.Добавить("Обязательный");
			
		Для Каждого СтрокаТЧ Из Объект.ЗафиксированныеРеквизиты Цикл
			НоваяСтрока=ТаблицаРеквизитов.Добавить();
			НоваяСтрока.РеквизитПроцесса=СтрокаТЧ.РеквизитПроцесса;
			НоваяСтрока.ЗначениеРеквизита=СтрокаТЧ.ЗначениеРеквизита;
			НоваяСтрока.НаименованиеВФорме=СтрокаТЧ.НаименованиеВФорме;
			НоваяСтрока.НаименованиеВФормеИностранное=СтрокаТЧ.НаименованиеВФормеИностранное;
			НоваяСтрока.ТолькоПросмотр=Истина;
			НоваяСтрока.Обязательный=Ложь;
			
		КонецЦикла;
		
	Иначе
		//получим текущие значения
		ТаблицаРеквизитов=КП_ЗадачиПроцессов.ПолучитьТаблицуРеквизитовПроцессаВТочке(ТочкаКБП);	
		
	КонецЕсли;
	
	ТаблицаРеквизитов=СортироватьТаблицуРеквизитовСогласноПорядкуУказанномуВТочке(ТаблицаРеквизитов, ТочкаКБП);
	
	СписокРеквизитовПроцесса=Новый СписокЗначений;
	СписокОбязательныхРеквизитов=Новый СписокЗначений;
	
	//добавим реквизиты в структуру формы
	МассивДобавляемыхРеквизитов=Новый Массив;

	ИспользоватьИностранныеНаименования=Ложь;//КП_ОбщееСервер.ИспользоватьИностранныеНаименованияВФормахПроцессов();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
		
		РеквизитПроцесса=СтрокаТаблицы.РеквизитПроцесса;
		
		Если НЕ ЗначениеЗаполнено(РеквизитПроцесса) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найден реквизит процесса в форме. Возможно в настройке точки действия указаны неверные реквизиты формы.';en='Variable not found in the form.'"));
			Продолжить;
			
		КонецЕсли;
		
		ИмяРеквизита="РеквизитПроцесса_"+РеквизитПроцесса.ИмяРеквизитаДляФункций;	
		ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
		
		Если Элементы.Найти(ИмяРеквизита)=Неопределено Тогда
			//реквизита еще нет
			
			НаименованиеРеквизита=СтрокаТаблицы.НаименованиеВФорме;
			
			РеквизитПроцесса=СтрокаТаблицы.РеквизитПроцесса;
			НаименованиеРеквизита=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(СтрокаТаблицы.НаименованиеВФормеИностранное), СтрокаТаблицы.НаименованиеВФормеИностранное, СтрокаТаблицы.НаименованиеВФорме);
			
			Если ПустаяСтрока(НаименованиеРеквизита) Тогда
				НаименованиеРеквизита=СокрЛП(СтрокаТаблицы.РеквизитПроцесса);
			КонецЕсли;
			
			Если НЕ СтрокаТаблицы.ТолькоПросмотр И РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Гиперссылка Тогда
				//гиперссылка будет редактируемым полем для ввода
				УстановитьПривилегированныйРежим(Истина);
				КвалификаторСтроки=Новый КвалификаторыСтроки(РеквизитПроцесса.ТипРеквизита.РеквизитДлина);
				УстановитьПривилегированныйРежим(Ложь);
				ТипРеквизита=Новый ОписаниеТипов("Строка", , КвалификаторСтроки);			
			Иначе
				ТипРеквизита=КП_Процессы.ПолучитьОписаниеТипаРеквизитаПроцесса(РеквизитПроцесса);
			КонецЕсли;
	
			Попытка
				НовыйРеквизитФормы=Новый РеквизитФормы(ИмяРеквизита, ТипРеквизита, , НаименованиеРеквизита, Истина);
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизитФормы);

			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				
			КонецПопытки;
			 
		КонецЕсли;
		
	КонецЦикла; //по реквизитам процесса
	
	//добавим реквизиты в список реквизитов
	
	Попытка
		ЭтаФорма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
		
	КонецПопытки;
	
	//создадим элементы в форме задачи
	
	РазмещаемСлева=Истина;
	
	РазмещатьВДваСтолбца=ТочкаКБП.ДействиеРеквизитыРасполагатьВДваСтолбца;
	Если НЕ РазмещатьВДваСтолбца Тогда
		Элементы.ГруппаРеквизитыПраво.Видимость=Ложь;		
	КонецЕсли;
	
	Попытка
			
		Для Каждого СтрокаТаблицы Из ТаблицаРеквизитов Цикл
			
			РеквизитПроцесса=СтрокаТаблицы.РеквизитПроцесса;
			Если (РеквизитПроцесса=Null) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Реквизит процесса не найден.';en='Process variable not found.'"));
				Продолжить;
			КонецЕсли;
			
			ИмяРеквизита="РеквизитПроцесса_"+РеквизитПроцесса.ИмяРеквизитаДляФункций;	
			ЗначениеРеквизита=СтрокаТаблицы.ЗначениеРеквизита;
			РеквизитТолькоПросмотр=СтрокаТаблицы.ТолькоПросмотр;
			
			//создадим новые элементы в форме задачи
			Если НЕ Элементы.Найти(ИмяРеквизита)=Неопределено Тогда
				//такой реквизит уже существует
				Продолжить;
			КонецЕсли;
			
			НаименованиеТипаРеквизита=КП_Процессы.ПолучитьНаименованиеТипаРеквизита(РеквизитПроцесса);
			
			Если РазмещаемСлева ИЛИ НЕ РазмещатьВДваСтолбца Тогда
				РодительскийЭлемент=Элементы.ГруппаРеквизитыЛево;				
			Иначе
				РодительскийЭлемент=Элементы.ГруппаРеквизитыПраво;				
			КонецЕсли;
			
			Элемент=Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), РодительскийЭлемент);
			
			Если РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Булево Тогда
				//флажок
				
				Элемент.Вид=ВидПоляФормы.ПолеВвода;
				Элемент.ВыбиратьТип=Ложь;
				
			Иначе	
				//поле ввода
				Элемент.Вид=ВидПоляФормы.ПолеВвода;
				Элемент.ВыбиратьТип=Ложь;
				
				УстановитьПривилегированныйРежим(Истина);
				Если РеквизитПроцесса.ТипРеквизита.РеквизитДлина>100
					И РеквизитПроцесса.ТипРеквизита<>Справочники.КП_СписокМетаданных.Гиперссылка
					И РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Строки 
				Тогда
					Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Верх;
					Элемент.МногострочныйРежим=Истина;
				Иначе
					Элемент.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Лево;	
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);
								
			КонецЕсли;
			
			Элемент.ПутьКДанным=ИмяРеквизита; //привяжем в реквизиту
			
			Если РеквизитТолькоПросмотр Тогда
				Если РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Гиперссылка Тогда
					Элемент.Вид=ВидПоляФормы.ПолеНадписи;
				Иначе
					Элемент.ТолькоПросмотр=РеквизитТолькоПросмотр;
				КонецЕсли;
			КонецЕсли;
			
			СписокРеквизитовПроцесса.Добавить(РеквизитПроцесса, ИмяРеквизита, РеквизитТолькоПросмотр);
			
			Если СтрокаТаблицы.Обязательный Тогда
				СписокОбязательныхРеквизитов.Добавить(РеквизитПроцесса, ИмяРеквизита);
			КонецЕсли;
						
			Если НаименованиеТипаРеквизита="СправочникСсылка.ЗначенияСвойствОбъектов" Тогда
				Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ОткрытьНачалоВыбора");
				Элемент.УстановитьДействие("АвтоПодбор", "Подключаемый_АвтоПодбор");
				Элемент.УстановитьДействие("ОкончаниеВводаТекста", "Подключаемый_ОкончаниеВводаТекста");
				
			ИначеЕсли НаименованиеТипаРеквизита="СправочникСсылка.Файлы" Тогда
				Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ОткрытьНачалоВыбораФайла");				
				Элемент.УстановитьДействие("Открытие", "Подключаемый_ОткрытьФайл");
		
			КонецЕсли;
			
			Если РеквизитПроцесса.ТипРеквизита<>Справочники.КП_СписокМетаданных.Гиперссылка Тогда
				Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзменении");
			КонецЕсли;

			Если РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Числа 
				ИЛИ РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Дата 
			Тогда
				Элемент.КнопкаРегулирования=Истина;
				Элемент.РастягиватьПоГоризонтали=Ложь;
				
			КонецЕсли;
				
			Если НаименованиеТипаРеквизита="Дата" Тогда
				Элемент.КнопкаВыбора=Истина;
				Элемент.РастягиватьПоГоризонтали=Ложь;
				
			КонецЕсли;
			
			Если РеквизитПроцесса.ТипРеквизита.Родитель=Справочники.КП_СписокМетаданных.Числа Тогда
				Элемент.Ширина=16;
				
			ИначеЕсли РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Дата Тогда
				Элемент.Ширина=16;

			КонецЕсли;
			
			//установим значение реквизиту
			Если РеквизитТолькоПросмотр И РеквизитПроцесса.ТипРеквизита=Справочники.КП_СписокМетаданных.Гиперссылка Тогда
				ЗначениеРеквизита=Строка(ЗначениеРеквизита);
				СтрокаHtml=Новый ФорматированнаяСтрока(ЗначениеРеквизита,,,,ЗначениеРеквизита);
				ЭтаФорма[ИмяРеквизита]=СтрокаHtml;
			Иначе
				ЭтаФорма[ИмяРеквизита]=ЗначениеРеквизита;
			КонецЕсли;
			
			РазмещаемСлева=НЕ РазмещаемСлева; //переключим на другую часть формы
			
		КонецЦикла; //по реквизитам процесса
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

// Процедура является динамически подключаемой и подключается к элементу 
// реквизита процесса на событие "ПриИзменении"
&НаКлиенте
Процедура Подключаемый_ПриИзменении(Элемент, СтандартнаяОбработка)
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте                                                 
Процедура Оповещение_НажатиеРеквизитаГиперссылки(Результат, ДопПараметры) Экспорт	
	Состояние("Открыта ссылка "+ДопПараметры.Гирпессылка);
КонецПроцедуры

// Процедура подключается к элементу реквизита процесса на событие "Открытие"
&НаКлиенте
Процедура Подключаемый_ОткрытьВнешнююСсылкуДополнительногоРеквизита(Элемент, СтандартнаяОбработка)
	//ЗначениеСсылки=ЭтаФорма[Элемент.Имя];
	//Если ЗначениеСсылки=Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//СтандартнаяОбработка=Ложь;
	//СтруктураСсылки=аДОРаботаСВнешнимиБазами.ПолучитьСтруктуруВнешнейСсылки(ЗначениеСсылки);
	
	//Если СтруктураСсылки.ЭтоСсылкаНаОбъект Тогда
	//	//ссылка на объект
	//	
	//	НаименованиеВидаОбъекта=СокрЛП(СтруктураСсылки.ВидМетаданных);
	//	Если НаименованиеВидаОбъекта<>"Документы" И НаименованиеВидаОбъекта<>"Справочники" Тогда
	//		ПоказатьПредупреждение(Неопределено, НСтр("ru='Внимание! Можно открыть только ссылку на документ или справочник.';en='You can open only a reference to a document or directory.'"));
	//		Возврат;
	//		
	//	КонецЕсли;
	//	
	//	аДОРаботаСВнешнимиБазами.ОткрытьВнешнююСсылку(СтруктураСсылки, СтруктураСсылки.НомерКод, СтруктураСсылки.ДатаАктуальности);
	//	
	//Иначе
		////ссылка на список объектов
		//СтруктураОбъекта=аДООбщееСервер.ПолучитьСтруктуруВнешнегоОбъекта(СтруктураСсылки.ВнешниеМетаданные);
		//аДОРаботаСВнешнимиБазами.ОткрытьВнешнийОбъект(СтруктураОбъекта, СтруктураСсылки.ВнешниеМетаданные);
		//
	//КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьЭлементов()
	
	ЗадачаВыполнена=Объект.Выполнена;
	
	ЭтоИсполнитель=ТекущийПользователь=Объект.Исполнитель;
	ЭтоКонтролер=(ТекущийПользователь=БизнесПроцесс.Контролер);
	ЭтоИнициатор=(ТекущийПользователь=БизнесПроцесс.Автор);
	
	ЭтоРольПолныеПрава=КП_ОбщееСерверПС.ЭтоРольПолныеПрава();
	КП_ОбщееСерверПС.ЭтоРольАдминистрированиеПроцессов();
	
	Если КП_ОбщееСервер.ПолучитьЗначениеКонстанты("КП_ИзменятьПлановыеДаты") Тогда	
		Элементы.ДатаВыполненияПлан.ТолькоПросмотр=НЕ (ЭтоИнициатор 
			ИЛИ ЭтоРольПолныеПрава 
			ИЛИ КП_ОбщееСерверПС.ЭтоРольАдминистрированиеПроцессов()
			ИЛИ КП_ОбщееСерверПС.ЭтоРольАдминистрированиеЗадач());
	КонецЕсли;
	
	Если НЕ Константы.КП_ЗапретитьИнициаторамКБПВыполнятьЗадачиЗаИсполнителя.Получить() Тогда
		//инициатором разрешили выступать в качестве исполниетлей
		Если ЭтоИнициатор Тогда
			ЭтоИсполнитель=Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЭтоИсполнитель И ЭтоРольПолныеПрава Тогда
		//разрешим работать как исполнитель
		ЭтоИсполнитель=Истина;
	КонецЕсли;
	
	Элементы.ВыполнениеПроцент.ТолькоПросмотр=ЗадачаВыполнена ИЛИ НЕ ЭтоИсполнитель;
	Элементы.ДатаВыполненияФакт.ТолькоПросмотр=ЗадачаВыполнена ИЛИ НЕ ЭтоИсполнитель;
	Элементы.ГруппаРезультатИсполнителя.ТолькоПросмотр=ЗадачаВыполнена ИЛИ НЕ ЭтоИсполнитель;
	Элементы.ГруппаРеквизиты.ТолькоПросмотр=ЗадачаВыполнена ИЛИ НЕ ЭтоИсполнитель;
	Элементы.ФормаВыполнитьЗадачу.Доступность=ЭтоИсполнитель;
	Элементы.ФормаЗаполнитьПоШаблону.Доступность=ЭтоИсполнитель;
	Элементы.ФормаСохранитьИзменения.Доступность=ЭтоИсполнитель;
	Элементы.РезультатВыборКнопками.Доступность=ЭтоИсполнитель;
	Элементы[НаименованиеКнопкиПереадресации].Доступность=ЭтоИсполнитель;
	
	Элементы.КнопкаПринято.Доступность=ЭтоИсполнитель; //обход ошибки веб-клиента
	Элементы.КнопкаОтклонено.Доступность=ЭтоИсполнитель; //обход ошибки веб-клиента
	
	Элементы.ДекорацияВыполнениеПроцент.Доступность=ЭтоИсполнитель И НЕ ЗадачаВыполнена;
	
	Если ЗадачаВыполнена Тогда
		Элементы.ФормаВыполнитьЗадачу.КнопкаПоУмолчанию=Ложь;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию=Истина;
		Элементы.ФормаВыполнитьЗадачу.Видимость=Ложь;
		Элементы.ФормаЗаполнитьПоШаблону.Видимость=Ложь;
		Элементы.ФормаЗакрыть.Заголовок=НСтр("ru='   Закрыть     ';en='   Close     ';");
		Элементы.ФормаСохранитьИзменения.Видимость=Ложь;
		Элементы[НаименованиеКнопкиПереадресации].Видимость=Ложь;
			
	Иначе
		//задача не выполнена
		Если Элементы.ФормаВыполнитьЗадачу.Видимость Тогда
			Элементы.ФормаВыполнитьЗадачу.КнопкаПоУмолчанию=Истина;
		КонецЕсли;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию=Ложь;
		Элементы.ФормаЗакрыть.Заголовок=НСтр("ru='Закрыть';en='Close';");
		Элементы.ФормаСохранитьИзменения.Видимость=Истина;
		
		Если Элементы.РезультатВыборКнопками.Видимость Тогда
			Элементы.ФормаВыполнитьЗадачу.Видимость=Ложь;
		КонецЕсли;
		
	КонецЕсли;
		
	Элементы.СписокПереадресованыхЗадач.Видимость=Объект.ПереадресованоДругому;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗадачуПоШаблону(ШаблонВыполненияЗадачи)
	
	ВыполнениеПроцент=ШаблонВыполненияЗадачи.ВыполнениеПроцент;
	
	Если ВыполнениеПроцент=100 И НЕ ЗначениеЗаполнено(Объект.ДатаВыполненияФакт) Тогда
		Объект.ДатаВыполненияФакт=ТекущаяДата();
		
	КонецЕсли;
	
	//проверим, какие результаты требуются для отчета и заполним их по шаблону

	Для Каждого ЭлементСписка Из СписокТребуемыхРезультатов Цикл
		ВидОтчета=ЭлементСписка.Значение;
		ИмяРеквизита=КП_ЗадачиПроцессов.ПолучитьИмяРеквизитаОтчетаИзВидаОтчета(ВидОтчета);
		
		Попытка
			Если ИмяРеквизита="РезультатТекстФорматированный" Тогда
				РезультатТекстФорматированный=ШаблонВыполненияЗадачи.РезультатТекстХранилище.Получить();
				
			ИначеЕсли ИмяРеквизита="РезультатДаНет" Тогда
				ЭтаФорма[ИмяРеквизита]=ШаблонВыполненияЗадачи.РезультатБулево;
					
			ИначеЕсли ИмяРеквизита="РезультатВыборКнопками" Тогда					
				Продолжить;
					
			Иначе
				ЭтаФорма[ИмяРеквизита]=ШаблонВыполненияЗадачи[ИмяРеквизита];
				
			КонецЕсли;
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;

	КонецЦикла;
	
	ШрифтПользователя=КП_ОбщееСервер.ПолучитьШрифтПользователя();
	Элементы.ТекстЗаданияФорматированный.Шрифт=ШрифтПользователя;
	
КонецПроцедуры

Процедура ОформитьЭлементыРезультата()
	
	УстановитьВидимостьЭлементовРезультата(Ложь);
	
	СтрокаКнопок="";
	
	Для Каждого ЭлементСписка Из СписокТребуемыхРезультатов Цикл
		ВидОтчета=ЭлементСписка.Значение;
		НаименованиеРезультата=ЭлементСписка.Представление;
		
		ИмяРеквизита=КП_ЗадачиПроцессов.ПолучитьИмяРеквизитаОтчетаИзВидаОтчета(ВидОтчета);
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			ТекстОшибки=НСтр("ru='Не найден реквизит в виде отчета ""';en='Cannot get variable from report kind ""';")+СокрЛП(ВидОтчета)+" / "+СокрЛП(Объект.Ссылка)+""""; 
			ЗаписьЖурналаРегистрации("Ошибка оформления элементов результата задачи", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЭлементРезультата=Элементы[ИмяРеквизита];
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
		ЭлементРезультата.Видимость=Истина;
		Если ИмяРеквизита="РезультатТекстФорматированный" Тогда
			//изменять видимость будем группе
			Элементы.ГруппаРезультатТекст.Видимость=Истина;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НаименованиеРезультата) Тогда
			Если ИмяРеквизита="РезультатВыборКнопками" Тогда
				//запомним строку кнопок, потом будем их переименовывать
				СтрокаКнопок=НаименованиеРезультата;
			Иначе
				ЭлементРезультата.Заголовок=НаименованиеРезультата;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; //по списку результатов
	
	Если Элементы.РезультатЛичнаяВстреча.Видимость И Элементы.РезультатТелефонныйЗвонок.Видимость Тогда
		Элементы.ДекорацияОтметкиВыполнения.Видимость=Истина;	
		
	КонецЕсли;
	
	Если Элементы.РезультатВыборКнопками.Видимость Тогда
		Если НЕ ПустаяСтрока(СтрокаКнопок) Тогда
			
			СтруктураКнопок=КП_ЗадачиПроцессов.ПолучитьСтруктуруНаименованийКнопокРезультата(СтрокаКнопок);
			
			Если СтруктураКнопок=Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Разделитель кнопок ""|"" задан не корректно.';en='Separator buttons ""|"" is set incorrectly.'"));
				
			Иначе
				
				Элементы.КнопкаПринято.Заголовок=СтруктураКнопок.ЛеваяКнопка;
				Элементы.КнопкаОтклонено.Заголовок=СтруктураКнопок.ПраваяКнопка;
				
				//установим отметки в зависимости от результата (если есть)
				Если РезультатВыборКнопками=Неопределено Тогда
					Элементы.КнопкаОтклонено.Пометка=Ложь;
					Элементы.КнопкаПринято.Пометка=Ложь;
					
				ИначеЕсли РезультатВыборКнопками=1 Тогда
					Элементы.КнопкаОтклонено.Пометка=Ложь;
					Элементы.КнопкаПринято.Пометка=Истина;
					
				ИначеЕсли РезультатВыборКнопками=0 Тогда
					Элементы.КнопкаПринято.Пометка=Ложь;
					Элементы.КнопкаОтклонено.Пометка=Истина;

				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найдена строка наименований кнопок выбора результата.';en='Found line items buttons result.'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовРезультата(ВидимостьЭлемента)
	
	Элементы.РезультатДаНет.Видимость=ВидимостьЭлемента;
	Элементы.РезультатДата.Видимость=ВидимостьЭлемента;
	Элементы.РезультатЧисло.Видимость=ВидимостьЭлемента;
	Элементы.ГруппаРезультатТекст.Видимость=ВидимостьЭлемента;
	Элементы.РезультатФайл.Видимость=ВидимостьЭлемента;
	Элементы.РезультатДокумент.Видимость=ВидимостьЭлемента;
	Элементы.РезультатЛичнаяВстреча.Видимость=ВидимостьЭлемента;
	Элементы.РезультатТелефонныйЗвонок.Видимость=ВидимостьЭлемента;
	Элементы.ДекорацияОтметкиВыполнения.Видимость=ВидимостьЭлемента;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатТелефонныйЗвонокПриИзменении(Элемент)
	Модифицированность=Истина;
	
КонецПроцедуры

Процедура СохранитьРеквизитыЗадачи()
	
	ТаблицаЗначенийРеквизитов=КП_Процессы.ПолучитьТаблицуРеквизитовПроцесса(БизнесПроцесс,,Истина);
	Если ТаблицаЗначенийРеквизитов.Количество()=0 Тогда
		//реквизитов нет
		Возврат;
	КонецЕсли;
	
	//создадим пустую таблицу на основе сущестующей
	ТаблицаИзмененныхРеквизитов=Новый ТаблицаЗначений;
	ТаблицаИзмененныхРеквизитов=ТаблицаЗначенийРеквизитов.Скопировать();
	ТаблицаИзмененныхРеквизитов.Очистить();
	
	//сохраним изменившиеся реквизиты
	
	Для Каждого ЭлементСписка Из СписокРеквизитовПроцесса Цикл
		Если ЭлементСписка.Пометка Тогда
			//реквизит только для чтения
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаВФорме=ЭлементСписка.Представление;
		ИмяРеквизита=СтрЗаменить(ИмяРеквизитаВФорме, "РеквизитПроцесса_", "");
		
		Попытка
			ЗначениеРеквизита=ЭтаФорма[ИмяРеквизитаВФорме];
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
		//найдем строку с текущим значением реквизита
		СтрокаТекущегоЗначения=ТаблицаЗначенийРеквизитов.Найти(ИмяРеквизита, "ИмяРеквизитаПроцесса");
		Если СтрокаТекущегоЗначения=Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось найти реквизит'; en='Variable not found:';")+ИмяРеквизита);
			Продолжить;
		КонецЕсли;
		
		//получим текущее значение реквизита
		ТекущееЗначение=СтрокаТекущегоЗначения.ЗначениеРеквизита;
		
		Если ТекущееЗначение<>ЗначениеРеквизита Тогда
			НоваяСтрока=ТаблицаИзмененныхРеквизитов.Добавить();
			НоваяСтрока.ЗначениеРеквизита=ЗначениеРеквизита;
			НоваяСтрока.РеквизитПроцесса=СтрокаТекущегоЗначения.РеквизитПроцесса;
			НоваяСтрока.ИмяРеквизитаПроцесса=СтрокаТекущегоЗначения.ИмяРеквизитаПроцесса;
			НоваяСтрока.Порядок=СтрокаТекущегоЗначения.Порядок;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаИзмененныхРеквизитов.Количество()>0 Тогда
		Примечание=СокрЛП(Объект.Ссылка);
		КП_Процессы.СохранитьТаблицуРеквизитов(БизнесПроцесс, ТаблицаИзмененныхРеквизитов, , Примечание);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗафиксироватьРеквизитыПроцессаВЗадаче()
	
	Объект.ЗафиксированныеРеквизиты.Очистить();
	
	ИспользоватьИностранныеНаименования=КП_ОбщееСервер.ИспользоватьИностранныеНаименованияВФормахПроцессов();
	
	//зафиксируем значения реквизитов на момент выполнения задачи
	Для Каждого ЭлементСписка Из СписокРеквизитовПроцесса Цикл
		РеквизитПроцесса=ЭлементСписка.Значение;
		ИмяРеквизита=ЭлементСписка.Представление;
		
		Попытка
			ЗначениеРеквизита=ЭтаФорма[ИмяРеквизита];
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Продолжить;
			
		КонецПопытки;
		
		НоваяСтрока=Объект.ЗафиксированныеРеквизиты.Добавить();
		НоваяСтрока.РеквизитПроцесса=РеквизитПроцесса;
		НоваяСтрока.ЗначениеРеквизита=ЗначениеРеквизита;
		
		ИмяВФорме=ЭлементСписка.Представление;
		
		НаименованиеВФорме=РеквизитПроцесса.НаименованиеВФорме;
		НаименованиеВФормеИностранное=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(РеквизитПроцесса.НаименованиеВФормеИностранное), РеквизитПроцесса.НаименованиеВФормеИностранное, РеквизитПроцесса.НаименованиеВФорме);
		
		НоваяСтрока.НаименованиеВФорме=НаименованиеВФорме;
		НоваяСтрока.НаименованиеВФормеИностранное=НаименованиеВФормеИностранное;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьНаименованияПоВидуПроцесса()
	
	//найдем точку-прототип в виде процесса
	Если ЗначениеЗаполнено(ТочкаКБП.ТочкаОснование) Тогда
		ТочкаВидаКБП=ТочкаКБП.ТочкаОснование;
	Иначе
		ТочкаВидаКБП=ТочкаКБП;
	КонецЕсли;
	
	ИспользоватьИностранныеНаименования=Ложь; //КП_ОбщееСервер.ИспользоватьИностранныеНаименованияВФормахПроцессов();
	
	Попытка
		СтруктураОтбора=Новый Структура("ЭлементФормы, ТипФормы");

		ТипФормы=0; //исполнитель
		
		СтруктураОтбора.ЭлементФормы="Кнопка ""Выполнить""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Элементы.ФормаВыполнитьЗадачу.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
			Элементы.ФормаВыполнитьЗадачу.Видимость=НайденныеСтроки[0].Видимость;
			
		КонецЕсли;
		
		СтруктураОтбора.ЭлементФормы="Кнопка ""Переадресовать""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Элементы[НаименованиеКнопкиПереадресации].Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
			Элементы[НаименованиеКнопкиПереадресации].Видимость=НайденныеСтроки[0].Видимость;
		КонецЕсли;
		
		СтруктураОтбора.ЭлементФормы="Поле ""Исполнитель""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Элементы.Исполнитель.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
			Элементы.Исполнитель.Видимость=НайденныеСтроки[0].Видимость;
		КонецЕсли;
				
		СтруктураОтбора.ЭлементФормы="Кнопка ""Шаблон""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Элементы.ФормаЗаполнитьПоШаблону.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
			Элементы.ФормаЗаполнитьПоШаблону.Видимость=НайденныеСтроки[0].Видимость;
		КонецЕсли;
		СтруктураОтбора.ЭлементФормы="Гиперссылка ""Объекты""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		НаименованиеСсылкиНаОбъект=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		
		СтруктураОтбора.ЭлементФормы="Гиперссылка ""Список объектов""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			НаименованиеСпискаСсылокНаОбъекты=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		КонецЕсли;
		
		СтруктураОтбора.ЭлементФормы="Раздел ""Реквизиты процесса""";
		СтруктураОтбора.ТипФормы=ТипФормы;
		НайденныеСтроки=ТочкаВидаКБП.НаименованияЭлементовЗадач.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			Элементы.ГруппаРеквизиты.Заголовок=?(ИспользоватьИностранныеНаименования И НЕ ПустаяСтрока(НайденныеСтроки[0].НаименованиеЭлементаИностранное), НайденныеСтроки[0].НаименованиеЭлементаИностранное, НайденныеСтроки[0].НаименованиеЭлемента);
		КонецЕсли;
		
	Исключение
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереадресоватьЗадачу(Команда)
	Если Объект.Выполнена Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Задача уже выполнена. Переадресация не возможна.'; en='Task already completed. Forwarding is not possible.';"), 60, КП_ОбщееКлиент.ЗаголовокДиалога());
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуПереадресации();
	
КонецПроцедуры

Функция УдалитьПоследнююТочкуВСтроке(ИсходнаяСтрока)
	
	Если Прав(ИсходнаяСтрока, 1)="." Тогда
		Возврат Лев(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока)-1);
		
	Иначе
		Возврат ИсходнаяСтрока;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбработкаСобытияПередВыполнением()
	
	//выполним текст функции ПередВыполнением, в случае, если переменная Отказ будет равна Истина, отменим выполнение задачи исполнителем
	
	СтруктураРезультатаВыполнения=Новый Структура("ЗавершеноУспешно, Отказ", Истина, Ложь);
	
	ИсходныйТекстФункции=ТочкаКБП.ДействиеТекстФункцииПередВыполнением; //обработчик ПередВыполнением
	Если КП_ЗадачиПроцессов.ТекстФункцииСобытияПустой(ИсходныйТекстФункции) Тогда
		Возврат СтруктураРезультатаВыполнения;
	КонецЕсли;
			
	//получим параметры процесса
	ПараметрыПроцесса=КП_Процессы.ПолучитьСтруктуруПараметровКБП(БизнесПроцесс);
	
	//определим исполнителя
	ИсполнительЗадачи=Объект.Исполнитель;
		
	ТекстФункции=КП_Процессы.СформироватьТекстПроцедурыОбработки(ИсходныйТекстФункции);
	
	Если НЕ ПустаяСтрока(ТекстФункции) Тогда
	
		//подготовим аргументы программной функции
		ОбрабатыватьСтруктуруПараметровПроцесса=Истина; 
		ОбрабатыватьСтруктуруПараметровЗадачи=Ложь;
		ОбрабатыватьСтруктуруРеквизитовПроцесса=Истина;
		ОбрабатыватьСтруктуруОтчетаИсполнителя=Истина; //Ложь;
		
		СтуктураРезультата=КП_Процессы.ПодготовитьИВыполнитьПрограммнуюФункцию(ТочкаКБП, ТекстФункции, ИсполнительЗадачи, БизнесПроцесс, Объект, 
				ОбрабатыватьСтруктуруРеквизитовПроцесса,
				ОбрабатыватьСтруктуруПараметровПроцесса,
				ОбрабатыватьСтруктуруПараметровЗадачи,
				ОбрабатыватьСтруктуруОтчетаИсполнителя);
				
		Если СтуктураРезультата=Неопределено Тогда
			СтруктураРезультатаВыполнения.ЗавершеноУспешно=Ложь;
			СтруктураРезультатаВыполнения.Отказ=Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Ошибка выполнения обработки ""ПередВыполнением"" в точке ""';en='Runtime Error handling ""PeredVypolneniem"" at ""'")+СокрЛП(ТочкаКБП)+"""."+ОписаниеОшибки());
			Возврат СтруктураРезультатаВыполнения;
			
		КонецЕсли;
		
		Если СтуктураРезультата.Свойство("Отказ") И СтуктураРезультата.Отказ Тогда
			СтруктураРезультатаВыполнения.ЗавершеноУспешно=Истина;
			СтруктураРезультатаВыполнения.Отказ=Истина;
			
			Возврат СтруктураРезультатаВыполнения;
						
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат СтруктураРезультатаВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОткрытьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка=Ложь;
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, "РеквизитПроцесса_", "");
	
	РеквизитПроцесса=КП_Процессы.НайтиРеквизитПроцессаПоИмени(Объект.БизнесПроцесс, ИмяРеквизита);
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	//откроем форму с установленным отбором
	ПараметрыОтбора=Новый Структура("Владелец", КП_Процессы.ПолучитьСвязьРеквизитаСПВХ(РеквизитПроцесса));
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ВыбранноеЗначение = Неопределено;
	
	ОткрытьФорму("Справочник.ЗначенияСвойствОбъектов.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_ОткрытьНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНачалоВыбораЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
    
    Если ВыбранноеЗначение=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ЭтаФорма[Элемент.Имя]=ВыбранноеЗначение;

КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеРеквизитов()
	
	РеквизитыЗаполнены=Истина;
	
	//проверим опицию отключения контроля результатов и реквизитов
	Если ОтчетИсполнителя.ОтключитьКонтрольРезультатаЕслиВыбранБулевыйРезультатЛожь Тогда
		//проверим, не равны ли булевые результаты Ложь
		Если РезультатДаНет=0 ИЛИ РезультатВыборКнопками=0 Тогда
			//обнаружен отрицательный булевый результат, проверки других реквизитов не требуются
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из СписокОбязательныхРеквизитов Цикл
		ИмяРеквизита=ЭлементСписка.Представление;
		РеквизитПроцесса=ЭлементСписка.Значение;
		ЗначениеРеквизита=ЭтаФорма[ИмяРеквизита];
		
		Если ТипЗнч(ЗначениеРеквизита)=Тип("Булево") Тогда
			Продолжить;
			
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Элементы[ИмяРеквизита].ЦветРамки=WebЦвета.Красный;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Обязательный реквизит ""';en='Mandatory variable ""'")+СокрЛП(РеквизитПроцесса)+НСтр("ru='"" не заполнен.'; en='"" is not set.';"));
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РеквизитыЗаполнены;
	
КонецФункции

&НаКлиенте
Процедура РезультатФайлНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//выберем внешний файл
	
	СтандартнаяОбработка=Ложь;
	
	Если Параметры.Ключ.Пустая() Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_РезультатФайлНачалоВыбораЗавершение", ЭтотОбъект), НСтр("ru='Потребуется запись элемента. Продолжить?';en='System needs to save data. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет, , , КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_РезультатФайлНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
        
    КонецЕсли;
    
    Попытка
        Записать();
        
    Исключение
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
        
    КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ФайлДобавитьПослеДобавленияФайлаСДиска(Модуль, ПараметрыВыполнения) Экспорт 
	
	ВладелецФайла=ПараметрыВыполнения.ВладелецФайла;
	
	РезультатФайл=ВладелецФайла;	
	
	Модифицированность=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСсылокПроцессаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	СтрокаТЧ=Элемент.ТекущиеДанные;
	Если СтрокаТЧ=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект=СтрокаТЧ.Объект;
		
	Если КП_ОбщееСерверПС.ЭтоФайл(СсылкаНаОбъект) Тогда
		ДанныеФайла = КП_ОбщееСервер.ПолучитьДанныеФайлаДляОткрытия(СсылкаНаОбъект, Неопределено, ЭтаФорма.УникальныйИдентификатор);
		РаботаСФайламиКлиент.Открыть(ДанныеФайла);
		
		
	Иначе
		ПоказатьЗначение(Неопределено, СсылкаНаОбъект);
		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Тип объекта не определен.';en='Object type is undefined.'"));

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПереадресованныхЗадач(Команда)
	
	ПараметрыФормы=Новый Структура;
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("ИсходнаяЗадача", Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ФормаОбработки=ПолучитьФорму("Обработка.КП_ПереадресацияЗадачи.Форма.ФормаСписка", ПараметрыФормы);
	ФормаОбработки.Объект.ИсходнаяЗадача=Объект.Ссылка;
	
	ФормаОбработки.Открыть();	
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаПринято(Команда)
	Если Объект.Выполнена Тогда
		Состояние(НСтр("ru='Задача уже выполнена. Изменения запрещены.';en='The task is done. Changes not allowed.'"));
		Возврат;
		
	КонецЕсли;

	СтруктураПараметровВыполнения=Новый Структура("НажатаяКнопка", Элементы.КнопкаПринято.Имя);	
   	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ВыполнитьЗадачуОтветНаПодтверждение", ЭтотОбъект, СтруктураПараметровВыполнения), НСтр("ru='Задача будет выполнена с результатом ""';en='The task will be performed with the result ""'")+СокрЛП(Элементы.КнопкаПринято.Заголовок)+НСтр("ru='"". Продолжить?';"), РежимДиалогаВопрос.ДаНет,,, КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_КнопкаПринятоЗавершениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    РезультатВыполнения=Результат;
    
    Если НЕ РезультатВыполнения Тогда
        РезультатВыборКнопками=-1;
        ВыполнитьОбработкуОповещения(Оповещение);
        Возврат;
        
    КонецЕсли;
    
    Элементы.КнопкаОтклонено.Пометка=Ложь;
    Элементы.КнопкаПринято.Пометка=Истина;
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтклонено(Команда)
	Если Объект.Выполнена Тогда
		Состояние(НСтр("ru='Задача уже выполнена. Изменения запрещены.';en='The task is done. Changes not allowed.'"));
		Возврат;
	КонецЕсли;

	СтруктураПараметровВыполнения=Новый Структура("НажатаяКнопка", Элементы.КнопкаОтклонено.Имя);	
   	ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ВыполнитьЗадачуОтветНаПодтверждение", ЭтотОбъект, СтруктураПараметровВыполнения), НСтр("ru='Задача будет выполнена с результатом ""';en='The task will be performed with the result ""'")+СокрЛП(Элементы.КнопкаОтклонено.Заголовок)+НСтр("ru='"". Продолжить?';"), РежимДиалогаВопрос.ДаНет,,, КП_ОбщееКлиент.ЗаголовокДиалога());
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_КнопкаОтклоненоЗавершениеЗавершение(Результат, ДополнительныеПараметры1) Экспорт
    
    Оповещение = ДополнительныеПараметры1.Оповещение;
    
    
    РезультатВыполнения=Результат;
    
    Если НЕ РезультатВыполнения Тогда
        РезультатВыборКнопками=-1;
        ВыполнитьОбработкуОповещения(Оповещение);
        Возврат;
        
    КонецЕсли;
    
    РезультатВыборКнопками=0;
    Элементы.КнопкаПринято.Пометка=Ложь;
    Элементы.КнопкаОтклонено.Пометка=Истина;
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ПриОткрытииЗавершение(ДополнительныеПараметры) Экспорт
    
    Попытка
        Закрыть();
    Исключение
    КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗадачиПоШаблону(Команда)
	
	Если Параметры.Ключ.Пустая() ИЛИ Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ПечатьЗадачиПоШаблонуЗавершение", ЭтотОбъект, Новый Структура("Команда", Команда)), НСтр("ru='Задача будет записана. Продолжить?';en='The task will be saved. Do you want to continue?'"), РежимДиалогаВопрос.ДаНет,,, КП_ОбщееКлиент.ЗаголовокДиалога());
        Возврат;
		
	КонецЕсли;
	
	ПечатьЗадачиПоШаблонуФрагмент(Команда);
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ПечатьЗадачиПоШаблонуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Команда = ДополнительныеПараметры.Команда;
    
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        КП_ОбщееКлиент.СообщитьОбОшибке(ОписаниеОшибки());
        Возврат;
    КонецПопытки;
    
    
    ПечатьЗадачиПоШаблонуФрагмент(Команда);

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗадачиПоШаблонуФрагмент(Знач Команда)
    
    Перем ИмяКоманды, КодШаблона, ШаблонФайла;
    
    ИмяКоманды=Команда.Имя;
    КодШаблона=СтрЗаменить(ИмяКоманды, "КомандаПечати_", "");
    
    ШаблонФайла=КП_РаботаСФайлами.ПолучитьШаблонКомандыПечатьПоКоду(КодШаблона, КП_ОбщееСервер.ПолучитьРеквизитОбъекта(ТочкаКБП, "ТочкаОснование"));
    
    Если ШаблонФайла=Неопределено Тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Внимание! Не найден шаблон файла по коду ';")+КодШаблона);
        Возврат;
    КонецЕсли;
    
    //напечатаем ШаблонФайла
    
    ПечатьЗадачиИсполнителя(ШаблонФайла);

КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗадачиИсполнителя(ФайлСсылка)
	
	ТекстСообщения = НСтр("ru='Выполняется формирование печатной формы...';en='Performed forming the printed form ...'");
	Состояние(ТекстСообщения);
	
	ОбъектСсылка=Объект.Ссылка;
	
	//получим данные
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Формирование печатной формы начато. Получение данных макета.", ОбъектСсылка, ФайлСсылка);
	
	МакетИДанныеОбъекта=ПолучитьМакетИДанныеЗадачи(ФайлСсылка);
	
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Вывод макета.", ОбъектСсылка, ФайлСсылка);

	КП_РаботаСФайламиКлиент.НапечататьЗадачуПользователя(ОбъектСсылка, ФайлСсылка, МакетИДанныеОбъекта, МакетИДанныеОбъекта.ЛокальныйКаталогФайловПечати);
	
	ЗаписатьВЖурналСобытийФормированиеПечатнойФормы("Формирование закончено.", ОбъектСсылка, ФайлСсылка);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВЖурналСобытийФормированиеПечатнойФормы(ТекстСообщения, ДокументСсылка, ФайлСсылка)
	
	ЗаписьЖурналаРегистрации("Формирование задачи по шаблону.", УровеньЖурналаРегистрации.Информация, ДокументСсылка, ФайлСсылка, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетИДанныеЗадачи(ФайлСсылка)
	ПроцессСсылка=ЭтаФорма.РеквизитФормыВЗначение("Объект");
	МакетИДанныеОбъекта=Задачи.КП_Задача.ПолучитьДанныеПечати(ПроцессСсылка, ФайлСсылка);
	МакетИДанныеОбъекта.Вставить("ЛокальныйКаталогФайловПечати", УправлениеПечатью.ПолучитьЛокальныйКаталогФайловПечати());
	Возврат МакетИДанныеОбъекта;
	
КонецФункции

&НаКлиенте
Процедура РезультатДокументПриИзменении(Элемент)
	Модифицированность=Истина;

КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеРезультатов()
	
	Если ОтчетИсполнителя.ОтключитьКонтрольРезультатаЕслиВыбранБулевыйРезультатЛожь Тогда
		//проверим, не равны ли булевые результаты Ложь
		Если РезультатДаНет=0 ИЛИ РезультатВыборКнопками=0 Тогда
			//обнаружен отрицательный булевый результат, проверки других реквизитов не требуются
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ВсеОбязательныеРеквизитыЗаполнены=Истина; //далее може быть переопределено
	
	Для Каждого ЭлементСписка Из СписокТребуемыхРезультатов Цикл
		
		ОтчетЭлементаСоответствует=Истина;
		
		ВидОтчета=ЭлементСписка.Значение;
		Обязательный=ЭлементСписка.Пометка;
		
		//получим данные из формы
		ИмяРеквизита=КП_ЗадачиПроцессов.ПолучитьИмяРеквизитаОтчетаИзВидаОтчета(ВидОтчета);
		Если ПустаяСтрока(ИмяРеквизита) Тогда
			ТекстОшибки=НСтр("ru='Не найден реквизит в виде отчета ""';en='Cannot get variable from report kind ""';")+СокрЛП(ВидОтчета)+" / "+СокрЛП(Объект.Ссылка)+""""; 
			ЗаписьЖурналаРегистрации("Ошибка оформления элементов результата задачи", УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Если ВидОтчета=ПредопределенноеЗначение("ПланВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ТекстовоеСообщение") Тогда
			//проверим не реквизит формы, а реквизит объекта
			ЗначениеРеквизита=СокрЛП(ЭтаФорма[ИмяРеквизита].ПолучитьТекст());
			ЗначениеРеквизита=СтрЗаменить(ЗначениеРеквизита, "<введите результат>", "")
			
		Иначе
			//проверим реквизиты формы
			Попытка
				ЗначениеРеквизита=ЭтаФорма[ИмяРеквизита];
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
		//восстановим цвет
		Попытка
			Если Элементы[ИмяРеквизита].ЦветРамки=WebЦвета.Красный Тогда
				Элементы[ИмяРеквизита].ЦветРамки=Новый Цвет; //Авто
			КонецЕсли;
			
		Исключение
			//не получилось установить цвет рамки
		КонецПопытки;
		
		//проверим заполнение реквизита
		Если ВидОтчета=ПредопределенноеЗначение("ПланВидовХарактеристик.КП_РезультатыИсполнителейЗадач.БулевыйРезультат") Тогда
			//проврим заполнение по числовым данным
			Если ЗначениеРеквизита=-1 И Обязательный Тогда
				//значение исполнитель не менял
				ВсеОбязательныеРеквизитыЗаполнены=Ложь;
				
				Попытка
					Элементы[ИмяРеквизита].ЦветРамки=WebЦвета.Красный;
				Исключение
					//не получилось установить цвет рамки
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ВидОтчета=ПредопределенноеЗначение("ПланВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ВыборКнопками") Тогда
			//проврим заполнение по числовым данным
			Если ЗначениеРеквизита=-1 Тогда
				//кнопки исполнитель не нажимал
				ОтчетЭлементаСоответствует=Ложь;
				Попытка
					Элементы[ИмяРеквизита].ЦветРамки=WebЦвета.Красный;
				Исключение
					//не получилось установить цвет рамки
				КонецПопытки;

			КонецЕсли;
			
		Иначе
			//другие типы реквизитов
			Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) И Обязательный Тогда
				ВсеОбязательныеРеквизитыЗаполнены=Ложь;
				Попытка
					Элементы[ИмяРеквизита].ЦветРамки=WebЦвета.Красный;
				Исключение
					//не получилось установить цвет рамки
				КонецПопытки;

			КонецЕсли;
			
		КонецЕсли;
		
		//проверим отметки о встрече и телефонном разговоре
		Если ВидОтчета=ПредопределенноеЗначение("ПланВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ТелефонныйОтчет") 
			ИЛИ ВидОтчета=ПредопределенноеЗначение("ПланВидовХарактеристик.КП_РезультатыИсполнителейЗадач.ЛичнаяВстреча") 
			
		Тогда
		Если НЕ ЗначениеРеквизита И Обязательный Тогда
				ВсеОбязательныеРеквизитыЗаполнены=Ложь;
				Попытка
					Элементы[ИмяРеквизита].ЦветРамки=WebЦвета.Красный;
				Исключение
					//не получилось установить цвет рамки
				КонецПопытки;
					
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла; //список требуемых результатов
	
	//результат соответствует, так как все проверки были пройдены
			
	Возврат ВсеОбязательныеРеквизитыЗаполнены;		
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПереадресации()
	//откроем форму переадресации и переадресуем задачу
	
	ПараметрыФормы=Новый Структура;
	ПараметрыЗаполнения=Новый Структура;
	ПараметрыЗаполнения.Вставить("ИсходнаяЗадача", Объект.Ссылка);
	ПараметрыФормы.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОткрытьФорму("Обработка.КП_ПереадресацияЗадачи.Форма.ФормаПереадресации", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_ОткрытьФормуПереадресацииЗавершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОткрытьФормуПереадресацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    //ФормаОбработки.Объект.ИсходнаяЗадача=Объект.Ссылка;
    ИсходныйИсполнитель=Объект.Исполнитель;
    
    Если Результат=Неопределено Тогда
        Возврат;
        
    КонецЕсли;
    
    Если ВыполнитьПереадресацию(Результат) Тогда
        НовыйИсполнитель=Результат.НовыйИсполнитель;
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Задача успешно переадресована '; en='Task is successfully forwarded ';")+КП_ОбщееСервер.Падеж(СокрЛП(НовыйИсполнитель), 3));
        КП_Процессы.ЗаписатьВЖурналПроцесса("Задача переадресована от "+КП_ОбщееСервер.Падеж(СокрЛП(ИсходныйИсполнитель), 2)+" к "+КП_ОбщееСервер.Падеж(СокрЛП(НовыйИсполнитель), 3), БизнесПроцесс, ТочкаКБП, 2);	
        
        //изменим доступность элементов формы задачи
        УстановитьДоступностьЭлементов();
        
    КонецЕсли;

	Элементы.Исполнитель.Шрифт=Новый Шрифт(,,Истина);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПереадресацию(СтруктураРезультата);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйИсполнитель=СтруктураРезультата.НовыйИсполнитель;
	ТекстЗадачиИзменен=СтруктураРезультата.ТекстЗадачиИзменен;
	НовыйТекстЗадачи=СтруктураРезультата.НовыйТекстЗадачи;
	ДатаВыполненияПлан=СтруктураРезультата.ДатаВыполненияПлан;
	НаименованиеЗадачи=СтруктураРезультата.НаименованиеЗадачи;
	
	ИсходныйИсполнитель=Объект.Исполнитель;
	
	//заменим данные в задаче
	Объект.Исполнитель=НовыйИсполнитель;
	Объект.ДатаВыполненияПлан=ДатаВыполненияПлан;
	Объект.Наименование=НаименованиеЗадачи;
	Если ТекстЗадачиИзменен Тогда
		ТекстЗаданияФорматированный=Новый ФорматированныйДокумент;
		ТекстЗаданияФорматированный.УстановитьHTML(НовыйТекстЗадачи, Новый Структура);

	КонецЕсли;
	
	Попытка
		Записать();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;
	
	//зафиксируем в регистре для последующего использования данной точке
	КП_ЗадачиПроцессов.ЗафиксироватьЗаменуИсполнителяПереадресциейВТочке(ТочкаКБП, ИсходныйИсполнитель, НовыйИсполнитель);

	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СортироватьТаблицуРеквизитовСогласноПорядкуУказанномуВТочке(НесортированнаяТаблицаРеквизитов, ТочкаКБП)
	
	//отсортируем таблицу реквизитов для корректного расположения в форме согласно порядку, 
	//указанному в форме точки в табличной части РеквизитыПроцесса
	
	//подготовим новую таблицу
	НоваяТаблица=НесортированнаяТаблицаРеквизитов.Скопировать();
	НоваяТаблица.Очистить();
	
	Для Каждого СтрокаТЧ Из ТочкаКБП.РеквизитыПроцесса Цикл
		РеквизитПроцесса=СтрокаТЧ.РеквизитПроцесса;
		СтрокаНесортированнойТаблицы=НесортированнаяТаблицаРеквизитов.Найти(РеквизитПроцесса, "РеквизитПроцесса");
		Если СтрокаНесортированнойТаблицы=Неопределено Тогда
			//нашли реквизит, который не будет участвовать в форме исполнителя
			Продолжить;		
		КонецЕсли;
		
		//заполним строку новой таблицы
		НоваяСтрока=НоваяТаблица.Добавить();
		НоваяСтрока.РеквизитПроцесса=СтрокаНесортированнойТаблицы.РеквизитПроцесса;
		НоваяСтрока.НаименованиеВФорме=СтрокаНесортированнойТаблицы.НаименованиеВФорме;
		НоваяСтрока.НаименованиеВФормеИностранное=СтрокаНесортированнойТаблицы.НаименованиеВФормеИностранное;
		НоваяСтрока.Обязательный=СтрокаНесортированнойТаблицы.Обязательный;
		НоваяСтрока.ТолькоПросмотр=СтрокаНесортированнойТаблицы.ТолькоПросмотр;
		НоваяСтрока.ЗначениеРеквизита=СтрокаНесортированнойТаблицы.ЗначениеРеквизита;
		
	КонецЦикла;
	
	Возврат НоваяТаблица;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
	
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, "РеквизитПроцесса_", "");
	
	РеквизитПроцесса=КП_Процессы.НайтиРеквизитПроцессаПоИмени(Объект.БизнесПроцесс, ИмяРеквизита);
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	         	
	НайденноеЗначение=КП_ОбщееСервер.ПолучитьЗначениеРеквизитаСвойствПоНаименованию(РеквизитПроцесса, Текст); 
	
	Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
		ДанныеВыбора=НайденноеЗначение;
		ЭтаФорма[Элемент.Имя]=НайденноеЗначение;     

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита=СтрЗаменить(Элемент.Имя, "РеквизитПроцесса_", "");
	
	РеквизитПроцесса=КП_Процессы.НайтиРеквизитПроцессаПоИмени(Объект.БизнесПроцесс, ИмяРеквизита);
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	         	
	НайденноеЗначение=КП_ОбщееСервер.ПолучитьЗначениеРеквизитаСвойствПоНаименованию(РеквизитПроцесса, Текст); 
	
	Если ЗначениеЗаполнено(НайденноеЗначение) Тогда
		ДанныеВыбора=НайденноеЗначение;
		ЭтаФорма[Элемент.Имя]=НайденноеЗначение;
		
	Иначе
		СтандартнаяОбработка=Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйПроцесс(Команда)
	
	ЗначениеПоУмолчанию=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("ЗадачаИсполнителя", "ВыбранныйДляПереадресацииВидПроцесса", СокрЛП(ТекущийПользователь));
	
	ПараметрыФормы=Новый Структура("РежимВыбора", Истина);
	Если ЗначениеЗаполнено(ЗначениеПоУмолчанию) Тогда
		ПараметрыФормы.Вставить("ТекущееЗначениеВыбора", ЗначениеПоУмолчанию);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КП_ВидыПроцессов.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Оповещение_СоздатьНовыйПроцессЗавершение", ЭтотОбъект, Новый Структура("ПараметрыФормы", ПараметрыФормы)),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_СоздатьНовыйПроцессЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ПараметрыФормы = ДополнительныеПараметры.ПараметрыФормы;
    
    Если Результат=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    КП_ОбщееСервер.СохранитьНастройкуПользователя("ЗадачаИсполнителя", "ВыбранныйДляПереадресацииВидПроцесса", Результат, СокрЛП(ТекущийПользователь));
    
    //создадим бизнес-процесс с выбранным видом
    НовыйПроцессСсылка=СоздатьПроцессСервером(Результат);
    
    Если НЕ ЗначениеЗаполнено(НовыйПроцессСсылка) Тогда
        Возврат;
    КонецЕсли;
    
    //откроем новый процесс на закладке "Исполнители"
    ПараметрыФормы=Новый Структура("Ключ", НовыйПроцессСсылка);
    ПараметрыФормы.Вставить("ОткрытьОсновныхИсполнителей", Истина);
    ФормаПроцесса=ПолучитьФорму("БизнесПроцесс.КП_БизнесПроцесс.ФормаОбъекта", ПараметрыФормы);
    
    ФормаПроцесса.Открыть();
    
    Состояние(НСтр("ru='Создан новый бизнес-процесс'; en='New process has been created';"));

КонецПроцедуры

&НаСервере
Функция СоздатьПроцессСервером(ВыбранныйВид)
	
	НовыйПроцесс=КП_Процессы.СоздатьБизнесПроцесс(ВыбранныйВид, Объект.Исполнитель);
	НовыйПроцессОбъект=НовыйПроцесс.ПолучитьОбъект();
	НовыйПроцессОбъект.Комментарий="Создано из задачи """+СокрЛП(Объект.Наименование)+"""";
	
	//скопируем в процесс объекты
    СписокСсылокПроцесса=КП_Процессы.ПолучитьСписокСсылокПроцесса(Объект.БизнесПроцесс, Ложь);
	КП_Процессы.ЗаписатьСписокСсылокПроцесса(НовыйПроцессОбъект.Ссылка, СписокСсылокПроцесса);

	Попытка
		НовыйПроцессОбъект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат НовыйПроцессОбъект.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_НачалоВыбораВнешнейСсылкиДополнительногоРеквизита(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ИмяРеквизита=СтрЗаменить(Элемент.Имя, "РеквизитПроцесса_", "");
	
	РеквизитПроцесса=КП_Процессы.НайтиРеквизитПроцессаПоИмени(Объект.БизнесПроцесс, ИмяРеквизита);
	Если РеквизитПроцесса=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	ТипРеквизита=КП_ОбщееСервер.ПолучитьРеквизитОбъекта(РеквизитПроцесса, "ТипРеквизита");
	
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ВыборТипаВнешнегоОбъектаЗавершение(Результат, ИмяЭлемента) Экспорт
    
	Если Результат=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[ИмяЭлемента]=Результат;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФайл(Элемент, СтандартнаяОбработка)
	ЗначениеСсылки=ЭтаФорма[Элемент.Имя];
	Если НЕ ЗначениеЗаполнено(ЗначениеСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка=Ложь;
	
	ДанныеФайла = КП_ОбщееСервер.ПолучитьДанныеФайлаДляОткрытия(ЗначениеСсылки, Неопределено, УникальныйИдентификатор);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНачалоВыбораФайла(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка=Ложь;
	
	ПараметрыОтбора=Новый Структура("ВладелецФайлов", Объект.БизнесПроцесс);
	ПараметрыФормы=Новый Структура("Отбор", ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ВыбранноеЗначение = Неопределено;
	
	ОткрытьФорму("Справочник.Файлы.Форма.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("Подключаемый_ОткрытьНачалоВыбораФайлаЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьНачалоВыбораФайлаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
    
    Элемент = ДополнительныеПараметры.Элемент;
    
    Если ВыбранноеЗначение=Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    ЭтаФорма[Элемент.Имя]=ВыбранноеЗначение;

КонецПроцедуры

&НаКлиенте
Процедура Напомнить(Команда)
	Если Параметры.Ключ.Пустая() Тогда
		//обычно не записанных задач не бывает
		Возврат;
	КонецЕсли;
	
	Если Объект.Выполнена Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("Оповещение_ОтветНаВопросОНапоминании", ЭтаФорма, Новый Структура), 
			"Задача уже выполнена. Продолжить установку напоминания?", РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНапоминания();
		
КонецПроцедуры

&НаКлиенте
Процедура Оповещение_ОтветНаВопросОНапоминании(Результат, ДопПараметры) Экспорт
	
	Если Результат=КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНапоминания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНапоминания()
	
	ПараметрыФормы = Новый Структура("Источник", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.НапоминанияПользователя.Форма.Напоминание", ПараметрыФормы,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область НастройкаЦветовОформления

&НаКлиенте
Процедура ЗаписатьНастроенныеЦвета()
	
	Если НЕ ПустаяСтрока(АдресХраненияНастройкиЦветов) Тогда
		МассивНастройкиЦветов=ПолучитьИзВременногоХранилища(АдресХраненияНастройкиЦветов);
		Если ЗначениеЗаполнено(МассивНастройкиЦветов) Тогда
			СтруктураЦвета=Новый Структура;
			СтруктураЦвета.Вставить("ЦветТекста", МассивНастройкиЦветов[0]);
			СтруктураЦвета.Вставить("ЦветФона", МассивНастройкиЦветов[1]);
			СтруктураЦвета.Вставить("ШрифтЖирный", МассивНастройкиЦветов[2]);
			СтруктураЦвета.Вставить("ШрифтНаклонный", МассивНастройкиЦветов[3]);
			КП_ОформлениеСтрокСервер.ЗаписатьСтруктуруЦветаОбъекта(Объект.Ссылка, СтруктураЦвета, ТекущийПользователь);
		Иначе
			//адрес хранения был заполнен, но массив настройки теперь пустой
			СписокОбъектов=Новый СписокЗначений;
			СписокОбъектов.Добавить(Объект.Ссылка);
			КП_ОформлениеСтрокСервер.УдалитьОформлениеСпискаОбъектов(СписокОбъектов, ТекущийПользователь);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОформлениеЗаголовка()
			
	Если НЕ Параметры.Ключ.Пустая() Тогда		
		
		ИмяРеквизита="Наименование";
		
		СтруктураЦвета=КП_ОформлениеСтрокСервер.ПолучитьСтруктуруЦветаОбъекта(Объект.Ссылка, ТекущийПользователь);
		
		Если СтруктураЦвета<>Неопределено Тогда
			МассивНастройкиЦветов=Новый Массив;
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ЦветТекста);
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ЦветФона);
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ШрифтЖирный);
			МассивНастройкиЦветов.Добавить(СтруктураЦвета.ШрифтНаклонный);
			
			АдресХраненияНастройкиЦветов=ПоместитьВоВременноеХранилище(МассивНастройкиЦветов, ЭтаФорма.УникальныйИдентификатор);
			
			КП_ОформлениеСтрокКлиент.УстановитьОформлениеНаименования(Элементы[ИмяРеквизита], МассивНастройкиЦветов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти //НастройкаЦветовОформления
