#Область СлужебныеПроцедурыИФункции

// Функция получает данные для печати бизнес-процесса во внешний табличный документ
// Параметры:
//		Документ - содержит ссылку на документ 
//		ФайлСсылка - содержит ссылку на файл шаблона
// Возвращаемое значение: Структура данных
&НаСервере
Функция ПолучитьДанныеПечати(БизнесПроцесс, ФайлСсылка) Экспорт
	
	БизнесПроцессСсылка=БизнесПроцесс.Ссылка;
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	//соберем данные по документу
	ДанныеОбъектаПоМакетам = Новый Соответствие;
	
	СтруктураМакета=ПолучитьДанныеОбъекта(БизнесПроцессСсылка, ФайлСсылка);
	Если СтруктураМакета=Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ДанныеОбъектаПоМакетам.Вставить("макет", СтруктураМакета);
		
	//установим данные документа в соответствие с ним в объекте "Соответствие"
	ДанныеПоВсемОбъектам.Вставить(БизнесПроцессСсылка, ДанныеОбъектаПоМакетам);
	
	//составим соответствие между именем макета и и его двоичными данными (полученными из файла)
	ДвоичныеДанныеМакетов = Новый Соответствие;
	
	ТипыМакетов = Новый Соответствие; //тут будем хранить соответствие имени макета и его типа (DOC или ODT)
	
	ОписаниеОбластей = Новый Соответствие; //тут будем хранить описание областей документа и имени макета

	Если ФайлСсылка.ТекущаяВерсия.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Файл не содержит ни одной версии.';en='The file does not contain any version.'"));
		Возврат Новый Структура;
	КонецЕсли;
	
	ДвоичныеДанныеФайлаМакета=КП_РаботаСФайлами.ПолучитьДвоичныеДанныеФайла(ФайлСсылка, ФайлСсылка.ТекущаяВерсия);
	
	РасширениеФайла=ВРег(ФайлСсылка.ТекущаяВерсия.Расширение);
	ТипыМакетов.Вставить("макет", РасширениеФайла); //или ODT
	ДвоичныеДанныеМакетов.Вставить("макет", ДвоичныеДанныеФайлаМакета);
	СтруктураИспользуемыхОбластейМакета=ПолучитьОписаниеОбластейМакетаЗадачи(ФайлСсылка);
	ОписаниеОбластей.Вставить("макет", СтруктураИспользуемыхОбластейМакета);
											
    //вернем структуру данных печати в которой будут данные документа(ов) и описание макетов для них
	Возврат Новый Структура("Данные, Макеты",
							ДанныеПоВсемОбъектам,
							Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
											ОписаниеОбластей,
											ТипыМакетов,
											ДвоичныеДанныеМакетов));
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеОбъекта(СсылкаНаОбъект, ФайлСсылка)
	
	Объект = СсылкаНаОбъект.Ссылка.ПолучитьОбъект();
	
	ДанныеОбъекта = Новый Структура;
	
	//выберем данные по запросу к подчиненному справочнику
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						 |	КП_ПараметрыШаблоновФайлов.Ссылка,
						 |	КП_ПараметрыШаблоновФайлов.ИсточникДанных КАК ИсточникДанных,
						 |	КП_ПараметрыШаблоновФайлов.ИсточникДанных.Реквизит КАК Реквизит,
						 |	КП_ПараметрыШаблоновФайлов.ИсточникДанных.ТабличнаяЧасть КАК ТабличнаяЧасть,
						 |	КП_ПараметрыШаблоновФайлов.ИсточникДанных.Дополнение КАК Дополнение,
						 |	КП_ПараметрыШаблоновФайлов.ИсточникДанных.ТипДанныхТега КАК ТипДанных,
						 |	КП_ПараметрыШаблоновФайлов.ИсточникДанных.ИсточникДанныхОснование КАК ИсточникДанныхОснование,
						 |	КП_ПараметрыШаблоновФайлов.ИсточникДанных.НомерСтрокиТабличнойЧасти КАК НомерСтрокиТабличнойЧасти,
						 |	КП_ПараметрыШаблоновФайлов.ИсточникДанных.ФункцияПреобразования КАК ФункцияПреобразования,
						 |	КП_ПараметрыШаблоновФайлов.ИсточникДанных.СтрокаФормата КАК СтрокаФормата,
						 |	КП_ПараметрыШаблоновФайлов.Наименование КАК Наименование
						 |ИЗ
						 |	Справочник.КП_ПараметрыШаблоновФайлов КАК КП_ПараметрыШаблоновФайлов
						 |ГДЕ
						 |	КП_ПараметрыШаблоновФайлов.ПометкаУдаления = ЛОЖЬ
						 |	И КП_ПараметрыШаблоновФайлов.Владелец = &Владелец
						 |	И КП_ПараметрыШаблоновФайлов.Отключено = ЛОЖЬ");
						 
	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	Выборка=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Количество()=0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не задан ни один параметр шаблона. Вывод не будет выполнен.';en='Do not set any template parameter. Withdrawal has been completed.'"));
		Возврат Неопределено;
		
	КонецЕсли;
	
	СсылкаНаПроцесс=СсылкаНаОбъект.БизнесПроцесс;

	Пока Выборка.Следующий() Цикл
		ШаблонПараметров=Выборка.Ссылка;
		
		ИмяИсточника=СокрЛП(Выборка.Наименование);
		ИмяРеквизита=СокрЛП(Выборка.Реквизит);			
		ИмяДополнения=СокрЛП(Выборка.Дополнение);
		ИмяТабличнойЧасти=КП_ОбщееСервер.ПолучитьИмяТЧПоПредставлению(Выборка.ТабличнаяЧасть);
		
		ТипДанных=Выборка.ТипДанных;
		Если ТипДанных=Перечисления.КП_ТипыДанныхТегов.Функция 
			ИЛИ ТипДанных=Перечисления.КП_ТипыДанныхТегов.Системное 
			ИЛИ ТипДанных=Перечисления.КП_ТипыДанныхТегов.ИсточникДанных 
			ИЛИ ТипДанных=Перечисления.КП_ТипыДанныхТегов.ПараметрЗадачиИсполнителя 
		Тогда
			
			ДанныеИсточника=КП_ОбщееСервер.ПолучитьДанныеИсточника(Выборка.ИсточникДанных, СсылкаНаОбъект, ИмяИсточника);
			ДанныеИсточника=КП_ОбщееСервер.ПрименитьФункциюПреобразования(ДанныеИсточника, Выборка.Ссылка);
			
			ДанныеОбъекта.Вставить(ИмяИсточника, СокрЛП(ДанныеИсточника));
			
		ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.ПараметрБизнесПроцесса 
			ИЛИ ТипДанных=Перечисления.КП_ТипыДанныхТегов.ПеременнаяБизнесПроцесса
			ИЛИ (ТипДанных=Перечисления.КП_ТипыДанныхТегов.ТаблицаБизнесПроцесса И Выборка.НомерСтрокиТабличнойЧасти>0)
		Тогда
	
			ДанныеИсточника=КП_ОбщееСервер.ПолучитьДанныеИсточника(Выборка.ИсточникДанных, СсылкаНаПроцесс, ИмяИсточника);
			ДанныеИсточника=КП_ОбщееСервер.ПрименитьФункциюПреобразования(ДанныеИсточника, Выборка.Ссылка);
			
			ДанныеОбъекта.Вставить(ИмяИсточника, СокрЛП(ДанныеИсточника));
			
		ИначеЕсли ТипДанных=Перечисления.КП_ТипыДанныхТегов.ТаблицаБизнесПроцесса Тогда
	
			//возможно два варианта обработки табличных частей, простой по конкеретному номеру и как массив
			
			Если Выборка.НомерСтрокиТабличнойЧасти=0 Тогда
				//обработка массива строк табличных частей
				//ДанныеОбъекта.Вставить(ИмяИсточника, СокрЛП(ДанныеИсточника));
				//ДанныеОбъекта=ДанныеИсточника;
				
				ДанныеИсточника=КП_ОбщееСервер.ПолучитьДанныеИсточника(Выборка.ИсточникДанных, СсылкаНаПроцесс, ИмяИсточника, ДанныеОбъекта);	
				//ДанныеОбъекта.Вставить(ИмяТабличнойЧасти, ДанныеИсточника);
				
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
		
	//возвращается структура описывающая реквизиты объекта, при этом:
	//а) реквизит шапки представлен отдельной записью структуры
	//б) табличная часть представлена отдельной записью структуры с типом "Массив"
	//в таком массиве находятся элементы, каждый их которых содержит структуру реквизитов 
	//строки табличной части
	
	Возврат ДанныеОбъекта;
	
КонецФункции

&НаСервере
Функция ПолучитьОписаниеОбластейМакетаЗадачи(ФайлСсылка)
	                          
	ОписаниеОбластей = Новый Структура; //возвращается структура, содержащая имена областей и их типы
	
	//заполним выборкой по подчиненному файлу справочнику
	
	//ВыборкаОбласти=аДОРаботаСФайлами.ПолучитьВыборкуОбластейШаблона(ФайлСсылка);
	Запрос=Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                    |	КП_ОбластиШаблоновФайлов.Наименование,
	                    |	КП_ОбластиШаблоновФайлов.ТипОбласти,
	                    |	КП_ОбластиШаблоновФайлов.ПорядокВывода КАК ПорядокВывода
	                    |ИЗ
	                    |	Справочник.КП_ОбластиШаблоновФайлов КАК КП_ОбластиШаблоновФайлов
	                    |ГДЕ
	                    |	КП_ОбластиШаблоновФайлов.ПометкаУдаления = ЛОЖЬ
	                    |	И КП_ОбластиШаблоновФайлов.Владелец = &Файл
	                    |	И КП_ОбластиШаблоновФайлов.Отключено = ЛОЖЬ
	                    |
	                    |УПОРЯДОЧИТЬ ПО
	                    |	ПорядокВывода ВОЗР");
						
	Запрос.УстановитьПараметр("Файл", ФайлСсылка);
	
	ВыборкаОбласти=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	
	Пока ВыборкаОбласти.Следующий() Цикл
		ИмяОбласти=СокрЛП(ВыборкаОбласти.Наименование);
		ИмяОбласти=КП_ФормированиеПоШаблонам.ПолучитьПреобразованныйТипОбласти(ИмяОбласти);
		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, ИмяОбласти, СокрЛП(ВыборкаОбласти.ТипОбласти));
	КонецЦикла;
			
	Возврат ОписаниеОбластей;
	
КонецФункции

Функция РеквизитыНедоступныеДляИсточникаРабочегоПроцесса(ТипДействия = Неопределено) Экспорт
	
	НедоступныеРеквизиты = Новый Массив;
	
	//недоступные реквизиты задачи
	НедоступныеРеквизиты.Добавить("НомерПрохода");
	НедоступныеРеквизиты.Добавить("КонтрольРезультаты");
	НедоступныеРеквизиты.Добавить("ИднИсполнителя");
	НедоступныеРеквизиты.Добавить("ХранилищеТекстовогоРезультата");
	НедоступныеРеквизиты.Добавить("ХранилищеТекстаЗадания");
	НедоступныеРеквизиты.Добавить("ПереадресованоДругому");
	НедоступныеРеквизиты.Добавить("ПереадресованоИзЗадачи");	
	
	Возврат НедоступныеРеквизиты;
	
КонецФункции

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	test=1;	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * Контакт         - Произвольный - контакт, которому принадлежит адрес электрнной почты.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//                                              если шаблон содержит произвольные параметры:
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - Произвольный - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка, Структура - ссылка на объект являющийся источником данных, либо структура,
//    * Предмет               - ЛюбаяСсылка - ссылка на объект являющийся источником данных
//    * ПроизвольныеПараметры - Соответствие - заполненный список произвольных параметров.//
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры
