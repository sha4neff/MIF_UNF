
#Область ОписаниеПеременных

&НаКлиенте
Перем СтруктураЗаписейПараметровУчета;

&НаКлиенте
Перем ВыводилисьДанныеДляБанка;

#КонецОбласти


///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
		Иначе
			Организация = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнаяОрганизация");
			Если Не ЗначениеЗаполнено(Организация) Тогда
				Организация =УправлениеНебольшойФирмойСервер.ПолучитьПредопределеннуюОрганизацию();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СобытиеКалендаря) Тогда
		Объект.СобытиеКалендаря = Параметры.СобытиеКалендаря;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СостояниеСобытия) Тогда
		
		Если ЗначениеЗаполнено(Параметры.СостояниеСобытия) Тогда
			
			Объект.СостояниеСобытия = Параметры.СостояниеСобытия;
			
		Иначе
			
			Объект.СостояниеСобытия = КалендарьОтчетности.ПолучитьСостояниеСобытияКалендаря(
				Объект.Организация,
				Объект.СобытиеКалендаря);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДатыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.СобытиеКалендаря, "ДатаДокументаОбработкиСобытия,ДатаОкончанияСобытия,ДатаНачалаДокументов,ДатаОкончанияДокументов");
	
	ДокументВзаиморасчетовСБюджетом = РегламентированнаяОтчетностьУСН.ПолучитьДокументВзаиморасчетовСБюджетомПатент(
		Объект.Организация,
		Справочники.ВидыНалогов.Патент,
		ДатыСобытия.ДатаДокументаОбработкиСобытия,
		ДатыСобытия.ДатаОкончанияСобытия,
		Истина,
		Объект.СобытиеКалендаря);
	
	ПолучитьДанныеОтчетности();
	ЗаписьКалендаря = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Объект.Организация,Объект.СобытиеКалендаря);
	Патент = Объект.СобытиеКалендаря.Основание;
	
	РасходыУменьшающиеНалог = СуммаРасходовУменьшающиеНалог(ЗаписьКалендаря, Патент);
	
	Элементы.СформироватьУведомление.Видимость = РасходыУменьшающиеНалог > 0;
	
	// Определяем номер патента
	НомерПатента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СобытиеКалендаря.Основание, "НомерПатента");
	
	ПериодЗадачиПредставление = ПредставлениеПериода(
		ДатыСобытия.ДатаНачалаДокументов,
		КонецДня(ДатыСобытия.ДатаОкончанияДокументов),
		"ФП=Истина");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться") Тогда
		
		Элементы.СтраницаПатент.ТекущаяСтраница = Элементы.РезультатРасчета;
		
	ИначеЕсли Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Уплатить") Тогда
		
		Элементы.СтраницаПатент.ТекущаяСтраница = Элементы.РезультатРасчета;
		
	Иначе
		
		Элементы.СтраницаПатент.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементов();
	
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	ВыводилисьДанныеДляБанка = Ложь;
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаТекущаяОрганизация" Тогда
		Если Окно.Основное Тогда
			ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/navigationpoint/НалогиИОтчетность");
		Иначе
			Закрыть();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеСостоянияСобытияКалендаря" Тогда
		Если Параметр = Объект.СобытиеКалендаря
				И Источник <> ЭтаФорма
				И Окно<> Неопределено
				И Не Окно.Основное Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьРасходыНаКТТ" Тогда
		Если Параметр.ЗаписьКалендаря = ЗаписьКалендаря Тогда
			РасходыУменьшающиеНалог = СуммаРасходовУменьшающиеНалог(ЗаписьКалендаря, Патент);
			Элементы.СформироватьУведомление.Видимость = РасходыУменьшающиеНалог > 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


&НаКлиенте
Процедура ОтразитьРасходыВПрограмме(Команда)
	
	ДатаУплаты = ТекущаяДата();
	Если ЗначениеЗаполнено(СсылкаДокументаНаличнойУплаты) Тогда
		ПоказатьЗначение(,СсылкаДокументаНаличнойУплаты);
	Иначе
		оп = Новый ОписаниеОповещения("ОповещениеВыбораДаты", ЭтотОбъект);
		
		ПоказатьВводДаты(оп, ДатаУплаты, НСтр("ru=Когда был уплачен налог?'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораДаты(ВыбраннаяДата, Параметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = РегламентированнаяОтчетностьУСН.ЗарегистрироватьРасходыПоНалогамИВзносамНаличные(
		Объект.Организация,
		ДокументВзаиморасчетовСБюджетом,
		ВыбраннаяДата);
	
	ПоказатьОповещениеПользователя(
		НСтр("ru='Расходы зарегистрированы'"),
		ПолучитьНавигационнуюСсылку(Ссылка),
		НСтр("ru='Документ регистрации расходов на налоги'"),
		БиблиотекаКартинок.Информация32);
	
	СсылкаДокументаНаличнойУплаты = Ссылка;
	УстановитьВидимостьИДоступностьЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПлатежноеПоручение(Команда)
	
	Если ВсегоНалогаКУплате = "0,00 р." Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сумма нулевая. Уплата не требуется.'"));
		Возврат;
	КонецЕсли;

	
	ВыводилисьДанныеДляБанка = Истина;
	
	оп = Новый ОписаниеОповещения("ОповещениеПолученияСпискаПлатежек", ЭтотОбъект, Новый Структура("Файл", Ложь));
	ПолучитьСписокПлатежек(оп);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПолученияСпискаПлатежек(БанкСчетСтруктура, Параметры) Экспорт
	
	Если БанкСчетСтруктура <> Неопределено Тогда
		Если Параметры.Файл Тогда
			Если ПроверитьНаличиеГосОргана("ПолучитьФайлКлиентБанка") Тогда
				ПолучитьПлатежноеПоручениеНаСервере();
				
				СписокПлатежек = Новый СписокЗначений;
				СписокПлатежек.Добавить(ПлатежноеПоручение);
				БанкСчетСтруктура.Вставить("СписокПлатежек", СписокПлатежек);
				ОткрытьФорму(
					"Обработка.КлиентБанк.Форма.СохранениеПлатежек",
					БанкСчетСтруктура,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		Иначе
			Если ПроверитьНаличиеГосОргана("РаспечататьПлатежноеПоручениеЗавершение") Тогда
				РаспечататьПлатежноеПоручениеЗавершение();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиДляКлиентБанка(Команда)
	
	Если ВсегоНалогаКУплате = "0,00 р." Тогда
		ПоказатьПредупреждение(,НСтр("ru='Сумма нулевая. Уплата не требуется.'"));
		Возврат;
	КонецЕсли;
	
	ВыводилисьДанныеДляБанка = Истина;
	оп = Новый ОписаниеОповещения("ОповещениеПолученияСпискаПлатежек", ЭтотОбъект, Новый Структура("Файл", Истина));
	ПолучитьСписокПлатежек(оп);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьКвитанциюДляСбербанка(Команда)
	
	Если ПроверитьНаличиеГосОргана("РаспечататьКвитанциюЗавершение") Тогда
		РаспечататьКвитанциюЗавершение();
	КонецЕсли;
	
КонецПроцедуры


// -----------------------------------------------------------------------------
// События переходов


&НаКлиенте
Процедура ПереходЗаполнение(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Заполнить");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		"");
	
	ПараметрыФормы = Новый Структура("Организация,СобытиеКалендаря", Объект.Организация,Объект.СобытиеКалендаря);
	
	КалендарьОтчетностиКлиент.ОткрытьФормуНачалаЗаполнения(ЭтаФорма,ПараметрыФормы);
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходУплата(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Уплатить");
	
	ЗафиксироватьПереходкУплате(Объект.Организация, Объект.СобытиеКалендаря, Объект.СостояниеСобытия, ВсегоНалогаКУплате);
	
	Элементы.СтраницаПатент.ТекущаяСтраница = Элементы.РезультатРасчета;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗафиксироватьПереходкУплате(Организация, Событие, Состояние, ВсегоКУплате)
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Организация,
		Событие,
		Состояние,
		ВсегоКУплате);
	
	
	ЗаписьКалендаря = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьЗаписьКалендаря(Организация, Событие);
	Если ЗаписьКалендаря <> Неопределено Тогда
		ОбъектЗаписьКалендаря = ЗаписьКалендаря.ПолучитьОбъект();
		ОбъектЗаписьКалендаря.Завершено = Ложь;
		ОбъектЗаписьКалендаря.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходРезультатРасчета1Нажатие(Элемент)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Ознакомиться");
	
	КалендарьОтчетности.ЗаписатьСостояниеСобытияКалендаря(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		Объект.СостояниеСобытия,
		0);
	
	Элементы.СтраницаПатент.ТекущаяСтраница = Элементы.РезультатРасчета;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	Оповестить("ИзменениеСостоянияСобытияКалендаря", Объект.СобытиеКалендаря, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереходВыполнил(Команда)
	
	Объект.СостояниеСобытия = ПредопределенноеЗначение("Перечисление.СостоянияСобытийКалендаря.Завершено");
	
	КалендарьОтчетности.ЗавершитьСобытиеКалендаряОтчетности(
		Объект.Организация,
		Объект.СобытиеКалендаря,
		"");
	
	Элементы.СтраницаПатент.ТекущаяСтраница = Элементы.ЗадачаВыполнена;
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности"));
	Оповестить("Запись_ЗаписиКалендаряПодготовкиОтчетности");
	
КонецПроцедуры



&НаСервере
Процедура ПересчитатьНаСервере()
	
	ДатаДокументаОбработкиСобытия = НачалоДня(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СобытиеКалендаря,"ДатаДокументаОбработкиСобытия"));
	РегламентированнаяОтчетностьУСН.ВыполнитьРасчетНалогаПоПатенту(
		Объект.Организация,
		ДатаДокументаОбработкиСобытия,
		Объект.СобытиеКалендаря);
	
	ПолучитьДанныеОтчетности();
КонецПроцедуры

&НаКлиенте
Процедура Пересчитать(Команда)
	ПересчитатьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьУведомление(Команда)
	Если РасходыУменьшающиеНалог = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Расходы на ККТ равны нулю. Уведомление не требуется.'"));
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = ДанныеЗаполненияУведомленияОбУменьшенииНалога(
		Объект.Организация,
		ЗаписьКалендаря,
		Патент);
	
	УведомлениеОСпецрежимахНалогообложенияКлиент.ОткрытьИЗаполнитьФормуУведомленияККТ(ДанныеЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация6Нажатие(Элемент)
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ЗаписьКалендаря,ОбъектУменьшенияНалога", ЗаписьКалендаря, Патент));
	ОткрытьФорму("РегистрСведений.РасходыНаККТУменьшающиеНалог.ФормаСписка", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

// Конец событий переходов
// -----------------------------------------------------------------------------

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервереБезКонтекста
Функция СуммаРасходовУменьшающиеНалог(ЗаписьКалендаря, Патент)
	РасходыУменьшающиеНалог = 0;
	РегистрыСведений.РасходыНаККТУменьшающиеНалог.ПолучитьСуммуРасходовУменьшающиеНалог(ЗаписьКалендаря, Патент, РасходыУменьшающиеНалог);
	
	Возврат РасходыУменьшающиеНалог;
КонецФункции

// Процедура заполняет данные формы по данным ранее сформированной отчетности
//
&НаСервере
Процедура ПолучитьДанныеОтчетности()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетности.ЗначениеПоказателя КАК ЗначениеПоказателя,
	|	ЗначенияПоказателейОтчетности.ПоказательОтчетности КАК ПоказательОтчетности
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетности КАК ЗначенияПоказателейОтчетности
	|ГДЕ
	|	ЗначенияПоказателейОтчетности.Организация = &Организация
	|	И ЗначенияПоказателейОтчетности.ПериодОтчетности = &ПериодОтчетности
	|	И ЗначенияПоказателейОтчетности.ПоказательОтчетности В ИЕРАРХИИ(&ГруппаПоказателя)");
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ПериодОтчетности", Объект.СобытиеКалендаря.ДатаДокументаОбработкиСобытия);
	
	Запрос.УстановитьПараметр("ГруппаПоказателя", ПланыВидовХарактеристик.ПоказателиОтчетности.Патент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПоказательОтчетности = ПланыВидовХарактеристик.ПоказателиОтчетности.СуммаПатент Тогда
			НалогПатент = Выборка.ЗначениеПоказателя;
		КонецЕсли;
		
	КонецЦикла;
	
	ВсегоНалогаКУплате = Строка(НалогПатент) + " р.";
	
КонецПроцедуры

// Процедура устанавливает видимость и доступность элементов управления
//
&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементов()
	
	НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок();
	
	Если ЗначениеЗаполнено(СсылкаДокументаНаличнойУплаты) Тогда
		Элементы.ОтразитьРасходыВПрограмме.Заголовок = СсылкаДокументаНаличнойУплаты;
	Иначе
		Элементы.ОтразитьРасходыВПрограмме.Заголовок = НСтр("ru='Зарегистрировать расходы в программе'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьКнопкуПоУмолчаниюИУстановитьЗаголовок()
	
	ИмяКнопки = ПолучитьИмяЭлементаКнопкиПоУмолчанию(Элементы.СтраницаПатент.ТекущаяСтраница.Имя);
	
	Если НЕ ПустаяСтрока(ИмяКнопки) Тогда
		Элементы[ИмяКнопки].КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
	Попытка
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.СтраницаПатент.ТекущаяСтраница.Заголовок, ?(ПустаяСтрока(НомерПатента),"","№"+ НомерПатента), ПериодЗадачиПредставление);
		РегламентированнаяОтчетностьУСНКлиентСервер.УстановитьЗаголовокФормыЗадачи(ЭтаФорма, Объект.Организация);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИмяЭлементаКнопкиПоУмолчанию(ИмяСтраницы)
	
	Если ИмяСтраницы = "РезультатРасчета" Тогда
		Возврат "ПереходВыполнил";
	ИначеЕсли ИмяСтраницы = "ЗадачаВыполнена" Тогда
		Возврат "";
	Иначе
		ВызватьИсключение НСтр("ru='Неизвестное имя текущей страницы'");
	КонецЕсли;
	
КонецФункции


&НаКлиенте
Процедура ПолучитьСписокПлатежек(ОповещениеВыбораПлатежек)
	
	Если Не ЗначениеЗаполнено(БанковскийСчетПоУмолчанию) Тогда
		оп = Новый ОписаниеОповещения("ПолучениеБанкСчета", ЭтотОбъект, Новый Структура("ОповещениеВыбораПлатежек", ОповещениеВыбораПлатежек));
		РегламентированнаяОтчетностьУСНКлиент.ПолучитьБанковскийСчетДляУплатыНалога(оп, Объект.Организация);
		Возврат;
	КонецЕсли;
	
	Возвращаем = Новый Структура ("БанковскийСчет", БанковскийСчетПоУмолчанию);
	ВыполнитьОбработкуОповещения(ОповещениеВыбораПлатежек, Возвращаем);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеБанкСчета(Счет, Параметры) Экспорт
	Если ЗначениеЗаполнено(Счет) Тогда
		БанковскийСчетПоУмолчанию = Счет;
		Возвращаем = Новый Структура ("БанковскийСчет", Счет);
		ВыполнитьОбработкуОповещения(Параметры.ОповещениеВыбораПлатежек, Возвращаем);
	КонецЕсли;
КонецПроцедуры

&наСервере
Функция ПолучитьПлатежноеПоручениеНаСервере()
	ПлатежноеПоручение = РегламентированнаяОтчетностьУСН.СоздатьБезналичноеСписаниеПоВзаиморасчетамСБюджетом(ДокументВзаиморасчетовСБюджетом, БанковскийСчетПоУмолчанию, Объект.СобытиеКалендаря.Основание);
КонецФункции

&НаКлиенте
Процедура РаспечататьКвитанциюЗавершение() Экспорт
	
	СтруктураПечати = ВыгрузитьДокументВФайл(ДокументВзаиморасчетовСБюджетом, "Квитанция");
	Если СтруктураПечати.АдресФайла = Неопределено Тогда
		
		Сообщить(Нстр("ru='Произошла ошибка при выгрузке документа '")+Объект);
		Возврат;
		
	КонецЕсли;
	
	ПолучитьФайл(СтруктураПечати.АдресФайла, Нстр("ru = 'Квитанция.pdf'"), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспечататьПлатежноеПоручениеЗавершение() Экспорт
	
	ПолучитьПлатежноеПоручениеНаСервере();
	
	СтруктураПечати = ВыгрузитьДокументВФайл(ПлатежноеПоручение, "ПлатежноеПоручение");
	Если СтруктураПечати.АдресФайла = Неопределено Тогда
		
		Сообщить(Нстр("ru='Произошла ошибка при выгрузке документа '")+Объект);
		Возврат;
		
	КонецЕсли;
	
	ПолучитьФайл(СтруктураПечати.АдресФайла, СтруктураПечати.НаименованиеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьФайлКлиентБанка() Экспорт
	
	БанкСчетСтруктура = Новый Структура("БанковскийСчет", БанковскийСчетПоУмолчанию);
	
	ПолучитьПлатежноеПоручениеНаСервере();
	СписокПлатежек = Новый СписокЗначений;
	СписокПлатежек.Добавить(ПлатежноеПоручение);
	
	БанкСчетСтруктура.Вставить("СписокПлатежек", СписокПлатежек);
	
	ОткрытьФорму(
		"Обработка.КлиентБанк.Форма.СохранениеПлатежек",
		БанкСчетСтруктура,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры


&НаКлиенте
Функция ПроверитьНаличиеГосОргана(ИмяПроцедурыПоЗавершениюСозданияГосОргана)
	КодГосОргана = "";
	
	Если ГосОрганСуществует( КодГосОргана) Тогда
		Возврат Истина;
	Иначе
		ДопПараметры = Новый Структура("ИмяПроцедурыПоЗавершениюСозданияГосОргана, КодГосОргана", ИмяПроцедурыПоЗавершениюСозданияГосОргана, КодГосОргана);
		ТекстВопроса = НСтр("ru='В справочнике «Контрагенты» не задан налоговый орган для уплаты налога.
			|Создать его автоматически?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриОтветеНаВопросОСозданииГосОргана",
			ЭтаФорма, ДопПараметры);
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Создать автоматически'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Создать вручную'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки,,КодВозвратаДиалога.Да, НСтр("ru='Отсутствует налоговый орган'"));
		
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриОтветеНаВопросОСозданииГосОргана(РезультатВопроса, ДопПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьЗаполнениеСведенийОНалоговойИнспекции(ДопПараметры);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ВидГосударственногоОргана", ПредопределенноеЗначение("Перечисление.ВидыГосударственныхОрганов.НалоговыйОрган"));
		ПараметрыФормы.Вставить("КодГосударственногоОргана", ДопПараметры.КодГосОргана);
		ПараметрыФормы.Вставить("ИмяПроцедурыПоЗавершениюСозданияГосОргана",ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана);
		ПараметрыФормы.Вставить("ЗапретРедактированияКода", Истина);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьИзменениеПлатежныхРеквизитовФНС", ЭтотОбъект, ПараметрыФормы);
		
		ОткрытьФорму("Справочник.Контрагенты.Форма.РеквизитыГосударственныхОрганов", ПараметрыФормы, ЭтотОбъект, ЭтотОбъект, , , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеСведенийОНалоговойИнспекции(ДопПараметры)
	
	ОписаниеОшибки = "";
	ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки, ДопПараметры.КодГосОргана);
	
	// Обработка ошибок
	Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Если ОписаниеОшибки = "НеУказаныПараметрыАутентификации" Тогда
			
			ТекстВопроса = НСтр("ru='Для автоматического создания налогового органа
				|в справочнике «Контрагенты» необходимо подключиться к Интернет-поддержке
				|пользователей. Подключиться сейчас?'");
				
			ПараметрыВопроса = Новый Структура("ВызовПослеПодключения,ИмяПроцедурыПоЗавершениюСозданияГосОргана", "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду, КодГосОргана", ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана, ДопПараметры.КодГосОргана);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект, ПараметрыВопроса);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	Иначе
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьПлатежноеПоручениеЗавершение" Тогда
			РаспечататьПлатежноеПоручениеЗавершение();
		ИначеЕсли ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "ПолучитьФайлКлиентБанка" Тогда
			ПолучитьФайлКлиентБанка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(Оповещение, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Свойство("ВызовПослеПодключения") Тогда
			
			Если ДополнительныеПараметры.ВызовПослеПодключения = "ЗаполнитьСведенияОНалоговойИнспекцииПоКоду" Тогда
				
				ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(,ДополнительныеПараметры.КодГосОргана);
				
				Если ДополнительныеПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
					РаспечататьКвитанциюЗавершение();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьСведенияОНалоговойИнспекцииПоКоду(ОписаниеОшибки = "", КодНалоговогоОрганаПолучателя)
	
	РеквизитыНалоговогоОргана = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(КодНалоговогоОрганаПолучателя);
	
	Если ЗначениеЗаполнено(РеквизитыНалоговогоОргана.ОписаниеОшибки) Тогда
		ОписаниеОшибки = РеквизитыНалоговогоОргана.ОписаниеОшибки;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РеквизитыНалоговогоОргана.Ссылка) Тогда
		ДанныеГосударственныхОрганов.ОбновитьДанныеГосударственногоОргана(РеквизитыНалоговогоОргана);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеПлатежныхРеквизитовФНС(Ответ, ДопПараметры) Экспорт
	Если ТипЗнч(Ответ) = Тип("Структура") Тогда
		Если ДопПараметры.ИмяПроцедурыПоЗавершениюСозданияГосОргана = "РаспечататьКвитанциюЗавершение" Тогда
			РаспечататьКвитанциюЗавершение();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ГосОрганСуществует( КодГосОргана)
	
	ДокументВзаиморасчетовОбъект = ДокументВзаиморасчетовСБюджетом.ПолучитьОбъект();
	СтрокаСНалогом = ДокументВзаиморасчетовОбъект.Налоги.Найти(Справочники.ВидыНалогов.Патент, "ВидНалога");
	
	Если СтрокаСНалогом = Неопределено Тогда
		Возврат Ложь;
	Иначе
		КодГосОргана = СтрокаСНалогом.КодИФНС;
		
		ГосОрган = ДанныеГосударственныхОрганов.ГосударственныйОрган(Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган, КодГосОргана);
		
		Возврат ЗначениеЗаполнено(ГосОрган.Ссылка);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыгрузитьДокументВФайл(Объект, ВидФайла)
	
	ТабДок = Новый ТабличныйДокумент;
	
	Если ВидФайла = "Квитанция" Тогда
		ТабДок = Документы.НачислениеНалогов.СформироватьКвитанцию(Объект);
		
	ИначеЕсли ВидФайла = "ПлатежноеПоручение" Тогда
		МассивОбъектов = Новый Массив;
		МассивОбъектов.Добавить(Объект);
		ОбъектыПечати = Новый СписокЗначений;
		ТабДок = Документы.ПлатежноеПоручение.ПечатнаяФорма(МассивОбъектов, ОбъектыПечати);
	КонецЕсли;
	
	СтруктураПечати = Новый Структура ("АдресФайла, НаименованиеФайла");
	
	Если ТабДок = Неопределено Тогда
		Возврат СтруктураПечати;
	КонецЕсли;
	
	Каталог = КаталогВременныхФайлов()+РаботаВМоделиСервиса.ЗначениеРазделителяСеанса()+"\";
	
	ПроверкаКаталога = Новый Файл(Каталог);
	Если НЕ ПроверкаКаталога.Существует() Тогда
		СоздатьКаталог(Каталог);
	КонецЕсли;
	ПризнакОшибки = Ложь;
	РасширениеФайла = ".pdf" ;
	НаименованиеФайла = Строка(Объект);
	НаименованиеФайла = ?(СтрДлина(НаименованиеФайла)+СтрДлина(РасширениеФайла)>64, Лев(НаименованиеФайла,64 - СтрДлина(РасширениеФайла)),НаименованиеФайла);
	НаименованиеФайла = СтрЗаменить(НаименованиеФайла, ":","_");
	
	ПолноеИмяФайла = Каталог + НаименованиеФайла + РасширениеФайла;
	ПолноеИмяФайла = СтрЗаменить(ПолноеИмяФайла, """","");
	
	Попытка
		ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		
	Исключение
		ПризнакОшибки = Истина;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка сохранения файла на сервере'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= 'При сохранении файла на сервере в области данных %1 произошла ошибка:
						|%2'"),
				РаботаВМоделиСервиса.ЗначениеРазделителяСеанса(),
				ОписаниеОшибки()),
			РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
		
		Возврат СтруктураПечати;
		
	КонецПопытки;
	ДанныеФайла = Новый ДвоичныеДанные(ПолноеИмяФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДанныеФайла, Новый УникальныйИдентификатор);
	УдалитьФайлы(ПолноеИмяФайла);
	СтруктураПечати.АдресФайла = АдресФайла;
	СтруктураПечати.НаименованиеФайла = НаименованиеФайла+РасширениеФайла;
	
	Возврат СтруктураПечати;
	
КонецФункции


// Возвращает данные для заполнения уведомления об уменьшении налога на расходы на онлайн-кассы
//
// Параметры:
//   Организация - СправочникСсылка.Организации - организация уведомления
//   РегистрацияВНалоговомОргане - СправочникСсылка.РегистрацииВНалоговомОргане - налоговый орган, в который подается уведомление.
//
// Возвращаемое значение:
//   Структура, Неопределено - данные для заполнения нового уведомления, см. Отчеты.РегламентированноеУведомлениеУменьшениеНалогаККТ.СформироватьУведомление();
//                             если для переданной организации заполнить уведомление нельзя, возвращается Неопределено.
//
//
&НаСервереБезКонтекста
Функция ДанныеЗаполненияУведомленияОбУменьшенииНалога(Организация, ЗаписьКалендаря, Патент) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РегламентированнаяОтчетностьПереопределяемый.ЭтоЮридическоеЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходыНаККТУменьшающиеНалог.РасходыУменьшающиеНалог КАК Сумма,
	|	РасходыНаККТУменьшающиеНалог.ЗаводскойНомерККТ КАК ЗаводскойНомерККТ,
	|	РасходыНаККТУменьшающиеНалог.РегистрационныйНомерККТ КАК РегистрационныйНомерККТ,
	|	РасходыНаККТУменьшающиеНалог.НаименованиеККТ КАК НаименованиеККТ,
	|	РасходыНаККТУменьшающиеНалог.ДатаРегистрации КАК ДатаРегистрации
	|ИЗ
	|	РегистрСведений.РасходыНаККТУменьшающиеНалог КАК РасходыНаККТУменьшающиеНалог
	|	ГДЕ РасходыНаККТУменьшающиеНалог.ЗаписьКалендаря = &ЗаписьКалендаря";
	Запрос.УстановитьПараметр("ЗаписьКалендаря",  ЗаписьКалендаря);
	
	РасходыККТ =Запрос.Выполнить().Выгрузить();
	
	ДанныеУведомления = Новый Структура;
	
	// Шапка
	ДанныеУведомления.Вставить("Организация", Организация);
	ДанныеУведомления.Вставить("РегистрацияВИФНС", "");
	
	// Общие итоги
	ОбщаяСуммаРасходов    = РасходыККТ.Итог("Сумма");
	НеиспользованныйВычет = ОбщаяСуммаРасходов;
	
	ДанныеУведомления.Вставить("Стр110", ОбщаяСуммаРасходов);
	ДанныеУведомления.Вставить("Стр210", НеиспользованныйВычет);
	
	// Данные таблицы А - расходы на кассы
	ДанныеЛистовА = Новый СписокЗначений; // Требование БРО - данные заполнения передаются на клиент.
	
	Для Каждого РасходККТ Из РасходыККТ Цикл
		
		ЛистА = НовыйСтруктураДанныхЗаполненияЛистА();
		
		ЛистА.МоделККТ    = РасходККТ.НаименованиеККТ;
		ЛистА.НомерККТ    = РасходККТ.ЗаводскойНомерККТ;
		ЛистА.РегНомерККТ = РасходККТ.РегистрационныйНомерККТ;
		ЛистА.ДатаРегККТ  = РасходККТ.ДатаРегистрации;
		ЛистА.СумРасхККТ  = РасходККТ.Сумма;
		
		ДанныеЛистовА.Добавить(ЛистА);
		
	КонецЦикла;
	
	ДанныеУведомления.Вставить("ДанныеЛистовА", ДанныеЛистовА);
	
	// Данные таблицы Б - распределение расходов по патентам
	ДанныеЛистовБ = Новый СписокЗначений; // Требование БРО - данные заполнения передаются на клиент.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Патенты.НомерПатента КАК НомерПатента,
	|	Патенты.ДатаНачала КАК ДатаВыдачиПатента,
	|	ВЫБОР
	|		КОГДА КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияСобытия = Патенты.ДатаПервогоПлатежа
	|			ТОГДА Патенты.СуммаПервогоПлатежа
	|		ИНАЧЕ Патенты.СуммаВторогоПлатежа
	|	КОНЕЦ КАК СуммаПлатежа,
	|	ВЫБОР
	|		КОГДА КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияСобытия = Патенты.ДатаПервогоПлатежа
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПервыйПлатеж,
	|	КалендарьПерсональныхЗадачОтчетности.ДатаОкончанияСобытия КАК СрокПлатежа,
	|	ЕСТЬNULL(РасходыНаККТУменьшающиеНалог.РасходыУменьшающиеНалог, 0) КАК НалоговыйВычет
	|ИЗ
	|	Справочник.Патенты КАК Патенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КалендарьПерсональныхЗадачОтчетности КАК КалендарьПерсональныхЗадачОтчетности
	|		ПО (Патенты.Ссылка = &Патент)
	|			И (КалендарьПерсональныхЗадачОтчетности.Основание = Патенты.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|		ПО (ЗаписиКалендаряПодготовкиОтчетности.СобытиеКалендаря = КалендарьПерсональныхЗадачОтчетности.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РасходыНаККТУменьшающиеНалог КАК РасходыНаККТУменьшающиеНалог
	|		ПО (РасходыНаККТУменьшающиеНалог.ЗаписьКалендаря = ЗаписиКалендаряПодготовкиОтчетности.Ссылка)";
	Запрос.УстановитьПараметр("Патент",  Патент);
	
	ВыборкаПатент = Запрос.Выполнить().Выбрать();
	
	ЛистБ = НовыйСтруктураДанныхЗаполненияЛистБ();
	
	СуммаНалога = 0;
	
	Пока ВыборкаПатент.Следующий() Цикл
		
		ЛистБ.Стр120 = ВыборкаПатент.НомерПатента;
		ЛистБ.Стр130 = ВыборкаПатент.ДатаВыдачиПатента;
		Если ВыборкаПатент.Количество() < 2 Тогда
			// Единственный платеж
			ЛистБ.Стр150 = ВыборкаПатент.СрокПлатежа;
			ЛистБ.Стр160 = ВыборкаПатент.НалоговыйВычет;
		ИначеЕсли ВыборкаПатент.ПервыйПлатеж Тогда
			ЛистБ.Стр170 = ВыборкаПатент.СрокПлатежа;
			ЛистБ.Стр180 = ВыборкаПатент.НалоговыйВычет;
		Иначе
			ЛистБ.Стр190 = ВыборкаПатент.СрокПлатежа;
			ЛистБ.Стр200 = ВыборкаПатент.НалоговыйВычет;
		КонецЕсли;
		
		СуммаНалога = СуммаНалога + ВыборкаПатент.СуммаПлатежа;
		
	КонецЦикла;
	
	ЛистБ.Стр140 = СуммаНалога;
	
	ДанныеЛистовБ.Добавить(ЛистБ);
	
	ДанныеУведомления.Вставить("ДанныеЛистовБ", ДанныеЛистовБ);
	
	Возврат ДанныеУведомления;
	
КонецФункции


&НаСервереБезКонтекста
Функция НовыйСтруктураДанныхЗаполненияЛистА()
	
	ЛистА = Новый Структура;
	
	ЛистА.Вставить("МоделККТ",    "");
	ЛистА.Вставить("НомерККТ",    "");
	ЛистА.Вставить("РегНомерККТ", "");
	ЛистА.Вставить("ДатаРегККТ",  "");
	ЛистА.Вставить("СумРасхККТ",  "");
	
	Возврат ЛистА;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыйСтруктураДанныхЗаполненияЛистБ()
	
	ЛистБ = Новый Структура;
	
	ЛистБ.Вставить("Стр120", "");
	ЛистБ.Вставить("Стр130", '00010101');
	ЛистБ.Вставить("Стр140", 0);
	ЛистБ.Вставить("Стр150", '00010101');
	ЛистБ.Вставить("Стр160", 0);
	ЛистБ.Вставить("Стр170", '00010101');
	ЛистБ.Вставить("Стр180", 0);
	ЛистБ.Вставить("Стр190", '00010101');
	ЛистБ.Вставить("Стр200", 0);
	
	Возврат ЛистБ;
	
КонецФункции





