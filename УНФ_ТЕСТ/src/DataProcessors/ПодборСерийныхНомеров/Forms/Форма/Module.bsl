
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ЭтоОприходование") Тогда
		ЭтоОприходование = Параметры.ЭтоОприходование;
	Иначе
		ЭтоОприходование = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоПриходныйОрдер") Тогда
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ЭтоПриходныйОрдер", Истина);
	Иначе
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ЭтоПриходныйОрдер", Ложь);
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоРасходныйОрдер") Тогда
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ЭтоРасходныйОрдер", Истина);
	Иначе
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ЭтоРасходныйОрдер", Ложь);
	КонецЕсли;
	
	ТекстСообщения = "";
	Если НЕ Параметры.Свойство("Запасы") ИЛИ НЕ ЗначениеЗаполнено(Параметры.Запасы.Номенклатура) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнена номенклатура!'");
	ИначеЕсли НЕ Параметры.Запасы.Номенклатура.ИспользоватьСерийныеНомера Тогда
		ТекстСообщения = НСтр("ru = 'Для номенклатуры не ведется учет по серийным номерам!'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Возврат;
	КонецЕсли;
	УникальныйИдентификаторФормыВладельца = Параметры.УникальныйИдентификаторФормыВладельца;
	
	Если Параметры.Свойство("РежимПодбора") Тогда
		РежимПодбора = Параметры.РежимПодбора;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.АдресВоВременномХранилище) Тогда
		СохраненноеЗначениеСерийныхНомеров = ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище);
		Если ТипЗнч(СохраненноеЗначениеСерийныхНомеров) = Тип("СправочникСсылка.СерийныеНомера") Тогда
			Если ЗначениеЗаполнено(СохраненноеЗначениеСерийныхНомеров) Тогда
				НовСтр = Объект.СерийныеНомера.Добавить();
				НовСтр.СерийныйНомер = СохраненноеЗначениеСерийныхНомеров;
				НовСтр.НовыйНомер = Строка(СохраненноеЗначениеСерийныхНомеров);
			КонецЕсли; 
		Иначе
			
			// Если работает документ МаркировкаТоваровГИСМ, то у него особый порядок загрузки серий
			ЗагружатьСерииОтдельно = (СохраненноеЗначениеСерийныхНомеров.Колонки.Найти("Серия")<>Неопределено);
			
			Для Каждого ЗагружаемаяСтрока Из СохраненноеЗначениеСерийныхНомеров Цикл
				СтрокаСерийныхНомеров = Объект.СерийныеНомера.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСерийныхНомеров, ЗагружаемаяСтрока);
				
				Если ЗагружатьСерииОтдельно Тогда
					СтрокаСерийныхНомеров.СерийныйНомер = ЗагружаемаяСтрока.Серия;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого стр Из Объект.СерийныеНомера Цикл
				
				ДанныеСерийногоНомера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Стр.СерийныйНомер,"Наименование,НомерКИЗГИСМ,RFIDTID,RFIDUser,RFIDEPC,EPCGTIN,НомерГИСМ" );
				ЗаполнитьЗначенияСвойств(стр, ДанныеСерийногоНомера);
				стр.ЗаполненRFIDTID = ЗначениеЗаполнено("RFIDTID");
				стр.НовыйНомер = ДанныеСерийногоНомера.Наименование;
				
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;
	
	ЗаполнитьЗапасы(Параметры.Запасы);
	СписокВыбранных.ЗагрузитьЗначения(Объект.СерийныеНомера.Выгрузить().ВыгрузитьКолонку("СерийныйНомер"));
	
	Если ПолучитьФункциональнуюОпцию("КонтрольОстатковСерийныхНомеров") Тогда
		
		СерийныеНомераОстатки.ТекстЗапроса = ТекстЗапросаСерииОстатки();
			
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("Номенклатура",Номенклатура);
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("Организация", Параметры.Организация);
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("Характеристика",Параметры.Запасы.Характеристика);
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("Партия",Параметры.Запасы.Партия);
		Если Параметры.Свойство("СтруктурнаяЕдиница") Тогда
			СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница",Параметры.СтруктурнаяЕдиница);
			СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ВсеСклады", Ложь);
			
			Если ЗначениеЗаполнено(Параметры.СтруктурнаяЕдиница) Тогда
				Элементы.СерииОстаткиСерия.Заголовок = НСтр("ru = 'В наличии на '")+Параметры.СтруктурнаяЕдиница;
			КонецЕсли;
		Иначе
			СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("СтруктурнаяЕдиница", Неопределено);
			СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ВсеСклады", Истина);
		КонецЕсли;
		Если Параметры.Свойство("Ячейка") Тогда
			СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("Ячейка",Параметры.Ячейка);
			СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ВсеЯчейки", Ложь);
			
			Если ЗначениеЗаполнено(Параметры.Ячейка) Тогда
				Элементы.СерииОстаткиСерия.Заголовок = Элементы.СерииОстаткиСерия.Заголовок + ", " + Параметры.Ячейка;
			КонецЕсли;
		Иначе
			СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("Ячейка", Неопределено);
			СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ВсеЯчейки", Истина);
		КонецЕсли;
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ЭтотДокумент", Параметры.ДокСсылка);
		
		Элементы.ПоказатьПроданные.Видимость = Ложь;
		Элементы.СерииОстаткиПродан.Видимость = ПоказатьПроданные;
		
	Иначе //без остатков
		
		СерийныеНомераОстатки.ТекстЗапроса = ТекстЗапросаСерийныеНомера();
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("Номенклатура",Номенклатура);
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ПоказатьПроданные", ПоказатьПроданные);
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ЭтотДокумент", Параметры.ДокСсылка);
		
	КонецЕсли;
	
	// Шаблон СН
	ВосстановитьНастройки();
	
	Элементы.ГруппаЗаполнить.Видимость = Ложь;
	Если НЕ ЗначениеЗаполнено(Характеристика) Тогда
		Элементы.Характеристика.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Партия) Тогда
		Элементы.Партия.Видимость = Ложь;
	КонецЕсли;
	
	Если РежимПодбора Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ВыборОстатков;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.ВводНовых;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Элементы.СерийныеНомераИзменениеСтрокДействие.СписокВыбора.Добавить("Сгенерировать номера в порядке очереди");
	Элементы.СерийныеНомераИзменениеСтрокДействие.СписокВыбора.Добавить("Заполнить номерами из диапазона");
	
	// ПодключаемоеОборудование
	ИспользоватьПодключаемоеОборудование = УправлениеНебольшойФирмойПовтИсп.ИспользоватьПодключаемоеОборудование();
	// Конец ПодключаемоеОборудование
	
	//+ ГИСМ
	
	Если Параметры.Свойство("ЭтоМаркировкаГИСМ") Тогда
		ЭтоМаркировкаТоваровГИСМ = Параметры.ЭтоМаркировкаГИСМ;
	Иначе
		ЭтоМаркировкаТоваровГИСМ = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("GTIN") Тогда
		GTIN = Параметры.GTIN;
	КонецЕсли;
	
	Если Параметры.Свойство("НастройкиИспользованияСерий") Тогда
		НастройкиИспользованияСерий = Новый ФиксированнаяСтруктура(Параметры.НастройкиИспользованияСерий);
	Иначе
		НастройкиИспользованияСерий = Новый ФиксированнаяСтруктура(Новый Структура);
	КонецЕсли;
	
	Если ЭтоМаркировкаТоваровГИСМ Тогда
		
		GTINИзКиЗ = ИнтеграцияГИСМУНФ.GTINКиЗ(Параметры.НоменклатураКиЗ, Параметры.ХарактеристикаКиЗ);
		
		ЭтоМаркировкаПерсонифицированнымиКиЗ = ЗначениеЗаполнено(GTINИзКиЗ);
		
		Если ЭтоМаркировкаПерсонифицированнымиКиЗ
			И GTINИзКиЗ <> GTIN Тогда
			
			ТекстСообщения = НСтр("ru = 'Выбранный КиЗ предназначен для маркировки товаров с GTIN %GTINИзКиЗ%, его нельзя использовать для маркировки товара с GTIN %GTIN%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINИзКиЗ%", GTINИзКиЗ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTIN%", GTIN);
			
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ЭтоМаркировкаОстатковГИСМ = Параметры.ЭтоМаркировкаОстатков;
	КонецЕсли;
	
	РежимГИСМ = ИнтеграцияГИСМУНФ.ЭтоГИСМНоменклатура(Номенклатура);
	НастроитьРежимГИСМ();
	//- ГИСМ
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		Элементы.ВыборОстатков.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		Элементы.ГруппаСтрелки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		Элементы.ГруппаСтрелки.Ширина = 0;
		
		Элементы.ВыбратьНомер.Заголовок = "Выбрать";
		Элементы.ВыбратьНомер.Ширина = 0;
		Элементы.ВыбратьНомер.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.ВыбратьНомер.Картинка = БиблиотекаКартинок.ПереместитьВниз;
		
		Элементы.УбратьНомер.Заголовок = "Отменить";
		Элементы.УбратьНомер.Ширина = 0;
		Элементы.УбратьНомер.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Элементы.УбратьНомер.Картинка = БиблиотекаКартинок.ПереместитьВверх;
		
		Элементы.ГруппаКнопкиНовые.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		Элементы.ГруппаКнопки.Видимость = Ложь;
		Элементы.ВыбратьМобильный.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаСерииОстатки()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапросПереопределяемый.СерийныйНомер.Продан КАК Продан,
	|	ВложенныйЗапросПереопределяемый.СерийныйНомер КАК СерийныйНомер
	|ИЗ
	|	(ВЫБРАТЬ
	|		СерийныеНомераОстатки.СерийныйНомер КАК СерийныйНомер
	|	ИЗ
	|		РегистрНакопления.СерийныеНомера.Остатки(
	|				,
	|				Организация = &Организация
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика
	|					И Партия = &Партия
	|					И (&ВсеСклады
	|						ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|					И (&ВсеЯчейки
	|						ИЛИ Ячейка = &Ячейка)
	|					И НЕ СерийныйНомер В (&СписокВыбранных)) КАК СерийныеНомераОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерийныеНомера.СерийныйНомер
	|	ИЗ
	|		РегистрНакопления.СерийныеНомера КАК СерийныеНомера
	|	ГДЕ
	|		СерийныеНомера.Регистратор = &ЭтотДокумент
	|		И НЕ СерийныеНомера.СерийныйНомер В (&СписокВыбранных)
	|		И СерийныеНомера.СерийныйНомер.Владелец = &Номенклатура
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерийныеНомераКПоступлениюОстатки.СерийныйНомер
	|	ИЗ
	|		РегистрНакопления.СерийныеНомераКПоступлению.Остатки(
	|				,
	|				Организация = &Организация
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика
	|					И Партия = &Партия
	|					И (&ВсеСклады
	|						ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|					И НЕ СерийныйНомер В (&СписокВыбранных)
	|					И &ЭтоПриходныйОрдер) КАК СерийныеНомераКПоступлениюОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерийныеНомераКПоступлению.СерийныйНомер
	|	ИЗ
	|		РегистрНакопления.СерийныеНомераКПоступлению КАК СерийныеНомераКПоступлению
	|	ГДЕ
	|		СерийныеНомераКПоступлению.Регистратор = &ЭтотДокумент
	|		И НЕ СерийныеНомераКПоступлению.СерийныйНомер В (&СписокВыбранных)
	|		И СерийныеНомераКПоступлению.СерийныйНомер.Владелец = &Номенклатура
	|		И &ЭтоПриходныйОрдер
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерийныеНомераКРасходуОстатки.СерийныйНомер
	|	ИЗ
	|		РегистрНакопления.СерийныеНомераКРасходу.Остатки(
	|				,
	|				Организация = &Организация
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика
	|					И Партия = &Партия
	|					И (&ВсеСклады
	|						ИЛИ СтруктурнаяЕдиница = &СтруктурнаяЕдиница)
	|					И НЕ СерийныйНомер В (&СписокВыбранных)
	|					И &ЭтоРасходныйОрдер) КАК СерийныеНомераКРасходуОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерийныеНомераКРасходу.СерийныйНомер
	|	ИЗ
	|		РегистрНакопления.СерийныеНомераКРасходу КАК СерийныеНомераКРасходу
	|	ГДЕ
	|		СерийныеНомераКРасходу.Регистратор = &ЭтотДокумент
	|		И НЕ СерийныеНомераКРасходу.СерийныйНомер В (&СписокВыбранных)
	|		И СерийныеНомераКРасходу.СерийныйНомер.Владелец = &Номенклатура
	|		И &ЭтоРасходныйОрдер) КАК ВложенныйЗапросПереопределяемый";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСерийныеНомера()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.СерийныйНомер,
	|	ВложенныйЗапрос.Продан
	|ИЗ
	|	(ВЫБРАТЬ
	|		СправочникСерийныеНомера.Ссылка КАК СерийныйНомер,
	|		СправочникСерийныеНомера.Продан КАК Продан
	|	ИЗ
	|		Справочник.СерийныеНомера КАК СправочникСерийныеНомера
	|	ГДЕ
	|		СправочникСерийныеНомера.Владелец = &Номенклатура
	|		И НЕ СправочникСерийныеНомера.Ссылка В (&СписокВыбранных)
	|		И ВЫБОР
	|			КОГДА &ПоказатьПроданные
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ СправочникСерийныеНомера.Продан
	|		КОНЕЦ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СерийныеНомера.СерийныйНомер,
	|		СерийныеНомера.СерийныйНомер.Продан
	|	ИЗ
	|		РегистрНакопления.СерийныеНомера КАК СерийныеНомера
	|	ГДЕ
	|		СерийныеНомера.Регистратор = &ЭтотДокумент
	|		И НЕ СерийныеНомера.СерийныйНомер В (&СписокВыбранных)
	|		И СерийныеНомера.СерийныйНомер.Владелец = &Номенклатура) КАК ВложенныйЗапрос";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерииСерия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерийныеНомера.СерийныйНомер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(WindowsШрифты.DefaultGUIFont, , , Истина, Ложь, Ложь, Ложь, ));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Новый'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерииСерия.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерийныеНомера.СерийныйНомер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Зарегистрированный'"));

КонецПроцедуры

&НаСервере
Функция СохранитьВводСерийСервер()
	
	ТЗСерийныхНомеров = Объект.СерийныеНомера.Выгрузить();
	Объект.СерийныеНомера.Загрузить(ТЗСерийныхНомеров);
	
	Для Каждого СтрТабл Из Объект.СерийныеНомера Цикл
		
		Если Не ЗначениеЗаполнено(СтрТабл.СерийныйНомер) Тогда
			
			СправочникОбъект                = Справочники.СерийныеНомера.СоздатьЭлемент();
			СправочникОбъект.Владелец		= Номенклатура;
			СправочникОбъект.Наименование	= СтрТабл.НовыйНомер;
			
			Если ЗначениеЗаполнено(СтрТабл.НомерКИЗГИСМ) Тогда
				СправочникОбъект.Наименование = СтрТабл.НомерКИЗГИСМ;
				СправочникОбъект.НомерКиЗГИСМ = СтрТабл.НомерКИЗГИСМ;
				ЗаполнитьЗначенияСвойств(СправочникОбъект, СтрТабл);
			КонецЕсли;
			
			Попытка
				СправочникОбъект.Записать();	
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
			
			СтрТабл.СерийныйНомер = СправочникОбъект.Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Объект.СерийныеНомера.Выгрузить(), ЭтаФорма.УникальныйИдентификаторФормыВладельца);
	Модифицированность = Ложь;
	
	Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьЗапасы(Запасы)
	
	Номенклатура = Запасы.Номенклатура;
	Характеристика = Запасы.Характеристика;
	Если Запасы.Свойство("Партия") Тогда
		Партия = Запасы.Партия;
	КонецЕсли;
	Если Запасы.Свойство("ЕдиницаИзмерения") Тогда
		ЕдиницаИзмерения = Запасы.ЕдиницаИзмерения;
		КоличествоВДокументе = Запасы.Количество * Запасы.Коэффициент;
	Иначе
		КоличествоВДокументе = Запасы.Количество;
	КонецЕсли;
	
	Если Запасы.Свойство("КлючСвязи") Тогда
		КлючСвязи = Запасы.КлючСвязи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	Если НЕ ПроверитьМеткиНаНеобходимостьЗаписать() Тогда
		Возврат;
	КонецЕсли;
	
	СохраненоУспешно = СохранитьВводСерийСервер();
	Если СохраненоУспешно Тогда
	
		СтруктураВозврата = Новый Структура("КлючСтроки, АдресВоВременномХранилище, ЭтоОприходование", КлючСвязи, АдресВоВременномХранилище, ЭтоОприходование);
		Оповестить("ПодборСерий", СтруктураВозврата, 
			?(УникальныйИдентификаторФормыВладельца = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"), Неопределено, УникальныйИдентификаторФормыВладельца)
			);
		Закрыть();
	
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ РежимПодбора И НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	ХранилищеСистемныхНастроек.Сохранить(ЭтотОбъект.ИмяФормы, ЭтотОбъект.ИмяФормы + "_ШаблонСерийногоНомера",
		ЭтотОбъект.ШаблонСерийногоНомера);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()

	ЭтотОбъект.ШаблонСерийногоНомера = ХранилищеСистемныхНастроек.Загрузить(ЭтотОбъект.ИмяФормы, ЭтотОбъект.ИмяФормы
		+ "_ШаблонСерийногоНомера");

	Элементы.СерииНомер.Маска = РаботаССерийнымиНомерамиКлиентСервер.СтрокаМаскиПоШаблону(ШаблонСерийногоНомера);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//+ГИСМ
	ИдетЗаписьМетки = Ложь;
	
	Если ПодключатьСчитывательRFID Тогда
		ПоддерживаемыеТипыОборудования = "СчитывательRFID";
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект,
			ПоддерживаемыеТипыОборудования);
	КонецЕсли;
	
	//-ГИСМ
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаСервере
Функция ВычислитьМаксимальныйНомерИКоличество()
	
	МаксимальныйНомерИзСправочника = Справочники.СерийныеНомера.ВычислитьМаксимальныйНомерСерии(Номенклатура, ШаблонСерийногоНомера);
	МаксимальныйНомерВДокументе = 0;
	Для каждого стр Из Объект.СерийныеНомера Цикл
		
		Если НЕ ЗначениеЗаполнено(стр.СерийныйНомер) И стр.СерийныйНомерЧисло=0 И ЗначениеЗаполнено(стр.НовыйНомер) Тогда
			ШаблонСерийногоНомераСтрокой = ?(ЗначениеЗаполнено(ШаблонСерийногоНомера),ШаблонСерийногоНомера,"########");
			
			стр.СерийныйНомерЧисло = Справочники.СерийныеНомера.СерийныйНомерЧислоПоШаблону(стр.НовыйНомер, ШаблонСерийногоНомераСтрокой);
		
		КонецЕсли;
		
		МаксимальныйНомерВДокументе = Макс(МаксимальныйНомерВДокументе, стр.СерийныйНомерЧисло);
	КонецЦикла;
	
	Номер = Макс(МаксимальныйНомерВДокументе,МаксимальныйНомерИзСправочника);
	
	Возврат Номер;
	
КонецФункции

&НаСервере
Процедура СгенерироватьСерийныеНомераСервер(КоличествоСгенерировать, НачальныйНомер = Неопределено)
	
	Если НачальныйНомер = Неопределено Тогда
		СледующийПоПорядкуНомер = ВычислитьМаксимальныйНомерИКоличество()+1;
	Иначе
		СледующийПоПорядкуНомер = НачальныйНомер;
	КонецЕсли;
	
	Для нСтроки=1 По КоличествоСгенерировать Цикл
	   	НовыйНомерСтруктура = ДобавитьСерийныйНомерПоШаблону(СледующийПоПорядкуНомер);
		
		ТекущаяСтрока = Объект.СерийныеНомера.Добавить();
		ТекущаяСтрока.НовыйНомер = НовыйНомерСтруктура.НовыйНомер;
		ТекущаяСтрока.СерийныйНомерЧисло = НовыйНомерСтруктура.НовыйНомерЧисло;
		
		СледующийПоПорядкуНомер = СледующийПоПорядкуНомер+1;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Функция ДобавитьСерийныйНомерСервер()

	СледующийПоПорядкуНомер = ВычислитьМаксимальныйНомерИКоличество()+1;
	Возврат ДобавитьСерийныйНомерПоШаблону(СледующийПоПорядкуНомер);
	
КонецФункции

&НаСервере
Функция ДобавитьСерийныйНомерПоШаблону(ТекущийМаксимальныйНомер)
		
	НомерЧисло = ТекущийМаксимальныйНомер;
	
	Если ЗначениеЗаполнено(ШаблонСерийногоНомера) Тогда
		// Длина цифровой части номера - не более 13 символов
		ЦифрВШаблоне = СтрЧислоВхождений(ШаблонСерийногоНомера, РаботаССерийнымиНомерамиКлиентСервер.СимволЧисла());
		НомерСНулями = Формат(НомерЧисло, "ЧЦ="+ЦифрВШаблоне+"; ЧВН=; ЧГ=");
		
		НовыйНомерПоШаблону = "";
		НомерСимволаСН = 1;
		// Заполняем шаблон
		Для н=1 По СтрДлина(ШаблонСерийногоНомера) Цикл
			симв = Сред(ШаблонСерийногоНомера,н,1);
			Если симв=РаботаССерийнымиНомерамиКлиентСервер.СимволЧисла() Тогда
				НовыйНомерПоШаблону = НовыйНомерПоШаблону+Сред(НомерСНулями,НомерСимволаСН,1);
				НомерСимволаСН = НомерСимволаСН+1;
			Иначе
				НовыйНомерПоШаблону = НовыйНомерПоШаблону+симв;
			КонецЕсли;
		КонецЦикла;
		НовыйНомер = НовыйНомерПоШаблону;
	Иначе
		НовыйНомер = Формат(НомерЧисло, "ЧЦ=8; ЧВН=; ЧГ=");
	КонецЕсли;
	
	Возврат Новый Структура("НовыйНомер, НовыйНомерЧисло", НовыйНомер, НомерЧисло);
	
КонецФункции

&НаКлиенте
Процедура ДобавитьСерийныйНомер(Команда)
	
	НовыйНомерСтруктура = ДобавитьСерийныйНомерСервер();
	
	Элементы.СерийныеНомераНовые.ДобавитьСтроку();
	ТекущиеДанные = Элементы.СерийныеНомераНовые.ТекущиеДанные;
	ТекущиеДанные.НовыйНомер = НовыйНомерСтруктура.НовыйНомер;
	ТекущиеДанные.СерийныйНомерЧисло = НовыйНомерСтруктура.НовыйНомерЧисло;
	
	Элементы.СерийныеНомераНовые.ЗакончитьРедактированиеСтроки(Ложь);	
	
КонецПроцедуры

&НаСервере
Процедура НайтиЗарегистрированныеСерии()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерийныеНомера.СерийныйНомер КАК СерийныйНомер,
	|	СерийныеНомера.НовыйНомер КАК НовыйНомер,
	|	ВЫБОР
	|		КОГДА СерийныеНомера.СерийныйНомер = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НомерНеУказан,
	|	СерийныеНомера.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ НовыеСерийныеНомера
	|ИЗ
	|	&СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.СерийныйНомер = ЗНАЧЕНИЕ(Справочник.СерийныеНомера.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СерийныеНомера.Ссылка КАК СерийныйНомер,
	|	НовыеСерийныеНомера.НомерСтроки,
	|	СерийныеНомера.Наименование КАК НовыйНомер
	|ИЗ
	|	НовыеСерийныеНомера КАК НовыеСерийныеНомера
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СерийныеНомера КАК СерийныеНомера
	|		ПО НовыеСерийныеНомера.НовыйНомер = СерийныеНомера.Наименование
	|ГДЕ
	|	СерийныеНомера.Владелец = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СерийныеНомера",Объект.СерийныеНомера.Выгрузить());

	Выборка = Запрос.Выполнить().Выбрать();
			
	Пока Выборка.Следующий() Цикл
		Объект.СерийныеНомера[Выборка.НомерСтроки-1].СерийныйНомер = Выборка.СерийныйНомер;
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура СерииНомерПриИзменении(Элемент)
	
	ТекСтрока = Объект.СерийныеНомера.НайтиПоИдентификатору(Элементы.СерийныеНомераНовые.ТекущаяСтрока);
	Если ТекСтрока<>Неопределено Тогда
		ТекСтрока.СерийныйНомер = Неопределено;
	КонецЕсли;
	НайтиЗарегистрированныеСерии();
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьСериюОповещение = Новый ОписаниеОповещения("ВыбратьСериюЗавершение", ЭтотОбъект);
	
	СтруктураОтбора = Новый Структура("Отбор", Новый Структура("Владелец", ЭтотОбъект.Номенклатура));
	Если ЗначениеЗаполнено(Элементы.СерийныеНомераНовые.ТекущиеДанные.СерийныйНомер) Тогда
		СтруктураОтбора.Вставить("ТекущаяСтрока", Элементы.СерийныеНомераНовые.ТекущиеДанные.СерийныйНомер);
	КонецЕсли;
	ОткрытьФорму("Справочник.СерийныеНомера.ФормаВыбора", СтруктураОтбора, ЭтотОбъект,,,,ВыбратьСериюОповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСериюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия<>Неопределено Тогда
		ТекСтрока = Объект.СерийныеНомера.НайтиПоИдентификатору(Элементы.СерийныеНомераНовые.ТекущаяСтрока);
		ТекСтрока.НовыйНомер	= Строка(РезультатЗакрытия);
		ТекСтрока.СерийныйНомер = РезультатЗакрытия;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНомер(Команда)
	
	Если Элементы.СерииОстатки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СерииОстатки.ВыделенныеСтроки.Количество() > 1 Тогда
		ДобавитьСерийныйНомерВыделенные(Элементы.СерииОстатки.ВыделенныеСтроки);
	Иначе
		ДобавитьСерийныйНомерВыбранный(Элементы.СерииОстатки.ТекущиеДанные.СерийныйНомер);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСерийныйНомерВыделенные(СерийныеНомера)
	
	Для каждого элСерийныйНомер Из СерийныеНомера Цикл
		СерийныйНомер = Элементы.СерииОстатки.ДанныеСтроки(элСерийныйНомер).СерийныйНомер;
		СписокВыбранных.Добавить(СерийныйНомер);
	КонецЦикла; 
	
	ДобавитьВыделенные(СписокВыбранных);
	СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыделенные(СписокВыбранных)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерийныеНомера.Ссылка КАК СерийныйНомер,
	|	СерийныеНомера.Наименование КАК НовыйНомер
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка В(&СписокВыбранных)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НовыйНомер";
	
	Запрос.УстановитьПараметр("СписокВыбранных", СписокВыбранных);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.СерийныеНомера.Загрузить(Результат);
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьСерийныйНомерВыбранный(СерийныйНомер)
	
	Элементы.СерийныеНомераВыбранные.ДобавитьСтроку();
	
	Элементы.СерийныеНомераВыбранные.ТекущиеДанные.СерийныйНомер = СерийныйНомер;
	Элементы.СерийныеНомераВыбранные.ТекущиеДанные.НовыйНомер = Строка(СерийныйНомер);
	Элементы.СерийныеНомераВыбранные.ЗакончитьРедактированиеСтроки(Ложь);
	
	СписокВыбранных.Добавить(СерийныйНомер);
	
	СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьНомер(Команда)

	Если Элементы.СерийныеНомераВыбранные.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СерийныеНомераВыбранные.ВыделенныеСтроки.Количество() > 1 Тогда
		УбратьСерийныйНомерВыделенные(Элементы.СерийныеНомераВыбранные.ВыделенныеСтроки);
	Иначе
		ВыбранныйСерийныйНомер = Элементы.СерийныеНомераВыбранные.ТекущиеДанные.СерийныйНомер;
		УбратьСерийныйНомерВыбранный(ВыбранныйСерийныйНомер);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьСерийныйНомерВыделенные(СерийныеНомера)
	
	МассивВыделенные = Новый Массив;
	Для каждого элСерийныйНомер Из СерийныеНомера Цикл
		МассивВыделенные.Добавить(Элементы.СерийныеНомераВыбранные.ДанныеСтроки(элСерийныйНомер).СерийныйНомер);
	КонецЦикла; 
	
	УбратьВыделенные(МассивВыделенные);
	
КонецПроцедуры

&НаСервере
Процедура УбратьВыделенные(МассивВыделенные)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СерийныеНомера.Ссылка КАК СерийныйНомер,
	|	СерийныеНомера.Наименование КАК НовыйНомер
	|ИЗ
	|	Справочник.СерийныеНомера КАК СерийныеНомера
	|ГДЕ
	|	СерийныеНомера.Ссылка В(&СписокОставить) И НЕ СерийныеНомера.Ссылка В(&СписокУдалить)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НовыйНомер";
	
	Запрос.УстановитьПараметр("СписокУдалить", МассивВыделенные);
	Запрос.УстановитьПараметр("СписокОставить", Объект.СерийныеНомера.Выгрузить().ВыгрузитьКолонку("СерийныйНомер"));
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.СерийныеНомера.Загрузить(Результат);
	
	МассивСерийных = Результат.ВыгрузитьКолонку("СерийныйНомер");
	СписокВыбранных.ЗагрузитьЗначения(МассивСерийных);
	
	СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных", МассивСерийных);
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьСерийныйНомерВыбранный(СерийныйНомер)

	Объект.СерийныеНомера.Удалить(Элементы.СерийныеНомераВыбранные.ТекущиеДанные.НомерСтроки - 1);
	
	НайденныйЭлемент = СписокВыбранных.НайтиПоЗначению(СерийныйНомер);
	Если НайденныйЭлемент<>Неопределено Тогда
		СписокВыбранных.Удалить(НайденныйЭлемент);
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных", СписокВыбранных.ВыгрузитьЗначения());
	КонецЕсли;
	
	Если Элементы.СерииОстатки.ТекущаяСтрока = Неопределено Тогда
		Элементы.СерииОстатки.ТекущаяСтрока = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСерийногоНомераПриИзменении(Элемент)
	
	Элементы.СерииНомер.Маска = РаботаССерийнымиНомерамиКлиентСервер.СтрокаМаскиПоШаблону(ШаблонСерийногоНомера);

КонецПроцедуры

&НаКлиенте
Процедура СерииОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбратьНомер(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СерииВыбранныеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	УбратьНомер(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроданныеПриИзменении(Элемент)
	
	Элементы.СерииОстаткиПродан.Видимость = ПоказатьПроданные;
	СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("ПоказатьПроданные", ПоказатьПроданные);
	
КонецПроцедуры

&НаКлиенте
Процедура СерииВыбранныеНовыйНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.СерийныеНомера.ФормаОбъекта", Новый Структура("Ключ",Элементы.СерийныеНомераВыбранные.ТекущиеДанные.СерийныйНомер));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСерийныйНомер(Команда)
	
	Если Элементы.СерийныеНомераВыбранные.ТекущиеДанные <> Неопределено Тогда
	
		ОткрытьФорму("Справочник.СерийныеНомера.ФормаОбъекта", Новый Структура("Ключ",Элементы.СерийныеНомераВыбранные.ТекущиеДанные.СерийныйНомер));
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыполнитьНаСервере()

	Если СерийныеНомераИзменениеСтрокДействие = Элементы.СерийныеНомераИзменениеСтрокДействие.СписокВыбора[0].Значение Тогда
		
		СгенерироватьСерийныеНомераСервер(СерийныеНомераИзменениеСтрокКоличество);
		
	ИначеЕсли СерийныеНомераИзменениеСтрокДействие = Элементы.СерийныеНомераИзменениеСтрокДействие.СписокВыбора[1].Значение Тогда
		Элементы.СерийныеНомераИзменениеСтрокОт.Видимость = Истина;
		
		Для серийныйНомер=СерийныеНомераИзменениеСтрокОт По СерийныеНомераИзменениеСтрокДо Цикл
		   	НовыйНомерСтруктура = ДобавитьСерийныйНомерПоШаблону(серийныйНомер);
			
			ТекущаяСтрока = Объект.СерийныеНомера.Добавить();
			ТекущаяСтрока.НовыйНомер = НовыйНомерСтруктура.НовыйНомер;
			ТекущаяСтрока.СерийныйНомерЧисло = НовыйНомерСтруктура.НовыйНомерЧисло;
			
		КонецЦикла;
		НайтиЗарегистрированныеСерии();
	КонецЕсли;
	
	ТЗСерийныхНомеров = Объект.СерийныеНомера.Выгрузить();
	ТЗСерийныхНомеров.Свернуть("СерийныйНомер, НовыйНомер");
	Объект.СерийныеНомера.Загрузить(ТЗСерийныхНомеров);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыполнить(Команда)
	
	ДобавитьВыполнитьНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтмена(Команда)
	
	Элементы.ГруппаЗаполнить.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНажатие(Команда)
	
	Элементы.ГруппаЗаполнить.Видимость = НЕ Элементы.ГруппаЗаполнить.Видимость;
	СерийныеНомераИзменениеСтрокДействие = Элементы.СерийныеНомераИзменениеСтрокДействие.СписокВыбора[0].Значение;
	СерийныеНомераИзменениеСтрокКоличество = Макс(КоличествоВДокументе - Объект.СерийныеНомера.Количество(), 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераИзменениеСтрокДействиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Элементы.СерийныеНомераИзменениеСтрокДействие.СписокВыбора[0].Значение Тогда
		Элементы.СерийныеНомераИзменениеСтрокКоличество.Видимость = Истина;
		Элементы.СерийныеНомераИзменениеСтрокОт.Видимость = Ложь;
		Элементы.СерийныеНомераИзменениеСтрокДо.Видимость = Ложь;
		СерийныеНомераИзменениеСтрокКоличество = Макс(КоличествоВДокументе - Объект.СерийныеНомера.Количество(), 1);
		
	ИначеЕсли ВыбранноеЗначение = Элементы.СерийныеНомераИзменениеСтрокДействие.СписокВыбора[1].Значение Тогда
		Элементы.СерийныеНомераИзменениеСтрокКоличество.Видимость = Ложь;
		Элементы.СерийныеНомераИзменениеСтрокОт.Видимость = Истина;
		Элементы.СерийныеНомераИзменениеСтрокДо.Видимость = Истина;
		
		ТекущийМаксимальныйНомер = ВычислитьМаксимальныйНомерИКоличество();
		СерийныеНомераИзменениеСтрокОт = ТекущийМаксимальныйНомер + 1;
		СерийныеНомераИзменениеСтрокДо = ТекущийМаксимальныйНомер + 1 + КоличествоВДокументе - Объект.СерийныеНомера.Количество();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНомерОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.СерийныеНомера.ФормаОбъекта", Новый Структура("Ключ",Элементы.СерийныеНомераНовые.ТекущиеДанные.СерийныйНомер));
	
КонецПроцедуры

&НаКлиенте
Процедура СерииВыбранныеПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СерииВыбранныеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МассивСерийныхНомеров = ПараметрыПеретаскивания.Значение;
	Для каждого стр Из МассивСерийныхНомеров Цикл
		ДанныеСтроки = Элементы.СерииОстатки.ДанныеСтроки(стр);
		Если ДанныеСтроки<>Неопределено Тогда
			ДобавитьСерийныйНомерВыбранный(ДанныеСтроки.СерийныйНомер);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СерийныеНомераВыбранныеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ВыбранныйСерийныйНомер = Элементы.СерийныеНомераВыбранные.ТекущиеДанные.СерийныйНомер;
	УбратьСерийныйНомерВыбранный(ВыбранныйСерийныйНомер);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНаличию(Команда)
	
	НужноВыбрать = КоличествоВДокументе - Объект.СерийныеНомера.Количество();
	Если НужноВыбрать>0 Тогда
		ЗаполнитьСерийныеНомераПоНаличию(НужноВыбрать);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСерийныеНомераПоНаличию(ДобавитьКоличество)

	Запрос = Новый Запрос;
	Запрос.Текст = СерийныеНомераОстатки.ТекстЗапроса;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ ", "ВЫБРАТЬ ПЕРВЫЕ "+Формат(ДобавитьКоличество,"ЧГ=0")+" ");
	Для каждого парам Из СерийныеНомераОстатки.Параметры.Элементы Цикл
		Запрос.УстановитьПараметр(Строка(парам.Параметр), парам.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НовСтр = Объект.СерийныеНомера.Добавить();
		НовСтр.СерийныйНомер = Выборка.СерийныйНомер;
		НовСтр.НовыйНомер = Строка(Выборка.СерийныйНомер);
		
		СписокВыбранных.Добавить(Выборка.СерийныйНомер);
	КонецЦикла;
	
	СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
	
КонецПроцедуры	

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ВыборОстатков Тогда
		СписокВыбранных.Очистить();
		Для каждого ВыбНомер Из Объект.СерийныеНомера Цикл
			Если ЗначениеЗаполнено(ВыбНомер.СерийныйНомер) Тогда
				СписокВыбранных.Добавить(ВыбНомер.СерийныйНомер);	
			КонецЕсли;
		КонецЦикла;
		
		СерийныеНомераОстатки.Параметры.УстановитьЗначениеПараметра("СписокВыбранных",СписокВыбранных.ВыгрузитьЗначения());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ПолученыСерийныеНомераПодбор", ЭтотОбъект);
	СтруктураОтбор = Новый Структура("МножественныйВыбор", Истина);
	СтруктураОтбор.Вставить("Отбор", Новый Структура("Владелец, ПометкаУдаления", Номенклатура, Ложь));
	
	ОткрытьФорму("Справочник.СерийныеНомера.Форма.ФормаВыбора", СтруктураОтбор, ЭтотОбъект, , , , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыСерийныеНомераПодбор(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = тип("Массив") Тогда
		Для каждого стр Из Результат Цикл
			
			Элементы.СерийныеНомераНовые.ДобавитьСтроку();
			ТекущиеДанные = Элементы.СерийныеНомераНовые.ТекущиеДанные;
			ТекущиеДанные.НовыйНомер = стр;
			ТекущиеДанные.СерийныйНомер = стр;
			
		КонецЦикла; 
	Иначе
		Элементы.СерийныеНомераНовые.ДобавитьСтроку();
		ТекущиеДанные = Элементы.СерийныеНомераНовые.ТекущиеДанные;
		ТекущиеДанные.НовыйНомер = Результат;
		ТекущиеДанные.СерийныйНомер = Результат;
	КонецЕсли;
	
	Элементы.СерийныеНомераНовые.ЗакончитьРедактированиеСтроки(Ложь);	
	
КонецПроцедуры


&НаКлиенте
Процедура СерийныеНомераНовыеНомерКИЗГИСМПриИзменении(Элемент)
	
	ОчиститьСообщения(); 
	
	ТекущиеДанные = Элементы.СерийныеНомераНовые.ТекущиеДанные;
	ТекущиеДанные.СерийныйНомер = Неопределено;
	ПолучитьИнформациюПоКиЗДобавитьСерию(ТекущиеДанные.НомерКИЗГИСМ, ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ПоискПоШтрихкоду

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ТекШтрихкод = "";
	
	ОбработкаЗавершения = Новый ОписаниеОповещения(
		"ПоискПоШтрихкодуЗавершение",
		ЭтотОбъект, 
		Новый Структура("ТекШтрихкод", ТекШтрихкод)
	);
	
	Если УправлениеНебольшойФирмойСервер.ЭтоМобильныйКлиент() Тогда
		ОткрытьФорму("ОбщаяФорма.ФормаПоискаПоШтрихкоду",,,,,,ОбработкаЗавершения);
	Иначе
		ПоказатьВводЗначения(ОбработкаЗавершения, ТекШтрихкод, НСтр("ru = 'Введите штрихкод'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекШтрихкод = ?(Результат = Неопределено, СокрЛП(ДополнительныеПараметры.ТекШтрихкод), СокрЛП(Результат));
	
	Если НЕ ПустаяСтрока(ТекШтрихкод) Тогда
		ПолученыШтрихкоды(Новый Структура("Штрихкод, Количество", ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеПоШтрихКодам(СтруктураДанные)
	
	ДанныеПоШтрихКодам = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьДанныеПоШтрихкодамВМассиве(СтруктураДанные.МассивШтрихкодов);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		
		МассивДанныхШтрихкода = ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если МассивДанныхШтрихкода <> Неопределено
			И МассивДанныхШтрихкода.Количество() <> 0 Тогда
			
			Для Каждого ДанныеШтрихкода Из МассивДанныхШтрихкода Цикл
				
				Если НЕ ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения) Тогда
					ДанныеШтрихкода.ЕдиницаИзмерения  = ДанныеШтрихкода.Номенклатура.ЕдиницаИзмерения;
				КонецЕсли;
				ДанныеШтрихкода.Вставить("ТипНоменклатуры", ДанныеШтрихкода.Номенклатура.ТипНоменклатуры);
				Если ЗначениеЗаполнено(ДанныеШтрихкода.ЕдиницаИзмерения)
					И ТипЗнч(ДанныеШтрихкода.ЕдиницаИзмерения) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
					ДанныеШтрихкода.Вставить("Коэффициент", ДанныеШтрихкода.ЕдиницаИзмерения.Коэффициент);
				Иначе
					ДанныеШтрихкода.Вставить("Коэффициент", 1);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанные.Вставить("ДанныеПоШтрихКодам", ДанныеПоШтрихКодам);
	
КонецПроцедуры // ПолучитьДанныеПоШтрихКодам()

&НаКлиенте
Функция ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов)
	
	НеизвестныеШтрихкоды = Новый Массив;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	
	Если ТипЗнч(ДанныеШтрикодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрикодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрикодов);
	КонецЕсли;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("МассивШтрихкодов", МассивШтрихкодов);
	СтруктураДанные.Вставить("ОтборТипНоменклатуры", ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Запас"));

	ПолучитьДанныеПоШтрихКодам(СтруктураДанные);
	
	Для каждого ТекШтрихкод Из СтруктураДанные.МассивШтрихкодов Цикл
		ДанныеШтрихкода = СтруктураДанные.ДанныеПоШтрихкодам[ТекШтрихкод.Штрихкод];
		
		Если ДанныеШтрихкода.Количество() > 1 Тогда
			
			ПараметрыОткрытия = Новый Структура("МассивНоменклатуры, ТекШтрихкод", ДанныеШтрихкода, ТекШтрихкод);
			ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоДаннымШтрихкодовЗавершение", ЭтотОбъект, Новый Структура("СтруктураДанные", СтруктураДанные));
			
			ОткрытьФорму("РегистрСведений.ШтрихкодыНоменклатуры.Форма.ДублиНоменклатурыПоШтрихКодам", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			Продолжить;
		КонецЕсли;
		
		Если ДанныеШтрихкода <> Неопределено
		   И ДанныеШтрихкода.Количество() = 0 Тогда
		   
		    ТекШтрихкод.Вставить("Номенклатура", Номенклатура);
			ТекШтрихкод.Вставить("Характеристика", Характеристика);
			ТекШтрихкод.Вставить("Партия", Партия);
			ТекШтрихкод.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
			НеизвестныеШтрихкоды.Добавить(ТекШтрихкод);
			
		ИначеЕсли СтруктураДанные.ОтборТипНоменклатуры <> ДанныеШтрихкода[0].ТипНоменклатуры Тогда
			ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры"
			, ТекШтрихкод.Штрихкод, ДанныеШтрихкода[0].Номенклатура, ДанныеШтрихкода[0].ТипНоменклатуры));
		ИначеЕсли НЕ (ДанныеШтрихкода[0].Номенклатура = Номенклатура И ДанныеШтрихкода[0].Характеристика = Характеристика 
			И ДанныеШтрихкода[0].Партия = Партия И ДанныеШтрихкода[0].ЕдиницаИзмерения = ЕдиницаИзмерения) Тогда
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			СтрокаСообщения = НСтр("ru = 'Считанный штрихкод привязан к другой номенклатуре: %1% %2% %3% %4%'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ДанныеШтрихкода.Номенклатура);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ДанныеШтрихкода.Характеристика);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ДанныеШтрихкода.Партия);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%4%", ДанныеШтрихкода.ЕдиницаИзмерения);
			ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
			
		Иначе
			
			ДанныеШтрихкода = ДанныеШтрихкода[0];
			
			УжеЕстьТакойЭлемент = Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НовыйНомер",ТекШтрихкод.Штрихкод));
			Если УжеЕстьТакойЭлемент.Количество() = 0 Тогда
				НоваяСтрока = Объект.СерийныеНомера.Добавить();
				НоваяСтрока.СерийныйНомер = ДанныеШтрихкода.СерийныйНомер;
				НоваяСтрока.НовыйНомер = ТекШтрихкод.Штрихкод;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа",НеизвестныеШтрихкоды, ШтрихкодыНекорректногоТипа);
	
КонецФункции // ЗаполнитьПоДаннымШтрихкодов()

&НаКлиенте
Процедура ЗаполнитьПоДаннымШтрихкодовЗавершение(СтруктураНоменклатуры, Параметры) Экспорт
	
	Если СтруктураНоменклатуры = Неопределено Тогда Возврат КонецЕсли;
	
	ДанныеШтрихкода = СтруктураНоменклатуры.МассивНоменклатуры[0];
	ТекШтрихкод = СтруктураНоменклатуры.ТекШтрихкод;
	ШтрихкодыНекорректногоТипа = Новый Массив;
	СтруктураДанные = Параметры.СтруктураДанные;
	
	Если СтруктураДанные.ОтборТипНоменклатуры <> ДанныеШтрихкода.ТипНоменклатуры Тогда
		ШтрихкодыНекорректногоТипа.Добавить(Новый Структура("Штрихкод,Номенклатура,ТипНоменклатуры", ТекШтрихкод.Штрихкод, ДанныеШтрихкода.Номенклатура, ДанныеШтрихкода.ТипНоменклатуры));
	ИначеЕсли НЕ (ДанныеШтрихкода.Номенклатура = Номенклатура И ДанныеШтрихкода.Характеристика = Характеристика 
		И ДанныеШтрихкода.Партия = Партия И ДанныеШтрихкода.ЕдиницаИзмерения = ЕдиницаИзмерения) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Считанный штрихкод привязан к другой номенклатуре: %1% %2% %3% %4%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ДанныеШтрихкода.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ДанныеШтрихкода.Характеристика);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ДанныеШтрихкода.Партия);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%4%", ДанныеШтрихкода.ЕдиницаИзмерения);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	Иначе
		
		УжеЕстьТакойЭлемент = Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НовыйНомер",ТекШтрихкод.Штрихкод));
		Если УжеЕстьТакойЭлемент.Количество() = 0 Тогда
			НоваяСтрока = Объект.СерийныеНомера.Добавить();
			НоваяСтрока.СерийныйНомер = ДанныеШтрихкода.СерийныйНомер;
			НоваяСтрока.НовыйНомер = ТекШтрихкод.Штрихкод;
		КонецЕсли;
	КонецЕсли;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкоды(ДанныеШтрикодов) Экспорт
	
	Модифицированность = Истина;
	
	НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(ДанныеШтрикодов);
	НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
	ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
	
	ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	
	Если НеизвестныеШтрихкоды.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ПолученыШтрихкодыЗавершение", ЭтотОбъект, НеизвестныеШтрихкоды);
		
		ОткрытьФорму(
			"РегистрСведений.ШтрихкодыНоменклатуры.Форма.РегистрацияШтрихкодовНоменклатуры",
			Новый Структура("НеизвестныеШтрихкоды, НоменклатураВладелец", НеизвестныеШтрихкоды, Номенклатура), ЭтотОбъект,,,,Оповещение
		);
		
		Возврат;
		
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры // ПолученыШтрихкоды()

&НаКлиенте
Процедура ПолученыШтрихкодыЗавершение(ВозвращаемыеПараметры, Параметры) Экспорт
	
	НеизвестныеШтрихкоды = Параметры;
	
	Если ВозвращаемыеПараметры <> Неопределено Тогда
		
		МассивШтрихкодов = Новый Массив;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ЗарегистрированныеШтрихкоды Цикл
			МассивШтрихкодов.Добавить(ЭлементМассива);
		КонецЦикла;
		
		Для каждого ЭлементМассива Из ВозвращаемыеПараметры.ПолученыНовыеШтрихкоды Цикл
			УжеЕстьТакойЭлемент = МассивШтрихкодов.Найти(ЭлементМассива);
			Если УжеЕстьТакойЭлемент = Неопределено Тогда
				МассивШтрихкодов.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
		
		НедобавленныеШтрихкоды		= ЗаполнитьПоДаннымШтрихкодов(МассивШтрихкодов);
		НеизвестныеШтрихкоды		= НедобавленныеШтрихкоды.НеизвестныеШтрихкоды;
		ШтрихкодыНекорректногоТипа	= НедобавленныеШтрихкоды.ШтрихкодыНекорректногоТипа;
		ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа);
	КонецЕсли;
	
	ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыФрагмент(НеизвестныеШтрихкоды) Экспорт
	
	Для каждого ТекНеизвестныйШтрихкод Из НеизвестныеШтрихкоды Цикл
		
		СтрокаСообщения = НСтр("ru = 'Данные по штрихкоду не найдены: %1%; количество: %2%'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНеизвестныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНеизвестныйШтрихкод.Количество);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолученыШтрихкодыНекорректногоТипа(ШтрихкодыНекорректногоТипа) Экспорт
	
	Для каждого ТекНекорректныйШтрихкод Из ШтрихкодыНекорректногоТипа Цикл
		
		СтрокаСообщения = НСтр("ru = 'Найденная по штрихкоду %1% номенклатура -%2%- имеет тип %3%, который не подходит для этой табличной части'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%1%", ТекНекорректныйШтрихкод.Штрихкод);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%2%", ТекНекорректныйШтрихкод.Номенклатура);
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "%3%", ТекНекорректныйШтрихкод.ТипНоменклатуры);
		ОбщегоНазначенияКлиент.СообщитьПользователю(СтрокаСообщения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ТекущиеДанные = Элементы.СерийныеНомераНовые.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор(); 	
	Иначе
		ИдентификаторТекущейСтроки = Неопределено;
	КонецЕсли;

	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Данные = МенеджерОборудованияУНФКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр);
			ПолученыШтрихкоды(Данные);
		КонецЕсли;

		Если ИмяСобытия = "RFID" Тогда
			Если Не ИдетЗаписьМетки И RFIDКлиент.ДляОбработкиRFIDНуженСерверныйВызов(Параметр, ЭтаФорма) Тогда
				РезультатОбработки = ОбработатьСчитываниеRFID(Параметр, ИдентификаторТекущейСтроки);
			КонецЕсли;
		КонецЕсли;

		Если РезультатОбработки <> Неопределено Тогда
			Если РезультатОбработки.ИдентификаторТекущейСтроки <> Неопределено Тогда
				Элементы.СерийныеНомераНовые.ТекущаяСтрока = РезультатОбработки.ИдентификаторТекущейСтроки;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ЗаписьRFID_Серии" Тогда
		ДанныеСерии = Параметр;
		ТекущиеДанные.RFIDEPC = ДанныеСерии.RFIDEPC;
		СообщениеОбОшибке = "";
		RFIDКлиентСервер.ЗаполнитьФлагиРаботыСМеткой(ТекущиеДанные, GTIN, Неопределено, НастройкиИспользованияСерий,
			ЭтоМаркировкаПерсонифицированнымиКиЗ, СообщениеОбОшибке);
		Если СообщениеОбОшибке <> "" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
		СохранитьВводСерийСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ГИСМ

&НаСервере
Процедура НастроитьРежимГИСМ()
	
	Если РежимГИСМ Тогда
		Элементы.СерииНомер.Видимость = Ложь;
		Элементы.СерийныеНомераНовыеНомерКИЗГИСМ.Видимость = Истина;
		Элементы.RFID.Видимость = Истина;
		
		Элементы.ЗаписатьRFID.Видимость = ЭтоМаркировкаТоваровГИСМ;
		
		// работает для продукции, маркируемой ГИСМ
		Элементы.СерийныеНомераНовыеНомерГИСМ.Видимость = ЭтоМаркировкаТоваровГИСМ;
		
		Элементы.СерийныеНомераНовыеНужноЗаписатьМетку.Видимость = ЭтоМаркировкаТоваровГИСМ;
		
		Элементы.ВыборОстатков.Видимость = Ложь;
		Элементы.ПоискПоШтрихкодуНовые.Видимость = Ложь;
		Элементы.СгенерироватьСерии.Видимость = Ложь;
		Элементы.ДобавитьНомер.Видимость = Ложь;
		Элементы.ВвестиНомер.Видимость = Ложь;
		Элементы.Подбор.Видимость = Ложь;
		Элементы.ШаблонСерийногоНомера.Видимость = Ложь;
		Считыватели = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("СчитывательRFID");
		Если Считыватели.Количество() = 0 Тогда
			ПодключатьСчитывательRFID = Ложь;
		ИначеЕсли Считыватели.Количество() = 1 Тогда
			ПодключатьСчитывательRFID = Истина;
			СчитывательRFID = Считыватели[0].Ссылка;
		Иначе
			ТекстСообщения = НСтр("ru = 'К рабочему месту подключено несколько считывателей RFID. Работа одновременно с несколькими считывателями не поддерживается. Оставьте только один считываетель.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			ПодключатьСчитывательRFID = Ложь;
		КонецЕсли;
		
	Иначе
		Элементы.СерииНомер.Видимость = Истина;
		Элементы.СерийныеНомераНовыеНомерГИСМ.Видимость = Ложь;
		Элементы.СерийныеНомераНовыеНомерКИЗГИСМ.Видимость = Ложь;
		Элементы.RFID.Видимость = Ложь;
		Элементы.ЗаписатьRFID.Видимость = Ложь;
		Элементы.СерийныеНомераНовыеНужноЗаписатьМетку.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчитатьМетку(Команда)
	ОчиститьСообщения();
	RFIDКлиент.ОткрытьСессиюСчитывателяRFID(ЭтаФорма);
	ПодключитьОбработчикОжидания("ОтработатьТаймаутОжиданияСчитыванияМетки", 5, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьТаймаутОжиданияСчитыванияМетки()
	
	Если ОткрытаСессияСчитывателяRFID Тогда
		RFIDКлиент.ОтработатьТаймаутОжиданияСчитыванияМетки(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьСчитываниеRFID(ДанныеМеток, ИдентификаторТекущейСтроки)
	
	ПараметрыОбработки = RFIDСервер.ПараметрыОбработкиСчитанныхRFID();
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки,ЭтаФорма);
	РезультатОбработки = RFIDСервер.ОбработатьСчитываниеRFID(ДанныеМеток, ПараметрыОбработки, Объект.СерийныеНомера, ИдентификаторТекущейСтроки);
	
	Если РезультатОбработки.ИдентификаторТекущейСтроки <> Неопределено Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьRFID(Команда)
	
	ИдетЗаписьМетки = Истина;
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ДанныеСерии",Элементы.СерийныеНомераНовые.ТекущиеДанные);
	ПараметрыЗаписи.Вставить("Форма", ЭтаФорма);
	RFIDКлиент.ЗаписатьДанныеВRFID(Неопределено, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ПолучитьИнформациюПоКиЗДобавитьСерию(НомерКиЗ, ИдентификаторТекущейСтроки)

	Если Не ИнтеграцияГИСМВызовСервера.ЭтоНомерКиЗ(НомерКиЗ) Тогда
		ТекстСообщения = НСтр("ru = 'Введенные данные не являются номером КиЗ.'");
		НомерКиЗ = "";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	ИнформацияПоКиЗ = ИнтеграцияГИСМ.ИнформацияОКиЗПоНомеру(НомерКиЗ);
	ИнформацияПоКиЗ.НомерКиЗ = НомерКиЗ;

	ПараметрыОбработки = RFIDСервер.ПараметрыОбработкиСчитанныхRFIDИКиЗ();
	ЗаполнитьЗначенияСвойств(ПараметрыОбработки, ЭтотОбъект);
	RFIDСервер.ДобавитьСериюПоИнформацииПоКиЗ(ИнформацияПоКиЗ, ПараметрыОбработки, Объект.СерийныеНомера,
		ИдентификаторТекущейСтроки);

КонецПроцедуры

&НаКлиенте
Функция ПроверитьМеткиНаНеобходимостьЗаписать()
	
	Если ЭтоМаркировкаТоваровГИСМ
		И НЕ ЭтоМаркировкаОстатковГИСМ Тогда
		
		ЕстьНезаписанныеМетки = Ложь;
		
		СтрокиСТребованиемЗаписи = Объект.СерийныеНомера.НайтиСтроки(Новый Структура("НужноЗаписатьМетку", Истина));
		
		Для Каждого Строка Из СтрокиСТребованиемЗаписи Цикл
			
			Сообщить(НСтр("ru='Необходимо записать данные в КИЗ с номером '")+Строка.НомерКИЗГИСМ);
			ЕстьНезаписанныеМетки = Истина;
		КонецЦикла;
		
		Возврат НЕ ЕстьНезаписанныеМетки;
		
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СерииОстаткиПриАктивизацииСтроки(Элемент)
	
	КоличествоВыделено = Элементы.СерииОстатки.ВыделенныеСтроки.Количество();
	
КонецПроцедуры

#КонецОбласти