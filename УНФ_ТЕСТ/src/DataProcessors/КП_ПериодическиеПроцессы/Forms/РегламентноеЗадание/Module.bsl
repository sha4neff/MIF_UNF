
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа.
		                             |
		                             |Изменение свойств регламентного задания
		                             |выполняется только администраторами.'");
	КонецЕсли;
	
	Действие = Параметры.Действие;
	
	Если СтрНайти(", Добавить, Скопировать, Изменить,", ", " + Действие + ",") = 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Неверные параметры открытия формы ""Регламентное задание"".'");
	КонецЕсли;
	
	Если Действие = "Добавить" Тогда
		
		ПараметрыОтбора        = Новый Структура;
		ПараметризуемыеЗадания = Новый Массив;
		ЗависимостиЗаданий     = РегламентныеЗаданияСлужебный.РегламентныеЗаданияЗависимыеОтФункциональныхОпций();
		
		ПараметрыОтбора.Вставить("Параметризуется", Истина);
		РезультатПоиска = ЗависимостиЗаданий.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого СтрокаТаблицы Из РезультатПоиска Цикл
			ПараметризуемыеЗадания.Добавить(СтрокаТаблицы.РегламентноеЗадание);
		КонецЦикла;
		
		Ответственный=Пользователи.ТекущийПользователь();
		
		Расписание = Новый РасписаниеРегламентногоЗадания;
		
	Иначе
		Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Параметры.Идентификатор);
		ЗаполнитьЗначенияСвойств(
			ЭтотОбъект,
			Задание,
			"Ключ,
			|Предопределенное,
			|Использование,
			|Наименование,
			|ИмяПользователя,
			|ИнтервалПовтораПриАварийномЗавершении,
			|КоличествоПовторовПриАварийномЗавершении");
		
		Идентификатор = Строка(Задание.УникальныйИдентификатор);
		Если Задание.Метаданные = Неопределено Тогда
			ИмяМетаданных        = НСтр("ru = '<нет метаданных>'");
			СинонимМетаданных    = НСтр("ru = '<нет метаданных>'");
			ИмяМетодаМетаданных  = НСтр("ru = '<нет метаданных>'");
		Иначе
			ИмяМетаданных        = Задание.Метаданные.Имя;
			СинонимМетаданных    = Задание.Метаданные.Синоним;
			ИмяМетодаМетаданных  = Задание.Метаданные.ИмяМетода;
		КонецЕсли;
		Расписание = Задание.Расписание;
		
		//прочитаем параметры периодического процесса
		СтруктураЗадания=КП_ПериодическиеЗадания.ПолучитьСтруктуруПериодическогоПроцесса(Идентификатор);

		ВидПроцесса=СтруктураЗадания.ВидПроцесса;
		РабочаяГруппа=СтруктураЗадания.РабочаяГруппа;
		Ответственный=СтруктураЗадания.Ответственный;
		
		Если СтруктураЗадания.ТекстПроцессаХранилище=Неопределено Тогда
			ТекстПроцессаФорматированный=Новый ФорматированныйДокумент;
			ТипТекстаПроцесса=0;
		Иначе			
			ТекстПроцессаФорматированный=СтруктураЗадания.ТекстПроцессаХранилище.Получить();
			ТипТекстаПроцесса=?(ПустаяСтрока(ТекстПроцессаФорматированный.ПолучитьТекст()), 0, 1);
		КонецЕсли;
					
		СообщенияПользователюИОписаниеИнформацииОбОшибке = РегламентныеЗаданияСлужебный.СообщенияИОписанияОшибокРегламентногоЗадания(Задание);
						
	КонецЕсли;
	
	Если Действие <> "Изменить" Тогда
		Идентификатор = НСтр("ru = '<будет создан при записи>'");
		Использование = Ложь;
		
		Наименование = ?(
			Действие = "Добавить",
			"",
			РегламентныеЗаданияСлужебный.ПредставлениеРегламентногоЗадания(Задание));
	КонецЕсли;
	
	// Заполнение списка выбора имени пользователя.
	МассивПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для каждого Пользователь Из МассивПользователей Цикл
		Элементы.ИмяПользователя.СписокВыбора.Добавить(Пользователь.Имя);
	КонецЦикла;
	
	СтандартныеПодсистемыСервер.УстановитьОтображениеЗаголовковГрупп(ЭтотОбъект);
	
	УстановитьОформлениеЭлементов();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Действие = "Добавить" Тогда
		//ПодключитьОбработчикОжидания("ВыборШаблонаНовогоРегламентногоЗадания", 0.1, Истина);
		
		ИмяМетаданных       = "КП_ПериодическийПроцесс";
		СинонимМетаданных   = "Периодическое задание (бизнес-процессы)";
		ИмяМетодаМетаданных = "КП_ПериодическиеЗадания.КП_ПериодическоеЗадание";
		Наименование        = "Периодический процесс";
		
		Использование=Истина;

	
	Иначе
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Идентификатор) Тогда
		Элементы.ДекорацияРасписаниеТекст.Заголовок=СокрЛП(Расписание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	ЗаписатьРегламентноеЗадание();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	
	ЗаписатьИЗакрытьЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеВыполнить()

	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Диалог.Показать(Новый ОписаниеОповещения("ОткрытьРасписаниеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если НЕ ЗаписатьРегламентноеЗадание() Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборШаблонаНовогоРегламентногоЗаданияЗавершение(ЭлементСписка, Контекст) Экспорт
	
	Если ЭлементСписка = Неопределено Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ИмяМетаданных       = СтрПолучитьСтроку(ЭлементСписка.Значение, 1);
	СинонимМетаданных   = СтрПолучитьСтроку(ЭлементСписка.Значение, 2);
	ИмяМетодаМетаданных = СтрПолучитьСтроку(ЭлементСписка.Значение, 3);
	Наименование        = ЭлементСписка.Представление;
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗавершение(НовоеРасписание, Контекст) Экспорт

	Если НовоеРасписание <> Неопределено Тогда
		Расписание = НовоеРасписание;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Идентификатор) Тогда
		Элементы.ДекорацияРасписаниеТекст.Заголовок=СокрЛП(Расписание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьРегламентноеЗадание()
	
	Если НЕ ЗначениеЗаполнено(ИмяМетаданных) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекущийИдентификатор = ?(Действие = "Изменить", Идентификатор, Неопределено);
	
	Если НЕ ПустаяСтрока(Идентификатор) Тогда
		
		Если НЕ ЗначениеЗаполнено(ВидПроцесса) Тогда
			ПоказатьПредупреждение(Неопределено, "Укажите вид процесса");
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			ПоказатьПредупреждение(Неопределено, "Укажите ответственного");
			Возврат Ложь;
		КонецЕсли;
				
	КонецЕсли;
	
	ЗаписатьРегламентноеЗаданиеНаСервере();
	
	ОбновитьЗаголовокФормы();
	
	Оповестить("Запись_РегламентныеЗадания", ТекущийИдентификатор);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СформироватьХранилищеТекста(ТекстПроцессаФорматированный)
	Возврат Новый ХранилищеЗначения(ТекстПроцессаФорматированный);
КонецФункции

&НаСервере
Процедура ЗаписатьРегламентноеЗаданиеНаСервере()
	
	Если Действие = "Изменить" Тогда
		Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Идентификатор);
	Иначе
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяМетаданных]);
		
		Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
		
		Идентификатор = Строка(Задание.УникальныйИдентификатор);
		Действие = "Изменить";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(
		Задание,
		ЭтотОбъект,
		"Ключ, 
		|Наименование,
		|Использование,
		|ИмяПользователя,
		|ИнтервалПовтораПриАварийномЗавершении,
		|КоличествоПовторовПриАварийномЗавершении");
	
	Задание.Расписание = Расписание;
	Задание.Записать();
	
	СтруктураЗадания=Новый Структура;
	СтруктураЗадания.Вставить("ВидПроцесса", ВидПроцесса);
	СтруктураЗадания.Вставить("РабочаяГруппа", РабочаяГруппа);
	СтруктураЗадания.Вставить("Ответственный", Ответственный);
	СтруктураЗадания.Вставить("ТекстПроцессаХранилище", Новый ХранилищеЗначения(ТекстПроцессаФорматированный));
		
	Если НЕ КП_ПериодическиеЗадания.ЗаписатьСтруктуруПериодическогоПроцесса(Идентификатор, СтруктураЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()
	
	Если НЕ ПустаяСтрока(Наименование) Тогда
		Представление = Наименование;
		
	ИначеЕсли НЕ ПустаяСтрока(СинонимМетаданных) Тогда
		Представление = СинонимМетаданных;
	Иначе
		Представление = ИмяМетаданных;
	КонецЕсли;
	
	Если Действие = "Изменить" Тогда
		//Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Регламентное задание)'"), Представление);
		Заголовок = Представление;
	Иначе
		Заголовок = НСтр("ru = 'Регламентное задание (создание)'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПроцессаПриИзменении(Элемент)
	Модифицированность=Истина;
	СформироватьНаименованиеРегламентногоЗадания();
КонецПроцедуры

&НаКлиенте
Процедура РабочаяГруппаПриИзменении(Элемент)
	СформироватьНаименованиеРегламентногоЗадания();	
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименованиеРегламентногоЗадания()
	Наименование=СокрЛП(ВидПроцесса);
	Если НЕ ПустаяСтрока(РабочаяГруппа) Тогда
		Наименование=Наименование+" ("+СокрЛП(РабочаяГруппа)+")";
	КонецЕсли;
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипТекстаПроцессаПриИзменении(Элемент)
	УстановитьОформлениеЭлементов();
КонецПроцедуры

Процедура УстановитьОформлениеЭлементов()
	Элементы.ГруппаТекстПроцесса.Видимость=(ТипТекстаПроцесса=1);
КонецПроцедуры

&НаКлиенте
Процедура ТекстПроцессаФорматированныйПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Модифицированность=Истина;
КонецПроцедуры

#КонецОбласти
