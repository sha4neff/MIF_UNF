#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийПользователь=Пользователи.ТекущийПользователь();	
	
	Пользователь=СокрЛП(ТекущийПользователь);
	
	ИспользоватьАвтообновлениеРабочегоСтола=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ИспользоватьАвтообновлениеРабочегоСтола");
	Если ИспользоватьАвтообновлениеРабочегоСтола=Неопределено Тогда
		ИспользоватьАвтообновлениеРабочегоСтола=Истина;
		ПериодАвтообновленияРабочегоСтолаСекунд=10;
		
	ИначеЕсли ИспользоватьАвтообновлениеРабочегоСтола Тогда
		ПериодАвтообновленияРабочегоСтолаСекунд=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПериодАвтообновленияРабочегоСтолаСекунд");

	КонецЕсли;
	
	ЗагрузитьНастройкиСервером();
	
	Элементы.ТекстЗаданияПредпросмотрФорматированный.Шрифт=КП_ОбщееСервер.ПолучитьШрифтПользователя();
	
	УстановитьПараметрыСписковЗадач();
			
	УстановитьАвтообновлениеСписков(ИспользоватьАвтообновлениеРабочегоСтола, ПериодАвтообновленияРабочегоСтолаСекунд);
		
	УстановитьГруппировкиСписков();
	
	ДемоВерсияССайта=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ДемоВерсияСистемы", "ДемоВерсияССайта",Ложь);

	Если ДемоВерсияССайта<>Неопределено И ДемоВерсияССайта Тогда
		Элементы.ГруппаДемоВерсия.Видимость=Истина;
	КонецЕсли;
	
	КП_ОформлениеСтрокСервер.УстановитьОформлениеСписка(СписокВыданныеЗадачи, "Наименование");
	КП_ОформлениеСтрокСервер.УстановитьОформлениеСписка(СписокПолученныеЗадачи, "Наименование");
		
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ЗагрузитьНастройкиСервером();
	
	//ГруппировкаПолученныеЗадачиДата=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаПолученныеЗадачиДата", ТекущийПользователь);
	//ГруппировкаПолученныеЗадачиИнициатор=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаПолученныеЗадачиИнициатор", ТекущийПользователь);
	//
	//ГруппировкаЗадачиВРаботеДата=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаЗадачиВРаботеДата", ТекущийПользователь);
	//ГруппировкаЗадачиВРаботеИнициатор=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаЗадачиВРаботеИнициатор", ТекущийПользователь);
	//
	//ГруппировкаВыданныеЗадачиИсполнитель=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаВыданныеЗадачиИсполнитель", ТекущийПользователь);
	//ГруппировкаВыданныеЗадачиСостояние=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("РабочийСтолПользователя", "ГруппировкаВыданныеЗадачиСостояние", ТекущийПользователь);

	УстановитьГруппировкиСписков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СписокУзловГруппировок=ПолучитьСписокУзловГруппировок();
		
	Если СписокУзловГруппировок.Количество()>0 Тогда
		ЗначениеУзла=КП_ОбщееСервер.ПолучитьЗначениеСпискаПоПредставлению(СписокУзловГруппировок, "Новые задачи");
		Если ЗначениеЗаполнено(ЗначениеУзла) Тогда
			Попытка
				Элементы.СписокПолученныеЗадачи.Развернуть(ЗначениеУзла);
			Исключение
				ТекстОшибки=ОписаниеОшибки();
				//такой группировки нет
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСервером()

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НавигаторЗадач","ГруппировкаПолученныеЗадачиДата", ГруппировкаПолученныеЗадачиДата);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НавигаторЗадач","ГруппировкаПолученныеЗадачиВид", ГруппировкаПолученныеЗадачиВид);		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НавигаторЗадач","ГруппировкаПолученныеЗадачиИнициатор", ГруппировкаПолученныеЗадачиИнициатор);		
		
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НавигаторЗадач","ГруппировкаВыданныеЗадачиИсполнитель", ГруппировкаВыданныеЗадачиИсполнитель);
    ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НавигаторЗадач","ГруппировкаВыданныеЗадачиСостояние", ГруппировкаВыданныеЗадачиСостояние);
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиСервером()
	
	ГруппировкаПолученныеЗадачиДата=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ГруппировкаПолученныеЗадачиДата");
	ГруппировкаПолученныеЗадачиВид=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ГруппировкаПолученныеЗадачиВид");
	ГруппировкаПолученныеЗадачиИнициатор=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ГруппировкаПолученныеЗадачиИнициатор");
	ГруппировкаВыданныеЗадачиИсполнитель=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ГруппировкаВыданныеЗадачиИсполнитель");
	ГруппировкаВыданныеЗадачиСостояние=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ГруппировкаВыданныеЗадачиСостояние");
		
	ИнтервалПросрочкиМинутЗначение=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ИнтервалПросрочкиМинут");
	
	Если ИнтервалПросрочкиМинутЗначение=Неопределено Тогда
		Объект.ИнтервалПросрочкиМинут=0;
	Иначе
		Объект.ИнтервалПросрочкиМинут=ИнтервалПросрочкиМинутЗначение;
	КонецЕсли;
	
	ИнтервалПросрочкиИсполнителейМинутЗначение=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ИнтервалПросрочкиИсполнителейМинут");
	
	Если ИнтервалПросрочкиИсполнителейМинутЗначение=Неопределено Тогда
		Объект.ИнтервалПросрочкиИсполнителейМинут=0;
	Иначе
		Объект.ИнтервалПросрочкиИсполнителейМинут=ИнтервалПросрочкиМинутЗначение;
	КонецЕсли;

	ДатаПоказаВыполненныхЗначение=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ДатаПоказаВыполненных");
	
	Если ДатаПоказаВыполненныхЗначение=Неопределено Тогда
		Объект.ДатаПоказаВыполненных=НачалоГода(ТекущаяДата());
	Иначе
		Объект.ДатаПоказаВыполненных=ДатаПоказаВыполненныхЗначение;
	КонецЕсли;

	ДатаПоказаВыполненныхИсполнителямиЗначение=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ДатаПоказаВыполненныхИсполнителями");
	
	Если ДатаПоказаВыполненныхИсполнителямиЗначение=Неопределено Тогда
		Объект.ДатаПоказаВыполненныхИсполнителями=НачалоГода(ТекущаяДата());
	Иначе
		Объект.ДатаПоказаВыполненныхИсполнителями=ДатаПоказаВыполненныхИсполнителямиЗначение;
	КонецЕсли;
	
	ПоказыватьПредпросмотрЗначение=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ПоказыватьПредпросмотр");
	ПоказыватьСтрокуПоискаЗначение=ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НавигаторЗадач", "ПоказыватьСтрокуПоиска");
	
	Если ДатаПоказаВыполненныхЗначение=Неопределено Тогда
		Объект.ПоказыватьПредпросмотр=Истина;
	Иначе
		Объект.ПоказыватьПредпросмотр=ПоказыватьПредпросмотрЗначение;
	КонецЕсли;
	
	Если ПоказыватьСтрокуПоискаЗначение=Неопределено Тогда
		Объект.ПоказыватьСтрокуПоиска=Истина;
	Иначе
		Объект.ПоказыватьСтрокуПоиска=ПоказыватьСтрокуПоискаЗначение;
	КонецЕсли;
	
	Если Объект.ПоказыватьСтрокуПоиска Тогда
		Элементы.СписокПолученныеЗадачи.ПоложениеСтрокиПоиска=ПоложениеСтрокиПоиска.Низ;
		Элементы.СписокВыданныеЗадачи.ПоложениеСтрокиПоиска=ПоложениеСтрокиПоиска.Низ;
	Иначе
		Элементы.СписокПолученныеЗадачи.ПоложениеСтрокиПоиска=ПоложениеСтрокиПоиска.Нет;
		Элементы.СписокВыданныеЗадачи.ПоложениеСтрокиПоиска=ПоложениеСтрокиПоиска.Нет;
	КонецЕсли;
	
	Элементы.ТекстЗаданияПредпросмотрФорматированный.Видимость=Объект.ПоказыватьПредпросмотр;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаФормыНажатие(Элемент)
	
	РезультатОткрытия = Неопределено;
	
	ОткрытьФорму("Обработка.КП_НавигаторЗадач.Форма.ФормаНастройки",,,,,, Новый ОписаниеОповещения("ДекорацияНастройкаФормыНажатиеЗавершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
		
	Если ИмяСобытия="КП_Задача" Тогда
		
		УстановитьПараметрыПолученныеЗадачи();
		УстановитьПараметрыВыданныеЗадачи();		
		
	ИначеЕсли ИмяСобытия="КП_ИзменениеНастройкиЦвета" Тогда
		 ОбновитьОформлениеСписка();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПараметрыСписковЗадач()
	
	УстановитьПараметрыПолученныеЗадачи();
	УстановитьПараметрыВыданныеЗадачи();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыПолученныеЗадачи()

	Попытка
		ЭтаФорма.СписокПолученныеЗадачи.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);
		ЭтаФорма.СписокПолученныеЗадачи.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());	
	    ЭтаФорма.СписокПолученныеЗадачи.Параметры.УстановитьЗначениеПараметра("ПустаяДата", Дата("00010101"));	
		ЭтаФорма.СписокПолученныеЗадачи.Параметры.УстановитьЗначениеПараметра("ДатаВыполнения", Объект.ДатаПоказаВыполненных);
		ЭтаФорма.СписокПолученныеЗадачи.Параметры.УстановитьЗначениеПараметра("ПараметрВыполнениеПроцент", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ВыполнениеПроцент);
		ЭтаФорма.СписокПолученныеЗадачи.Параметры.УстановитьЗначениеПараметра("ДатаСрокаВыполнения", ТекущаяДата()+Объект.ИнтервалПросрочкиМинут*60);
		
		Элементы.СписокПолученныеЗадачи.Обновить();
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Error building a list of the resulting task. May not have access.';ru='Ошибка построения списка полученных задач. Возможно нет прав доступа.'"));
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры

 &НаСервере
 Процедура УстановитьПараметрыВыданныеЗадачи()
	Попытка
		ЭтаФорма.СписокВыданныеЗадачи.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
		ЭтаФорма.СписокВыданныеЗадачи.Параметры.УстановитьЗначениеПараметра("ПустаяДата", Дата("00010101"));
		//ЭтаФорма.СписокВыданныеЗадачи.Параметры.УстановитьЗначениеПараметра("ПустоеСостояниеЗадачи", Перечисления.КП_СостояниеЗадач.ПустаяСсылка());
		ЭтаФорма.СписокВыданныеЗадачи.Параметры.УстановитьЗначениеПараметра("ДатаВыполнения", Объект.ДатаПоказаВыполненныхИсполнителями);	
		ЭтаФорма.СписокВыданныеЗадачи.Параметры.УстановитьЗначениеПараметра("ПустойПользователь", Справочники.Пользователи.ПустаяСсылка());
		ЭтаФорма.СписокВыданныеЗадачи.Параметры.УстановитьЗначениеПараметра("ПараметрВыполнениеПроцент", ПланыВидовХарактеристик.КП_ПараметрыЗадач.ВыполнениеПроцент);
		ЭтаФорма.СписокВыданныеЗадачи.Параметры.УстановитьЗначениеПараметра("Пользователь", ТекущийПользователь);	
		ЭтаФорма.СписокВыданныеЗадачи.Параметры.УстановитьЗначениеПараметра("ДатаСрокаВыполнения", ТекущаяДата()+Объект.ИнтервалПросрочкиИсполнителейМинут*60);
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Error building a list issued by the task. May not have access.';ru='Ошибка построения списка выданных задач. Возможно нет прав доступа.'"));
		
	КонецПопытки;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолученныеЗадачиСгруппироватьПоАвторуНажатие(Элемент)
	
	Если НЕ ГруппировкаПолученныеЗадачиИнициатор Тогда
		ГруппировкаПолученныеЗадачиИнициатор=Истина;
		СгруппироватьСписокПолученныхЗадачСервером("Инициатор");
		Элементы.СписокПолученныеЗадачи.Обновить();
		Элементы.ДекорацияПолученныеЗадачиНетГрупп.Видимость=Истина;
		УстановитьДоступностьГиперссылокПолученныеЗадачи();
		
	КонецЕсли;
    УстановитьПараметрыПолученныеЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолученныеЗадачиСгруппироватьПоДатеНажатие(Элемент)
	
	// Вставить содержимое обработчика.
	
	Если НЕ ГруппировкаПолученныеЗадачиДата Тогда
		ГруппировкаПолученныеЗадачиДата=Истина;
		СгруппироватьСписокПолученныхЗадачСервером("СрокИсполнения");
		Элементы.ДекорацияПолученныеЗадачиНетГрупп.Видимость=Истина;
		УстановитьДоступностьГиперссылокПолученныеЗадачи();
	КонецЕсли;
	
    УстановитьПараметрыПолученныеЗадачи();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАвтообновлениеСписков(ИспользоватьАвтообновлениеРабочегоСтола, ПериодАвтообновленияРабочегоСтолаСекунд)
	
	Элементы.СписокПолученныеЗадачи.АвтоОбновление=ИспользоватьАвтообновлениеРабочегоСтола;
	Элементы.СписокПолученныеЗадачи.ПериодАвтоОбновления=ПериодАвтообновленияРабочегоСтолаСекунд;
	
	Элементы.СписокВыданныеЗадачи.АвтоОбновление=ИспользоватьАвтообновлениеРабочегоСтола;
	Элементы.СписокВыданныеЗадачи.ПериодАвтоОбновления=ПериодАвтообновленияРабочегоСтолаСекунд;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГруппировкиСписков()
	
	//новые задачи
	
	Если ГруппировкаПолученныеЗадачиИнициатор Тогда
		СгруппироватьСписокПолученныхЗадачСервером("Инициатор");
		Элементы.ДекорацияПолученныеЗадачиНетГрупп.Видимость=Истина;
	КонецЕсли;
	
	Если ГруппировкаПолученныеЗадачиДата Тогда
		СгруппироватьСписокПолученныхЗадачСервером("СрокИсполнения");
		Элементы.ДекорацияПолученныеЗадачиНетГрупп.Видимость=Истина;
	КонецЕсли;
	
	Если ГруппировкаПолученныеЗадачиВид Тогда
		СгруппироватьСписокПолученныхЗадачСервером("ВидБизнесПроцесса");
		Элементы.ДекорацияПолученныеЗадачиНетГрупп.Видимость=Истина;
	КонецЕсли;
	
	//выданные задачи
	
	Если ГруппировкаВыданныеЗадачиИсполнитель Тогда
		СгруппироватьСписокВыданныхЗадачСервером("Исполнитель");
		Элементы.ДекорацияВыданныеЗадачиНетГрупп.Видимость=Истина;
	КонецЕсли;
	
	Если ГруппировкаВыданныеЗадачиСостояние Тогда
		СгруппироватьСписокВыданныхЗадачСервером("СостояниеВыполнения");
		Элементы.ДекорацияВыданныеЗадачиНетГрупп.Видимость=Истина;
	КонецЕсли;
	
	УстановитьДоступностьГиперссылокВыданныеЗадачи();
	УстановитьДоступностьГиперссылокПолученныеЗадачи();

КонецПроцедуры

Процедура УстановитьДоступностьГиперссылокПолученныеЗадачи()
	
	Элементы.ДекорацияПолученныеЗадачиСгруппироватьПоАвтору.Гиперссылка=НЕ ГруппировкаПолученныеЗадачиИнициатор;
	Элементы.ДекорацияПолученныеЗадачиСгруппироватьПоДате.Гиперссылка=НЕ ГруппировкаПолученныеЗадачиДата;
	Элементы.ДекорацияПолученныеЗадачиСгруппироватьПоВиду.Гиперссылка=НЕ ГруппировкаПолученныеЗадачиВид;
	
КонецПроцедуры

Процедура УстановитьДоступностьГиперссылокВыданныеЗадачи()
	Элементы.ДекорацияВыданныеЗадачиСгруппироватьПоИсполнителю.Гиперссылка=НЕ ГруппировкаВыданныеЗадачиИсполнитель;
	Элементы.ДекорацияВыданныеЗадачиСгруппироватьПоСостоянию.Гиперссылка=НЕ ГруппировкаВыданныеЗадачиСостояние;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыданныеЗадачиСгруппироватьПоСостояниюНажатие(Элемент)
	// Вставить содержимое обработчика.
	Если НЕ ГруппировкаВыданныеЗадачиСостояние Тогда
		ГруппировкаВыданныеЗадачиСостояние=Истина;
		СгруппироватьСписокВыданныхЗадачСервером("СостояниеВыполнения");
		Элементы.ДекорацияВыданныеЗадачиНетГрупп.Видимость=Истина;	
		УстановитьДоступностьГиперссылокВыданныеЗадачи();
	КонецЕсли;
	
	СохранитьНастройкиСервером();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыданныеЗадачиСгруппироватьПоИсполнителюНажатие(Элемент)
	// Вставить содержимое обработчика.
	Если НЕ ГруппировкаВыданныеЗадачиИсполнитель Тогда
		ГруппировкаВыданныеЗадачиИсполнитель=Истина;
		СгруппироватьСписокВыданныхЗадачСервером("Исполнитель");
		Элементы.ДекорацияВыданныеЗадачиНетГрупп.Видимость=Истина;
		УстановитьДоступностьГиперссылокВыданныеЗадачи();
	КонецЕсли;
	
	СохранитьНастройкиСервером();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолученныеЗадачиНетГруппНажатие(Элемент)
	
	Если ГруппировкаПолученныеЗадачиДата Тогда
		СгруппироватьСписокПолученныхЗадачСервером("СрокИсполнения", Ложь);	
	КонецЕсли;
	
	Если ГруппировкаПолученныеЗадачиИнициатор Тогда
		СгруппироватьСписокПолученныхЗадачСервером("Инициатор", Ложь);		
	КонецЕсли;
	
	Если ГруппировкаПолученныеЗадачиВид Тогда
		СгруппироватьСписокПолученныхЗадачСервером("ВидБизнесПроцесса", Ложь);		
	КонецЕсли;
	
  	Элементы.ДекорацияПолученныеЗадачиНетГрупп.Видимость=Ложь;

	ГруппировкаПолученныеЗадачиИнициатор=Ложь;
	ГруппировкаПолученныеЗадачиДата=Ложь;
	ГруппировкаПолученныеЗадачиВид=Ложь;
		
	УстановитьДоступностьГиперссылокПолученныеЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыданныеЗадачиНетГруппНажатие(Элемент)
	
	СгруппироватьСписокВыданныхЗадачСервером("СостояниеВыполнения", Ложь);	
	СгруппироватьСписокВыданныхЗадачСервером("Исполнитель", Ложь);		

	Элементы.ДекорацияВыданныеЗадачиНетГрупп.Видимость=Ложь;
		
	ГруппировкаВыданныеЗадачиИсполнитель=Ложь;
	ГруппировкаВыданныеЗадачиСостояние=Ложь;
		
	УстановитьДоступностьГиперссылокВыданныеЗадачи();
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьСписокВыданныхЗадачСервером(ИмяРеквзита, Группировать=Истина);
	КП_ОбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокВыданныеЗадачи, ИмяРеквзита, Группировать);	
КонецПроцедуры	

&НаСервере
Процедура СгруппироватьСписокПолученныхЗадачСервером(ИмяРеквзита, Группировать=Истина);
	КП_ОбщееСервер.СгруппироватьСписок(ЭтаФорма.СписокПолученныеЗадачи, ИмяРеквзита, Группировать);	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНовыйКБПНажатие(Элемент)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ДекорацияНовыйКБПНажатиеЗавершение", ЭтотОбъект), НСтр("en='Do you want to create a new business process?';ru='Создать новый бизнес-процесс?'"), 
		КП_ОбщееКлиент.КнопкиВопроса("Да, создать"), 60, КодВозвратаДиалога.Нет, КП_ОбщееКлиент.ЗаголовокДиалога(), КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНовыйКБПНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса=КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ПараметрыФормы = Новый Структура;
    ОткрытьФорму("БизнесПроцесс.КП_БизнесПроцесс.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПолученныеЗадачиСгруппироватьПоВидуНажатие(Элемент)
	
	Если НЕ ГруппировкаПолученныеЗадачиВид Тогда
		ГруппировкаПолученныеЗадачиВид=Истина;
		КП_ОбщееСервер.СгруппироватьСписок(СписокПолученныеЗадачи, "ВидБизнесПроцесса");
		
		Элементы.ДекорацияПолученныеЗадачиНетГрупп.Видимость=Истина;
		УстановитьДоступностьГиперссылокПолученныеЗадачи();
				
	КонецЕсли;
	
    УстановитьПараметрыПолученныеЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкаФормыНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РезультатОткрытия=Результат;
    Если РезультатОткрытия<>"ОК" Тогда
        Возврат;
    КонецЕсли;
    
    Пользователь=СокрЛП(ТекущийПользователь);
    
    Объект.ДатаПоказаВыполненных=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("НавигаторЗадач", "ДатаПоказаВыполненных", , Пользователь);
    Объект.ДатаПоказаВыполненныхИсполнителями=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("НавигаторЗадач", "ДатаПоказаВыполненныхИсполнителями", , Пользователь);
    Объект.ПоказыватьПредпросмотр=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("НавигаторЗадач", "ПоказыватьПредпросмотр", , Пользователь);
	Объект.ПоказыватьСтрокуПоиска=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("НавигаторЗадач", "ПоказыватьСтрокуПоиска", , Пользователь);
    
    Объект.ИнтервалПросрочкиМинут=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("НавигаторЗадач", "ИнтервалПросрочкиМинут", , Пользователь);
    Объект.ИнтервалПросрочкиИсполнителейМинут=КП_ОбщееСервер.ЗагрузитьНастройкуПользователя("НавигаторЗадач", "ИнтервалПросрочкиИсполнителейМинут", , Пользователь);
    
    Элементы.ТекстЗаданияПредпросмотрФорматированный.Видимость=Объект.ПоказыватьПредпросмотр;
	
	Если Объект.ПоказыватьСтрокуПоиска Тогда
		Элементы.СписокПолученныеЗадачи.ПоложениеСтрокиПоиска=ПоложениеСтрокиПоиска.Низ;		
		Элементы.СписокВыданныеЗадачи.ПоложениеСтрокиПоиска=ПоложениеСтрокиПоиска.Низ;
	Иначе
		Элементы.СписокПолученныеЗадачи.ПоложениеСтрокиПоиска=ПоложениеСтрокиПоиска.Нет;
		Элементы.СписокВыданныеЗадачи.ПоложениеСтрокиПоиска=ПоложениеСтрокиПоиска.Нет;
	КонецЕсли;
    
    ЭтаФорма.СписокПолученныеЗадачи.Параметры.УстановитьЗначениеПараметра("ДатаВыполнения", Объект.ДатаПоказаВыполненных);
    ЭтаФорма.СписокВыданныеЗадачи.Параметры.УстановитьЗначениеПараметра("ДатаВыполнения", Объект.ДатаПоказаВыполненныхИсполнителями);
    
    УстановитьПараметрыСписковЗадач();	
    
    СписокПолученныеЗадачиПриАктивизацииСтроки(Неопределено);

КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗадачи(Задача)
	Возврат Задача.ХранилищеТекстаЗадания.Получить();
	
КонецФункции

&НаКлиенте
Процедура СписокПолученныеЗадачиПриАктивизацииСтроки(Элемент)
	
    Элементы.СписокПолученныеЗадачиЗадача.Видимость=Истина;

	Если НЕ Объект.ПоказыватьПредпросмотр Тогда
		Возврат;
	КонецЕсли;
		
	ЗначениеСтроки=Элементы.СписокПолученныеЗадачи.ТекущаяСтрока;
	Если ЗначениеСтроки=Неопределено Тогда
		Возврат;
		
	КонецЕсли;
	
	ТипЗначенияСтроки=ТипЗнч(ЗначениеСтроки);
	
	Если ТипЗначенияСтроки=Тип("ЗадачаСсылка.КП_Задача") Тогда
		ТекстЗаданияПредпросмотрФорматированный=ПолучитьТекстЗадачи(ЗначениеСтроки);
				
		Возврат;
		
	КонецЕсли;
	
	//сформируем текст предпросмотра
	Если ЗначениеСтроки.ИмяГруппировки="СрокИсполнения" Тогда
		ТекстЗаданияПредпросмотр="Срок исполнения задач: "+Формат(ЗначениеСтроки.Ключ, "ДЛФ=DD");
		
	ИначеЕсли ЗначениеСтроки.ИмяГруппировки="ТипЗадач" Тогда
		
		Если ЗначениеСтроки.Ключ="Новые задачи" Тогда
			//ТекстЗаданияПредпросмотр="Полученные новые задачи";
			ТекстЗаданияПредпросмотр="Новые задачи";
			
		ИначеЕсли ЗначениеСтроки.Ключ="Задачи в работе" Тогда
			ТекстЗаданияПредпросмотр="Задачи в работе";
			
		ИначеЕсли ЗначениеСтроки.Ключ="Выполненные задачи" Тогда
			ТекстЗаданияПредпросмотр="Выполненные задачи";
			
		Иначе	
			ТекстЗаданияПредпросмотр="";
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеСтроки.ИмяГруппировки="Инициатор" Тогда
		ТекстЗаданияПредпросмотр="Задачи от "+КП_ОбщееСервер.Падеж(СокрЛП(ЗначениеСтроки.Ключ), 2); //родительный падеж
		
	ИначеЕсли ЗначениеСтроки.ИмяГруппировки="ВидБизнесПроцесса" Тогда
		ТекстЗаданияПредпросмотр="Задачи вида """+СокрЛП(ЗначениеСтроки.Ключ)+"""";
		
	Иначе
		ТекстЗаданияПредпросмотр="";
		
	КонецЕсли;
	
	ТекстЗаданияПредпросмотрФорматированный=Новый ФорматированныйДокумент;
	
	Если НЕ ПустаяСтрока(ТекстЗаданияПредпросмотр) Тогда
		ТекстЗаданияПредпросмотрФорматированный.Добавить(ТекстЗаданияПредпросмотр);
	КонецЕсли;
	
 КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДемоВерсияОткрытьФормуВопросаНажатие(Элемент)
	ФормаВопросаРазработчикам=ПолучитьФорму("Обработка.КП_ВопросыРазработчикам.Форма");
	ФормаВопросаРазработчикам.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыданныеЗадачиПриАктивизацииСтроки(Элемент)
	 Элементы.СписокВыданныеЗадачиЗадача.Видимость=Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокУзловГруппировок()
	СсылкаНаОбъект=РеквизитФормыВЗначение("Объект");
	СтрокаСписка=СсылкаНаОбъект.СтрокаСпискаУзловГруппировок();
	Попытка
		СписокУзловГруппировок=ЗначениеИзСтрокиВнутр(СтрокаСписка);
	Исключение
		СписокУзловГруппировок=Новый СписокЗначений;
	КонецПопытки;
	
	Возврат СписокУзловГруппировок;
	
КонецФункции

&НаКлиенте
Процедура ДекорацияПолученныеЗадачиНажатие(Элемент)
	Элементы.ГруппаПолученныеЗадачи.Видимость=НЕ Элементы.ГруппаПолученныеЗадачи.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыданныеЗадачиНажатие(Элемент)
	Элементы.ГруппаЗадачиВыданные.Видимость=НЕ Элементы.ГруппаЗадачиВыданные.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыданныеЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(ВыбраннаяСтрока)=Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПолученныеЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(ВыбраннаяСтрока)=Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		СтандартнаяОбработка=Ложь;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПолученныхЗадач(Команда)
	УстановитьПараметрыПолученныеЗадачи();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыданныхЗадач(Команда)
	УстановитьПараметрыВыданныеЗадачи();

КонецПроцедуры

&НаСервере
Процедура ОбновитьОформлениеСписка()
	КП_ОформлениеСтрокСервер.УстановитьОформлениеСписка(СписокВыданныеЗадачи, "Наименование");
	КП_ОформлениеСтрокСервер.УстановитьОформлениеСписка(СписокПолученныеЗадачи, "Наименование");
КонецПроцедуры

#КонецОбласти
