
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьФормуБезусловно;
	
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ОбновитьОбразцыЗагрузкиДанных();
	
	ИмяСлужебногоПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗагрузкаВПриложениеВозможна();
	
	ОбновлятьСуществующие 		= Ложь;
	СоздаватьЕслиНеСопоставлено = Истина;
	ВидЦен = Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	СкладОстатков = Справочники.СтруктурныеЕдиницы.ОсновнойСклад;
	
	УстановитьВидимостьДоступностьПриСоздании(Параметры);
			
	Параметры.НастройкиЗагрузкиДанных.Вставить("ОбновлятьСуществующие", 		ОбновлятьСуществующие);
	Параметры.НастройкиЗагрузкиДанных.Вставить("СоздаватьЕслиНеСопоставлено",	СоздаватьЕслиНеСопоставлено);
	Параметры.НастройкиЗагрузкиДанных.Вставить("ВидЦен",						ВидЦен);
	Параметры.НастройкиЗагрузкиДанных.Вставить("СкладОстатков",					СкладОстатков);
	Параметры.НастройкиЗагрузкиДанных.Вставить("СамостоятельноеЗаполнение",		Ложь);
	Параметры.НастройкиЗагрузкиДанных.Вставить("ЦеныЗаполнены",					Ложь);
	Параметры.НастройкиЗагрузкиДанных.Вставить("КоличествоЗаполнено",			Ложь);
	Параметры.НастройкиЗагрузкиДанных.Вставить("МаксимумПолезныхКолонокТД",		ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумПолезныхКолонокТабличногоДокумента());
	
	НастройкиПоиска = Новый Структура;
	НастройкиПоиска.Вставить("ИскатьПоКоду", Истина);
	НастройкиПоиска.Вставить("ИскатьПоШтрихкоду", Истина);
	НастройкиПоиска.Вставить("ИскатьПоАртикулу", Истина);
	НастройкиПоиска.Вставить("ИскатьПоНаименованию", Истина);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюЛевойЧасти", Ложь);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюПолному", Истина);
	НастройкиПоиска.Вставить("ИскатьПоНаименованиюПолномуЛевойЧасти", Ложь);
	НастройкиПоиска.Вставить("ВариантПоиска", 0); // 0 - до первого совпадения, 1 - по совпадению всех полей 
	Параметры.НастройкиЗагрузкиДанных.Вставить("НастройкиПоиска", НастройкиПоиска);
	
	СоздатьДеревоПолейЗагрузкиДоступныхПользователю();
	
	СобратьЗаголовокСтраницыРезультатПроверкиДанных();
	
	Описание = Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМакет("БыстрыйСтарт").ПолучитьТекст();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьПриСоздании(Параметры)
	
	ДоступноРучноеЗаполнение = НЕ (ОбщегоНазначения.ЭтоВебКлиент() ИЛИ ОбщегоНазначения.ЭтоМобильныйКлиент());
	Элементы.ГруппаЗаполнение.Видимость = ДоступноРучноеЗаполнение И НЕ Параметры.НастройкиЗагрузкиДанных.Свойство("ЗагрузкаБыстрыйСтарт");
	
	ФиксированныйШаблон = Ложь;
	ЗагрузкаНоменклатуры = Ложь;
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ЗагрузкаБыстрыйСтарт") Тогда
		
		КудаЗагружаем = 1;
		ФиксированныйШаблон = Истина;
		Параметры.НастройкиЗагрузкиДанных.Вставить("ФиксированныйШаблон", ФиксированныйШаблон);
		
		Элементы.НастройкиПоиска.Видимость = Истина;
		Элементы.ГруппаКудаЗагружаем.Видимость = Истина;
		
	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Контрагенты"
		ИЛИ Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Лиды"
		ИЛИ Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.КонтактныеЛица"
		ИЛИ Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.НоменклатураПоставщиков"
		Тогда
		
		КудаЗагружаем = 2;
		ФиксированныйШаблон = Ложь;
		Параметры.НастройкиЗагрузкиДанных.Вставить("ФиксированныйШаблон", ФиксированныйШаблон);
		
		Элементы.НастройкиПоиска.Видимость = Ложь;
		Элементы.ГруппаКудаЗагружаем.Видимость = Ложь;
		
	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "РегистрСведений.ЦеныНоменклатуры"
		ИЛИ Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "РегистрСведений.ЦеныНоменклатурыКонтрагентов"
		Тогда
		
		КудаЗагружаем = 3;
		ФиксированныйШаблон = Ложь;
		Параметры.НастройкиЗагрузкиДанных.Вставить("ФиксированныйШаблон", ФиксированныйШаблон);
		
		Элементы.НастройкиПоиска.Видимость = Истина;
		Элементы.ГруппаКудаЗагружаем.Видимость = Ложь;
		
	ИначеЕсли СтрНайти(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, ".ТабличнаяЧасть.") > 0
		ИЛИ Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.ХарактеристикиНоменклатуры"
		Тогда
		
		КудаЗагружаем = 1;
		ФиксированныйШаблон = Ложь;
		Параметры.НастройкиЗагрузкиДанных.Вставить("ФиксированныйШаблон", ФиксированныйШаблон);
		
		Элементы.НастройкиПоиска.Видимость = Истина;
		Элементы.ГруппаКудаЗагружаем.Видимость = Ложь;
		
	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Номенклатура" Тогда
		
		КудаЗагружаем = 0;
		ФиксированныйШаблон = Ложь;
		ЗагрузкаНоменклатуры = Истина;
		Параметры.НастройкиЗагрузкиДанных.Вставить("ФиксированныйШаблон", ФиксированныйШаблон);
		
		Элементы.НастройкиПоиска.Видимость = Истина;
		Элементы.ГруппаКудаЗагружаем.Видимость = Истина;
		Элементы.КудаЗагружаем.СписокВыбора.Удалить(Элементы.КудаЗагружаем.СписокВыбора.НайтиПоЗначению(2));
		Элементы.КудаЗагружаем.СписокВыбора.Удалить(Элементы.КудаЗагружаем.СписокВыбора.НайтиПоЗначению(3));
		
	КонецЕсли;
	
	Элементы.КонтрагентПоставщик.Видимость = (Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.НоменклатураПоставщиков");
	
	Элементы.ГруппаШаблон.Видимость = ФиксированныйШаблон;
	Элементы.ВидЦенШаблон.Видимость = ФиксированныйШаблон Или ЗагрузкаНоменклатуры;
	Элементы.СкладОстатков.Видимость = ФиксированныйШаблон;
	Элементы.ГруппаПримеры.Видимость = НЕ ФиксированныйШаблон;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗагрузитьДанныеДругимСпособом", "Видимость", Параметры.НастройкиЗагрузкиДанных.ИспользоватьСовместно);
	
	Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений 
		И НЕ Параметры.НастройкиЗагрузкиДанных.Свойство("ОбщееЗначение") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДекорацияКлючевоеЗначениеРСЗаголовок", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбщееЗначениеРС", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОчиститьОбщееЗначениеРС", "Видимость", Ложь);
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаГотово", "Заголовок", НСтр("ru ='Загрузить'"));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Справка1", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Справка2", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Справка3", "Видимость", Ложь);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения1", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаПроверкиДанных", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыСопостовленияДанных", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыНастройкаЗагрузки", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыНастройкаЗагрузки1", "Картинка", БиблиотекаКартинок.Информация);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыНастройкаЗагрузки2", "Картинка", БиблиотекаКартинок.Информация);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения1", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения", "Ширина",  0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаПроверкиДанных", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыСопостовленияДанных", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыНастройкаЗагрузки", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыНастройкаЗагрузки1", "Ширина", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыНастройкаЗагрузки2", "Ширина", 0);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения1", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаДляЗаполнения", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаПодсказкаПроверкиДанных", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыСопостовленияДанных", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыНастройкаЗагрузки", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыНастройкаЗагрузки1", "Высота", 0);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КартинкаЗаголовокСтраницыНастройкаЗагрузки2", "Высота", 0);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("СоздаватьЕслиНеСопоставлено", СоздаватьЕслиНеСопоставлено);
	ЗаполнитьСписокВыбораФильтраТаблицыСопоставления(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти);
	
	УстановитьТекстЗаголовкаДекорацииНесопоставленныеСтроки();
	УстановитьТекстЗаголовкаДекорацииСопоставленыхОбъектов();
	УстановитьТекстЗаголовкаДекорацииОбщееЗначение();
	
	// Устанавливаем текущую таблицу переходов
	ТаблицаПереходовПоСценарию();
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, РезультатЗагрузки, Источник)
	
	Если ИмяСобытия = "ОбработатьПодготовленныеДанные" 
		И ТипЗнч(РезультатЗагрузки) = Тип("Структура") 
		И РезультатЗагрузки.НастройкиЗагрузкиДанных.Свойство("ЧерезФормуКомпанияЗагрузкаИзExcel")
		Тогда
		
		ДлительнаяОперация = ОбработатьПодготовленныеДанные(РезультатЗагрузки);
		ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);
	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПодготовленныеДанные(РезультатЗагрузки)
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", РезультатЗагрузки.НастройкиЗагрузкиДанных);
	ПараметрыВызоваСервера.Вставить("ТаблицаСопоставленияДанных", ДанныеФормыВЗначение(РезультатЗагрузки.ТаблицаСопоставленияДанных, Тип("ТаблицаЗначений")));
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузки результата'");
	ПараметрыВыполнения.ЗапуститьНеВФоне    = Ложь;
	ПараметрыВыполнения.ЗапуститьВФоне      = Истина;	
	
	Если РезультатЗагрузки.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника Тогда
		ИмяМетода = СтрЗаменить(РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "Справочник.", "Справочники.")
			+ ".ОбработатьПодготовленныеДанные";
	ИначеЕсли РезультатЗагрузки.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений Тогда
		ИмяМетода = СтрЗаменить(РезультатЗагрузки.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, "РегистрСведений.", "РегистрыСведений.")
			+ ".ОбработатьПодготовленныеДанные";
	КонецЕсли;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыВызоваСервера, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНеобходимостьПодключенияОбработчикаОжидания(ДлительнаяОперация, ПолноеИмяОбъектаЗаполнения)
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ПослеВыполненияФоновогоЗадания(ДлительнаяОперация, ПолноеИмяОбъектаЗаполнения);
		
	Иначе
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеВыполненияФоновогоЗадания", ЭтотОбъект, ПолноеИмяОбъектаЗаполнения);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Идет загрузка данных.'");
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияФоновогоЗадания(Прогресс, ПолноеИмяОбъектаЗаполнения) Экспорт
	
	Если ЗначениеЗаполнено(ПолноеИмяОбъектаЗаполнения) Тогда
		ОткрытьФорму(ПолноеИмяОбъектаЗаполнения + ".ФормаСписка");
	КонецЕсли;
	ПоказатьПредупреждение(,Нстр("ru ='Загрузка данных завершена.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПорядковыйНомерПерехода = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытьФормуБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Отменить загрузку данных?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьФормуБезусловно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// :::ОбщегоНазначения

&НаСервереБезКонтекста
Функция ОсновнойВидЦенПродажи()
	
	Возврат Справочники.ВидыЦен.ПолучитьОсновнойВидЦенПродажи();
	
КонецФункции

&НаКлиенте
Процедура ОбработкаРасшифровкиОбластиТабличногоДокумента()
	Перем Расшифровка;
	
	Если Элементы.ТабличныйДокумент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
		
		КоординатыПервойЯчейки = "R1" + Элементы.ТабличныйДокумент.ТекущаяОбласть.Имя;
		Расшифровка = ТабличныйДокумент.Область(КоординатыПервойЯчейки).Расшифровка;
		
	КонецЕсли;
	
	Если Элементы.ТабличныйДокумент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		
		Расшифровка = Элементы.ТабличныйДокумент.ТекущаяОбласть.Расшифровка;
		
	КонецЕсли;
	
	Если ТипЗнч(Расшифровка) = Тип("СписокЗначений") Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиЗаголовкаКолонки", ЭтотОбъект);
		
		ОбластьЗаголовка = ПолучитьОбластьЗаголовка();
		
		ПараметрыЗагрузки = Новый Структура;
		ПараметрыЗагрузки.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
		ПараметрыЗагрузки.Вставить("ПредставлениеПоля", ОбластьЗаголовка.Текст);
		ПараметрыЗагрузки.Вставить("ИмяПоля", ОбластьЗаголовка.ПараметрРасшифровки);
		ПараметрыЗагрузки.Вставить("ЗаголовокКолонки", ОбластьЗаголовка.Примечание.Текст);
		ПараметрыЗагрузки.Вставить("НомерКолонки", ОбластьЗаголовка.Право);
		
		ОткрытьФорму("Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ВыборПоля", ПараметрыЗагрузки, ЭтотОбъект, , , , ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеФайлаОбразцаЗагрузки(ДанныеФайла, Расширение)
	
	Если ЗначениеЗаполнено(ДанныеФайла.ИмяШаблона) Тогда
	
		Адрес = Параметры.НастройкиЗагрузкиДанных[ДанныеФайла.ИмяШаблона];
		
	ИначеЕсли Расширение = "xlsx" Тогда
		
		Адрес = Параметры.НастройкиЗагрузкиДанных.ОбразецЗагрузкиДанных_xlsx;
		
	ИначеЕсли Расширение = "csv" Тогда
		
		Адрес = Параметры.НастройкиЗагрузкиДанных.ОбразецЗагрузкиДанных_csv;
		
	КонецЕсли;
	
	НаименованиеФайлаБезРасширения = Нстр("ru = 'ОбразецЗагрузкиДанных'");
	
	ДанныеФайла.Вставить("ДатаМодификацииУниверсальная",ТекущаяДата());
	ДанныеФайла.Вставить("Зашифрован", 					Ложь);
	ДанныеФайла.Вставить("ИмяФайла",					НаименованиеФайлаБезРасширения + "." + Расширение);
	ДанныеФайла.Вставить("Наименование",				НаименованиеФайлаБезРасширения);
	ДанныеФайла.Вставить("ОтносительныйПуть",			"LD\"); //LoadData
	ДанныеФайла.Вставить("ПодписанЭП",					Ложь);
	ДанныеФайла.Вставить("Размер",						Неопределено);
	ДанныеФайла.Вставить("Расширение",					Расширение);
	ДанныеФайла.Вставить("Редактирует",					Неопределено);
	ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла", Адрес);
	ДанныеФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
	ДанныеФайла.Вставить("ФайлРедактируется",			Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбразец(Расширение, ИмяШаблона = "")
	
	Если Расширение = "mxl" Тогда
		
		ТабличныйДокумент = Неопределено;
		ПолучитьОбразецТабличногоДокумента(ТабличныйДокумент);
		Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			
			ОбластиОбъектов = Новый СписокЗначений;
			ИдентификаторПечатнойФормы = Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения;
			
			КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
			ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
			ПечатнаяФорма.СинонимМакета = НСтр("ru = 'Образец подготовленных данных в формате mxl'");
			ПечатнаяФорма.ТабличныйДокумент = ТабличныйДокумент;
			ПечатнаяФорма.ИмяФайлаПечатнойФормы = НСтр("ru = 'Образец подготовленных данных в формате mxl'");
			
			УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ИмяШаблона", ИмяШаблона);
		ЗаполнитьДанныеФайлаОбразцаЗагрузки(ДанныеФайла, Расширение);
		
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОбластьЗаголовка()
	
	ОбластьЗаголовка = Элементы.ТабличныйДокумент.ТекущаяОбласть;
	Если ОбластьЗаголовка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда // промазали, выделили колонку
		
		ОбластьЗаголовка = ТабличныйДокумент.Область("R1" + ОбластьЗаголовка.Имя);
		
	КонецЕсли;
	
	Возврат ОбластьЗаголовка;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораФильтраТаблицыСопоставления(ЭтоЗагрузкаТабличнойЧасти)
	
	Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
		
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, Нстр("ru ='ОтборОшибокНет'"),	Нстр("ru ='Данные, готовые к загрузке'"));
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(2, Нстр("ru ='ОтборОшибки'"), 	Нстр("ru ='Данные, которые загрузить невозможно'"));
		
	Иначе
		
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, Нстр("ru ='Сопоставленные'"),		Нстр("ru ='Сопоставлены, можно загрузить (обновить)'"));
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, Нстр("ru ='БудутСозданы'"),		Нстр("ru ='Не сопоставлены, будут созданы'"));
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, ЗаполненыНеПолностью(),			Нстр("ru ='Не сопоставлены, нужно дозаполнить'"));
		Элементы.ФильтрТаблицаСопоставления.СписокВыбора.Вставить(1, Нстр("ru ='Несогласованные'"),		Нстр("ru ='Ошибка: не заполнены в Excel'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаДекорацииНесопоставленныеСтроки()
	
	Если СоздаватьЕслиНеСопоставлено Тогда
		
		ТекстЗаголовка = ?(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника, 
			Нстр("ru ='будет создано новых элементов:'"), 
			Нстр("ru ='будет создано новых записей:'"));
		
	Иначе
		
		ТекстЗаголовка = Нстр("ru ='будет пропущено строк:'");
		
	КонецЕсли;
	
	ИмяЭлемента = ?(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника, "ДекорацияНесопоставленныеСтрокиЗаголовокОбъект", "ДекорацияНесопоставленныеСтрокиЗаголовокРС");
	
	Элементы[ИмяЭлемента].Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаДекорацииСопоставленыхОбъектов()
	
	ТекстЗаголовока = ?(ОбновлятьСуществующие,
		Нстр("ru = 'из них сопоставлены и будут обновлены'"),
		Нстр("ru = 'из них сопоставлены'"));
		
	ИмяЭлемента = ?(Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника, "ДекорацияСопоставленоЗаголовокОбъект", "ДекорацияСопоставленоЗаголовокРС");
	
	Элементы[ИмяЭлемента].Заголовок = ТекстЗаголовока;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстЗаголовкаДекорацииОбщееЗначение()
	
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ОбщееЗначение")
		И ЗначениеЗаполнено(Параметры.НастройкиЗагрузкиДанных.ОбщееЗначение) Тогда
		
		Если Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Контрагенты"
			ИЛИ Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.Номенклатура"
			ИЛИ Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.НоменклатураПоставщиков" Тогда
			
			Элементы.ОбщееЗначениеСправочник.Заголовок = Нстр("ru ='< '") + Строка(Параметры.НастройкиЗагрузкиДанных.ОбщееЗначение) + Нстр("ru =' >'");
			
		ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.ХарактеристикиНоменклатуры" Тогда
			
			Элементы.ОбщееЗначениеСправочник.Заголовок = Нстр("ru ='< '") + Строка(Параметры.НастройкиЗагрузкиДанных.ОбщееЗначение) + Нстр("ru =' >'");
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбщееЗначениеСправочник", "Доступность", Ложь);
			
		ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "РегистрСведений.ЦеныНоменклатуры" Тогда
			
			Элементы.ОбщееЗначениеРС.Заголовок = Нстр("ru ='< '") + Строка(Параметры.НастройкиЗагрузкиДанных.ОбщееЗначение) + Нстр("ru =' >'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнение()
	
	РезультатПроверки = ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища);
	Если РезультатПроверки.ЗаданиеВыполнено Тогда
		
		ИзменитьПорядковыйНомерПерехода(+1);
		
	Иначе	
		
		Если ФоновоеЗаданиеИнтервалПроверки < 15 Тогда
			
			ФоновоеЗаданиеИнтервалПроверки = ФоновоеЗаданиеИнтервалПроверки + 0.7;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ПроверитьВыполнение", ФоновоеЗаданиеИнтервалПроверки, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьОшибкуЖурналаРегистрации(ПодробноеОписаниеОшибки)
	
	ИмяСобытия = НСтр("ru = 'Загрузка данных из внешнего источника'");
	ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеОписаниеОшибки);
	
КонецПроцедуры

&НаСервере
Процедура НазначитьНомерКолонкиВДеревеПолей(ДеревоПолей, НовоеИмяПоля, НовыйНомерКолонки)
	
	МассивВыбранныхПолей = ДеревоПолей.Строки.НайтиСтроки(Новый Структура("ИмяПоля", НовоеИмяПоля), Истина);
	Если МассивВыбранныхПолей.Количество() > 0 Тогда
		
		Для каждого СтрокаДереваПолей Из МассивВыбранныхПолей Цикл
			
			Если СтрокаДереваПолей.НомерКолонки <> 0
				И СтрокаДереваПолей.НомерКолонки <> НовыйНомерКолонки Тогда
				
				ОбластьЗаголовкаОтмены 						= ТабличныйДокумент.Область("R1C" + СтрокаДереваПолей.НомерКолонки);
				ОбластьЗаголовкаОтмены.Текст 				= "Не загружать";
				ОбластьЗаголовкаОтмены.ПараметрРасшифровки	= "";
				
			КонецЕсли;
			
			СтрокаДереваПолей.НомерКолонки = НовыйНомерКолонки;
			СтрокаДереваПолей.НомерЦвета = 3;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьВыбранныеДополнительныеРеквизитыВДеревеПолей(ДеревоПолей, НомерКолонки, ИмяПоля, ПредставлениеПоля)
	
	ОтборСтрок = Новый Структура("ИмяПоля", ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов());
	
	СтрокаРодительДополнительныхРеквизитов = ДеревоПолей.Строки.НайтиСтроки(ОтборСтрок, Ложь);
	Если СтрокаРодительДополнительныхРеквизитов.Количество() > 0 Тогда
		
		ОтборСтрок.ИмяПоля = ИмяПоля;
		
		СтрокаДополнительногоРеквизита = СтрокаРодительДополнительныхРеквизитов[0].Строки.НайтиСтроки(ОтборСтрок, Ложь);
		Если СтрокаДополнительногоРеквизита.Количество() > 0 Тогда
			
			СтрокаДополнительногоРеквизита[0].НомерКолонки		= НомерКолонки;
			СтрокаДополнительногоРеквизита[0].НомерЦвета		= 3;
			СтрокаДополнительногоРеквизита[0].НомерЦветаОригинал= 4;
			
		Иначе
			
			ПолеДополнительногоРеквизита = СтрокаРодительДополнительныхРеквизитов[0].Строки.Добавить();
			ПолеДополнительногоРеквизита.ИмяГруппыПолей			= "";
			ПолеДополнительногоРеквизита.ИмяПоля				= ИмяПоля;
			ПолеДополнительногоРеквизита.ТипПолучаемогоЗначения = Неопределено;
			ПолеДополнительногоРеквизита.ПредставлениеПоля		= ПредставлениеПоля;
			ПолеДополнительногоРеквизита.НомерКолонки			= НомерКолонки;
			ПолеДополнительногоРеквизита.НомерЦвета				= 3;
			ПолеДополнительногоРеквизита.НомерЦветаОригинал		= 4;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура МаппингПолейПоШаблону(Шаблон, ВыбранныеДополнительныеРеквизиты)
	
	ДеревоПолей = ПолучитьИзВременногоХранилища(Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	Если ТипЗнч(ДеревоПолей) <> Тип("ДеревоЗначений") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаМаппинга Из Шаблон.МаппингПолей Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаМаппинга.НомерКолонки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОбластьЗаголовка = ТабличныйДокумент.Область(СтрШаблон("R1C%1", СтрокаМаппинга.НомерКолонки));
		ПередОбработкойПоляМаппинга(ОбластьЗаголовка.ПараметрРасшифровки, ДеревоПолей, ВыбранныеДополнительныеРеквизиты);
		
		Если ЗначениеЗаполнено(СтрокаМаппинга.ДополнительныйРеквизит) Тогда
			
			ИмяПоля = Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Получить(СтрокаМаппинга.ДополнительныйРеквизит);
			
			// Такой вызов приводит к ошибке платформы:
			// Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Вставить(СтрокаМаппинга.ДополнительныйРеквизит, РасшифровкаДопРеквизита);
			// 
			// Ошибка проявляется обнулением соответствия (ВыбранныеДополнительныеРеквизиты)
			Если ВыбранныеДополнительныеРеквизиты.Получить(СтрокаМаппинга.ДополнительныйРеквизит) = Неопределено Тогда
				
				ВыбранныеДополнительныеРеквизиты.Вставить(СтрокаМаппинга.ДополнительныйРеквизит, ИмяПоля);
				
			КонецЕсли;
			
			ОтразитьВыбранныеДополнительныеРеквизитыВДеревеПолей(ДеревоПолей, СтрокаМаппинга.НомерКолонки, ИмяПоля, СтрокаМаппинга.ПредставлениеПоля);
			
		Иначе
			
			ИмяПоля = СтрокаМаппинга.ИмяПоля;
			
		КонецЕсли;
		
		НазначитьНомерКолонкиВДеревеПолей(ДеревоПолей, ИмяПоля, СтрокаМаппинга.НомерКолонки);
		
		ОбластьЗаголовка.Текст					= СтрокаМаппинга.ПредставлениеПоля;
		ОбластьЗаголовка.ПараметрРасшифровки	= ИмяПоля;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДеревоПолей, Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	
КонецПроцедуры

&НаСервере
Процедура ПередОбработкойПоляМаппинга(ТекущийПараметрРасшифровки, ДеревоПолей, ВыбранныеДополнительныеРеквизиты)
	
	Если ПустаяСтрока(ТекущийПараметрРасшифровки) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяПоляГруппыДополнительныхРеквизитов = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();
	
	ОтборПоляРодитель = Новый Структура("ИмяПоля", ИмяПоляГруппыДополнительныхРеквизитов);
	МассивСтрокСПолемРодителемДополнительныхРеквизитов = ДеревоПолей.Строки.НайтиСтроки(ОтборПоляРодитель, Истина);
	Если МассивСтрокСПолемРодителемДополнительныхРеквизитов.Количество() = 1 Тогда
		
		ОтборПолей = Новый Структура("ИмяПоля", ТекущийПараметрРасшифровки);
		МассивСтрокДерева = МассивСтрокСПолемРодителемДополнительныхРеквизитов[0].Строки.НайтиСтроки(ОтборПолей);
		Если МассивСтрокДерева.Количество() = 0 Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Для каждого СтрокаОписания Из МассивСтрокДерева Цикл
			
			Для каждого ЭлементСоответствия Из ВыбранныеДополнительныеРеквизиты Цикл
				
				Если НЕ ТекущийПараметрРасшифровки = ЭлементСоответствия.Значение Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ВыбранныеДополнительныеРеквизиты.Удалить(ЭлементСоответствия.Ключ);
				
			КонецЦикла;
			
			СтрокаОписания.НомерКолонки = 0;
			СтрокаОписания.НомерЦвета = СтрокаОписания.НомерЦветаОригинал;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТекстУсловногоОформления()
	
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ИзменитьТекстУсловногоОформления(ЭтотОбъект.УсловноеОформление, Параметры.НастройкиЗагрузкиДанных);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыполнениеНаСервере(ФоновоеЗаданиеИдентификатор, ФоновоеЗаданиеАдресХранилища)
	
	РезультатПроверки = Новый Структура("ЗаданиеВыполнено, Значение", Ложь, Неопределено);
	Если ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		
		РезультатПроверки.ЗаданиеВыполнено	= Истина;
		ТабличныйДокумент					= ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		АктуализироватьВыбранныеКолонки();
		
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ПослеПроверкиДанныхТабличногоДокументаВДлительнойОперации(ФоновоеЗаданиеРезультатФормирования)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеРезультатФормирования.АдресРезультата);
	
	ТабличныйДокументСообщения = РезультатВыполнения.ТабличныйДокументСообщения;
	ТаблицаСопоставленияДанных.Загрузить(РезультатВыполнения.ТаблицаСопоставленияДанных);
	Параметры.НастройкиЗагрузкиДанных.Вставить("НастройкиОбновленияСвойств", РезультатВыполнения.НастройкиЗагрузкиДанных.НастройкиОбновленияСвойств);
	
	УстановитьНастройкиГруппРодителей(РезультатВыполнения.ДеревоПолей);
	
	Шаг = +1;
	Если РезультатВыполнения.Ошибки = Неопределено
		ИЛИ 
		(ТипЗнч(РезультатВыполнения.Ошибки) = Тип("ТаблицаЗначений")
			И РезультатВыполнения.Ошибки.Количество() = 0) Тогда
		
		Шаг = +2;
		
	КонецЕсли;
	
	Возврат Шаг;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкиГруппРодителей(ДеревоПолей)
	
	НастройкиРодитель = ДеревоПолей.Строки.Найти("Родитель");
	Если НастройкиРодитель <> Неопределено И НастройкиРодитель.Строки.Количество() > 0 Тогда
		// Если выбрана колонка Родитель, берем данные из нее, и скрываем общую группу для всех элементов
		ВидимостьГруппыРодителя = Истина;
		Для каждого строкаРодитель Из НастройкиРодитель.Строки Цикл
			Если строкаРодитель.НомерКолонки <> 0 Тогда
				ВидимостьГруппыРодителя = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ДекорацияРодительСправочникаЗаголовок.Видимость = ВидимостьГруппыРодителя;
		Элементы.ГруппаОбщееЗначениеСправочник.Видимость = ВидимостьГруппыРодителя;
	КонецЕсли;
	
	Если Элементы.Найти("Родитель") <> Неопределено Тогда
		Элементы.Родитель.УстановитьДействие("НачалоВыбора", "РодительНачалоВыбора");	
	КонецЕсли;
	
КонецПроцедуры	
	
&НаКлиенте
Процедура РодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработчикЗакрытия = Новый ОписаниеОповещения("РодительВыборГруппы", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("ТекущаяСтрока", Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.Родитель);
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораГруппы", ПараметрыОткрытия, ЭтотОбъект,,,, ОбработчикЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура РодительВыборГруппы(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
	
		Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.Родитель = Результат;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДеревоПолейЗагрузкиДоступныхПользователю()
	Перем ДеревоПолей;
	
	Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.СоздатьДеревоПолейЗагрузкиДоступныхПользователю(ДеревоПолей, Параметры.НастройкиЗагрузкиДанных);
	АдресХраненияДереваПолей = ПоместитьВоВременноеХранилище(ДеревоПолей, ЭтаФорма.УникальныйИдентификатор);
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("АдресХраненияДереваПолей", АдресХраненияДереваПолей);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДополнительныхРеквизитов(ДопРеквизит)
	
	Если ДопРеквизит <> Неопределено Тогда
		
		Если Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Получить(ДопРеквизит) = Неопределено Тогда
			
			Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Вставить(ДопРеквизит, Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов.Получить(ДопРеквизит));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СобратьЗаголовокСтраницыРезультатПроверкиДанных()
	
	ТекстОбычный = НСтр("ru ='Если найдено %1 пустых строк, обработка следующих строк не выполняется.
							|При проверке заполнения табличного документа '");
	ТекстОбычный = СтрШаблон(ТекстОбычный, ЗагрузкаДанныхИзВнешнегоИсточника.МаксимальноеКоличествоПустыхСтрок());
	
	ТекстЖирный = НСтр("ru ='обнаружены следующие ошибки:'");
	
	Шрифт8Н = Новый Шрифт(Элементы.КартинкаПодсказкаПроверкиДанныхРасширеннаяПодсказка.Шрифт, , 10, Ложь);
	Шрифт8Ж = Новый Шрифт(Элементы.КартинкаПодсказкаПроверкиДанныхРасширеннаяПодсказка.Шрифт, , 10, Истина);
	
	МассивФорматированныхСтрок = Новый Массив;
	МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстОбычный, Шрифт8Н));
	МассивФорматированныхСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстЖирный, Шрифт8Ж));
	
	Элементы.КартинкаПодсказкаПроверкиДанныхРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(МассивФорматированныхСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОбразецТабличногоДокумента(ТабличныйДокумент)
	Перем Менеджер;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
	ТабличныйДокумент = Менеджер.ПолучитьМакет(Параметры.НастройкиЗагрузкиДанных.ОбразецЗагрузкиДанных_mxl);
	
КонецПроцедуры

// :::СтраницаВыборФайла

&НаСервере
Процедура ОбнулитьНомераКолонокВДеревеПолей()
	
	ДеревоПолей = ПолучитьИзВременногоХранилища(Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	
	Для каждого СтрокаПервогоУровня Из ДеревоПолей.Строки Цикл
		
		СтрокаПервогоУровня.НомерКолонки = 0;
		СтрокаПервогоУровня.НомерЦвета = СтрокаПервогоУровня.НомерЦветаОригинал;
		
		Для каждого СтрокаВторогоУровня Из СтрокаПервогоУровня.Строки Цикл
			
			СтрокаВторогоУровня.НомерКолонки = 0;
			СтрокаВторогоУровня.НомерЦвета = СтрокаВторогоУровня.НомерЦветаОригинал;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДеревоПолей, Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСуществующиеУстановки()
	
	ТабличныйДокумент.Очистить();
	ТабличныйДокументСообщения.Очистить();
	
	ОбнулитьНомераКолонокВДеревеПолей();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВидимостьЭлементовСтраницы()
	Перем ЭлементВидим;
	
	ПоказатьЗаголовокОбразцов = Ложь;
	Параметры.НастройкиЗагрузкиДанных.Свойство("ОбразецЗагрузкиДанных_csv", ЭлементВидим);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбразецФормата_csv", "Видимость", НЕ ПустаяСтрока(ЭлементВидим));
	ПоказатьЗаголовокОбразцов = НЕ ПустаяСтрока(ЭлементВидим);
	
	Параметры.НастройкиЗагрузкиДанных.Свойство("ОбразецЗагрузкиДанных_mxl",ЭлементВидим);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбразецФормата_mxl", "Видимость", НЕ ПустаяСтрока(ЭлементВидим));
	ПоказатьЗаголовокОбразцов = ПоказатьЗаголовокОбразцов ИЛИ НЕ ПустаяСтрока(ЭлементВидим);
	
	Параметры.НастройкиЗагрузкиДанных.Свойство("ОбразецЗагрузкиДанных_xlsx",ЭлементВидим);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбразецФормата_xlsx", "Видимость", НЕ ПустаяСтрока(ЭлементВидим));
	ПоказатьЗаголовокОбразцов = ПоказатьЗаголовокОбразцов ИЛИ НЕ ПустаяСтрока(ЭлементВидим);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаголовокПримеры", "Видимость", ПоказатьЗаголовокОбразцов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныйДокументИзФайла()
	
	Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Ложь;
	Параметры.НастройкиЗагрузкиДанных.ФиксированныйШаблон = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВнешнийФайлОбработкаЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныйДокументИзФайлаШаблона()
	
	Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Ложь;
	Параметры.НастройкиЗагрузкиДанных.ФиксированныйШаблон = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьВнешнийФайлОбработкаЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабличныйСамостоятельно()
	
	Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Истина;
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

// :::СтраницаЗагрузкаДанных

&НаСервере
Процедура ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(ПерейтиДалее)
	
	Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяВыбранногоФайла));
	
	ИмяВременногоФайла	= ПолучитьИмяВременногоФайла(Расширение);
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Если ДвоичныеДанные = Неопределено Тогда
		
		Возврат;
		
	Иначе
		
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
	КонецЕсли;
	
	ТабличныйДокумент.Очистить();
	ТаблицаСопоставленияДанных.Очистить();
	
	ПараметрыВызоваСервера = Новый Структура;
	ПараметрыВызоваСервера.Вставить("ИмяВременногоФайла",	ИмяВременногоФайла);
	ПараметрыВызоваСервера.Вставить("Расширение", 			Расширение);
	ПараметрыВызоваСервера.Вставить("ТабличныйДокумент",	ТабличныйДокумент);
	ПараметрыВызоваСервера.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
	
	ИмяМетода = "ЗагрузкаДанныхИзВнешнегоИсточника.ЗагрузитьДанные";
	Описание = НСтр("ru = 'Подсистема ЗагрузкаДанныхИзВнешнегоИсточника: Выполнение серверного метода загрузка данных из файла'");
	
	РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор, ИмяМетода, ПараметрыВызоваСервера, Описание);
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		ТабличныйДокумент = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
		АктуализироватьВыбранныеКолонки();
		
	Иначе 
		
		ПерейтиДалее = Ложь;
		ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
		ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхНаСервере(ПерейтиДалее)
	
	Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьКолонкиТаблицыСопоставлений(ЭтотОбъект, ТаблицаСопоставленияДанных, Параметры.НастройкиЗагрузкиДанных);
	Если Параметры.НастройкиЗагрузкиДанных.СамостоятельноеЗаполнение = Истина Тогда
		
		ЗагрузкаДанныхИзВнешнегоИсточника.ЗаполнитьРасшифровкиВТабличномДокументе(ТабличныйДокумент, Параметры.НастройкиЗагрузкиДанных.МаксимумПолезныхКолонокТД, Параметры.НастройкиЗагрузкиДанных);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТабличныйДокумент", "Редактирование", Истина);
		
	Иначе
		
		ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере(ПерейтиДалее);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АктуализироватьВыбранныеКолонки()
	
	// При получении данных из файла программа могла предзаполнить заголовки полей (автоматически выбрать колонки).
	// Если заголовки выбрали, необходимо поставить соответствующие отметки в дерево полей.
	
	ДеревоПолей = ПолучитьИзВременногоХранилища(Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	
	ПараметрыОтбора = Новый Структура("ИмяПоля", "");
	Для Итератор = 1 По ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.МаксимумПолезныхКолонокТабличногоДокумента() Цикл
		
		ОбластьЗаголовка = ТабличныйДокумент.Область(СтрШаблон("R1C%1", Итератор));
		Если ПустаяСтрока(ОбластьЗаголовка.ПараметрРасшифровки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// ::: Если автоматически сопоставлен дополнительный реквизит
		НайденДополнительныйРеквизит = Ложь;
		Если Параметры.НастройкиЗагрузкиДанных.Свойство("ОписаниеДополнительныхРеквизитов") Тогда
			
			Для каждого ОписаниеРеквизита Из Параметры.НастройкиЗагрузкиДанных.ОписаниеДополнительныхРеквизитов Цикл
				
				Если ОписаниеРеквизита.Значение = ОбластьЗаголовка.ПараметрРасшифровки Тогда
					
					Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Вставить(ОписаниеРеквизита.Ключ, ОписаниеРеквизита.Значение);
					
					ПараметрыОтбора.ИмяПоля = ЗагрузкаДанныхИзВнешнегоИсточника.ИмяПоляДобавленияДополнительныхРеквизитов();
					ГруппаДопРеквизитов = ДеревоПолей.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
					Если ГруппаДопРеквизитов.Количество() > 0 Тогда
						
						ПараметрыОтбора.ИмяПоля = ОписаниеРеквизита.Значение;
						НайденныеДополнительныеРеквизиты = ГруппаДопРеквизитов[0].Строки.НайтиСтроки(ПараметрыОтбора, Истина);
						
						Если НайденныеДополнительныеРеквизиты.Количество() = 0 Тогда
							
							ПолеДополнительногоРеквизита = ГруппаДопРеквизитов[0].Строки.Добавить();
							ПолеДополнительногоРеквизита.ИмяГруппыПолей = "";
							ПолеДополнительногоРеквизита.ИмяПоля = ОписаниеРеквизита.Значение;
							ПолеДополнительногоРеквизита.ТипПолучаемогоЗначения = Неопределено;
							ПолеДополнительногоРеквизита.ПредставлениеПоля = ОписаниеРеквизита.Ключ.Наименование;
							
						Иначе
							
							ПолеДополнительногоРеквизита = НайденныеДополнительныеРеквизиты[0];
							
						КонецЕсли;
						
						ПолеДополнительногоРеквизита.НомерКолонки = Итератор;
						ПолеДополнительногоРеквизита.НомерЦвета = 3;
						ПолеДополнительногоРеквизита.НомерЦветаОригинал = 4;
						
					КонецЕсли;
					
					НайденДополнительныйРеквизит = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// ::: Если автоматически сопоставлен стандартный реквизит
		Если НЕ НайденДополнительныйРеквизит Тогда
			
			ПараметрыОтбора.ИмяПоля = ОбластьЗаголовка.ПараметрРасшифровки;
			ОписаниеПолей = ДеревоПолей.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Если ОписаниеПолей.Количество() = 1 Тогда
				
				ОписаниеПолей[0].НомерКолонки = Итератор;
				ОписаниеПолей[0].НомерЦвета = 3;
				
			Иначе
				
				ОбластьЗаголовка.Текст = НСтр("ru ='Не загружать'");
				ОбластьЗаголовка.ПараметрРасшифровки = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДеревоПолей, Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей);
	
КонецПроцедуры

// :::СтраницыПроверкаДанных

&НаКлиенте
Процедура ОбработатьРезультатПроверкиДанныхТабличногоДокумента(РезультатФормирования, ДополнительныеПараметры) Экспорт
	
	Если РезультатФормирования = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ПрогрессВыполнения = 0;
	ФоновоеЗаданиеРезультатФормирования = РезультатФормирования;
	
	Если ФоновоеЗаданиеРезультатФормирования.Статус = "Ошибка" Тогда
		
		ИзменитьПорядковыйНомерПерехода(-1);
		
		ДобавитьОшибкуЖурналаРегистрации(ФоновоеЗаданиеРезультатФормирования.ПодробноеПредставлениеОшибки);
		ВызватьИсключение ФоновоеЗаданиеРезультатФормирования.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
	ФоновоеЗаданиеИдентификатор = Неопределено;
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	
	ШагнутьВперед = ПослеПроверкиДанныхТабличногоДокументаВДлительнойОперации(ФоновоеЗаданиеРезультатФормирования);
	ИзменитьПорядковыйНомерПерехода(ШагнутьВперед);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНачалаПроверкиДанных()
	
	Если ФоновоеЗаданиеРезультатФормирования = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если ФоновоеЗаданиеРезультатФормирования.Статус <> "Выполняется" Тогда 
		
		ОбработатьРезультатПроверкиДанныхТабличногоДокумента(ФоновоеЗаданиеРезультатФормирования, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДанныхТабличногоДокумента", ЭтотОбъект, Неопределено);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания	= Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессПроверкиДанныхТабличногоДокумента", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗаданиеРезультатФормирования, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессПроверкиДанныхТабличногоДокумента(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если Прогресс = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Прогресс.Статус <> "Выполняется" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Прогресс.Прогресс <> Неопределено Тогда
		
		ПрогрессВыполнения = Прогресс.Прогресс.Процент;
		
		Элементы.ПрогрессВыполненияПроверкаДанных.Подсказка = Прогресс.Прогресс.Текст;
		Элементы.ПрогрессВыполненияПроверкаДанных.Заголовок = Прогресс.Прогресс.Текст;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаДанныхТабличногоДокументаНаСервере()
	
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ВыбранныеДополнительныеРеквизиты")
		И Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты.Количество() > 0 Тогда
		
		Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ДобавитьДополнительныеРеквизиты(ЭтотОбъект, Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФоновоеЗаданиеИдентификатор) Тогда
		
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
		
	КонецЕсли;
	
	ПрогрессВыполнения = 0;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТабличныйДокумент",			ТабличныйДокумент);
	ПараметрыПроцедуры.Вставить("ТабличныйДокументСообщения",	ТабличныйДокументСообщения);
	ПараметрыПроцедуры.Вставить("ДеревоПолей",					ПолучитьИзВременногоХранилища(Параметры.НастройкиЗагрузкиДанных.АдресХраненияДереваПолей));
	ПараметрыПроцедуры.Вставить("НастройкиЗагрузкиДанных",		Параметры.НастройкиЗагрузкиДанных);
	ПараметрыПроцедуры.Вставить("ПропуститьСтраницу",			Истина);
	ПараметрыПроцедуры.Вставить("ЗапретитьПереходДалее",		Ложь);
	ПараметрыПроцедуры.Вставить("ТаблицаСопоставленияДанных",	ТаблицаСопоставленияДанных.Выгрузить());
	ПараметрыПроцедуры.Вставить("Ошибки",						Неопределено);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка данных в колонках табличного документа'");
	ПараметрыВыполнения.ЗапуститьВФоне				= Истина;
	
	ИмяМетода = "Обработки.ЗагрузкаДанныхИзВнешнегоИсточника.ПредварительнаяОбработкаДанных";
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	ФоновоеЗаданиеРезультатФормирования = РезультатФоновогоЗадания;
	ФоновоеЗаданиеИдентификатор = РезультатФоновогоЗадания.ИдентификаторЗадания;
	
КонецПроцедуры

// :::СтраницаСопоставлениеДанных

&НаКлиенте
Процедура ОбработатьРезультатСопоставленияДанныхТабличногоДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ДобавитьОшибкуЖурналаРегистрации(Результат.ПодробноеПредставлениеОшибки);
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
		
	КонецЕсли;
	
	ФоновоеЗаданиеИдентификатор = Неопределено;
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	
	ПослеСопоставленияЗагружаемыхДанныхВДлительнойОперации(Результат);
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеНачалаСопоставленияДанных()
	
	Если ФоновоеЗаданиеРезультатФормирования = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Если ФоновоеЗаданиеРезультатФормирования.Статус <> "Выполняется" Тогда 
		
		ОбработатьРезультатСопоставленияДанныхТабличногоДокумента(ФоновоеЗаданиеРезультатФормирования, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	ЗапретитьПереходДалее = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатСопоставленияДанныхТабличногоДокумента", ЭтотОбъект, Неопределено);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессОбновленияПараметровРаботыПрограммы", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗаданиеРезультатФормирования, Обработчик, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрогрессОбновленияПараметровРаботыПрограммы(Прогресс, ДополнительныеПараметры) Экспорт
	
	Если Прогресс = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Прогресс.Статус <> "Выполняется" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Прогресс.Прогресс <> Неопределено Тогда
		
		ПрогрессВыполнения = Прогресс.Прогресс.Процент;
		
		Элементы.ПрогрессВыполненияСопоставленияДанных.Подсказка = Прогресс.Прогресс.Текст;
		Элементы.ПрогрессВыполненияСопоставленияДанных.Заголовок = Прогресс.Прогресс.Текст;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопостовлениеДанныхТабличногоДокументаНаСервере()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Сопоставление внешних данных и данных нашей программы'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ТаблицаСопоставленияДанных", ТаблицаСопоставленияДанных.Выгрузить());
	ПараметрыПроцедуры.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
	
	ОбъектЗагрузки = ЗагрузкаДанныхИзВнешнегоИсточника.ОбъектЗагрузкиПоПолномуИмени(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);
	ИмяМетодаДлительнойОперации = СтрШаблон("%1.%2.СопоставитьЗагружаемыеДанныеИзВнешнегоИсточника", СокрЛП(ОбъектЗагрузки.ОбъектЗагрузки.Родитель.Имя), СокрЛП(ОбъектЗагрузки.ОбъектЗагрузки.Имя));
	ФоновоеЗаданиеРезультатФормирования = ДлительныеОперации.ВыполнитьВФоне(ИмяМетодаДлительнойОперации, ПараметрыПроцедуры, ПараметрыВыполнения);
	
	ФоновоеЗаданиеИдентификатор = ФоновоеЗаданиеРезультатФормирования.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = ФоновоеЗаданиеРезультатФормирования.АдресРезультата;
	
КонецПроцедуры

// :::СтраницаРезультатСопоставления

&НаСервере
Процедура ПроверитьКорректностьДанныхВСтрокеТаблицы(ИдентификаторСтрокиФормы)
	Перем Менеджер;
	
	СтрокаТаблицыФормы = ТаблицаСопоставленияДанных.НайтиПоИдентификатору(ИдентификаторСтрокиФормы);
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
	Менеджер.ПроверитьКорректностьДанныхВСтрокеТаблицы(СтрокаТаблицыФормы, Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстДекорацииКоличестваСтрок()
	
	КоличествоСтрокТаблицы		= ТаблицаСопоставленияДанных.Количество();
	КоличествоСтрокБезОшибок	= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();
	Если НЕ Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
		
		НесопоставленоДанных = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_СтрокаСопоставлена", Ложь)).Количество();
		НесогласованныеДанные = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Ложь)).Количество();
		ЗаполненыНеПолностью = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура(ЗаполненыНеПолностью(), Истина)).Количество();
		
	КонецЕсли;
	
	НовыйЗаголовок 				= "";
	
	Если ФильтрТаблицаСопоставления = "БезОтбора" Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Всего строк в таблице .......... %1'");
		ЗначениеПараметра = КоличествоСтрокТаблицы;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибокНет" Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Строк с данными, которые возможно загрузить в приложение .......... %1'");
		ЗначениеПараметра = КоличествоСтрокБезОшибок;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибки" Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Строки, содержащие ошибки и препятствующие загрузке данных .......... %1'");
		ЗначениеПараметра = КоличествоСтрокТаблицы - КоличествоСтрокБезОшибок;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "Сопоставленные" Тогда 
		
		Если ОбновлятьСуществующие Тогда
			
			НовыйЗаголовок = Нстр("ru ='Данные, которые соответствуют элементам программы и будут обновлены .......... %1'");
			
		Иначе
			
			НовыйЗаголовок = Нстр("ru ='Данные, которые соответствуют элементам программы .......... %1'");
			
		КонецЕсли;
		
		ЗначениеПараметра = КоличествоСтрокТаблицы - НесопоставленоДанных;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "БудутСозданы" Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Данные, которые не удалось сопоставить .......... %1'");
		ЗначениеПараметра = НесопоставленоДанных;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "Несогласованные" Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Строки, которые содержат ошибку либо заполнены не полностью .......... %1'");
		ЗначениеПараметра = НесогласованныеДанные;
		
	ИначеЕсли ФильтрТаблицаСопоставления = ЗаполненыНеПолностью() Тогда 
		
		НовыйЗаголовок = Нстр("ru ='Строки, которые заполнены не полностью .......... %1'");
		ЗначениеПараметра = ЗаполненыНеПолностью;
				
	КонецЕсли;
	
	НовыйЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НовыйЗаголовок, ЗначениеПараметра);
	Элементы.ДекорацияКоличествоСтрок.Заголовок = НовыйЗаголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокПоЗначениюФильтра()
	
	Если ФильтрТаблицаСопоставления = "БезОтбора" Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Неопределено;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибокНет" Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяСлужебногоПоля, Истина);
		
	ИначеЕсли ФильтрТаблицаСопоставления = "ОтборОшибки" Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура(ИмяСлужебногоПоля, Ложь);
		
	ИначеЕсли ФильтрТаблицаСопоставления = "Сопоставленные" Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("_СтрокаСопоставлена", Истина);
		
	ИначеЕсли ФильтрТаблицаСопоставления = "БудутСозданы" Тогда
		
		Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника Тогда
			
			ФиксированнаяСтруктураОтбораСтрок = Новый ФиксированнаяСтруктура("_ЗагрузкаВПриложениеВозможна, _СтрокаСопоставлена", Истина, Ложь);
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = ФиксированнаяСтруктураОтбораСтрок;
			
		ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений Тогда
			
			ФиксированнаяСтруктураОтбораСтрок = Новый ФиксированнаяСтруктура("_ЗагрузкаВПриложениеВозможна, _СтрокаСопоставлена", Истина, Ложь);
			Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = ФиксированнаяСтруктураОтбораСтрок;
			
		КонецЕсли;
		
	ИначеЕсли ФильтрТаблицаСопоставления = "Несогласованные" Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("_ЗагрузкаВПриложениеВозможна" + ", "+ЗаполненыНеПолностью(), Ложь, Ложь);
		
	ИначеЕсли ФильтрТаблицаСопоставления = ЗаполненыНеПолностью() Тогда
		
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура(ЗаполненыНеПолностью(), Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаполненыНеПолностью()
	
	Возврат ЗагрузкаДанныхИзВнешнегоИсточника.ИмяСлужебногоПоляЗаполненыНеПолностью();
	
КонецФункции

&НаСервере
Процедура ПослеСопоставленияЗагружаемыхДанныхВДлительнойОперации(Результат)
	
	Если Результат = Неопределено Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	РезультатВыполненияКакТаблицаЗначений = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ТаблицаСопоставленияДанных.Загрузить(РезультатВыполненияКакТаблицаЗначений);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьОбязательныеПоля()
	
	Если Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения = "Справочник.НоменклатураПоставщиков" 
		И НЕ ЗначениеЗаполнено(КонтрагентПоставщик) Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Выберите поставщика, товары которого загружаете.'"), КонтрагентПоставщик, "Контрагент");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОткудаБратьДанныеПриИзменении(Элемент)
	
	ОткудаБратьДанные1 = ?(ОткудаБратьДанные = 0, 0, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткудаБратьДанные1ПриИзменении(Элемент)
	
	ОткудаБратьДанные = ?(ОткудаБратьДанные1 = 1, 1, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияВыборФайлаНажатие(Элемент)

	Если Параметры.НастройкиЗагрузкиДанных.ФиксированныйШаблон Тогда
		ЗаполнитьТабличныйДокументИзФайлаШаблона();
	Иначе
		ЗаполнитьТабличныйДокументИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КудаЗагружаемПриИзменении(Элемент)
	
	ФиксированныйШаблон = (КудаЗагружаем = 1);
	Параметры.НастройкиЗагрузкиДанных.ФиксированныйШаблон = ФиксированныйШаблон;
	
	Элементы.ГруппаШаблон.Видимость = ФиксированныйШаблон;
	Элементы.ГруппаПримеры.Видимость = НЕ ФиксированныйШаблон;
	Элементы.ГруппаЗаполнение.Видимость = ДоступноРучноеЗаполнение И НЕ ФиксированныйШаблон;
	Элементы.НастройкиПоиска.Видимость = (КудаЗагружаем <> 2);
	
	ОбновитьНастройкиВариантаЗагрузки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиВариантаЗагрузки()
	
	Если КудаЗагружаем = 0 ИЛИ КудаЗагружаем = 1 Тогда
		МетаданныеЗаполнения = Метаданные.Справочники.Номенклатура;
	ИначеЕсли КудаЗагружаем = 2 Тогда 
		МетаданныеЗаполнения = Метаданные.Справочники.Контрагенты;
	ИначеЕсли КудаЗагружаем = 3 Тогда
		МетаданныеЗаполнения = Метаданные.РегистрыСведений.ЦеныНоменклатуры;
	ИначеЕсли КудаЗагружаем = 4 Тогда
		МетаданныеЗаполнения = Метаданные.Справочники.НоменклатураПоставщиков;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	НовыеНастройкиЗагрузкиДанных = Новый Структура;
	ЗагрузкаДанныхИзВнешнегоИсточника.ПриСозданииНаСервере(МетаданныеЗаполнения, НовыеНастройкиЗагрузкиДанных, ЭтотОбъект, Ложь);
	ЗаполнитьЗначенияСвойств(Параметры.НастройкиЗагрузкиДанных, НовыеНастройкиЗагрузкиДанных); 
	// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзВнешнегоИсточника
	
	ОбновитьОбразцыЗагрузкиДанных();
	СоздатьДеревоПолейЗагрузкиДоступныхПользователю();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбразцыЗагрузкиДанных()
	
	Перем Менеджер;
	
	ЗагрузкаДанныхИзВнешнегоИсточника.ПолучитьМенеджерПоИмениОбъектаЗаполнения(Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения, Менеджер);
	Менеджер.ПриОпределенииОбразцовЗагрузкиДанных(Параметры.НастройкиЗагрузкиДанных, УникальныйИдентификатор);
	ЗагрузкаДанныхИзВнешнегоИсточникаПереопределяемый.ПереопределитьОбразцыЗагрузкиДанных(Параметры.НастройкиЗагрузкиДанных, УникальныйИдентификатор);	
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрТаблицаСопоставленияПриИзменении(Элемент)
	
	УстановитьОтборСтрокПоЗначениюФильтра();
	УстановитьТекстДекорацииКоличестваСтрок();
	
	ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаСопоставленияДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЕслиНеСопоставленоПриИзменении(Элемент)
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("СоздаватьЕслиНеСопоставлено", СоздаватьЕслиНеСопоставлено);
	
	УстановитьТекстЗаголовкаДекорацииНесопоставленныеСтроки();
	
	ИзменитьТекстУсловногоОформления();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхПриИзменении(Элемент)
	
	ИдентификаторСтрокиФормы = Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные.ПолучитьИдентификатор();
	ПроверитьКорректностьДанныхВСтрокеТаблицы(ИдентификаторСтрокиФормы);
	УстановитьТекстДекорацииКоличестваСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИдентификаторДополнительногоРеквизита = Поле.Имя;
	Если СтрНайти(ИдентификаторДополнительногоРеквизита, "ДополнительныйРеквизит") > 0 Тогда
		
		ДополнительныйРеквизит = Неопределено;
		Для каждого СтрокаСоответствия Из Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты Цикл
			
			Если СтрокаСоответствия.Значение = ИдентификаторДополнительногоРеквизита Тогда
				
				ДополнительныйРеквизит = СтрокаСоответствия.Ключ;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДополнительныйРеквизит <> Неопределено Тогда
			
			СтрокаТаблицыСопоставления = ТаблицаСопоставленияДанных.НайтиПоИдентификатору(ВыбраннаяСтрока);
			Если ТипЗнч(СтрокаТаблицыСопоставления[ИдентификаторДополнительногоРеквизита]) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов")
				ИЛИ ТипЗнч(СтрокаТаблицыСопоставления[ИдентификаторДополнительногоРеквизита]) = Тип("СправочникСсылка.ЗначенияСвойствОбъектовИерархия") Тогда
				
				ПараметрВыбораЗначенийДополнительногоРеквизита = Новый ПараметрВыбора("Отбор.Владелец", ДополнительныйРеквизит);
				
				МассивПараметровВыбора = Новый Массив;
				МассивПараметровВыбора.Добавить(ПараметрВыбораЗначенийДополнительногоРеквизита);
				
				Поле.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Если МобильныйКлиент Тогда
		
		// Выполняется при активации области
		Возврат;
		
	#КонецЕсли
	
	Если Элементы.ТабличныйДокумент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки 
		ИЛИ Элементы.ТабличныйДокумент.ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		
		Если ТипЗнч(Расшифровка) = Тип("СписокЗначений") Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиЗаголовкаКолонки", ЭтотОбъект);
			
			ОбластьЗаголовка = ПолучитьОбластьЗаголовка();
			
			ПараметрыЗагрузки = Новый Структура;
			ПараметрыЗагрузки.Вставить("НастройкиЗагрузкиДанных", Параметры.НастройкиЗагрузкиДанных);
			ПараметрыЗагрузки.Вставить("ПредставлениеПоля", ОбластьЗаголовка.Текст);
			ПараметрыЗагрузки.Вставить("ИмяПоля", ОбластьЗаголовка.ПараметрРасшифровки);
			ПараметрыЗагрузки.Вставить("ЗаголовокКолонки", ОбластьЗаголовка.Примечание.Текст);
			ПараметрыЗагрузки.Вставить("НомерКолонки", ОбластьЗаголовка.Право);
			
			ОткрытьФорму("Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.ВыборПоля", ПараметрыЗагрузки, ЭтотОбъект, , , , ОписаниеОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриАктивизации(Элемент)
	
	#Если МобильныйКлиент Тогда
		
		Если Элементы.ПанельОсновная.ТекущаяСтраница <> Элементы.СтраницыПолученныеДанные Тогда
			
			Возврат
			
		КонецЕсли;
		
		// 1.6.16.хх отказ от метода ТабличныйДокументОбработкаРасшифровки() в виду его отсутствия в мобильном клиенте
		ОбработкаРасшифровкиОбластиТабличногоДокумента();
		
	#Иначе
		
		// не имеет смысла в мобильном клиенте
		Элемент.Защита = ?(Элемент.ТекущаяОбласть.Верх > 1, Ложь, Истина);
		
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если НЕ ПроверитьОбязательныеПоля() Тогда
		Возврат;	
	КонецЕсли; 
	
	
	Если ПорядковыйНомерПерехода = 1 Тогда
		Если ОткудаБратьДанные = 1 Тогда
			ЗаполнитьТабличныйСамостоятельно();
		ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ФиксированныйШаблон Тогда
			ЗаполнитьТабличныйДокументИзФайлаШаблона();
		Иначе
			ЗаполнитьТабличныйДокументИзФайла();
		КонецЕсли;
	Иначе
		ИзменитьПорядковыйНомерПерехода(+1);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Шаг = -1;
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПредварительноТЧ
		ИЛИ Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПредварительноСправочник
		ИЛИ Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПредварительноРегистрСведений Тогда
		
		Шаг = -2;
		
	КонецЕсли;
	
	ИзменитьПорядковыйНомерПерехода(Шаг);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("ОписаниеДействия",				"ОбработатьПодготовленныеДанные");
	РезультатЗакрытия.Вставить("ТаблицаСопоставленияДанных",	ТаблицаСопоставленияДанных);
	РезультатЗакрытия.Вставить("НастройкиЗагрузкиДанных",		Параметры.НастройкиЗагрузкиДанных);
	
	ОповеститьОВыборе(РезультатЗакрытия);
	Оповестить("ОбработатьПодготовленныеДанные", РезультатЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеДругимСпособомНажатие(Элемент)
	
	РезультатЗакрытия = Новый Структура;
	РезультатЗакрытия.Вставить("ОписаниеДействия", "ИзменитьСпособЗагрузкиДанныхИзВнешнегоИсточника");
	
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийФайл(Команда)
	
	ЗаполнитьТабличныйДокументИзФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВнешнийШаблон(Команда)
	
	ЗаполнитьТабличныйДокументИзФайлаШаблона();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаСамостоятельноеЗаполнениеНажатие(Элемент)
	
	ЗаполнитьТабличныйСамостоятельно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбразецФормата_csv(Команда)
	
	ОткрытьОбразец("csv", "ОбразецЗагрузкиДанных_csv");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбразецФормата_mxl(Команда)
	
	ОткрытьОбразец("mxl", "ОбразецЗагрузкиДанных_mxl");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбразецФормата_xlsx(Команда)
	
	ОткрытьОбразец("xlsx", "ОбразецЗагрузкиДанных_xlsx");
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонФормата_xlsx(Команда)
	
	ОткрытьОбразец("xlsx", "ШаблонЗагрузкиДанных_xlsx");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_БезОтбора(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("БезОтбора");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_БудутСозданы(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("БудутСозданы");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_НесогласованныеДанные(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("Несогласованные");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_ОтборОшибокНет(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("ОтборОшибокНет");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_ОтборОшибки(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("ОтборОшибки");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьТаблицуСопоставления_Сопоставлено(Команда)
	
	ЭлементСпискаВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора.НайтиПоЗначению("Сопоставленные");
	ФильтрТаблицаСопоставления = ЭлементСпискаВыбора.Значение;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееЗначение(Команда)
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиентПереопределяемый.ПриУстановкеОбщегоЗначения(ЭтотОбъект, Параметры.НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОбщееЗначение(Команда)
	
	ЗагрузкаДанныхИзВнешнегоИсточникаКлиентПереопределяемый.ПриОчисткеОбщегоЗначения(ЭтотОбъект, Параметры.НастройкиЗагрузкиДанных, ТаблицаСопоставленияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлятьСуществующиеПриИзменении(Элемент)
	
	Параметры.НастройкиЗагрузкиДанных.Вставить("ОбновлятьСуществующие", ОбновлятьСуществующие);
	
	УстановитьТекстЗаголовкаДекорацииСопоставленыхОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЦенПриИзменении(Элемент)
	
	Если ВидЦен.Пустая() Тогда
		УстановитьОсновнойВидЦенПродажи();
	КонецЕсли;
	Параметры.НастройкиЗагрузкиДанных.Вставить("ВидЦен", ВидЦен);

КонецПроцедуры

&НаКлиенте
Процедура ВидЦенШаблонОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьОсновнойВидЦенПродажи();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОсновнойВидЦенПродажи()
	
	ВидЦен = ОсновнойВидЦенПродажи();
	Параметры.НастройкиЗагрузкиДанных.Вставить("ВидЦен", ВидЦен);
	ПоказатьОповещениеПользователя(НСтр("ru='Вид цен должен быть заполнен.'")
		,
		,
		НСтр("ru='Вид цен должен быть заполнен. Если вы не загружаете цены, то значение этой настройки не повлияет на загрузку.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)

	Параметры.НастройкиЗагрузкиДанных.Вставить("СкладОстатков", СкладОстатков);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Параметры.НастройкиЗагрузкиДанных.Вставить("КонтрагентПоставщик", КонтрагентПоставщик);

КонецПроцедуры

&НаКлиенте
Процедура МаппингПолей(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектЗагрузки", Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);
	ПараметрыОткрытия.Вставить("ВыбранныеПоля", Новый Соответствие);
	
	Для НомерКолонки = 1 По Параметры.НастройкиЗагрузкиДанных.МаксимумПолезныхКолонокТД Цикл
		
		ПараметрРасшифровки = ТабличныйДокумент.Область(СтрШаблон("R1C%1", НомерКолонки)).ПараметрРасшифровки;
		Если ПустаяСтрока(ПараметрРасшифровки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ПараметрыОткрытия.ВыбранныеПоля.Вставить(ПараметрРасшифровки, НомерКолонки);
		
	КонецЦикла;
	
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ВыбранныеДополнительныеРеквизиты") Тогда
		
		Для каждого ЭлементСоответствия Из Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты Цикл
			
			ПараметрыОткрытия.ВыбранныеПоля.Вставить(ЭлементСоответствия.Ключ, ПараметрыОткрытия.ВыбранныеПоля[ЭлементСоответствия.Значение]);
			ПараметрыОткрытия.ВыбранныеПоля.Удалить(ЭлементСоответствия.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораШаблонаМаппингаПолей", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.МаппингПолейЗагрузкиДанныхИзВнешнегоИсточника.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораШаблонаМаппингаПолей(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("СправочникСсылка.МаппингПолейЗагрузкиДанныхИзВнешнегоИсточника") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НастройкаМаппинга = Результат;
	
	// Ветвление, как обход. Подробности внутри МаппингПолейПоШаблону()
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("ВыбранныеДополнительныеРеквизиты") Тогда
		
		МаппингПолейПоШаблону(Результат, Параметры.НастройкиЗагрузкиДанных.ВыбранныеДополнительныеРеквизиты);
		
	Иначе
		
		МаппингПолейПоШаблону(Результат, Новый Соответствие);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаМаппингаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МаппингПолей(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаМаппингаОчистка(Элемент, СтандартнаяОбработка)
	
	НастройкаМаппинга = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеСопоставлениеКолонок(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ОбъектЗагрузки", Параметры.НастройкиЗагрузкиДанных.ПолноеИмяОбъектаЗаполнения);
	
	ОткрытьФорму("РегистрСведений.СоответствиеНаименованияКолонокПолямЗагрузки.ФормаСписка", ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиПоиска(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ВыборНастроекЗавершение", ЭтотОбъект);
	Если Параметры.НастройкиЗагрузкиДанных.Свойство("НастройкиПоиска") Тогда
	    ПараметрыНастройки = Параметры.НастройкиЗагрузкиДанных.НастройкиПоиска;
	Иначе	
		ПараметрыНастройки = Новый Структура;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.НастройкиПоиска", ПараметрыНастройки, ЭтаФорма,,,, 
		ОповещениеОЗавершении, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Параметры.НастройкиЗагрузкиДанных.Вставить("НастройкиПоиска", Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиРезультатовИнтерактивныхДействий

&НаКлиенте
Процедура ВыбратьВнешнийФайлОбработкаЗавершение(Результат, Адрес, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		АдресВременногоХранилища= Адрес;
		ИмяВыбранногоФайла 		= ИмяФайла;
		Расширение 				= ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ИмяВыбранногоФайла));
		
		Если Расширение = "xlsx" 
			ИЛИ Расширение = "mxl" 
			ИЛИ Расширение = "csv" Тогда
			
			ИзменитьПорядковыйНомерПерехода(+1);
		Иначе
			
			ТекстПредупреждения = НСтр("ru ='Импорт данных из файлов данного типа не поддерживается.'");
			ПоказатьПредупреждение(, ТекстПредупреждения); 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРасшифровкиЗаголовкаКолонки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ОбработатьВыборДополнительныхРеквизитов(Результат.ДопРеквизит);
		
		ОбластьЗаголовка = ПолучитьОбластьЗаголовка();
		#Если МобильныйКлиент Тогда
			
			Элементы.ТабличныйДокумент.ТекущаяОбласть =  ТабличныйДокумент.Область("R2C" + ОбластьЗаголовка.Право);
			
		#КонецЕсли
		
		ОбластьЗаголовка.Текст 					= Результат.Представление;
		ОбластьЗаголовка.ПараметрРасшифровки	= Результат.Значение;
		
		Если Результат.Свойство("ОтменитьВыборВКолонке") Тогда
			
			ОбластьЗаголовка 						= ТабличныйДокумент.Область("R1C" + Результат.ОтменитьВыборВКолонке);
			ОбластьЗаголовка.Текст 					= "Не загружать";
			ОбластьЗаголовка.ПараметрРасшифровки	= "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПоставляемаяЧасть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// обработчик ПриПереходеДалее
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				А = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// обработчик ПриПереходеНазад
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				А = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) - Число. Порядковый номер перехода, который соответствует текущему шагу перехода
//  ИмяОсновнойСтраницы (обязательный) - Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему
//                                       номеру перехода
//  ИмяСтраницыНавигации (обязательный) - Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему
//                                        номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) - Строка. Имя функции-обработчика события открытия текущей страницы помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) - Строка. Имя функции-обработчика события перехода на следующую
//                                                    страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) - Строка. Имя функции-обработчика события перехода на предыдущую
//                                                    страницу помощника
//  ДлительнаяОперация (необязательный) - Булево. Признак отображения страницы длительной операции.
//  Истина - отображается страница длительной операции; Ложь - отображается обычная страница. Значение по умолчанию - Ложь.
// 
&НаКлиенте
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеОбработчикиСобытийПереходов

// :::СтраницаВыборФайла

&НаКлиенте
Функция Подключаемый_СтраницаВыборФайла_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт
	Перем СтруктураПроверки;
	
	Если ЭтоПереходДалее = Ложь Тогда
		
		ОчиститьСуществующиеУстановки();
		
	Иначе
		
		ОпределитьВидимостьЭлементовСтраницы();
		
	КонецЕсли;
	
КонецФункции

// :::СтраницаЗагрузкаДанных

&НаКлиенте
Функция Подключаемый_СтраницаЗагрузкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Истина;
	ВыполнитьЗагрузкуДанныхНаСервере(ПерейтиДалее);
	
	Если ЗначениеЗаполнено(НастройкаМаппинга) Тогда
	 	ПослеВыбораШаблонаМаппингаПолей(НастройкаМаппинга, Неопределено);
	КонецЕсли;
	
	Если НЕ ПерейтиДалее Тогда
		
		ПодключитьОбработчикОжидания("ПроверитьВыполнение", 0.1, Истина);
		
	КонецЕсли;
	
КонецФункции

// :::СтраницыПроверкаДанных

&НаКлиенте
Функция Подключаемый_СтраницыПроверкаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	ПроверкаДанныхТабличногоДокументаНаСервере();
	ПослеНачалаПроверкиДанных();
	
КонецФункции

// :::СтраницыРезультатПроверкиДанных

&НаКлиенте
Функция Подключаемый_СтраницыРезультатПроверкиДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	Перем Ошибки;
	
	Если НЕ ЭтоПереходДалее Тогда
		
		ПропуститьСтраницу = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницыРезультатПроверкиДанных_ПриПереходеНазад(Отказ)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КомандаДалее1", "Доступность", Истина);
	
КонецФункции

// :::СтраницаСопоставлениеДанных

&НаКлиенте
Функция Подключаемый_СтраницаСопоставлениеДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	СопостовлениеДанныхТабличногоДокументаНаСервере();
	ПослеНачалаСопоставленияДанных();
	
	Элементы.СкладОстатков.Видимость = Параметры.НастройкиЗагрузкиДанных.КоличествоЗаполнено;
	
КонецФункции

// :::СтраницаРезультатСопоставления

&НаКлиенте
Функция Подключаемый_СтраницаРезультатСопоставления_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если ЭтоПереходДалее = Истина Тогда
		
		ПропуститьСтраницу = Истина;
		
	Иначе
		
		УстановитьОтборСтрокПоЗначениюФильтра();
		УстановитьТекстДекорацииКоличестваСтрок();
		
		ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаСопоставленияДанных;
		
	КонецЕсли;
	
КонецФункции

// :::СтраницаНастройкаЗагрузки

&НаКлиенте
Функция Подключаемый_СтраницаПредварительноТЧ_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт
	
	ДобавитьВозможно = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();
	ДобавитьНевозможно = ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Ложь)).Количество();
	
	Элементы.ДекорацияБудетЗагруженоКоличество.Заголовок = Строка(ДобавитьВозможно);
	Элементы.ДекорацияБудетПропущеноКоличество.Заголовок = Строка(ДобавитьНевозможно);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПредварительноСправочник_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт
	
	ПолученоДанных 		= ТаблицаСопоставленияДанных.Количество();
	СогласованныеДанные	= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();
	СопоставленоДанных	= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_СтрокаСопоставлена", Истина)).Количество();
	
	Элементы.ДекорацияПолученоДанныхКоличество.Заголовок = ПолученоДанных;
	Элементы.ДекорацияСопоставленоКоличествоОбъект.Заголовок = СопоставленоДанных;
	Элементы.ДекорацияНесопоставленныеСтрокиКоличествоОбъект.Заголовок = СогласованныеДанные - СопоставленоДанных;
	Элементы.ДекорацияНекоректныеСтрокиКоличествоОбъекты.Заголовок = ПолученоДанных - СогласованныеДанные;
	
	// Элементы.ТаблицаСопоставленияДанных.
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаПредварительноРС_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее) Экспорт
	
	ПолученоДанных 		= ТаблицаСопоставленияДанных.Количество();
	СогласованныеДанные	= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_ЗагрузкаВПриложениеВозможна", Истина)).Количество();
	СопоставленоДанных	= ТаблицаСопоставленияДанных.НайтиСтроки(Новый Структура("_СтрокаСопоставлена", Истина)).Количество();
	
	Элементы.ДекорацияПолученоДанныхКоличествоРС.Заголовок = ПолученоДанных;
	Элементы.ДекорацияСопоставленоКоличествоРС.Заголовок = СопоставленоДанных;
	Элементы.ДекорацияНесопоставленныеСтрокиКоличествоРС.Заголовок = СогласованныеДанные - СопоставленоДанных;
	Элементы.ДекорацияНекоректныеСтрокиКоличествоРС.Заголовок = ПолученоДанных - СогласованныеДанные;
	
КонецФункции

#КонецОбласти

#Область ТаблицаПереходовПоСценарию

// Процедура определяет таблицу переходов по сценарию №1.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока()
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаВыборФайла",				"СтраницаНавигацииНачало", , "СтраницаВыборФайла_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаЗагрузкаДанных",			"СтраницаНавигацииОжидание",,,,, Истина, "СтраницаЗагрузкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "СтраницыПолученныеДанные",			"СтраницаНавигацииПродолжение",,, );
	ТаблицаПереходовНоваяСтрока(4, "СтраницыПроверкаДанных",			"СтраницаНавигацииОжидание",,,,, Истина, "СтраницыПроверкаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "СтраницыРезультатПроверкиДанных",	"СтраницаНавигацииПродолжение", , "СтраницыРезультатПроверкиДанных_ПриОткрытии", , "СтраницыРезультатПроверкиДанных_ПриПереходеНазад");
	ТаблицаПереходовНоваяСтрока(6, "СтраницаСопоставлениеДанных",		"СтраницаНавигацииОжидание",,,,, Истина, "СтраницаСопоставлениеДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "СтраницаРезультатСопоставления",	"СтраницаНавигацииПродолжение", , "СтраницаРезультатСопоставления_ПриОткрытии");
	
	Если Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаТабличнойЧасти Тогда
		
		ТаблицаПереходовНоваяСтрока(8, "СтраницаПредварительноТЧ",		"СтраницаНавигацииОкончание", , "СтраницаПредварительноТЧ_ПриОткрытии");
		
	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаСправочника Тогда
		
		ТаблицаПереходовНоваяСтрока(8, "СтраницаПредварительноСправочник",	"СтраницаНавигацииОкончание", , "СтраницаПредварительноСправочник_ПриОткрытии");
		
	ИначеЕсли Параметры.НастройкиЗагрузкиДанных.ЭтоЗагрузкаРегистраСведений Тогда
		
		ТаблицаПереходовНоваяСтрока(8, "СтраницаПредварительноРегистрСведений", "СтраницаНавигацииОкончание", , "СтраницаПредварительноРС_ПриОткрытии");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОЗагрузкеДанных(Команда)
	
	ОткрытьФорму("Обработка.ЗагрузкаДанныхИзВнешнегоИсточника.Форма.КраткоеОписание");
	
КонецПроцедуры

&НаКлиенте
Процедура Видеоурок(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://www.youtube.com/watch?v=PwcoBPi9Slc&feature=youtu.be")
	
КонецПроцедуры

#КонецОбласти
