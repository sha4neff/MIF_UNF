
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор;
	
	Подписать = Неопределено;
	Параметры.Свойство("ПодписатьОтправить", Подписать);
	Параметры.Свойство("НеОтправлять", НеОтправлять);
	
	Если Подписать = Истина Тогда
		ПодписатьОтправить = Истина;
	КонецЕсли;
	
	ДополнительныеДанные = Неопределено;
	Если Параметры.Свойство("ДополнительныеДанные", ДополнительныеДанные)
			И ТипЗнч(ДополнительныеДанные) = Тип("Структура") Тогда
		КэшДополнительныхДанных = Новый ФиксированнаяСтруктура(ДополнительныеДанные);
	КонецЕсли;

	Элементы.ГруппаИзмененыНастройки.Видимость = Ложь;
	
	МассивДокументов = Неопределено;
	Если Не Параметры.Свойство("СписокДокументовКОтправке", МассивДокументов) Тогда
		МассивДокументов = Новый Массив;
	КонецЕсли;
	
	СписокДокументов = Новый ФиксированныйМассив(МассивДокументов);
	
	МассовыйРежим = СписокДокументов.Количество() > 1;
	
	Если СписокДокументов.Количество() = 1 Тогда
		Элементы.ГруппаДокумент.Видимость = Истина;
		Элементы.ДекорацияПредставление.Заголовок = СформироватьЗаголовокДокумента(СписокДокументов[0]);
	Иначе
		Элементы.ГруппаДокумент.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьВариантРаботы(ЭтотОбъект, Ложь);
	
	ПодготовитьФормуНаСервере(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	КлючСохраненияПоложенияОкна = "";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьТребованиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылка = "НастройкаЗаполненияДополнительныхПолей" Тогда
		Если ДокументыКОтправке.Количество() > 0 Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Организация"              , ДокументыКОтправке[0].Организация);
			ПараметрыФормы.Вставить("Контрагент"               , ДокументыКОтправке[0].Контрагент);
			ПараметрыФормы.Вставить("ДоговорКонтрагента"       , ДокументыКОтправке[0].ДоговорКонтрагента);
			ПараметрыФормы.Вставить("ВидЭлектронногоДокумента" , ДокументыКОтправке[0].ВидЭД);
			ПараметрыФормы.Вставить("Формат"                   , ДокументыКОтправке[0].ВерсияФормата);
			
			Оповещение = Новый ОписаниеОповещения("ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей", ЭтотОбъект);
			
			ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаЗаполненияДополнительныхПолей",
			ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПоОрганизациям

&НаКлиенте
Процедура СписокПоОрганизациямВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокПоОрганизациям.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.СписокПоОрганизациямРезультат
			И ТекущиеДанные.ЕстьПредупреждения Тогда
		ОткрытьРасшифровкуПредупреждений(ТекущиеДанные.ИдентификаторКонтрагента);
	ИначеЕсли Поле = Элементы.СписокПоОрганизациямНастройкиОтправки Тогда
		
		Если ТекущиеДанные.ЭтоВнутреннийЭДО Тогда
			Если ТекущиеДанные.ЕстьНастройкиОтправки Тогда
				ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуНастройкиВнутреннегоЭДО(ТекущиеДанные.Организация);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ОбработатьДокументПослеИзмененияНастроекВнутреннегоЭДО", ЭтотОбъект);
				ОписаниеВидаВнутреннегоДокумента = ОбменСКонтрагентамиСлужебныйКлиент.НовоеОписаниеВидаВнутреннегоДокумента();
				ОписаниеВидаВнутреннегоДокумента.ОбъектУчета = ТекущиеДанные.ИдентификаторОбъектаУчета;
				ОбменСКонтрагентамиСлужебныйКлиент.НастроитьВнутреннийЭлектронныйДокументооборот(
					ТекущиеДанные.Организация, ОписаниеВидаВнутреннегоДокумента, Оповещение);
			КонецЕсли;
			
		ИначеЕсли ТекущиеДанные.ЕстьНастройкиОтправки
				И Не ТекущиеДанные.РасширеннаяНастройка Тогда
			ОткрытьНастройкиОбменаСКонтрагентом(ТекущиеДанные.Организация, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента);
		ИначеЕсли ТекущиеДанные.ЕстьНастройкиОтправки = Ложь Тогда
			ОткрытьМастерНачальнойНастройки(ТекущиеДанные.Организация, ТекущиеДанные.Контрагент, ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.СписокПоОрганизациямКонтрагент
		Или Поле = Элементы.СписокПоОрганизациямОрганизация Тогда
		
		СсылкаНаОбъект = Элемент.ТекущиеДанные[СтрЗаменить(Поле.Имя, Элемент.Имя, "")];
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ПоказатьЗначение(,СсылкаНаОбъект);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПоОрганизациямВыбранПриИзменении(Элемент)
	УстановитьЗаголовокГотовоКФормированию(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбщиеОшибкиДокументов

&НаКлиенте
Процедура ОбщиеОшибкиДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОбщиеОшибкиДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, ТекущиеДанные.КлючСообщения);
	
	ПодключитьОбработчикОжидания("ПоказатьЗначениеЗавершение", 0.1, Истина);

	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗначениеЗавершение()
	
	ТекущиеДанные = Элементы.ОбщиеОшибкиДокументов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеОшибки Из ТекущиеДанные.СписокОшибок Цикл
		Поле = "";
		ПутьКДанным = "";
		Если ЗначениеЗаполнено(ОписаниеОшибки.Представление) Тогда
			СоставляющиеПути = СтрРазделить(ОписаниеОшибки.Представление, ".");
			Если СоставляющиеПути.Количество() = 1 Тогда
				Поле = СоставляющиеПути[0];
			Иначе
				ПутьКДанным = СоставляющиеПути[0];
				СоставляющиеПути.Удалить(0);
				Поле = СтрСоединить(СоставляющиеПути, ".");
			КонецЕсли;
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ОписаниеОшибки.Значение, ТекущиеДанные.КлючСообщения, Поле, ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыКОтправке
&НаКлиенте
Процедура ДокументовКОтправкеВыбранПриИзменении(Элемент)
	СформироватьЗаголовокКомандыПодписать(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДокументовКОтправкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументовКОтправке.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ДокументовКОтправкеРезультат Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущиеДанные.ЕстьОшибки Или ТекущиеДанные.ЕстьПредупреждения Тогда
			ОткрытьФормуИсправленияОшибок(ТекущиеДанные.Документ, ТекущиеДанные.ОписаниеОшибок.ВыгрузитьЗначения());
		Иначе
			ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьАктуальныйЭД(ТекущиеДанные.Документ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПодписантов

&НаКлиенте
Процедура СписокПодписантовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не НоваяСтрока
		ИЛИ ОтменаРедактирования
		ИЛИ МассовыйРежим
		ИЛИ Не ЗначениеЗаполнено(СписокДокументов) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("Документ", СписокДокументов[0]);
	НайденныеСтроки = ДокументыКОтправке.НайтиСтроки(Отбор);
	Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = НайденныеСтроки[0];
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущиеДанные.Организация = СтрокаТаблицы.Организация;
	ТекущиеДанные.ВидВнутреннегоДокумента = СтрокаТаблицы.ВидВнутреннегоДокумента;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)
	
	МассивДокументов = ЗаполнитьГотовКОтправкеПоОрганизации();
	
	Если МассивДокументов.Количество() > 0 Тогда
		
		СписокДокументов = Новый ФиксированныйМассив(МассивДокументов);
		
		ДополнительныеПараметры = Новый Структура;
		ПараметрыВнутреннихДокументов = ПараметрыФормированияВнутреннихДокументов(ЭтотОбъект, МассивДокументов);
		Если ЗначениеЗаполнено(ПараметрыВнутреннихДокументов.ПодписантыОбъектов) Тогда
			ДополнительныеПараметры.Вставить("ПодписантыОбъектов", ПараметрыВнутреннихДокументов.ПодписантыОбъектов);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрыВнутреннихДокументов.КлючиНастроекОбъектов) Тогда
			ДополнительныеПараметры.Вставить("КлючиНастроекОбъектов", ПараметрыВнутреннихДокументов.КлючиНастроекОбъектов);
		КонецЕсли;
		
		ДокументыКОтправке.Очистить();
		СписокПодписантов.Очистить();
		
		Оповещение = Новый ОписаниеОповещения("ОбщийПослеФормированияЭД", ЭтотОбъект, МассивДокументов);
		НачатьФормированиеЭД(МассивДокументов, Оповещение, , ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьГотовКОтправкеПоОрганизации()
	
	Для Каждого Гранула Из СписокПоОрганизациям Цикл
		
		Отбор = Новый Структура("Организация, Контрагент, ДоговорКонтрагента,
			|ЭтоВнутреннийЭДО, ИдентификаторОбъектаУчета, ВидВнутреннегоДокумента");
		ЗаполнитьЗначенияСвойств(Отбор, Гранула);
		НайденныеДокументы = ДокументыКОтправке.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаДокумент Из НайденныеДокументы Цикл
			
			СтрокаДокумент.ГотовКОтправке = Гранула.ГотовКОтправке;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ПолучитьДокументыКОтправке(ДокументыКОтправке, Истина);
	
КонецФункции

&НаКлиенте
Процедура ПомощникДалее(Команда)
	
	НоваяСтраница = Неопределено;
	Если ПоказатьВыбранныйЛистПомощника(ЭтотОбъект, Истина, НоваяСтраница) = Ложь Тогда
		МассивДокументов = ПолучитьДокументыКОтправке(ДокументыКОтправке, Истина);
		
		Если МассивДокументов.Количество() > 0 Тогда
			
			СписокДокументов = Новый ФиксированныйМассив(МассивДокументов);
			ДокументыКОтправке.Очистить();
			
			Оповещение = Новый ОписаниеОповещения("ПомощникУстраненияОшибокПослеФормированияЭД", ЭтотОбъект, НоваяСтраница);
			НачатьФормированиеЭД(МассивДокументов, Оповещение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ПоказатьВыбранныйЛистПомощника(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(Команда)
	
	Если Не ПроверитьЗаполнениеТекущегоЭтапа() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормирования = Новый Структура;
	
	ДополнительныеДанные = ДанныеДополнительныхПолей();
	Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
		ПараметрыФормирования.Вставить("ДополнительныеДанные", ДополнительныеДанные);
	ИначеЕсли КэшДополнительныхДанных <> Неопределено Тогда
		ПараметрыФормирования.Вставить("ДополнительныеДанные", Новый Структура(КэшДополнительныхДанных));
	КонецЕсли;
	
	Если МассовыйРежим Тогда
		ПараметрыДокументов = ПараметрыДокументовКОтправке();
		МассивСсылок = ПараметрыДокументов.МассивСсылок;
		ПараметрыВнутреннихДокументов = ПараметрыДокументов.ПараметрыВнутреннихДокументов;
	Иначе
		МассивСсылок = Новый Массив(СписокДокументов);
		ПараметрыВнутреннихДокументов = ПараметрыФормированияВнутреннихДокументов(ЭтотОбъект, СписокДокументов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВнутреннихДокументов.ПодписантыОбъектов) Тогда
		ПараметрыФормирования.Вставить("ПодписантыОбъектов", ПараметрыВнутреннихДокументов.ПодписантыОбъектов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВнутреннихДокументов.КлючиНастроекОбъектов) Тогда
		ПараметрыФормирования.Вставить("КлючиНастроекОбъектов", ПараметрыВнутреннихДокументов.КлючиНастроекОбъектов);
	КонецЕсли;
	
	Если ПодписатьОтправить Тогда
		Действие = "СформироватьУтвердитьПодписатьОтправить";
	Иначе
		Действие = "Сформировать";
	КонецЕсли;

	ПараметрыФормирования.Вставить("Документы", МассивСсылок);
	ПараметрыФормирования.Вставить("Действие" , Действие);
	
	Закрыть(ПараметрыФормирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОформлениеФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямНастройкиОтправки");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ЕстьНастройкиОтправки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямНастройкиОтправки");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ЕстьНастройкиОтправки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноОранжевый);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ЕстьПредупреждения");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ЕстьПредупреждения");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямВыбран");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ДокументовКОтправке");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 0;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДокументовКОтправкеВыбран");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКОтправке.ЕстьОшибки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветГиперссылкиБЭД);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сформирован'"));
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДокументовКОтправкеРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКОтправке.ЕстьОшибки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноОранжевый);
		
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДокументовКОтправкеРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКОтправке.ЕстьПредупреждения");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДокументовКОтправкеРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКОтправке.ЕстьОшибки");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Идет формирование документа...'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
		
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДокументовКОтправкеРезультат");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДокументыКОтправке.Обновление");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СписокПоОрганизациямКонтрагент");
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СписокПоОрганизациям.ЭтоВнутреннийЭДО");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой(ИндексНовойСтраницы)
	
	Элементы.Назад.Видимость               = Ложь;
	Элементы.ПомощникДалее.Видимость       = Ложь;
	Элементы.ПодписатьИОтправить.Видимость = Ложь;
	
	Если ДокументыКОтправке.НайтиСтроки(Новый Структура("НастройкиСозданы", Ложь)).Количество() > 0 Тогда
		// Проверка на необходимость показать страницу "Общая по организации/контрагенту"
		
		Элементы.ГруппаВариантыОтображения.ТекущаяСтраница = Элементы.ГруппаВариантОбщий;
		УстановитьВариантРаботы(ЭтотОбъект, "ПоОрганизации");
		ЗаполнитьСписокПоОрганизациям()
		
	Иначе
		УстановитьВариантРаботы(ЭтотОбъект, "ПомощникУстраненияОшибок");
		Если ДокументыКОтправке.Количество() > 0 Тогда 
		
		ТаблицаПредупреждений = Новый ТаблицаЗначений;
		ТаблицаПредупреждений.Колонки.Добавить("ТекстОшибки");
		ТаблицаПредупреждений.Колонки.Добавить("Заблокировать");
		
		МассивКлючей = Новый Массив;
		ОбщиеОшибкиДокументов.Очистить();
		
		Для Каждого СтрокаТЧ Из ДокументыКОтправке Цикл
			
			Если Не МассовыйРежим И СтрокаТЧ.ПредупрежденияПоДокументу.Количество() > 0 Тогда
				СтрокаТЧ.ЕстьПредупреждения = Истина;
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СтрокаТЧ.ПредупрежденияПоДокументу, ТаблицаПредупреждений);
			КонецЕсли;
			
			Если Не МассовыйРежим И СтрокаТЧ.ДополнительныеПоля.Количество() > 0 Тогда
				ДанныеДокумента = Новый Структура;
				ДанныеДокумента.Вставить("Организация"             , СтрокаТЧ.Организация);
				ДанныеДокумента.Вставить("Контрагент"              , СтрокаТЧ.Контрагент);
				ДанныеДокумента.Вставить("ДоговорКонтрагента"      , СтрокаТЧ.ДоговорКонтрагента);
				ДанныеДокумента.Вставить("ВидЭлектронногоДокумента", СтрокаТЧ.ВидЭД);
				ДанныеДокумента.Вставить("Формат"                  , СтрокаТЧ.ВерсияФормата);
				
				ПодготовитьДополнительныеПоляДляЗаполнения(СтрокаТЧ.ДополнительныеПоля[0].Значение, ДанныеДокумента);
			ИначеЕсли СтрокаТЧ.ДополнительныеПоля.Количество() > 0 Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
			КонецЕсли;
			
			Если СтрокаТЧ.ОшибкиЗаполнения.Количество() > 0 Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				Для Каждого Ошибка Из СтрокаТЧ.ОшибкиЗаполнения Цикл
					НайденныеСтроки = ОбщиеОшибкиДокументов.НайтиСтроки(Новый Структура("КлючСообщения", Ошибка.КлючСообщения));
					
					Если НайденныеСтроки.Количество() > 0 Тогда
						ТекущаяСтрока = НайденныеСтроки[0];
					Иначе
						
						ТекущаяСтрока = ОбщиеОшибкиДокументов.Добавить();
						ТекущаяСтрока.КлючСообщения = Ошибка.КлючСообщения;
						ТекущаяСтрока.Представление = ПолучитьПредставлениеКлючаСообщения(Ошибка.КлючСообщения);
						
					КонецЕсли;
					
					ТекущаяСтрока.СписокДокументов.Добавить(СтрокаТЧ.Документ);
					
					Если ТекущаяСтрока.СписокОшибок.НайтиПоЗначению(Ошибка.ТекстОшибки) = Неопределено Тогда
						ТекущаяСтрока.СписокОшибок.Добавить(Ошибка.ТекстОшибки, Ошибка.ПутьКДаннымСообщения);
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			Если СтрокаТЧ.ТребуетсяУказатьПодписантов Тогда
				СтрокаТЧ.ЕстьОшибки = Истина;
				Если Не МассовыйРежим Тогда
					УказатьПодписантов = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		СформироватьПредупреждения(ТаблицаПредупреждений);
		КонецЕсли;
		
		ПоказатьВыбранныйЛистПомощника(ЭтотОбъект, Неопределено, ИндексНовойСтраницы);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоказатьВыбранныйЛистПомощника(Форма, ПереходВперед, НовыйИндекс = 0)
	
	СписокСтраниц        = Новый СписокЗначений;
	Элементы             = Форма.Элементы;
	Пометка              = Ложь;
	ТолькоПредупреждения = Ложь;
	
	Если Элементы.ГруппаЭлементовПредупреждений.ПодчиненныеЭлементы.Количество() > 0 Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаПредупреждения);
		ТолькоПредупреждения = Истина;
	КонецЕсли;
	
	Если Форма.ОбщиеОшибкиДокументов.Количество() > 0 Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаОбщиеОшибки);
		ТолькоПредупреждения = Ложь;
	КонецЕсли;
	
	Если (Элементы.ГруппаРазделовШапка.ПодчиненныеЭлементы.Количество()
			+ Элементы.ГруппаРазделовТаблица.ПодчиненныеЭлементы.Количество()) > 0 Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаДополнительныеПоля);
		ТолькоПредупреждения = Ложь;
	КонецЕсли;
	
	Если Форма.УказатьПодписантов Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаПодписанты);
	КонецЕсли;
	
	Если Форма.МассовыйРежим Тогда
		СписокСтраниц.Добавить(Элементы.СтраницаПоДокументам,, Истина);
		ТолькоПредупреждения = Ложь;
	КонецЕсли;
	
	Если СписокСтраниц.Количество() = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	
	СтрокаТекущейСтраницы = СписокСтраниц.НайтиПоЗначению(ТекущаяСтраница);
	
	Если СтрокаТекущейСтраницы = Неопределено Тогда
		Если ПереходВперед = Неопределено Тогда 
			Индекс = 0;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Индекс = СписокСтраниц.Индекс(СтрокаТекущейСтраницы);
	КонецЕсли;
	
	Если ПереходВперед = Истина Тогда
		Индекс = Индекс + 1;
	ИначеЕсли ПереходВперед = Ложь Тогда
		Индекс = Индекс - 1;
	Иначе
		Индекс = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйИндекс) Тогда 
		Индекс = НовыйИндекс;
	КонецЕсли;

	Если Индекс < 0 Или Индекс > СписокСтраниц.Количество() - 1 Тогда
		Индекс = СписокСтраниц.Количество() - 1;
	КонецЕсли;
	
	ПоследняяСтраница = Индекс = СписокСтраниц.Количество() - 1;
	
	Элементы.Назад.Видимость                       = Индекс > 0;
	Элементы.ПомощникДалее.Видимость               = Не ПоследняяСтраница;
	Элементы.ПодписатьИОтправить.Видимость         = ((ПоследняяСтраница
		И Не Форма.ТолькоПросмотр) Или ТолькоПредупреждения) И Не Форма.НеОтправлять;
	Элементы.ПодписатьИОтправить.КнопкаПоУмолчанию = ПоследняяСтраница;
	Элементы.ПомощникДалее.КнопкаПоУмолчанию       = Не ПоследняяСтраница;
	
	Если ПоследняяСтраница
			И Не Элементы.ПодписатьИОтправить.Видимость Тогда
		Элементы.Итоги2Закрыть.КнопкаПоУмолчанию       = Истина;
	КонецЕсли;
	
	СформироватьЗаголовокКомандыПодписать(Форма);
	
	НоваяСтраница = СписокСтраниц[Индекс].Значение;
	Если Не ЗначениеЗаполнено(НовыйИндекс) Тогда
		Пометка       = СписокСтраниц[Индекс].Пометка;
	КонецЕсли;
	
	Если Не Пометка Или СписокСтраниц.Количество() = 1 Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяСтраница;
	КонецЕсли;
	
	НовыйИндекс = Индекс;
	Форма.ИндексТекущейСтраницы = НовыйИндекс;
	
	Возврат Не Пометка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВариантРаботы(Форма, ТекущийВариантРаботы)
	
	Элементы = Форма.Элементы;
	Элементы.ГруппаВариантОбщий.Видимость             = ТекущийВариантРаботы = "ПоОрганизации";
	Элементы.ГруппаПомощникУстраненияОшибок.Видимость = ТекущийВариантРаботы = "ПомощникУстраненияОшибок";
	
	Если ТекущийВариантРаботы = "ПоОрганизации" Тогда
		Элементы.ГруппаВариантыОтображения.ТекущаяСтраница = Элементы.ГруппаВариантОбщий;
		Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ТекущийВариантРаботы = "ПомощникУстраненияОшибок" Тогда
		Элементы.ГруппаВариантыОтображения.ТекущаяСтраница = Элементы.ГруппаПомощникУстраненияОшибок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокГотовоКФормированию(Форма)
	
	КФормированию = 0;
	Всего = Форма.СписокПоОрганизациям.Итог("ВсегоДокументов");
	Шрифт = Форма.Элементы.ГотовоКФормированию.Шрифт;
	Отбор = Новый Структура("ГотовКОтправке", Истина);
	
	НайденоСтрок = Форма.СписокПоОрганизациям.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТЧ Из НайденоСтрок Цикл
		КФормированию = КФормированию + СтрокаТЧ.ДокументовКОтправке;
	КонецЦикла;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Готово к формированию документов:'"), Шрифт));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(КФормированию), Шрифт, WebЦвета.ЗеленыйЛес));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(НСтр("ru = 'из'"));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(Всего), Шрифт));
	
	Форма.Элементы.ГотовоКФормированию.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокОжидания(КоличествоДокументов)
	
	Шаблон = НСтр("ru = 'Выполняется формирование электронных документов.
	|Примерная продолжительность формирования %1.'");
	
	ВремяВСекундах = КоличествоДокументов * 1.5; // 1.5 примерное время формирования 1 ЭД
	
	ВсегоМинут = Цел(ВремяВСекундах / 60);
	Секунд = ВремяВСекундах - ВсегоМинут * 60;
	ВсегоЧасов = Цел(ВсегоМинут / 60);
	Минут = ВсегоМинут - ВсегоЧасов * 60;
	
	Если ВсегоЧасов > 0 Тогда
		ШаблонВремени = НСтр("ru = '%3 ч %2 мин %1 сек'");
		
	ИначеЕсли Минут > 0 Тогда
		ШаблонВремени = НСтр("ru = '%2 мин %1 сек'");
	Иначе
		ШаблонВремени = НСтр("ru = '%1 сек'");
	КонецЕсли;
	
	Время = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонВремени,
		Формат(Секунд, "ЧН=0; ЧГ="),
		Формат(Минут, "ЧН=0; ЧГ="),
		Формат(ВсегоЧасов, "ЧГ="));
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, Время);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеКлючаСообщения(КлючСообщения)
	
	МетаданныеКлюча = КлючСообщения.Метаданные();
	Представление = МетаданныеКлюча.Представление();
	
	Если ТипЗнч(КлючСообщения) = Тип("РегистрСведенийКлючЗаписи.НастройкиОтправкиЭлектронныхДокументовПоВидам") Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(КлючСообщения.Получатель);
		
		Если ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций() Тогда
			МассивСтрок.Добавить(КлючСообщения.Отправитель);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КлючСообщения.Договор) Тогда
			МассивСтрок.Добавить(СтрШаблон(НСтр("ru = 'По договору ""%1""'"), КлючСообщения.Договор));
		КонецЕсли;
		
		Представление = СтрСоединить(МассивСтрок, " • ");
		ПредставлениеОбъекта = МетаданныеКлюча.Представление();
		
	ИначеЕсли ТипЗнч(КлючСообщения) = Тип("РегистрСведенийКлючЗаписи.НастройкиВнутреннегоЭДО") Тогда
		
		ПредставлениеОбъекта = Строка(КлючСообщения.Организация);
		
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеКлюча)
		Или Метаданные.Документы.Содержит(МетаданныеКлюча) Тогда
		
		Представление = Строка(КлючСообщения);
		ПредставлениеОбъекта = МетаданныеКлюча.ПредставлениеОбъекта;
			
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеОбъекта) Тогда
		ТекстОтвета = СтрШаблон(НСтр("ru = '%1 (%2)'"), Представление, ПредставлениеОбъекта);
	Иначе
		ТекстОтвета = СтрШаблон(НСтр("ru = '%1'"), Представление);
	КонецЕсли;
	
	Возврат ТекстОтвета;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьЗаголовокДокумента(СсылкаНаДокумент)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Документ:'"));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(СсылкаНаДокумент),,,,
		ПолучитьНавигационнуюСсылку(СсылкаНаДокумент)));
		
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьЗаголовокКомандыПодписать(Форма)
	
	Текст = НСтр("ru = 'Готово'");
	КоличествоВсего   = Форма.ДокументыКОтправке.Количество();
	КоличествоВыбрано = Форма.ДокументыКОтправке.НайтиСтроки(Новый Структура("ГотовКОтправке, ЕстьОшибки", Истина, Ложь)).Количество();
	
	Если Форма.ПодписатьОтправить Тогда
		Если КоличествоВсего = 0 И КоличествоВыбрано = 0
			ИЛИ Не Форма.МассовыйРежим Тогда
			Текст = НСтр("ru = 'Подписать и отправить'");
		Иначе
			Текст = СтрШаблон(НСтр("ru = 'Подписать и отправить документы (%1 из %2)'"), КоличествоВыбрано, КоличествоВсего);
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ПодписатьИОтправить.Заголовок = Текст;
	
КонецФункции

#КонецОбласти

#Область РаботаСПредупреждениями

&НаСервере
Процедура СформироватьПредупреждения(ТаблицаПредупреждений)
	
	Для Каждого Элемент Из Элементы.ГруппаЭлементовПредупреждений.ПодчиненныеЭлементы Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
	Если ТаблицаПредупреждений.Количество() > 0 Тогда
		
		Для Каждого СтрокаТЧ Из ТаблицаПредупреждений Цикл
			СформироватьЭлементПредупреждения(СтрокаТЧ.Заблокировать, СтрокаТЧ.ТекстОшибки);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЭлементПредупреждения(Знач Регламент, Знач ТекстПредупреждения)
	
	Ключ = "Ключ" + СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-", "");
	НоваяГруппа = Элементы.Добавить(Ключ, Тип("ГруппаФормы"), Элементы.ГруппаЭлементовПредупреждений);
	НоваяГруппа.Вид                    = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Группировка            = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	НоваяГруппа.ОтображатьЗаголовок    = Ложь;
	НоваяГруппа.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	НоваяКартинка = Элементы.Добавить(Ключ + "Картинка", Тип("ДекорацияФормы"), НоваяГруппа);
	НоваяКартинка.Вид      = ВидДекорацииФормы.Картинка;
	НоваяКартинка.Картинка = ?(Регламент, БиблиотекаКартинок.Ошибка32, БиблиотекаКартинок.Предупреждение32);
	
	НовыйТекст = Элементы.Добавить(Ключ + "Надпись", Тип("ДекорацияФормы"), НоваяГруппа);
	НовыйТекст.Вид                   = ВидДекорацииФормы.Надпись;
	НовыйТекст.Заголовок              = ТекстПредупреждения;
	НовыйТекст.АвтоМаксимальнаяШирина = Ложь;
	НовыйТекст.Ширина                 = 70;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТаблицФормы

&НаСервере
Процедура ПодготовитьФормуНаСервере(ПараметрыФормы)
	
	АдресСведенийОбОшибках   = Неопределено;
	ИдентификаторКонтрагента = Неопределено;
	ВидЭД                    = Неопределено;
	ВерсияФормата            = Неопределено;
	
	Если ПараметрыФормы.Свойство("АдресСведенийОбОшибках", АдресСведенийОбОшибках) Тогда
		
		ОшибкиПриФормированииДокументов = ПолучитьИзВременногоХранилища(АдресСведенийОбОшибках);
		
		УдалитьИзВременногоХранилища(АдресСведенийОбОшибках);
		
		ЗаполнитьТаблицуОтправляемыхДокументов(ОшибкиПриФормированииДокументов, ПараметрыФормы.СписокДокументовКОтправке);
		
	ИначеЕсли ПараметрыФормы.Свойство("ИдентификаторКонтрагента", ИдентификаторКонтрагента) Тогда
		ПараметрыФормы.Свойство("ВидЭД", ВидЭД);
		ПараметрыФормы.Свойство("ВерсияФормата", ВерсияФормата);
		
		ТекущиеНастройки = Новый Структура;
		ТекущиеНастройки.Вставить("ВидЭД", ВидЭД);
		ТекущиеНастройки.Вставить("ВерсияФормата", ВерсияФормата);
		ТекущиеНастройки.Вставить("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
		
		Предупреждения = ОбменСКонтрагентамиСлужебный.ПредупрежденияПоНастройкеОбменаНаДату(ТекущиеНастройки);
		
		Если Предупреждения.Количество() > 0 Тогда
			ТаблицаПредупреждений = Новый ТаблицаЗначений;
			ТаблицаПредупреждений.Колонки.Добавить("ТекстОшибки");
			ТаблицаПредупреждений.Колонки.Добавить("Заблокировать");
			
			Для Каждого ВидПредупреждение Из Предупреждения Цикл 
				
				Для Каждого Предупреждение Из ВидПредупреждение.Значение Цикл
					НоваяСтрока = ТаблицаПредупреждений.Добавить();
					НоваяСтрока.ТекстОшибки = ОбменСКонтрагентамиСлужебный.ПредставлениеПредупрежденияПоИмени(
						Предупреждение.Ключ, Предупреждение.Значение, НоваяСтрока.Заблокировать);
				КонецЦикла;
				
			КонецЦикла;
			
			СформироватьПредупреждения(ТаблицаПредупреждений);
			ТолькоПросмотр = ПодписатьОтправить = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяСтраница = Неопределено;
	ПараметрыФормы.Свойство("ТекущаяСтраница", ТекущаяСтраница);
	
	УправлениеФормой(ТекущаяСтраница);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОтправляемыхДокументов(ОшибкиПриФормированииДокументов, СписокДокументовКОтправке)
	
	ОбработанныеДокументы = Новый Соответствие;
	
	Если ЗначениеЗаполнено(ОшибкиПриФормированииДокументов) Тогда
	
		Для Каждого ОшибкиПриФормированииДокумента Из ОшибкиПриФормированииДокументов Цикл
			
			ДанныеДляОбработкиОшибок = ОшибкиПриФормированииДокумента.ДанныеДляОбработкиОшибок;
			
			Документ = ДанныеДляОбработкиОшибок.Документ;
			
			ДанныеДокумента = ДанныеОтправляемогоДокумента(Документ);
			
			ЗаполнитьДанныеОтправляемогоДокумента(ДанныеДокумента, Документ, ДанныеДляОбработкиОшибок);
			
			ЗаполнитьИнформациюОбОшибкахДокумента(ДанныеДокумента, ОшибкиПриФормированииДокумента);
			
			ОбработанныеДокументы.Вставить(Документ, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Документ Из СписокДокументовКОтправке Цикл
		
		Если ОбработанныеДокументы[Документ] <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыЭД = ОбменСКонтрагентамиСлужебный.ЗаполнитьПараметрыЭДПоИсточнику(Документ);
		
		ДанныеДокумента = ДанныеОтправляемогоДокумента(Документ);
		
		ЗаполнитьДанныеОтправляемогоДокумента(ДанныеДокумента, Документ, ПараметрыЭД);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеОтправляемогоДокумента(Документ)
	
	Отбор = Новый Структура("Документ", Документ);
	Найдено = ДокументыКОтправке.НайтиСтроки(Отбор);
	
	Если ЗначениеЗаполнено(Найдено) Тогда
		СтрокаТаблицы = Найдено[0];
	Иначе
		СтрокаТаблицы = ДокументыКОтправке.Добавить();
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеОтправляемогоДокумента(СтрокаТаблицы, Документ, ДанныеДокумента)
	
	СтрокаТаблицы.Документ             = Документ;
	СтрокаТаблицы.Организация          = ДанныеДокумента.Организация;
	СтрокаТаблицы.Контрагент           = ДанныеДокумента.Контрагент;
	СтрокаТаблицы.ВидЭД                = ДанныеДокумента.ВидЭД;
	СтрокаТаблицы.ГотовКОтправке       = Истина;
	СтрокаТаблицы.Результат            = "";
	СтрокаТаблицы.НастройкиСозданы     = Ложь;
	СтрокаТаблицы.НастройкиОтправки    = НСтр("ru = 'Не настроен'");
	СтрокаТаблицы.ЕстьОшибки           = Ложь;
	СтрокаТаблицы.ЕстьПредупреждения   = Ложь;
	СтрокаТаблицы.Обновление           = Ложь;
	СтрокаТаблицы.ДополнительныеПоля.Очистить();
	СтрокаТаблицы.ПредупрежденияПоИдентификатору.Очистить();
	СтрокаТаблицы.ПредупрежденияПоДокументу.Очистить();
	СтрокаТаблицы.ОшибкиЗаполнения.Очистить();
	СтрокаТаблицы.ОписаниеОшибок.Очистить();
	СтрокаТаблицы.ЭтоВнутреннийЭДО = ДанныеДокумента.ВидЭД = Перечисления.ВидыЭД.Внутренний;
	СтрокаТаблицы.ТребуетсяУказатьПодписантов = Ложь;
	
	Если СтрокаТаблицы.ЭтоВнутреннийЭДО Тогда
		МетаданныеДокумента = Документ.Метаданные();
		СтрокаТаблицы.ИдентификаторОбъектаУчета = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеДокумента);
		СтрокаТаблицы.ВидВнутреннегоДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДанныеДокумента, "ВидВнутреннегоДокумента");
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.ВидВнутреннегоДокумента) Тогда
			Настройки = ОбменСКонтрагентамиСлужебный.НастройкиВнутреннегоЭДО(
				СтрокаТаблицы.Организация, СтрокаТаблицы.ВидВнутреннегоДокумента);
			СтрокаТаблицы.ВидВнутреннегоДокумента = Настройки.ВидВнутреннегоДокумента;
		Иначе
			Настройки = ОбменСКонтрагентамиСлужебный.НастройкиОсновногоВидаВнутреннегоДокумента(
				СтрокаТаблицы.Документ, СтрокаТаблицы.Организация);
			Если ЗначениеЗаполнено(Настройки) 
				И Настройки.ЭтоОсновнойВидДокумента Тогда
				СтрокаТаблицы.ВидВнутреннегоДокумента = Настройки.ВидВнутреннегоДокумента;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицы.НастройкиСозданы = ЗначениеЗаполнено(Настройки);
		
		Если Не СтрокаТаблицы.НастройкиСозданы Тогда
			СтрокаТаблицы.НастройкиОтправки = СтрШаблон("%1 (%2)",
				НСтр("ru = 'Не настроен'"), МетаданныеДокумента.Синоним);
		ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.ВидВнутреннегоДокумента) Тогда
			СтрокаТаблицы.НастройкиОтправки = Строка(СтрокаТаблицы.ВидВнутреннегоДокумента);
		Иначе
			СтрокаТаблицы.НастройкиОтправки = СтрШаблон(НСтр("ru = 'Не указана основная печатная форма (%1)'"),
				МетаданныеДокумента.Синоним);
		КонецЕсли;
	Иначе
		
		НастройкиОбменаЭД = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Документ);
		Если Не ЗначениеЗаполнено(НастройкиОбменаЭД) Тогда
			Возврат;
		КонецЕсли;
		
		Шаблон = НСтр("ru = 'По договору ""%1""'");
		ТекстНастройки = ?(ЗначениеЗаполнено(НастройкиОбменаЭД.ДоговорКонтрагента),
			СтрШаблон(Шаблон, Строка(НастройкиОбменаЭД.ДоговорКонтрагента)), НСтр("ru = '<По всем договорам>'"));
		
		СтрокаТаблицы.ДоговорКонтрагента       = НастройкиОбменаЭД.ДоговорКонтрагента;
		СтрокаТаблицы.ИдентификаторКонтрагента = НастройкиОбменаЭД.ИдентификаторКонтрагента;
		СтрокаТаблицы.ИдентификаторОрганизации = НастройкиОбменаЭД.ИдентификаторОрганизации;
		СтрокаТаблицы.ВидЭД                    = НастройкиОбменаЭД.ВидЭД;
		СтрокаТаблицы.ВерсияФормата            = НастройкиОбменаЭД.ВерсияФормата;
		СтрокаТаблицы.НастройкиОтправки        = ТекстНастройки;
		СтрокаТаблицы.НастройкиСозданы         = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюОбОшибкахДокумента(СтрокаТаблицы, ОшибкиПриФормированииДокумента)
	
	ДанныеДляОбработкиОшибок = ОшибкиПриФормированииДокумента.ДанныеДляОбработкиОшибок;
	
	Если ТипЗнч(ДанныеДляОбработкиОшибок) = Тип("Структура")
			И ДанныеДляОбработкиОшибок.Свойство("ВерсияФормата") Тогда 
		СтрокаТаблицы.ВерсияФормата = ДанныеДляОбработкиОшибок.ВерсияФормата;
	КонецЕсли; 
	
	СтрокаТаблицы.ОписаниеОшибок.Добавить(ОшибкиПриФормированииДокумента);
	Для Каждого Элемент Из ОшибкиПриФормированииДокумента.ОшибкиЗаполнения Цикл
		Если ВРег(Элемент.Ключ) = ВРег("ПредупрежденияПоИдентификатору") Тогда
			
			Для Каждого СтрокаОшибки Из Элемент.Значение Цикл
				НоваяСтрока = СтрокаТаблицы.ПредупрежденияПоИдентификатору.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОшибки);
				НоваяСтрока.КраткийТекстОшибки   = СтрокаОшибки.ТекстОшибки;
			КонецЦикла;
			
		ИначеЕсли ВРег(Элемент.Ключ) = ВРег("ПредупрежденияПоДокументу") Тогда
			
			Для Каждого СтрокаОшибки Из Элемент.Значение Цикл
				НоваяСтрока = СтрокаТаблицы.ПредупрежденияПоДокументу.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОшибки);
				НоваяСтрока.КраткийТекстОшибки   = СтрокаОшибки.ТекстОшибки;
			КонецЦикла;
			
		ИначеЕсли ВРег(Элемент.Ключ) = ВРег("НастройкиОтправки") Тогда
			
			СтрокаТаблицы.ГотовКОтправке = Ложь;
			СтрокаТаблицы.НастройкиСозданы = Ложь;
			
		ИначеЕсли ВРег(Элемент.Ключ) = ВРег("ДополнительныеПоля") Тогда
			
			СтрокаТаблицы.ДополнительныеПоля.Добавить(Элемент.Значение);
			СтрокаТаблицы.ВидЭД = ОшибкиПриФормированииДокумента.ДанныеДляОбработкиОшибок.ВидЭД;
			
		ИначеЕсли ВРег(Элемент.Ключ) = ВРег("ОсновныеПоля") Тогда
			
			Для Каждого СтрокаОшибки Из Элемент.Значение Цикл
				
				НоваяСтрока = СтрокаТаблицы.ОшибкиЗаполнения.Добавить();
				
				Если ЗначениеЗаполнено(СтрокаОшибки.КлючСообщения) Тогда
					НоваяСтрока.КлючСообщения        = СтрокаОшибки.КлючСообщения;
				Иначе
					НоваяСтрока.КлючСообщения        = ДанныеДляОбработкиОшибок.Документ;
				КонецЕсли;
				
				НоваяСтрока.ТекстОшибки          = СтрокаОшибки.ТекстОшибки;
				НоваяСтрока.КраткийТекстОшибки   = СтрокаОшибки.ТекстОшибки;
				НоваяСтрока.ПутьКДаннымСообщения = СтрокаОшибки.ПутьКДаннымСообщения;
				НоваяСтрока.ОбщаяОшибка          = СписокДокументов.Найти(НоваяСтрока.КлючСообщения) = Неопределено;
			КонецЦикла;
			
		ИначеЕсли ВРег(Элемент.Ключ) = ВРег("НастройкиВнутреннегоЭДО") Тогда
			
			СтрокаТаблицы.ГотовКОтправке = Ложь;
			
		ИначеЕсли ВРег(Элемент.Ключ) = ВРег("Подписанты") Тогда
			
			СтрокаТаблицы.ТребуетсяУказатьПодписантов = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеОшибок      = Неопределено;
	КоличествоОшибок         = СтрокаТаблицы.ОшибкиЗаполнения.Количество()
		+ СтрокаТаблицы.ДополнительныеПоля.Количество() + СтрокаТаблицы.ТребуетсяУказатьПодписантов;
	КоличествоПредупреждений = СтрокаТаблицы.ПредупрежденияПоДокументу.Количество();
	
	Если КоличествоОшибок = 0 И КоличествоПредупреждений = 0 Тогда
		ПредставлениеОшибок = НСтр("ru = 'Отсутствуют'");
	ИначеЕсли (КоличествоОшибок > 1 Или КоличествоПредупреждений > 1)
		Или (КоличествоОшибок = 1 И КоличествоПредупреждений = 1) Тогда
		Ошибок = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 ошибка;;%1 ошибки;%1 ошибок;%1 ошибки'"), КоличествоОшибок);
		
		Предупреждений = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 предупреждение;;%1 предупреждений;%1 предупреждений;%1 предупреждения'"), КоличествоПредупреждений);
		
		МассивСтрок = Новый Массив;
		Если КоличествоПредупреждений > 0 И КоличествоОшибок > 0 Тогда 
			МассивСтрок.Добавить(Предупреждений);
			МассивСтрок.Добавить(Ошибок);
		ИначеЕсли КоличествоПредупреждений > 0 Тогда
			МассивСтрок.Добавить(Предупреждений);
		Иначе
			МассивСтрок.Добавить(Ошибок);
		КонецЕсли;
		
		ПредставлениеОшибок = СтрСоединить(МассивСтрок, НСтр("ru = '/'"));
		
	ИначеЕсли СтрокаТаблицы.ОшибкиЗаполнения.Количество() Тогда
		ПредставлениеОшибок = СтрокаТаблицы.ОшибкиЗаполнения[0].ТекстОшибки;
	ИначеЕсли СтрокаТаблицы.ПредупрежденияПоДокументу.Количество() Тогда
		ПредставлениеОшибок = СтрокаТаблицы.ПредупрежденияПоДокументу[0].ТекстОшибки;
	ИначеЕсли СтрокаТаблицы.ДополнительныеПоля.Количество() Тогда
		ПредставлениеОшибок = НСтр("ru = 'Не заполнены дополнительные поля'");
	ИначеЕсли СтрокаТаблицы.ТребуетсяУказатьПодписантов Тогда
		ПредставлениеОшибок = СтрокаТаблицы.ОписаниеОшибок[0].Значение.ОшибкиЗаполнения.Подписанты.ТекстОшибки;
	КонецЕсли;
	
	СтрокаТаблицы.Результат = ПредставлениеОшибок;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПоОрганизациям()
	
	ТаблицаГруппировки = ДокументыКОтправке.Выгрузить(,
		"Организация, Контрагент, ДоговорКонтрагента, ЭтоВнутреннийЭДО, ИдентификаторОбъектаУчета, ВидВнутреннегоДокумента");
	ТаблицаГруппировки.Свернуть("Организация, Контрагент, ДоговорКонтрагента, ЭтоВнутреннийЭДО,
		|ИдентификаторОбъектаУчета, ВидВнутреннегоДокумента");
	
	СписокПоОрганизациям.Очистить();
	
	Для Каждого СтрокаГруппировки Из ТаблицаГруппировки Цикл
		
		Отбор = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, ЭтоВнутреннийЭДО,
			|ИдентификаторОбъектаУчета, ВидВнутреннегоДокумента");
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаГруппировки);
		
		СтрокиТаблицы = ДокументыКОтправке.НайтиСтроки(Отбор);
		
		ТаблицаПредупреждений = Новый ТаблицаЗначений;
		ТаблицаПредупреждений.Колонки.Добавить("ТекстПредупреждения");
		
		ТаблицаНастройкиОтправки = Новый ТаблицаЗначений;
		ТаблицаНастройкиОтправки.Колонки.Добавить("НастройкиОтправки");
		
		НоваяСтрока = СписокПоОрганизациям.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаГруппировки);
		
		НоваяСтрока.ВсегоДокументов       = СтрокиТаблицы.Количество();
		НоваяСтрока.ЕстьНастройкиОтправки = Истина;
		
		ГотовКОтправке = 0;
		// Расчет значения полей "ЕстьНастройкиОтправки", "ЕстьПредупреждения", "Предупреждения", "ДокументовКОтправке", "Выбран"
		Для Каждого СтрокаТЧ Из СтрокиТаблицы Цикл
			
			НоваяСтрока.ЕстьНастройкиОтправки    = Мин(НоваяСтрока.ЕстьНастройкиОтправки, СтрокаТЧ.НастройкиСозданы);
			НоваяСтрока.ИдентификаторКонтрагента = СтрокаТЧ.ИдентификаторКонтрагента;
			
			ТаблицаНастройкиОтправки.Добавить().НастройкиОтправки = СтрокаТЧ.НастройкиОтправки;
			
			Если СтрокаТЧ.ГотовКОтправке Тогда
				НоваяСтрока.ДокументовКОтправке = НоваяСтрока.ДокументовКОтправке + 1;
				НоваяСтрока.ГотовКОтправке = Истина;
			КонецЕсли;
			
			Для Каждого Строка Из СтрокаТЧ.ПредупрежденияПоИдентификатору Цикл
				ТаблицаПредупреждений.Добавить().ТекстПредупреждения = Строка.КраткийТекстОшибки;
			КонецЦикла;
			
		КонецЦикла;
		
		ТаблицаПредупреждений.Свернуть("ТекстПредупреждения");
		НоваяСтрока.ЕстьПредупреждения = Истина;
		
		Если ТаблицаПредупреждений.Количество() = 1 Тогда
			
			НоваяСтрока.Предупреждения = ТаблицаПредупреждений[0].ТекстПредупреждения;
			
		ИначеЕсли ТаблицаПредупреждений.Количество() = 0 Тогда
			
			НоваяСтрока.Предупреждения = НСтр("ru = 'отсутствуют'");
			НоваяСтрока.ЕстьПредупреждения = Ложь;
			
		Иначе
			
			Предупреждений = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 предупреждение;;%1 предупреждения;%1 предупреждений;%1 предупреждения'"),
				ТаблицаПредупреждений.Количество());
				
			НоваяСтрока.Предупреждения = Предупреждений;
			
		КонецЕсли;
		
		// Расчет значения поля "НастройкиОтправки"
		ТаблицаНастройкиОтправки.Свернуть("НастройкиОтправки");
		
		Если ТаблицаНастройкиОтправки.Количество() = 1 Тогда
			НоваяСтрока.НастройкиОтправки = ТаблицаНастройкиОтправки[0].НастройкиОтправки;
		Иначе
			НоваяСтрока.НастройкиОтправки    = НСтр("ru = 'Расширенная настройка'");
			НоваяСтрока.РасширеннаяНастройка = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьЗаголовокГотовоКФормированию(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеДругихФорм

&НаКлиенте
Процедура ОткрытьРасшифровкуПредупреждений(ИдентификаторКонтрагента)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПроблемыПриФормированииДокументов",
		ПараметрыФормы, УникальныйИдентификатор, Новый УникальныйИдентификатор
		,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОбменаСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента, ФормироватьЭДПовторно = Ложь)
	
	КлючНастойки = ПолучитьКлючНастройкиОтправки(Организация, Контрагент, ДоговорКонтрагента);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ"         , КлючНастойки);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуНастройкиОтправкиЭДО(ПараметрыФормы, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМастерНачальнойНастройки(Организация, Контрагент, ВладелецФормы, Оповещение = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Получатель"              , Контрагент);
	ПараметрыФормы.Вставить("Отправитель"             , Организация);
	ПараметрыФормы.Вставить("ДокументыОснования"      , Новый Массив(СписокДокументов));
	
	Если ПодписатьОтправить Тогда
		Действие = "СформироватьУтвердитьПодписатьОтправить";
	Иначе
		Действие = "Сформировать";
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Действие"                , Действие);
	ПараметрыФормы.Вставить("ПредварительнаяНастройка", Истина);
	
	Если Оповещение = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьДокументПослеИзмененияНастроек", ЭтотОбъект);
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаОбменаСКонтрагентом",
		ПараметрыФормы, ВладелецФормы,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДокументПослеИзмененияНастроек(Результат, ДополнительныеНастройки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокПоОрганизациям.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЕстьНастройкиОтправки = Истина;
	ТекущиеДанные.ГотовКОтправке        = Истина;
	ТекущиеДанные.НастройкиОтправки     = НСтр("ru = '<По всем договорам>'");
	ТекущиеДанные.ДокументовКОтправке   = ТекущиеДанные.ВсегоДокументов;
	
	УстановитьЗаголовокГотовоКФормированию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДокументПослеИзмененияНастроекВнутреннегоЭДО(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокПоОрганизациям.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючНастройки = Результат.КлючНастройки;
	
	Если ЗначениеЗаполнено(Результат.Подписанты) Тогда
		Для Каждого Подписант Из Результат.Подписанты Цикл
			СтрокаТаблицы = СписокПодписантов.Добавить();
			СтрокаТаблицы.Подписант = Подписант;
			СтрокаТаблицы.Организация = КлючНастройки.Организация;
			СтрокаТаблицы.ВидВнутреннегоДокумента = КлючНастройки.ВидВнутреннегоДокумента;
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", ТекущиеДанные.Организация);
		Отбор.Вставить("ВидВнутреннегоДокумента", ТекущиеДанные.ВидВнутреннегоДокумента);
		Отбор.Вставить("ЭтоВнутреннийЭДО", ТекущиеДанные.ЭтоВнутреннийЭДО);
		НайденныеСтроки = ДокументыКОтправке.НайтиСтроки(Отбор);
		Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
			СтрокаТаблицы.ВидВнутреннегоДокумента = КлючНастройки.ВидВнутреннегоДокумента
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные.ЕстьНастройкиОтправки   = Истина;
	ТекущиеДанные.ГотовКОтправке          = Истина;
	ТекущиеДанные.НастройкиОтправки       = КлючНастройки.ВидВнутреннегоДокумента;
	ТекущиеДанные.ВидВнутреннегоДокумента = КлючНастройки.ВидВнутреннегоДокумента;
	ТекущиеДанные.ДокументовКОтправке     = ТекущиеДанные.ВсегоДокументов;
	
	УстановитьЗаголовокГотовоКФормированию(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуИсправленияОшибок(Документ, ОписаниеОшибок)
	
	АдресСведений = ПоместитьВоВременноеХранилище(ОписаниеОшибок);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокДокументовКОтправке", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Документ));
	ПараметрыФормы.Вставить("АдресСведенийОбОшибках"   , АдресСведений);
	
	Описание = Новый ОписаниеОповещения("ПроверкаПослеИсправленияОшибок", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПроблемыПриФормированииДокументов",
		ПараметрыФормы, УникальныйИдентификатор, Новый УникальныйИдентификатор
		,,,Описание, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПослеИсправленияОшибок(Результат, Контекст) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДокументовКОтправке.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Обновление = Истина;
	
	Оповещение = Новый ОписаниеОповещения("ПомощникУстраненияОшибокПослеФормированияЭД", ЭтотОбъект, ИндексТекущейСтраницы);
	
	ДополнительныеПараметры = Новый Структура;
	
	Если Результат.Свойство("ДополнительныеДанные") Тогда
		ДополнительныеПараметры.Вставить("ДополнительныеДанные", Результат.ДополнительныеДанные);
	КонецЕсли;
	
	Если Результат.Свойство("ПодписантыОбъектов") Тогда
		ДополнительныеПараметры.Вставить("ПодписантыОбъектов", Результат.ПодписантыОбъектов);
	КонецЕсли;
	
	Если Результат.Свойство("КлючиНастроекОбъектов") Тогда
		ДополнительныеПараметры.Вставить("КлючиНастроекОбъектов", Результат.КлючиНастроекОбъектов);
	КонецЕсли;
	
	НачатьФормированиеЭД(Результат.Документы, Оповещение, Ложь, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьДокументыКОтправке(Знач ДокументыКОтправке, Знач ГотовКОтправке)
	
	Отбор = Новый Структура("ГотовКОтправке", ГотовКОтправке);
	Таблица = ДокументыКОтправке.Выгрузить(Отбор, "Документ");
	Возврат Таблица.ВыгрузитьКолонку("Документ");
	
КонецФункции

&НаСервере
Функция ПараметрыДокументовКОтправке()
	
	Отбор = Новый Структура("ГотовКОтправке, ЕстьОшибки", Истина, Ложь);
	Таблица = ДокументыКОтправке.Выгрузить(Отбор, "Документ");
	МассивСсылок =  Таблица.ВыгрузитьКолонку("Документ");
	
	ПараметрыВнутреннихДокументов = ПараметрыФормированияВнутреннихДокументов(ЭтотОбъект, МассивСсылок);
	
	ПараметрыДокументов = Новый Структура;
	ПараметрыДокументов.Вставить("МассивСсылок", МассивСсылок);
	ПараметрыДокументов.Вставить("ПараметрыВнутреннихДокументов", ПараметрыВнутреннихДокументов);
	
	Возврат ПараметрыДокументов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыФормированияВнутреннихДокументов(Форма, МассивДокументов)
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("ПодписантыОбъектов", Новый Соответствие);
	ПараметрыФормирования.Вставить("КлючиНастроекОбъектов", Новый Соответствие);
	
	ПодписантыОбъектов = Новый Соответствие;
	
	Отбор = Новый Структура("Документ");
	ОтборПодписантов = Новый Структура("Организация, ВидВнутреннегоДокумента");
	
	Для Каждого Документ Из МассивДокументов Цикл
		
		Отбор.Документ = Документ;
		НайденныеСтроки = Форма.ДокументыКОтправке.НайтиСтроки(Отбор);
		Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
			СтрокаТаблицы = НайденныеСтроки[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если Не СтрокаТаблицы.ЭтоВнутреннийЭДО
			ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.ВидВнутреннегоДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		КлючНастройки = Новый Структура;
		КлючНастройки.Вставить("Организация", СтрокаТаблицы.Организация);
		КлючНастройки.Вставить("ВидВнутреннегоДокумента", СтрокаТаблицы.ВидВнутреннегоДокумента);
		
		ПараметрыФормирования.КлючиНастроекОбъектов.Вставить(СтрокаТаблицы.Документ, 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючНастройки));
		
		Если Не ЗначениеЗаполнено(Форма.СписокПодписантов) Тогда
			Продолжить;
		КонецЕсли;
		
		Подписанты = Новый Массив;
		ОтборПодписантов.Организация = СтрокаТаблицы.Организация;
		ОтборПодписантов.ВидВнутреннегоДокумента = СтрокаТаблицы.ВидВнутреннегоДокумента;
		НайденныеПодписанты = Форма.СписокПодписантов.НайтиСтроки(ОтборПодписантов);
		Для Каждого СтрокаПодписантов Из НайденныеПодписанты Цикл
			Подписанты.Добавить(СтрокаПодписантов.Подписант);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Подписанты) Тогда
			Продолжить;
		КонецЕсли;
		
		ПодписантыПоВидам = Новый Соответствие;
		ПодписантыПоВидам.Вставить(СтрокаТаблицы.ВидВнутреннегоДокумента, Подписанты);
		ПараметрыФормирования.ПодписантыОбъектов.Вставить(Документ, ПодписантыПоВидам);
		
	КонецЦикла;
	
	Возврат ПараметрыФормирования;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючНастройкиОтправки(Знач Организация, Знач Контрагент, Знач ДоговорКонтрагента)
	
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("Отправитель", Организация);
	ЗначениеКлюча.Вставить("Получатель" , Контрагент);
	ЗначениеКлюча.Вставить("Договор"    , ДоговорКонтрагента);
	
	Возврат РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.СоздатьКлючЗаписи(ЗначениеКлюча);
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеТекущегоЭтапа()
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодписанты Тогда
		
		Если Не ЗначениеЗаполнено(СписокПодписантов) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указаны подписанты электронного документа'"),,
				Элементы.СписокПодписантов.Имя,,Отказ);
			Возврат Не Отказ;
		КонецЕсли;
		
		ДублиПодписантов = Новый Соответствие;
		
		НомерСтроки = 1;
		Для Каждого СтрокаТаблицы Из СписокПодписантов Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Подписант) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Не указан подписант в строке %1'"), НомерСтроки),,
					СтрШаблон("СписокПодписантов[%1].Подписант", НомерСтроки - 1) , , Отказ);
			КонецЕсли;
			
			Если ДублиПодписантов[СтрокаТаблицы.Подписант] = Неопределено Тогда
				ДублиПодписантов.Вставить(СтрокаТаблицы.Подписант, Истина);
			Иначе
				ОбщегоНазначенияКлиент.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Обнаружен дубль подписанта ""%1"" в строке %2'"),
					СтрокаТаблицы.Подписант, НомерСтроки),,
					СтрШаблон("СписокПодписантов[%1].Подписант", НомерСтроки - 1) , , Отказ);
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

#КонецОбласти

#Область ФормированиеЭД

&НаКлиенте
Процедура НачатьФормированиеЭД(МассивДокументов, Оповещение, ОтображатьГруппуФормирования = Истина, ДополнительныеПараметры = Неопределено)
	
	Элементы.ДекорацияНадписьОжидание.Заголовок        = СформироватьЗаголовокОжидания(МассивДокументов.Количество());
	Если ОтображатьГруппуФормирования Тогда
		Элементы.ГруппаФормированиеЭД.Видимость            = Истина;
		Элементы.ГруппаВариантыОтображения.ТекущаяСтраница = Элементы.ГруппаФормированиеЭД;
	КонецЕсли;
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("МассивДокументов", МассивДокументов);
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормирования, ДополнительныеПараметры, Истина);
	КонецЕсли;
	
	Если Не ПараметрыФормирования.Свойство("ДополнительныеДанные") Тогда
		ПараметрыФормирования.Вставить("ДополнительныеДанные", ДанныеДополнительныхПолей());
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ДлительнаяОперация = ВыполнитьФормированиеЭД(УникальныйИдентификатор, ПараметрыФормирования);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьФормированиеЭД(Знач УникальныйИдентификатор, Знач ПараметрыФормирования)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование электронных документов'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.СформироватьЭлектронныеДокументыИВернутьСписокОшибок", ПараметрыФормирования, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОбщийПослеФормированияЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат.Статус <> "Выполнено" Тогда
		
		Если ЗначениеЗаполнено(Результат) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		КонецЕсли;
		
		УстановитьВариантРаботы(ЭтотОбъект, "ПоОрганизации");
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Результат.ОшибкиПриФормированииДокументов);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресСведенийОбОшибках", АдресРезультата);
	ПараметрыОткрытия.Вставить("СписокДокументовКОтправке", ДополнительныеПараметры);
	ПодготовитьФормуНаСервере(ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомощникУстраненияОшибокПослеФормированияЭД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Результат.Статус <> "Выполнено" Тогда
		
		Если ЗначениеЗаполнено(Результат) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.КраткоеПредставлениеОшибки);
		КонецЕсли;
		
		ПоказатьВыбранныйЛистПомощника(ЭтотОбъект, Неопределено);
		
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	АдресРезультата = ПоместитьВоВременноеХранилище(Результат.ОшибкиПриФормированииДокументов);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресСведенийОбОшибках", АдресРезультата);
	ПараметрыОткрытия.Вставить("СписокДокументовКОтправке", Результат.Документы);
	ПараметрыОткрытия.Вставить("ТекущаяСтраница", ДополнительныеПараметры);
	
	ПодготовитьФормуНаСервере(ПараметрыОткрытия);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДополнительнымиПолями

&НаСервере
Процедура ПодготовитьДополнительныеПоляДляЗаполнения(ДополнительныеПоля, ДанныеДокумента)
	
	МассивРеквизитовПоРазделам = Новый Массив;
	
	ТекстОшибки = Неопределено;
	
	НастройкаЗаполнения = ОбменСКонтрагентамиВнутренний.НастройкаЗаполненияДополнительныхПолей(ДанныеДокумента.Организация,
		ДанныеДокумента.Контрагент, ДанныеДокумента.ДоговорКонтрагента, ДанныеДокумента.ВидЭлектронногоДокумента,
		ДанныеДокумента.Формат, ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	РазделыДополнительныхПолей = ОбменСКонтрагентамиВнутренний.РазделыДополнительныхПолейФорматаЭлектронногоДокумента(
		ДанныеДокумента.ВидЭлектронногоДокумента, ДанныеДокумента.Формат);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Каждого Раздел Из РазделыДополнительныхПолей Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Раздел", Раздел.Имя);
		НастройкиПолей = НастройкаЗаполнения.НайтиСтроки(ПараметрыОтбора);
		Если НастройкиПолей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Раздел.Тип = ОбменСКонтрагентамиСлужебныйКлиентСервер.ТипРазделаДополнительныхПолейШапка() Тогда
			
			СоздатьРеквизитыДополнительныхПолейШапки(НастройкиПолей, ДобавляемыеРеквизиты);
			
		ИначеЕсли Раздел.Тип = ОбменСКонтрагентамиСлужебныйКлиентСервер.ТипРазделаДополнительныхПолейТаблица() Тогда
			
			СоздатьРеквизитыДополнительныхПолейТаблицы(НастройкиПолей, ДобавляемыеРеквизиты);
			
		КонецЕсли;
		
		ЗаполнитьИменаРеквизитовПоРазделу(МассивРеквизитовПоРазделам, НастройкиПолей, Раздел);
		
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() Тогда
		ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		ИменаРеквизитовПоРазделам = Новый ФиксированныйМассив(МассивРеквизитовПоРазделам);
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого Раздел Из РазделыДополнительныхПолей Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Раздел", Раздел.Имя);
		НастройкиПолей = НастройкаЗаполнения.НайтиСтроки(ПараметрыОтбора);
		Если НастройкиПолей.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеРаздела = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПоля.Данные, Раздел.Имя);
		ОшибкиРаздела = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПоля.Ошибки, Раздел.Имя);
		
		Если Раздел.Тип = ОбменСКонтрагентамиСлужебныйКлиентСервер.ТипРазделаДополнительныхПолейШапка() Тогда
			
			СоздатьЭлементыДополнительныхПолейШапки(НастройкиПолей, Раздел);
			
			ЗаполнитьДанныеДополнительныхПолейШапки(НастройкиПолей, ДанныеРаздела);
			
			ПоказатьОшибкиВычисленияДополнительныхПолейШапки(ОшибкиРаздела);
			
		ИначеЕсли Раздел.Тип = ОбменСКонтрагентамиСлужебныйКлиентСервер.ТипРазделаДополнительныхПолейТаблица() Тогда
			
			СоздатьЭлементыДополнительныхПолейТаблицы(НастройкиПолей, Раздел);
			
			ЗаполнитьДанныеДополнительныхПолейТаблицы(НастройкиПолей, ДанныеРаздела, Раздел);
			
			ПоказатьОшибкиВычисленияДополнительныхПолейТаблицы(ОшибкиРаздела, Раздел);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		СтрШаблон(НСтр("ru = '%1 требует заполнения дополнительных данных в электронных документах.'"), ДанныеДокумента.Контрагент)));
	
	Если ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена() Тогда
		
		МассивСтрок.Добавить(Символы.ПС);
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Заполните их вручную или настройте'")));
		
		МассивСтрок.Добавить(" ");
		
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'правила автоматического заполнения.'"),,,,
			"НастройкаЗаполненияДополнительныхПолей"));
		
	КонецЕсли;
	
	Элементы.НадписьТребование.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыДополнительныхПолейШапки(НастройкиПолей, ДобавляемыеРеквизиты)
	
	Для Каждого НастройкаПоля Из НастройкиПолей Цикл
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
			НастройкаПоля.Идентификатор, ТипРеквизитаПоВариантуЗаполнения(НастройкаПоля)));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыДополнительныхПолейТаблицы(НастройкиПолей, ДобавляемыеРеквизиты)
	
	ИмяТаблицыРаздела = "Таблица" + НастройкиПолей[0].Раздел;
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(
		ИмяТаблицыРаздела, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НомерСтроки", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)), ИмяТаблицыРаздела));
	
	Если НастройкиПолей[0].Раздел = "ТоварыУслуги" Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Номенклатура",
			Метаданные.ОпределяемыеТипы["НоменклатураБЭД"].Тип, ИмяТаблицыРаздела));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Характеристика",
			Метаданные.ОпределяемыеТипы["ХарактеристикаНоменклатурыБЭД"].Тип, ИмяТаблицыРаздела));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Упаковка",
			Метаданные.ОпределяемыеТипы["УпаковкаНоменклатурыБЭД"].Тип, ИмяТаблицыРаздела));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Сумма",
			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой)), ИмяТаблицыРаздела));
	КонецЕсли;
	
	Для Каждого НастройкаПоля Из НастройкиПолей Цикл
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(НастройкаПоля.Идентификатор,
			ТипРеквизитаПоВариантуЗаполнения(НастройкаПоля), ИмяТаблицыРаздела));
		Если НастройкаПоля.Заполнение = "ИзСписка" Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(НастройкаПоля.Идентификатор + "Представление",
				Новый ОписаниеТипов("Строка"), ИмяТаблицыРаздела));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТипРеквизитаПоВариантуЗаполнения(НастройкаПоля)
	
	Если НастройкаПоля.Заполнение = "ВручнуюДатой" Тогда
		ТипРеквизита = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ИначеЕсли НастройкаПоля.Заполнение = "ВручнуюЧислом" Тогда
		Если ЗначениеЗаполнено(НастройкаПоля.Значение) Тогда
			ПараметрыЧисла = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(
				СтрЗаменить(НастройкаПоля.Значение,"'",""));
			Длина = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЧисла, "ЧЦ", 15);
			Длина = ?(Длина = "", 0, Длина); 
			Точность = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЧисла, "ЧДЦ", 0);
			Точность = ?(Точность = "", 0, Точность);
			ТипРеквизита = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(Длина, Точность));
		Иначе
			ТипРеквизита = Новый ОписаниеТипов("Число");
		КонецЕсли;
	Иначе
		ТипРеквизита = Новый ОписаниеТипов("Строка");
	КонецЕсли;
	
	Возврат ТипРеквизита;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИменаРеквизитовПоРазделу(МассивРеквизитовПоРазделам, НастройкиПолей, Раздел)
	
	ИменаРеквизитов = Новый Массив;
	Для Каждого НастройкаПоля Из НастройкиПолей Цикл
		ИменаРеквизитов.Добавить(НастройкаПоля.Идентификатор);
	КонецЦикла;
	
	РеквизитыРаздела = Новый Структура;
	РеквизитыРаздела.Вставить("ИмяРаздела", Раздел.Имя);
	РеквизитыРаздела.Вставить("ТипРаздела", Раздел.Тип);
	РеквизитыРаздела.Вставить("ИменаРеквизитов", ИменаРеквизитов);
	
	МассивРеквизитовПоРазделам.Добавить(РеквизитыРаздела);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыДополнительныхПолейШапки(НастройкиПолей, Раздел)
	
	ГруппаРаздела = Элементы.Добавить("Группа" + Раздел.Имя, Тип("ГруппаФормы"), Элементы.ГруппаРазделовШапка);
	ГруппаРаздела.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРаздела.Заголовок = Раздел.Представление;
	ГруппаРаздела.ОтображатьЗаголовок = Ложь;
	ГруппаРаздела.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	
	ГруппаРазделаЛево = Элементы.Добавить("ГруппаЛево" + Раздел.Имя, Тип("ГруппаФормы"), ГруппаРаздела);
	ГруппаРазделаЛево.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРазделаЛево.ОтображатьЗаголовок = Ложь;
	ГруппаРазделаЛево.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ГруппаРазделаПраво = Элементы.Добавить("ГруппаПраво" + Раздел.Имя, Тип("ГруппаФормы"), ГруппаРаздела);
	ГруппаРазделаПраво.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаРазделаПраво.ОтображатьЗаголовок = Ложь;
	ГруппаРазделаПраво.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	КоличествоЭлементовВГруппе = Окр(НастройкиПолей.Количество() / 2);
	
	НомерЭлемента = 1;
	
	Для Каждого НастройкаПоля Из НастройкиПолей Цикл
		ГруппаЭлементов = ?(НомерЭлемента <= КоличествоЭлементовВГруппе, ГруппаРазделаЛево, ГруппаРазделаПраво);
		ИмяЭлемента = НастройкаПоля.Идентификатор;
		ЭлементГруппы = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаЭлементов);
		ЗаполнитьСвойстваПоляФормы(ЭлементГруппы, НастройкаПоля, ИмяЭлемента);
		
		НомерЭлемента = НомерЭлемента + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЭлементыДополнительныхПолейТаблицы(НастройкиПолей, Раздел)
	
	СтраницаРаздела = Элементы.Добавить("Страница" + Раздел.Имя, Тип("ГруппаФормы"), Элементы.ГруппаРазделовТаблица);
	СтраницаРаздела.Вид = ВидГруппыФормы.Страница;
	СтраницаРаздела.Заголовок = Раздел.Представление;
	СтраницаРаздела.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ИмяТаблицыРаздела = "Таблица" + Раздел.Имя;
	ТаблицаРаздела = Элементы.Добавить(ИмяТаблицыРаздела, Тип("ТаблицаФормы"), СтраницаРаздела);
	ТаблицаРаздела.ПутьКДанным = ИмяТаблицыРаздела;
	ТаблицаРаздела.ИзменятьСоставСтрок  = Ложь;
	ТаблицаРаздела.ИзменятьПорядокСтрок = Ложь;
	ТаблицаРаздела.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	
	КолонкаТаблицы = Элементы.Добавить(ИмяТаблицыРаздела + "НомерСтроки", Тип("ПолеФормы"), ТаблицаРаздела);
	КолонкаТаблицы.ПутьКДанным = ИмяТаблицыРаздела + ".НомерСтроки";
	КолонкаТаблицы.Заголовок = НСтр("ru = 'N'");
	
	Если Раздел.Имя = "ТоварыУслуги" Тогда
		ГруппаКолонок = Элементы.Добавить(ИмяТаблицыРаздела + "ГруппаНоменклатура", Тип("ГруппаФормы"), ТаблицаРаздела);
		ГруппаКолонок.Группировка = ГруппировкаКолонок.ВЯчейке;
		
		КолонкаТаблицы = Элементы.Добавить(ИмяТаблицыРаздела + "Номенклатура", Тип("ПолеФормы"), ГруппаКолонок);
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыРаздела + ".Номенклатура";
		
		КолонкаТаблицы = Элементы.Добавить(ИмяТаблицыРаздела + "Характеристика", Тип("ПолеФормы"), ГруппаКолонок);
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыРаздела + ".Характеристика";
		КолонкаТаблицы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		КолонкаТаблицы = Элементы.Добавить(ИмяТаблицыРаздела + "Упаковка", Тип("ПолеФормы"), ГруппаКолонок);
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыРаздела + ".Упаковка";
		КолонкаТаблицы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		КолонкаТаблицы = Элементы.Добавить(ИмяТаблицыРаздела + "Сумма", Тип("ПолеФормы"), ТаблицаРаздела);
		КолонкаТаблицы.ПутьКДанным = ИмяТаблицыРаздела + ".Сумма";
		КолонкаТаблицы.Ширина = 7;
	КонецЕсли;
	
	Для Каждого НастройкаПоля Из НастройкиПолей Цикл
		КолонкаТаблицы = Элементы.Добавить(НастройкаПоля.Идентификатор, Тип("ПолеФормы"), ТаблицаРаздела);
		ЗаполнитьСвойстваПоляФормы(КолонкаТаблицы, НастройкаПоля, ИмяТаблицыРаздела + "." + НастройкаПоля.Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДополнительныхПолейШапки(НастройкиПолей, ДанныеРаздела)
	
	Если Не ЗначениеЗаполнено(ДанныеРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеРаздела);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДополнительныхПолейТаблицы(НастройкиПолей, ДанныеРаздела, Раздел)
	
	Если Не ЗначениеЗаполнено(ДанныеРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицыРаздела = "Таблица" + Раздел.Имя;
	
	НомерСтроки = 1;
	
	Для Каждого ДанныеСтроки Из ДанныеРаздела Цикл
		
		НоваяСтрока = ЭтотОбъект[ИмяТаблицыРаздела].Добавить();
		
		ЗначениеСвойства = Неопределено;
		Если ДанныеСтроки.Свойство("КлючСтроки", ЗначениеСвойства) Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначениеСвойства);
		КонецЕсли;
		
		Если ДанныеСтроки.Свойство("ЗначенияПолей", ЗначениеСвойства) Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗначениеСвойства);
		КонецЕсли;
		
		НоваяСтрока.НомерСтроки = НомерСтроки;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВычисленияДополнительныхПолейШапки(ОшибкиРаздела)
	
	Если Не ЗначениеЗаполнено(ОшибкиРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Ошибка Из ОшибкиРаздела Цикл
		ОбщегоНазначения.СообщитьПользователю(Ошибка.Значение,,Ошибка.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиВычисленияДополнительныхПолейТаблицы(ОшибкиРаздела, Раздел)
	
	Если Не ЗначениеЗаполнено(ОшибкиРаздела) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицыРаздела = "Таблица" + Раздел.Имя;
	
	Для Каждого ОшибкиПоСтроке Из ОшибкиРаздела Цикл
		Для Каждого Ошибка Из ОшибкиПоСтроке.Значение Цикл
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТаблицыРаздела, ОшибкиПоСтроке.Ключ, Ошибка.Ключ);
			ОбщегоНазначения.СообщитьПользователю(Ошибка.Значение,,Поле);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваПоляФормы(Элемент, НастройкаПоля, ПутьКДанным)
	
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = ПутьКДанным;
	Если ЗначениеЗаполнено(НастройкаПоля.Представление) Тогда
		Элемент.Заголовок = НастройкаПоля.Представление;
	Иначе
		Элемент.Заголовок = НастройкаПоля.Имя;
	КонецЕсли;
	Элемент.Подсказка = НастройкаПоля.Описание;
	Элемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
	Если Не НастройкаПоля.Заполнение = "ВручнуюЧислом" Тогда 
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	Если НастройкаПоля.Заполнение = "ВручнуюДатой"
		ИЛИ НастройкаПоля.Заполнение = "ВручнуюЧислом" Тогда
		Элемент.Формат = НастройкаПоля.Значение;
		Элемент.ФорматРедактирования = НастройкаПоля.Значение;
	ИначеЕсли НастройкаПоля.Заполнение = "ИзСписка" Тогда
		Элемент.РежимВыбораИзСписка = Истина;
		Если ЗначениеЗаполнено(НастройкаПоля.Значение) Тогда
			Для Каждого Вариант Из НастройкаПоля.Значение Цикл
				ЗаполнитьЗначенияСвойств(Элемент.СписокВыбора.Добавить(), Вариант);
			КонецЦикла;
		КонецЕсли;
		Если СтрНайти(ПутьКДанным, ".") Тогда
			Элемент.УстановитьДействие("ОбработкаВыбора", "Подключаемый_ЭлементРазделаДополнительныхПолейОбработкаВыбора");
			УстановитьУсловноеОформлениеДляЭлементаСВыборомИзСписка(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеДляЭлементаСВыборомИзСписка(Элемент)
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.ПутьКДанным + "Представление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", ОтборЭлемента.ЛевоеЗначение);
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеДополнительныхПолей()
	
	ДополнительныеДанные = Новый Структура;
	
	Если ЗначениеЗаполнено(ИменаРеквизитовПоРазделам) Тогда 
		Для Каждого РеквизитыРаздела Из ИменаРеквизитовПоРазделам Цикл
			
			Если РеквизитыРаздела.ТипРаздела =
				ОбменСКонтрагентамиСлужебныйКлиентСервер.ТипРазделаДополнительныхПолейШапка() Тогда
				
				ДанныеРаздела = ДанныеДополнительныхПолейШапки(РеквизитыРаздела.ИменаРеквизитов);
				
			ИначеЕсли РеквизитыРаздела.ТипРаздела =
				ОбменСКонтрагентамиСлужебныйКлиентСервер.ТипРазделаДополнительныхПолейТаблица() Тогда
				
				ДанныеРаздела = ДанныеДополнительныхПолейТаблицы(РеквизитыРаздела.ИменаРеквизитов, РеквизитыРаздела.ИмяРаздела);
				
			КонецЕсли;
			
			ДополнительныеДанные.Вставить(РеквизитыРаздела.ИмяРаздела, ДанныеРаздела);
			
		КонецЦикла;
	КонецЕсли;
	Возврат ДополнительныеДанные;
	
КонецФункции

&НаКлиенте
Функция ДанныеДополнительныхПолейШапки(ИменаРеквизитов)
	
	ДанныеРаздела = Новый Структура;
	Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл		
		ДанныеРаздела.Вставить(ИмяРеквизита, ЭтотОбъект[ИмяРеквизита]);		
	КонецЦикла;
	
	Возврат ДанныеРаздела;
	
КонецФункции

&НаКлиенте
Функция ДанныеДополнительныхПолейТаблицы(ИменаРеквизитов, ИмяРаздела)
	
	ДанныеРаздела = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект["Таблица" + ИмяРаздела] Цикл
		
		ДанныеСтроки = Новый Структура;
		
		Если ИмяРаздела = "ТоварыУслуги" Тогда
			КлючСтроки = Новый Структура("Номенклатура, Характеристика, Упаковка, Сумма");
			ЗаполнитьЗначенияСвойств(КлючСтроки, СтрокаТаблицы);
			ДанныеСтроки.Вставить("КлючСтроки", КлючСтроки);
		КонецЕсли;
		
		ЗначенияПолей = Новый Структура;
		Для Каждого ИмяРеквизита Из ИменаРеквизитов Цикл
			ЗначенияПолей.Вставить(ИмяРеквизита, СтрокаТаблицы[ИмяРеквизита]);
		КонецЦикла;
		ДанныеСтроки.Вставить("ЗначенияПолей", ЗначенияПолей);
		
		ДанныеРаздела.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
	Возврат ДанныеРаздела;
	
КонецФункции

&НаКлиенте
Процедура ГруппаЭлементовПредупрежденийРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "НастройкаЗаполненияДополнительныхПолей" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", ДокументыКОтправке[0].Организация);
		ПараметрыФормы.Вставить("Контрагент", ДокументыКОтправке[0].Контрагент);
		ПараметрыФормы.Вставить("ДоговорКонтрагента", ДокументыКОтправке[0].ДоговорКонтрагента);
		ПараметрыФормы.Вставить("ВидЭлектронногоДокумента", ДокументыКОтправке[0].ВидЭД);
		ПараметрыФормы.Вставить("Формат", ДокументыКОтправке[0].ВерсияФормата);
		
		Оповещение = Новый ОписаниеОповещения("ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаЗаполненияДополнительныхПолей",
			ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Изменены настройки заполнения дополнительных полей.'"));
	МассивСтрок.Добавить(
		СтрШаблон(НСтр("ru = 'Для того чтобы сформировать документ с новыми настройками, нажмите ""%1"".'")
		,?(МассовыйРежим, НСтр("ru = 'Подписать и отправить'"), НСтр("ru = 'Готово'"))));
	
	Элементы.НадписьИзмененыНастройки.Заголовок = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Элементы.ГруппаИзмененыНастройки.Видимость = Истина;
	Элементы.ГруппаРазделовШапка.Доступность = Ложь;
	Элементы.ГруппаРазделовТаблица.Доступность = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
