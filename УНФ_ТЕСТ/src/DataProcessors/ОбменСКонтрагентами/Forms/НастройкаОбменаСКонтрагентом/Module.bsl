#Область ОписаниеПеременных

&НаКлиенте
Перем ОтправкаПриглашенияЧерезПомощник;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ТекстСообщения = НСтр("ru = 'Обмен с контрагентом не настроен. Выполните настройку в настольном приложении.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	ДокументОрганизация        = Неопределено;
	ДокументКонтрагент         = Неопределено;
	ДокументДоговорКонтрагента = Неопределено;
	ДокументыОснования         = Неопределено;
	
	Параметры.Свойство("Отправитель"              , Организация);
	Параметры.Свойство("Получатель"               , Контрагент);
	Параметры.Свойство("ДоговорКонтрагента"       , ДоговорКонтрагента);
	Параметры.Свойство("ПредварительнаяНастройка" , ПредварительнаяНастройка);
	Параметры.Свойство("НастройкаДокумента"       , НастройкаДокумента);
	Параметры.Свойство("ИдентификаторОтправителя" , ИдентификаторОтправителя);
	Параметры.Свойство("ИдентификаторПолучателя"  , ИдентификаторПолучателя);
	Параметры.Свойство("ВидЭД"                    , ВидЭД);
	Параметры.Свойство("Формат"                   , НастройкаФорматЭД);
	Параметры.Свойство("МаршрутПодписания"        , НастройкаПодписьПоМаршруту);
	Параметры.Свойство("ТребуетсяПодтверждение"   , НастройкаОжидатьОтветнуюПодпись);
	Параметры.Свойство("ТребуетсяИзвещение"       , НастройкаОжидатьИзвещение);
	Параметры.Свойство("ВыгружатьДопСведения"     , НастройкиВыгружатьДопСведения);
	Параметры.Свойство("ЗаполнениеКодаТовара"     , ЗаполнениеКодаТовара);
	Параметры.Свойство("ДокументыОснования"       , ДокументыОснования);
	Параметры.Свойство("ПрикладнойВидЭД"          , ПрикладнойВидЭД);
	Параметры.Свойство("ДополнительныеДанные"     , ДополнительныеДанные);
	Параметры.Свойство("ВыборУчетныхЗаписей"      , ВыборУчетныхЗаписей);
	Параметры.Свойство("Действие"                 , Действие);
	Параметры.Свойство("ИспользоватьУПД"          , НастройкиИспользоватьУПД);
	Параметры.Свойство("ИспользоватьУКД"          , НастройкиИспользоватьУКД);
	Параметры.Свойство("НастройкаРегламентаЭДО"   , НастройкаРегламентаЭДО);
	Параметры.Свойство("РасширенныйРежимНастройки", РасширенныйРежимНастройки);
	Параметры.Свойство("ПодтверждениеОбязательно" , ПодтверждениеОбязательно);
	Параметры.Свойство("СкрыватьНастройкиТранспорта"       , СкрыватьНастройкиТранспорта);
	Параметры.Свойство("ВерсияФорматаУстановленаВручную"   , НастройкиВерсияФорматаУстановленаВручную);
	
	ЕстьПравоНастройкиОбмена = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
	
	Если ПредварительнаяНастройка
			И Не ЕстьПравоНастройкиОбмена Тогда
				ШаблонСообщения = НСтр("ru = 'Не создано настроек отправки электронных документов между:
	                                   |Организация - %1.
	                                   |Контрагент - %2.
	                                   |Обратитесь к администратору, так как у Вас недостаточно прав для выполнения операции.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Организация, Контрагент);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		НастройкиДокументыОснование.ЗагрузитьЗначения(ДокументыОснования);
	КонецЕсли;
	
	Если ОбменСКонтрагентамиСлужебный.ИспользоватьЭлектроннуюПодписьВМоделиСервиса() Тогда
		ДоступенОблачныйСервис = Истина;
		ПользователюДоступенНеоблачныйСертификат = ПользователюДоступенНеоблачныйСертификат();
	КонецЕсли;
	
	УстановитьДоступность();
	ИнициализироватьПараметрыВыбора();
	ЗаполнитьПрограммыЭлектроннойПодписиИШифрования();
	
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор;
	
	ИнициализацияФормы();
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	ИнициализироватьНастройкиФормированияДокумента();
	
	Элементы.ПроверкаВыполнена.Видимость      = Ложь;
	Элементы.РедактированиеНастроек.Видимость = Ложь; 
	Элементы.ОжиданиеПроверки.Видимость       = Истина;
	
	// Начальная проверка
	Если Не ПредварительнаяНастройка Тогда
		ЗаполнитьФорматыЭД();
		ИнициализироватьНастройкиЗаполненияДополнительныхПолей();
		УстановитьВидимостьЕстьНастройкиЗаполненияДополнительныхПолей();
		Элементы.НастройкиВерсияФорматаУстановленаВручную.Видимость = Не НастройкаДокумента;
	КонецЕсли;
	
	Элементы.ГруппаДругиеНастройки.Видимость = НастройкаРегламентаЭДО И Параметры.ВидЭД <> Перечисления.ВидыЭД.ПроизвольныйЭД;
	
	УстановитьТекстОписанияНастройки(ЭтотОбъект);
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	СформироватьПредставлениеСтрокиСохраненияНастроек(ЭтотОбъект);
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, Элементы.ПанельКонтекстныхНовостей);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОпределитьУстановленныеПрограммы();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	КлючСохраненияПоложенияОкна = "";
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СертификатыКлючейЭлектроннойПодписиИШифрования"
		Или ИмяСобытия = "ОбновленСписокУчетныхЗаписей1СЭДО"
		Или ИмяСобытия = ИмяСобытияИзмененияКонтрагента() Тогда
		ВыполнитьПолнуюПроверкуНастройкиОбмена();
		
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеПриглашений"
		И ОтправкаПриглашенияЧерезПомощник <> Истина Тогда
		ПроверкаИдентификаторАбонента = Ложь;
		ВыполнитьПолнуюПроверкуНастройкиОбмена();
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Если ПредварительнаяНастройка Тогда
		
		МассивУдаляемыхРеквизитов.Добавить("ИдентификаторПолучателя");
		МассивУдаляемыхРеквизитов.Добавить("НастройкаПодписьПоМаршруту");
		
	КонецЕсли;
	
	Если ВыборУчетныхЗаписей Тогда
		МассивУдаляемыхРеквизитов.Добавить("НастройкаПодписьПоМаршруту");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивУдаляемыхРеквизитов);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьОшибкаРоумингаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СсылкаНаСтраницуТехПоддержки = ОбменСКонтрагентамиСлужебныйКлиент.СсылкаНаСтраницуТехПоддержки();
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаСтраницуТехПоддержки);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодробнееНажатие(Элемент)
	Строки = ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", НастройкаФорматЭД));
	
	Если Строки.Количество() > 0 Тогда
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Строки[0].СсылкаНаПриказОВведенииФормата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПолучателяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ИдентификаторЭДО = СокрЛП(Текст);
	
	Если Не ПустаяСтрока(ИдентификаторЭДО) Тогда
		Элементы.ИдентификаторПолучателя.СписокВыбора.Добавить(ИдентификаторЭДО);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПолучателяПриИзменении(Элемент)
	
	ИдентификаторПолучателя = СокрЛП(ИдентификаторПолучателя);
	
	Если ИдентификаторПолучателяКорректный(ЭтотОбъект) Тогда
		НастройкиИзменены = Истина;
		ПараметрыПриглашения = ПолучитьПараметрыПриглашения(ЭтотОбъект, Ложь);
		ОбновитьДанныеПриглашенияКонтрагента(ЭтотОбъект, ПараметрыПриглашения);
		ПодобратьФорматКонтрагента();
	КонецЕсли;
	
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФорматЭДПриИзменении(Элемент)
	
	ПриИзмененииФорматаВручную();
	ПриИзмененииФормата();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОтправителяПриИзменении(Элемент)
	НастройкиИзменены = Истина;
	ОбновитьДанныеПриглашенияКонтрагента(ЭтотОбъект);
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодписьПоМаршрутуПриИзменении(Элемент)
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОжидатьИзвещениеПриИзменении(Элемент)
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОжидатьОтветнуюПодписьПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
	Если Не НастройкаОжидатьОтветнуюПодпись Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросОжидатьОтветнуюПодписьЗавершение", ЭтотОбъект);
		ОбменСКонтрагентамиСлужебныйКлиент.ЗапроситьПодтверждениеОтключенияОжиданияОтветнойПодписи(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВыгружатьДопСведенияПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	
	Если Не НастройкиВыгружатьДопСведения Тогда
		
		ТекстВопроса = НСтр("ru = 'Отключение выгрузки дополнительных сведений может привести к проблемам при загрузке документа у получателя. Рекомендуется проконсультироваться у специалистов технической поддержки.
                             |Вы действительно хотите отключить выгрузку дополнительных сведений?'");
		
		Описание = Новый ОписаниеОповещения("ВопросВыгружатьДопСведенияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НадписьОбратитьВниманиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидЭД", Неопределено);
	ПараметрыОткрытия.Вставить("ВерсияФормата" , Неопределено);
	ПараметрыОткрытия.Вставить("ИдентификаторКонтрагента" , ИдентификаторПолучателя);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПроблемыПриФормированииДокументов", ПараметрыОткрытия, ЭтотОбъект
		,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеКодаТовараОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЕстьНастройкиЗаполненияДополнительныхПолейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Организация);
	ПараметрыФормы.Вставить("ВидЭлектронногоДокумента", ВидЭД);
	ПараметрыФормы.Вставить("Формат", НастройкаФорматЭД);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаЗаполненияДополнительныхПолей",
		ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеКодаТовараПриИзменении(Элемент)
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОтправителяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия    = Новый Структура;
	ЗначенияКлюча        = Новый Структура("ИдентификаторЭДО", ИдентификаторОтправителя);
	
	ПараметрыОткрытия.Вставить("Ключ", ПолучитьКлючРегистра("УчетныеЗаписиЭДО", ЗначенияКлюча));
	
	Описание = Новый ОписаниеОповещения("ОбновлениеФормы", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект,,,,Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФорматЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НастройкаФорматЭД Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкаДокумента
			И Не НастройкиВерсияФорматаУстановленаВручную Тогда
			
		СтандартнаяОбработка = Ложь;
		
		Описание = Новый ОписаниеОповещения("ПослеВопросаКорректировкиФормата", ЭтотОбъект, ВыбранноеЗначение);
	
		ПоказатьВопрос(Описание, НСтр("ru = 'В случае ручной корректировки будет отключен автоматический подбор формата, наиболее оптимального для обмена с выбранным контрагентом.
                           |Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВерсияФорматаУстановленаВручнуюПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьТребуетсяНастройкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ОтправитьПриглашение" Тогда
		ОткрытьПомощникОтправкиПриглашения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОжиданиеНастройкиРоумингаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ОткрытьТекущиеДелаЭДО" Тогда
		ОбменСКонтрагентамиКлиент.ОткрытьТекущиеДелаЭДО();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриглашениеКонтрагентаКОбменуПояснениеОжиданиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ОткрытьПриглашение" Тогда
		ОткрытьПриглашение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПриглашениеУжеОтправленоОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылка = "ОткрытьПриглашение" Тогда
		ОткрытьПриглашение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписьПоМаршрутуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ВыборМаршрутаЗавершение", ЭтотОбъект);
	
	Отбор = Новый Структура;
	
	ВозможныеСхемыПодписания = Новый Массив;
	ВозможныеСхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.ОднойДоступнойПодписью"));
	ВозможныеСхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.ПоПравилам"));
	
	Если ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПроизвольныйЭД") Тогда
		ВозможныеСхемыПодписания.Добавить(ПредопределенноеЗначение("Перечисление.СхемыПодписанияЭД.УказыватьПриСоздании"));
	КонецЕсли;
	
	Отбор.Вставить("СхемаПодписания", ВозможныеСхемыПодписания);
	Отбор.Вставить("ВидПодписи",ПредопределенноеЗначение("Перечисление.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная")); 
	
	ПараметрыОткрытияФормы = Новый Структура("Организация, Отбор", Организация, Отбор);

	ПараметрыОткрытияФормы.Вставить("ТекущаяСтрока", НастройкаПодписьПоМаршруту);
	ОткрытьФорму("Справочник.МаршрутыПодписания.Форма.ФормаВыбора", ПараметрыОткрытияФормы, ЭтотОбъект, 
		ЭтотОбъект.УникальныйИдентификатор,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьРасширение(Команда)
	
	Описание = Новый ОписаниеОповещения("ПослеУстановкиРасширения", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Истина, Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьCryptoPRO(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПовторнаяПроверкаПрограммКриптографии", ЭтотОбъект);
	ОбменСКонтрагентамиСлужебныйКлиент.УстановитьCryptoPRO(ОповещениеОЗавершении, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьVipNet(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПовторнаяПроверкаПрограммКриптографии", ЭтотОбъект);
	ОбменСКонтрагентамиСлужебныйКлиент.УстановитьVipNet(ОповещениеОЗавершении, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказатьСертификат(Команда)
	
	НастройкиОбмена = Новый Структура;
	НастройкиОбмена.Вставить("Организация", Организация);
	НастройкиОбмена.Вставить("СоздатьЗаявление", Истина);
	ЭлектроннаяПодписьСлужебныйКлиент.ДобавитьСертификат(НастройкиОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	НастройкиОбмена = Новый Структура;
	НастройкиОбмена.Вставить("Организация", Организация);
	НастройкиОбмена.Вставить("СкрытьЗаявление", Истина);
	ЭлектроннаяПодписьСлужебныйКлиент.ДобавитьСертификат(НастройкиОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрироваться(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Организация);
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыОткрытия,
			УникальныйИдентификатор,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат(Команда)
	
	УчетныеЗаписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторОтправителя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьСертификатЗавершение", ЭтотОбъект);
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Операция",        "Прочее");
	ПараметрыРегистрации.Вставить("ПрофилиНастроек", УчетныеЗаписи);
	ПараметрыРегистрации.Вставить("АдресТаблицыДанных");
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуПомощникаРегистрацииСертификатов(ПараметрыРегистрации, ЭтотОбъект,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиИдентификаторВручную(Команда)
	ПроверкаИдентификаторАбонента = Не ПроверкаИдентификаторАбонента;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашение(Команда)
	
	ОткрытьПомощникОтправкиПриглашения();
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаПодключить.Доступность = Ложь;
	Элементы.ФормаПодключить.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
	ОтправлятьПриглашение = ПроверкаОтправкаПриглашений <> "Отправлено" И ЗначениеЗаполнено(ИдентификаторПолучателя);
	Если НастройкаРегламентаЭДО И Не РасширенныйРежимНастройки Тогда
		ОтправлятьПриглашение = Ложь;
	КонецЕсли;
	
	Если ОтправлятьПриглашение Тогда
		
		Если ПустаяСтрока(КонтрагентИНН) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'У контрагента %1 не указан ИНН.'"), Контрагент);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, Контрагент);
			Элементы.ФормаПодключить.Доступность = Истина;
			Элементы.ФормаПодключить.Картинка    = Новый Картинка;
			Возврат;
		КонецЕсли;
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПоНастройкеЭДООповещение", ЭтотОбъект);
		Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторОтправителя);
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
		ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработчикОповещения, Массив,,, КонтекстОперации);
		Возврат;
		
	ИначеЕсли ПредварительнаяНастройка И ПроверкаОтправкаПриглашений = "Отправлено"
		И ЗначениеЗаполнено(ИдентификаторПолучателя)
		И ОтправкаПриглашенияЧерезПомощник <> Истина Тогда
		
		Отказ = Ложь;
		СоздатьНастройкиОтправкиЭДО(Организация, Контрагент, Неопределено, ИдентификаторОтправителя, ИдентификаторПолучателя, Отказ);
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось сохранить настройки обмена документами.
				|Подробнее см. в журнале регистрации'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗавершитьРаботуМастера(Истина, Неопределено);
КонецПроцедуры

&НаСервере
Функция ПолучитьДопПараметрыПоОбновленнымНастройкам(Настройки, ДополнительныеДанные)
	
	Если СохранитьНастройки И Не ВыборУчетныхЗаписей Тогда
		
		ЗаписатьОбновленныеНастройки(Настройки);
		
	КонецЕсли;
	
	МассивДокументов = Настройки.ДокументыОснования;
	
	НастройкиОбмена = Новый Соответствие;
	
	Для Каждого Документ Из МассивДокументов Цикл
		НастройкаОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Документ);
		
		Если НастройкаОбмена.ВидЭД = Настройки.ВидЭд Тогда
			ЗаполнитьЗначенияСвойств(НастройкаОбмена, Настройки,, "ВидЭД");
		КонецЕсли;
		
		НастройкиОбмена.Вставить(Документ, НастройкаОбмена);
	КонецЦикла;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НастройкиОбмена"      , НастройкиОбмена);
	ДопПараметры.Вставить("ДополнительныеДанные" , ДополнительныеДанные);
	ДопПараметры.Вставить("ИспользоватьПомощникУстраненияОшибок", Истина);
	
	Возврат ДопПараметры;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СоздатьНастройкиОтправкиЭДО(Организация, Контрагент, Договор, ИдентификаторОтправителя, ИдентификаторПолучателя, Отказ);
	
	ОбменСКонтрагентамиСлужебный.СоздатьНастройкиОтправкиЭДО(Организация, Контрагент, Договор,
		ИдентификаторОтправителя, ИдентификаторПолучателя, Отказ);
		
	ОбменСКонтрагентамиСлужебный.СоздатьНастройкиОтраженияВУчетеЭДО(Организация, Контрагент, "", "");
	
КонецПроцедуры

#Область ВизуальноеОформление

&НаСервере
Процедура ИнициализацияФормы()
	
	ПроверкаКриптопровайдерУстановлен = "Требуется";
	ПроверкаСертификатУстановлен      = "Требуется";
	ПроверкаРегистрацияУОператора     = "Требуется";
	ПроверкаПриглашенияКонтрагента    = "Требуется";
	ПроверкаОтправкаПриглашений       = "Требуется";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстОписанияНастройки(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ДекорацияОписаниеНастройки.Видимость = Ложь;
	МассивСтрок = Новый Массив;
	
	Если Форма.ПредварительнаяНастройка Тогда
		
		Шаблон = НСтр("ru = 'Обмен между %1 и %2 еще не настроен. Выполните этапы настройки, чтобы отправить документ.'");
		
		МассивСтрок.Добавить(СтрШаблон(Шаблон, Форма.Организация, Форма.Контрагент));
		
		Элементы.ДекорацияОписаниеНастройки.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ДекорацияОписаниеНастройки.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭтапыМастераНастройкиПодключения(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ДоступенОблачныйСервис И (Форма.ПроверкаКриптопровайдерУстановлен = "Требуется") Тогда
		Если Форма.ПользователюДоступенНеоблачныйСертификат Тогда
			Форма.ПроверкаКриптопровайдерУстановлен = "Облачный"
		Иначе
			Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено";
		КонецЕсли;
	КонецЕсли;

	ВсеГотовоКУстановкеСвязи = (Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено"
									ИЛИ Форма.ПроверкаКриптопровайдерУстановлен = "Облачный")
								И Форма.ПроверкаСертификатУстановлен  = "Выполнено"
								И Форма.ПроверкаРегистрацияУОператора = "Выполнено";
	
	Если Не Форма.ПредварительнаяНастройка
		И ВсеГотовоКУстановкеСвязи Тогда
		
		Элементы.ГруппаУстановкаКриптопровайдера.Видимость = Ложь;
		Элементы.ГруппаПолучениеСертификатов.Видимость = Ложь;
		
		Элементы.РегистрацияУОператораТребуется.Видимость = Ложь;
		Элементы.РегистрацияУОператораИндикаторВыполнено.Видимость = Ложь;
		Элементы.ПолучениеСертификатовВыполненоПояснениеРегистрация.Видимость = Ложь;
		Элементы.ГруппаВУчетнойЗаписиНетАктуальныхСертификатов.Видимость = Ложь;
		Элементы.РегистрацияУОператораВыполнено.Видимость = Не Форма.СкрыватьНастройкиТранспорта;
		
		Элементы.ИдентификаторОтправителя.Заголовок = НСтр("ru = 'Учетная запись организации'");
		
		Элементы.ГруппаПриглашенияКонтрагента.Доступность = Истина;
		Элементы.ГруппаДопПоляПриглашения.Видимость = Ложь;
		Элементы.УправлениеОтправкойПриглашений.Видимость = Ложь;
		Элементы.УчетнаяЗаписьАбонента.Видимость = Не Форма.СкрыватьНастройкиТранспорта;
		Элементы.ОтступУчетнаяЗаписьАбонента.Видимость = Ложь;
		
		Элементы.ИдентификаторПолучателя.Заголовок = НСтр("ru = 'Учетная запись контрагента'");
		Элементы.ГруппаНадписьИдентификаторПолучателяНекорректный.Ширина = 44;
	Иначе
	
		Элементы.РегистрацияУОператораТребуется.Видимость = Истина;
		Элементы.РегистрацияУОператораИндикаторВыполнено.Видимость = Истина;
		Элементы.ПолучениеСертификатовВыполненоПояснениеРегистрация.Видимость = Истина;
		Элементы.ГруппаВУчетнойЗаписиНетАктуальныхСертификатов.Видимость = Истина;
		
		Элементы.ИдентификаторОтправителя.Заголовок = НСтр("ru = 'Учетная запись'");
		
		Элементы.ГруппаДопПоляПриглашения.Видимость = Истина;
		Элементы.УправлениеОтправкойПриглашений.Видимость = Истина;
		Элементы.ОтступУчетнаяЗаписьАбонента.Видимость = Истина;
		
		Элементы.ИдентификаторПолучателя.Заголовок  = НСтр("ru = 'Учетная запись'");
		Элементы.ГруппаНадписьИдентификаторПолучателяНекорректный.Ширина = 36;
		
		// Проверка доступности криптопровайдеров
		Элементы.УстановкаКриптопровайдераТребуется.Видимость = Форма.ПроверкаКриптопровайдерУстановлен = "Требуется";
		Элементы.УстановкаКриптопровайдераВыполнено.Видимость = Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено";
		Элементы.УстановкаКриптопровайдераОшибка.Видимость    = Форма.ПроверкаКриптопровайдерУстановлен = "Ошибка";
		Элементы.ЕстьОблачныйКриптопровайдер.Видимость        = Форма.ПроверкаКриптопровайдерУстановлен = "Облачный";
		
		// Проверка доступности сертификатов
		Элементы.ГруппаПолучениеСертификатов.Доступность      = Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено" ИЛИ Форма.ПроверкаКриптопровайдерУстановлен = "Облачный";
		Элементы.ПолучениеСертификатовЭлектроннойПодписи.Шрифт = ?(Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено" ИЛИ Форма.ПроверкаКриптопровайдерУстановлен = "Облачный",
			Новый Шрифт(Элементы.ПолучениеСертификатовЭлектроннойПодписи.Шрифт,,,Истина), Новый Шрифт);
		Элементы.ПолучениеСертификатовТребуется.Видимость     = Форма.ПроверкаСертификатУстановлен      = "Требуется";
		Элементы.ПолучениеСертификатовВыполнено.Видимость     = Форма.ПроверкаСертификатУстановлен      = "Выполнено";
		Элементы.ПолучениеСертификатовОжидание.Видимость      = Форма.ПроверкаСертификатУстановлен      = "Ожидание";
		
		// Проверка регистрации у оператора ЭДО
		Элементы.ГруппаРегистрацияУОператора.Доступность      = Форма.ПроверкаСертификатУстановлен      = "Выполнено"
			Или Не Форма.ПредварительнаяНастройка;
		Элементы.ПолучениеСертификатовЭлектроннойПодписиВыполнено.Шрифт = ?(Форма.ПроверкаСертификатУстановлен  = "Выполнено", 
			Новый Шрифт(Элементы.ПолучениеСертификатовЭлектроннойПодписиВыполнено.Шрифт,,,Истина), Новый Шрифт);
		Элементы.РегистрацияУОператораТребуется.Видимость     = Форма.ПроверкаРегистрацияУОператора     = "Требуется";
		Элементы.РегистрацияУОператораВыполнено.Видимость     = Форма.ПроверкаРегистрацияУОператора     = "Выполнено"
			ИЛИ Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов";
		
		Элементы.ГруппаВУчетнойЗаписиНетАктуальныхСертификатов.Видимость =
			Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов";
		Если Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов" Тогда
			Элементы.РегистрацияУОператораИндикаторВыполнено.Картинка = БиблиотекаКартинок.ЖелтыйШарБЭД;
		Иначе
			Элементы.РегистрацияУОператораИндикаторВыполнено.Картинка = БиблиотекаКартинок.ЗеленыйШарБЭД;
		КонецЕсли;
		
		// Проверка идентификатора абонента ЭДО
		Элементы.ГруппаПриглашенияКонтрагента.Доступность     = Форма.ПроверкаРегистрацияУОператора  = "Выполнено";
		Элементы.ПриглашениеКонтрагентаКОбменуОписание.Шрифт = ?(Форма.ПроверкаРегистрацияУОператора = "Выполнено", 
			Новый Шрифт(Элементы.ПриглашениеКонтрагентаКОбменуОписание.Шрифт,,,Истина), Новый Шрифт);
		Элементы.ПриглашениеКонтрагентаТребуется.Видимость    = Форма.ПроверкаПриглашенияКонтрагента = "Требуется";
		Элементы.ПриглашениеКонтрагентаВыполнено.Видимость    = Форма.ПроверкаПриглашенияКонтрагента = "Выполнено";
		Элементы.ПриглашениеКонтрагентаОжидается.Видимость    = Форма.ПроверкаПриглашенияКонтрагента = "Ожидание";
		
		Элементы.ОтправитьПриглашение.Видимость = Форма.ПроверкаПриглашенияКонтрагента = "Требуется"
			И Не Форма.ПроверкаИдентификаторАбонента;
		Элементы.УправлениеОтправкойПриглашений.Видимость = Форма.ПроверкаПриглашенияКонтрагента <> "Выполнено"
			И Форма.ПредварительнаяНастройка И Форма.ПроверкаРегистрацияУОператора = "Выполнено";
		
		Элементы.ВвестиДанныеИдентификатораВручную.Пометка = Форма.ПроверкаИдентификаторАбонента;
		
		Элементы.УчетнаяЗаписьАбонента.Видимость = Форма.ПроверкаИдентификаторАбонента
			И Форма.ПредварительнаяНастройка И Форма.ПроверкаРегистрацияУОператора = "Выполнено";
		
	КонецЕсли;
	
	ИдентификаторПолучателяКорректный = ИдентификаторПолучателяКорректный(Форма);
	
	Если Элементы.УчетнаяЗаписьАбонента.Видимость Тогда
		ЭлементСписка = Элементы.ИдентификаторПолучателя.СписокВыбора.НайтиПоЗначению(Форма.ИдентификаторПолучателя);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.КартинкаСтатусПриглашения.Картинка = ЭлементСписка.Картинка;
		КонецЕсли;
		Элементы.НадписьИдентификаторПолучателяНекорректный.Видимость = ЗначениеЗаполнено(Форма.ИдентификаторПолучателя)
			И Не ИдентификаторПолучателяКорректный;
		Элементы.Подробнее.Видимость = ИдентификаторПолучателяКорректный;
	КонецЕсли;
	
	Элементы.ГруппаОписаниеРоуминга.Видимость = ВсеГотовоКУстановкеСвязи
		И (Форма.ПроверкаВозможностьРоуминга <> "Выполнено"
		И Форма.ПроверкаОтправкаПриглашений <> "Отправлено"
		Или Форма.ПредварительнаяНастройка И Форма.ПроверкаИдентификаторАбонента)
		И ИдентификаторПолучателяКорректный;
	
	Элементы.ГруппаТребуетсяНастройка.Видимость = Форма.ПроверкаВозможностьРоуминга = "Требуется"
		И Форма.ПроверкаОтправкаПриглашений <> "Отправлено";
	Элементы.ГруппаРоумингДоступен.Видимость    = Форма.ПроверкаВозможностьРоуминга = "Выполнено";
	Элементы.ГруппаОбратитьВнимание.Видимость   = Форма.ПроверкаВозможностьРоуминга = "Внимание";
	Элементы.ГруппаОшибкаРоуминга.Видимость     = Форма.ПроверкаВозможностьРоуминга = "Ошибка";
	
	Элементы.ГруппаПриглашениеУжеОтправлено.Видимость = Форма.ПроверкаОтправкаПриглашений = "Отправлено"
		И Форма.ПроверкаВозможностьРоуминга <> "Выполнено";
		
	Элементы.ГруппаОжиданиеНастройкиРоуминга.Видимость = Не Форма.ПредварительнаяНастройка
		И Форма.ПроверкаОтправкаПриглашений = "Отправлено"
		И Форма.ПроверкаВозможностьРоуминга = "Требуется";
		
	Элементы.ГруппаСохранитьНастройки.Видимость = Форма.ЕстьПравоНастройкиОбмена
		И Форма.НастройкаДокумента И Форма.НастройкиИзменены
		И (Форма.ПроверкаВозможностьРоуминга = "Выполнено"
			Или Форма.ПроверкаВозможностьРоуминга = "Внимание");
	
	// Управление кнопкой "Готово"
	Элементы.ФормаПодключить.Доступность = ВсеГотовоКУстановкеСвязи
		И (Форма.ПроверкаВозможностьРоуминга = "Выполнено"
			Или Форма.ПроверкаВозможностьРоуминга = "Внимание")
		И (Форма.НастройкиИзменены
			Или Форма.ПредварительнаяНастройка)
		И ИдентификаторПолучателяКорректный;
	
	// Видимость основной формы
	Элементы.ОжиданиеПроверки.Видимость  = Ложь;
	Элементы.ПроверкаВыполнена.Видимость = Истина;
	Если Не Форма.ПредварительнаяНастройка Тогда
		Элементы.РедактированиеНастроек.Видимость = Истина;
		Элементы.НастройкаФорматЭД.ТолькоПросмотр = Не Форма.ЕстьПравоНастройкиОбмена;
	КонецЕсли;
	
	Если Форма.СкрыватьНастройкиТранспорта Тогда
		Элементы.ГруппаРегламентЭДО.Показать();
	КонецЕсли;
	
	Если Форма.ВыборУчетныхЗаписей Тогда
		Элементы.РедактированиеНастроек.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаФорматЭД.Видимость = Элементы.НастройкаФорматЭД.СписокВыбора.Количество() > 0;
	Элементы.СохранитьНастройки.ОтображениеПодсказки = 
		?(Форма.НастройкаДокумента И Форма.НастройкиВерсияФорматаУстановленаВручную,
			ОтображениеПодсказки.ОтображатьСнизу, ОтображениеПодсказки.Нет);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыВыбора()
	
	// Параметры выбора маршрута.
	ВозможныеСхемыПодписания = Новый Массив;
	ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.ОднойДоступнойПодписью);
	ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.ПоПравилам);
	
	Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.УказыватьПриСоздании);
	КонецЕсли;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.СхемаПодписания", ВозможныеСхемыПодписания);
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрВыбора);
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.ВидПодписи", Перечисления.ВидыЭлектронныхПодписей.УсиленнаяКвалифицированная);
	МассивПараметров.Добавить(ПараметрВыбора); 	
	
	ВозможныеОрганизации = Новый Массив;
	ВозможныеОрганизации.Добавить(Организация);
	ВозможныеОрганизации.Добавить(Справочники.Организации.ПустаяСсылка());

	ПараметрВыбора = Новый ПараметрВыбора("Отбор.Организация", ВозможныеОрганизации);
	МассивПараметров.Добавить(ПараметрВыбора); 
	
	Элементы.ПодписьПоМаршруту.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПредставлениеРегламентаЭДО(Форма)
	
	МассивСтрок = Новый Массив;
	Текст       = "";
	
	Строки = Форма.ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", Форма.НастройкаФорматЭД));
	Если Строки.Количество() > 0 Тогда
		Форма.ЭтоСоставнойФормат = Строки[0].ВозможноИспользованиеУПД;
		МассивСтрок.Добавить(НСтр("ru = 'Регламент:'")+ " " + Строки[0].ПредставлениеФормата);
		МассивСтрок.Добавить(?(Форма.НастройкаОжидатьОтветнуюПодпись, НСтр("ru = 'с ответной подписью'"), НСтр("ru = 'без ответной подписи'")));
		Текст = СтрСоединить(МассивСтрок,", ");
	КонецЕсли;
	
	Форма.Элементы.ГруппаРегламентЭДО.ЗаголовокСвернутогоОтображения = Текст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПредставлениеСтрокиСохраненияНастроек(Форма)
	
	
	Шаблон  = НСтр("ru = 'Использовать эти настройки для последующих документов по контрагенту ""%1"" %2'");
	Договор = "";
	
	Если ЗначениеЗаполнено(Форма.ДоговорКонтрагента) Тогда 
		Договор = СтрШаблон(НСтр("ru = 'И договору ""%1""'"), Форма.ДоговорКонтрагента);
	КонецЕсли;
	
	Текст = СтрШаблон(Шаблон, Форма.Контрагент, Договор);
	Форма.Элементы.СохранитьНастройки.Заголовок = Текст;
	
КонецФункции

#КонецОбласти

#Область РаботаСКриптопровайдером

&НаСервере
Процедура ЗаполнитьПрограммыЭлектроннойПодписиИШифрования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы КАК ИмяПрограммы,
		|	ПрограммыЭлектроннойПодписиИШифрования.ТипПрограммы КАК ТипПрограммы,
		|	ПрограммыЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|ГДЕ
		|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы <> """"";
	
	Для Каждого Программа Из Запрос.Выполнить().Выгрузить() Цикл
		
		ОписаниеПрограммы = Новый Структура;
		ОписаниеПрограммы.Вставить("ИмяПрограммы" , Программа.ИмяПрограммы);
		ОписаниеПрограммы.Вставить("ТипПрограммы" , Программа.ТипПрограммы);
		ОписаниеПрограммы.Вставить("Ссылка"       , Программа.Ссылка);

		
		Программы.Добавить(ОписаниеПрограммы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьУстановленныеПрограммы()
	
	Описание = Новый ОписаниеОповещения("ПроверкаУстановкиРасширения", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСКриптографией(Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаУстановкиРасширения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		
		ПроверкаКриптопровайдерУстановлен = "Ошибка";
		
	Иначе
		
		Описание = Новый ОписаниеОповещения("ПроверкаПрограммКриптографииЗакончена", ЭтотОбъект);
		ЭлектроннаяПодписьКлиент.НайтиУстановленныеПрограммы(Описание, Программы.ВыгрузитьЗначения(), Истина);
		Возврат;
		
	КонецЕсли;
	
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПроверкаПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверкаКриптопровайдерУстановлен = "Требуется";
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Выполнено Тогда
		Элементы.УстановитьVipNet.Доступность = Ложь;
		Элементы.УстановитьCryptoPRO.Доступность = Ложь;
	КонецЕсли;
	ОпределитьУстановленныеПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПрограммКриптографииЗакончена(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверкаКриптопровайдерУстановлен = "Требуется";
	ЕстьОшибки = Истина;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеПрограммы = Новый Соответствие;
	
	Для Каждого Программа Из Программы Цикл
		
		ИспользуемыеПрограммы.Вставить(Программа.Значение.ИмяПрограммы, Программа.Значение);
		
	КонецЦикла;
	
	Для Каждого Программа Из Результат Цикл
		
		Если Не Программа.Установлена Тогда
			Продолжить;
		КонецЕсли;
		
		
		ПараметрыПрограммы = ИспользуемыеПрограммы.Получить(Программа.ИмяПрограммы);
		Если ПараметрыПрограммы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверкаКриптопровайдерУстановлен = "Выполнено";
		ЕстьОшибки = Ложь;
		Прервать;
		
	КонецЦикла;
	
	Если ЕстьОшибки И ПредварительнаяНастройка И Не ДоступенОблачныйСервис Тогда
		ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	Иначе
		ПодключитьОбработчикОжидания("ВыполнитьПолнуюПроверкуНастройкиОбмена", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОпределитьУстановленныеПрограммы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССертификатамиИУчетнымиЗаписями

&НаКлиенте
Процедура ВыполнитьПолнуюПроверкуНастройкиОбмена()
	
	Элементы.ПолучениеСертификатовИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	Элементы.РегистрацияУОператораИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация; 
	Элементы.ПриглашениеКонтрагентаКОбменуИндикаторВыполнения.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковСертификатовКлиента", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковСертификатовКлиента(ОтпечаткиСертификатов, ДополнительныеПараметры) Экспорт
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеДляНастройкиСвязиСКонтрагентомЗавершение", ЭтотОбъект);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОтпечаткиНаКлиенте"      , ОтпечаткиСертификатов);
	ПараметрыПроцедуры.Вставить("Организация"             , Организация);
	ПараметрыПроцедуры.Вставить("Контрагент"              , Контрагент);
	ПараметрыПроцедуры.Вставить("ИдентификаторОрганизации", ИдентификаторОтправителя);
	ПараметрыПроцедуры.Вставить("ИдентификаторКонтрагента", ИдентификаторПолучателя);
	ПараметрыПроцедуры.Вставить("ПриоритетПодключенные"   , Истина);
	
	ДлительнаяОперация = ПолучитьДанныеДляНастройкиСвязиСКонтрагентом(ПараметрыПроцедуры, УникальныйИдентификатор);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляНастройкиСвязиСКонтрагентом(Знач Параметры, Знач УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получить данные для настройки связи ЭДО'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.ПолучитьДанныеДляНастройкиСвязиСКонтрагентом", Параметры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеДляНастройкиСвязиСКонтрагентомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
			И Результат.Статус = "Выполнено" Тогда
			
			ОбработатьРезультатыНастройкиСвязиСКонтрагентом(Результат.АдресРезультата);
			
	ИначеЕсли Результат <> Неопределено
				И Результат.Статус = "Ошибка" Тогда
				
				ТекстОшибки = НСтр("ru = 'Во время получения данных для настройки связи с абонентом ЭДО произошла ошибка.
                                   |Подробнее см. в журнале регистрации.'");
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
				Элементы.ФормаПодключить.Доступность = Ложь;
	Элементы.ФормаПодключить.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
				
	КонецЕсли;
	
	Элементы.ПолучениеСертификатовИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СерыйШарБЭД;
	Элементы.РегистрацияУОператораИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СерыйШарБЭД; 
	Элементы.ПриглашениеКонтрагентаКОбменуИндикаторВыполнения.Картинка = БиблиотекаКартинок.СерыйШарБЭД;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатыНастройкиСвязиСКонтрагентом(АдресРезультата)
	
	СтруктураОтвет = ПолучитьИзВременногоХранилища(АдресРезультата);
		
	Если ТипЗнч(СтруктураОтвет) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОтпечаткиСертификатов = Неопределено;
	СтруктураОтвет.Свойство("ОтпечаткиСертификатов", ОтпечаткиСертификатов);
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Массив") Тогда
		Отпечатки = Новый ФиксированныйМассив(ОтпечаткиСертификатов);
	КонецЕсли;
	
	ПроверкаСертификатов = Неопределено;
	Если СтруктураОтвет.Свойство("ПроверкаСертификатов", ПроверкаСертификатов)
		И ПроверкаСертификатов <> Неопределено Тогда
		
		Если ПроверкаСертификатов.Результат Тогда
			ПроверкаСертификатУстановлен = "Выполнено";
		ИначеЕсли ПроверкаСертификатов.ОжидаетсяВыпускСертификата Тогда
			ПроверкаСертификатУстановлен = "Ожидание" ;
		Иначе
			ПроверкаСертификатУстановлен = "Требуется";
		КонецЕсли;
		
	КонецЕсли;
	
	СписокИдентификаторов = Неопределено;
	Если СтруктураОтвет.Свойство("СписокИдентификаторовОрганизации", СписокИдентификаторов)
		И СписокИдентификаторов <> Неопределено Тогда
		
		Если СписокИдентификаторов.Количество() = 0 Тогда
			ПроверкаРегистрацияУОператора = "Требуется";
		Иначе
			ПроверкаРегистрацияУОператора = "Выполнено";
			
			СписокВыбора = Элементы.ИдентификаторОтправителя.СписокВыбора;
			СписокВыбора.Очистить();
			Для Каждого ЭлементСписка Из СписокИдентификаторов Цикл
				ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), ЭлементСписка);
			КонецЦикла;
		КонецЕсли;
		
		ОбновитьСтатусРегистрацииСертификатовУчетныхЗаписей(ЭтотОбъект);
	КонецЕсли;
	
	ПараметрыСвязиИдентификаторов = Неопределено;
	Если СтруктураОтвет.Свойство("ПараметрыСвязиИдентификаторовЭДО", ПараметрыСвязиИдентификаторов)
		И ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов) Тогда
		
		КонтрагентИНН = ПараметрыСвязиИдентификаторов[0].КонтрагентИНН;
		ПараметрыПриглашения = НовыеПараметрыПриглашения(ПараметрыСвязиИдентификаторов);
		ОбновитьДанныеПриглашенияКонтрагента(ЭтотОбъект, ПараметрыПриглашения);
		
	КонецЕсли;
	
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеПриглашенияКонтрагента(Форма, ПараметрыПриглашения = Неопределено)
	
	Если ПараметрыПриглашения = Неопределено Тогда
		ПараметрыПриглашения = ПолучитьПараметрыПриглашения(Форма);
	КонецЕсли;
	
	Форма.ПолучательОператорЭДО            = ПараметрыПриглашения.ОператорКонтрагентаПредставление;
	Форма.ПолучательПодробноеОписание      = ПараметрыПриглашения.ИдентификаторКонтрагентаОписание;
	Форма.ПроверкаВозможностьРоуминга      = ПараметрыПриглашения.ПроверкаВозможностьРоуминга;
	Форма.ПроверкаОтправкаПриглашений      = ПараметрыПриглашения.ПроверкаОтправкаПриглашений;
	Форма.СтатусПриглашенияПредставление   = ПараметрыПриглашения.СтатусПриглашенияПредставление;
	Форма.НавигационнаяСсылкаНаПриглашение = ПараметрыПриглашения.НавигационнаяСсылкаНаПриглашение;
	
	Если ЗначениеЗаполнено(ПараметрыПриглашения.ИдентификаторОрганизации) Тогда
		Форма.ИдентификаторОтправителя = ПараметрыПриглашения.ИдентификаторОрганизации;
	КонецЕсли;
	
	СписокВыбора = Форма.Элементы.ИдентификаторПолучателя.СписокВыбора;
	Если ПараметрыПриглашения.СписокИдентификаторовКонтрагента <> Неопределено Тогда
		СписокВыбора.Очистить();
		Для Каждого ЭлементСписка Из ПараметрыПриглашения.СписокИдентификаторовКонтрагента Цикл
			ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), ЭлементСписка);
		КонецЦикла;
		
		Форма.ПроверкаПриглашенияКонтрагента = ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента;
		Форма.ПроверкаИдентификаторАбонента  = ПараметрыПриглашения.ПроверкаИдентификаторАбонента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыПриглашения.ИдентификаторКонтрагента) Тогда
		Форма.ИдентификаторПолучателя = ПараметрыПриглашения.ИдентификаторКонтрагента;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторПолучателя)
		И СписокВыбора.НайтиПоЗначению(Форма.ИдентификаторПолучателя) = Неопределено Тогда
		СписокВыбора.Добавить(Форма.ИдентификаторПолучателя);
	КонецЕсли;
	
	Если ПараметрыПриглашения.КартинкаСтатусаПодключения <> Неопределено
		И ЗначениеЗаполнено(ПараметрыПриглашения.ИдентификаторКонтрагента)
		И СписокВыбора.Количество() Тогда
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ПараметрыПриглашения.ИдентификаторКонтрагента);
		Если ЭлементСписка <> Неопределено Тогда
			ЭлементСписка.Картинка = ПараметрыПриглашения.КартинкаСтатусаПодключения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметрыПриглашения(Форма, ФормироватьСписокВыбора = Истина)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторОтправителя) Тогда
		МассивИдентификаторовОрганизации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.ИдентификаторОтправителя);
	Иначе
		МассивИдентификаторовОрганизации = Форма.Элементы.ИдентификаторОтправителя.СписокВыбора.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторПолучателя) Тогда
		МассивИдентификаторовКонтрагента = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Форма.ИдентификаторПолучателя);
	Иначе
		МассивИдентификаторовКонтрагента = Форма.Элементы.ИдентификаторПолучателя.СписокВыбора.ВыгрузитьЗначения();
	КонецЕсли;
	
	ДанныеУчастниковЭДО = Новый Структура;
	ДанныеУчастниковЭДО.Вставить("ИдентификаторыОрганизации", МассивИдентификаторовОрганизации);
	ДанныеУчастниковЭДО.Вставить("ИдентификаторыКонтрагента", МассивИдентификаторовКонтрагента);
	ДанныеУчастниковЭДО.Вставить("Контрагент", Форма.Контрагент);
	
	НастройкиЗаполнения = Новый Структура;
	НастройкиЗаполнения.Вставить("ФормироватьСписокВыбора", ФормироватьСписокВыбора);
	НастройкиЗаполнения.Вставить("ПриоритетПодключенные"  , Истина);
	
	ПараметрыПриглашения = ПолучитьПараметрыПриглашенияНаСервере(ДанныеУчастниковЭДО, НастройкиЗаполнения);
	
	Возврат ПараметрыПриглашения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыПриглашенияНаСервере(Знач ДанныеУчастниковЭДО, Знач НастройкиЗаполнения)
	
	ПараметрыСвязиИдентификаторов = Неопределено;
	Если ЗначениеЗаполнено(ДанныеУчастниковЭДО.Контрагент) Тогда
		ПараметрыСвязиИдентификаторов = ОбменСКонтрагентамиСлужебный.ПараметрыСвязиИдентификаторовЭДО(
			ДанныеУчастниковЭДО, НастройкиЗаполнения);
	КонецЕсли;
	
	ПараметрыПриглашения = НовыеПараметрыПриглашения(ПараметрыСвязиИдентификаторов);
	
	Возврат ПараметрыПриглашения;
	
КонецФункции

&НаСервереБезКонтекста
Функция НовыеПараметрыПриглашения(ПараметрыСвязиИдентификаторов = Неопределено)
	
	ПараметрыПриглашения = Новый Структура(
		"ПроверкаПриглашенияКонтрагента,
		|ПроверкаИдентификаторАбонента,
		|ПроверкаВозможностьРоуминга,
		|ПроверкаОтправкаПриглашений,
		|ИдентификаторОрганизации,
		|ИдентификаторКонтрагента,
		|ИдентификаторКонтрагентаОписание,
		|ОператорКонтрагентаПредставление,
		|СписокИдентификаторовКонтрагента,
		|СтатусПриглашенияПредставление,
		|КартинкаСтатусаПодключения,
		|НавигационнаяСсылкаНаПриглашение");
	
	Если Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов) Тогда
		Возврат ПараметрыПриглашения;
	КонецЕсли;
	
	СтрокаПараметровСвязи = ПараметрыСвязиИдентификаторов[0];
	ЗаполнитьЗначенияСвойств(ПараметрыПриглашения, СтрокаПараметровСвязи);
	ПараметрыПриглашения.СписокИдентификаторовКонтрагента = СтрокаПараметровСвязи.СписокВыбора;
	ПроверитьВозможностьРоуминга(ПараметрыПриглашения, СтрокаПараметровСвязи);
	
	Если СтрокаПараметровСвязи.ПриглашениеОтправлено Тогда
		ПараметрыПриглашения.ПроверкаОтправкаПриглашений = "Отправлено";
	Иначе
		ПараметрыПриглашения.ПроверкаОтправкаПриглашений = "Требуется";
	КонецЕсли;
	
	ПараметрыПриглашения.ПроверкаИдентификаторАбонента = ЗначениеЗаполнено(СтрокаПараметровСвязи.СписокВыбора);
	
	Если СтрокаПараметровСвязи.ОбязательнаяОтправкаЗаявкиНаРоуминг Тогда
		Если СтрокаПараметровСвязи.ПриглашениеОтправлено Тогда
			ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Ожидание";
		Иначе
			ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Требуется";
		КонецЕсли;
	ИначеЕсли СтрокаПараметровСвязи.ТребуетсяСоглашениеПриПервомПодключении Тогда
		Если СтрокаПараметровСвязи.ЗаявкаНаРоумингПринята Тогда
			ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Выполнено";
		ИначеЕсли СтрокаПараметровСвязи.ПриглашениеОтправлено Тогда
			ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Ожидание";
		Иначе
			ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Требуется";
		КонецЕсли;
	ИначеЕсли ПараметрыПриглашения.ПроверкаИдентификаторАбонента
		ИЛИ СтрокаПараметровСвязи.СтатусПодключения > 1 Тогда
		ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Выполнено";
		ПараметрыПриглашения.ПроверкаИдентификаторАбонента = Истина;
	ИначеЕсли СтрокаПараметровСвязи.СтатусПодключения = 1 Тогда
		ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Ожидание";
	ИначеЕсли СтрокаПараметровСвязи.СтатусПодключения = 0 Тогда
		ПараметрыПриглашения.ПроверкаПриглашенияКонтрагента = "Требуется";
	КонецЕсли;
	
	ПараметрыПриглашения.КартинкаСтатусаПодключения = ОбменСКонтрагентамиСлужебный.КартинкаСтатусаПодключения(
		СтрокаПараметровСвязи.СтатусПодключения);
	
	Возврат ПараметрыПриглашения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьВозможностьРоуминга(ПараметрыПриглашения, ПараметрыСвязиИдентификаторов)
	
	Если Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов.ИдентификаторОрганизации)
		Или Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов.ИдентификаторКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ДлинаИдентификатораКонтрагента = СтрДлина(ПараметрыСвязиИдентификаторов.ИдентификаторКонтрагента);
	Если Не ЗначениеЗаполнено(ПараметрыСвязиИдентификаторов.ОператорКонтрагента)
		ИЛИ ДлинаИдентификатораКонтрагента < 4 ИЛИ ДлинаИдентификатораКонтрагента > 46 Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Ошибка";
		
	ИначеЕсли ПараметрыСвязиИдентификаторов.СтатусПодключения > 1 Тогда
		
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Выполнено";
	ИначеЕсли ПараметрыСвязиИдентификаторов.СвязьДоступна = -1
		И Не ПараметрыСвязиИдентификаторов.ОператорыСовпадают Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Ошибка";
		
	ИначеЕсли ПараметрыСвязиИдентификаторов.СвязьДоступна = 0 Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Требуется";
		
	ИначеЕсли Не ПараметрыСвязиИдентификаторов.АбонентАктивен
		ИЛИ Не ПараметрыСвязиИдентификаторов.СертификатДействителен Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Внимание";
		
	ИначеЕсли ПараметрыСвязиИдентификаторов.ОбязательнаяОтправкаЗаявкиНаРоуминг Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Требуется";
		
	ИначеЕсли ПараметрыСвязиИдентификаторов.ТребуетсяСоглашениеПриПервомПодключении
		И Не ПараметрыСвязиИдентификаторов.ЗаявкаНаРоумингПринята Тогда
		
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Требуется";
		
	ИначеЕсли (ПараметрыСвязиИдентификаторов.ОператорыСовпадают
		ИЛИ ПараметрыСвязиИдентификаторов.СвязьДоступна = 1) Тогда
		ПараметрыПриглашения.ПроверкаВозможностьРоуминга = "Выполнено";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусРегистрацииСертификатовУчетныхЗаписей(Знач Форма)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторОтправителя) Тогда
		ЕстьДоступныеСертификатыУчетнойЗаписи = ЕстьДоступныеСертификатыУчетнойЗаписи(Форма.ИдентификаторОтправителя, Форма.Отпечатки);
		
		Если ЕстьДоступныеСертификатыУчетнойЗаписи Тогда
			Форма.ПроверкаРегистрацияУОператора = "Выполнено";
		Иначе
			Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДоступныеСертификатыУчетнойЗаписи(ИдентификаторУчетнойЗаписи, Отпечатки)
	
	Отбор = ОбменСКонтрагентамиСлужебный.НовыйОтборДоступныхСертификатов();
	Отбор.УчетнаяЗапись = ИдентификаторУчетнойЗаписи;
	ТаблицаДоступныхСертификатов = ОбменСКонтрагентамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(Отпечатки,
		Отбор);
	Возврат ТаблицаДоступныхСертификатов.Количество() > 0;
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьСертификатЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьСтатусРегистрацииСертификатовУчетныхЗаписей(ЭтотОбъект);
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникОтправкиПриглашения()
	
	ОтправкаПриглашенияЧерезПомощник = Истина;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторОрганизации" , ИдентификаторОтправителя);
	ПараметрыФормы.Вставить("ИдентификаторКонтрагента" , ИдентификаторПолучателя);
	ПараметрыФормы.Вставить("Контрагент"               , Контрагент);
	ПараметрыФормы.Вставить("Организация"              , Организация);
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаРезультатаПомощникаОтправкиПриглашения", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.Форма.ПомощникОтправкиПриглашения",
		ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаПомощникаОтправкиПриглашения(Результат, Контекст) Экспорт
	
	ОтправкаПриглашенияЧерезПомощник = Ложь;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОтправителя = Результат.ИдентификаторОрганизации;
	ИдентификаторПолучателя = Результат.ИдентификаторКонтрагента;
	
	ВыполнитьПолнуюПроверкуНастройкиОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПоНастройкеЭДООповещение(Результат, ДополнительныеПараметры) Экспорт
	
	КонтекстОперации = Неопределено;
	Если ТипЗнч(Результат) = Тип("Структура") И Не Результат.Свойство("КонтекстОперации", КонтекстОперации) Тогда
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	КонецЕсли;
		
	ОтказОтАутентификации = ОбменСКонтрагентамиСлужебныйКлиент.ПользовательОтказалсяОтАутентификации(Результат, ИдентификаторОтправителя);
	Если ЗначениеЗаполнено(Результат) И Не ОтказОтАутентификации Тогда
		
		Описание = Новый ОписаниеОповещения("ЗавершитьРаботуМастера", ЭтотОбъект);
		
		ДлительнаяОперация = НачатьВыполнениеДействийПоНастройкеЭДО(Результат.СоответствиеПрофилейИПараметровСертификатов, КонтекстОперации);
		
		Если ДлительнаяОперация = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
		
	Иначе
		
		Элементы.ФормаПодключить.Доступность = Истина;
		Элементы.ФормаПодключить.Картинка = Новый Картинка;
		
		Если ОтказОтАутентификации Тогда
			ТекстОшибки = НСтр("ru = 'Аутентификация в сервисе не была выполнена. Настройка обмена с контрагентом не была произведена.'");
		Иначе 
			ШаблонОшибки = НСтр("ru = 'При отправке приглашения возникли ошибки.
			|%1.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Контрагент);
		КонецЕсли;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеДействийПоНастройкеЭДО(СоответствиеПрофилейНастроекЭДОМаркерам, КонтекстОперации)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	ПараметрыПроцедуры = Новый Структура;
	
	Приглашения = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.НоваяТаблицаПриглашенийКОтправке();
	
	НоваяСтрока = Приглашения.Добавить();
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.Контрагент  = Контрагент;
	НоваяСтрока.ИдентификаторКонтрагента = ИдентификаторПолучателя;
	НоваяСтрока.ИдентификаторОрганизации = ИдентификаторОтправителя;
	НоваяСтрока.СоздаватьНастройкиЭДО    = (Не НастройкаДокумента) ИЛИ СохранитьНастройки;
	
	ПараметрыПроцедуры.Вставить("Приглашения"   , Приглашения);
	ПараметрыПроцедуры.Вставить("СписокМаркеров", СоответствиеПрофилейНастроекЭДОМаркерам);
	ПараметрыПроцедуры.Вставить("Организация"   , Организация);
	ПараметрыПроцедуры.Вставить("КонтекстОперации", КонтекстОперации);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОтправитьСписокПриглашений",
		ПараметрыПроцедуры, ПараметрыВыполнения);
		
КонецФункции

#Область РаботаСФорматамиЭД

&НаСервере
Процедура ЗаполнитьФорматыЭД()
	
	ДоступныеФорматыЭД = ОбменСКонтрагентамиСлужебный.ФорматыЭлектронныхДокументов();
	
	Отбор = Новый Структура("ВидЭлектронногоДокумента, Действует", ВидЭД, Истина);
	СписокПоддерживаемыхФорматыЭД = ДоступныеФорматыЭД.Скопировать(Отбор);
	
	Для Каждого ВыборкаДетальныеЗаписи Из СписокПоддерживаемыхФорматыЭД Цикл
		Элементы.НастройкаФорматЭД.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторФормата, ВыборкаДетальныеЗаписи.ПредставлениеФормата);
		
		ЗаполнитьЗначенияСвойств(ФорматыЭД.Добавить(), ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	ДанныеУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиЭДО.ДанныеУчетнойЗаписиЭДОПоИдентификатору(ИдентификаторОтправителя);
	
	Если ДанныеУчетнойЗаписи = Неопределено Тогда
		НастройкиРегламента = Неопределено;
	Иначе
		ТекущийВидЭД = ?(ЗначениеЗаполнено(ПрикладнойВидЭД), ПрикладнойВидЭД, ВидЭД);
		НастройкиРегламента = ОбменСКонтрагентамиСлужебный.НастройкиРегламентаЭДО(
			ТекущийВидЭД, НастройкаФорматЭД, ДанныеУчетнойЗаписи.СпособОбменаЭД);
	КонецЕсли;
		
	Если НастройкиРегламента <> Неопределено Тогда
		// Первичная инициализация - ориентируемся на переданный регламент
		Элементы.НастройкаОжидатьИзвещение.Доступность = НастройкиРегламента.РедактироватьИзвещение;
		Элементы.НастройкаОжидатьОтветнуюПодпись.Доступность = ?(НастройкаДокумента,
			Не ПодтверждениеОбязательно И НастройкиРегламента.РедактироватьОтветнуюПодпись,
			НастройкиРегламента.РедактироватьОтветнуюПодпись);
	Иначе
		// Изменение реквизитов в процессе работы формы
		Элементы.НастройкаОжидатьОтветнуюПодпись.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОжидатьОтветнуюПодписьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НастройкаОжидатьОтветнуюПодпись = Истина;
	КонецЕсли;
	
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыгружатьДопСведенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НастройкиВыгружатьДопСведения = Истина;
	КонецЕсли;
	
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПолейРегламентаЭДО()
	
	УстановитьДоступность();
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	ИнициализироватьНастройкиЗаполненияДополнительныхПолей();
	УстановитьВидимостьЕстьНастройкиЗаполненияДополнительныхПолей();
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ИнициализироватьНастройкиФормированияДокумента()
	
	ВариантыЗаполненияПолей = ОбменСКонтрагентамиВнутренний.ВариантыЗаполненияПолейЭлектронныхДокументов(
		ВидЭД, НастройкаФорматЭД);
	
	ЗначениеСвойства = Неопределено;
	Если ВариантыЗаполненияПолей.Свойство("ТоварКод", ЗначениеСвойства) Тогда
		Для Каждого Вариант Из ЗначениеСвойства Цикл
			ЗаполнитьЗначенияСвойств(Элементы.ЗаполнениеКодаТовара.СписокВыбора.Добавить(), Вариант);
		КонецЦикла;
	Иначе
		Элементы.ЗаполнениеКодаТовара.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНастройкиЗаполненияДополнительныхПолей = Результат;
	
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройкиЗаполненияДополнительныхПолей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗаполненияДополнительныхПолей.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента
		|ИЗ
		|	РегистрСведений.НастройкиЗаполненияДополнительныхПолей КАК НастройкиЗаполненияДополнительныхПолей
		|ГДЕ
		|	НастройкиЗаполненияДополнительныхПолей.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
		|	И НастройкиЗаполненияДополнительныхПолей.Формат = &Формат
		|	И НастройкиЗаполненияДополнительныхПолей.Получатель = &Получатель
		|	И НастройкиЗаполненияДополнительныхПолей.Договор = &Договор
		|	И НастройкиЗаполненияДополнительныхПолей.Отправитель = &Отправитель";
	
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭД);
	Запрос.УстановитьПараметр("Отправитель"             , Организация);
	Запрос.УстановитьПараметр("Получатель"              , Контрагент);
	Запрос.УстановитьПараметр("Договор"                 , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Формат"                  , НастройкаФорматЭД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьНастройкиЗаполненияДополнительныхПолей = НЕ РезультатЗапроса.Пустой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЕстьНастройкиЗаполненияДополнительныхПолей()

	Элементы.ЕстьНастройкиЗаполненияДополнительныхПолей.Видимость = 
			ОбменСКонтрагентамиВнутренний.РазделыДополнительныхПолейФорматаЭлектронногоДокумента(
				ВидЭД, НастройкаФорматЭД).Количество();


КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуМастера(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьОшибка = Ложь;
	СообщитьОбОшибке = Ложь;
	
	Если Результат = Истина Тогда
		// Пропускаем дальше. Приглашения отправлять Не надо.
	Иначе 
		
		ТекстОшибки = НСтр("ru = 'Во время отправки приглашения произошла ошибка.
                            |Подробнее см. в журнале регистрации.'");
		
		Если Результат = Неопределено Или Результат.Статус <> "Выполнено" Тогда
			ЕстьОшибка = Истина;
			СообщитьОбОшибке = Истина;
		Иначе
			РезультатПроцедуры = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			Если РезультатПроцедуры.КоличествоОтправлено = 0 Тогда
				ЕстьОшибка = Истина;
			КонецЕсли;
			Если Не ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьОшибки(РезультатПроцедуры.КонтекстОперации) Тогда
				СообщитьОбОшибке = Истина;
			КонецЕсли;
			ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(РезультатПроцедуры.КонтекстОперации);
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибка Тогда
		Если СообщитьОбОшибке Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		Элементы.ФормаПодключить.Доступность = Истина;
		Элементы.ФормаПодключить.Картинка    = Новый Картинка;
		Возврат;
	КонецЕсли;
	
	Если Результат <> Истина Тогда
		Оповестить("ОбновитьСостояниеПриглашений");
	КонецЕсли;
	
	Ответ = Новый Структура;
	ДопПараметры = Новый Структура;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Отправитель"              , Организация);
	ПараметрыПроцедуры.Вставить("Получатель"               , Контрагент);
	ПараметрыПроцедуры.Вставить("Договор"                  , ДоговорКонтрагента);
	ПараметрыПроцедуры.Вставить("ВидЭД"                    , ВидЭД);
	ПараметрыПроцедуры.Вставить("ПрикладнойВидЭД"          , ПрикладнойВидЭД);
	ПараметрыПроцедуры.Вставить("ВерсияФормата"            , НастройкаФорматЭД);
	ПараметрыПроцедуры.Вставить("МаршрутПодписания"        , НастройкаПодписьПоМаршруту);
	ПараметрыПроцедуры.Вставить("ТребуетсяПодтверждение"   , НастройкаОжидатьОтветнуюПодпись);
	ПараметрыПроцедуры.Вставить("ТребуетсяИзвещение"       , НастройкаОжидатьИзвещение);
	ПараметрыПроцедуры.Вставить("ИдентификаторКонтрагента" , ИдентификаторПолучателя);
	ПараметрыПроцедуры.Вставить("ИдентификаторОрганизации" , ИдентификаторОтправителя);
	ПараметрыПроцедуры.Вставить("СохранитьНастройки"       , СохранитьНастройки);
	ПараметрыПроцедуры.Вставить("ИспользоватьУПД"          , НастройкиИспользоватьУПД);
	ПараметрыПроцедуры.Вставить("ИспользоватьУКД"          , НастройкиИспользоватьУКД);
	ПараметрыПроцедуры.Вставить("ВыгружатьДополнительныеСведения", НастройкиВыгружатьДопСведения);
	ПараметрыПроцедуры.Вставить("ЗаполнениеКодаТовара"     , ЗаполнениеКодаТовара);
	ПараметрыПроцедуры.Вставить("ДокументыОснования"       , НастройкиДокументыОснование.ВыгрузитьЗначения());
	ПараметрыПроцедуры.Вставить("ВерсияФорматаУстановленаВручную" , НастройкиВерсияФорматаУстановленаВручную);
	ПараметрыПроцедуры.Вставить("ЭтоУПД" , ЭтоСоставнойФормат);

	Если НастройкаДокумента Тогда
		
		ПараметрыПроцедуры.Вставить("ВыгружатьДополнительныеСведения" , НастройкиВыгружатьДопСведения);
		
		ДопПараметры = ПолучитьДопПараметрыПоОбновленнымНастройкам(ПараметрыПроцедуры, ДополнительныеДанные);
		Ответ.Вставить("ДополнительныеДанные", ДопПараметры);
		Ответ.Вставить("НастройкиДокумента"  , ПараметрыПроцедуры);
	ИначеЕсли ВыборУчетныхЗаписей Тогда
		
		Ответ.Вставить("ИдентификаторКонтрагента" , ИдентификаторПолучателя);
		Ответ.Вставить("ИдентификаторОрганизации" , ИдентификаторОтправителя);
		
	ИначеЕсли НастройкаРегламентаЭДО Тогда
		
		Ответ.Вставить("НастройкиРегламента" , ПараметрыПроцедуры);
		
	КонецЕсли;
	
	Ответ.Вставить("Документы", ПараметрыПроцедуры.ДокументыОснования);
	Ответ.Вставить("Действие" , Действие);
	
	Закрыть(Ответ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОбновленныеНастройки(ПараметрыПроцедуры)
	
	РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ЗаписатьОбновленныеНастройки(ПараметрыПроцедуры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючРегистра(Знач НаименованиеРегистра, Знач ЗначенияКлюча)
	
	Возврат РегистрыСведений[НаименованиеРегистра].СоздатьКлючЗаписи(ЗначенияКлюча);

КонецФункции

&НаКлиенте
Процедура ОбновлениеФормы(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаКорректировкиФормата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НастройкаФорматЭД = ДополнительныеПараметры;
		НастройкиВерсияФорматаУстановленаВручную = Истина;
		НастройкаФорматЭДПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриглашение()
	
	Если ЗначениеЗаполнено(НавигационнаяСсылкаНаПриглашение) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(НавигационнаяСсылкаНаПриглашение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ИмяСобытияИзмененияКонтрагента()
	Возврат ОбменСКонтрагентамиСлужебныйКлиент.ИмяСобытияИзмененияОбъекта(Контрагент);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификаторПолучателяКорректный(Форма)
	
	Если Не ОбменСКонтрагентамиСлужебныйКлиентСервер.ИдентификаторУчастникаЭДОКорректный(Форма.ИдентификаторПолучателя)
		ИЛИ Форма.Элементы.ИдентификаторОтправителя.СписокВыбора.НайтиПоЗначению(
			Форма.ИдентификаторПолучателя) <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПользователюДоступенНеоблачныйСертификат()
	
	ИмяРеквизитаИННОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяНаличиеОбъектаРеквизитаВПрикладномРешении(
		"ИННОрганизации");
	
	ИННОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, ИмяРеквизитаИННОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СертификатыКлючейЭлектроннойПодписиИШифрования.Ссылка КАК Сертификат
	|ИЗ
	|	Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования КАК СертификатыКлючейЭлектроннойПодписиИШифрования
	|ГДЕ
	|	(СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &ТекущийПользователь
	|			ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &ПустойПользователь
	|			ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.Пользователь = &ПользовательНеУказан)
	|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.Отозван
	|	И (&ИмяРеквизитаИННОрганизации = &ТекущаяОрганизацияИНН
	|			ИЛИ СертификатыКлючейЭлектроннойПодписиИШифрования.Организация = &ПустаяОрганизация)
	|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.ПометкаУдаления
	|	И СертификатыКлючейЭлектроннойПодписиИШифрования.ДействителенДо > &ТекущаяДатаСеанса
	|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.СостояниеЗаявления = ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявленияНаВыпускСертификата.Отклонено)
	|	И НЕ СертификатыКлючейЭлектроннойПодписиИШифрования.Программа.ЭтоПрограммаОблачногоСервиса";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяРеквизитаИННОрганизации",
		"СертификатыКлючейЭлектроннойПодписиИШифрования.Организация." + ИмяРеквизитаИННОрганизации);
	
	Запрос.УстановитьПараметр("ТекущийПользователь"        , Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ПустойПользователь"         , Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПользовательНеУказан"       , Пользователи.СсылкаНеуказанногоПользователя());
	Запрос.УстановитьПараметр("ПустаяОрганизация"          , Метаданные.ОпределяемыеТипы.Организация.Тип.ПривестиЗначение());
	Запрос.УстановитьПараметр("ТекущаяОрганизацияИНН"      , ИННОрганизации);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса"          , ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой()
	
КонецФункции

&НаКлиенте
Процедура ВыборМаршрутаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) И НастройкаПодписьПоМаршруту <> Результат Тогда 
		НастройкаПодписьПоМаршруту = Результат;
		НастройкиИзменены = Истина;
		ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСФорматом

&НаКлиенте
Процедура ПриИзмененииФорматаВручную()
	
	НастройкиВерсияФорматаУстановленаВручную = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФормата()
	
	НастройкиИзменены = Истина;
	УстановитьЗначенияПолейРегламентаЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьФорматКонтрагента()
	
	Если НастройкиВерсияФорматаУстановленаВручную Тогда
		Возврат;
	КонецЕсли;
	
	ПодобратьФорматКонтрагентаНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьФорматКонтрагентаНаСервере()
	
	НовыйФормат = ФорматКонтрагентаПоВидуЭД(ИдентификаторПолучателя, ВидЭД);
	
	Если Не ЗначениеЗаполнено(НовыйФормат) Тогда
		НовыйФормат = ОбменСКонтрагентамиСлужебный.ФорматыПоУмолчанию(ВидЭД);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НовыйФормат) И НастройкаФорматЭД <> НовыйФормат Тогда
		НастройкаФорматЭД = НовыйФормат;
		ПриИзмененииФормата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФорматКонтрагентаПоВидуЭД(Знач ИдентификаторПолучателя, Знач ВидЭД)
	
	ПоддерживаемыеФорматы = ОбменСКонтрагентамиСлужебный.ПоддерживаемыеФорматыКонтрагента(ИдентификаторПолучателя);
	
	ОтборСтрок = Новый Структура("ИдентификаторКонтрагента,ВидЭД", ИдентификаторПолучателя, ВидЭД);
	НайденныеСтроки = ПоддерживаемыеФорматы.НайтиСтроки(ОтборСтрок);
	
	ФорматКонтрагента = Неопределено;
	
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ФорматКонтрагента = НайденныеСтроки[0].формат;
	КонецЕсли;
	
	Возврат ФорматКонтрагента;
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли; 
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораКонтрагента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораКонтрагента(Контрагент); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораУчетнойЗаписиОрганизации(Организация); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти