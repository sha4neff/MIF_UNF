////////////////////////////////////////////////////////////////////////////////
// Модуль формы Обработка.ОбменСКонтрагентами.ТекущиеДелаПоЭДО.
//
// Параметры формы:
//  * РежимОтображения - Строка - режим просмотра, устанавливаемый при открытии.
//                                Доступные значения: "ВсеДокументы", "МоиДокументы", "КИсполнению".
//  * Раздел - Строка - раздел, устанавливаемый при открытии. Доступные разделы: см. ИнициализироватьРазделы.
//  * ОтборУчетныхДокументов - Массив - отборы, которые нужно установить на прикладной документ в разделе "Создать". 
//                                      Элементы представлены структурой со свойствами:
//   ** Поле - Строка - путь к данным, на которые устанавливается отбор.
//   ** ВидСравнения - ВидСравненияКомпоновкиДанных - вид сравнения отбора.
//   ** Значение - Произвольный - значение отбора.
//  * ОтборВходящихДокументов - Массив - отборы, которые нужно установить на входящие электронные документы.
//                                       Структура элементов аналогична параметру ОтборУчетныхДокументов.
//  * ОтборИсходящихДокументов - Массив - отборы, которые нужно установить на исходящие электронные документы.
//                                       Структура элементов аналогична параметру ОтборУчетныхДокументов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте
Перем СписокВидовДокументов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЕстьПравоНаРаботуСТекущимиДеламиЭДО() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	РежимОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "РежимОтображения", "ВсеДокументы");
	ОбновитьЗаголовокФормы();
	
	ИспользоватьЭП = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьЭлектронныеПодписиЭД");
	ОтправлятьВходящиеДокументыНаУтверждение = ОбменСКонтрагентамиСлужебный.ОтправлятьВходящиеДокументыНаУтверждение();
	
	Если Не ОтправлятьВходящиеДокументыНаУтверждение Тогда
		Элементы.КомандаУтвердитьПодписатьИОтправить.Заголовок = НСтр("ru = 'Подписать и отправить'");
	КонецЕсли;
	
	ИнициализироватьДерево();
	
	ИнициализироватьРазделы();
	Элементы.ПанельСписков.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	АдресКэшаРасчетов = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(Параметры.РежимОтображения) Тогда
		УстановитьРежимОтображения(Параметры.РежимОтображения);
	КонецЕсли;
	
	ОбновитьВидимостьРазделовДерева(ДеревоДействий, РежимОтображения);
	
	Если НЕ ОбменСКонтрагентамиСлужебный.НемедленнаяОтправкаЭД() Тогда
		Элементы.КомандаПодписать.Заголовок = НСтр("ru = 'Подписать'");
		Элементы.КомандаСформироватьПодписатьИОтправить.Заголовок = НСтр("ru = 'Создать и подписать'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru = 'Создать, подписать и подготовить к отправке
			|выделенные электронные документы'");
		Если НЕ ИспользоватьЭП Тогда
			Элементы.КомандаСформироватьПодписатьИОтправить.Заголовок = НСтр("ru = 'Создать'");
			Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru = 'Создать и подготовить к отправке
				|выделенные электронные документы'");
		КонецЕсли;
	ИначеЕсли НЕ ИспользоватьЭП Тогда
		Элементы.КомандаСформироватьПодписатьИОтправить.Заголовок = НСтр("ru = 'Создать и отправить'");
		Команды.УтвердитьПодписатьИОтправить.Подсказка = НСтр("ru = 'Создать и отправить
			|выделенные электронные документы'");
	КонецЕсли;
	
	СформироватьТаблицуБыстрогоОтбора();
	Отборы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяФормы, "Отборы", Новый ТаблицаЗначений);
	Для Каждого ЭлементОтбора Из Отборы Цикл
		Для Каждого ЭлементКоллекции Из БыстрыеОтборы Цикл
			Если ЭлементОтбора.Параметр = ЭлементКоллекции.Параметр И ЭлементОтбора.Тип = ЭлементКоллекции.Тип Тогда
				ЗаполнитьЗначенияСвойств(ЭлементКоллекции, ЭлементОтбора);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НедоступныеКоманды = Новый СписокЗначений;
	Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоОбработкиЭД() Тогда
		
		НедоступныеКоманды.Добавить("ЗакрытьПринудительно");
		НедоступныеКоманды.Добавить("Перенаправить");
		НедоступныеКоманды.Добавить("УтвердитьЭД");
		НедоступныеКоманды.Добавить("ПодписатьВх");
		НедоступныеКоманды.Добавить("ПодписатьИсх");
		НедоступныеКоманды.Добавить("ОтклонитьПодписаниеИсх");
		НедоступныеКоманды.Добавить("Аннулировать");
		НедоступныеКоманды.Добавить("ОтклонитьАннулирование");
		НедоступныеКоманды.Добавить("ИзменитьДокумент");
		НедоступныеКоманды.Добавить("СформироватьЭД");
		НедоступныеКоманды.Добавить("ОтправитьПакеты");
		НедоступныеКоманды.Добавить("ОтменитьПакеты");
		НедоступныеКоманды.Добавить("РаспаковатьПакеты");
		НедоступныеКоманды.Добавить("УтвердитьПодписатьИОтправитьВх");
		НедоступныеКоманды.Добавить("УтвердитьПодписатьИОтправитьИсх");
		НедоступныеКоманды.Добавить("СформироватьПодписатьИОтправить");
		НедоступныеКоманды.Добавить("ОтправитьВАрхив");
		
	КонецЕсли;
	
	Если Не ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена() Тогда
		
		НедоступныеКоманды.Добавить("ВАрхивПриглашенияОтправить");
		НедоступныеКоманды.Добавить("ПринятьПриглашения");
		НедоступныеКоманды.Добавить("ОтправитьПриглашения");
		НедоступныеКоманды.Добавить("ОтклонитьПриглашения");
		НедоступныеКоманды.Добавить("ОтозватьПриглашение");
		
	КонецЕсли;
	
	Если Не ОбменСКонтрагентамиСлужебный.ЕстьПравоВыполненияОбмена() Тогда
		Элементы.ОтправитьИПолучитьЭД.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбменСКонтрагентамиПовтИсп.ИспользуютсяДоговорыКонтрагентов() Тогда
		Элементы.ВходящиеЭДДоговорКонтрагента.Видимость  = Ложь;
		Элементы.ИсходящиеЭДДоговорКонтрагента.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьОтборУчетныхДокументов(Параметры.ОтборУчетныхДокументов);
	УстановитьОтборВходящихДокументов(Параметры.ОтборВходящихДокументов);
	УстановитьОтборИсходящихДокументов(Параметры.ОтборИсходящихДокументов);
	
	НастроитьСпискиРазделов();
	Если ЗначениеЗаполнено(Параметры.Раздел) Тогда
		ПоказатьРазделСПроверкой(Параметры.Раздел);
	Иначе
		ПоказатьРаздел("Входящие");
	КонецЕсли;

	ОбновитьНавигациюПоРазделамНаСервере(Истина, Ложь);
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Сформировать.Дата", "СформироватьЭДДата");
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
	НавигационнаяСсылка = "e1cib/app/" + ЭтотОбъект.ИмяФормы;
	
	УстановитьСвойстваПереопределяемыхЭлементовФормы();
	
	ПриглашенияЭД.Параметры.УстановитьЗначениеПараметра("ПустойКонтрагент",
		Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.ПривестиЗначение());
		
	ПриглашенияЭД.Параметры.УстановитьЗначениеПараметра("ИНН", НСтр("ru = 'ИНН'"));
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОформитьИнтерфейсДляМобильногоКлиентаНаСервере();
	КонецЕсли;
	
	ВывестиВерсиюБЭД();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
																		Элементы.ПанельКонтекстныхНовостей, 
																		Элементы.ГруппаКонтекстныхПодсказок);
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеЭД"
		Или ИмяСобытия = "ОбновитьСостояниеПриглашений"
		Или ИмяСобытия = "ОбновитьТекущиеДелаЭДО" Тогда
		
		ОбновитьНавигациюПоРазделам();
		ОбновитьОтображениеДанных();
		РазблокироватьЗаблокированныеЭлементыФормы();
		
	ИначеЕсли ИмяСобытия = "ВыполнитьСинхронизацию" Тогда
		ЭтотОбъект.Активизировать();
		ОтправитьИПолучитьЭД(Неопределено);
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" И Источник = "ОтправлятьВходящиеДокументыНаУтверждение" Тогда
		
		#Если ВебКлиент Тогда
			ПриИзмененииУтвержденияВходящихДокументов();
			ОбновитьОтображениеДанных();
			РазблокироватьЗаблокированныеЭлементыФормы();
			РазвернутьУзлыДерева(ЭтотОбъект, "ДеревоДействий");
		#КонецЕсли
		
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПоказатьСкрытьБыстрыйПоиск();
	ОбменСКонтрагентамиСлужебныйКлиент.ЗаполнитьДанныеСлужбыПоддержки(ТелефонСлужбыПоддержки, АдресЭлектроннойПочтыСлужбыПоддержки);
	Элементы.Техподдержка.Заголовок = ОбменСКонтрагентамиСлужебныйКлиент.СформироватьГиперссылкуДляОбращенияВСлужбуПоддержки();
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД

КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	СохранитьОтборы(ИмяФормы, "Отборы", БыстрыеОтборы);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, "РежимОтображения", РежимОтображения);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьНавигациюПоРазделамНаСервере(Ложь, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияСсылкаИдеяНажатие(Элемент)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьСтраницуОпроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокОтбораНажатие(Элемент)
	
	ПоказатьБыстрыйПоиск = Не ПоказатьБыстрыйПоиск;
	ПоказатьСкрытьБыстрыйПоиск();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНоменклатураКонтрагентов

&НаКлиенте
Процедура НоменклатураКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьСопоставлениеНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = БыстрыеОтборы.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если СтрНайти(Поле.Имя, "Кнопка") <> 0 Тогда
		
		ИмяСписка = СписокРаздела(ТекущийРаздел);
		Список = ЭтотОбъект[ИмяСписка];
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Раздел", ТекущийРаздел);
		
		Оповещение = Новый ОписаниеОповещения("ПриОкончанииНастройкиСписка", ЭтотОбъект, ДопПараметры);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Настройка списка'"));
		ПараметрыФормы.Вставить("ИсточникДоступныхНастроек", Список.КомпоновщикНастроек.ПолучитьИсточникДоступныхНастроек());
		ПараметрыФормы.Вставить("Настройки", Список.КомпоновщикНастроек.Настройки);
		ПараметрыФормы.Вставить("ПользовательскиеНастройки", Список.КомпоновщикНастроек.ПользовательскиеНастройки);
		ПараметрыФормы.Вставить("ФиксированныеНастройки", Список.КомпоновщикНастроек.ФиксированныеНастройки);
		
		ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДОНастройкаСписка", 
			ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	Если Элемент.Родитель.ТекущиеДанные.Тип = "Число" Тогда
		ВведеноЧисло = Истина;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.Значение = Неопределено Тогда
		Элемент.ТекущиеДанные.Значение = 0;
	Иначе
		ВведеноЧисло = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ВведеноЧисло И Элемент.ТекущиеДанные.Тип = "Число" Тогда
		Элемент.ТекущиеДанные.Значение = Неопределено;
	КонецЕсли;
	
	ВведеноЧисло = Ложь;
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.БыстрыеОтборы.ТекущиеДанные.Параметр = "ВидЭД" Тогда
		Если СписокВидовДокументов = Неопределено Тогда
			СписокВидовДокументов = СписокВидовДокументовДляОтбора();
		КонецЕсли;
		ДанныеВыбора = СписокВидовДокументов;
		СтандартнаяОбработка = Ложь;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыеОтборыЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	Строка = Элементы.БыстрыеОтборы.ТекущиеДанные;
	Если Строка.Тип = "Строка" Тогда
		Строка.Значение = "";
	ИначеЕсли Строка.Тип = "Дата" Тогда
		Строка.Значение = Дата(1, 1, 1);
	ИначеЕсли Строка.Тип = "Число" Тогда
		Строка.Значение = Неопределено;
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник."+ НазваниеСправочникаКонтрагенты +".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
	ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
		Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
	ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
		Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
	КонецЕсли;
	Элементы.БыстрыеОтборы.ЗакончитьРедактированиеСтроки(Ложь);
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоДействий

&НаКлиенте
Процедура ДеревоДействийПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйРаздел = Элемент.ТекущиеДанные.Значение;
	Если НовыйРаздел <> ТекущийРаздел Тогда
		ПриИзмененииРаздела(НовыйРаздел);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВходящиеЭД

&НаКлиенте
Процедура ВходящиеЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	ЭтоКаталогТоваров = (ДанныеСтроки.ВидЭД = ПредопределенноеЗначение("Перечисление.ВидыЭД.КаталогТоваров"));
	
	Если Поле.Имя = "ВходящиеЭДОтражениеВУчете" И Не ЭтоКаталогТоваров Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ДанныеСтроки.КонтрольОтраженияВУчете = 0 Тогда
			
			ПоказатьСопоставлениеНоменклатуры();
			
		ИначеЕсли ДанныеСтроки.КонтрольОтраженияВУчете = 1 Тогда
			
			ПоказатьРасширенныйПодборДокументовУчета();
			
		Иначе
			
			ПоказатьУчетныйДокумент();
			
		КонецЕсли;
		
	Иначе
		СтандартнаяОбработка = Ложь;
		ОткрытьЭлектронныйДокументДляПросмотра(ДанныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВходящиеЭДПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Не ЗначениеЗаполнено(Строки) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЭлектронныхДокументов = Новый Массив;
	
	Для каждого ТекущаяСтрока Из Строки Цикл
		
		Данные = ТекущаяСтрока.Значение.Данные;
		НаборЭлектронныхДокументов.Добавить(Данные.ЭлектронныйДокумент);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основания.Ссылка КАК ЭлектронныйДокумент,
	|	Основания.ДокументОснование КАК УчетныйДокумент,
	|	Представление(Основания.ДокументОснование) КАК УчетныйДокументПредставление
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК Основания
	|ГДЕ
	|	Основания.Ссылка В (&НаборЭлектронныхДокументов)";
	Запрос.УстановитьПараметр("НаборЭлектронныхДокументов", НаборЭлектронныхДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	Основания = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ТекущаяСтрока Из Строки Цикл
		
		Данные = ТекущаяСтрока.Значение.Данные;
		
		ОтборЭД = Новый Структура("ЭлектронныйДокумент", Данные.ЭлектронныйДокумент);
		ОснованияЭД = Основания.НайтиСтроки(ОтборЭД);
		
		Если ЗначениеЗаполнено(ОснованияЭД) Тогда
			
			Представление = "";
			КоличествоОснований = ОснованияЭД.Количество();
			Если КоличествоОснований = 1 Тогда
				Представление = ОснованияЭД[0].УчетныйДокументПредставление;
			Иначе
				ШаблонСтроки = НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документов'");
				Представление = СтрокаСЧислом(ШаблонСтроки, КоличествоОснований, ВидЧисловогоЗначения.Количественное);
			КонецЕсли;
			Данные.ОтражениеВУчете = Представление;
			
		ИначеЕсли Данные.КонтрольОтраженияВУчете = 0 Тогда
			Данные.ОтражениеВУчете = НСтр("ru = 'Сопоставить номенклатуру'");
		ИначеЕсли Данные.КонтрольОтраженияВУчете = 1 Тогда
			Данные.ОтражениеВУчете = НСтр("ru = 'Создать документы'");
		ИначеЕсли Данные.КонтрольОтраженияВУчете = 2 Тогда
			Данные.ОтражениеВУчете = НСтр("ru = 'Провести документы'");
		Иначе
			Данные.ОтражениеВУчете = НСтр("ru = '<Не требуется>'");
		КонецЕсли;
		
		// Уточнение служебного типа ЭД.
		Если ЭтоИзвещениеПодтверждение(Данные.ТипЭД) Тогда
			Данные.ВидДокумента = СтрШаблон("%1 (%2)", Данные.ВидДокумента, Данные.ТипЭД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящиеЭДОбработкаЗапросаОбновления()
	
	ОбновитьНавигациюПоРазделамНаСервере();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсходящиеЭД

&НаКлиенте
Процедура ИсходящиеЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИсходящиеЭДОтражениеВУчете" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьУчетныйДокумент("ИсходящиеЭД");
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		ОткрытьЭлектронныйДокументДляПросмотра(ДанныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИсходящиеЭДПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Не ЗначениеЗаполнено(Строки) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЭлектронныхДокументов = Новый Массив;
	
	Для каждого ТекущаяСтрока Из Строки Цикл
		
		Данные = ТекущаяСтрока.Значение.Данные;
		НаборЭлектронныхДокументов.Добавить(Данные.ЭлектронныйДокумент);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основания.Ссылка КАК ЭлектронныйДокумент,
	|	Основания.ДокументОснование КАК УчетныйДокумент,
	|	Представление(Основания.ДокументОснование) КАК УчетныйДокументПредставление
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК Основания
	|ГДЕ
	|	Основания.Ссылка В (&НаборЭлектронныхДокументов)";
	Запрос.УстановитьПараметр("НаборЭлектронныхДокументов", НаборЭлектронныхДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	Основания = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для каждого ТекущаяСтрока Из Строки Цикл
		
		Данные = ТекущаяСтрока.Значение.Данные;
		
		ОтборЭД = Новый Структура("ЭлектронныйДокумент", Данные.ЭлектронныйДокумент);
		ОснованияЭД = Основания.НайтиСтроки(ОтборЭД);
		
		Если ЗначениеЗаполнено(ОснованияЭД) Тогда
			
			Представление = "";
			КоличествоОснований = ОснованияЭД.Количество();
			Если КоличествоОснований = 1 Тогда
				Представление = ОснованияЭД[0].УчетныйДокументПредставление;
			Иначе
				ШаблонСтроки = НСтр("ru = ';%1 документ;;%1 документа;%1 документов;%1 документов'");
				Представление = СтрокаСЧислом(ШаблонСтроки, КоличествоОснований, ВидЧисловогоЗначения.Количественное);
			КонецЕсли;
			Данные.ОтражениеВУчете = Представление;
		
		КонецЕсли;
		
		// Уточнение служебного типа ЭД.
		Если ЭтоИзвещениеПодтверждение(Данные.ТипЭД) Тогда
			Данные.ВидДокумента = СтрШаблон("%1 (%2)", Данные.ВидДокумента, Данные.ТипЭД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходящиеЭДОбработкаЗапросаОбновления()
	
	ОбновитьНавигациюПоРазделамНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСформироватьЭД

&НаКлиенте
Процедура СформироватьЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭДПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ПоказатьЗначение(, Элемент.ТекущиеДанные.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОзнакомитьсяЭД

&НаКлиенте
Процедура ОзнакомитьсяЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Данные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	ПоказатьЗначение(, Данные.ЭлектронныйДокумент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОзнакомитьсяЭДОбработкаЗапросаОбновления()

	ОбновитьНавигациюПоРазделамНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОшибкиЭД

&НаКлиенте
Процедура ОшибкиЭДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Данные = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	ПоказатьЗначение(, Данные.ЭлектронныйДокумент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПриглашенияОтправитьВАрхив(Команда)
	
	Если Элементы.ПриглашенияЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаОтправитьПриглашенияВАрхив.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаОтправитьПриглашенияВАрхив");
		ПодключитьОбработчикОжидания("ВыполнитьОтправкуПриглашенийВАрхив", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимПросмотра(Команда)
	
	ПараметрыФормы = Новый Структура("РежимОтображения", РежимОтображения);
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРежимПросмотраОкончание", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДОВыборРежимаПросмотра", ПараметрыФормы, ЭтотОбъект, 
		УникальныйИдентификатор,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНавигациюПоРазделам();
	РазблокироватьЗаблокированныеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИПолучитьЭД(Команда)
	
	Элементы.ОтправитьИПолучитьЭД.Доступность = Ложь;
	#Если МобильныйКлиент Тогда
		Элементы.ОтправитьИПолучитьЭД.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	#КонецЕсли
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьИПолучитьЭДЗавершение", ЭтотОбъект);
	КонтекстКлиент = Новый Структура;
	КонтекстКлиент.Вставить("ИдентификаторФормыВладельца", УникальныйИдентификатор);
	КонтекстКлиент.Вставить("ВыводитьСообщения", Истина);
	КонтекстКлиент.Вставить("ФормаВладелец", ЭтаФорма);
	ОбменСКонтрагентамиСлужебныйКлиент.НачатьОтправкуПолучениеЭлектронныхДокументов(Оповещение, КонтекстКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДокумент(Команда)
	
	Если Элементы.СформироватьЭД.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(, Элементы.СформироватьЭД.ТекущиеДанные.Документ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтмененПакета(Команда)
	
	УстановитьСтатусОтменен(Элементы.ПакетыЭД.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Распаковать(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.РаспаковатьПакетыЭДНаКлиенте(Элементы.ПакетыЭД.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодписатьИОтправить(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.СформироватьЭД.ВыделенныеСтроки);
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьУтвердитьПодписатьОтправить");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЭД(Команда)
	
	МассивДокументов = МассивДокументов(Элементы.СформироватьЭД.ВыделенныеСтроки);
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(МассивДокументов, "СформироватьПоказать");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПринудительно(Команда)
	
	Если ТекущийРаздел = "Сформировать" Тогда
		МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Документ");
	Иначе
		МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ЭлектронныйДокумент");
	КонецЕсли;
	
	ОбменСКонтрагентамиКлиент.ЗакрытьПринудительноЭДО(МассивСсылок);
	
	ОбновитьНавигациюПоРазделам();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьЭД(Команда)
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьЭД(Неопределено, "УтвердитьОтправить", , МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписать(Команда)
	
	Если Элементы.ВходящиеЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаПодписать.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаПодписать");
		ПодключитьОбработчикОжидания("ВыполнитьКомандаПодписать", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПодписатьИсх(Команда)
	
	Если Элементы.ИсходящиеЭД.ВыделенныеСтроки.Количество() Тогда 
		Элементы.КомандаПодписатьИсх.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаПодписатьИсх");
		ПодключитьОбработчикОжидания("ВыполнитьКомандаПодписатьИсх", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписаниеИсх(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОтклонитьПодписаниеИсхОповещение", ЭтотОбъект);
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	Если МассивСсылок.Количество() > 0 Тогда
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьОтклонениеАннулированиеЭД(МассивСсылок, Истина,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправить(Команда)
	
	Если Элементы.ВходящиеЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаУтвердитьПодписатьИОтправить.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаУтвердитьПодписатьИОтправить");
		ПодключитьОбработчикОжидания("ВыполнитьУтвердитьПодписатьИОтправить", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьПодписатьИОтправитьИсх(Команда)
	
	Если Элементы.ИсходящиеЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаУтвердитьПодписатьИОтправитьИсх.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаУтвердитьПодписатьИОтправитьИсх");
		ПодключитьОбработчикОжидания("ВыполнитьУтвердитьПодписатьИОтправитьИсх", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакеты(Команда)
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Если НЕ ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоВыполненияОбмена() Тогда
			ЭлектронноеВзаимодействиеСлужебныйКлиент.СообщитьПользователюОНарушенииПравДоступа();
			Возврат;
		КонецЕсли;
		Если НЕ ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьОбменЭД") Тогда
			ТекстСообщения = ЭлектронноеВзаимодействиеСлужебныйКлиентПовтИсп.ТекстСообщенияОНеобходимостиНастройкиСистемы(
				"РаботаСЭД");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	#КонецЕсли
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивЭД", Элементы.ПакетыЭД.ВыделенныеСтроки);
	ОбработчикОповещения = Новый ОписаниеОповещения("ОтправитьПакетыОповещение", ЭтотОбъект, ДополнительныеПараметры);
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработчикОповещения, Неопределено,,, КонтекстОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	СброситьОтборНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашения(Команда)
	
	ОчиститьСообщения();
	ВыбранныеИдентификаторы = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ИдентификаторОрганизации, ИдентификаторКонтрагента, Контрагент, ЭлектроннаяПочта, Организация");
	ИдентификаторыОрганизаций = Новый Массив;
	
	Для Каждого Идентификатор Из ВыбранныеИдентификаторы Цикл
		
		Если ИдентификаторыОрганизаций.Найти(Идентификатор.ИдентификаторОрганизации) = Неопределено Тогда
			
			ИдентификаторыОрганизаций.Добавить(Идентификатор.ИдентификаторОрганизации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдентификаторыОрганизаций.Количество() > 0 Тогда
		
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
		ОбработчикОповещения = Новый ОписаниеОповещения("ОтправитьПриглашениеОповещение", ЭтотОбъект, ВыбранныеИдентификаторы);
		ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработчикОповещения, ИдентификаторыОрганизаций,,, КонтекстОперации);
		
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПриглашения(Команда)
	
	Если Элементы.ПриглашенияЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаПринятьПриглашения.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаПринятьПриглашения");
		ПодключитьОбработчикОжидания("НачатьПринятиеПриглашений", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПриглашения(Команда)
	
	Если Элементы.ПриглашенияЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаОтклонитьПриглашения.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаОтклонитьПриглашения");
		ПодключитьОбработчикОжидания("НачатьОтклонениеПриглашений", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтозватьПриглашение(Команда)
	
	Если Элементы.ПриглашенияЭД.ВыделенныеСтроки.Количество() Тогда
		Элементы.КомандаОтозватьПриглашение.Доступность = Ложь;
		ЗаблокированныеЭлементыФормы.Добавить("КомандаОтозватьПриглашение");
		ПодключитьОбработчикОжидания("НачатьОтзывПриглашений", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭДО(Команда)
	
	ОбменСКонтрагентамиКлиент.ОткрытьФормуНастроекЭДОСКонтрагентами();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАрхивЭДО(Команда)
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.АрхивЭлектронныхДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ОбработатьПредложениеОбАннулировании(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ОбработатьПредложениеОбАннулировании(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	ИмяТаблицы = ТаблицаРаздела(ТекущийРаздел);
	
	ТекущаяТаблица = Элементы[ИмяТаблицы];
	Если ТипЗнч(ТекущаяТаблица) = Тип("ТаблицаФормы")
		И ТекущаяТаблица.ВыделенныеСтроки.Количество() > 0 Тогда
		
		МассивЭД = Новый Массив;
		Если ТекущаяТаблица = Элементы.ОзнакомитьсяЭД Тогда
			
			Строки = ТекущаяТаблица.ВыделенныеСтроки;
			ВыделенныеДокументы = ЭлектронныеДокументыНаОзнакомление(Строки);
			МассивЭД = ФайлыЭлектронныхДокументов(ВыделенныеДокументы);
			
		ИначеЕсли ТекущаяТаблица = Элементы.ВходящиеЭД
			ИЛИ ТекущаяТаблица = Элементы.ИсходящиеЭД Тогда
			
			МассивЭД = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
			
		Иначе
			МассивЭД = ТекущаяТаблица.ВыделенныеСтроки;
		КонецЕсли;
		
		УстановитьОтветственного(МассивЭД);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСсылкуНаСтатьюПо1СБухфон(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьИнструкциюПо1СБухфон();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВАрхив(Команда)
	
	Строки = Элементы.ОзнакомитьсяЭД.ВыделенныеСтроки;
	
	ВыделенныеДокументы = ЭлектронныеДокументыНаОзнакомление(Строки);
	
	ОтправитьВАрхивНаСервере(ВыделенныеДокументы);
	
	ОбновитьНавигациюПоРазделам();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьНоменклатуру(Команда)
	
	ПоказатьСопоставлениеНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиУчетныеДокументы(Команда)
	
	НаборЭлектронныхДокументов = Новый Массив;
	
	Для Каждого СтрокаСписка Из Элементы.ВходящиеЭД.ВыделенныеСтроки Цикл
		
		Данные = Элементы.ВходящиеЭД.ДанныеСтроки(СтрокаСписка);
		НаборЭлектронныхДокументов.Добавить(Данные.ЭлектронныйДокумент);
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(НаборЭлектронныхДокументов) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для проведения необходимо выбрать электронный документ.'"));
		Возврат;
	КонецЕсли;
	
	НаборУчетныхДокументов = УчетныеДокументыНаКонтролеПроведенияЭД(НаборЭлектронныхДокументов);
	
	Если Не ЗначениеЗаполнено(НаборУчетныхДокументов) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Для выбранных электронных документов проведение не требуется.'"));
		Возврат;
	КонецЕсли;
	
	ПоказатьВопросОПроведенииУчетныхДокументов(НаборУчетныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуруКонтрагентов(Команда)
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьСписокНоменклатурыКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ОткрытьФорму("Документ.ЭлектронныйДокументИсходящий.Форма.ФормаПросмотраЭД",, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	ОбменСКонтрагентамиКлиент.ОтправитьПовторноЭД(Неопределено, МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДействиеМК(Команда)
	
	ДеревоЗначенийСсылка = ДанныеДереваДействий();
	ПараметрыФормы = Новый Структура("ДеревоДействий", ДеревоЗначенийСсылка);
	ОбработчикОповещения = Новый ОписаниеОповещения("ПослеВыбораРазделаМК", ЭтотОбъект);
	ОткрытьФорму(
		"Обработка.ОбменСКонтрагентами.Форма.ВыборРазделаМК", ПараметрыФормы, ЭтотОбъект, , , , ОбработчикОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСРазделами

///////////////////////////////////////////////////////////////////////////////////////////////////
// Описание, реквизиты, команды и элементы разделов.

&НаСервере 
Процедура ИнициализироватьРазделы()
	
	Обработки.ОбменСКонтрагентами.ИнициализироватьРазделы(ОписаниеРазделов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СписокРаздела(Знач Раздел)
	
	СпискиРазделов = Новый Соответствие;
	СпискиРазделов.Вставить("Входящие", "ВходящиеЭД");
	СпискиРазделов.Вставить("Обработать", "ВходящиеЭД");
	СпискиРазделов.Вставить("Утвердить", "ВходящиеЭД");
	СпискиРазделов.Вставить("Подписать", "ВходящиеЭД");
	СпискиРазделов.Вставить("Исправить", "ВходящиеЭД");
	СпискиРазделов.Вставить("Аннулировать", "ВходящиеЭД");
	СпискиРазделов.Вставить("НаКонтроле", "ВходящиеЭД");
	
	СпискиРазделов.Вставить("Исходящие", "ИсходящиеЭД");
	СпискиРазделов.Вставить("ПодписатьИсх", "ИсходящиеЭД");
	СпискиРазделов.Вставить("ИсправитьИсх", "ИсходящиеЭД");
	СпискиРазделов.Вставить("АннулироватьИсх", "ИсходящиеЭД");
	СпискиРазделов.Вставить("НаКонтролеИсх", "ИсходящиеЭД");
	
	СпискиРазделов.Вставить("Сформировать", "Сформировать");
	
	СпискиРазделов.Вставить("Ознакомиться", "ОзнакомитьсяЭД");
	
	СпискиРазделов.Вставить("Отправить", "ПакетыЭД");
	СпискиРазделов.Вставить("Распаковать", "ПакетыЭД");
	СпискиРазделов.Вставить("Ошибки", "ОшибкиЭД");
	
	СпискиРазделов.Вставить("Приглашения", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ТребуетсяПригласить", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ЖдемСогласия", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ТребуетсяСогласие", "ПриглашенияЭД");
	СпискиРазделов.Вставить("ПриглашенияОзнакомиться", "ПриглашенияЭД");
	
	СпискиРазделов.Вставить("НоменклатураКонтрагентов", "НоменклатураКонтрагентов");
	
	Список = СпискиРазделов.Получить(Раздел);
	
	Возврат Список;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтраницаРаздела(Знач Раздел)
	
	Страница = Неопределено;
	
	СтраницыРазделов = Новый Соответствие;
	СтраницыРазделов.Вставить("Входящие", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Обработать", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Утвердить", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Подписать", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Исправить", "ВходящиеЭД");
	СтраницыРазделов.Вставить("Аннулировать", "ВходящиеЭД");
	СтраницыРазделов.Вставить("НаКонтроле", "ВходящиеЭД");
	
	СтраницыРазделов.Вставить("Исходящие", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("ПодписатьИсх", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("ИсправитьИсх", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("АннулироватьИсх", "ИсходящиеЭД");
	СтраницыРазделов.Вставить("НаКонтролеИсх", "ИсходящиеЭД");
	
	СтраницыРазделов.Вставить("Сформировать", "СформироватьЭД");
	
	СтраницыРазделов.Вставить("Ознакомиться", "ОзнакомитьсяЭД");
	
	СтраницыРазделов.Вставить("Отправить", "ПакетыЭД");
	СтраницыРазделов.Вставить("Распаковать", "ПакетыЭД");
	СтраницыРазделов.Вставить("Ошибки", "ОшибкиЭД");
	
	СтраницыРазделов.Вставить("Приглашения", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ТребуетсяПригласить", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ЖдемСогласия", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ТребуетсяСогласие", "ПриглашенияЭД");
	СтраницыРазделов.Вставить("ПриглашенияОзнакомиться", "ПриглашенияЭД");
	
	СтраницыРазделов.Вставить("НоменклатураКонтрагентов", "НоменклатураКонтрагентов");
	
	Страница = СтраницыРазделов.Получить(Раздел);

	Если ЗначениеЗаполнено(Страница) Тогда
		Страница = "Страница" + СтраницыРазделов.Получить(Раздел);
	КонецЕсли;
	
	Возврат Страница;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаРаздела(Знач Раздел)
	
	ТаблицыРазделов = Новый Соответствие;
	ТаблицыРазделов.Вставить("Входящие", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Обработать", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Утвердить", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Подписать", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Исправить", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("Аннулировать", "ВходящиеЭД");
	ТаблицыРазделов.Вставить("НаКонтроле", "ВходящиеЭД");
	
	ТаблицыРазделов.Вставить("Исходящие", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("ПодписатьИсх", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("ИсправитьИсх", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("АннулироватьИсх", "ИсходящиеЭД");
	ТаблицыРазделов.Вставить("НаКонтролеИсх", "ИсходящиеЭД");
	
	ТаблицыРазделов.Вставить("Сформировать", "СформироватьЭД");
	
	ТаблицыРазделов.Вставить("Ознакомиться", "ОзнакомитьсяЭД");
	
	ТаблицыРазделов.Вставить("Отправить", "ПакетыЭД");
	ТаблицыРазделов.Вставить("Распаковать", "ПакетыЭД");
	ТаблицыРазделов.Вставить("Ошибки", "ОшибкиЭД");
	
	ТаблицыРазделов.Вставить("Приглашения", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ТребуетсяПригласить", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ЖдемСогласия", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ТребуетсяСогласие", "ПриглашенияЭД");
	ТаблицыРазделов.Вставить("ПриглашенияОзнакомиться", "ПриглашенияЭД");
	
	ТаблицыРазделов.Вставить("НоменклатураКонтрагентов", "НоменклатураКонтрагентов");
	
	Таблица = ТаблицыРазделов.Получить(Раздел);
	
	Возврат Таблица;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоляРаздела(Знач Раздел)
	
	ПоляТаблицыВходящие = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете, ЭлектронныйДокумент, Сокращение";
	ПоляТаблицыИсходящие = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, Подписи, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете, ЭлектронныйДокумент, Сокращение";
	ПоляТаблицыСформировать = "ВидДокумента, Дата, Номер, Документ, Контрагент, Организация, СуммаДокумента";
	ПоляТаблицыПакетыЭД = "Дата, Контрагент, Организация, Соглашение, СтатусПакета, Ссылка";
	ПоляТаблицыПриглашения = "Контрагент, ИдентификаторКонтрагента,СпособОбменаЭД, НовыйКонтрагент, ИдентификаторОрганизации, Организация, СтатусПодключения, ЭлектроннаяПочта, ТекстПриглашения, ОписаниеОшибки, ДатаОтправки, ДатаПолучения";
	ПоляТаблицыОзнакомиться = "ВидДокумента, Дата, Номер, СостояниеЭДО, Организация, Контрагент, СуммаДокумента, ЭлектронныйДокумент, Сокращение";
	ПоляТаблицыНоменклатураКонтрагентов = "Владелец, Сопоставить";
	ПоляТаблицыОшибки = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете, Ссылка";
	
	ПоляТаблицы = "";
	ПоляРаздела = "";
	
	Если Раздел = "Входящие" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, Сокращение, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";
		КонецЕсли;

	ИначеЕсли Раздел = "Обработать" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, ОтражениеВУчете";
		
	ИначеЕсли Раздел = "Утвердить" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, Сокращение, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ОтражениеВУчете";
		КонецЕсли;
		
	ИначеЕсли Раздел = "Подписать" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, Сокращение, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ОтражениеВУчете"
		КонецЕсли;
		
	ИначеЕсли Раздел = "Исправить" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, ОтражениеВУчете";
		
	ИначеЕсли Раздел = "Аннулировать" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, Сокращение, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";
		КонецЕсли;
		
	ИначеЕсли Раздел = "НаКонтроле" Тогда
		
		ПоляТаблицы = ПоляТаблицыВходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, Сокращение, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ОтражениеВУчете";
		КонецЕсли;
		
	ИначеЕсли Раздел = "Исходящие" Тогда
		
		ПоляТаблицы = ПоляТаблицыИсходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, Сокращение, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";
		КонецЕсли;
		
	ИначеЕсли Раздел = "Сформировать" Тогда
		
		ПоляТаблицы = ПоляТаблицыСформировать;
		ПоляРаздела = ПоляТаблицыСформировать;
		
	ИначеЕсли Раздел = "ПодписатьИсх" Тогда
		
		ПоляТаблицы = ПоляТаблицыИсходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, Сокращение, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, Подписи, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, Описание, ОтражениеВУчете";
		КонецЕсли;
		
	ИначеЕсли Раздел = "ИсправитьИсх" Тогда
		
		ПоляТаблицы = ПоляТаблицыИсходящие;
		ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";
		
	ИначеЕсли Раздел = "АннулироватьИсх" Тогда
		
		ПоляТаблицы = ПоляТаблицыИсходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, Сокращение, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";
		КонецЕсли;
		
	ИначеЕсли Раздел = "НаКонтролеИсх" Тогда
		
		ПоляТаблицы = ПоляТаблицыИсходящие;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, Сокращение, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, СостояниеЭДО, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, Описание, ОтражениеВУчете";
		КонецЕсли;
		
	ИначеЕсли Раздел = "Ознакомиться" Тогда
		
		ПоляТаблицы = ПоляТаблицыОзнакомиться;
		Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
			ПоляРаздела = "СуммаДокумента, Контрагент, СостояниеЭДО, Сокращение, ЭлектронныйДокумент";
		Иначе
			ПоляРаздела = "ВидДокумента, Дата, Номер, СостояниеЭДО, Организация, Контрагент, СуммаДокумента";
		КонецЕсли;
		
	ИначеЕсли Раздел = "Отправить" Тогда
		
		ПоляТаблицы = ПоляТаблицыПакетыЭД;
		ПоляРаздела = "Дата, Контрагент, Организация, СтатусПакета, Ссылка";
		
	ИначеЕсли Раздел = "Распаковать" Тогда
		
		ПоляТаблицы = ПоляТаблицыПакетыЭД;
		ПоляРаздела = "Дата, Контрагент, Организация, Соглашение, Ссылка";
		
	ИначеЕсли Раздел = "Ошибки" Тогда
		
		ПоляТаблицы = ПоляТаблицыОшибки;
		ПоляРаздела = "ВидДокумента, Дата, Номер, СуммаДокумента, Контрагент, Организация, НаправлениеЭД, Ответственный, ДополнительнаяИнформация, ПричинаОтклонения, Описание, ОтражениеВУчете";
		
	ИначеЕсли Раздел = "Приглашения" Тогда
		
		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, Организация, СтатусПодключения, ОписаниеОшибки";
		
	ИначеЕсли Раздел = "ТребуетсяПригласить" Тогда
		
		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, Организация, ЭлектроннаяПочта, ТекстПриглашения, ОписаниеОшибки";
		
	ИначеЕсли Раздел = "ЖдемСогласия" Тогда
		
		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, Организация, ЭлектроннаяПочта, ДатаОтправки, СтатусПодключения";
		
	ИначеЕсли Раздел = "ТребуетсяСогласие" Тогда
		
		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, ИдентификаторКонтрагента, Организация, ДатаПолучения";
		
	ИначеЕсли Раздел = "ПриглашенияОзнакомиться" Тогда
		
		ПоляТаблицы = ПоляТаблицыПриглашения;
		ПоляРаздела = "Контрагент, ИдентификаторКонтрагента, Организация, СтатусПодключения, ДатаПолучения";
		
	ИначеЕсли Раздел = "НоменклатураКонтрагентов" Тогда
		
		ПоляТаблицы = ПоляТаблицыНоменклатураКонтрагентов;
		ПоляРаздела = ПоляТаблицыНоменклатураКонтрагентов;
		
	КонецЕсли;
	
	ПоляТаблицы = СтрЗаменить(ПоляТаблицы, " ", "");
	ПоляРаздела = СтрЗаменить(ПоляРаздела, " ", "");
	
	МассивПолеТаблицы = СтрРазделить(ПоляТаблицы, ",", Ложь);
	МассивПолейРаздела = СтрРазделить(ПоляРаздела, ",", Ложь);
	
	ВидимостьПолей = Новый Соответствие;
	Для каждого Поле Из МассивПолеТаблицы Цикл
		
		Видимость = (МассивПолейРаздела.Найти(Поле) <> Неопределено);
		ВидимостьПолей.Вставить(Поле, Видимость);
		
	КонецЦикла;
	
	Возврат ВидимостьПолей;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Настройка отображения разделов.

&НаСервере 
Функция НастройкиОтображенияРазделов() 
	
	СписокПользователей = Новый Массив;
	СписокПользователей.Добавить(Пользователи.АвторизованныйПользователь());
	Если РежимОтображения <> "МоиДокументы" Тогда
		СписокПользователей.Добавить(ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка"));
	КонецЕсли;
	
	НастройкиОтображения = Новый Структура;
	НастройкиОтображения.Вставить("РежимОтображения", РежимОтображения);
	НастройкиОтображения.Вставить("СписокПользователей", СписокПользователей);
	НастройкиОтображения.Вставить("ОтправлятьВходящиеДокументыНаУтверждение", ОтправлятьВходящиеДокументыНаУтверждение);
	
	Возврат НастройкиОтображения;
	
КонецФункции

&НаСервере
Процедура НастроитьСпискиРазделов()
	
	НастройкиОтображения = НастройкиОтображенияРазделов();
	
	УстановитьПараметрыСписковРазделов(НастройкиОтображения);
	
	СоздатьОтборПоРазделамВСпискахРазделов(НастройкиОтображения);
	
	СоздатьБыстрыйОтборВСпискахРазделов();
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьПараметрыСписковРазделов(Знач НастройкиОтображения)
	
	Форма = ЭтотОбъект;
	
	ОграничениеОтбора = Новый Массив;
	ОграничениеОтбора.Добавить("СписокПользователей");
	ОграничениеОтбора.Добавить("ПараметрыДанных");
	
	ИмяСписка = СписокРаздела("Входящие");
	Список = Форма[ИмяСписка];
	Список.Параметры.УстановитьЗначениеПараметра("РежимОтображения", НастройкиОтображения.РежимОтображения);
	Список.Параметры.УстановитьЗначениеПараметра("СписокПользователей", НастройкиОтображения.СписокПользователей);
	Список.УстановитьОграниченияИспользованияВОтборе(ОграничениеОтбора);
	
	ИмяСписка = СписокРаздела("Исходящие");
	Список = Форма[ИмяСписка];
	Список.Параметры.УстановитьЗначениеПараметра("РежимОтображения", НастройкиОтображения.РежимОтображения);
	Список.Параметры.УстановитьЗначениеПараметра("СписокПользователей", НастройкиОтображения.СписокПользователей);
	Список.УстановитьОграниченияИспользованияВОтборе(ОграничениеОтбора);
	
КонецПроцедуры

&НаСервере 
Процедура СоздатьБыстрыйОтборВСпискахРазделов() 
	
	ВсеСписки = Новый Массив;
	ВсеСписки.Добавить(ВходящиеЭД);
	ВсеСписки.Добавить(ИсходящиеЭД);
	ВсеСписки.Добавить(ПакетыЭД);
	ВсеСписки.Добавить(ПриглашенияЭД);
	ВсеСписки.Добавить(Сформировать);
	
	Для каждого Список Из ВсеСписки Цикл
		
		ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.Отбор.Элементы, "БыстрыйОтбор", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура СоздатьОтборПоРазделамВСпискахРазделов(Знач НастройкиОтображения)
	
	// Исходящие
	Список = ИсходящиеЭД;
	
	Разделы = Новый Массив;
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Разделы.Добавить("Исходящие");
	КонецЕсли;
	
	Разделы.Добавить("ПодписатьИсх");
	Разделы.Добавить("ИсправитьИсх");
	Разделы.Добавить("АннулироватьИсх");
	Разделы.Добавить("НаКонтролеИсх");
	
	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);
	
	// Входящие
	Список = ВходящиеЭД;
	
	Разделы = Новый Массив;
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Разделы.Добавить("Входящие");
	КонецЕсли;
	Разделы.Добавить("Обработать");
	Разделы.Добавить("Утвердить");
	Разделы.Добавить("Подписать");
	Разделы.Добавить("Исправить");
	Разделы.Добавить("Аннулировать");
	Разделы.Добавить("НаКонтроле");
	
	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);
	
	// Ознакомиться
	Список = ОзнакомитьсяЭД;
	
	Разделы = Новый Массив;
	Разделы.Добавить("Ознакомиться");
	
	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);
	
	// Пакеты
	Список = ПакетыЭД;
	
	Разделы = Новый Массив;
	Разделы.Добавить("Отправить");
	Разделы.Добавить("Распаковать");
	
	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);
	
	// Приглашения
	Список = ПриглашенияЭД;
	
	Разделы = Новый Массив;
	Разделы.Добавить("ТребуетсяПригласить");
	Разделы.Добавить("ЖдемСогласия");
	Разделы.Добавить("ТребуетсяСогласие");
	Разделы.Добавить("ПриглашенияОзнакомиться");
	
	СоздатьГруппуОтбораПоРазделам(Разделы, НастройкиОтображения, Список.Отбор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьГруппуОтбораПоРазделам(Знач Разделы, Знач НастройкиОтображения, Отбор)
	
	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Отбор.Элементы, "ОтборПоРазделам", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	Для каждого Раздел Из Разделы Цикл
		
		ГруппаРаздел = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаОтборПоРазделам, "Раздел" + Раздел, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
		СоздатьОтборПоРазделу(Раздел, НастройкиОтображения, ГруппаРаздел);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура СоздатьОтборПоРазделу(Знач Раздел, Знач НастройкиОтображения, ГруппаОтбора)
	
	// Изменения в отборы вносить согласовано с текстами запросов количества элементов в разделе.
	// См. метод ТекстЗапросаКоличестваЭлементовПоРазделуБезОтбора.
	
	РежимОтображения = НастройкиОтображения.РежимОтображения;
	СписокПользователей = НастройкиОтображения.СписокПользователей;
	

	Если Раздел = "Входящие" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		// Группа: Вариант1 ИЛИ Вариант2
		
		ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаОтбора.Элементы, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ГруппаВариант1 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаВариант2 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		// Вариант 1
		
		ЗначенияСостояниеЭДО = Новый Массив;
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаПодписи"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаУтверждении"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать"));
		
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИсправление"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора"));
		ЗначенияСостояниеЭДО.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента"));
	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"СостояниеЭДО", ЗначенияСостояниеЭДО, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		// Вариант 2
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИОП"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.УОУ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Утвержден");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СтатусЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	ИначеЕсли Раздел = "Обработать" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Истина;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ЕстьКонтрольОтражения", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.Отклонен"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.Аннулирован"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НеСформирован"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ПолученОтказОтКонтрагента"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.НеВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "Утвердить" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаУтверждении"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "Подписать" Тогда
		
		Если РежимОтображения = "МоиДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		// Группа: Вариант1 ИЛИ Вариант2
		
		ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаОтбора.Элементы, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ГруппаВариант1 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаВариант2 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		// Вариант 1
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаПодписи"));
		Если Не НастройкиОтображения.ОтправлятьВходящиеДокументыНаУтверждение Тогда
			Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаУтверждении"));
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		// Вариант 2
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИОП"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.УОУ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.УУЭСФ"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Утвержден");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СтатусЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	ИначеЕсли Раздел = "Исправить" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОшибкаПередачи"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "Аннулировать" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "НаКонтроле" Тогда
		
		Если РежимОтображения = "МоиДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"РежимОтображения", "КИсполнению", ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИсправление"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "Исходящие" Тогда
		
		Если РежимОтображения = "МоиДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаОтбора.Элементы, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ГруппаВариант1 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаВариант2 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаВариант3 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаВариант4 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		// Подписать вариант 1
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"НаПодпись", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаПодписи");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		// Подписать вариант 2
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"НаПодпись", Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.НеРавно, , Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИОП"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Утвержден");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СтатусЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		// Аннулировать
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант3,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант3,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);

		// На контроле
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант4,
			"РежимОтображения", "КИсполнению", ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИсправление"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант4,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант4,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "ПодписатьИсх" Тогда
		
		Если РежимОтображения = "МоиДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"НаПодпись", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		// Группа: Вариант1 ИЛИ Вариант2
		
		ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаОтбора.Элементы, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ГруппаВариант1 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		ГруппаВариант2 = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаИЛИ, Неопределено, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
		// Вариант 1
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.НаПодписи");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант1,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		// Вариант 2
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИОП"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.СтатусыЭД.Утвержден");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаВариант2,
			"СтатусЭД", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	ИначеЕсли Раздел = "ИсправитьИсх" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОшибкаПередачи"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "АннулироватьИсх" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		Значение = ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "НаКонтролеИсх" Тогда
		
		Если РежимОтображения = "МоиДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"РежимОтображения", "КИсполнению", ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяИсправление"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СостояниеЭДО", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ЭСФ"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовВерсииЭД.ДОП"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"ТипЭлементаВерсииЭД", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "Ознакомиться" Тогда
		
		Если РежимОтображения <> "ВсеДокументы" Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
				"Ответственный", СписокПользователей, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
			
		КонецЕсли;
		
	ИначеЕсли Раздел = "Отправить" Тогда
		
		Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Исходящий");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"Направление", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.ПодготовленКОтправке");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СтатусПакета", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	ИначеЕсли Раздел = "Распаковать" Тогда
		
		Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.Входящий");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"Направление", Значение, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Неизвестный"));
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.КРаспаковке"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СтатусПакета", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "ТребуетсяПригласить" Тогда
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяОтправить"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "ЖдемСогласия" Тогда 
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ОжидаемСогласия"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "ТребуетсяСогласие" Тогда
		
		Значение = Новый Массив;
		Значение.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПриглашений.ТребуетсяСогласие"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"СтатусПодключения", Значение, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
		
	ИначеЕсли Раздел = "ПриглашенияОзнакомиться" Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора,
			"Ознакомиться", Истина, ВидСравненияКомпоновкиДанных.Равно,, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстЗапросаКоличестваЭлементовПоРазделуБезОтбора(Знач Раздел, ОтправлятьВходящиеДокументыНаУтверждение)
	
	// Изменения в тексты запросов вносить согласовано с отборами по разделу.
	// См. метод СоздатьОтборПоРазделу.
	
	ПараметрыТекущихЭД = ОбменСКонтрагентамиСлужебный.НовыеПараметрыОпределенияТекущихЭлектронныхДокументов();
	ПараметрыТекущихЭД.Раздел = Раздел;
	ПараметрыТекущихЭД.КоличествоПолучаемыхЗаписей = 1000;
	ПараметрыТекущихЭД.ОтправлятьВходящиеДокументыНаУтверждение = ОтправлятьВходящиеДокументыНаУтверждение;
	
	Запрос = ОбменСКонтрагентамиСлужебный.ЗапросКоличестваТекущихЭлектронныхДокументов(ПараметрыТекущихЭД);
	
	Возврат Запрос.Текст;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Навигация по разделам.

&НаКлиенте
Процедура ПриИзмененииРаздела(Знач НовыйРаздел)
	
	// &ЗамерПроизводительности
	ИмяОперации = СтрШаблон("Обработка.ТекущиеДелаПоЭДО.Форма.ТекущиеДела.ПоказатьРаздел.%1", НовыйРаздел);
	ОценкаПроизводительностиКлиент.ЗамерВремени(ИмяОперации);
	
	ПоказатьРаздел(НовыйРаздел);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРаздел(Знач Раздел)
	
	ТекущийРаздел = Раздел;
	
	ПоказатьКомандыРаздела(Раздел);
	ПоказатьСписокРаздела(Раздел);
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбновитьНазваниеРазделаМК();
	Иначе
		ПоказатьЭлементыРаздела(Раздел);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРазделСПроверкой(Знач Раздел)
	
	ОтборПоИмени = Новый Структура("Имя", Раздел);
	НайденныеСтроки = ОписаниеРазделов.НайтиСтроки(ОтборПоИмени);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		ПоказатьРаздел(Раздел);
	Иначе
		ШаблонИсключения = НСтр("ru = 'Неизвестный раздел текущих дел ЭДО: {%1}'");
		ВызватьИсключение СтрШаблон(ШаблонИсключения, Раздел);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКомандыРаздела(Знач Раздел)
	
	КомандыРазделов = Новый Соответствие;
	КомандыРазделов.Вставить("Входящие", "Обновить, ЗакрытьПринудительно, Перенаправить, УтвердитьПодписатьИОтправитьВх, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Обработать", "Обновить, СопоставитьНоменклатуру, ПровестиУчетныеДокументы, ЗакрытьПринудительно, Перенаправить, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Утвердить", "Обновить, ЗакрытьПринудительно, Перенаправить, УтвердитьЭД, ВходящиеЭДКонтекстноеМенюУтвердитьЭД, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Подписать", "Обновить, ЗакрытьПринудительно, Перенаправить, ПодписатьВх, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Исправить", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Аннулировать", "Обновить, ЗакрытьПринудительно, Перенаправить, Аннулировать, ОтклонитьАннулирование, ВходящиеЭДКонтекстноеМенюОтклонитьАннулирование,КомандыВходящиеЭД");
	КомандыРазделов.Вставить("НаКонтроле", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыВходящиеЭД");
	КомандыРазделов.Вставить("Исходящие", "Обновить, ЗакрытьПринудительно, Перенаправить, УтвердитьПодписатьИОтправитьИсх, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("Сформировать", "Обновить, ЗакрытьПринудительно, ИзменитьДокумент, СформироватьЭД, СформироватьПодписатьИОтправить, КомандыСформироватьЭД, СоздатьПроизвольныйДокумент");
	КомандыРазделов.Вставить("ПодписатьИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, ПодписатьИсх, ОтклонитьПодписаниеИсх, ИсходящиеЭДКонтекстноеМенюОтклонитьПодписаниеИсх, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("ИсправитьИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("АннулироватьИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, Аннулировать, ОтклонитьАннулирование, ИсходящиеЭДКонтекстноеМенюОтклонитьАннулирование, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("НаКонтролеИсх", "Обновить, ЗакрытьПринудительно, Перенаправить, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("Ознакомиться", "ОтправитьВАрхив, Перенаправить, Обновить");
	КомандыРазделов.Вставить("Отправить", "Обновить, ОтправитьПакеты, ОтменитьПакеты, КомандыПакетыЭД");
	КомандыРазделов.Вставить("Распаковать", "Обновить, РаспаковатьПакеты, ОтменитьПакеты, КомандыПакетыЭД");
	КомандыРазделов.Вставить("Ошибки", "Обновить, ОтправитьПовторно, ЗакрытьПринудительно, Перенаправить, КомандыИсходящиеЭД");
	КомандыРазделов.Вставить("Приглашения", "Обновить, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ТребуетсяПригласить", "Обновить, ОтправитьПриглашения, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ЖдемСогласия", "Обновить, ОтозватьПриглашение, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ТребуетсяСогласие", "Обновить, ПринятьПриглашения, ОтклонитьПриглашения, КомандыПриглашенияЭД");
	КомандыРазделов.Вставить("ПриглашенияОзнакомиться", "ВАрхивПриглашенияОтправить, Обновить");
	КомандыРазделов.Вставить("НоменклатураКонтрагентов", "Обновить, СопоставитьНоменклатуру, ОткрытьНоменклатуруКонтрагентов");
		
	ЭлементыКоманд = Новый Соответствие;
	ЭлементыКоманд.Вставить("КомандыВходящиеЭД", Элементы.ГруппаКомандыВходящиеЭД);
	ЭлементыКоманд.Вставить("КомандыИсходящиеЭД", Элементы.ГруппаКомандыИсходящиеЭД);
	ЭлементыКоманд.Вставить("КомандыСформироватьЭД", Элементы.ГруппаКомандыСформироватьЭД);
	ЭлементыКоманд.Вставить("КомандыПакетыЭД", Элементы.ГруппаКомандыПакетыЭД);
	ЭлементыКоманд.Вставить("КомандыПриглашенияЭД", Элементы.ГруппаКомандыПриглашенияЭД);
	ЭлементыКоманд.Вставить("Обновить", Элементы.КомандаОбновить);
	ЭлементыКоманд.Вставить("ЗакрытьПринудительно", Элементы.КомандаЗакрытьПринудительно);
	ЭлементыКоманд.Вставить("Перенаправить", Элементы.КомандаПеренаправить);
	ЭлементыКоманд.Вставить("УтвердитьЭД", Элементы.КомандаУтвердитьЭД);
	ЭлементыКоманд.Вставить("ПодписатьВх", Элементы.КомандаПодписать);
	ЭлементыКоманд.Вставить("ПодписатьИсх", Элементы.КомандаПодписатьИсх);
	ЭлементыКоманд.Вставить("ОтклонитьПодписаниеИсх", Элементы.КомандаОтклонитьПодписаниеИсх);
	ЭлементыКоманд.Вставить("Аннулировать", Элементы.КомандаАннулировать);
	ЭлементыКоманд.Вставить("ОтклонитьАннулирование", Элементы.КомандаОтклонитьАннулирование);
	ЭлементыКоманд.Вставить("ИзменитьДокумент", Элементы.КомандаИзменитьДокумент);
	ЭлементыКоманд.Вставить("СформироватьЭД", Элементы.КомандаСформироватьЭД);
	ЭлементыКоманд.Вставить("СоздатьПроизвольныйДокумент", Элементы.КомандаСоздатьПроизвольныйДокумент);
	ЭлементыКоманд.Вставить("ОтправитьВАрхив", Элементы.КомандаОтправитьВАрхив);
	ЭлементыКоманд.Вставить("ОтправитьПакеты", Элементы.КомандаОтправитьПакеты);
	ЭлементыКоманд.Вставить("ОтменитьПакеты", Элементы.КомандаОтменитьПакеты);
	ЭлементыКоманд.Вставить("РаспаковатьПакеты", Элементы.КомандаРаспаковатьПакеты);
	ЭлементыКоманд.Вставить("ОтправитьПриглашения", Элементы.КомандаОтправитьПриглашения);
	ЭлементыКоманд.Вставить("ПринятьПриглашения", Элементы.КомандаПринятьПриглашения);
	ЭлементыКоманд.Вставить("ОтклонитьПриглашения", Элементы.КомандаОтклонитьПриглашения);
	ЭлементыКоманд.Вставить("УтвердитьПодписатьИОтправитьВх", Элементы.КомандаУтвердитьПодписатьИОтправить);
	ЭлементыКоманд.Вставить("УтвердитьПодписатьИОтправитьИсх", Элементы.КомандаУтвердитьПодписатьИОтправитьИсх);
	ЭлементыКоманд.Вставить("СформироватьПодписатьИОтправить", Элементы.КомандаСформироватьПодписатьИОтправить);
	ЭлементыКоманд.Вставить("СопоставитьНоменклатуру", Элементы.КомандаСопоставитьНоменклатуру);
	ЭлементыКоманд.Вставить("ОткрытьНоменклатуруКонтрагентов", Элементы.КомандаОткрытьНоменклатуруКонтрагентов);
	ЭлементыКоманд.Вставить("ПровестиУчетныеДокументы", Элементы.КомандаПровестиУчетныеДокументы);
	ЭлементыКоманд.Вставить("ВАрхивПриглашенияОтправить", Элементы.КомандаОтправитьПриглашенияВАрхив);
	ЭлементыКоманд.Вставить("ОтозватьПриглашение", Элементы.КомандаОтозватьПриглашение);
	ЭлементыКоманд.Вставить("ВходящиеЭДКонтекстноеМенюУтвердитьЭД", Элементы.ВходящиеЭДКонтекстноеМенюУтвердитьЭД);
	ЭлементыКоманд.Вставить("ВходящиеЭДКонтекстноеМенюОтклонитьАннулирование", Элементы.ВходящиеЭДКонтекстноеМенюОтклонитьАннулирование);
	ЭлементыКоманд.Вставить("ИсходящиеЭДКонтекстноеМенюОтклонитьПодписаниеИсх", Элементы.ИсходящиеЭДКонтекстноеМенюОтклонитьПодписаниеИсх);
	ЭлементыКоманд.Вставить("ИсходящиеЭДКонтекстноеМенюОтклонитьАннулирование", Элементы.ИсходящиеЭДКонтекстноеМенюОтклонитьАннулирование);

	
	КомандыРаздела = КомандыРазделов.Получить(Раздел);
	
	Для каждого КлючЗначение Из ЭлементыКоманд Цикл
		
		ИмяКоманды = КлючЗначение.Ключ;
		ЭлементФормы = КлючЗначение.Значение;
		
		ЕстьКоманда = (СтрНайти(КомандыРаздела, ИмяКоманды) > 0);
		КомандаДоступна = (НедоступныеКоманды.НайтиПоЗначению(ИмяКоманды) = Неопределено);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, ЭлементФормы.Имя, "Видимость", ЕстьКоманда И КомандаДоступна);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСписокРаздела(Знач Раздел)
	
	ПоказатьСтраницуРаздела(Раздел);
	
	ПоказатьПоляРаздела(Раздел);
	
	ПрименитьОтборыКРазделу(Раздел);
	
КонецПроцедуры

&НаСервере 
Процедура ПоказатьСтраницуРаздела(Знач Раздел) 
	
	ИмяСтраницы = СтраницаРаздела(Раздел);
	
	Если ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Элементы.ПанельСписков.ТекущаяСтраница = Элементы[ИмяСтраницы];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ПоказатьПоляРаздела(Знач Раздел)
	
	ИмяТаблицы = ТаблицаРаздела(Раздел);
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	ПоляТаблицы = ПоляРаздела(Раздел);
	
	Для каждого Поле Из ПоляТаблицы Цикл
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, ИмяТаблицы + Поле.Ключ, "Видимость", Поле.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьНавигациюПоРазделамНаСервере(Знач ПересчитатьКоличество = Истина, Знач ПересчитатьКоличествоОтбор = Истина)
	
	РассчитатьКоличествоЭлементовВРазделах(ПересчитатьКоличество, ПересчитатьКоличествоОтбор);
	
	ОбновитьДеревоНавигации(ДеревоДействий.ПолучитьЭлементы());
	
	ПерейтиВТекущийРазделНаСервере();
	ОбновитьДинамическиеСписки();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОбновитьНазваниеРазделаМК();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбновитьДеревоНавигации(ЭлементыДереваНавигации) 
	
	КОбработке = 0;
	
	Для каждого СтрокаНавигации Из ЭлементыДереваНавигации Цикл
		
		ОтборРаздела = Новый Структура("Имя", СтрокаНавигации.Значение);
		НайденныеСтроки = ОписаниеРазделов.НайтиСтроки(ОтборРаздела);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		Раздел = НайденныеСтроки[0];
		
		СтрокаНавигации.Представление = Раздел.Представление;
		
		ВложенныеЭлементы = СтрокаНавигации.ПолучитьЭлементы();
		ЕстьВложенныеЭлементы = (ВложенныеЭлементы.Количество() > 0);
		
		Если ЕстьВложенныеЭлементы Тогда
			
			КОбработкеВложенные = ОбновитьДеревоНавигации(ВложенныеЭлементы);
			КОбработке = КОбработке + КОбработкеВложенные;
			СтрокаНавигации.ТребуетсяОбработка = КОбработкеВложенные;
		ИначеЕсли Раздел.Видимость Тогда
			КОбработке = КОбработке + Раздел.Количество;
			СтрокаНавигации.ТребуетсяОбработка = (Раздел.Количество > 0);
		КонецЕсли;
		
		Если Раздел.РассчитыватьКоличество И Раздел.КоличествоРассчитано И Раздел.Количество > 0 Тогда
		
			КоличествоОтборСтрокой = ?(Раздел.КоличествоОтбор >= 1000, "999+", Формат(Раздел.КоличествоОтбор, "ЧН=0; ЧГ=0"));
			СтрокаНавигации.Представление = СтрокаНавигации.Представление + " (" + КоличествоОтборСтрокой;
			
			Если Раздел.Количество <> Раздел.КоличествоОтбор Тогда
				
				КоличествоСтрокой = ?(Раздел.Количество >= 1000, "999+", Формат(Раздел.Количество, "ЧН=0; ЧГ=0"));
				СтрокаНавигации.Представление = СтрокаНавигации.Представление + "/" + КоличествоСтрокой;
				
			КонецЕсли;
			
			СтрокаНавигации.Представление = СтрокаНавигации.Представление + ")";
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат КОбработке;
	
КонецФункции

&НаКлиенте 
Процедура ОбновитьНавигациюПоРазделам()
	
	ОбновитьНавигациюПоРазделамНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВТекущийРаздел() 
	
	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Значение", ИдентификаторСтроки, ДеревоДействий.ПолучитьЭлементы(), ТекущийРаздел, Ложь);
	
	Если Элементы.ДеревоДействий.ТекущаяСтрока <> ИдентификаторСтроки Тогда
		Элементы.ДеревоДействий.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиВТекущийРазделНаСервере() 
	
	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Значение", ИдентификаторСтроки, ДеревоДействий.ПолучитьЭлементы(), ТекущийРаздел, Ложь);
	
	Если Элементы.ДеревоДействий.ТекущаяСтрока <> ИдентификаторСтроки Тогда
		Элементы.ДеревоДействий.ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Работа с отборами списков разделов.

&НаСервере
Процедура ПрименитьОтборыКРазделу(Знач Раздел)
	
	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];
	
	ПрименитьОтборыКСпискуРаздела(Раздел, Список);
	
	УстановитьТекстКнопкиБыстрыхОтборов(Раздел);
	
	УстановитьДоступностьСбросаОтбора(Раздел);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьОтборыКСпискуРаздела(Знач Раздел, Список)
	
	УстановитьОтборПоРазделу(Раздел, Список);
	
	УстановитьБыстрыеОтборыПоРазделу(Раздел, БыстрыеОтборы, Список);
	
	ОбработатьПересечениеПользовательскихОтборовИОтбораПоРазделу(Раздел, Список);
	
	ОбработатьПересечениеПользовательскихОтборовИБыстрыхОтборов(Раздел, Список);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьОтборПоРазделу(Знач Раздел, Список)
	
	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборПоРазделам");
	Если ГруппаОтборПоРазделам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Включаем использование группы отбора, соответствующей разделу.
	РазделНайден = Ложь;
	Для каждого ГруппаРаздела Из ГруппаОтборПоРазделам.Элементы Цикл
		
		Если ГруппаРаздела.Представление = "Раздел" + Раздел Тогда
			ГруппаРаздела.Использование = Истина;
			РазделНайден = Истина;
		Иначе
			ГруппаРаздела.Использование = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	// Если не удалось найти группу раздела, то включаем все разделы.
	Если Не РазделНайден Тогда
		Для каждого ГруппаРаздела Из ГруппаОтборПоРазделам.Элементы Цикл
			ГруппаРаздела.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьБыстрыеОтборыПоРазделу(Знач Раздел, Знач БыстрыеОтборы, Список)
	
	Отбор = Список.Отбор;
	
	ПоляОтборов = Новый Соответствие;
	ПоляОтборов.Вставить("Организация", "Организация");
	ПоляОтборов.Вставить("Контрагент", "Контрагент");
	ПоляОтборов.Вставить("НаправлениеЭД", "НаправлениеЭД");
	ПоляОтборов.Вставить("ВидЭД", "ВидЭД");
	ПоляОтборов.Вставить("Сумма_С", "СуммаДокумента");
	ПоляОтборов.Вставить("Сумма_По", "СуммаДокумента");
	ПоляОтборов.Вставить("Дата_С", "Дата");
	ПоляОтборов.Вставить("Дата_По", "Дата");
	ПоляОтборов.Вставить("ДополнительнаяИнформация", "ДополнительнаяИнформация");
	
	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Отбор.Элементы, "БыстрыйОтбор", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
		
	Режим = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаБыстрыйОтбор.РежимОтображения = Режим;
		
	Для каждого СтрокаОтбора Из БыстрыеОтборы Цикл
			
		Имя = СтрокаОтбора.Параметр;
		Значение = СтрокаОтбора.Значение;
		Поле = ПоляОтборов[Имя];
		
		Если Не ПолеДоступноДляОтбора(Отбор, Поле) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Имя = "Организация" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение,, Использование, Режим);
			
		ИначеЕсли Имя = "Контрагент" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение,, Использование, Режим);
			
		ИначеЕсли Имя = "НаправлениеЭД" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение,, Использование, Режим);
			
		ИначеЕсли Имя = "ВидЭД" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ТипДокумента = Неопределено;
			Если НЕ Использование Тогда
			ИначеЕсли Значение = Перечисления.ВидыЭД.СчетНаОплату Тогда
				ТипДокумента = Перечисления.ТипыЭД.СчетНаОплату;
			ИначеЕсли Значение = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
				ТипДокумента = Перечисления.ТипыЭД.ТоварнаяНакладная;
			ИначеЕсли Значение = Перечисления.ВидыЭД.АктВыполненныхРабот Тогда
				ТипДокумента = Перечисления.ТипыЭД.АктВыполненныхРабот;
			ИначеЕсли ТипЗнч(Значение) = Тип("ПеречислениеСсылка.ТипыЭД") Тогда
				Поле = "ТипДокумента";
			ИначеЕсли ОбменСКонтрагентамиСлужебный.ЭтоПрикладнойВидЭД(Значение) Тогда
				Поле = "ПрикладнойВидЭД";
			ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.ВидыВнутреннихДокументовЭДО") Тогда
				Поле = "ВидВнутреннегоДокумента";
			КонецЕсли;
			
			Если ТипДокумента = Неопределено Тогда
				ОбластьДобавления = ГруппаБыстрыйОтбор;
			Иначе
				ОбластьДобавления = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					ГруппаБыстрыйОтбор, НСтр("ru = 'Вид документа'"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					ОбластьДобавления, "ТипДокумента", ВидСравненияКомпоновкиДанных.Равно, ТипДокумента,, Использование, Режим);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ОбластьДобавления, Поле, ВидСравненияКомпоновкиДанных.Равно, Значение,, Использование, Режим);
			
		ИначеЕсли Имя = "ДополнительнаяИнформация" Тогда
			
			ГруппаИЛИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаБыстрыйОтбор, НСтр("ru = 'Дополнительная информация'"), ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ);
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаИЛИ, "ДополнительнаяИнформация", ВидСравненияКомпоновкиДанных.Содержит, Значение,, Использование, Режим);
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаИЛИ, "ПричинаОтклонения", ВидСравненияКомпоновкиДанных.Содержит, Значение,, Использование, Режим);
			
		ИначеЕсли Имя = "Дата_С" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, НачалоДня(Значение),, Использование, Режим);
				
		ИначеЕсли Имя = "Дата_По" Тогда
			
			Использование = ЗначениеЗаполнено(Значение);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, КонецДня(Значение),, Использование, Режим);
				
		ИначеЕсли Имя = "Сумма_С" Тогда
			
			Использование = (ЗначениеЗаполнено(Значение) ИЛИ Значение = 0);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.БольшеИлиРавно, Значение,, Использование, Режим);
				
		ИначеЕсли Имя = "Сумма_По" Тогда
			
			Использование = (ЗначениеЗаполнено(Значение) ИЛИ Значение = 0);
				
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, Значение,, Использование, Режим);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбработатьПересечениеПользовательскихОтборовИОтбораПоРазделу(Знач Раздел, Список)
	
	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	ВсеЭлементыПО = ЭлементыОтбора(ПользовательскийОтбор);
	
	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборПоРазделам");
	Если ГруппаОтборПоРазделам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВсеЭлементыОР = ЭлементыОтбора(ГруппаОтборПоРазделам);
	
	Для каждого ЭлементПО Из ВсеЭлементыПО Цикл
		
		Если Не ЭлементПО.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементОР Из ВсеЭлементыОР Цикл
			
			Если ЭлементПО.ЛевоеЗначение = ЭлементОР.ЛевоеЗначение Тогда
				
				ЭлементПО.Использование = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ОбработатьПересечениеПользовательскихОтборовИБыстрыхОтборов(Знач Раздел, Список) 
	
	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	ЭлементыПО = ЭлементыОтбора(ПользовательскийОтбор);
	
	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "БыстрыйОтбор");
	Если ГруппаБыстрыйОтбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЭлементыБО = ЭлементыОтбора(ГруппаБыстрыйОтбор);
	
	Для каждого ЭлементПО Из ЭлементыПО Цикл
		
		Если Не ЭлементПО.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ЭлементБО Из ЭлементыБО Цикл
			
			Если ЭлементПО.ЛевоеЗначение = ЭлементБО.ЛевоеЗначение Тогда
				
				ЭлементБО.Использование = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстКнопкиБыстрыхОтборов(Знач Раздел)
	
	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];
	
	ПользовательскийОтбор = ПользовательскийОтборСписка(Список);
	ВсеЭлементыПО = ЭлементыОтбора(ПользовательскийОтбор);
	
	// Определяем текст основной кнопки открытия настроек.
	
	КоличествоЭлементов = 0;
	Для каждого Элемент Из ВсеЭлементыПО Цикл
		Если Элемент.Использование Тогда
			КоличествоЭлементов = КоличествоЭлементов + 1;
		КонецЕсли;
	КонецЦикла;
	
	ТекстКнопкиПО = НСтр("ru = 'еще'");
	Если ЗначениеЗаполнено(КоличествоЭлементов) Тогда
		ТекстКнопкиПО = НСтр("ru = 'и еще'") + " " + Строка(КоличествоЭлементов);
	КонецЕсли;
	
	// Устанавливаем текст кнопок быстрого поиска (при пересечении с пользовательскими отборами).
	
	ПараметрыОтборовПолей = Новый Соответствие;
	ПараметрыОтборовПолей.Вставить("Организация", "Организация");
	ПараметрыОтборовПолей.Вставить("Контрагент", "Контрагент");
	ПараметрыОтборовПолей.Вставить("НаправлениеЭД", "НаправлениеЭД");
	ПараметрыОтборовПолей.Вставить("ВидЭД", "ВидЭД");
	ПараметрыОтборовПолей.Вставить("СуммаДокумента", "Сумма_С,Сумма_По");
	ПараметрыОтборовПолей.Вставить("Дата", "Дата_С,Дата_По");
	ПараметрыОтборовПолей.Вставить("ДополнительнаяИнформация", "ДополнительнаяИнформация");
	ПараметрыОтборовПолей.Вставить("ПричинаОтклонения", "ДополнительнаяИнформация");
	
	Для каждого СтрокаОтбора Из БыстрыеОтборы Цикл
		
		Если СтрокаОтбора.Параметр = "ПользовательскийОтбор" Тогда
			Если СтрокаОтбора.Кнопка <> ТекстКнопкиПО Тогда
				СтрокаОтбора.Кнопка = ТекстКнопкиПО;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ТекстКнопки = "";
		УстановленПО = Ложь;
		
		Для каждого ЭлементПО Из ВсеЭлементыПО Цикл
			
			Если Не ЭлементПО.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоля = Строка(ЭлементПО.ЛевоеЗначение);
			ПараметрыОтбора = ПараметрыОтборовПолей[ИмяПоля];
			
			Если Не ЗначениеЗаполнено(ПараметрыОтбора) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрНайти(ПараметрыОтбора, СтрокаОтбора.Параметр) <> 0 Тогда
				
				Если ЭлементПО.Родитель = Неопределено И Не УстановленПО Тогда
					
					ТекстКнопки = СтрокаОтбора.ПредставлениеПараметра
						+ " " + Строка(ЭлементПО.ВидСравнения)
						+ " " + Строка(ЭлементПО.ПравоеЗначение);
					
				Иначе
					
					ТекстКнопки = СтрокаОтбора.ПредставлениеПараметра
						+ " " + НСтр("ru = '(сложный фильтр)'");
						
				КонецЕсли;
					
				УстановленПО = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрокаОтбора.Кнопка <> ТекстКнопки Тогда
			
			СтрокаОтбора.Кнопка = ТекстКнопки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСбросаОтбора(Знач Раздел)

	ЕстьОтборы = Ложь;
	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если ЗначениеЗаполнено(Строка.Значение) ИЛИ ТипЗнч(Строка.Значение) = Тип("Число") Тогда
			ЕстьОтборы = Истина;
			Прервать;
		КонецЕсли
	КонецЦикла;
	
	Если Не ЕстьОтборы Тогда
		
		ИмяСписка = СписокРаздела(Раздел);
		Список = ЭтотОбъект[ИмяСписка];
		Отбор = ПользовательскийОтборСписка(Список);
		ВсеЭлементыОтбора = ЭлементыОтбора(Отбор);
		Для каждого ЭлементОтбора Из ВсеЭлементыОтбора Цикл
			Если ЭлементОтбора.Использование Тогда
				ЕстьОтборы = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СброситьОтбор", "Доступность", ЕстьОтборы);
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьПользовательскиеОтборы(Знач ИмяСпискаИсточника) 
	
	ТекущийСписок = ИмяСпискаИсточника;
	СписокИсточник = ЭтотОбъект[ТекущийСписок];
	ОтборИсточник = ПользовательскийОтборСписка(СписокИсточник);
	
	ВсеСписки = Новый Массив;
	ВсеСписки.Добавить("ВходящиеЭД");
	ВсеСписки.Добавить("ИсходящиеЭД");
	
	Если ВсеСписки.Найти(ТекущийСписок) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ИмяСписка Из ВсеСписки Цикл
		
		Если ИмяСписка = ТекущийСписок Тогда
			Продолжить;
		КонецЕсли;
		
		СписокПриемник = ЭтотОбъект[ИмяСписка];
		ОтборПриемник = ПользовательскийОтборСписка(СписокПриемник);
		ОтборПриемник.Элементы.Очистить();
		
		СкопироватьЭлементыОтбораРекурсивно(ОтборПриемник, ОтборПриемник, ОтборИсточник);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПользовательскийОтборПоРазделу(Знач Раздел) 
	
	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];
	
	Отбор = ПользовательскийОтборСписка(Список);
	ЕстьПользовательскийОтбор = (Отбор.Элементы.Количество() > 0);
	
	ЕстьБыстрыйОтбор = Ложь;
	Для каждого СтрокаОтбора Из БыстрыеОтборы Цикл
		
		Если ЗначениеЗаполнено(СтрокаОтбора.Значение) 
			ИЛИ (СтрокаОтбора.Тип = "Число" И СтрокаОтбора.Значение <> Неопределено) Тогда
			
			ЕстьБыстрыйОтбор = Истина;
			Прервать;
	
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ЕстьПользовательскийОтбор ИЛИ ЕстьБыстрыйОтбор;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Работа с быстрым поиском.

&НаКлиенте
Процедура ПриОкончанииНастройкиСписка(Настройки, ДопПараметры) Экспорт
	
	Раздел = ДопПараметры.Раздел;
	
	Если ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		
		ЗагрузитьПользовательскиеНастройкиПоРазделу(Раздел, Настройки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПользовательскиеНастройкиПоРазделу(Знач Раздел, Знач Настройки) 
	
	ИмяСписка = СписокРаздела(Раздел);
	Список = ЭтотОбъект[ИмяСписка];
	Список.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(Настройки);
	СинхронизироватьПользовательскиеОтборы(ИмяСписка);
	ПриИзмененииОтбораНаСервере();
	
КонецПроцедуры

&НаСервере 
Процедура СброситьПользовательскиеОтборы() 
	
	СпискиРазделов = Новый Массив;
	СпискиРазделов.Добавить(ВходящиеЭД);
	СпискиРазделов.Добавить(ИсходящиеЭД);
	СпискиРазделов.Добавить(Сформировать);
	СпискиРазделов.Добавить(ПакетыЭД);
	СпискиРазделов.Добавить(ПриглашенияЭД);
	
	Для каждого Список Из СпискиРазделов Цикл
		
		Отбор = ПользовательскийОтборСписка(Список);
		Отбор.Элементы.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбора()
	
	ПриИзмененииОтбораНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораНаСервере()
	
	ОбновитьКэшРасчетовОтбор = Истина;
	ПрименитьОтборыКРазделу(ТекущийРаздел);
	ОбновитьНавигациюПоРазделамНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СброситьОтборНаСервере() 
	
	НазваниеСправочникаКонтрагенты = ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;

	НазваниеСправочникаОрганизации = ИмяПрикладногоСправочника("Организации");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
		НазваниеСправочникаОрганизации = "Организации";
	КонецЕсли;
	
	Для Каждого Строка Из БыстрыеОтборы Цикл
		Если Строка.Тип = "Строка" Тогда
			Строка.Значение = "";
		ИначеЕсли Строка.Тип = "Дата" Тогда
			Строка.Значение = Дата(1,1,1);
		ИначеЕсли Строка.Тип = "Число" Тогда
			Строка.Значение = Неопределено;
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.ВидыЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.ВидыЭД.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаКонтрагенты Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаКонтрагенты + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка." + НазваниеСправочникаОрганизации Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник." + НазваниеСправочникаОрганизации + ".ПустаяСсылка");
		ИначеЕсли Строка.Тип = "СправочникСсылка.Пользователи" Тогда
			Строка.Значение = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		ИначеЕсли Строка.Тип = "ПеречислениеСсылка.НаправленияЭД" Тогда
			Строка.Значение = ПредопределенноеЗначение("Перечисление.НаправленияЭД.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	СброситьПользовательскиеОтборы();
	ПриИзмененииОтбораНаСервере();
	
	УстановитьДоступностьКомандыСбросаОтбора(Ложь);
	
	СохраняемыеВНастройкахДанныеМодифицированы = Истина;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Работа с фиксированным отбором.

&НаСервере
Функция ЕстьФиксированныйОтборПоРазделу(Знач ИмяРаздела)
	
	ИмяСписка = СписокРаздела(ИмяРаздела);
	Список = ЭтотОбъект[ИмяСписка];
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборУчетныхДокументов");
	Если ГруппаОтбора <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, "ОтборЭлектронныхДокументов");
	Если ГруппаОтбора <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборУчетныхДокументов(Знач Отбор)
	
	Если ТипЗнч(Отбор) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Список = Сформировать;
	ИмяГруппыОтбора = "ОтборУчетныхДокументов";
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, ИмяГруппыОтбора);
	Если ГруппаОтбора = Неопределено Тогда
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.Отбор.Элементы, ИмяГруппыОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	КонецЕсли;
	
	ГруппаОтбора.Элементы.Очистить();
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбора, "Документ." + ЭлементОтбора.Поле, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Значение,, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВходящихДокументов(Знач Отбор)
	
	Если ТипЗнч(Отбор) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Список = ВходящиеЭД;
	ИмяГруппыОтбора = "ОтборЭлектронныхДокументов";
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, ИмяГруппыОтбора);
	Если ГруппаОтбора = Неопределено Тогда
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.Отбор.Элементы, ИмяГруппыОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	КонецЕсли;
	
	ГруппаОтбора.Элементы.Очистить();
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбора, "ЭлектронныйДокумент." + ЭлементОтбора.Поле, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Значение,, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборИсходящихДокументов(Знач Отбор)
	
	Если ТипЗнч(Отбор) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Список = ИсходящиеЭД;
	ИмяГруппыОтбора = "ОтборЭлектронныхДокументов";
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(Список.Отбор.Элементы, ИмяГруппыОтбора);
	Если ГруппаОтбора = Неопределено Тогда
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			Список.Отбор.Элементы, ИмяГруппыОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	КонецЕсли;
	
	ГруппаОтбора.Элементы.Очистить();
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбора, "ЭлектронныйДокумент." + ЭлементОтбора.Поле, ЭлементОтбора.ВидСравнения, ЭлементОтбора.Значение,, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Расчет количества элементов в разделах.

&НаСервере
Процедура СброситьКэшРасчетов()
	
	Если Не (ОбновитьКэшРасчетовОбщий ИЛИ ОбновитьКэшРасчетовОтбор) Тогда
		Возврат;
	КонецЕсли;
	
	КэшРасчетов = ПолучитьИзВременногоХранилища(АдресКэшаРасчетов);
	
	Для каждого КлючЗначение Из КэшРасчетов Цикл
		
		Раздел = КлючЗначение.Ключ;
		Макеты = КлючЗначение.Значение;
		
		Если ОбновитьКэшРасчетовОбщий Тогда
			Макеты.Общий = Неопределено;
		КонецЕсли;
		Если ОбновитьКэшРасчетовОтбор Тогда
			Макеты.Отбор = Неопределено;
		КонецЕсли;
		
		КэшРасчетов.Вставить(Раздел, Макеты);
		
	КонецЦикла;
	
	ОбновитьКэшРасчетовОбщий = Ложь;
	ОбновитьКэшРасчетовОтбор = Ложь;
	
	ПоместитьВоВременноеХранилище(КэшРасчетов, АдресКэшаРасчетов);
	
КонецПроцедуры

&НаСервере
Функция МакетРасчетаПоРазделу(Знач Раздел, Знач УчитыватьПользовательскиеНастройки, КэшРасчетов)
	
	// Ищем макет в кэше.
	
	Макет = Неопределено;
	ИспользуемыйМакет = ?(УчитыватьПользовательскиеНастройки, "Отбор", "Общий");
	
	Макеты = КэшРасчетов[Раздел];
	
	Если Макеты = Неопределено Тогда
		Макеты = Новый Структура("Общий,Отбор");
	Иначе
		Макет = Макеты[ИспользуемыйМакет];
	КонецЕсли;
	
	Если Макет <> Неопределено Тогда
		Возврат Макет;
	КонецЕсли;
	
	// Не нашли в кэше, формируем новый.
	
	Форма = ЭтотОбъект;
	
	// Заполняем СписокЭД копией списка раздела, 
	// применяем к нему необходимые отборы,
	// получаем из него итоговые настройки.
	
	ИмяСписка = СписокРаздела(Раздел);
	Список = форма[ИмяСписка];
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, Список);
	ЗаполнитьЗначенияСвойств(СписокЭД, СвойстваСписка);
	
	ФиксированныеНастройки = Список.КомпоновщикНастроек.ФиксированныеНастройки;
	СписокЭД.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(ФиксированныеНастройки);
	СписокЭД.Порядок.Элементы.Очистить();
	
	Если УчитыватьПользовательскиеНастройки Тогда
		// Добавляем пользовательские настройки.
		ПользовательскиеНастройки = Список.КомпоновщикНастроек.ПользовательскиеНастройки;
		СписокЭД.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПользовательскиеНастройки);
	Иначе
		// Убираем пользовательские отборы.
		ПользовательскийОтбор = ПользовательскийОтборСписка(СписокЭД);
		ПользовательскийОтбор.Элементы.Очистить();
	КонецЕсли;
	
	ПрименитьОтборыКСпискуРаздела(Раздел, СписокЭД);
	
	Если Не УчитыватьПользовательскиеНастройки Тогда
		// Убираем быстрый поиск из настроек.
		ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(СписокЭД.Отбор.Элементы, "БыстрыйОтбор");
		ГруппаБыстрыйОтбор.Использование = Ложь;
	КонецЕсли;
	
	Настройки = СписокЭД.КомпоновщикНастроек.ПолучитьНастройки();
	
	Настройки.Порядок.Элементы.Очистить();
	Настройки.УсловноеОформление.Элементы.Очистить();
	
	// Определяем схему компоновки и меняем запрос.
	
	ИмяТаблицы = ТаблицаРаздела(Раздел);
	Таблица = Форма.Элементы[ИмяТаблицы];
	Схема = Таблица.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	СхемаЗапроса = Новый СхемаЗапроса();
	СхемаЗапроса.УстановитьТекстЗапроса(Схема.НаборыДанных[0].Запрос);
	ПоследнийЗапрос = СхемаЗапроса.ПакетЗапросов.Получить(СхемаЗапроса.ПакетЗапросов.Количество() - 1);
	Для каждого Оператор Из ПоследнийЗапрос.Операторы Цикл
		
		Оператор.КоличествоПолучаемыхЗаписей = 1000;
		ПолеСчетчик = Оператор.ВыбираемыеПоля.Добавить("1");
		
	КонецЦикла;
	КолонкаСчетчик = ПоследнийЗапрос.Колонки.Найти(ПолеСчетчик);
	КолонкаСчетчик.Псевдоним = "_Счетчик";
	
	Схема.НаборыДанных[0].Запрос = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	// Выбираем в настройках только поле-счетчик и выполняем схему.
	
	Настройки.Структура.Очистить();
	ДетальныеЗаписи = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ВыбранноеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("_Счетчик");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"), Ложь);
	
	// Помещаем рассчитанный макет в кэш
	Макеты[ИспользуемыйМакет] = Макет;
	КэшРасчетов.Вставить(Раздел, Макеты);
	
	Возврат Макет;
	
КонецФункции

&НаСервере
Процедура РассчитатьКоличествоЭлементовВРазделах(Знач ПересчитатьКоличество = Истина, Знач ПересчитатьКоличествоОтбор = Истина)
	
	Если Не (ПересчитатьКоличество ИЛИ ПересчитатьКоличествоОтбор) Тогда
		Возврат;
	КонецЕсли;
	
	СброситьКэшРасчетов();
	
	КэшРасчетов = ПолучитьИзВременногоХранилища(АдресКэшаРасчетов);
	
	Форма = ЭтотОбъект;
	
	ДанныеДляРасчета = Новый Массив;
	
	Для каждого Раздел Из ОписаниеРазделов Цикл
		
		Если Не (Раздел.РассчитыватьКоличество И Раздел.Видимость) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПересчитатьКоличество Тогда
			ЭлементРасчета = Новый Структура("Раздел, УчитыватьОтбор, Количество", Раздел.Имя, Ложь, 0);
			ДанныеДляРасчета.Добавить(ЭлементРасчета);
		КонецЕсли;
		
		Если ПересчитатьКоличествоОтбор 
			И (ЕстьПользовательскийОтборПоРазделу(Раздел.Имя)
			ИЛИ ЕстьФиксированныйОтборПоРазделу(Раздел.Имя)) Тогда
			ЭлементРасчета = Новый Структура("Раздел, УчитыватьОтбор, Количество", Раздел.Имя, Истина, 0);
			ДанныеДляРасчета.Добавить(ЭлементРасчета);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыполнитьРасчетКоличестваЭлементовВРазделах(ДанныеДляРасчета, КэшРасчетов);
	
	Для каждого ЭлементРасчета Из ДанныеДляРасчета Цикл
		
		ОтборРаздела = Новый Структура("Имя", ЭлементРасчета.Раздел);
		ВсеСтрокиРаздела = ОписаниеРазделов.НайтиСтроки(ОтборРаздела);
		
		Для каждого СтрокаРаздела Из ВсеСтрокиРаздела Цикл
			
			Если ЭлементРасчета.УчитыватьОтбор Тогда
				СтрокаРаздела.КоличествоОтбор = ЭлементРасчета.Количество;
			Иначе
				СтрокаРаздела.Количество = ЭлементРасчета.Количество;
				СтрокаРаздела.КоличествоОтбор = ЭлементРасчета.Количество;
			КонецЕсли;
			
			СтрокаРаздела.КоличествоРассчитано = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(КэшРасчетов, АдресКэшаРасчетов);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРасчетКоличестваЭлементовВРазделах(ДанныеДляРасчета, КэшРасчетов)
	
	Если Не ЗначениеЗаполнено(ДанныеДляРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЧастиТекстаЗапроса = Новый Массив;
	
	НастройкиОтображения = НастройкиОтображенияРазделов();
	
	Запрос.УстановитьПараметр("РежимОтображения",    НастройкиОтображения.РежимОтображения);
	Запрос.УстановитьПараметр("СписокПользователей", НастройкиОтображения.СписокПользователей);
	
	ПоложениеРезультатовВПакете = Новый ТаблицаЗначений;
	ПоложениеРезультатовВПакете.Колонки.Добавить("Раздел");
	ПоложениеРезультатовВПакете.Колонки.Добавить("УчитыватьОтбор");
	ПоложениеРезультатовВПакете.Колонки.Добавить("Индекс");
	
	КоличествоЗапросовВПакете = 0;
	РазделительЗапросовВПакете = 
		"
		|;
		|";
	
	Для каждого ЭлементРасчета Из ДанныеДляРасчета Цикл
		
		Если ЭлементРасчета.УчитыватьОтбор Тогда
			
			Макет = МакетРасчетаПоРазделу(ЭлементРасчета.Раздел, ЭлементРасчета.УчитыватьОтбор, КэшРасчетов);
			ТекстЗапроса = Макет.НаборыДанных[0].Запрос;
			
			// Обернем запрос в выборку количества
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РАЗРЕШЕННЫЕ", "");
			Шаблон = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(1) КАК _Счетчик
			|ИЗ
			|	(%1) КАК _ВложенныйЗапрос";
			ТекстЗапроса = СтрШаблон(Шаблон, ТекстЗапроса);
			
			// Переименовываем и устанавливаем параметры запроса.
			
			Префикс = СтрШаблон("%1_%2_", ЭлементРасчета.Раздел, Формат(ЭлементРасчета.УчитыватьОтбор, "БЛ=Ложь; БИ=Истина"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&", "&" + Префикс);
			
			Для каждого Параметр Из Макет.ЗначенияПараметров Цикл
				Запрос.УстановитьПараметр(Префикс + Параметр.Имя, Параметр.Значение);
			КонецЦикла;
			
		Иначе
			
			ТекстЗапроса = ТекстЗапросаКоличестваЭлементовПоРазделуБезОтбора(
				ЭлементРасчета.Раздел, НастройкиОтображения.ОтправлятьВходящиеДокументыНаУтверждение);
			Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Добавляем уничтожение временных таблиц, чтобы избежать конфликта имен.
		
		КоличествоВТ = ДобавитьУничтожениеВременныхТаблицВЗапрос(ТекстЗапроса);
		
		Если ЗначениеЗаполнено(ЧастиТекстаЗапроса) Тогда
			ЧастиТекстаЗапроса.Добавить(РазделительЗапросовВПакете);
		КонецЕсли;
		
		ТекстЗапросаВПакете = СтрШаблон(
			"////////////////////////////////////////////////////////////////////////////
			|// %1 (%2)
			|
			|%3", ЭлементРасчета.Раздел, ЭлементРасчета.УчитыватьОтбор, ТекстЗапроса);
		ЧастиТекстаЗапроса.Добавить(ТекстЗапросаВПакете);
		
		// Вычисляем положение результата по разделу в пакете.
			
		КоличествоЗапросовВПакете = КоличествоЗапросовВПакете + 1 + КоличествоВТ * 2;
		
		СтрокаПоложения = ПоложениеРезультатовВПакете.Добавить();
		СтрокаПоложения.Раздел = ЭлементРасчета.Раздел;
		СтрокаПоложения.УчитыватьОтбор = ЭлементРасчета.УчитыватьОтбор;
		СтрокаПоложения.Индекс = КоличествоЗапросовВПакете - КоличествоВТ - 1;
		
	КонецЦикла;
	
	// Заполняем результаты по разделам по данным пакета.
	Запрос.Текст = СтрСоединить(ЧастиТекстаЗапроса);
	Результаты = Запрос.ВыполнитьПакет();
	
	Для каждого ЭлементРасчета Из ДанныеДляРасчета Цикл
		
		ОтборСтрок = Новый Структура("Раздел,УчитыватьОтбор");
		ЗаполнитьЗначенияСвойств(ОтборСтрок, ЭлементРасчета);
		
		НайденныеСтроки = ПоложениеРезультатовВПакете.НайтиСтроки(ОтборСтрок);
		Если Не ЗначениеЗаполнено(НайденныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексРезультата = НайденныеСтроки[0].Индекс;
		
		Результат = Результаты[ИндексРезультата];
		
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		Выборка = Результат.Выбрать();
		КоличествоЭлементов = 0;
		Пока Выборка.Следующий() Цикл
			КоличествоЭлементов = КоличествоЭлементов + Выборка._Счетчик;
		КонецЦикла;
		ЭлементРасчета.Количество = КоличествоЭлементов;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ПоказатьЭлементыРаздела(Знач Раздел)
	
	Элементы.ВходящиеЭД.КартинкаСтрок = БиблиотекаКартинок.КонтрольОтраженияВУчетеЭДО;
	Элементы.ГруппаЛегенда.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСЗапросами

&НаСервере
Функция ДобавитьУничтожениеВременныхТаблицВЗапрос(ТекстЗапроса) 
	
	ВременныеТаблицы = Новый Массив;
	КоличествоВременныхТаблиц = 0;
	
	Схема = Новый СхемаЗапроса;
	Схема.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Для каждого ТекущийЗапрос Из Схема.ПакетЗапросов Цикл
		Если ТипЗнч(ТекущийЗапрос) = Тип("ЗапросВыбораСхемыЗапроса") Тогда
			// Добавляем временную таблицу на уничтожение.
			Если ЗначениеЗаполнено(ТекущийЗапрос.ТаблицаДляПомещения) Тогда
				ВременныеТаблицы.Добавить(ТекущийЗапрос.ТаблицаДляПомещения);
				КоличествоВременныхТаблиц = КоличествоВременныхТаблиц + 1;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущийЗапрос) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
			Индекс = ВременныеТаблицы.Найти(ТекущийЗапрос.ИмяТаблицы);
			// Уже есть уничтожение временной таблицы.
			Если Индекс <> Неопределено Тогда
				ВременныеТаблицы.Удалить(Индекс);
				КоличествоВременныхТаблиц = КоличествоВременныхТаблиц - 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИмяТаблицы Из ВременныеТаблицы Цикл
		
		ЗапросУничтоженияВТ = Схема.ПакетЗапросов.Добавить(Тип("ЗапросУничтоженияТаблицыСхемыЗапроса"));
		ЗапросУничтоженияВТ.ИмяТаблицы = ИмяТаблицы;
		
	КонецЦикла;
	
	ТекстЗапроса = Схема.ПолучитьТекстЗапроса();
	
	Возврат КоличествоВременныхТаблиц;
	
КонецФункции

#КонецОбласти

#Область РаботаСОтборами

&НаСервереБезКонтекста 
Функция ПолеДоступноДляОтбора(Знач Отбор, Знач Поле) 
	
	Если Поле = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	ДоступноеПоле = Отбор.ДоступныеПоляОтбора.НайтиПоле(Поле);
	
	Возврат (ДоступноеПоле <> Неопределено);
	
КонецФункции

&НаСервереБезКонтекста 
Функция ПользовательскийОтборСписка(Знач Список) 
	
	ИдентификаторНастройки = Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки;
	ПользовательскийОтбор = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдентификаторНастройки);
	
	Если ПользовательскийОтбор = Неопределено Тогда
		ПользовательскийОтбор = Новый ОтборКомпоновкиДанных();
	КонецЕсли;
	
	Возврат ПользовательскийОтбор;
	
КонецФункции

&НаСервереБезКонтекста 
Функция ЭлементыОтбора(Знач Отбор)
	
	НайденныеЭлементы = Новый Массив;
	
	Если Отбор = Неопределено Тогда
		Возврат НайденныеЭлементы;
	КонецЕсли;
	
	Для каждого Элемент Из Отбор.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			НайденныеЭлементыГруппы = ЭлементыОтбора(Элемент);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НайденныеЭлементы, НайденныеЭлементыГруппы);
			
		Иначе
			
			НайденныеЭлементы.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныеЭлементы;
	
КонецФункции

&НаСервереБезКонтекста 
Процедура СкопироватьЭлементыОтбораРекурсивно(Отбор, Приемник, Источник) 
	
	Для каждого ЭлементОтбора Из Источник.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			
			ГруппаПриемник = Приемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ГруппаПриемник, ЭлементОтбора);
				
			СкопироватьЭлементыОтбораРекурсивно(Отбор, ГруппаПриемник, ЭлементОтбора);
			
		Иначе
			
			ИмяПоля = Строка(ЭлементОтбора.ЛевоеЗначение);
			
			Если Не ПолеДоступноДляОтбора(Отбор, ИмяПоля) Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				Приемник, ИмяПоля, ЭлементОтбора.ПравоеЗначение, ЭлементОтбора.ВидСравнения, 
				ЭлементОтбора.Представление, ЭлементОтбора.Использование, ЭлементОтбора.РежимОтображения, 
				ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиАсинхронныхДиалогов

&НаКлиенте
Процедура ИзменитьРежимПросмотраОкончание(ВыбранныйРежим, ДополнительныеПараметры) Экспорт

	Если ВыбранныйРежим <> Неопределено Тогда
		
		РежимОтображения = ВыбранныйРежим;
		
		РежимОтображенияПриИзмененииНаСервере();
		
		ПерейтиВТекущийРаздел();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашениеОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстОперации = Результат.КонтекстОперации;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Отправка приглашений получателям'");
		
		ОтправленоПриглашений = 0;
		КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
		ОтправитьПриглашенияСервер(ОтправленоПриглашений, ДополнительныеПараметры, СоответствиеПрофилейИПараметровСертификатов, КонтекстОперации);
		
		ШаблонСообщения = НСтр("ru = 'Отправлено приглашений: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОтправленоПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьНавигациюПоРазделам();
		
		ТекстОшибки = НСтр("ru = 'При отправке приглашений'");
		КонтекстОперации.ЗаголовокОперации = ТекстОшибки;
		ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
		
	Иначе 
		Если Не ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьОшибки(КонтекстОперации) Тогда
			Для каждого Идентификатор Из ДополнительныеПараметры Цикл
				Если ОбменСКонтрагентамиСлужебныйКлиент.ПользовательОтказалсяОтАутентификации(Результат, Идентификатор.ИдентификаторОрганизации) Тогда
					ТекстОшибки = НСтр("ru = 'Аутентификация в сервисе не была выполнена. Отправка приглашения не была произведена.'");
				Иначе 
					ТекстОшибки = НСтр("ru = 'При отправке приглашений возникли ошибки.
					|Необходимо выполнить проверку учетной записи ЭДО.'");
				КонецЕсли;
			КонецЦикла;
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаПриглашениеПослеПолученияМаркера(Результат, Контекст) Экспорт 
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстОперации = Результат.КонтекстОперации;
	
	СоответствиеПрофилейИПараметровСертификатов = "";
	
	Если Результат.Свойство("СоответствиеПрофилейИПараметровСертификатов", СоответствиеПрофилейИПараметровСертификатов)
		И ЗначениеЗаполнено(СоответствиеПрофилейИПараметровСертификатов) Тогда
		
		ПриглашениеПринято = Ложь;
		Если Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Принять() Тогда
			ПриглашениеПринято = Истина;
			ТекстЗаголовка = НСтр("ru = 'Принимаются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Принято приглашений: %1'");
			ТекстОшибки = НСтр("ru = 'При принятии приглашений возникли ошибки.'");
			КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'При принятии приглашений'");
		ИначеЕсли Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Отклонить() Тогда
			ТекстЗаголовка = НСтр("ru = 'Отклоняются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Отклонено приглашений: %1'");
			ТекстОшибки = НСтр("ru = 'При отклонении приглашений возникли ошибки.'");
			КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'При отклонении приглашений'");
		ИначеЕсли Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Отозвать() Тогда
			ТекстЗаголовка = НСтр("ru = 'Отзываются приглашения'");
			ШаблонСообщения = НСтр("ru = 'Отозвано приглашений: %1'");
			ТекстОшибки = НСтр("ru = 'При отзыве приглашений возникли ошибки.'");
			КонтекстОперации.ЗаголовокОперации = НСтр("ru = 'При отзыве приглашений'");
		КонецЕсли;
		
		КоличествоОтклоненныхПриглашений = 0;
		ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоОтклоненныхПриглашений, Контекст.ВыбранныеИдентификаторы,
			СоответствиеПрофилейИПараметровСертификатов, ПриглашениеПринято, КонтекстОперации, Контекст.ПричинаОтказаОтПриглашения);
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, КоличествоОтклоненныхПриглашений);
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка, , ТекстСообщения);
		
		ОбновитьНавигациюПоРазделам();
	Иначе  
		Если Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Принять() Тогда
			ТекстОшибкиАутентификация = НСтр("ru = 'Аутентификация в сервисе не была выполнена. Принятие приглашения не было произведено.'");
		ИначеЕсли Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Отклонить() Тогда
			ТекстОшибкиАутентификация = НСтр("ru = 'Аутентификация в сервисе не была выполнена. Отклонение приглашения не было произведено.'");
		ИначеЕсли Контекст.ОтветНаПриглашение = ОтветНаПриглашение_Отозвать() Тогда
			ТекстОшибкиАутентификация = НСтр("ru = 'Аутентификация в сервисе не была выполнена. Отзыв приглашения не был произведен.'");
		Иначе 
			ТекстОшибкиАутентификация = НСтр("ru = 'Аутентификация в сервисе не была выполнена.'");
		КонецЕсли;
		
		Если Не ОбменСКонтрагентамиДиагностикаКлиентСервер.ЕстьОшибки(КонтекстОперации) Тогда
			Для каждого Идентификатор Из Контекст.ВыбранныеИдентификаторы Цикл
				Если ОбменСКонтрагентамиСлужебныйКлиент.ПользовательОтказалсяОтАутентификации(Результат, Идентификатор.ИдентификаторОрганизации) Тогда
					ТекстОшибки = ТекстОшибкиАутентификация;
				Иначе 
					ТекстОшибки = НСтр("ru = 'Необходимо выполнить проверку учетной записи ЭДО.'");
				КонецЕсли;
			КонецЦикла;
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
	РазблокироватьЗаблокированныеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакетыОповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеПрофилейИПараметровСертификатов = Результат.СоответствиеПрофилейИПараметровСертификатов;
	
	МассивПЭД = ДополнительныеПараметры.МассивЭД;
	ОтправленныеДокументы = Новый Массив;
	КоличествоОтправленных = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправкаПакетовЭД(МассивПЭД, СоответствиеПрофилейИПараметровСертификатов, ОтправленныеДокументы, Результат.КонтекстОперации);
	
	ПараметрыОповещения = Новый Структура("ЭлектронныеДокументы", ОтправленныеДокументы);
	Оповестить("ОбновитьСостояниеЭД", ПараметрыОповещения);
	
	ШаблонОповещения = НСтр("ru = 'Отправлено пакетов: (%1).'");
	ТекстОповещения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОповещения, КоличествоОтправленных);

	ЗаголовокОповещения = НСтр("ru = 'Отправка электронных документов'");
	ПоказатьОповещениеПользователя(ЗаголовокОповещения, , ТекстОповещения);
	
	ПараметрыОбработкиОшибок = ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.НовыеПараметрыОбработкиОшибок();
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(Результат.КонтекстОперации, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственногоОповещение(Знач Результат, Знач ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОбновитьДинамическиеСписки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьПодписаниеИсхОповещение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Истина Тогда
		ОбновитьНавигациюПоРазделам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаПричиныОтказаОтПриглашения(РезультатВвода, Контекст) Экспорт
	
	Если РезультатВвода = Неопределено Тогда
		РазблокироватьЗаблокированныеЭлементыФормы();
		Возврат;
	КонецЕсли;
	
	Контекст.Вставить("ПричинаОтказаОтПриглашения", РезультатВвода);
	ОбработчикОповещения = Новый ОписаниеОповещения(
		"ОтправитьОтветНаПриглашениеПослеПолученияМаркера", ЭтотОбъект, Контекст);
		
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(
		ОбработчикОповещения, Контекст.ИдентификаторыОрганизаций,,, КонтекстОперации);
	
КонецПроцедуры
	
#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПриИзмененииУтвержденияВходящихДокументов()
	
	ОтправлятьВходящиеДокументыНаУтверждение = ОбменСКонтрагентамиСлужебный.ОтправлятьВходящиеДокументыНаУтверждение();
	Если Не ОтправлятьВходящиеДокументыНаУтверждение Тогда
		Элементы.КомандаУтвердитьПодписатьИОтправить.Заголовок = НСтр("ru = 'Подписать и отправить'");
	КонецЕсли;
	ИнициализироватьДерево();
	ОбновитьВидимостьРазделовДерева(ДеревоДействий, РежимОтображения);
	НастроитьСпискиРазделов();
	ПоказатьРаздел("Входящие");
	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	ОбновитьНавигациюПоРазделамНаСервере(Истина, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыЗначение.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Формат", "ЧН=");

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыЗначение.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыПредставлениеПараметра.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Сформировать";
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидЭД");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("НаправлениеЭД");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Отправить";
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидЭД");
	СписокЗначений.Добавить("НаправлениеЭД");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("Сумма_С");
	СписокЗначений.Добавить("Сумма_По");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТекущийРаздел");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Распаковать";
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидЭД");
	СписокЗначений.Добавить("НаправлениеЭД");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("Сумма_С");
	СписокЗначений.Добавить("Сумма_По");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмяТекущейСтраницы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "СтраницаНаРучномРазборе";


	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Параметр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить("ВидЭД");
	СписокЗначений.Добавить("НаправлениеЭД");
	СписокЗначений.Добавить("ДополнительнаяИнформация");
	СписокЗначений.Добавить("Сумма_С");
	СписокЗначений.Добавить("Сумма_По");
	СписокЗначений.Добавить("Контрагент");
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;
	

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НедоступныеДанныеЭДЦвет);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДействийДействие.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДействий.ТребуетсяОбработка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , Истина, Ложь, Ложь, Ложь, ));
	
	
	// Скрытие строк дерева действий
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДействийДействие.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДействийНомерКартинки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДействий.Скрыть");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость колонок редактирования быстрого отбора
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыПредставлениеПараметра.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Кнопка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Видимость колонки с кнопкой
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыКнопка.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Кнопка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Условное оформление списков документов.
	
	Элемент = ВходящиеЭД.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОтражениеВУчете");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("КонтрольОтраженияВУчете");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 3;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	
	// Приглашения
	
	Элемент = ПриглашенияЭД.УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("СтатусПодключения");
	
	ГруппаОтбораПриглашения = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораПриглашения.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборПриглашенийСтатусПодключения = ГруппаОтбораПриглашения.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПриглашенийСтатусПодключения.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусПодключения");
	ОтборПриглашенийСтатусПодключения.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборПриглашенийСтатусПодключения.ПравоеЗначение = Перечисления.СтатусыПриглашений.ОжидаемСогласия;
	
	ОтборПриглашенийОператорЭДО = ГруппаОтбораПриглашения.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборПриглашенийОператорЭДО.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОператорЭДО");
	ОтборПриглашенийОператорЭДО.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборПриглашенийОператорЭДО.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Настройка роуминга'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПредложениеОбАннулировании(ОтклонитьАннулирование)
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	Для Каждого ЭД Из МассивСсылок Цикл
		ОбменСКонтрагентамиСлужебныйКлиент.ОбработатьПредложениеОбАннулировании(ЭД, ОтклонитьАннулирование);
	КонецЦикла;
	Если МассивСсылок.Количество() > 0 Тогда
		ОбновитьНавигациюПоРазделам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДанныеВыделенныхСтрокРаздела(Знач Раздел, Знач ПутьКДанным, ПолучатьКлючСтроки = Ложь)
	
	МассивДанных = Новый Массив;
	ИспользоватьМассивРеквизитов = Ложь;
	
	ИмяТаблицы = ТаблицаРаздела(Раздел);
	Таблица = Элементы[ИмяТаблицы];
	
	Реквизиты = СтрЗаменить(ПутьКДанным, " ", "");
	МассивРеквизитов = СтрРазделить(Реквизиты, ",", Ложь);
	
	Если МассивРеквизитов.Количество() > 1 Или ПолучатьКлючСтроки Тогда
		ИспользоватьМассивРеквизитов = Истина;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Таблица.ВыделенныеСтроки Цикл
		
		Данные = Таблица.ДанныеСтроки(СтрокаТаблицы);
		Если Данные = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИспользоватьМассивРеквизитов Тогда
			
			Результат = Новый Структура;
			
			Для Каждого Реквизит Из МассивРеквизитов Цикл
				Результат.Вставить(Реквизит, Данные[Реквизит]);
			КонецЦикла;
			Результат.Вставить("КлючСтроки", СтрокаТаблицы);
			МассивДанных.Добавить(Результат);
			
		Иначе
			МассивДанных.Добавить(Данные[ПутьКДанным]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивДокументов(Знач МассивКлючей)
	
	МассивВозврата = Новый Массив;
	Для Каждого Запись Из МассивКлючей Цикл
		МассивВозврата.Добавить(Запись.СсылкаНаОбъект);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Процедура ОбновитьДинамическиеСписки(ПеречитыватьДанные = Истина)
	
	ИмяСписка = СтрЗаменить(Элементы.ПанельСписков.ТекущаяСтраница.Имя, "Страница", "");
	
	Если ПеречитыватьДанные Тогда
		Элементы[ИмяСписка].Обновить();
	Иначе
		Элементы[ИмяСписка].ТекущаяСтрока = Элементы[ИмяСписка].ТекущаяСтрока;
	КонецЕсли;
	

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусПакетов(Знач МассивЭД, Знач СтатусПакета, КоличествоИзмененных, КонтекстОперации)
	
	КоличествоИзмененных = 0;
	Для Каждого СтрокаТаблицы Из МассивЭД Цикл
		НачатьТранзакцию();
		Попытка
			Пакет = ЭлектронноеВзаимодействиеСлужебный.ОбъектПоСсылкеДляИзменения(СтрокаТаблицы.Ссылка);
			Пакет.СтатусПакета = СтатусПакета;
			Пакет.Записать();
			КоличествоИзмененных = КоличествоИзмененных + 1;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОперации  = НСтр("ru = 'Изменение статуса пакетов ЭД'");
			ДополнительныеПараметрыОшибки = Новый Структура;
			ДополнительныеПараметрыОшибки.Вставить("СсылкаНаОбъект", СтрокаТаблицы.Ссылка);
			Ошибка = ЭлектронноеВзаимодействиеОбработкаОшибокКлиентСервер.НоваяОшибка(ТекстОперации,
				ОбменСКонтрагентамиДиагностика.ВидОшибкиНеизвестнаяОшибка(),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
				ДополнительныеПараметрыОшибки);
			ЭлектронноеВзаимодействиеОбработкаОшибок.ДобавитьОшибку(КонтекстОперации, Ошибка);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДерево()

	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	Дерево.Строки.Очистить();
	
	СтрокаВходящие = Дерево.Строки.Добавить();
	СтрокаВходящие.Значение = "Входящие";
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НовЗапись = СтрокаВходящие.Строки.Добавить();
		НовЗапись.Значение = "Обработать";
	КонецЕсли;
	Если ОтправлятьВходящиеДокументыНаУтверждение Тогда
		НовЗапись = СтрокаВходящие.Строки.Добавить();
		НовЗапись.Значение = "Утвердить";
	КонецЕсли;
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаВходящие.Строки.Добавить();
		НовЗапись.Значение = "Подписать";
	КонецЕсли;
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НовЗапись = СтрокаВходящие.Строки.Добавить();
		НовЗапись.Значение = "Исправить";
	КонецЕсли;
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "Аннулировать";
	НовЗапись = СтрокаВходящие.Строки.Добавить();
	НовЗапись.Значение = "НаКонтроле";

	СтрокаИсходящие = Дерево.Строки.Добавить();
	СтрокаИсходящие.Значение = "Исходящие";
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НовЗапись = СтрокаИсходящие.Строки.Добавить();
		НовЗапись.Значение = "Сформировать";
	КонецЕсли;
	Если ИспользоватьЭП Тогда
		НовЗапись = СтрокаИсходящие.Строки.Добавить();
		НовЗапись.Значение = "ПодписатьИсх";
	КонецЕсли;
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НовЗапись = СтрокаИсходящие.Строки.Добавить();
		НовЗапись.Значение = "ИсправитьИсх";
	КонецЕсли;
	
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "АннулироватьИсх";
	НовЗапись = СтрокаИсходящие.Строки.Добавить();
	НовЗапись.Значение = "НаКонтролеИсх";
	
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		НовЗапись = Дерево.Строки.Добавить();
		НовЗапись.Значение = "НоменклатураКонтрагентов";
	КонецЕсли;
	
	НовЗапись = Дерево.Строки.Добавить();
	НовЗапись.Значение = "Ознакомиться";
	
	Если Не ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда

		НовЗапись = Дерево.Строки.Добавить();
		НовЗапись.Значение = "Отправить";
		НовЗапись = Дерево.Строки.Добавить();
		НовЗапись.Значение = "Распаковать";
		НовЗапись = Дерево.Строки.Добавить();
		НовЗапись.Значение = "Ошибки";
		
		СтрокаПриглашения = Дерево.Строки.Добавить();
		СтрокаПриглашения.Значение = "Приглашения";
		НовЗапись = СтрокаПриглашения.Строки.Добавить();
		НовЗапись.Значение = "ТребуетсяПригласить";
		НовЗапись = СтрокаПриглашения.Строки.Добавить();
		НовЗапись.Значение = "ЖдемСогласия";
		НовЗапись = СтрокаПриглашения.Строки.Добавить();
		НовЗапись.Значение = "ТребуетсяСогласие";
		НовЗапись = СтрокаПриглашения.Строки.Добавить();
		НовЗапись.Значение = "ПриглашенияОзнакомиться";
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДействий");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	НазваниеСправочникаКонтрагенты = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Контрагенты");
	Если Не ЗначениеЗаполнено(НазваниеСправочникаКонтрагенты) Тогда
		НазваниеСправочникаКонтрагенты = "Контрагенты";
	КонецЕсли;
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	Если ИспользуетсяНесколькоОрганизацийЭД Тогда
		
		НазваниеСправочникаОрганизации = ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника("Организации");
		Если Не ЗначениеЗаполнено(НазваниеСправочникаОрганизации) Тогда
			НазваниеСправочникаОрганизации = "Организации";
		КонецЕсли;
		
		НоваяСтрока = БыстрыеОтборы.Добавить();
		НоваяСтрока.Параметр = "Организация";
		НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Организация:'");
		НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаОрганизации;
		НоваяСтрока.Значение = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("Организации");
		НоваяСтрока.Кнопка = "";
	КонецЕсли;
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Контрагент";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Контрагент:'");
	НоваяСтрока.Тип = "СправочникСсылка."+ НазваниеСправочникаКонтрагенты;
	НоваяСтрока.Значение = ОбменСКонтрагентамиПовтИсп.ПолучитьПустуюСсылку("Контрагенты");
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Дата_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.Значение = Дата(1,1,1);
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_С";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма с:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "Сумма_По";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Сумма по:'");
	НоваяСтрока.Тип = "Число";
	НоваяСтрока.Значение = Неопределено;
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ВидЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид документа:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ВидыЭД";
	НоваяСтрока.Значение = Перечисления.ВидыЭД.ПустаяСсылка();
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "НаправлениеЭД";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Направление:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.НаправленияЭД";
	НоваяСтрока.Значение = Перечисления.НаправленияЭД.ПустаяСсылка();
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ДополнительнаяИнформация";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Доп. информация:'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	НоваяСтрока.Кнопка = "";
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = "ПользовательскийОтбор";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дополнительно'");
	НоваяСтрока.Тип = "Строка";
	НоваяСтрока.Значение = "";
	НоваяСтрока.Кнопка = "еще";
	
КонецПроцедуры

&НаСервере
Процедура РежимОтображенияПриИзмененииНаСервере()
	
	ОбновитьВидимостьРазделовДерева(ДеревоДействий, РежимОтображения);
	ОбновитьНавигациюПоРазделамНаСервере();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ИзменитьНазваниеКнопкиНастройкиОтображения();
	Иначе
		ОбновитьЗаголовокФормы();
	КонецЕсли;
	
	НастроитьСпискиРазделов();
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ПрименитьОтборыКРазделу(ТекущийРаздел);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()

	Если РежимОтображения = "КИсполнению" Тогда
		СуффиксЗаголовка = НСтр("ru = 'к исполнению'");
	ИначеЕсли РежимОтображения = "МоиДокументы" Тогда 
		СуффиксЗаголовка = НСтр("ru = 'мои документы'");
	ИначеЕсли РежимОтображения = "ВсеДокументы" Тогда 
		СуффиксЗаголовка = НСтр("ru = 'весь документооборот'");
	Иначе
		СуффиксЗаголовка = "";
	КонецЕсли;
	
	Заголовок = СтрШаблон(НСтр("ru = 'Текущие дела ЭДО (%1)'"), СуффиксЗаголовка);

КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьРазделовДерева(Дерево, РежимОтображения)
	
	РазделыСПеременнойВидимостью = Новый Структура;
	
	Скрыть = РежимОтображения = "КИсполнению";
	РазделыСПеременнойВидимостью.Вставить("НаКонтроле", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("НаКонтролеИсх", Скрыть);
	
	Скрыть = РежимОтображения = "МоиДокументы";
	РазделыСПеременнойВидимостью.Вставить("Сформировать", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("Приглашения", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ТребуетсяПригласить", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ТребуетсяСогласие", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ПриглашенияОзнакомиться", Скрыть);
	
	Скрыть = РежимОтображения <> "ВсеДокументы";
	РазделыСПеременнойВидимостью.Вставить("Отправить", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("Распаковать", Скрыть);
	РазделыСПеременнойВидимостью.Вставить("ЖдемСогласия", Скрыть);
	
	Скрыть = Не ИспользоватьЭП;
	РазделыСПеременнойВидимостью.Вставить("Подписать", Скрыть);
	
	Скрыть = Не ОбменСКонтрагентамиСлужебный.ИспользоватьОзнакомлениеСЭД();
	РазделыСПеременнойВидимостью.Вставить("Ознакомиться", Скрыть);
	
	Для Каждого Раздел Из РазделыСПеременнойВидимостью Цикл
		УстановитьЗначениеРеквизитаДерева(Дерево, Раздел.Ключ, "Скрыть", Раздел.Значение);
	КонецЦикла;
	
	Для каждого Раздел Из ОписаниеРазделов Цикл
		
		Скрыть = Ложь;
		Если РазделыСПеременнойВидимостью.Свойство(Раздел.Имя, Скрыть) Тогда
			Раздел.Видимость = Не Скрыть;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеРеквизитаДерева(Дерево, ИмяДействия, ИмяРеквизита, Значение, Установлено = Ложь)

	Для Каждого ПодчиненнаяСтрока Из Дерево.ПолучитьЭлементы() Цикл
		Если ПодчиненнаяСтрока.Значение = ИмяДействия Тогда
			ПодчиненнаяСтрока[ИмяРеквизита] = Значение;
			Установлено = Ложь;
		Иначе
			УстановитьЗначениеРеквизитаДерева(ПодчиненнаяСтрока, ИмяДействия, ИмяРеквизита, Значение, Установлено);
		КонецЕсли;
		
		Если Установлено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтменен(МассивЭД)
	
	КонтекстОперации = ЭлектронноеВзаимодействиеСлужебныйКлиент.НовыйКонтекстОперации();
	Количество = 0;
	УстановитьСтатусПакетов(МассивЭД, ПредопределенноеЗначение("Перечисление.СтатусыПакетовЭД.Отменен"), Количество, КонтекстОперации);
	ТекстОповещения = НСтр("ru = 'Изменен статус пакетов на ""Отменен"": (%1)'");
	ТекстОповещения = СтрЗаменить(ТекстОповещения, "%1", Количество);
	ПоказатьОповещениеПользователя(НСтр("ru = 'Обмен электронными документами'"), , ТекстОповещения);
	ОбновитьНавигациюПоРазделам();
	ЭлектронноеВзаимодействиеОбработкаОшибокКлиент.ОбработатьОшибки(КонтекстОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(МассивЭД)
	
	ОбработкаОповещения = Новый ОписаниеОповещения("УстановитьОтветственногоОповещение", ЭтотОбъект);
	ОбменСКонтрагентамиСлужебныйКлиент.ИзменитьОтветственного(МассивЭД, ОбработкаОповещения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтборы(Знач ИмяФормы, Знач Ключ, Знач Значение)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяФормы, Ключ, Значение.Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВидовДокументовДляОтбора()
	
	МассивВидовДокументов =  ОбменСКонтрагентамиСлужебный.ВидыДокументовДляОтбораВСписках();
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(МассивВидовДокументов);
	Возврат СписокВозврата;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступностьКомандыСбросаОтбора(Доступность)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СброситьОтбор", "Доступность", Доступность);
	
КонецПроцедуры

&НаСервере
Функция ИмяПрикладногоСправочника(Название)
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйПовтИсп.ИмяПрикладногоСправочника(Название);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьОтправкуПриглашенийВАрхив()
	
	ВыбранныеИдентификаторы = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ИдентификаторОрганизации, ИдентификаторКонтрагента");
	
	Если ВыбранныеИдентификаторы.Количество() > 0 Тогда
		
		Счетчик = ОбменСКонтрагентамиСлужебныйВызовСервера.ОтправитьПриглашенияВАрхив(ВыбранныеИдентификаторы);
		
		Если Счетчик > 0 Тогда
			Строка = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
					НСтр("ru = ';%1 приглашение;;%1 приглашения;%1 приглашений;%1 приглашения'"),
					Счетчик);
			Шаблон = НСтр("ru = 'В архив отправлено %1'");
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Успешно'"),, СтрШаблон(Шаблон, Строка));
		КонецЕсли;
		
		ОбновитьНавигациюПоРазделам();
		РазблокироватьЗаблокированныеЭлементыФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПринятиеПриглашений()
	
	ОтправитьОтветНаПриглашения(ОтветНаПриглашение_Принять());
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтклонениеПриглашений()
	
	ОтправитьОтветНаПриглашения(ОтветНаПриглашение_Отклонить());
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьОтзывПриглашений()
	
	ОтправитьОтветНаПриглашения(ОтветНаПриглашение_Отозвать());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьОтветНаПриглашения(ОтветНаПриглашение)
	
	ОчиститьСообщения();
	ВыбранныеИдентификаторы = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "ИдентификаторОрганизации, ИдентификаторКонтрагента, СпособОбменаЭД, НовыйКонтрагент");
	ИдентификаторыОрганизаций = Новый Массив;
	ПриглашенияТребуетсяПричина = Новый Массив;
	
	Для Каждого Идентификатор Из ВыбранныеИдентификаторы Цикл
		
		Если ИдентификаторыОрганизаций.Найти(Идентификатор.ИдентификаторОрганизации) = Неопределено Тогда
			
			ИдентификаторыОрганизаций.Добавить(Идентификатор.ИдентификаторОрганизации);
			
		КонецЕсли;
		
		Если (ОтветНаПриглашение = ОтветНаПриглашение_Отклонить() Или ОтветНаПриглашение = ОтветНаПриглашение_Отозвать())
			И ОбменСКонтрагентамиСлужебныйКлиент.ТребуетсяУказаниеПричиныОтказаОтПриглашения(Идентификатор.СпособОбменаЭД)
			И ПриглашенияТребуетсяПричина.Найти(Идентификатор.КлючСтроки) = Неопределено Тогда
			
			ПриглашенияТребуетсяПричина.Добавить(Идентификатор.КлючСтроки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИдентификаторыОрганизаций.Количество() > 0 Тогда
		
		Контекст = Новый Структура;
		Контекст.Вставить("ВыбранныеИдентификаторы", ВыбранныеИдентификаторы);
		Контекст.Вставить("ОтветНаПриглашение", ОтветНаПриглашение);
		Контекст.Вставить("ИдентификаторыОрганизаций", ИдентификаторыОрганизаций);

		
		Оповещение = Новый ОписаниеОповещения("ПослеВводаПричиныОтказаОтПриглашения", ЭтотОбъект, Контекст);
		Если ПриглашенияТребуетсяПричина.Количество() Тогда
			ДополнительныеПараметрыВводаСтроки = ОбменСКонтрагентамиСлужебныйКлиент.ДополнительныеПараметрыВводаСтроки();
			ДополнительныеПараметрыВводаСтроки.Данные = ПриглашенияТребуетсяПричина;
			ДополнительныеПараметрыВводаСтроки.ПредставлениеДанных = НСтр("ru = 'Приглашения'");
			ДополнительныеПараметрыВводаСтроки.ОбработчикПолученияПредставлений =
				"РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ПредставленияПриглашений";
			ДополнительныеПараметрыВводаСтроки.Многострочность = Истина;
			ДополнительныеПараметрыВводаСтроки.Обязательность = Истина;
			ДополнительныеПараметрыВводаСтроки.ЗаголовокФормы = НСтр("ru = 'Укажите причину отказа от приглашения'");
			ОбменСКонтрагентамиСлужебныйКлиент.ПоказатьВводСтрокиБЭД(Оповещение, ДополнительныеПараметрыВводаСтроки);
		Иначе 
			ВыполнитьОбработкуОповещения(Оповещение, "");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандаПодписать()
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	ПодписатьИОтправить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандаПодписатьИсх()
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	ПроверитьВозможностьПодписанияДокументов(МассивСсылок);
	
	ПодписатьИОтправить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУтвердитьПодписатьИОтправить()
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	ПодписатьИОтправить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьУтвердитьПодписатьИОтправитьИсх()
	
	МассивСсылок = ДанныеВыделенныхСтрокРаздела(ТекущийРаздел, "Ссылка");
	
	ПодписатьИОтправить(МассивСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьИОтправить(ПараметрКоманды)
	
	МассивСсылок = ЭлектронноеВзаимодействиеСлужебныйКлиент.МассивПараметров(ПараметрКоманды);
	Если ЗначениеЗаполнено(МассивСсылок) Тогда
		ОбменСКонтрагентамиКлиент.СформироватьПодписатьОтправитьЭД(Неопределено, МассивСсылок);
		ОбновитьНавигациюПоРазделам();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтправитьПриглашенияСервер(ОтправленоПриглашений, ВыбранныеИдентификаторы, СоответствиеПрофилейНастроекЭДОМаркерам, КонтекстОперации)
	
	ПараметрыПроцедуры = Новый Структура;
	ОтправленоПриглашений = 0;
	
	Приглашения = РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.НоваяТаблицаПриглашенийКОтправке();
	
	Для Каждого Приглашение Из ВыбранныеИдентификаторы Цикл
		НоваяСтрока = Приглашения.Добавить();
		НоваяСтрока.ИдентификаторКонтрагента = Приглашение.ИдентификаторКонтрагента;
		НоваяСтрока.ИдентификаторОрганизации = Приглашение.ИдентификаторОрганизации;
		НоваяСтрока.Организация = Приглашение.Организация;
		НоваяСтрока.Контрагент  = Приглашение.Контрагент;
		НоваяСтрока.ЭлектроннаяПочта = Приглашение.ЭлектроннаяПочта;
	КонецЦикла;
	
	СписокОрганизаций = Приглашения.Скопировать(,"Организация");
	СписокОрганизаций.Свернуть("Организация");
	
	Для Каждого ТекущаяОрганизация Из СписокОрганизаций Цикл
		
		Отбор = Новый Структура("Организация", ТекущаяОрганизация.Организация);
		
		ПараметрыПроцедуры.Вставить("Приглашения"      , Приглашения.Скопировать(Отбор));
		ПараметрыПроцедуры.Вставить("СписокМаркеров"   , СоответствиеПрофилейНастроекЭДОМаркерам);
		ПараметрыПроцедуры.Вставить("Организация"      , ТекущаяОрганизация.Организация);
		ПараметрыПроцедуры.Вставить("КонтекстОперации", КонтекстОперации);
		
		АдресРезультата = ПоместитьВоВременноеХранилище(Неопределено);
		РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОтправитьСписокПриглашений(ПараметрыПроцедуры, АдресРезультата);
		
		РезультатОтправки = ПолучитьИзВременногоХранилища(АдресРезультата);
		
		Если ЗначениеЗаполнено(РезультатОтправки.КоличествоОтправлено) Тогда
			ОтправленоПриглашений = ОтправленоПриглашений + РезультатОтправки.КоличествоОтправлено;
		КонецЕсли;
		КонтекстОперации = РезультатОтправки.КонтекстОперации;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтправитьВАрхивНаСервере(Знач ДокументыВАрхив) 
	
	Для каждого ЭлектронныйДокумент Из ДокументыВАрхив Цикл
		
		ОбменСКонтрагентамиСлужебный.УстановитьНеобходимостьОзнакомленияСЭД(ЭлектронныйДокумент, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПринятьОтклонитьКонтактЧерезОператораЭДОНаСервере(КоличествоПринятыхПриглашений, ВыделенныеСтроки,
	СоответствиеПрофилейНастроекЭДОМаркерам, ПриглашениеПринято, КонтекстОперации, ПричинаОтказаОтПриглашения)
	
	Приглашения = Новый Массив;
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		Приглашение = Новый Структура;
		Приглашение.Вставить("ИдентификаторОрганизации");
		Приглашение.Вставить("ИдентификаторКонтрагента");
		Приглашение.Вставить("СпособОбменаЭД");
		Приглашение.Вставить("НовыйКонтрагент");
		Приглашение.Вставить("ГотовоКПринятию", Ложь);
		ЗаполнитьЗначенияСвойств(Приглашение, ВыделеннаяСтрока);
		Приглашения.Добавить(Приглашение);
	КонецЦикла;
	
	Если ПриглашениеПринято Тогда
		ОбменСКонтрагентамиСлужебный.СоздатьКонтрагентовДляПриглашений(Приглашения, КонтекстОперации);
	КонецЕсли;
	
	Для каждого Приглашение Из Приглашения Цикл
		
		Если ПриглашениеПринято И Не Приглашение.ГотовоКПринятию Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСертификата = СоответствиеПрофилейНастроекЭДОМаркерам.Получить(Приглашение.ИдентификаторОрганизации);
		
		Маркер = "";
		Если ТипЗнч(СтруктураСертификата) = Тип("Структура") Тогда
			СтруктураСертификата.Свойство("МаркерРасшифрованный", Маркер);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Маркер) Тогда
			Продолжить;
		КонецЕсли;
		
		СоотвСоглашенийИСтруктурСертификатовПоУчетнойЗаписи = Новый Соответствие;
		СоотвСоглашенийИСтруктурСертификатовПоУчетнойЗаписи.Вставить(Приглашение.ИдентификаторОрганизации, СтруктураСертификата);
		ПараметрыОбновленияСтатусов = ОбменСКонтрагентамиСлужебный.НовыеПараметрыОбновленияСтатусовКонтактов();
		ПараметрыОбновленияСтатусов.СоотвСоглашенийИСтруктурСертификатовПоУчетнойЗаписи = СоотвСоглашенийИСтруктурСертификатовПоУчетнойЗаписи;
		ПараметрыОбновленияСтатусов.ОбновлятьСтатусыАвтоматически = Истина;
		
		Результат = Неопределено;
		
		Если Не ПриглашениеПринято Тогда
			РезультатОтклонения = ОбменСКонтрагентамиСлужебный.ОтклонитьПриглашениеБезОтправкиОператоруЭДО(
				Приглашение.ИдентификаторОрганизации, Приглашение.ИдентификаторКонтрагента, ПричинаОтказаОтПриглашения);
			Если РезультатОтклонения.Статус = "Выполнено" Тогда
				Результат = Истина;
				КоличествоПринятыхПриглашений = КоличествоПринятыхПриглашений + 1;
			ИначеЕсли РезультатОтклонения.Статус = "Ошибка" Тогда
				Результат = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Результат = Неопределено Тогда
			КонтекстОперации.ТекущаяУчетнаяЗапись = Приглашение.ИдентификаторОрганизации;
			Результат = ОбменСКонтрагентамиВнутренний.ПринятьОтклонитьКонтактЧерезОператораЭДО(
				Приглашение.ИдентификаторКонтрагента, ПриглашениеПринято, Маркер, Приглашение.ИдентификаторОрганизации,
				ПараметрыОбновленияСтатусов, КонтекстОперации, ПричинаОтказаОтПриглашения);
			
			Если Результат Тогда
				Если ПриглашениеПринято Тогда
					РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.НовыйСтатусПриглашения(Приглашение.ИдентификаторОрганизации,
						Приглашение.ИдентификаторКонтрагента, Перечисления.СтатусыПриглашений.Принято);
					ОбменСКонтрагентамиСлужебный.СоздатьНастройкиЭДОДляПринятогоПриглашения(
						Приглашение.ИдентификаторОрганизации, Приглашение.ИдентификаторКонтрагента);
				Иначе
					РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.НовыйСтатусПриглашения(Приглашение.ИдентификаторОрганизации,
						Приглашение.ИдентификаторКонтрагента, Перечисления.СтатусыПриглашений.Отклонено);
				КонецЕсли;
				
				КоличествоПринятыхПриглашений = КоличествоПринятыхПриглашений + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьБыстрыйПоиск()
	
	Элементы.ЗаголовокОтбора.Заголовок = НСтр("ru = 'Быстрый поиск'")
		+ ?(ПоказатьБыстрыйПоиск, " " + НСтр("ru = '(скрыть)'"),  " " + НСтр("ru = '(показать)'"));
		
	Элементы.БыстрыеОтборы.Видимость = ПоказатьБыстрыйПоиск;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьЗаблокированныеЭлементыФормы()
	
	Для Каждого ЗаблокированныйЭлементыФормы Из ЗаблокированныеЭлементыФормы Цикл 
		
		Элементы[ЗаблокированныйЭлементыФормы.Значение].Доступность = Истина;
		
	КонецЦикла;
	
	ЗаблокированныеЭлементыФормы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Функция ЭлектронныеДокументыНаОзнакомление(Знач ИдентификаторыСтрок) 
	
	ЭлектронныеДокументы = Новый Массив;
	
	Для каждого Идентификатор Из ИдентификаторыСтрок Цикл
		
		Строка = Элементы.ОзнакомитьсяЭД.ДанныеСтроки(Идентификатор);
		ЭлектронныеДокументы.Добавить(Строка.ЭлектронныйДокумент);
		
	КонецЦикла;
	
	Возврат ЭлектронныеДокументы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ФайлыЭлектронныхДокументов(Знач ЭлектронныеДокументы) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭДПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.ВладелецФайла В(&ЭлектронныеДокументы)
	|	И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД = ЭДПрисоединенныеФайлы.ВладелецФайла.ТипЭлементаВерсииЭД";
	Запрос.УстановитьПараметр("ЭлектронныеДокументы", ЭлектронныеДокументы);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ОтправитьИПолучитьЭДЗавершение(Результат, Контекст) Экспорт
	
	Элементы.ОтправитьИПолучитьЭД.Доступность = Истина;
	
	#Если МобильныйКлиент Тогда
		Элементы.ОтправитьИПолучитьЭД.Картинка = БиблиотекаКартинок.Обновить;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлектронныйДокументДляПросмотра(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.ОткрытьЭлектронныйДокументДляПросмотра");

	ПараметрыФормы = Новый Структура("ФайлЭлектронногоДокумента", ДанныеСтроки.Ссылка);
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьЭДДляПросмотра(ДанныеСтроки.ЭлектронныйДокумент, ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПереопределяемыхЭлементовФормы()
	
	МетаданныеСопоставления = ОбменСКонтрагентамиСлужебный.МетаданныеСопоставленияНоменклатуры();
	
	Элементы.НоменклатураКонтрагентовВладелец.Заголовок = МетаданныеСопоставления.ВладелецНоменклатурыПредставлениеОбъекта;
	Элементы.КомандаОткрытьНоменклатуруКонтрагентов.Заголовок = МетаданныеСопоставления.НоменклатураКонтрагентаПредставлениеСписка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимОтображения(Знач НовыйРежимОтображения)
	
	ДопустимыеРежимы = Новый Массив;
	ДопустимыеРежимы.Добавить("ВсеДокументы");
	ДопустимыеРежимы.Добавить("МоиДокументы");
	ДопустимыеРежимы.Добавить("КИсполнению");
	
	Если ДопустимыеРежимы.Найти(НовыйРежимОтображения) = Неопределено Тогда
		
		ШаблонИсключения = НСтр("ru = 'Недопустимый режим отображения текущих дел ЭДО: {%1}'");
		ВызватьИсключение СтрШаблон(ШаблонИсключения, НовыйРежимОтображения);
		
	Иначе
		РежимОтображения = НовыйРежимОтображения;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ПроверитьВозможностьПодписанияДокументов(Знач ДокументыНаПроверку)
	
	Подписанты = Новый Массив;
	Подписанты.Добавить(Справочники.Пользователи.ПустаяСсылка());
	Подписанты.Добавить(Пользователи.АвторизованныйПользователь());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ЭлектронныйДокументИсходящий.ВидЭД) КАК ВидДокумента,
	|	ЭлектронныйДокументИсходящий.НомерДокументаОтправителя КАК НомерДокумента,
	|	ЭлектронныйДокументИсходящий.ДатаДокументаОтправителя КАК ДатаДокумента
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|		ПО ЭДПрисоединенныеФайлы.ВладелецФайла = ЭлектронныйДокументИсходящий.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
	|		ПО ЭДПрисоединенныеФайлы.Ссылка = СостояниеПодписанияЭД.Объект
	|			И (СостояниеПодписанияЭД.Текущий)
	|			И (СостояниеПодписанияЭД.Подписант В (&Подписанты))
	|ГДЕ
	|	ЭДПрисоединенныеФайлы.Ссылка В(&ДокументыНаПроверку)
	|	И СостояниеПодписанияЭД.Объект ЕСТЬ NULL";
	Запрос.УстановитьПараметр("ДокументыНаПроверку", ДокументыНаПроверку);
	Запрос.УстановитьПараметр("Подписанты", Подписанты);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Документ ""%1 № %2 от %3"" недоступен для подписания текущим пользователем.'"),
			Выборка.ВидДокумента, Выборка.НомерДокумента, Формат(Выборка.ДатаДокумента,"ДЛФ=D"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВерсиюБЭД()
	
	ШаблонТекстВерсии = НСтр("ru = 'Версия модуля ЭДО: %1'");
	ТекстВерсии = СтрШаблон(ШаблонТекстВерсии, ОбновлениеИнформационнойБазыБЭД.ВерсияБиблиотеки());
	Элементы.НадписьВерсияБЭД.Заголовок = ТекстВерсии;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравоНаРаботуСТекущимиДеламиЭДО()
	
	Результат = ОбменСКонтрагентамиСлужебный.ЕстьПравоЧтенияНастройкиОбмена()
		И ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоЧтенияЭД();
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоИзвещениеПодтверждение(Знач ТипЭД)
	
	// Извещения и подтверждения.
	СлужебныеТипыЭД = Новый Массив;
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИОП);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИППДПЭСФ);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПУУЭСФ);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПДО);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПДОИПУПДУКД);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПДП);
	СлужебныеТипыЭД.Добавить(Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ);
	
	Возврат (СлужебныеТипыЭД.Найти(ТипЭД) <> Неопределено);
	
КонецФункции

#КонецОбласти

#Область КонтрольОтраженияВУчете

///////////////////////////////////////////////////////////////////////////////////
// Создание учетного документа

&НаКлиенте
Процедура ПоказатьРасширенныйПодборДокументовУчета()
	
	ТекущиеДанные = Элементы.ВходящиеЭД.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ЭлектронныйДокумент",ТекущиеДанные.ЭлектронныйДокумент);
	ОткрытьФорму("Документ.ЭлектронныйДокументВходящий.Форма.ПодборДокументовУчета",
		ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Открытие учетного документа

&НаКлиенте
Процедура ПоказатьУчетныйДокумент(Знач ИмяТаблицы = "ВходящиеЭД")
	
	ТекущиеДанные = Элементы[ИмяТаблицы].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборУчетныхДокументов = УчетныеДокументыЭлектронногоДокумента(ТекущиеДанные.ЭлектронныйДокумент);
	Если Не ЗначениеЗаполнено(НаборУчетныхДокументов) Тогда
		ОткрытьЭлектронныйДокументДляПросмотра(ТекущиеДанные);
		Возврат;
	КонецЕсли;
	
	Если НаборУчетныхДокументов.Количество() = 1 Тогда
		
		ПоказатьЗначение(, НаборУчетныхДокументов[0]);
		
	Иначе
		
		СписокУчетныхДокументов = Новый СписокЗначений;
		СписокУчетныхДокументов.ЗагрузитьЗначения(НаборУчетныхДокументов);
		Обработка = Новый ОписаниеОповещения("ОбработатьВыборУчетногоДокументаДляПоказа", ЭтотОбъект);
		СписокУчетныхДокументов.ПоказатьВыборЭлемента(Обработка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборУчетногоДокументаДляПоказа(Знач ВыбранныйЭлемент, Знач ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УчетныеДокументыЭлектронногоДокумента(Знач ЭлектронныйДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Основания.ДокументОснование КАК УчетныйДокумент
	|ИЗ
	|	Документ.ЭлектронныйДокументВходящий.ДокументыОснования КАК Основания
	|ГДЕ
	|	Основания.Ссылка В(&ЭлектронныйДокумент)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Основания.ДокументОснование
	|ИЗ
	|	Документ.ЭлектронныйДокументИсходящий.ДокументыОснования КАК Основания
	|ГДЕ
	|	Основания.Ссылка В(&ЭлектронныйДокумент)";
	Запрос.УстановитьПараметр("ЭлектронныйДокумент", ЭлектронныйДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетныйДокумент");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////
// Проведение учетного документа

&НаСервереБезКонтекста
Функция УчетныеДокументыНаКонтролеПроведенияЭД(Знач НаборЭлектронныхДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтрольПроведения.УчетныйДокумент
	|ИЗ
	|	РегистрСведений.КонтрольПроведенияУчетныхДокументовЭДО КАК КонтрольПроведения
	|ГДЕ
	|	КонтрольПроведения.ЭлектронныйДокумент В (&НаборЭлектронныхДокументов)";
	Запрос.УстановитьПараметр("НаборЭлектронныхДокументов", НаборЭлектронныхДокументов);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетныйДокумент");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОПроведенииУчетныхДокументов(Знач НаборУчетныхДокументов)
	
	ШаблонВопроса = НСтр("ru = 'Провести учетные документы (%1)?'");
	ТекстВопроса = СтрШаблон(ШаблонВопроса, НаборУчетныхДокументов.Количество());
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НаборУчетныхДокументов", НаборУчетныхДокументов);
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОПроведенииУчетныхДокументов", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОПроведенииУчетныхДокументов(Знач Ответ, Знач ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НаборУчетныхДокументов = ДополнительныеПараметры.НаборУчетныхДокументов;
	
	НепроведенныеДокументы = ПровестиДокументы(НаборУчетныхДокументов);
	ОбновитьНавигациюПоРазделам();
	
	ВсегоДокументов = НаборУчетныхДокументов.Количество();
	ПроведеноДокументов = ВсегоДокументов - НепроведенныеДокументы.Количество();
	
	ТекстОповещения = НСтр("ru = 'Проведение учетных документов'");
	ШаблонПояснения = НСтр("ru = 'Проведено %1 из %2.'");
	ТекстПояснения = СтрШаблон(ШаблонПояснения, ПроведеноДокументов, ВсегоДокументов);
	ПоказатьОповещениеПользователя(ТекстОповещения,,ТекстПояснения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПровестиДокументы(Знач НаборДокументов)
	
	НепроведенныеДокументы = ОбщегоНазначения.ПровестиДокументы(НаборДокументов);
	
	Для Каждого Описание Из НепроведенныеДокументы Цикл
		
		ШаблонСообщения = НСтр("ru = 'Не удалось провести %1 по причине:'") 
			+ Символы.ПС + Описание.ОписаниеОшибки;
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Описание.Ссылка);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	КонецЦикла;
	
	Возврат НепроведенныеДокументы;
	
КонецФункции

#КонецОбласти

#Область СопоставлениеНоменклатуры

&НаКлиенте
Процедура ПоказатьСопоставлениеНоменклатуры()
	
	НоменклатураДляСопоставления = Новый Массив;
	
	Если ТекущийРаздел = "НоменклатураКонтрагентов" Тогда
		
		Владельцы = Новый Массив;
		Для Каждого СтрокаСписка Из Элементы.НоменклатураКонтрагентов.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.НоменклатураКонтрагентов.ДанныеСтроки(СтрокаСписка);
			Владельцы.Добавить(ДанныеСтроки.Владелец);
		КонецЦикла;
		НоменклатураДляСопоставления = НоменклатураПоВладельцам(Владельцы);
		
	Иначе
		
		ЭлектронныеДокументы = Новый Массив;
		Для Каждого СтрокаСписка Из Элементы.ВходящиеЭД.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ВходящиеЭД.ДанныеСтроки(СтрокаСписка);
			ЭлектронныеДокументы.Добавить(ДанныеСтроки.ЭлектронныйДокумент);
		КонецЦикла;
		НоменклатураДляСопоставления = НоменклатураПоЭД(ЭлектронныеДокументы);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НоменклатураДляСопоставления) Тогда
		ТекстСообщения = НСтр("ru = 'Сопоставление номенклатуры не требуется.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("НоменклатураДляСопоставления", НоменклатураДляСопоставления);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ОбработатьСопоставлениеНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьСопоставлениеНоменклатуры(НоменклатураДляСопоставления,, ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСопоставлениеНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьНавигациюПоРазделам();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураПоЭД(Знач ЭлектронныеДокументы)
	
	Отбор = Новый Структура("ЭлектронныйДокумент", ЭлектронныеДокументы);
	Возврат ОбменСКонтрагентамиСлужебный.НоменклатураКонтрагентовНаКонтроле(Отбор);
	
КонецФункции

&НаСервереБезКонтекста
Функция НоменклатураПоВладельцам(Знач Владельцы)
	
	Отбор = Новый Структура("Владелец", Владельцы);
	Возврат ОбменСКонтрагентамиСлужебный.НоменклатураКонтрагентовНаКонтроле(Отбор);
	
КонецФункции

#КонецОбласти

#Область ПеречислениеОтветовНаПриглашение

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Принять()
	Возврат "Принять";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Отклонить()
	Возврат "Отклонить";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОтветНаПриглашение_Отозвать()
	Возврат "Отозвать";
КонецФункции

#КонецОбласти

#Область МобильныйКлиент

&НаКлиенте
Процедура ПослеВыбораРазделаМК(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		НовыйРаздел = Результат;
		Если НовыйРаздел <> ТекущийРаздел Тогда
			ПриИзмененииРаздела(НовыйРаздел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьИнтерфейсДляМобильногоКлиентаНаСервере()

	ОбменСКонтрагентамиСлужебный.СкрытьВсеЭлементы(Элементы);
	
	Заголовок = НСтр("ru = 'Документы ЭДО'");
	
	ВидимыеЭлементы = "ГруппаОсновная, ОтправитьИПолучитьЭД, ГруппаПраво, ГруппаКоманды, ВыбратьДействиеМК,
		|ГруппаКомандыОбщие, ИзменитьРежимПросмотра, ПанельСписков, СтраницаВходящиеЭД, ВходящиеЭД,
		|ВходящиеЭДКонтекстноеМенюУтвердитьЭД, ВходящиеЭДКонтекстноеМенюОтклонитьАннулирование,
		|ВходящиеЭДКонтекстноеМенюЗакрытьПринудительно, ВходящиеЭДКонтекстноеМенюПеренаправить,
		|ВходящиеЭДКонтекстноеМенюГруппа, ВходящиеЭДСокращение, ВходящиеЭДСуммаДокумента, ВходящиеЭДКонтрагент,
		|ВходящиеЭДСостояниеЭДО, ВходящиеЭДЭлектронныйДокумент, СтраницаИсходящиеЭД, ИсходящиеЭД,
		|ИсходящиеЭДКонтекстноеМенюОтклонитьАннулирование, ИсходящиеЭДКонтекстноеМенюОтклонитьПодписаниеИсх,
		|ИсходящиеЭДКонтекстноеМенюЗакрытьПринудительно, ИсходящиеЭДКонтекстноеМенюПеренаправить,
		|ИсходящиеЭДКонтекстноеМенюГруппа, ИсходящиеЭДСокращение, ИсходящиеЭДСуммаДокумента, ИсходящиеЭДКонтрагент,
		|ИсходящиеЭДСостояниеЭДО, ИсходящиеЭДЭлектронныйДокумент, СтраницаОзнакомитьсяЭД, ОзнакомитьсяЭД,
		|ОзнакомитьсяЭДОтправитьВАрхив, ОзнакомитьсяЭДПеренаправить, ОзнакомитьсяЭДГруппа, ОзнакомитьсяЭДСокращение,
		|ОзнакомитьсяЭДСостояниеЭДО, ОзнакомитьсяЭДКонтрагент, ОзнакомитьсяЭДСуммаДокумента,
		|ОзнакомитьсяЭДЭлектронныйДокумент, ОбработкаЭлектронныеДокументыАрхивЭДООткрыть";
	
	ОбменСКонтрагентамиСлужебный.УстановитьВидимостьЭлементов(Элементы, ВидимыеЭлементы);

	ОтправитьИПолучитьЭД = Элементы.Найти("ОтправитьИПолучитьЭД");
	Если ОтправитьИПолучитьЭД <> Неопределено Тогда
		ОтправитьИПолучитьЭД.Заголовок = НСтр("ru = 'Синхронизировать'");
		ОбменСКонтрагентамиСлужебный.ПереместитьЭлемент(Элементы, "ОтправитьИПолучитьЭД", "ГруппаПраво")
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправитьИПолучитьЭД", "ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Центр);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаПраво", "ГоризонтальноеПоложениеПодчиненных", ГоризонтальноеПоложениеЭлемента.Центр);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтправитьИПолучитьЭД", "Шрифт", ШрифтыСтиля.КрупныйШрифтТекста);
	Команды["ИзменитьРежимПросмотра"].Отображение = ОтображениеКнопки.Текст;
	ИзменитьНазваниеКнопкиНастройкиОтображения();
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВходящиеЭД", "Шапка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходящиеЭД", "Шапка", Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОзнакомитьсяЭД", "Шапка", Ложь);
	
	ТекстЗапроса = СтрЗаменить(ВходящиеЭД.ТекстЗапроса, """СокращениеМК""", ТекстЗапросаПоляСокращение());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """КартинкаМК""", ТекстЗапросаКартинкаМК());
	СтруктураСвойствДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СтруктураСвойствДинамическогоСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ВходящиеЭД, СтруктураСвойствДинамическогоСписка);
	
	ТекстЗапроса = СтрЗаменить(ИсходящиеЭД.ТекстЗапроса, """СокращениеМК""", ТекстЗапросаПоляСокращение());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """КартинкаМК""", ТекстЗапросаКартинкаМК());
	СтруктураСвойствДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СтруктураСвойствДинамическогоСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ИсходящиеЭД, СтруктураСвойствДинамическогоСписка);
	
	ТекстЗапроса = СтрЗаменить(ОзнакомитьсяЭД.ТекстЗапроса, """СокращениеМК""", ТекстЗапросаПоляСокращение());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """КартинкаМК""", ТекстЗапросаОзнакомитьсяКартинкаМК());
	СтруктураСвойствДинамическогоСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	СтруктураСвойствДинамическогоСписка.ТекстЗапроса = ТекстЗапроса;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.ОзнакомитьсяЭД, СтруктураСвойствДинамическогоСписка);
	
	ОбменСКонтрагентамиСлужебный.ПереместитьЭлемент(Элементы, "ВходящиеЭДКонтрагент", "ВходящиеЭД", "ВходящиеЭДСуммаДокумента");
	ОбменСКонтрагентамиСлужебный.ПереместитьЭлемент(Элементы, "ИсходящиеЭДКонтрагент", "ИсходящиеЭД", "ИсходящиеЭДСуммаДокумента");
	ОбменСКонтрагентамиСлужебный.ПереместитьЭлемент(Элементы, "ОзнакомитьсяЭДКонтрагент", "ОзнакомитьсяЭД", "ОзнакомитьсяЭДЭлектронныйДокумент");
	ОбменСКонтрагентамиСлужебный.ПереместитьЭлемент(Элементы, "ОзнакомитьсяЭДСуммаДокумента", "ОзнакомитьсяЭД", "ОзнакомитьсяЭДЭлектронныйДокумент");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВходящиеЭД", "ПутьКДаннымКартинкиСтроки", "ВходящиеЭД.КартинкаМК");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВходящиеЭД", "КартинкаСтрок", БиблиотекаКартинок.СтатусыЭДОМК);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходящиеЭД", "ПутьКДаннымКартинкиСтроки", "ИсходящиеЭД.КартинкаМК");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИсходящиеЭД", "КартинкаСтрок", БиблиотекаКартинок.СтатусыЭДОМК);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОзнакомитьсяЭД", "ПутьКДаннымКартинкиСтроки", "ОзнакомитьсяЭД.КартинкаМК");
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОзнакомитьсяЭД", "КартинкаСтрок", БиблиотекаКартинок.СтатусыЭДОМК);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьНазваниеКнопкиНастройкиОтображения()

	Если РежимОтображения = "КИсполнению" Тогда
		ЗаголовокКнопки = НСтр("ru = 'К исполнению'");
	ИначеЕсли РежимОтображения = "МоиДокументы" Тогда 
		ЗаголовокКнопки = НСтр("ru = 'Мои документы'");
	Иначе
		ЗаголовокКнопки = НСтр("ru = 'Все документы'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, "ИзменитьРежимПросмотра", "Заголовок", ЗаголовокКнопки);
	
КонецПроцедуры

&НаСервере
Функция ДанныеДереваДействий()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДействий");
	Возврат ПоместитьВоВременноеХранилище(ДеревоЗначений, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоляСокращение()

	Возврат "
	|ВЫБОР
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.АктВыполненныхРабот)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Акт))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.ГарантийноеПисьмо)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.ГарПисьмо))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.Договор)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Договор))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.ПлатежноеПоручение)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.ПлПоруч))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.ПриложениеКАкту)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.АктПрил))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.Прочее)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Прочее))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.СчетНаОплату)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Счет))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.ТоварнаяНакладная)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Накладная))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.СоглашениеОбЭДО)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Соглашение))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.АктСверки)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Сверка))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.АктВзаимозачета)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Взаимозачет))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.КС11)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.КС11))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.КС2)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.КС2))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.КС3)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.КС3))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.Отчет)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Отчет))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.Уведомление)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Уведомление))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.Ведомость)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Ведомость))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.Спецификация)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Спецификация))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПроизвольныйЭД)
	|			И ЭлектронныеДокументыПереопределяемый.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыЭД.ДополнительноеСоглашение)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.ДопСогл))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрикладнойЭД)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЭлектронныеДокументыПереопределяемый.ПрикладнойВидЭД)
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктВыполненныхРабот)
	|			ИЛИ ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктЗаказчик)
	|			ИЛИ ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктИсполнитель)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Акт))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктНаПередачуПрав)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.АктПП))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ВозвратТоваровМеждуОрганизациями)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Возврат))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗаказТовара)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Заказ))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ЗапросКоммерческихПредложений)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.ЗапросКомПред))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ИзвещениеОПолучении)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Извещение))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КаталогТоваров)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Каталог))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КоммерческоеПредложение)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.КомПредложение))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.КорректировочныйСчетФактура)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.КорСФ))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ОтветНаЗаказ)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.ЗаказПокупателя))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ОтчетОПродажахКомиссионногоТовара)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.ПродажаКомиссия))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ОтчетОСписанииКомиссионногоТовара)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.СписаниеКомиссия))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.АктОРасхождениях)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Расхождения))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПередачаТоваровМеждуОрганизациями)
	|			ИЛИ ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12)
	|			ИЛИ ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Покупатель)
	|			ИЛИ ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ТОРГ12Продавец)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Накладная))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.Подтверждение)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Подтверждение))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПредложениеОбАннулировании)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.ПОА))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель)
	|			ИЛИ ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Корректировка))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетНаОплату)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.Счет))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.СчетФактура)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.СФ))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УведомлениеОбУточнении)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.УОУ))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УПД)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.УПД))
	|	КОГДА ЭлектронныеДокументыПереопределяемый.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.УКД)
	|		ТОГДА ПРЕДСТАВЛЕНИЕ(ЗНАЧЕНИЕ(Перечисление.СокращенияЭД.УКД))
	|	ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ЭлектронныеДокументыПереопределяемый.ВидЭД)
	|КОНЕЦ"

КонецФункции

&НаСервере
Процедура ОбновитьНазваниеРазделаМК()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоДействий");
	НайденнаяСтрока = ДеревоЗначений.Строки.Найти(ТекущийРаздел, "Значение", Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьДействиеМК", "Заголовок", НайденнаяСтрока.Представление);
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаКартинкаМК()
	
	Возврат "
	|ВЫБОР
	|	КОГДА ЭлектронныеДокументыПереопределяемый.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Аннулирован))
	|		ТОГДА 0
	|	КОГДА ЭлектронныеДокументыПереопределяемый.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИсправление), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора))
	|		ТОГДА 1
	|	КОГДА ЭлектронныеДокументыПереопределяемый.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаУтверждении))
	|			ИЛИ НЕ ЭлектронныеДокументыПереопределяемый.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПолученОтказОтКонтрагента))
	|				И ПрисоединенныеФайлыПереопределяемый.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден)
	|	ТОГДА 2
	|	ИНАЧЕ 4
	|КОНЕЦ"
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОзнакомитьсяКартинкаМК()
	
	Возврат "
	|ВЫБОР
	|	КОГДА ЭлектронныеДокументыПереопределяемый.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Аннулирован)
	|		ТОГДА 0
	|	КОГДА ЭлектронныеДокументыПереопределяемый.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОбменЗавершен)
	|		ТОГДА 3
	|	ИНАЧЕ 4
	|КОНЕЦ"
	
КонецФункции

&НаКлиенте
Процедура РазвернутьУзлыДерева(Форма, ИмяЭлементаФормы, ИдентификаторСтрокиДерева = "*", РазвернутьСПодчиненными = Ложь)
	
	ТаблицаЭлемент = Форма.Элементы[ИмяЭлементаФормы];
	Если ИдентификаторСтрокиДерева = "*" Тогда
		Узлы = Форма[ИмяЭлементаФормы].ПолучитьЭлементы();
		Для Каждого Узел Из Узлы Цикл
			ТаблицаЭлемент.Развернуть(Узел.ПолучитьИдентификатор(), РазвернутьСПодчиненными);
		КонецЦикла;
	Иначе
		ТаблицаЭлемент.Развернуть(ИдентификаторСтрокиДерева, РазвернутьСПодчиненными);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область КонтекстныеПодсказки

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;

	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти
