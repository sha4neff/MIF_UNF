
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	КлючСохраненияПоложенияОкна = "" + Новый УникальныйИдентификатор;
	Параметры.Свойство("Сертификат", Сертификат);
	Параметры.Свойство("РезультатПроверки", РезультатПроверки);
	Параметры.Свойство("ЕстьКриптографияНаКлиенте", ЕстьКриптографияНаКлиенте);
	Параметры.Свойство("ЕстьКриптографияНаСервере", ЕстьКриптографияНаСервере);
	Параметры.Свойство("СкрытьПароль", СкрытьПароль);
	
	Если СкрытьПароль Тогда
		Элементы.Пароль.Видимость = Ложь;
		Элементы.ГруппаВводаПароля.Заголовок = "";
	КонецЕсли;
	
	ДвоичныеДанныеСертификата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Сертификат, "ДанныеСертификата").Получить();
		
	АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	
	ЗаполнитьРезультатыПроверок(РезультатПроверки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнструкцияНажатие(Элемент)
	
	ЭлектроннаяПодписьКлиент.ОткрытьИнструкциюПоТипичнымПроблемамПриРаботеСПрограммами();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Проверить(Команда)
	
	РезультатПроверкиКопия = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(РезультатПроверки);
	Если РезультатПроверкиКопия.ПроверкиНаСервере <> Неопределено Тогда
		Для каждого КлючИЗначение Из РезультатПроверкиКопия.ПроверкиНаСервере Цикл
			РезультатПроверкиКопия.ПроверкиНаСервере.Вставить(КлючИЗначение.Ключ, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатПроверкиКопия.ПроверкиНаКлиенте <> Неопределено Тогда
		Для каждого КлючИЗначение Из РезультатПроверкиКопия.ПроверкиНаКлиенте Цикл
			РезультатПроверкиКопия.ПроверкиНаКлиенте.Вставить(КлючИЗначение.Ключ, Неопределено);
		КонецЦикла;
	КонецЕсли;
	РезультатПроверкиКопия.ОбщийРезультатПроверок = ОбменСКонтрагентамиДиагностикаКлиент.ОбъединитьРезультатыПроверокСертификатов(РезультатПроверкиКопия);
	
	ЗаполнитьРезультатыПроверок(РезультатПроверкиКопия);
	Если Элементы.Пароль.Видимость Тогда
		ЭлектроннаяПодписьКлиент.УстановитьПарольСертификата(Сертификат, Пароль);
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("БезПодтверждения", Истина);
	ДополнительныеПараметры.Вставить("ПроверкаПриВыборе", Истина);
	ДополнительныеПараметры.Вставить("ОбработкаРезультата", Новый ОписаниеОповещения("ПослеПроверкиСертификата", ЭтотОбъект, ДополнительныеПараметры));
	ЭлектроннаяПодписьКлиент.ПроверитьСертификатСправочника(Сертификат, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеПроверкиСертификата(Результат, ДополнительныеПараметры) Экспорт
	
	Результат = Истина;
	РезультатПроверки = ДополнительныеПараметры.Результат;
	РезультатПроверки.Вставить("ОбщийРезультатПроверок", ОбменСКонтрагентамиДиагностикаКлиент.ОбъединитьРезультатыПроверокСертификатов(РезультатПроверки));
	ЗаполнитьРезультатыПроверок(РезультатПроверки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыПроверок(РезультатПроверки) 
	
	ВыборкаКлассификаторОшибок = ОбменСКонтрагентамиДиагностика.ВыборкаКлассификатораОшибокКриптографии(РезультатПроверки);
	
	ОшибкиСерверныхПроверок = Новый Массив;
	Если РезультатПроверки.ПроверкиНаСервере <> Неопределено Тогда
		Для каждого КлючИЗначение Из РезультатПроверки.ПроверкиНаСервере Цикл
			Если Не СтрЗаканчиваетсяНа(КлючИЗначение.Ключ, "Ошибка") Тогда 
				Если КлючИЗначение.Значение = Ложь Тогда
					ОшибкиСерверныхПроверок.Добавить(КлючИЗначение.Ключ);
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	КонецЕсли;
	
	ОбщийРезультатПроверок = РезультатПроверки.ОбщийРезультатПроверок;
	Если ОбщийРезультатПроверок <> Неопределено  Тогда
		Для каждого КлючИЗначение Из ОбщийРезультатПроверок Цикл
			Если Не СтрЗаканчиваетсяНа(КлючИЗначение.Ключ, "Ошибка") Тогда
				ОписаниеРезультатаПроверки = Новый Структура;
				ОписаниеРезультатаПроверки.Вставить("Результат", КлючИЗначение.Значение);
				ОписаниеРезультатаПроверки.Вставить("ОписаниеОшибки", ОбщийРезультатПроверок[КлючИЗначение.Ключ + "Ошибка"]);
				УстановитьЭлемент(ЭтаФорма, КлючИЗначение.Ключ, ОшибкиСерверныхПроверок.Найти(КлючИЗначение.Ключ) <> Неопределено,
					ОписаниеРезультатаПроверки, ВыборкаКлассификаторОшибок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЭлемент(Форма, НачалоЭлемента, ВыводитьПодсказкуСервернойКриптографии, РезультатПроверки, ВыборкаКлассификаторОшибок)
	
	ЭлементКартинка = Форма.Элементы[НачалоЭлемента + "Картинка"];
	ЭлементПодсказка = Форма.Элементы.Найти(НачалоЭлемента + "Подсказка");
	ЭлементОписаниеОшибки = Форма.Элементы.Найти(НачалоЭлемента + "ОписаниеОшибки");
	Если РезультатПроверки.Результат = Неопределено Тогда
		ЭлементКартинка.Картинка    = БиблиотекаКартинок.СерыйШарБЭД;
		ЭлементКартинка.Подсказка   = НСтр("ru = 'Проверка не выполнялась.'");
		Если ЭлементПодсказка <> Неопределено Тогда
			ЭлементПодсказка.Видимость = Ложь;
		КонецЕсли;
		Если ЭлементОписаниеОшибки <> Неопределено Тогда
			ЭлементОписаниеОшибки.Видимость = Ложь;
		КонецЕсли;
	ИначеЕсли Не РезультатПроверки.Результат Тогда
		ЭлементКартинка.Картинка = БиблиотекаКартинок.КрасныйШарБЭД;
		Если ЭлементПодсказка <> Неопределено Тогда
			ЭлементПодсказка.Видимость = Истина;
		КонецЕсли;
		Если ЭлементОписаниеОшибки <> Неопределено Тогда
			ЭлементОписаниеОшибки.Заголовок = РезультатПроверки.ОписаниеОшибки;
			ЭлементОписаниеОшибки.Видимость = Истина;
			Если ЭлементПодсказка <> Неопределено И ВыборкаКлассификаторОшибок <> Неопределено
				И ВыборкаКлассификаторОшибок.НайтиСледующий(РезультатПроверки.ОписаниеОшибки, "ТекстОшибки") Тогда
				Если ЗначениеЗаполнено(ВыборкаКлассификаторОшибок.МетодикиУстранения) И ЕстьКриптографияНаКлиенте Тогда
					ТекстМетодикУстраненияОшибок = ОбменСКонтрагентамиДиагностика.СформироватьТекстМетодикУстраненияОшибокКриптографии(
						ВыборкаКлассификаторОшибок.МетодикиУстранения);
				Иначе 
					ТекстМетодикУстраненияОшибок = Неопределено; 
				КонецЕсли;
				Если ТекстМетодикУстраненияОшибок <> Неопределено Тогда
					ЭлементПодсказка.Заголовок = ТекстМетодикУстраненияОшибок;
					ЭлементПодсказка.УстановитьДействие("ОбработкаНавигационнойСсылки",
						"Подключаемый_МетодикаУстраненияОшибкиСертификатаОбработкаНавигационнойСсылки");
				Иначе 
					ЭлементПодсказка.Заголовок = НСтр("ru = 'Способ устранения:'") + Символы.ПС + ВыборкаКлассификаторОшибок.Решение;
				КонецЕсли;
				ВыборкаКлассификаторОшибок.Сбросить();
			КонецЕсли;
		КонецЕсли;
		Если ВыводитьПодсказкуСервернойКриптографии Тогда
			Элементы[НачалоЭлемента + "ПодсказкаСервер"].Видимость = Истина;
		КонецЕсли;
		ЭлементКартинка.Подсказка   = НСтр("ru = 'При выполнении проверки возникли ошибки.'");
	Иначе
		ЭлементКартинка.Картинка    = БиблиотекаКартинок.ЗеленыйШарБЭД;
		ЭлементКартинка.Подсказка   = НСтр("ru = 'Проверка выполнена успешно'");
		Если ЭлементПодсказка <> Неопределено Тогда
			ЭлементПодсказка.Заголовок = "";
		КонецЕсли;
		Если ЭлементОписаниеОшибки <> Неопределено Тогда
			ЭлементОписаниеОшибки.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		Оповестить("МастерДиагностикиКриптографии_ПроверкаСертификата", Новый Структура("Сертификат, РезультатПроверки", Сертификат, РезультатПроверки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МетодикаУстраненияОшибкиСертификатаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Контекст = Новый Структура;
	Контекст.Вставить("Сертификат", Сертификат);
	Контекст.Вставить("АдресСертификата", АдресСертификата);
	ОбменСКонтрагентамиДиагностикаКлиент.МетодикаУстраненияОшибкиСертификатаОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки, Контекст);
	
КонецПроцедуры

#КонецОбласти
