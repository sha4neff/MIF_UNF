
#Область ОписаниеПеременных

&НаКлиенте
Перем ТекущийЭлементЦвета;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаВсеКалендари.Видимость			= Пользователи.ЭтоПолноправныйПользователь();
	Элементы.ФормаСписокЗаписейКалендаря.Видимость	= Элементы.ФормаВсеКалендари.Видимость;
	
	ВосстановитьНастройки();
	ПрочитатьДоступныеКалендари();
	ВосстановитьНастройкиОтборов();
	НастроитьВидимостьГруппыСинхронизировать();
	
	УстановитьОтборПоРазрешеннымИсточникам();
	УстановитьОтборПоЗавершенным();
	УстановитьОтборПоКалендарю();
	УстановитьОтборПоТекущейДате();
	
	СотрудникТекущегоПользователя = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.ТекущийПользователь(), "ОсновнойОтветственный");
	
	УправлениеФормой();
	УстановитьЗаголовокГруппыОтборов();
	УстановитьУсловноеОформлениеНаВесьДень();
	УстановитьУсловноеОформлениеПоСостояниямСобытий();
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		МассивСотрудников = Новый Массив;
		МассивСотрудников.Добавить(СотрудникТекущегоПользователя);
		МассивСотрудников.Добавить(Справочники.Сотрудники.ПустаяСсылка());
		УправлениеНебольшойФирмойКлиентСервер.УстановитьЭлементОтбораСписка(Входящее, 
			"Ответственный", 
			МассивСотрудников, 
			Истина, 
			ВидСравненияКомпоновкиДанных.ВСписке);
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КонтактЦентрКлиент.ПодключитьУдалениеОбсужденийИзВходящего();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.ЗаписиКалендаряСотрудника.Форма.НастройкиКалендаря" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НастройкиОтображения, ВыбранноеЗначение);
			СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
		КонецЕсли;
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ВыборЦвета" Тогда
		
		Если ТекущийЭлементЦвета <> Неопределено Тогда
			
			ТекущийЭлементЦвета.Картинка = РаботаСЦветомКлиентСервер.КартинкаЦветаПоНомеруКартинки(ВыбранноеЗначение);
			Индекс = Число(Сред(ТекущийЭлементЦвета.Имя, СтрДлина("ЦветКалендарь_")+1));
			ТекКалендарь = ДоступныеКалендари[Индекс];
			ТекКалендарь.ВариантЦвета = ВыбранноеЗначение;
			
			Если ТекКалендарь.Выбран Тогда
				СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ИсточникЗаписейКалендаряСотрудника"
		Или ИмяСобытия = "Запись_ЗаписиКалендаряПодготовкиОтчетности" Тогда
		
		ОбновитьДанныеСписков();
		
	ИначеЕсли ИмяСобытия = "Запись_КалендарьСотрудника" Тогда
		
		Если ВидыКонтактЦентра = 0 ИЛИ ВидыКонтактЦентра = 1 Тогда
			ОбновитьДанныеСписков();
		Иначе 
			ОбработатьЗаписьКалендаряСервер();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОчиститьСеансовыеДанные" Тогда
		
		СеансовыеДанные = Новый Структура;
		
	ИначеЕсли ИмяСобытия = "Запись_Задачи" Тогда
		
		Если ВидыКонтактЦентра = 0 Тогда
			Параметр.Список = "ВРаботе";
		КонецЕсли;
		
		ОбновитьДанныеСписков();
		ОбновитьТекущийЭлементСписка(Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_КонтактЦентрВходящее" Тогда		
		ОбновитьДанныеСписков();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	//УНФ.ОтборыСписка
	СохранитьНастройкиОтборов();
	//Конец УНФ.ОтборыСписка
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПредставлениеПериодаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСОтборамиКлиент.ПредставлениеПериодаВыбратьПериод(ЭтотОбъект, "ВРаботе", "Начало");
	
КонецПроцедуры

&НаКлиенте
Процедура БыстроеСозданиеЗадачиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	НоваяЗадача = СоздатьЗадачуСервер(Текст);
	Если НЕ ЗначениеЗаполнено(НоваяЗадача) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыНовойЗадачи = Новый Структура("НоваяЗадача", НоваяЗадача);
	Если ВидыКонтактЦентра = 0 Тогда
		ПараметрыНовойЗадачи.Вставить("Список", "ВРаботе");
	ИначеЕсли ВидыКонтактЦентра = 1 Тогда
		ПараметрыНовойЗадачи.Вставить("Список", "ЗадачиБезСрока");
	ИначеЕсли ВидыКонтактЦентра = 2 Тогда
		ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
		ПараметрыНовойЗадачи.Вставить("Список", "ЗадачиНаВесьДеньКалендарь");
	КонецЕсли;
	
	ОбновитьТекущийЭлементСписка(ПараметрыНовойЗадачи);
	ПоказатьОповещениеПользователя(НСтр("ru='Создание:'"),ПолучитьНавигационнуюСсылку(НоваяЗадача),СтрШаблон(НСтр("ru='%1'"),НоваяЗадача),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура ОтборТегиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьМеткуИОтборСписка("Теги.Тег", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	УстановитьМеткуИОтборСписка("Ответственный", Элемент.Родитель.Имя, ВыбранноеЗначение);
	ВыбранноеЗначение = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗавершенныеПриИзменении(Элемент)
	УстановитьОтборПоЗавершеннымИЗапросыСписков();
КонецПроцедуры

&НаКлиенте
Процедура ВариантПериодаПриИзменении(Элемент)
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	
	СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтображенияПриАктивизацииДаты(Элемент)
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаВесьДеньКалендарьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	ПараметрыФормы.Вставить("Ключ",Элементы.ЗадачиНаВесьДеньКалендарь.ТекущиеДанные.Задача);
	ОткрытьФорму(ИмяФормыЗадачиПоТипу(Элементы.ЗадачиНаВесьДеньКалендарь.ТекущиеДанные.Задача),ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ФильтрБезСрокаПриИзменении(Элемент)
	ЗаполнитьЗадачиНаВесьДеньКалендарь();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрПросроченоПриИзменении(Элемент)
	ЗаполнитьЗадачиНаВесьДеньКалендарь();
КонецПроцедуры

#Область Планировщик

&НаСервере
Процедура ЗаполнитьЗадачиНаВесьДеньКалендарь()
	
	ЗадачиНаВесьДеньКалендарь.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаписиКалендаряСотрудника.Источник КАК Источник,
	|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
	|	ЗаписиКалендаряСотрудника.Начало КАК ДатаНачала,
	|	ЗаписиКалендаряСотрудника.Окончание КАК ДатаОкончания,
	|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
	|	ЗаписиКалендаряСотрудника.Описание КАК Содержание,
	|	ЗаписиКалендаряСотрудника.ОтветственныйИсточника КАК Ответственный,
	|	ЗаписиКалендаряСотрудника.Завершено КАК Состояние
	|ПОМЕСТИТЬ ВТ_Источники
	|ИЗ
	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	|ГДЕ
	|	ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
	|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари)
	|	И ЗаписиКалендаряСотрудника.Источник <> НЕОПРЕДЕЛЕНО
	|	И ЗаписиКалендаряСотрудника.Источник В(&РазрешенныеИсточники)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Источники.Источник КАК Ссылка,
	|	"""" КАК СостояниеИсточника,
	|	ВТ_Источники.Состояние КАК Состояние,
	|	0 КАК Картинка,
	|	ВТ_Источники.Содержание КАК Содержание,
	|	"""" КАК Основание,
	|	ВТ_Источники.Ответственный КАК Ответственный,
	|	ВТ_Источники.Наименование КАК Наименование,
	|	ВТ_Источники.ДатаНачала КАК Начало,
	|	ВТ_Источники.ДатаНачала КАК ДатаСоздания,
	|	ВТ_Источники.ДатаОкончания КАК Окончание,
	|	ВТ_Источники.Календарь КАК Календарь,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК Отступ,
	|	0 КАК КартинкаКалендаря,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(30)) КАК ДатаОбъединенная,
	|	Задачи.Теги.(
	|		"""" КАК Тег
	|	) КАК Теги
	|ИЗ
	|	ВТ_Источники КАК ВТ_Источники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗадачаСотрудника КАК Задачи
	|		ПО (Задачи.Ссылка = ВТ_Источники.Источник)
	|ГДЕ
	|	(НЕ ВТ_Источники.Состояние
	|				И &ОтборПоЗавершенным
	|			ИЛИ ИСТИНА
	|				И НЕ &ОтборПоЗавершенным)
	|	И (ВТ_Источники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И ВТ_Источники.ДатаНачала <= &ДатаОкончания
	|				И ВТ_Источники.ДатаНачала >= &ДатаНачала
	|			ИЛИ &ФильтрПросрочено
	|				И ВТ_Источники.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И ВТ_Источники.ДатаОкончания < &ТекущаяДатаСеанса)"
	+ СтрокаФильтровКалендарь("ВТ_Источники.Ответственный","Состояние", Ложь)+
	"ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задачи.Ссылка,
	|	ВЫБОР
	|		КОГДА Задачи.Выполнена
	|			ТОГДА ""Выполнена""
	|		ИНАЧЕ ""Завершена""
	|	КОНЕЦ,
	|	Задачи.Выполнена,
	|	6,
	|	"""",
	|	Задачи.Основание,
	|	Задачи.Ответственный,
	|	ВЫРАЗИТЬ(Задачи.Описание КАК СТРОКА(1000)),
	|	Задачи.ДатаНачала,
	|	Задачи.Дата,
	|	Задачи.ДатаОкончания,
	|	Задачи.Календарь,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)),
	|	0,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(50)),
	|	Задачи.Теги.(
	|		Тег
	|	)
	|ИЗ
	|	Документ.ЗадачаСотрудника КАК Задачи
	|ГДЕ
	|	Задачи.ПометкаУдаления = ЛОЖЬ
	|	И Задачи.Календарь В(&ВыбранныеКалендари)
	|	И (НЕ Задачи.Выполнена
	|			И &ОтборПоЗавершенным
	|		ИЛИ ИСТИНА
	|			И НЕ &ОтборПоЗавершенным)
	|	И ((Задачи.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Задачи.ДатаНачала <= &ДатаОкончания
	|	И Задачи.ДатаНачала >= &ДатаНачала 
	|	ИЛИ (&ФильтрБезСрока И Задачи.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|	И Задачи.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)))
	|	ИЛИ (&ФильтрПросрочено И Задачи.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) 
	|	И Задачи.ДатаОкончания < &ТекущаяДатаСеанса))" 
	+СтрокаФильтровКалендарь("Ответственный","Выполнена", Истина)+
	" УПОРЯДОЧИТЬ ПО
	|	Начало, ДатаСоздания УБЫВ";
	
	ВыбранныеКалендари = Новый Массив;
	Для Каждого Календарь Из ДоступныеКалендари Цикл
		Если НЕ Календарь.Выбран Тогда 
			Продолжить;
		КонецЕсли;
		ВыбранныеКалендари.Добавить(Календарь.Календарь);
	КонецЦикла;

	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ВыбранныеКалендари", ВыбранныеКалендари);
	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодДанных.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодДанных.ДатаОкончания);
	Запрос.УстановитьПараметр("ФильтрБезСрока", ФильтрБезСрока);
	Запрос.УстановитьПараметр("ФильтрПросрочено", ФильтрПросрочено);
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ОтборПоЗавершенным", НЕ ОтборЗавершенные);
	Запрос.УстановитьПараметр("РазрешенныеИсточники", РазрешенныеИсточники());
	
	УстановитьПараметрыФильтров(Запрос);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЗадачиНаВесьДеньКалендарь.Добавить();
		НоваяСтрока.Задача = Выборка.Ссылка;

		Если ЗначениеЗаполнено(Выборка.Окончание) И Выборка.Окончание < ТекущаяДатаСеанса() Тогда
			НоваяСтрока.Просрочено = 1;
		КонецЕсли;
		Если ВариантПериода = "День" ИЛИ НЕ ЗначениеЗаполнено(Выборка.Начало) Тогда
			Если ЗначениеЗаполнено(Выборка.Окончание) Тогда
				НоваяСтрока.ДатаСтрокой = Формат(Выборка.Начало, "ДФ='ddd, d MMMM'");
			КонецЕсли;
			НоваяСтрока.Представление = Выборка.Наименование;
		ИначеЕсли (ВариантПериода = "Неделя" ИЛИ ВариантПериода = "Месяц") И ЗначениеЗаполнено(Выборка.Начало) Тогда
			НоваяСтрока.ДатаСтрокой = Формат(Выборка.Начало, "ДФ='ddd, d MMMM'");
			НоваяСтрока.Представление = Выборка.Наименование;
		КонецЕсли;
		НайденныеСтроки = ДоступныеКалендари.НайтиСтроки(Новый Структура("Календарь", Выборка.Календарь));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.ВариантЦвета = НайденныеСтроки[0].ВариантЦвета;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныеКалендари = ДоступныеКалендари.НайтиСтроки(Новый Структура("Выбран", Истина));
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Начало", Начало);
	ЗначенияЗаполнения.Вставить("Окончание", Конец);
	Если ВыбранныеКалендари.Количество() = 1 Тогда
		ЗначенияЗаполнения.Вставить("Календарь", ВыбранныеКалендари[0].Календарь);
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборТипаДелаЗавершение",ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Обработка.КонтактЦентр.Форма.СозданиеИзКалендаря", ПараметрыФормы,,,,,ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		Если ВыделенныйЭлемент.Значение.РедактированиеЗапрещено Тогда
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
		ОбрабатываемыйЭлемент.Вставить("Источник",				ВыделенныйЭлемент.Значение.Источник);
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиИсточника);
		ОбрабатываемыйЭлемент.Вставить("Начало",				ВыделенныйЭлемент.Начало);
		ОбрабатываемыйЭлемент.Вставить("Конец",					ВыделенныйЭлемент.Конец);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	ОтменаРедактирования = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломРедактирования(Элемент, НовыйЭлемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	ОбрабатываемыеЭлементы = Новый Массив;
	
	Для Каждого ВыделенныйЭлемент Из Элемент.ВыделенныеЭлементы Цикл
		
		Если ВыделенныйЭлемент.Значение.РедактированиеЗапрещено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		ОбрабатываемыйЭлемент = Новый Структура;
		ОбрабатываемыйЭлемент.Вставить("ЗаписьКалендаря",		ВыделенныйЭлемент.Значение.ЗаписьКалендаря);
		ОбрабатываемыйЭлемент.Вставить("Источник",				ВыделенныйЭлемент.Значение.Источник);
		ОбрабатываемыйЭлемент.Вставить("НомерСтрокиИсточника",	ВыделенныйЭлемент.Значение.НомерСтрокиИсточника);
		ОбрабатываемыйЭлемент.Вставить("ПометкаУдаления",		Истина);
		
		ОбрабатываемыеЭлементы.Добавить(ОбрабатываемыйЭлемент);
		
	КонецЦикла;
	
	Отказ = Не СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриСменеТекущегоПериодаОтображения(Элемент, ТекущиеПериодыОтображения, СтандартнаяОбработка)
	
	Если ВариантПериода = "Месяц" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Если ТекущиеПериодыОтображения[0].Начало = НачалоДня(ТекущаяДатаСеанса) Тогда
			ДатаОтображения = ТекущаяДатаСеанса;
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало < Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, -1);
		ИначеЕсли ТекущиеПериодыОтображения[0].Начало > Планировщик.ТекущиеПериодыОтображения[0].Начало Тогда
			ДатаОтображения = ДобавитьМесяц(ДатаОтображения, 1);
		КонецЕсли;
		
		ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
		Планировщик.ТекущиеПериодыОтображения.Очистить();
		Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
		
		Планировщик.ИнтервалыФона.Очистить();
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	Иначе
		
		ДатаОтображения = ТекущиеПериодыОтображения[0].Начало;
		
	КонецЕсли;
	
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	Элементы.ДатаОтображения.Обновить();
	ПодключитьОбработчикОжидания("ОбновитьДанныеПланировщикаКлиент", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФормуТекущегоЭлементаПланировщика();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Основание", ПараметрыПеретаскивания.Значение.Источник);
	
	ДанныеКалендаря = Новый Структура;
	ДанныеКалендаря.Вставить("Начало", НачалоЧаса(Дата));
	ДанныеКалендаря.Вставить("Окончание", КонецЧаса(Дата)+1);
	ДанныеКалендаря.Вставить("Описание", "");
	
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыЗадачи.ЗначенияЗаполнения.Вставить("ДанныеЗаписиКалендаря", ДанныеКалендаря);
	ПараметрыЗадачи.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	
	ОткрытьФорму("Документ.ЗадачаСотрудника.Форма.ФормаДокумента", ПараметрыЗадачи);
	
КонецПроцедуры

#КонецОбласти

#Область Список_Входящее

&НаСервереБезКонтекста
Процедура ВходящееПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого КлючИЗначение Из Строки Цикл
		
		Если ТипЗнч(КлючИЗначение.Ключ.Источник) = Тип("ДокументСсылка.Событие") Тогда
			
			Реквизиты = "ТипСобытия,Участники,Тема,Содержание,УчетнаяЗапись";
			РеквизитыСобытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КлючИЗначение.Ключ.Источник,Реквизиты);
			ЗаполнитьДанныеВходящегоСобытия(КлючИЗначение, РеквизитыСобытия);
			
		КонецЕсли;
		
		Если ТипЗнч(КлючИЗначение.Ключ.Источник) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Реквизиты = "Контрагент,Комментарий";
			РеквизитыЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(КлючИЗначение.Ключ.Источник,Реквизиты);
			ЗаполнитьДанныеЗаказа(КлючИЗначение, РеквизитыЗаказа);
		КонецЕсли;
		
		Если ТипЗнч(КлючИЗначение.Ключ.Источник) = Тип("Строка") Тогда
			КлючИЗначение.Значение.Данные.ПерваяСтрока = СтрШаблон(НСтр("ru ='Новое сообщение %1'"), КлючИЗначение.Значение.Данные.ТипВнешнейСистемы);
			КлючИЗначение.Значение.Данные.ТретьяСтрока = СтрШаблон(НСтр("ru = 'от: %1'"), КлючИЗначение.Значение.Данные.ОтКого);
			КлючИЗначение.Значение.Данные.ПятаяСтрока = КлючИЗначение.Значение.Данные.Ответственный;
			КлючИЗначение.Значение.Данные.ЧетвертаяСтрока = КлючИЗначение.Значение.Данные.Описание;
			КлючИЗначение.Значение.Данные.ТипПоля = ?(КлючИЗначение.Значение.Данные.ТипВнешнейСистемы = "Telegram", 0,1);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВходящегоСобытия(КлючИЗначение, РеквизитыСобытия)
	
	МассивУчастники = Новый Массив;
	Участники = РеквизитыСобытия.Участники.Выгрузить();
	Для Каждого Участник Из Участники Цикл
		МассивУчастники.Добавить(Строка(Участник.Контакт));
	КонецЦикла;
	
	Если РеквизитыСобытия.ТипСобытия = Перечисления.ТипыСобытий.ЭлектронноеПисьмо Тогда
		КлючИЗначение.Значение.Данные.ПерваяСтрока = СтрШаблон(НСтр("ru = 'от : %1'"), СтрСоединить(МассивУчастники,";"));
		КлючИЗначение.Значение.Данные.ВтораяСтрока = Строка(РеквизитыСобытия.УчетнаяЗапись);
		КлючИЗначение.Значение.Данные.ТретьяСтрока = РеквизитыСобытия.Тема;
		КлючИЗначение.Значение.Данные.ЧетвертаяСтрока = РеквизитыСобытия.Содержание;
		КлючИЗначение.Значение.Данные.ПятаяСтрока = КлючИЗначение.Ключ.Ответственный;
		КлючИЗначение.Значение.Данные.ТипПоля = 2;
		Возврат;
	КонецЕсли;
	
	Если РеквизитыСобытия.ТипСобытия = Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
		КлючИЗначение.Значение.Данные.ПерваяСтрока = НСтр("ru='Пропущенный звонок'");
		КлючИЗначение.Значение.Данные.ВтораяСтрока = СтрШаблон(НСтр("ru = 'от : %1'"), СтрСоединить(МассивУчастники,";"));
		КлючИЗначение.Значение.Данные.ПятаяСтрока = КлючИЗначение.Ключ.Ответственный;
		КлючИЗначение.Значение.Данные.ТипПоля = 3;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеЗаказа(КлючИЗначение, РеквизитыЗаказа)
	КлючИЗначение.Значение.Данные.ПерваяСтрока = Строка(КлючИЗначение.Значение.Данные.Источник);
	КлючИЗначение.Значение.Данные.ВтораяСтрока = Строка(РеквизитыЗаказа.Контрагент);
	КлючИЗначение.Значение.Данные.ТретьяСтрока = Строка(РеквизитыЗаказа.Комментарий);
	КлючИЗначение.Значение.Данные.ПятаяСтрока = КлючИЗначение.Значение.Данные.Ответственный;
	КлючИЗначение.Значение.Данные.ТипПоля = 4;
КонецПроцедуры

&НаКлиенте
Процедура ВходящееПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент.Имя = "ВходящееКартинкаПеренаправить" Тогда
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("Источник", Элемент.ТекущаяСтрока.Источник);
		ДополнительныеПараметры.Вставить("Список", "Входящее");
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОтветственного",ЭтотОбъект,ДополнительныеПараметры);
		ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
		ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыВыбора,,,,,ОписаниеОповещенияОЗакрытии);
		Элемент.ТекущийЭлемент = Элементы.ВходящееПерваяСтрока;
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ВходящееКартинкаКоманды" Тогда
		Элемент.ТекущийЭлемент = Элементы.ВходящееПерваяСтрока;
		УдалитьСтрокуВходящегоИзРегистра(Элемент.ТекущаяСтрока.Источник, Элемент.ТекущаяСтрока.Ответственный);
		Элемент.ТекущаяСтрока = Неопределено;
	КонецЕсли;
	Элементы.Входящее.ВыделенныеСтроки.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящееВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПараметрыВходящего = Новый Структура;
	ПараметрыВходящего.Вставить("Ключ", Элемент.ТекущиеДанные.Источник);
	Если ТипЗнч(Элемент.ТекущиеДанные.Источник) = Тип("Строка") Тогда
		СсылкаОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(Элемент.ТекущиеДанные.Источник);
		ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(СсылкаОбсуждения));
	ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Источник) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта",ПараметрыВходящего);
	ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.Источник) = Тип("ДокументСсылка.Событие") Тогда
		ОткрытьФорму("Документ.Событие.ФормаОбъекта",ПараметрыВходящего);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВходящееНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если ВидыКонтактЦентра <> 2 Тогда
		СтруктураПеретаскивания = Новый Структура;
		СтруктураПеретаскивания.Вставить("Значение", ПараметрыПеретаскивания.Значение.Источник);
		СтруктураПеретаскивания.Вставить("Список", "Входящее");
		ПараметрыПеретаскивания.Значение = СтруктураПеретаскивания;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Список_ВРаботе

&НаКлиенте
Процедура ВРаботеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока.Ссылка);
	ОткрытьФорму(ИмяФормыЗадачиПоТипу(ВыбраннаяСтрока.Ссылка),ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ВРаботеПриАктивизацииЯчейки(Элемент)
	
	Элементы.ВРаботеКонтекстноеМенюЗавершитьЗадачу.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ВРаботеКонтекстноеМенюИзменить.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ВРаботеКонтекстноеМенюПеренаправить.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Элементы.ВРаботеКонтекстноеУстановитьСостояние.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	Элементы.ВРаботе.ТекущийЭлемент = Элементы.ВРаботеНаименование;
	Если ТипЗнч(Элемент.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Элементы.ВРаботеКонтекстноеУстановитьСостояние.Видимость = Ложь;
		Элементы.ВРаботеКонтекстноеМенюЗавершитьЗадачу.Видимость = Истина;
	Иначе
		Элементы.ВРаботеКонтекстноеУстановитьСостояние.Видимость = Истина;
		Элементы.ВРаботеКонтекстноеМенюЗавершитьЗадачу.Видимость = Ложь;
	КонецЕсли;
	Элементы.ВРаботе.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВРаботеПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		Новый ТаблицаЗначений);
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого КлючИЗначение Из Строки Цикл
		КлючИЗначение.Значение.Данные.Картинка = КартинкаПоТипуЗадачи(КлючИЗначение.Значение.Данные.Ссылка);
		КлючИЗначение.Значение.Данные.ДатаОбъединенная = СтрокаДаты(КлючИЗначение.Значение.Данные.Начало,КлючИЗначение.Значение.Данные.Окончание, "ВРаботе");
		Если ТипЗнч(КлючИЗначение.Значение.Данные.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			КлючИЗначение.Значение.Данные.Содержание = СтрокаТегов(КлючИЗначение.Значение.Данные.Ссылка.Теги);
		КонецЕсли;
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(КлючИЗначение.Значение.Данные.Календарь);
		КлючИЗначение.Значение.Данные.ЗадачаПросрочена = ЗадачаПросрочена(КлючИЗначение.Значение.Данные.Начало, КлючИЗначение.Значение.Данные.Окончание);
		Если НайденнаяСтрока = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		КлючИЗначение.Значение.Данные.КартинкаКалендаря = НайденнаяСтрока.ВариантЦвета;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВРаботеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СтруктураПеретаскивания = Новый Структура;
	СтруктураПеретаскивания.Вставить("Значение", ПараметрыПеретаскивания.Значение.Ссылка);
	СтруктураПеретаскивания.Вставить("Список", "ВРаботе");
	ПараметрыПеретаскивания.Значение = СтруктураПеретаскивания;
КонецПроцедуры

&НаКлиенте
Процедура ВРаботеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуЗадачи(ПараметрыПеретаскивания.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВРаботеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти 

#Область Список_ЗадачиНаСегодня

&НаКлиенте
Процедура ЗадачиНаСегодняПриАктивизацииЯчейки(Элемент)
	
	Элементы.ЗадачиНаСегодняКонтекстноеМенюЗавершитьЗадачуСегодня.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиНаСегодняКонтекстноеМенюИзменитьСегодня.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиНаСегодняКонтекстноеМенюПеренаправитьЗадачуНаСегодня.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Элементы.ЗадачиНаСегодняКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Элемент.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Элементы.ЗадачиНаСегодняКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Элементы.ЗадачиНаСегодняКонтекстноеМенюЗавершитьЗадачуСегодня.Видимость = Истина;
	Иначе
		Элементы.ЗадачиНаСегодняКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Истина;
		Элементы.ЗадачиНаСегодняКонтекстноеМенюЗавершитьЗадачуСегодня.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗадачиНаСегодня.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗадачиНаСегодняПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
	"ДоступныеКалендари",
	Новый ТаблицаЗначений);
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого КлючИЗначение Из Строки Цикл
		КлючИЗначение.Значение.Данные.Картинка = КартинкаПоТипуЗадачи(КлючИЗначение.Значение.Данные.Ссылка);
		КлючИЗначение.Значение.Данные.ДатаОбъединенная = СтрокаДаты(КлючИЗначение.Значение.Данные.Начало, КлючИЗначение.Значение.Данные.Окончание, "ЗадачиНаСегодня");
		КлючИЗначение.Значение.Данные.ЗадачаПросрочена = ЗадачаПросрочена(КлючИЗначение.Значение.Данные.Начало, КлючИЗначение.Значение.Данные.Окончание);
		Если ТипЗнч(КлючИЗначение.Значение.Данные.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			КлючИЗначение.Значение.Данные.Содержание = СтрокаТегов(КлючИЗначение.Значение.Данные.Ссылка.Теги);
		КонецЕсли;
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(КлючИЗначение.Значение.Данные.Календарь);
		КлючИЗначение.Значение.Данные.КартинкаКалендаря = НайденнаяСтрока.ВариантЦвета;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаСегодняПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаСегодняНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СтруктураПеретаскивания = Новый Структура;
	СтруктураПеретаскивания.Вставить("Значение", ПараметрыПеретаскивания.Значение.Ссылка);
	СтруктураПеретаскивания.Вставить("Список", "ЗадачиНаСегодня");
	ПараметрыПеретаскивания.Значение = СтруктураПеретаскивания;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаСегодняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока.Ссылка);
	ОткрытьФорму(ИмяФормыЗадачиПоТипу(ВыбраннаяСтрока.Ссылка),ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаСегодняПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение.Список <> "Входящее" Тогда
		ИзменитьДатуВОбъекте(ПараметрыПеретаскивания.Значение, "ЗадачиНаСегодня");
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),
				ПолучитьНавигационнуюСсылку(ПараметрыПеретаскивания.Значение.Значение),
				СтрШаблон(НСтр("ru='%1'"),ПараметрыПеретаскивания.Значение.Значение),
				БиблиотекаКартинок.Информация32);
	Иначе
		ОткрытьФормуЗадачи(ПараметрыПеретаскивания.Значение, "ЗадачиНаСегодня");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Список_ЗадачиНаЗавтра

&НаКлиенте
Процедура ЗадачиНаЗавтраВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока.Ссылка);
	ОткрытьФорму(ИмяФормыЗадачиПоТипу(ВыбраннаяСтрока.Ссылка),ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаЗавтраПриАктивизацииЯчейки(Элемент)
	
	Элементы.ЗадачиНаЗавтраКонтекстноеМенюЗавершитьЗадачуЗавтра.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиНаЗавтраКонтекстноеМенюИзменитьЗавтра.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиНаЗавтраКонтекстноеМенюПеренаправитьЗадачуНаЗавтра.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Элементы.ЗадачиНаЗавтраКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Элемент.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Элементы.ЗадачиНаЗавтраКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Элементы.ЗадачиНаЗавтраКонтекстноеМенюЗавершитьЗадачуЗавтра.Видимость = Истина;
	Иначе
		Элементы.ЗадачиНаЗавтраКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Истина;
		Элементы.ЗадачиНаЗавтраКонтекстноеМенюЗавершитьЗадачуЗавтра.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗадачиНаЗавтра.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗадачиНаЗавтраПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
	"ДоступныеКалендари",
	Новый ТаблицаЗначений);
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого КлючИЗначение Из Строки Цикл
		КлючИЗначение.Значение.Данные.Картинка = КартинкаПоТипуЗадачи(КлючИЗначение.Значение.Данные.Ссылка);
		КлючИЗначение.Значение.Данные.ДатаОбъединенная = СтрокаДаты(КлючИЗначение.Значение.Данные.Начало, КлючИЗначение.Значение.Данные.Окончание, "ЗадачиНаЗавтра");
		Если ТипЗнч(КлючИЗначение.Значение.Данные.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			КлючИЗначение.Значение.Данные.Содержание = СтрокаТегов(КлючИЗначение.Значение.Данные.Ссылка.Теги);
		КонецЕсли;
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(КлючИЗначение.Значение.Данные.Календарь);
		КлючИЗначение.Значение.Данные.КартинкаКалендаря = НайденнаяСтрока.ВариантЦвета;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаЗавтраНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СтруктураПеретаскивания = Новый Структура;
	СтруктураПеретаскивания.Вставить("Значение", ПараметрыПеретаскивания.Значение.Ссылка);
	СтруктураПеретаскивания.Вставить("Список", "ЗадачиНаЗавтра");
	ПараметрыПеретаскивания.Значение = СтруктураПеретаскивания;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаЗавтраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаЗавтраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение.Список <> "Входящее" Тогда
		ИзменитьДатуВОбъекте(ПараметрыПеретаскивания.Значение, "ЗадачиНаЗавтра");
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),
				ПолучитьНавигационнуюСсылку(ПараметрыПеретаскивания.Значение.Значение),
				СтрШаблон(НСтр("ru='%1'"),ПараметрыПеретаскивания.Значение.Значение),
				БиблиотекаКартинок.Информация32);
	Иначе
		ОткрытьФормуЗадачи(ПараметрыПеретаскивания.Значение, "ЗадачиНаЗавтра");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Список_ЗадачиБезСрока

&НаКлиенте
Процедура ЗадачиНаНеделеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока.Ссылка);
	ОткрытьФорму(ИмяФормыЗадачиПоТипу(ВыбраннаяСтрока.Ссылка),ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиБезСрокаПриАктивизацииЯчейки(Элемент)
	
	Элементы.ЗадачиБезСрокаКонтекстноеМенюЗавершитьЗадачуБезСрока.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиБезСрокаКонтекстноеМенюИзменитьБезСрока.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиБезСрокаКонтекстноеМенюПеренаправитьЗадачуБезСрока.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Элементы.ЗадачиБезСрокаКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Элемент.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Элементы.ЗадачиБезСрокаКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Элементы.ЗадачиБезСрокаКонтекстноеМенюЗавершитьЗадачуБезСрока.Видимость = Истина;
	Иначе
		Элементы.ЗадачиБезСрокаКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Истина;
		Элементы.ЗадачиБезСрокаКонтекстноеМенюЗавершитьЗадачуБезСрока.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗадачиБезСрока.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗадачиБезСрокаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
	"ДоступныеКалендари",
	Новый ТаблицаЗначений);
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого КлючИЗначение Из Строки Цикл
		КлючИЗначение.Значение.Данные.Картинка = КартинкаПоТипуЗадачи(КлючИЗначение.Значение.Данные.Ссылка);
		Если ТипЗнч(КлючИЗначение.Значение.Данные.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			КлючИЗначение.Значение.Данные.Содержание = СтрокаТегов(КлючИЗначение.Значение.Данные.Ссылка.Теги);
		КонецЕсли;
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(КлючИЗначение.Значение.Данные.Календарь);
		КлючИЗначение.Значение.Данные.КартинкаКалендаря = НайденнаяСтрока.ВариантЦвета;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиБезСрокаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока.Ссылка);
	ОткрытьФорму(ИмяФормыЗадачиПоТипу(ВыбраннаяСтрока.Ссылка),ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиБезСрокаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СтруктураПеретаскивания = Новый Структура;
	СтруктураПеретаскивания.Вставить("Значение", ПараметрыПеретаскивания.Значение.Ссылка);
	СтруктураПеретаскивания.Вставить("Список", "ЗадачиБезСрока");
	ПараметрыПеретаскивания.Значение = СтруктураПеретаскивания;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиБезСрокаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение.Список <> "Входящее" Тогда
		ИзменитьДатуВОбъекте(ПараметрыПеретаскивания.Значение, "ЗадачиБезСрока");
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),
				ПолучитьНавигационнуюСсылку(ПараметрыПеретаскивания.Значение.Значение),
				СтрШаблон(НСтр("ru='%1'"),ПараметрыПеретаскивания.Значение.Значение),
				БиблиотекаКартинок.Информация32);
	Иначе
		ОткрытьФормуЗадачи(ПараметрыПеретаскивания.Значение, "ЗадачиБезСрока");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиБезСрокаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область Список_ЗадачиНаНеделе

&НаСервереБезКонтекста
Процедура ЗадачиНаНеделеПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
	"ДоступныеКалендари",
	Новый ТаблицаЗначений);
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого КлючИЗначение Из Строки Цикл
		
		КлючИЗначение.Значение.Данные.Картинка = КартинкаПоТипуЗадачи(КлючИЗначение.Значение.Данные.Ссылка);
		КлючИЗначение.Значение.Данные.ДатаОбъединенная = СтрокаДаты(КлючИЗначение.Значение.Данные.Начало, КлючИЗначение.Значение.Данные.Окончание, "ЗадачиНаНеделе");
		Если ТипЗнч(КлючИЗначение.Значение.Данные.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			КлючИЗначение.Значение.Данные.Содержание = СтрокаТегов(КлючИЗначение.Значение.Данные.Ссылка.Теги);
		КонецЕсли;
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(КлючИЗначение.Значение.Данные.Календарь);
		КлючИЗначение.Значение.Данные.КартинкаКалендаря = НайденнаяСтрока.ВариантЦвета;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаНеделеПриАктивизацииЯчейки(Элемент)
	
	Элементы.ЗадачиНаНеделеКонтекстноеМенюЗавершитьЗадачуНаНеделе.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиНаНеделеКонтекстноеМенюИзменитьНаНеделе.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиНаНеделеКонтекстноеМенюПеренаправитьЗадачуНаНеделе.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Элементы.ЗадачиНаНеделеКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника")  Тогда
		Элементы.ЗадачиНаНеделеКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Элементы.ЗадачиНаНеделеКонтекстноеМенюЗавершитьЗадачуНаНеделе.Видимость = Истина;
	Иначе
		Элементы.ЗадачиНаНеделеКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Истина;
		Элементы.ЗадачиНаНеделеКонтекстноеМенюЗавершитьЗадачуНаНеделе.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗадачиНаНеделе.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаНеделеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СтруктураПеретаскивания = Новый Структура;
	СтруктураПеретаскивания.Вставить("Значение", ПараметрыПеретаскивания.Значение.Ссылка);
	СтруктураПеретаскивания.Вставить("Список", "ЗадачиНаНеделе");
	ПараметрыПеретаскивания.Значение = СтруктураПеретаскивания;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаНеделеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиНаНеделеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение.Список <> "Входящее" Тогда
		ИзменитьДатуВОбъекте(ПараметрыПеретаскивания.Значение, "ЗадачиНаНеделе");
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),
				ПолучитьНавигационнуюСсылку(ПараметрыПеретаскивания.Значение.Значение),
				СтрШаблон(НСтр("ru='%1'"),ПараметрыПеретаскивания.Значение.Значение),
				БиблиотекаКартинок.Информация32);
	Иначе
		ОткрытьФормуЗадачи(ПараметрыПеретаскивания.Значение, "ЗадачиНаНеделе");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Список_ЗадачиПозже

&НаКлиенте
Процедура ЗадачиПозжеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока.Ссылка);
	ОткрытьФорму(ИмяФормыЗадачиПоТипу(ВыбраннаяСтрока.Ссылка),ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПозжеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СтруктураПеретаскивания = Новый Структура;
	СтруктураПеретаскивания.Вставить("Значение", ПараметрыПеретаскивания.Значение.Ссылка);
	СтруктураПеретаскивания.Вставить("Список", "ЗадачиПозже");
	ПараметрыПеретаскивания.Значение = СтруктураПеретаскивания;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПозжеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение.Список <> "Входящее" Тогда
		ИзменитьДатуВОбъекте(ПараметрыПеретаскивания.Значение, "ЗадачиПозже");
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),
				ПолучитьНавигационнуюСсылку(ПараметрыПеретаскивания.Значение.Значение),
				СтрШаблон(НСтр("ru='%1'"),ПараметрыПеретаскивания.Значение.Значение),
				БиблиотекаКартинок.Информация32);
	Иначе
		ОткрытьФормуЗадачи(ПараметрыПеретаскивания.Значение, "ЗадачиПозже");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПозжеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПозжеПриАктивизацииЯчейки(Элемент)
	
	Элементы.ЗадачиПозжеКонтекстноеМенюЗавершитьЗадачуПозже.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ИзменитьПозже.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиПозжеКонтекстноеМенюПеренаправитьЗадачуПозже.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Элементы.ЗадачиПозжеКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Элементы.ЗадачиПозжеКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Элементы.ЗадачиПозжеКонтекстноеМенюЗавершитьЗадачуПозже.Видимость = Истина;
	Иначе
		Элементы.ЗадачиПозжеКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Истина;
		Элементы.ЗадачиПозжеКонтекстноеМенюЗавершитьЗадачуПозже.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗадачиПозже.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗадачиПозжеПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
	"ДоступныеКалендари",
	Новый ТаблицаЗначений);
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого КлючИЗначение Из Строки Цикл
		
		КлючИЗначение.Значение.Данные.Картинка = КартинкаПоТипуЗадачи(КлючИЗначение.Значение.Данные.Ссылка);
		КлючИЗначение.Значение.Данные.ДатаОбъединенная = СтрокаДаты(КлючИЗначение.Значение.Данные.Начало, КлючИЗначение.Значение.Данные.Окончание, "ЗадачиПозже");
		Если ТипЗнч(КлючИЗначение.Значение.Данные.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			КлючИЗначение.Значение.Данные.Содержание = СтрокаТегов(КлючИЗначение.Значение.Данные.Ссылка.Теги);
		КонецЕсли;
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(КлючИЗначение.Значение.Данные.Календарь);
		КлючИЗначение.Значение.Данные.КартинкаКалендаря = НайденнаяСтрока.ВариантЦвета;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

#КонецОбласти

#Область Список_ЗадачиПросрочены

&НаСервереБезКонтекста
Процедура ЗадачиПросроченыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
	"ДоступныеКалендари",
	Новый ТаблицаЗначений);
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого КлючИЗначение Из Строки Цикл
		
		КлючИЗначение.Значение.Данные.Картинка = КартинкаПоТипуЗадачи(КлючИЗначение.Значение.Данные.Ссылка);
		КлючИЗначение.Значение.Данные.ДатаОбъединенная = СтрокаДаты(КлючИЗначение.Значение.Данные.Начало, КлючИЗначение.Значение.Данные.Окончание, "ЗадачиНаНеделе");
		КлючИЗначение.Значение.Данные.ЗадачаПросрочена = ЗадачаПросрочена(КлючИЗначение.Значение.Данные.Начало, КлючИЗначение.Значение.Данные.Окончание);
		Если ТипЗнч(КлючИЗначение.Значение.Данные.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			КлючИЗначение.Значение.Данные.Содержание = СтрокаТегов(КлючИЗначение.Значение.Данные.Ссылка.Теги);
		КонецЕсли;
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(КлючИЗначение.Значение.Данные.Календарь);
		Если НайденнаяСтрока <> Неопределено Тогда
			КлючИЗначение.Значение.Данные.КартинкаКалендаря = НайденнаяСтрока.ВариантЦвета;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПросроченыПриАктивизацииЯчейки(Элемент)
	
	Элементы.ЗадачиПросроченыКонтекстноеМенюЗавершитьЗадачуПросрочено.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиПросроченыКонтекстноеМенюИзменитьЗадачиПросрочены.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	Элементы.ЗадачиПросроченыКонтекстноеМенюПеренаправитьЗадачуПросрочена.Доступность = Элемент.ТекущаяСтрока <> Неопределено;
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Элементы.ЗадачиПросроченыКонтекстноеМенюГруппаУстановитьСостояние.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Элемент.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Элементы.ЗадачиПросроченыКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Ложь;
		Элементы.ЗадачиПросроченыКонтекстноеМенюЗавершитьЗадачуПросрочено.Видимость = Истина;
	Иначе
		Элементы.ЗадачиПросроченыКонтекстноеМенюГруппаУстановитьСостояние.Видимость = Истина;
		Элементы.ЗадачиПросроченыКонтекстноеМенюЗавершитьЗадачуПросрочено.Видимость = Ложь;
	КонецЕсли;
	Элементы.ЗадачиПросрочены.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПросроченыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока.Ссылка);
	ОткрытьФорму(ИмяФормыЗадачиПоТипу(ВыбраннаяСтрока.Ссылка),ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПросроченыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	СтруктураПеретаскивания = Новый Структура;
	СтруктураПеретаскивания.Вставить("Значение", ПараметрыПеретаскивания.Значение.Ссылка);
	СтруктураПеретаскивания.Вставить("Список", "ЗадачиПросрочены");
	ПараметрыПеретаскивания.Значение = СтруктураПеретаскивания;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗадачиЗавершеныПриАктивизацииЯчейки(Элемент)
	Элементы.ЗадачиЗавершены.ВыделенныеСтроки.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиЗавершеныВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	ПараметрыФормы.Вставить("Ключ", ВыбраннаяСтрока.Ссылка);
	ОткрытьФорму(ИмяФормыЗадачиПоТипу(ВыбраннаяСтрока.Ссылка),ПараметрыФормы);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗадачиЗавершеныПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
	"ДоступныеКалендари",
	Новый ТаблицаЗначений);

	Для Каждого КлючИЗначение Из Строки Цикл
		
		КлючИЗначение.Значение.Данные.Картинка = КартинкаПоТипуЗадачи(КлючИЗначение.Значение.Данные.Ссылка);
		КлючИЗначение.Значение.Данные.ДатаОбъединенная = СтрокаДаты(КлючИЗначение.Значение.Данные.Начало, КлючИЗначение.Значение.Данные.Окончание, "ЗадачиЗавершены");
		Если ТипЗнч(КлючИЗначение.Значение.Данные.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			КлючИЗначение.Значение.Данные.Содержание = СтрокаТегов(КлючИЗначение.Значение.Данные.Ссылка.Теги);
		КонецЕсли;
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(КлючИЗначение.Значение.Данные.Календарь);
		Если НайденнаяСтрока <> Неопределено Тогда
			КлючИЗначение.Значение.Данные.КартинкаКалендаря = НайденнаяСтрока.ВариантЦвета;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбранКалендарьПриИзменении(Элемент)
	
	Если ВидыКонтактЦентра = 2 Тогда
		СохранитьНастройкиИОбновитьДанныеПланировщикаСервер();
		Возврат;
	КонецЕсли;
	УстановитьОтборПоКалендарюИПоРазрешеннымИсточникам();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЦветКалендарьНажатие(Элемент)
	
	ТекущийЭлементЦвета = Элемент;
	ОткрытьФорму("ОбщаяФорма.ВыборЦвета", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыКонтактЦентраПриИзменении(Элемент)
	УправлениеФормой();	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастроитьВходящееНажатие(Элемент)
	ОткрытьФорму("Обработка.КонтактЦентр.Форма.НастройкаВходящего");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапланироватьЗадачу(Команда)
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Значение", Элементы.Входящее.ТекущиеДанные.Источник);
	ПараметрыЗадачи.Вставить("Список", "Входящее");
	ОткрытьФормуЗадачи(ПараметрыЗадачи);
КонецПроцедуры

&НаКлиенте
Процедура УбратьИзВходящего(Команда)
	УдалитьСтрокуВходящегоИзРегистра(Элементы.Входящее.ТекущаяСтрока.Источник, Элементы.Входящее.ТекущаяСтрока.Ответственный);	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВходящее(Команда)
	ПараметрыВходящего = Новый Структура;
	ПараметрыВходящего.Вставить("Ключ", Элементы.Входящее.ТекущиеДанные.Источник);
	Если ТипЗнч(Элементы.Входящее.ТекущиеДанные.Источник) = Тип("Строка") Тогда
		СсылкаОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(Элементы.Входящее.ТекущиеДанные.Источник);
		ПерейтиПоНавигационнойСсылке(ПолучитьНавигационнуюСсылку(СсылкаОбсуждения));
	ИначеЕсли ТипЗнч(Элементы.Входящее.ТекущиеДанные.Источник) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ОткрытьФорму("Документ.ЗаказПокупателя.ФормаОбъекта",ПараметрыВходящего);
	ИначеЕсли ТипЗнч(Элементы.Входящее.ТекущиеДанные.Источник) = Тип("ДокументСсылка.Событие") Тогда
		ОткрытьФорму("Документ.Событие.ФормаОбъекта",ПараметрыВходящего);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьВходящее(Команда)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", Элементы.Входящее.ТекущаяСтрока.Источник);
	ДополнительныеПараметры.Вставить("Список", "Входящее");
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОтветственного",ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыВыбора,,,,,ОписаниеОповещенияОЗакрытии);
	Элементы.Входящее.ТекущийЭлемент = Элементы.ВходящееПерваяСтрока;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуСегодня(Команда)
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Список", "ЗадачиНаСегодня");
	ОткрытьФормуЗадачи(ПараметрыЗадачи, "ЗадачиНаСегодня", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуЗавтра(Команда)
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Список", "ЗадачиНаЗавтра");
	ОткрытьФормуЗадачи(ПараметрыЗадачи, "ЗадачиНаЗавтра", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуБезСрока(Команда)
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Список", "ЗадачиБезСрока");
	ОткрытьФормуЗадачи(ПараметрыЗадачи, "ЗадачиБезСрока", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуНаНеделе(Команда)
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Список", "ЗадачиНаНеделе");
	ОткрытьФормуЗадачи(ПараметрыЗадачи, "ЗадачиНаНеделе", Истина);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуПозже(Команда)
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Список", "ЗадачиПозже");
	ОткрытьФормуЗадачи(ПараметрыЗадачи, "ЗадачиПозже", Истина);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДанныеСписков();
КонецПроцедуры

&НаКлиенте
Процедура Настроить(Команда)
	
	ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.НастройкиКалендаря", Новый Структура("НастройкиОтображения", НастройкиОтображения), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКалендарь(Команда)
	
	ОткрытьФорму("Справочник.КалендариСотрудников.ФормаОбъекта", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	СинхронизироватьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Команда)
	ПараметрыФормы = Новый Структура("СозданиеЗадачиКонтактЦентр", Истина);
	ОткрытьФорму("Документ.ЗадачаСотрудника.Форма.ФормаДокумента",ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВРаботе(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ВРаботе.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Значение",Элементы.ВРаботе.ТекущаяСтрока.Ссылка);
	ПараметрыЗадачи.Вставить("Список", "ВРаботе");
	ОткрытьФормуЗадачи(ПараметрыЗадачи);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСегодня(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаСегодня.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Значение",Элементы.ЗадачиНаСегодня.ТекущаяСтрока.Ссылка);
	ПараметрыЗадачи.Вставить("Список","ЗадачиНаСегодня");
	ОткрытьФормуЗадачи(ПараметрыЗадачи);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗавтра(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаЗавтра.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Значение",Элементы.ЗадачиНаЗавтра.ТекущаяСтрока.Ссылка);
	ПараметрыЗадачи.Вставить("Список","ЗадачиНаЗавтра");
	ОткрытьФормуЗадачи(ПараметрыЗадачи);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБезСрока(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиБезСрока.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Ключ",Элементы.ЗадачиБезСрока.ТекущаяСтрока.Ссылка);
	ПараметрыЗадачи.Вставить("СозданиеЗадачиКонтактЦентр",Истина);
	ОткрытьФорму("Документ.ЗадачаСотрудника.Форма.ФормаДокумента",ПараметрыЗадачи);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПозже(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиПозже.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Значение",Элементы.ЗадачиПозже.ТекущаяСтрока.Ссылка);
	ПараметрыЗадачи.Вставить("Список","ЗадачиПозже");
	ОткрытьФормуЗадачи(ПараметрыЗадачи);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗадачиПросрочены(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиПросрочены.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Значение",Элементы.ЗадачиПросрочены.ТекущаяСтрока.Ссылка);
	ПараметрыЗадачи.Вставить("Список","ЗадачиПросрочены");
	ОткрытьФормуЗадачи(ПараметрыЗадачи);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаНеделе(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаНеделе.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Значение",Элементы.ЗадачиНаНеделе.ТекущаяСтрока.Ссылка);
	ПараметрыЗадачи.Вставить("Список","ЗадачиНаНеделе");
	ОткрытьФормуЗадачи(ПараметрыЗадачи);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуВРаботе(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ВРаботе.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ВРаботе.ТекущаяСтрока.Ссылка) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Задача = Элементы.ВРаботе.ТекущаяСтрока.Ссылка;
	ЗавершитьЗадачуСервер(Задача,"ВРаботе");
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Задача),СтрШаблон(НСтр("ru='%1'"),Задача),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуСегодня(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаСегодня.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиНаСегодня.ТекущаяСтрока.Ссылка) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Задача = Элементы.ЗадачиНаСегодня.ТекущаяСтрока.Ссылка;
	ЗавершитьЗадачуСервер(Задача,"ЗадачиНаСегодня");
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Задача),СтрШаблон(НСтр("ru='%1'"),Задача),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуПросрочено(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиПросрочены.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиПросрочены.ТекущаяСтрока.Ссылка) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;

	Задача = Элементы.ЗадачиПросрочены.ТекущаяСтрока.Ссылка;
	ЗавершитьЗадачуСервер(Задача,"ЗадачиПросрочены");
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Задача),СтрШаблон(НСтр("ru='%1'"),Задача),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуЗавтра(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаЗавтра.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиНаЗавтра.ТекущаяСтрока.Ссылка) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;

	Задача = Элементы.ЗадачиНаЗавтра.ТекущаяСтрока.Ссылка;
	ЗавершитьЗадачуСервер(Задача,"ЗадачиНаЗавтра");
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Задача),СтрШаблон(НСтр("ru='%1'"),Задача),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуБезСрока(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиБезСрока.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиБезСрока.ТекущаяСтрока.Ссылка) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;

	Задача = Элементы.ЗадачиБезСрока.ТекущаяСтрока.Ссылка;
	ЗавершитьЗадачуСервер(Задача,"ЗадачиБезСрока");
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Задача),СтрШаблон(НСтр("ru='%1'"),Задача),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуПозже(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиПозже.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиПозже.ТекущаяСтрока.Ссылка) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Задача = Элементы.ЗадачиПозже.ТекущаяСтрока.Ссылка;
	ЗавершитьЗадачуСервер(Задача,"ЗадачиПозже");
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Задача),СтрШаблон(НСтр("ru='%1'"),Задача),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗадачуНаНеделе(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаНеделе.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиНаНеделе.ТекущаяСтрока.Ссылка) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Задача = Элементы.ЗадачиНаНеделе.ТекущаяСтрока.Ссылка;
	ЗавершитьЗадачуСервер(Задача,"ЗадачиНаНеделе");
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Задача),СтрШаблон(НСтр("ru='%1'"),Задача),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗадачуВРаботе(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ВРаботе.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", Элементы.ВРаботе.ТекущаяСтрока.Ссылка);
	ДополнительныеПараметры.Вставить("Список", "ВРаботе");
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОтветственного",ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыВыбора,,,,,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗадачуНаСегодня(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаСегодня.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", Элементы.ЗадачиНаСегодня.ТекущаяСтрока.Ссылка);
	ДополнительныеПараметры.Вставить("Список", "ЗадачиНаСегодня");
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОтветственного",ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыВыбора,,,,,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗадачуНаЗавтра(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаЗавтра.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", Элементы.ЗадачиНаЗавтра.ТекущаяСтрока.Ссылка);
	ДополнительныеПараметры.Вставить("Список", "ЗадачиНаЗавтра");
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОтветственного",ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыВыбора,,,,,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗадачуБезСрока(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиБезСрока.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", Элементы.ЗадачиБезСрока.ТекущаяСтрока.Ссылка);
	ДополнительныеПараметры.Вставить("Список", "ЗадачиБезСрока");
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОтветственного",ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыВыбора,,,,,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗадачуНаНеделе(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаНеделе.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", Элементы.ЗадачиНаНеделе.ТекущаяСтрока.Ссылка);
	ДополнительныеПараметры.Вставить("Список", "ЗадачиНаНеделе");
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОтветственного",ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыВыбора,,,,,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗадачуПозже(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиПозже.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", Элементы.ЗадачиПозже.ТекущаяСтрока.Ссылка);
	ДополнительныеПараметры.Вставить("Список", "ЗадачиПозже");
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОтветственного",ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыВыбора,,,,,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура ПеренаправитьЗадачуПросрочена(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиПросрочены.ТекущаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Источник", Элементы.ЗадачиПросрочены.ТекущаяСтрока.Ссылка);
	ДополнительныеПараметры.Вставить("Список", "ЗадачиПросрочены");
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВыборОтветственного",ЭтотОбъект,ДополнительныеПараметры);
	ПараметрыВыбора = Новый Структура("РежимВыбора",Истина);
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора",ПараметрыВыбора,,,,,ОписаниеОповещенияОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЗавершеноВРаботе(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ВРаботе.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ВРаботе.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Источник = Элементы.ВРаботе.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ВРаботе");
	ПараметрыСписка.Вставить("Состояние", "Завершено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЗавершеноЗадачиПросрочены(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиПросрочены.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиПросрочены.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Источник = Элементы.ЗадачиПросрочены.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиПросрочены");
	ПараметрыСписка.Вставить("Состояние", "Завершено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеОтмененоВРаботе(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ВРаботе.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ВРаботе.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Источник = Элементы.ВРаботе.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ВРаботе");
	ПараметрыСписка.Вставить("Состояние", "Отменено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеОтмененоЗадачиПросрочены(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиПросрочены.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиПросрочены.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Источник = Элементы.ЗадачиПросрочены.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиПросрочены");
	ПараметрыСписка.Вставить("Состояние", "Отменено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЗавершеноЗадачиНаСегодня(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаСегодня.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиНаСегодня.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	
	Источник = Элементы.ЗадачиНаСегодня.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиНаСегодня");
	ПараметрыСписка.Вставить("Состояние", "Завершено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеОтмененоЗадачиНаСегодня(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаСегодня.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиНаСегодня.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;

	Источник = Элементы.ЗадачиНаСегодня.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиНаСегодня");
	ПараметрыСписка.Вставить("Состояние", "Отменено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЗавершеноЗадачиНаЗавтра(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаЗавтра.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиНаЗавтра.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;

	Источник = Элементы.ЗадачиНаЗавтра.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиНаЗавтра");
	ПараметрыСписка.Вставить("Состояние", "Завершено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеОтмененоЗадачиНаЗавтра(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаЗавтра.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиНаЗавтра.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Источник = Элементы.ЗадачиНаЗавтра.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиНаЗавтра");
	ПараметрыСписка.Вставить("Состояние", "Отменено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЗавершеноЗадачиБезСрока(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиБезСрока.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиБезСрока.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;

	Источник = Элементы.ЗадачиБезСрока.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиБезСрока");
	ПараметрыСписка.Вставить("Состояние", "Завершено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеОтмененоЗадачиБезСрока(Команда)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиБезСрока.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиБезСрока.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Источник = Элементы.ЗадачиБезСрока.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиБезСрока");
	ПараметрыСписка.Вставить("Состояние", "Отменено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЗавершеноЗадачиНаНеделе(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаНеделе.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиНаНеделе.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Источник = Элементы.ЗадачиНаНеделе.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиНаНеделе");
	ПараметрыСписка.Вставить("Состояние", "Завершено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеОтмененоЗадачиНаНеделе(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиНаНеделе.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиНаНеделе.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Источник = Элементы.ЗадачиНаНеделе.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиНаНеделе");
	ПараметрыСписка.Вставить("Состояние", "Отменено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеЗавершеноЗадачиПозже(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиПозже.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиПозже.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Источник = Элементы.ЗадачиПозже.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиПозже");
	ПараметрыСписка.Вставить("Состояние", "Завершено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеОтмененоЗадачиПозже(Команда)
	Если НЕ ЗначениеЗаполнено(Элементы.ЗадачиПозже.ТекущаяСтрока)
		ИЛИ ТипЗнч(Элементы.ЗадачиПозже.ТекущаяСтрока.Ссылка) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
	Источник = Элементы.ЗадачиПозже.ТекущаяСтрока.Ссылка;
	ПараметрыСписка = Новый Структура();
	ПараметрыСписка.Вставить("Источник", Источник);
	ПараметрыСписка.Вставить("Список", "ЗадачиПозже");
	ПараметрыСписка.Вставить("Состояние", "Отменено");
	
	УстановитьСостояние(ПараметрыСписка);
	ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
КонецПроцедуры

&НаКлиенте
Процедура ТелефонныйЗвонок(Команда)
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + Команда.Имя));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЛичнаяВстреча(Команда)
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + Команда.Имя));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Прочее(Команда)
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ТипСобытия", ПредопределенноеЗначение("Перечисление.ТипыСобытий." + Команда.Имя));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	ОткрытьФорму("Документ.Событие.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНаРаботуВнутренее(Команда)
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаданиеНаРаботу.Внутреннее"));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	ОткрытьФорму("Документ.ЗаданиеНаРаботу.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНаРаботуВнешнее(Команда)
	ЗаполняемоеЗначение = Новый Структура;
	ЗаполняемоеЗначение.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.ВидыОперацийЗаданиеНаРаботу.Внешнее"));
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗаполняемоеЗначение);
	ОткрытьФорму("Документ.ЗаданиеНаРаботу.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборПоРазрешеннымИсточникам()
	
	РазрешенныеИсточники = РазрешенныеИсточники();
	ВРаботе.Параметры.УстановитьЗначениеПараметра("РазрешенныеИсточники",РазрешенныеИсточники);
	ЗадачиНаСегодня.Параметры.УстановитьЗначениеПараметра("РазрешенныеИсточники",РазрешенныеИсточники);
	ЗадачиНаЗавтра.Параметры.УстановитьЗначениеПараметра("РазрешенныеИсточники",РазрешенныеИсточники);
	ЗадачиБезСрока.Параметры.УстановитьЗначениеПараметра("РазрешенныеИсточники",РазрешенныеИсточники);
	ЗадачиНаНеделе.Параметры.УстановитьЗначениеПараметра("РазрешенныеИсточники",РазрешенныеИсточники);
	ЗадачиПозже.Параметры.УстановитьЗначениеПараметра("РазрешенныеИсточники",РазрешенныеИсточники);
	ЗадачиПросрочены.Параметры.УстановитьЗначениеПараметра("РазрешенныеИсточники",РазрешенныеИсточники);
	ЗадачиЗавершены.Параметры.УстановитьЗначениеПараметра("РазрешенныеИсточники",РазрешенныеИсточники);
	
КонецПроцедуры

&НаСервере
Функция РазрешенныеИсточники()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКалендаряСотрудника.Источник КАК Источник
	|ИЗ
	|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
	|ГДЕ
	|	&ОтборЗавершенные
	|	И НЕ ЗаписиКалендаряСотрудника.ПометкаУдаления
	|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари)
	|	И ЗаписиКалендаряСотрудника.Источник <> НЕОПРЕДЕЛЕНО";
	
	ВыбранныеКалендари = Новый Массив;
	Для Каждого Календарь Из ДоступныеКалендари Цикл
		Если НЕ Календарь.Выбран Тогда 
			Продолжить;
		КонецЕсли;
		ВыбранныеКалендари.Добавить(Календарь.Календарь);
	КонецЦикла;
	
	Если НЕ ОтборЗавершенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЗавершенные", "НЕ ЗаписиКалендаряСотрудника.Завершено");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЗавершенные", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВыбранныеКалендари",ВыбранныеКалендари);
	ВТ_Источники = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Событие.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Событие КАК Событие
	|ГДЕ
	|	Событие.Ссылка В(&Источники)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаданиеНаРаботу.Ссылка
	|ИЗ
	|	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
	|ГДЕ
	|	ЗаданиеНаРаботу.Ссылка В(&Источники)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаписиКалендаряПодготовкиОтчетности.Ссылка
	|ИЗ
	|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
	|ГДЕ
	|	ЗаписиКалендаряПодготовкиОтчетности.Ссылка В(&Источники)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказПокупателя.Ссылка
	|ИЗ
	|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	|ГДЕ
	|	ЗаказПокупателя.Ссылка В(&Источники)";
	
	Запрос.УстановитьПараметр("Источники", ВТ_Источники.ВыгрузитьКолонку("Источник"));
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ВыборТипаДелаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(Результат.ЗначенияЗаполнения.ДанныеЗаписиКалендаря.ИмяФормы, Результат);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТекущейДате()
	ЗадачиНаСегодня.Параметры.УстановитьЗначениеПараметра("ТекущаяДатаСеанса",ТекущаяДатаСеанса());
	ЗадачиНаЗавтра.Параметры.УстановитьЗначениеПараметра("ТекущаяДатаСеанса",ТекущаяДатаСеанса());
	ЗадачиНаНеделе.Параметры.УстановитьЗначениеПараметра("ТекущаяДатаСеанса",ТекущаяДатаСеанса());
	ЗадачиПозже.Параметры.УстановитьЗначениеПараметра("ТекущаяДатаСеанса",ТекущаяДатаСеанса());
	ЗадачиПросрочены.Параметры.УстановитьЗначениеПараметра("ТекущаяДатаСеанса",ТекущаяДатаСеанса());
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПоСостояниямСобытий()
	
	УстановитьПривилегированныйРежим(Истина);
	СпискиФормы = СпискиФормы();
	ВыборкаСостоянияСобытия = Справочники.СостоянияСобытий.Выбрать();

	Для Каждого Список ИЗ СпискиФормы Цикл
		УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
		// Раскраска списка
		УдаляемыеЭлементы = Новый Массив;
		
		Для Каждого ЭлементУсловногоОформления Из УсловноеОформлениеКД.Элементы Цикл
			Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЦветСостояния" Тогда
				УдаляемыеЭлементы.Добавить(ЭлементУсловногоОформления);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементУсловногоОформления Из УдаляемыеЭлементы Цикл
			УсловноеОформлениеКД.Элементы.Удалить(ЭлементУсловногоОформления);
		КонецЦикла;
		
		Пока ВыборкаСостоянияСобытия.Следующий() Цикл
			
			ЦветФона = ВыборкаСостоянияСобытия.Цвет.Получить();
			Если ТипЗнч(ЦветФона) <> Тип("Цвет") Тогда
				Продолжить;
			КонецЕсли; 
			
			ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветФона);
			ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "ЦветСостояния";
			ЭлементУсловногоОформления.РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
			ЭлементУсловногоОформления.Представление	= НСтр("ru='Оформление в цвет состояния'");
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных("СостояниеИсточника");
			ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение	= ВыборкаСостоянияСобытия.Ссылка;
			
		КонецЦикла;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервере
Функция СпискиФормы()
	
	Списки = Новый Массив;
	Списки.Добавить(ЭтотОбъект["ВРаботе"]);
	Списки.Добавить(ЭтотОбъект["ЗадачиПросрочены"]);
	Списки.Добавить(ЭтотОбъект["ЗадачиБезСрока"]);
	Списки.Добавить(ЭтотОбъект["ЗадачиЗавершены"]);
	Списки.Добавить(ЭтотОбъект["ЗадачиНаЗавтра"]);
	Списки.Добавить(ЭтотОбъект["ЗадачиНаНеделе"]);
	Списки.Добавить(ЭтотОбъект["ЗадачиПозже"]);
	Списки.Добавить(ЭтотОбъект["ЗадачиНаСегодня"]);
	
	Возврат Списки;
	
КонецФункции

&НаСервере
Процедура ОбновитьДанныеСписков()
	ОбновитьВходящее();
	Элементы.Входящее.Обновить();
	
	Если ВидыКонтактЦентра = 0 Тогда
		УстановитьОтборПоРазрешеннымИсточникам();
		Элементы.ВРаботе.Обновить();
	ИначеЕсли ВидыКонтактЦентра = 1 Тогда
		УстановитьОтборПоРазрешеннымИсточникам();
		Элементы.ЗадачиПросрочены.Обновить();
		Элементы.ЗадачиПросрочены.ТекущаяСтрока = Неопределено;
		Элементы.ЗадачиБезСрока.Обновить();
		Элементы.ЗадачиНаЗавтра.Обновить();
		Элементы.ЗадачиНаСегодня.Обновить();
		Элементы.ЗадачиНаНеделе.Обновить();
		Элементы.ЗадачиПозже.Обновить();
		Элементы.ЗадачиЗавершены.Обновить();
	ИначеЕсли ВидыКонтактЦентра = 2 Тогда
		ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеНаВесьДень()
	
	Для каждого ДанныеЦвета Из ЦветаПоНомеруКартинки() Цикл
		НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
		РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ЗадачиНаВесьДеньКалендарь.ВариантЦвета", ДанныеЦвета.Ключ, ВидСравненияКомпоновкиДанных.Равно);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗадачиНаВесьДеньКалендарьПредставление.Имя);
		РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ЗадачиНаВесьДеньКалендарьДатаСтрокой.Имя);
		РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "ЦветФона", ДанныеЦвета.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЦветаПоНомеруКартинки() 
	
	Соответствие = Новый Соответствие;
	
	Соответствие.Вставить(1,  Новый Цвет(172,114,94));
	Соответствие.Вставить(2,  Новый Цвет(208,107,100));
	Соответствие.Вставить(3,  Новый Цвет(248,58,34));
	Соответствие.Вставить(4,  Новый Цвет(250,87,60));
	Соответствие.Вставить(5,  Новый Цвет(255,117,55));
	Соответствие.Вставить(6,  Новый Цвет(255,173,70));
	Соответствие.Вставить(7,  Новый Цвет(66,214,146));
	Соответствие.Вставить(8,  Новый Цвет(22,167,101));
	Соответствие.Вставить(9,  Новый Цвет(123,209,72));
	Соответствие.Вставить(10, Новый Цвет(179,220,108));
	Соответствие.Вставить(11, Новый Цвет(251,233,131));
	Соответствие.Вставить(12, Новый Цвет(250,209,101));
	Соответствие.Вставить(13, Новый Цвет(146,225,192));
	Соответствие.Вставить(14, Новый Цвет(159,225,231));
	Соответствие.Вставить(15, Новый Цвет(159,198,231));
	Соответствие.Вставить(16, Новый Цвет(73,134,231));
	Соответствие.Вставить(17, Новый Цвет(154,156,255));
	Соответствие.Вставить(18, Новый Цвет(185,154,255));
	Соответствие.Вставить(19, Новый Цвет(194,194,194));
	Соответствие.Вставить(20, Новый Цвет(202,189,191));
	Соответствие.Вставить(21, Новый Цвет(204,166,172));
	Соответствие.Вставить(22, Новый Цвет(246,145,178));
	Соответствие.Вставить(23, Новый Цвет(205,116,230));
	Соответствие.Вставить(24, Новый Цвет(164,122,226));
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройкиОтборов()
	РаботаСОтборами.ВосстановитьНастройкиОтборов(ЭтотОбъект, ВРаботе,,,Новый Структура("ОтборПериод", "ДатаНачала"));
	ВидыКонтактЦентра = ХранилищеСистемныхНастроек.Загрузить("ВариантПредставления", "ВариантПредставления_КонтактЦентр");
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.СтраницыКанбан.Видимость =  ВидыКонтактЦентра = 1;
	Элементы.ГруппаПросроченоВРаботе.Видимость = ВидыКонтактЦентра = 0;
	Элементы.Календарь.Видимость = ВидыКонтактЦентра = 2;
	Элементы.ГруппаСинхронизировать.Видимость = ВидыКонтактЦентра = 2;
	Элементы.ПредставлениеПериодаЗадачи.Видимость = ВидыКонтактЦентра = 0;
	
	Если ВидыКонтактЦентра = 2 Тогда
		ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЕстьПодключенныеКаналы = КонтактЦентр.ЕстьПодключенныеКаналыВходящего();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбработаноВсеВходящее  = ЕстьПодключенныеКаналы
		И КонтактЦентр.ОбработаноВсеВходящее(СотрудникТекущегоПользователя);
	
	Элементы.ГруппаНетПодключенныхКаналов.Видимость = НЕ ЕстьПодключенныеКаналы;
	Элементы.ГруппаОбработаноВсеВходящее.Видимость = ОбработаноВсеВходящее;
	Элементы.ДекорацияРастяжение.Видимость = НЕ ЕстьПодключенныеКаналы ИЛИ ОбработаноВсеВходящее;
	Элементы.Входящее.Видимость = НЕ Элементы.ДекорацияРастяжение.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПланировщикаИЗадачиНаВесьДень()
	ПрочитатьДоступныеКалендари();
	ОбновитьДанныеПланировщикаСервер();
	ЗаполнитьЗадачиНаВесьДеньКалендарь();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВходящее()
	
	ОбсужденияУНФИнтеграцияСМессенджерами.ДобавитьНеотвеченныеСообщенияВКонтактЦентр();
	УправлениеФормой();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокаТегов(Теги)
	МассивТегов = Новый Массив;
	Для Каждого Тег Из Теги Цикл
		МассивТегов.Добавить(Тег.Тег);
	КонецЦикла;
	СтрокаТегов = СтрСоединить(МассивТегов, ", ");
	Если СтрокаТегов = "" Тогда
		Возврат "";
	Иначе
		Возврат СтрШаблон("# %1", СтрокаТегов);
	КонецЕсли;
КонецФункции

&НаСервере
Процедура УстановитьОтборПоЗавершеннымИЗапросыСписков()
	Если ВидыКонтактЦентра = 0 Тогда
		УстановитьОтборПоРазрешеннымИсточникам();
		УстановитьОтборПоЗавершенным();
		Элементы.ВРаботе.Обновить();
	ИначеЕсли ВидыКонтактЦентра = 1 И ОтборЗавершенные Тогда
		УстановитьОтборПоРазрешеннымИсточникам();
		УстановитьОтборПоЗавершенным();
		Элементы.ЗадачиЗавершены.Обновить();
	Иначе
		УстановитьОтборПоЗавершенным();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоЗавершенным()
	Если ВидыКонтактЦентра = 2 Тогда
		ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	КонецЕсли;
	Элементы.ЗадачиЗавершены.Видимость = ОтборЗавершенные;
	Элементы.ЗаголовокЗадачиЗавершены.Видимость = ОтборЗавершенные;
	ВРаботе.Параметры.УстановитьЗначениеПараметра("ОтборПоЗавершенным", ОтборЗавершенные);
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокГруппыОтборов()
	Если ПроверитьОтборУстановлен(ЭтотОбъект, "ГруппаФильтры", "ДанныеМеток") Тогда
		Элементы.ГруппаФильтрыНастройкиИДопИнфо.Заголовок = НСтр("ru = 'Фильтры (установлены)'");
	Иначе
		Элементы.ГруппаФильтрыНастройкиИДопИнфо.Заголовок = НСтр("ru = 'Фильтры'");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьОтборУстановлен(Форма, ИмяЭлементаПраваяПанель, ИмяТЧДанныеМеток)
	
	РеквизитыОтбораПравойПанели = "ОтборТеги,ОтборОтветственный";
	ОтборУстановлен = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОтборПериод") 
		И ЗначениеЗаполнено(Форма.ОтборПериод) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	// ... реквизит "ДанныеМеток".
	Попытка
		Если Форма[ИмяТЧДанныеМеток].Количество() > 0 Тогда
			Возврат Истина;
		КонецЕсли;
	Исключение КонецПопытки;
	
	Если РеквизитыОтбораПравойПанели <> "" Тогда
		СтруктураРеквизитыОтбора = ОбщегоНазначенияПереопределяемый.СтрокаВСтруктуру(РеквизитыОтбораПравойПанели, ",");
		
		Для Каждого КлючЗначение Из СтруктураРеквизитыОтбора Цикл
			Если ЗначениеЗаполнено(Форма[КлючЗначение.Ключ]) Тогда
				Если ТипЗнч(Форма[КлючЗначение.Ключ]) = Тип("Булево") Тогда
					ОтборУстановлен = Форма[КлючЗначение.Ключ];
				Иначе
					Возврат Истина;
				КонецЕсли;
				
				Если ОтборУстановлен Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ОтборУстановлен Тогда
		ОтборУстановлен = ОтборЗавершенные;
	КонецЕсли;
	
	Возврат ОтборУстановлен;
	
КонецФункции

&НаСервере
Процедура ОбновитьТекущийЭлементСписка(ПараметрыНовойЗадачи)
	
	Если ТипЗнч(ПараметрыНовойЗадачи) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыНовойЗадачи.Список <> Неопределено Тогда
		ТекущийЭлемент = Элементы[ПараметрыНовойЗадачи.Список];
		Элементы[ПараметрыНовойЗадачи.Список].ТекущаяСтрока = ПараметрыНовойЗадачи.НоваяЗадача;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуТекущегоЭлементаПланировщика()
	
	Если Элементы.Планировщик.ВыделенныеЭлементы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеЭлемента = Элементы.Планировщик.ВыделенныеЭлементы[0].Значение;
	
	Если ЗначениеЗаполнено(ЗначениеЭлемента.Источник)
		И ТипЗнч(ЗначениеЭлемента.Источник) = Тип("СправочникСсылка.ЗаписиКалендаряПодготовкиОтчетности")
		И ЗначениеЭлемента.Календарь = ПредопределенноеЗначение("Справочник.КалендариСотрудников.КалендарьНалогов") Тогда
		
		ДанныеФормыЗадачи = ПолучитьДанныеФормыЗадачи(ЗначениеЭлемента.Источник);
		Если Не ПустаяСтрока(ДанныеФормыЗадачи.ИмяФормы) Тогда
			ОткрытьФорму(ДанныеФормыЗадачи.ИмяФормы, ДанныеФормыЗадачи.ПараметрыФормы);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ЗначениеЭлемента.Источник) И ТипЗнч(ЗначениеЭлемента.ЗаписьКалендаря) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		
		ПоказатьЗначение(,ЗначениеЭлемента.Источник);
		
	ИначеЕсли ТипЗнч(ЗначениеЭлемента.ЗаписьКалендаря) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		ПоказатьЗначение(,ЗначениеЭлемента.ЗаписьКалендаря);
	ИначеЕсли Не ЗначениеЗаполнено(ЗначениеЭлемента.Источник) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗначениеЭлемента.ЗаписьКалендаря);
		ОткрытьФорму("Справочник.ЗаписиКалендаряСотрудника.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФормыЗадачи(ЗаписьКалендаряНалоговойОтчетности)
	
	Результат = Новый Структура("ИмяФормы, ПараметрыФормы", "", Новый Структура);
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаписьКалендаряНалоговойОтчетности, "Состояние,Организация,СобытиеКалендаря");
	
	Если Не ЗначениеЗаполнено(ЗначенияРеквизитов.СобытиеКалендаря) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ПараметрыФормы.Вставить("Состояние", ЗначенияРеквизитов.Состояние);
	Результат.ПараметрыФормы.Вставить("Организация", ЗначенияРеквизитов.Организация);
	Результат.ПараметрыФормы.Вставить("СобытиеКалендаря", ЗначенияРеквизитов.СобытиеКалендаря);
	
	Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.СобытиеКалендаря, "Задача");
	Если Не ЗначениеЗаполнено(Задача) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИмяФормы = Справочники.ЗаписиКалендаряПодготовкиОтчетности.ПолучитьИмяФормыПоЗадачеИСостоянию(Задача, ЗначенияРеквизитов.Состояние);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	ВариантПериода = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		Элементы.ВариантПериода.СписокВыбора[0].Значение
	);
	
	НастройкиОтображения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"Отображение",
		Неопределено
	);
	
	Если НастройкиОтображения = Неопределено Тогда
		
		НастройкиОтображения = Новый Структура;
		НастройкиОтображения.Вставить("НачалоРабочегоДня",		0);
		НастройкиОтображения.Вставить("ОкончаниеРабочегоДня",	23);
		НастройкиОтображения.Вставить("ОтображатьТекущуюДату",	Истина);
		
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Элементы[0].ФорматДня = ФорматДняШкалыВремени.ДеньМесяцаДеньНедели;
	
	ДатаОтображения = ТекущаяДатаСеанса();
	ВыделитьДатыОтображения(ЭтотОбъект);
	УстановитьПредставлениеПериода(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИОбновитьДанныеПланировщикаСервер()
	
	СохранитьНастройки();
	Если ВидыКонтактЦентра = 0 Тогда
		Возврат;
	ИначеЕсли ВидыКонтактЦентра = 1 Тогда
		Возврат;
	ИначеЕсли ВидыКонтактЦентра = 2 Тогда
		ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ВариантПериода",
		ВариантПериода
	);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"Отображение",
		НастройкиОтображения
	);
	
	СохранитьНастройкиДоступныхКалендарей();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиДоступныхКалендарей()
	
	НастройкиДоступныхКалендарей = РеквизитФормыВЗначение("ДоступныеКалендари");
	НастройкиДоступныхКалендарей.Колонки.Удалить("Наименование");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		НастройкиДоступныхКалендарей
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПланировщикаСервер()
	
	Планировщик.Элементы.Очистить();
	Планировщик.ИнтервалыФона.Очистить();
	
	УстановитьОтображениеПланировщика();
	
	ПериодДанных = ПолучитьПериодДанных(ВариантПериода, ДатаОтображения);
	
	Планировщик.ТекущиеПериодыОтображения.Очистить();
	Планировщик.ТекущиеПериодыОтображения.Добавить(ПериодДанных.ДатаНачала, ПериодДанных.ДатаОкончания);
	
	ВыбранныеКалендари = Новый Массив;
	Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
		Если СтрокаКалендаря.Выбран Тогда
			ВыбранныеКалендари.Добавить(СтрокаКалендаря.Календарь);
		КонецЕсли;
	КонецЦикла;
	
	ТекстПоЗаказуНаПроизводство = "";
	Если ПравоДоступа("Чтение", Метаданные.Документы.ЗаказНаПроизводство, Пользователи.АвторизованныйПользователь()) Тогда
		ТекстПоЗаказуНаПроизводство = 
		"ВЫБРАТЬ
		|	ЗаказНаПроизводство.Ссылка
		|ИЗ
		|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
		|ГДЕ
		|	ЗаказНаПроизводство.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаписиКалендаря.Источник КАК Источник
		|ПОМЕСТИТЬ втИсточники
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаря
		|ГДЕ
		|	ЗаписиКалендаря.ПометкаУдаления = ЛОЖЬ
		|	И ЗаписиКалендаря.Начало < &ДатаОкончания
		|	И ЗаписиКалендаря.Окончание > &ДатаНачала
		|	И ЗаписиКалендаря.Календарь В(&ВыбранныеКалендари)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Событие.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втРазрешенныеИсточники
		|ИЗ
		|	Документ.Событие КАК Событие
		|ГДЕ
		|	Событие.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаданиеНаРаботу.Ссылка
		|ИЗ
		|	Документ.ЗаданиеНаРаботу КАК ЗаданиеНаРаботу
		|ГДЕ
		|	ЗаданиеНаРаботу.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗаписиКалендаряПодготовкиОтчетности.Ссылка
		|ИЗ
		|	Справочник.ЗаписиКалендаряПодготовкиОтчетности КАК ЗаписиКалендаряПодготовкиОтчетности
		|ГДЕ
		|	ЗаписиКалендаряПодготовкиОтчетности.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ 
		|
		|"
		+ ТекстПоЗаказуНаПроизводство+
		" ВЫБРАТЬ
		|	ЗаказПокупателя.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказПокупателя КАК ЗаказПокупателя
		|ГДЕ
		|	ЗаказПокупателя.Ссылка В
		|			(ВЫБРАТЬ
		|				втИсточники.Источник
		|			ИЗ
		|				втИсточники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаписиКалендаряСотрудника.Ссылка КАК ЗаписьКалендаря,
		|	ЗаписиКалендаряСотрудника.Наименование КАК Наименование,
		|	ЗаписиКалендаряСотрудника.Начало КАК Начало,
		|	ЗаписиКалендаряСотрудника.Начало КАК Дата,
		|	ЗаписиКалендаряСотрудника.Окончание КАК Конец,
		|	ЗаписиКалендаряСотрудника.Описание КАК Описание,
		|	ЗаписиКалендаряСотрудника.Источник КАК Источник,
		|	ЗаписиКалендаряСотрудника.НомерСтрокиИсточника КАК НомерСтрокиИсточника,
		|	ЗаписиКалендаряСотрудника.Календарь КАК Календарь,
		|	ЗаписиКалендаряСотрудника.РедактированиеЗапрещено КАК РедактированиеЗапрещено
		|ИЗ
		|	Справочник.ЗаписиКалендаряСотрудника КАК ЗаписиКалендаряСотрудника
		|ГДЕ
		|	ЗаписиКалендаряСотрудника.Источник В
		|			(ВЫБРАТЬ
		|				втРазрешенныеИсточники.Ссылка
		|			ИЗ
		|				втРазрешенныеИсточники)
		|	И ЗаписиКалендаряСотрудника.ПометкаУдаления = ЛОЖЬ
		|	И ЗаписиКалендаряСотрудника.Начало < &ДатаОкончания
		|	И ЗаписиКалендаряСотрудника.Окончание > &ДатаНачала
		|	И ЗаписиКалендаряСотрудника.Календарь В(&ВыбранныеКалендари) 
		|	И &ФильтрПоТегам "
		+СтрокаФильтровКалендарь("ОтветственныйИсточника","Завершено", Ложь)+
		" ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	ВЫРАЗИТЬ(Задачи.Описание КАК Строка(1000)),
		|	Задачи.ДатаНачала,
		|	Задачи.Дата,
		|	Задачи.ДатаОкончания,
		|	Задачи.Описание,
		|	Задачи.Основание,
		|	0,
		|	Задачи.Календарь,
		|	ЛОЖЬ
		|ИЗ
		|	Документ.ЗадачаСотрудника КАК Задачи
		|ГДЕ
		|	Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.ДатаНачала < &ДатаОкончания
		|	И Задачи.ДатаОкончания > &ДатаНачала
		|	И Задачи.Календарь В (&ВыбранныеКалендари) "
		+ СтрокаФильтровКалендарь("Ответственный","Выполнена", Истина) +
		" УПОРЯДОЧИТЬ ПО
		|	Начало";
	
	Запрос.УстановитьПараметр("ДатаНачала", ПериодДанных.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодДанных.ДатаОкончания);
	Запрос.УстановитьПараметр("ВыбранныеКалендари", ВыбранныеКалендари);
	Запрос.УстановитьПараметр("ФильтрПоТегам", Истина);
	УстановитьПараметрыФильтров(Запрос);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Отбор = Новый Структура("Календарь");
	
	Пока Выборка.Следующий() Цикл
		
		ЭлементПланировщика = Планировщик.Элементы.Добавить(Выборка.Начало, Выборка.Конец);
		ЭлементПланировщика.Значение = Новый Структура;
		ЭлементПланировщика.Значение.Вставить("Календарь", Выборка.Календарь);
		ЭлементПланировщика.Значение.Вставить("ЗаписьКалендаря", Выборка.ЗаписьКалендаря);
		ЭлементПланировщика.Значение.Вставить("Источник", Выборка.Источник);
		ЭлементПланировщика.Значение.Вставить("РедактированиеЗапрещено", Выборка.РедактированиеЗапрещено);
		ЭлементПланировщика.Значение.Вставить("НомерСтрокиИсточника", Выборка.НомерСтрокиИсточника);
		ЭлементПланировщика.Текст		= Выборка.Наименование;
		ЭлементПланировщика.Подсказка	= Выборка.Описание;
		
		Если ЗначениеЗаполнено(Выборка.Источник) И ТипЗнч(Выборка.ЗаписьКалендаря) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Источник);
			ЭлементПланировщика.Картинка = МенеджерИсточника.КартинкаЗаписиКалендаря(Выборка.Источник);
			ЭлементПланировщика.ЦветТекста = МенеджерИсточника.ЦветТекстаЗаписиКалендаря(Выборка.Источник);
		КонецЕсли;
		
		Если ТипЗнч(Выборка.ЗаписьКалендаря) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			ЭлементПланировщика.Картинка = БиблиотекаКартинок.ЗадачаСотрудника;
		КонецЕсли;
		
		Отбор.Календарь = Выборка.Календарь;
		НайденныеСтроки = ДоступныеКалендари.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементПланировщика.ЦветФона = РаботаСЦветомКлиентСервер.ЦветПоНомеруКартинки(НайденныеСтроки[0].ВариантЦвета);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийЭлемент = Элементы.Планировщик;
КонецПроцедуры

&НаСервере
Функция СтрокаФильтровКалендарь(ИмяПоляОтветственный, ИмяПоляЗавершено, ЕстьПолеТег)
	
	МассивСтрок = Новый Массив;
	
	Для Каждого ЭлементОтбора Из ВРаботе.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Период" Тогда
			Продолжить;
		КонецЕсли;
		Если (ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Массив") ИЛИ ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений"))
			И ЭлементОтбора.ПравоеЗначение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Теги.Тег" И ЕстьПолеТег Тогда
			МассивСтрок.Добавить(" И Теги.Тег В (&Теги) ");
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "Ответственный" Тогда
			МассивСтрок.Добавить(СтрШаблон(" И %1 В (&Ответственный) ", ИмяПоляОтветственный));
		КонецЕсли;
	КонецЦикла;
	
	Если ОтборЗавершенные Тогда
		МассивСтрок.Добавить(" И ИСТИНА ");
	Иначе
		МассивСтрок.Добавить(СтрШаблон(" И НЕ %1 ", ИмяПоляЗавершено));
	КонецЕсли;
	
	СтрокаФильтров = СтрСоединить(МассивСтрок, Символы.ПС);
	
	Возврат СтрокаФильтров;
	
КонецФункции

&НаСервере
Процедура УстановитьОтображениеПланировщика()
	
	Если ВариантПериода = "День" Тогда
		
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.ВремяНачалаИКонца;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='dddd, d MMMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		
		Планировщик.ОтображатьТекущуюДату = НастройкиОтображения.ОтображатьТекущуюДату;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Час;
		Планировщик.КратностьПериодическогоВарианта = 24;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = НастройкиОтображения.НачалоРабочегоДня;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = ?(НастройкиОтображения.ОкончаниеРабочегоДня = 0, 0, 24 - НастройкиОтображения.ОкончаниеРабочегоДня);
		Планировщик.ОтображатьПеренесенныеЗаголовки = Истина;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Ложь;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMMM'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Лево;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ=ЧЧ:мм";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.Час;
		
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		
		Планировщик.ОтображатьТекущуюДату = Ложь;
		Планировщик.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.День;
		Планировщик.КратностьПериодическогоВарианта = 7;
		Планировщик.ОтступСНачалаПереносаШкалыВремени = 0;
		Планировщик.ОтступСКонцаПереносаШкалыВремени = 0;
		Планировщик.ОтображатьПеренесенныеЗаголовки = Ложь;
		Планировщик.ОтображатьПеренесенныеЗаголовкиШкалыВремени = Истина;
		Планировщик.ОтображениеВремениЭлементов = ОтображениеВремениЭлементовПланировщика.НеОтображать;
		Планировщик.ФорматПеренесенныхЗаголовковШкалыВремени = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Положение = ПоложениеШкалыВремени.Верх;
		Планировщик.ШкалаВремени.Элементы[0].Формат = "ДФ='ddd, d MMM yyyy'";
		Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
		Планировщик.ШкалаВремени.Элементы[0].Единица = ТипЕдиницыШкалыВремени.День;
		
		Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоМесяца(ДатаОтображения), КонецМесяца(ДатаОтображения));
		Интервал.Цвет = Новый Цвет(250, 250, 250);
		Если НастройкиОтображения.ОтображатьТекущуюДату Тогда
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			Интервал = Планировщик.ИнтервалыФона.Добавить(НачалоДня(ТекущаяДатаСеанса), КонецДня(ТекущаяДатаСеанса));
			Интервал.Цвет = Новый Цвет(223, 255, 223);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПериодДанных(ВариантПериода, ДатаОтображения)
	
	Результат = Новый Структура("ДатаНачала, ДатаОкончания");
	
	Если ВариантПериода = "День" Тогда
		Результат.ДатаНачала	= НачалоДня(ДатаОтображения);
		Результат.ДатаОкончания	= КонецДня(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Неделя" Тогда
		Результат.ДатаНачала	= НачалоНедели(ДатаОтображения);
		Результат.ДатаОкончания	= КонецНедели(ДатаОтображения);
	ИначеЕсли ВариантПериода = "Месяц" Тогда
		Результат.ДатаНачала	= НачалоНедели(НачалоМесяца(ДатаОтображения));
		Результат.ДатаОкончания	= КонецНедели(КонецМесяца(ДатаОтображения));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранитьИзмененияВБазу(ОбрабатываемыеЭлементы)
	
	Возврат Справочники.ЗаписиКалендаряСотрудника.СохранитьИзмененияЗаписейКалендарей(ОбрабатываемыеЭлементы);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьДатыОтображения(Форма)
	
	ПолеКалендаря = Форма.Элементы.ДатаОтображения;
	
	ПолеКалендаря.ВыделенныеДаты.Очистить();
	
	Если Форма.ВариантПериода = "Месяц" Тогда
		// Для варианта "Месяц" выделенные даты календаря отличаются от фактического периода.
		// Фактический период должен быть кратен 7 дням (недели).
		// Но в поле календаря выделяются даты только в пределах месяца.
		ПериодДанных = Новый Структура("ДатаНачала, ДатаОкончания");
		ПериодДанных.ДатаНачала		= НачалоМесяца(Форма.ДатаОтображения);
		ПериодДанных.ДатаОкончания	= КонецМесяца(Форма.ДатаОтображения);
	Иначе
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
	КонецЕсли;
	
	ТекДата = ПериодДанных.ДатаНачала;
	
	Пока ТекДата < ПериодДанных.ДатаОкончания Цикл
		ПолеКалендаря.ВыделенныеДаты.Добавить(ТекДата);
		ТекДата = ТекДата + 86400;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПланировщикаКлиент()
	
	ОбновитьДанныеПланировщикаИЗадачиНаВесьДень();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоКалендарюИПоРазрешеннымИсточникам()
	УстановитьОтборПоКалендарю();
	УстановитьОтборПоРазрешеннымИсточникам();
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДоступныхКалендарей()
	
	УдаляемыеЭлементы = Новый Массив;
	
	Для Каждого ГруппаЭлементов Из Элементы.ДоступныеКалендари.ПодчиненныеЭлементы Цикл
		УдаляемыеЭлементы.Добавить(ГруппаЭлементов);
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
		
		Индекс = ДоступныеКалендари.Индекс(СтрокаКалендаря);
		
		ГруппаКалендаря = Элементы.Добавить("ГруппаКалендарь_" + Индекс, Тип("ГруппаФормы"), Элементы.ДоступныеКалендари);
		ГруппаКалендаря.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаКалендаря.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаКалендаря.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаКалендаря.ОтображатьЗаголовок = Ложь;
		
		ФлагВыбран = Элементы.Добавить("ВыбранКалендарь_" + Индекс, Тип("ПолеФормы"), ГруппаКалендаря);
		ФлагВыбран.Вид = ВидПоляФормы.ПолеФлажка;
		ФлагВыбран.ПутьКДанным = "ДоступныеКалендари[" + Индекс + "].Выбран";
		ФлагВыбран.Заголовок = СтрокаКалендаря.Наименование;
		ФлагВыбран.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		ФлагВыбран.УстановитьДействие("ПриИзменении", "Подключаемый_ВыбранКалендарьПриИзменении");
		
		ДекорацияОтступ = Элементы.Добавить("ОтступКалендарь_" + Индекс, Тип("ДекорацияФормы"), ГруппаКалендаря);
		ДекорацияОтступ.РастягиватьПоГоризонтали = Истина;
		
		КартинкаЦвета = Элементы.Добавить("ЦветКалендарь_" + Индекс, Тип("ДекорацияФормы"), ГруппаКалендаря);
		КартинкаЦвета.Вид = ВидДекорацииФормы.Картинка;
		КартинкаЦвета.Картинка = РаботаСЦветомКлиентСервер.КартинкаЦветаПоНомеруКартинки(СтрокаКалендаря.ВариантЦвета);
		КартинкаЦвета.Гиперссылка = Истина;
		КартинкаЦвета.Ширина = 2;
		КартинкаЦвета.Высота = 1;
		КартинкаЦвета.УстановитьДействие("Нажатие", "Подключаемый_ЦветКалендарьНажатие");
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФильтров(Запрос)
	
	Для Каждого ЭлементОтбора Из ВРаботе.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Представление = "Период" Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Массив") И ЭлементОтбора.ПравоеЗначение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Строка(ЭлементОтбора.ЛевоеЗначение) = "Теги.Тег" Тогда
			Запрос.УстановитьПараметр("ФильтрПоТегам", ЭлементОтбора.ПравоеЗначение.Количество()=0);
			Запрос.УстановитьПараметр("Теги",ЭлементОтбора.ПравоеЗначение);
		ИначеЕсли Строка(ЭлементОтбора.ЛевоеЗначение) = "Ответственный" Тогда
			Запрос.УстановитьПараметр("Ответственный",ЭлементОтбора.ПравоеЗначение);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьКалендаряСервер()
	
	ПрочитатьДоступныеКалендари();
	ОбновитьДанныеПланировщикаСервер();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоВариантовЦветов()
	
	Возврат 24;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УпорядоченныеВариантыЦветов()
	
	ПервыйВариантЦвета = 14;
	
	УпорядоченныеВариантыЦветов = Новый Массив;
	Для НомерЦвета = ПервыйВариантЦвета По КоличествоВариантовЦветов() Цикл
		УпорядоченныеВариантыЦветов.Добавить(НомерЦвета);
	КонецЦикла;
	Для НомерЦвета = 1 По ПервыйВариантЦвета - 1 Цикл
		УпорядоченныеВариантыЦветов.Добавить(НомерЦвета);
	КонецЦикла;
	
	Возврат УпорядоченныеВариантыЦветов;
	
КонецФункции

&НаСервере
Процедура ПрочитатьДоступныеКалендари()
	
	ДоступныеКалендари.Очистить();
	
	НастройкиДоступныхКалендарей = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиКалендаряСотрудника",
		"ДоступныеКалендари",
		Новый ТаблицаЗначений);
	
	Если НастройкиДоступныхКалендарей.Количество() = 0 Тогда
		ЗанятыеЦвета = Новый Массив;
	Иначе
		ЗанятыеЦвета = ОбщегоНазначения.ВыгрузитьКолонку(НастройкиДоступныхКалендарей, "ВариантЦвета", Истина);
	КонецЕсли;
	ЕстьНовыеПрисвоенныеЦвета = Ложь;
	
	ТаблицаКалендарей = Справочники.КалендариСотрудников.ДоступныеСотрудникуКалендари();
	
	Для Каждого СтрокаТаблицы Из ТаблицаКалендарей Цикл
		
		НоваяСтрока = ДоступныеКалендари.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, "Календарь,Наименование");
		
		НайденнаяСтрока = НастройкиДоступныхКалендарей.Найти(СтрокаТаблицы.Календарь);
		Если НайденнаяСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока, "ВариантЦвета,Выбран");
		КонецЕсли;
		
		Если НоваяСтрока.ВариантЦвета = 0 Тогда
			Для каждого ВариантЦвета Из УпорядоченныеВариантыЦветов() Цикл
				Если ЗанятыеЦвета.Найти(ВариантЦвета) = Неопределено Тогда
					НоваяСтрока.ВариантЦвета = ВариантЦвета;
					ЗанятыеЦвета.Добавить(ВариантЦвета);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ЕстьНовыеПрисвоенныеЦвета = Истина;
		КонецЕсли;
		
		Если ЗанятыеЦвета.Количество() = КоличествоВариантовЦветов() Тогда
			ЗанятыеЦвета.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	Отбор = Новый Структура("Выбран", Истина);
	Если ДоступныеКалендари.НайтиСтроки(Отбор).Количество() = 0 Тогда
		
		Отбор.Удалить("Выбран");
		Отбор.Вставить("Календарь");
		Для Каждого СтрокаКалендаря Из ДоступныеКалендари Цикл
			Отбор.Календарь = СтрокаКалендаря.Календарь;
			СтрокаКалендаря.Выбран = ТаблицаКалендарей.НайтиСтроки(Отбор)[0].ЯвляетсяВладельцем;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьНовыеПрисвоенныеЦвета Тогда
		СохранитьНастройкиДоступныхКалендарей();
	КонецЕсли;
	
	ОбновитьЭлементыДоступныхКалендарей();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеПериода(Форма)
	
	Если Форма.ВариантПериода = "День" Тогда
		
		Форма.ПредставлениеПериодаКалендарь = Формат(Форма.ДатаОтображения, "ДФ='дддд, д МММ'");
		Форма.Элементы.ГруппаПредставлениеПериода.Заголовок = Форма.ПредставлениеПериодаКалендарь;
	ИначеЕсли Форма.ВариантПериода = "Неделя" Тогда
		
		ПериодДанных = ПолучитьПериодДанных(Форма.ВариантПериода, Форма.ДатаОтображения);
		Форма.ПредставлениеПериодаКалендарь = СтрШаблон(
			"%1 - %2",
			Формат(ПериодДанных.ДатаНачала, "ДФ='д МММ'"),
			Формат(ПериодДанных.ДатаОкончания, "ДФ='д МММ гггг'")
		);
		Форма.Элементы.ГруппаПредставлениеПериода.Заголовок = Форма.ПредставлениеПериодаКалендарь;
	ИначеЕсли Форма.ВариантПериода = "Месяц" Тогда
		
		Форма.ПредставлениеПериодаКалендарь = ПредставлениеПериода(НачалоМесяца(Форма.ДатаОтображения), КонецМесяца(Форма.ДатаОтображения));
		Форма.Элементы.ГруппаПредставлениеПериода.Заголовок = Форма.ПредставлениеПериодаКалендарь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область МеткиОтборов

&НаСервере
Процедура УстановитьМеткуИОтборСписка(ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения="")
	
	Если ПредставлениеЗначения="" Тогда
		ПредставлениеЗначения=Строка(ВыбранноеЗначение);
	КонецЕсли;
	
	РаботаСОтборами.ПрикрепитьМеткуОтбора(ЭтотОбъект, ИмяПоляОтбораСписка, ГруппаРодительМетки, ВыбранноеЗначение, ПредставлениеЗначения);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ВРаботе, ИмяПоляОтбораСписка,,Истина);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиПросрочены, ИмяПоляОтбораСписка,,Истина);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиНаСегодня, ИмяПоляОтбораСписка,,Истина);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиНаЗавтра, ИмяПоляОтбораСписка,,Истина);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиБезСрока, ИмяПоляОтбораСписка,,Истина);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиПозже, ИмяПоляОтбораСписка,,Истина);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиНаНеделе, ИмяПоляОтбораСписка,,Истина);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиЗавершены, ИмяПоляОтбораСписка,,Истина);

	УстановитьЗаголовокГруппыОтборов();
	УстановитьОтображениеОтветственного();
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Процедура УстановитьОтображениеОтветственного()
	
	Для Каждого Отбор Из ВРаботе.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") ИЛИ Строка(Отбор.ЛевоеЗначение) <> "Ответственный" Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборПоОтветственному = ТипЗнч(Отбор.ПравоеЗначение) = Тип("СписокЗначений") И Отбор.ПравоеЗначение.Количество() = 1;
		
		Элементы.ВРаботеОтветственный.Видимость = НЕ ОтборПоОтветственному;
		Элементы.ВРаботеФильтрОтветственный.Видимость = ОтборПоОтветственному;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МеткаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МеткаИД = Сред(Элемент.Имя, СтрДлина("Метка_")+1);
	УдалитьМеткуОтбора(МеткаИД);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьМеткуОтбора(МеткаИД)
	
	СтрокаМеток = ДанныеМеток[Число(МеткаИД)];
	ИмяПоляОтбора = СтрокаМеток.ИмяПоляОтбора;
	РаботаСОтборами.УдалитьМеткуОтбораСервер(ЭтотОбъект, ВРаботе, МеткаИД);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиПросрочены, ИмяПоляОтбора);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиНаЗавтра, ИмяПоляОтбора);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиБезСрока, ИмяПоляОтбора);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиПозже, ИмяПоляОтбора);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиНаНеделе, ИмяПоляОтбора);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиНаСегодня, ИмяПоляОтбора);
	РаботаСОтборами.УстановитьОтборСписка(ЭтотОбъект, ЗадачиЗавершены, ИмяПоляОтбора);
	
	УправлениеФормой();	
	УстановитьЗаголовокГруппыОтборов();
	УстановитьОтображениеОтветственного();
КонецПроцедуры

#КонецОбласти

#Область ОбменСGoogle

&НаСервере
Процедура НастроитьВидимостьГруппыСинхронизировать()
	
	ОтключенныеОбластиДоступа = РегистрыСведений.СеансовыеДанныеGoogle.ОтключенныеОбластиДоступа(Пользователи.ТекущийПользователь());
	
	Элементы.ГруппаСинхронизировать.Видимость = ОтключенныеОбластиДоступа.Найти(Перечисления.ОбластиДоступаGoogle.Календарь) = Неопределено И ВидыКонтактЦентра = 2;
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьНаКлиенте()
	
	Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаПрогрессСинхронизации;
	ПодключитьОбработчикОжидания("ПродолжитьСинхронизироватьНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьСинхронизироватьНаКлиенте()
	
	Задание = ЗаданиеСинхронизироватьНаСервере();
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		НачатьАвторизацию();
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьЗавершениеСинхронизации", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Задание, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАвторизацию()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатЗапросаТокена", ЭтотОбъект);
	ОткрытьФорму(
	"РегистрСведений.СеансовыеДанныеGoogle.Форма.ЗапросТокена",
	Новый Структура("ОписанияОбластейДоступа", ОбменСGoogleКлиентСервер.ОписанияОбластейДоступаКалендарь()),
	ЭтаФорма,,,,
	ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатЗапросаТокена(Результат, Параметры) Экспорт
	
	СеансовыеДанные = Результат;
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаКомандаСинхронизировать;
		Возврат;
	КонецЕсли;
	
	СинхронизироватьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеСинхронизации(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат.Свойство("Статус") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСинхронизировать.ТекущаяСтраница = Элементы.ГруппаКомандаСинхронизировать;
	
	Если Результат.Статус = "Выполнено" Тогда
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.ЗаписиКалендаряСотрудника"));
		ОповеститьОбИзменении(Тип("СправочникСсылка.КалендариСотрудников"));
		ОбработатьЗаписьКалендаряСервер();
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаданиеСинхронизироватьНаСервере()
	
	// Здесь у функции есть побочный эффект - инициализация сеансовых данных.
	// Так сделано для экономии серверного вызова.
	ОбменСGoogle.ИнициализироватьУзелПланаОбменаДляКалендаряGoogle();
	ОбменСGoogle.ИнициализироватьСеансовыеДанные(
	СеансовыеДанные,
	Пользователи.ТекущийПользователь(),
	Перечисления.ОбластиДоступаGoogle.Календарь);
	
	Если ОбменСGoogleКлиентСервер.НеЗаполненТокенДоступа(СеансовыеДанные) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
	"ОбменСGoogle.СинхронизироватьGoogleCalendar",
	СеансовыеДанные,
	ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СоздатьЗадачуСервер(Текст)
	
	Попытка
		Задача = Документы.ЗадачаСотрудника.СоздатьДокумент();
		Задача.Описание = Текст;
		Задача.Заполнить(Неопределено);
		Задача.Записать();
	Исключение	
		Возврат Документы.ЗадачаСотрудника.ПустаяСсылка();
	КонецПопытки;
	
	Возврат Задача.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаДаты(Начало, Окончание, Список)
	
	СекундВДне = 86400;
	СтрокаДаты = "";
	ДеньНачала  = Формат(Начало, "ДФ=дд.ММ.гг");
	ВремяНачала = Формат(Начало, "ДФ=Ч:мм");
	ВремяОкончания = Формат(Окончание, "ДФ=Ч:мм");
	ДеньОкончания = Формат(Окончание, "ДФ=дд.ММ.гг");
	СтрокаВремя = "";
	
	ЗадачаБезВремени = Час(Начало) = 0 И Час(Окончание) = 0 И Минута(Начало) = 0 И Минута(Окончание) = 0;
	Если ЗначениеЗаполнено(Окончание) Тогда
		Продолжительность = НачалоДня(Окончание) - НачалоДня(Начало);
	Иначе
		Продолжительность = 0;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДеньНачала) И НЕ ЗначениеЗаполнено(ДеньОкончания) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НачалоДня(Начало) = НачалоДня(ТекущаяДатаСеанса()) И Список = "ВРаботе" Тогда
		ДеньНачала = НСтр("ru = 'сегодня'");
	ИначеЕсли НачалоДня(Начало) = НачалоДня(ТекущаяДатаСеанса() + СекундВДне) И Список = "ВРаботе" Тогда
		ДеньНачала = НСтр("ru = 'завтра'");
	КонецЕсли;
	
	Если ЗадачаБезВремени И Продолжительность = 0 Тогда
		Если Список <> "ЗадачиНаСегодня" И Список <> "ЗадачиНаЗавтра" Тогда
			Возврат СтрШаблон(НСтр("ru ='%1, весь день'"), ДеньНачала);
		Иначе
			Возврат НСтр("ru ='весь день'");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗадачаБезВремени И Продолжительность = 0 И ЗначениеЗаполнено(Окончание) Тогда
		Если Список <> "ЗадачиНаСегодня" И Список <> "ЗадачиНаЗавтра" Тогда
			Возврат СтрШаблон(НСтр("ru = '%1 %2 - %3'"),ДеньНачала, ВремяНачала, ВремяОкончания);
		Иначе
			Возврат СтрШаблон(НСтр("ru = '%1 - %2'"), ВремяНачала, ВремяОкончания);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗадачаБезВремени И Продолжительность = 0 И НЕ ЗначениеЗаполнено(Окончание) Тогда
		Если Список <> "ЗадачиНаСегодня" И Список <> "ЗадачиНаЗавтра" Тогда
			Возврат СтрШаблон(НСтр("ru = '%1 %2'"),ДеньНачала, ВремяНачала);
		Иначе
			Возврат СтрШаблон(НСтр("ru = '%1'"), ВремяНачала);
		КонецЕсли;
	КонецЕсли;

	Если ЗадачаБезВремени И Продолжительность > 0 Тогда
		Возврат СтрШаблон(НСтр("ru ='%1 - %2'"), ДеньНачала, ДеньОкончания);
	КонецЕсли;
		
	Если НЕ ЗадачаБезВремени И Продолжительность > 0 Тогда
		Возврат СтрШаблон(НСтр("ru ='%1 %2 - %3 %4'"), ДеньНачала, ВремяНачала, ВремяОкончания, ДеньОкончания);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция КартинкаПоТипуЗадачи(Задача)
	
	Если ТипЗнч(Задача) = Тип("ДокументСсылка.Событие") И Задача.ТипСобытия = Перечисления.ТипыСобытий.ЛичнаяВстреча Тогда
		Возврат 0;
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.Событие") И Задача.ТипСобытия =  Перечисления.ТипыСобытий.ТелефонныйЗвонок Тогда
		Возврат 1;
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.Событие") И Задача.ТипСобытия =  Перечисления.ТипыСобытий.Прочее Тогда
		Возврат 2;
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.Событие") И Задача.ТипСобытия =  Перечисления.ТипыСобытий.Запись Тогда
		Возврат 3;
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		Возврат 4;
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.ЗаданиеНаРаботу") ИЛИ ТипЗнч(Задача) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат 5;
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат 6;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗавершитьЗадачуСервер(Задача, Список)
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.Выполнена = Истина;
	ЗадачаОбъект.Записать();
	Элементы[Список].Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ВыборОтветственного(Результат, ДополнительныеПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	Источник = ДополнительныеПараметры.Источник;
	ВыборОтветственногоСервер(Результат, Источник,ДополнительныеПараметры);
	Элементы[ДополнительныеПараметры.Список].Обновить();
	Если ТипЗнч(Источник) = Тип("Строка") Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),
			ПолучитьНавигационнуюСсылку(Новый ИдентификаторОбсужденияСистемыВзаимодействия(Источник))
			,СтрШаблон(НСтр("ru='%1'"),Источник)
			,БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение:'"),ПолучитьНавигационнуюСсылку(Источник),СтрШаблон(НСтр("ru='%1'"),Источник),БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыборОтветственногоСервер(Результат, Источник, ДополнительныеПараметры)
	
	Если ТипЗнч(Источник) = Тип("Строка") Тогда
		ВыборОтветственногоМессенджер(Источник, Результат);
		Возврат;
	КонецЕсли;
	
	Попытка
		ИсточникОбъект = Источник.ПолучитьОбъект();
		ИсточникОбъект.Заблокировать();
		ИсточникОбъект.Ответственный = Результат;
		ИсточникОбъект.Записать();
		ИсточникОбъект.Разблокировать();
		
		Если ДополнительныеПараметры.Список = "Входящее" Тогда
			КонтактЦентр.УдалитьИзВходящего(Источник);
			
			ОписаниеВходящего = КонтактЦентр.ОписаниеВходящего();
			ОписаниеВходящего.Ответственный = Результат;
			КонтактЦентр.ДобавитьВоВходящее(Источник, ОписаниеВходящего);
		КонецЕсли;
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Источник);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыборОтветственногоМессенджер(Источник, Результат)
	Попытка
		ИдентификаторОбсуждения = Новый ИдентификаторОбсужденияСистемыВзаимодействия(Источник);
		Обсуждение = СистемаВзаимодействия.ПолучитьОбсуждение(ИдентификаторОбсуждения);
		ПользовательСотрудника = РегистрыСведений.СотрудникиПользователя.ПолучитьПользователяПоСотруднику(Результат);
		Обсуждение.Участники.Удалить(СистемаВзаимодействия.ИдентификаторТекущегоПользователя());
		ОбсужденияУНФ.ДобавитьПользователяВОбсуждение(Обсуждение, ПользовательСотрудника);
		ОписаниеВходящего = РегистрыСведений.КонтактЦентрВходящее.ДанныеВходящегоПоИсточнику(Источник);
		КонтактЦентр.УдалитьИзВходящего(Источник);
		КонтактЦентр.ДобавитьВоВходящее(ИдентификаторОбсуждения, ОписаниеВходящего);
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	Элементы.Входящее.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗадачи(ПараметрыПеретаскивания, Список = Неопределено, Создание = Ложь)
	
	ЗначенияЗаполнения = Новый Структура;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СозданиеЗадачиКонтактЦентр", Истина);
	
	Если ПараметрыПеретаскивания.Список = "Входящее" Тогда
		ЗначенияЗаполнения.Вставить("Основание", ПараметрыПеретаскивания.Значение)
	КонецЕсли;
	Если ПараметрыПеретаскивания.Список <> "Входящее" И НЕ Создание Тогда
		ПараметрыФормы.Вставить("Ключ", ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	Если Список <> Неопределено Тогда
		ЗначенияЗаполнения.Вставить("ДатаНачала", ДатаНачалаСервер(Список));
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	Если Создание Тогда
		ИмяФормыЗадачи = "Документ.ЗадачаСотрудника.Форма.ФормаДокумента";
	Иначе
		ИмяФормыЗадачи = ИмяФормыЗадачиПоТипу(ПараметрыПеретаскивания.Значение, ПараметрыПеретаскивания.Список);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыЗадачи,ПараметрыФормы);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуЗаданияНаРаботу(ИсточникОбъект, Начало, Список)
	
	ДатаНачалаОбъект = ИсточникОбъект.Работы[0].ДатаНачала;
	ДатаОкончанияОбъект = ИсточникОбъект.Работы[0].ДатаОкончания;
	Если ЗначениеЗаполнено(ДатаОкончанияОбъект) Тогда
		Продолжительность = ДатаОкончанияОбъект - ДатаНачалаОбъект;
	КонецЕсли;
	
	ИсточникОбъект.Работы[0].ДатаНачала = Дата(Год(Начало),Месяц(Начало),День(Начало),Час(ДатаНачалаОбъект),Минута(ДатаНачалаОбъект),Секунда(ДатаНачалаОбъект));
	Если ЗначениеЗаполнено(ДатаОкончанияОбъект) Тогда
		ИсточникОбъект.Работы[0].ДатаОкончания = ИсточникОбъект.Работы[0].ДатаНачала + Продолжительность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуСобытия(ИсточникОбъект, Начало, Список)
	
	ДатаНачалаОбъект = ИсточникОбъект.НачалоСобытия;
	ДатаОкончанияОбъект = ИсточникОбъект.ОкончаниеСобытия;
	Если ЗначениеЗаполнено(ДатаОкончанияОбъект) Тогда
		Продолжительность = ДатаОкончанияОбъект - ДатаНачалаОбъект;
	КонецЕсли;
	
	ИсточникОбъект.НачалоСобытия = Дата(Год(Начало),Месяц(Начало),День(Начало),Час(ДатаНачалаОбъект),Минута(ДатаНачалаОбъект),Секунда(ДатаНачалаОбъект));
	Если ЗначениеЗаполнено(ДатаОкончанияОбъект) Тогда
		ИсточникОбъект.ОкончаниеСобытия = ИсточникОбъект.НачалоСобытия + Продолжительность;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДатуЗадачи(ИсточникОбъект, Начало, Список)
	
	ДатаНачалаОбъект = ИсточникОбъект.ДатаНачала;
	ДатаОкончанияОбъект = ИсточникОбъект.ДатаОкончания;
	Если ЗначениеЗаполнено(ДатаОкончанияОбъект) Тогда
		Продолжительность = ДатаОкончанияОбъект - ДатаНачалаОбъект;
	КонецЕсли;
	
	Если Список = "ЗадачиБезСрока" Тогда
		ИсточникОбъект.ДатаНачала = Неопределено;
		ИсточникОбъект.ДатаОкончания = Неопределено;
		Возврат;
	КонецЕсли;

	ИсточникОбъект.ДатаНачала = Дата(Год(Начало),Месяц(Начало),День(Начало),Час(ДатаНачалаОбъект),Минута(ДатаНачалаОбъект),Секунда(ДатаНачалаОбъект));
	Если ЗначениеЗаполнено(ДатаОкончанияОбъект) Тогда
		ИсточникОбъект.ДатаОкончания = ИсточникОбъект.ДатаНачала + Продолжительность;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ДатаПоТипуСписка(Список)
	
	СекундВДне = 3600*24;
	
	Если Список = "ЗадачиНаСегодня" Тогда
		Возврат ТекущаяДатаСеанса();
	ИначеЕсли Список = "ЗадачиНаЗавтра" Тогда
		Возврат ТекущаяДатаСеанса() + СекундВДне;
	ИначеЕсли Список ="ЗадачиНаНеделе" Тогда
		Возврат ТекущаяДатаСеанса() + 2*СекундВДне;
	ИначеЕсли Список ="ЗадачиПозже" Тогда
		Возврат КонецНедели(ТекущаяДатаСеанса()) + СекундВДне;
	ИначеЕсли Список ="ЗадачиБезСрока" Тогда
		Возврат Дата(1,1,1,0,0,0);
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ИзменитьДатуВОбъекте(ПараметрыИсточника, Список)
	
	Начало = ДатаПоТипуСписка(Список);
	Источник = ПараметрыИсточника.Значение;
	
	Если Список ="ЗадачиБезСрока" И ТипЗнч(Источник) <> Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		ИсточникОбъект = Источник.ПолучитьОбъект();
		ИсточникОбъект.Заблокировать();
		Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаданиеНаРаботу") Тогда
			ИзменитьДатуЗаданияНаРаботу(ИсточникОбъект, Начало,Список);
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.Событие") Тогда
			ИзменитьДатуСобытия(ИсточникОбъект, Начало,Список);
		ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
			ИзменитьДатуЗадачи(ИсточникОбъект, Начало,Список);
		Иначе
			Возврат;
		КонецЕсли;
		ИсточникОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Источник);
	КонецПопытки;
	
	Элементы[ПараметрыИсточника.Список].Обновить();
	Элементы[Список].Обновить();
	Элементы[Список].ТекущаяСтрока = Источник;
	
КонецПроцедуры

&НаСервере
Функция ДатаНачалаСервер(Список)
	
	СекундВДне = 3600*24;
	Сегодня = НачалоДня(ТекущаяДатаСеанса());
	Завтра = НачалоДня(ТекущаяДатаСеанса() + СекундВДне);
	НаНеделе = Завтра + СекундВДне;
	Позже = КонецНедели(Сегодня) + 1;
	
	Если Список = "ЗадачиНаСегодня" Тогда
		Возврат Сегодня;
	ИначеЕсли Список = "ЗадачиНаЗавтра" Тогда
		Возврат Завтра;
	ИначеЕсли Список = "ЗадачиБезСрока" Тогда
		Возврат Неопределено;
	ИначеЕсли Список = "ЗадачиНаНеделе" Тогда
		Возврат НаНеделе;
	ИначеЕсли Список = "ЗадачиПозже" Тогда
		Возврат Позже;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УдалитьСтрокуВходящегоИзРегистра(Строка,Ответственный)
	КонтактЦентр.УдалитьИзВходящего(Строка,Ответственный);
	Элементы.Входящее.Обновить();
	УправлениеФормой();
КонецПроцедуры

&НаСервере
Функция ИмяФормыЗадачиПоТипу(Задача, Список = Неопределено)
	
	Если Список = "Входящее" Тогда
		Возврат "Документ.ЗадачаСотрудника.Форма.ФормаДокумента";
	КонецЕсли;
	
	Если ТипЗнч(Задача) = Тип("ДокументСсылка.ЗадачаСотрудника") Тогда
		Возврат "Документ.ЗадачаСотрудника.Форма.ФормаДокумента";
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.Событие") Тогда
		Возврат "Документ.Событие.Форма.ФормаСобытия";
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.ЗаданиеНаРаботу") Тогда
		Возврат "Документ.ЗаданиеНаРаботу.Форма.ФормаДокумента";
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		Возврат "Документ.ЗаказПокупателя.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Задача) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		Возврат "Документ.ЗаказНаПроизводство.ФормаОбъекта";
	КонецЕсли;

КонецФункции

&НаСервере
Процедура УстановитьСостояние(ПараметрыСписка)
	
	Если ПараметрыСписка.Состояние = "Завершено" Тогда
		СостояниеСобытия = Справочники.СостоянияСобытий.Завершено;
	Иначе
		СостояниеСобытия = Справочники.СостоянияСобытий.Отменено;
	КонецЕсли;
	
	Попытка
		ИсточникОбъект = ПараметрыСписка.Источник.ПолучитьОбъект();
		ИсточникОбъект.Заблокировать();
		ИсточникОбъект.Состояние = СостояниеСобытия;
		ИсточникОбъект.Записать();
		ИсточникОбъект.Разблокировать();
	Исключение
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ИсточникОбъект);
		Возврат;
	КонецПопытки;
	Элементы[ПараметрыСписка.Список].Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗадачаПросрочена(Начало, Окончание)
	
	Если ЗначениеЗаполнено(Окончание) Тогда
		Если Окончание < ТекущаяДатаСеанса() Тогда
			Если Окончание <> НачалоДня(ТекущаяДатаСеанса()) Тогда
				Возврат 0;
			Иначе
				Возврат 1;
			КонецЕсли;
		Иначе
			Возврат 1;
		КонецЕсли;
	Иначе
		Если Начало < ТекущаяДатаСеанса() Тогда
			Если Начало <> НачалоДня(ТекущаяДатаСеанса()) Тогда
				Возврат 0;
			Иначе
				Возврат 1;
			КонецЕсли;
		Иначе
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоКалендарю()
	
	ВыбранныеКалендари = Новый Массив;
	Для Каждого Календарь Из ДоступныеКалендари Цикл
		Если НЕ Календарь.Выбран Тогда 
			Продолжить;
		КонецЕсли;
		ВыбранныеКалендари.Добавить(Календарь.Календарь);
	КонецЦикла;
	
	ВРаботе.Параметры.УстановитьЗначениеПараметра("ВыбранныеКалендари",ВыбранныеКалендари);
	ЗадачиНаСегодня.Параметры.УстановитьЗначениеПараметра("ВыбранныеКалендари",ВыбранныеКалендари);
	ЗадачиНаЗавтра.Параметры.УстановитьЗначениеПараметра("ВыбранныеКалендари",ВыбранныеКалендари);
	ЗадачиБезСрока.Параметры.УстановитьЗначениеПараметра("ВыбранныеКалендари",ВыбранныеКалендари);
	ЗадачиНаНеделе.Параметры.УстановитьЗначениеПараметра("ВыбранныеКалендари",ВыбранныеКалендари);
	ЗадачиПозже.Параметры.УстановитьЗначениеПараметра("ВыбранныеКалендари",ВыбранныеКалендари);
	ЗадачиПросрочены.Параметры.УстановитьЗначениеПараметра("ВыбранныеКалендари",ВыбранныеКалендари);
	ЗадачиЗавершены.Параметры.УстановитьЗначениеПараметра("ВыбранныеКалендари",ВыбранныеКалендари);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтборов()
	
	РаботаСОтборами.СохранитьНастройкиОтборов(ЭтотОбъект);
	ХранилищеСистемныхНастроек.Сохранить("ВариантПредставления", "ВариантПредставления_КонтактЦентр",ВидыКонтактЦентра);
	
КонецПроцедуры

#КонецОбласти
