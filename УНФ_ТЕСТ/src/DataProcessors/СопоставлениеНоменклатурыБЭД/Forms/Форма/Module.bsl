////////////////////////////////////////////////////////////////////////////////
// Модуль формы Обработка.СопоставлениеНоменклатурыБЭД.Форма
//  
////////////////////////////////////////////////////////////////////////////////
// Терминология:
// НоменклатураКонтрагента - Структура - См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента.
// НаборНоменклатурыКонтрагентов - массив из НоменклатураКонтрагента.
// НоменклатураИБ - Структура - См. ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы.
// ЗаписьСопоставления (Запись) - данные строки табличной части "Сопоставление" со служебной информацией.
// ЭлементСопоставления - структура:
//  * НоменклатураКонтрагента - Структура - См. НоменклатураКонтрагента.
//  * НоменклатураИБ - Структура - См. НоменклатураИБ.
// НаборЭлементовСопоставления - массив из ЭлементСопоставления.
// ДействиеСЭлементомСопоставления (ОписаниеДействия) - Структура - описание действия выполняемого над элементом сопоставления:
//  * Действие - название действия.
//  * ЭлементСопоставления - См. ЭлементСопоставления.
// ТаблицаВариантовСопоставления - временное хранилище с таблицей вариантов сопоставления.
////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

&НаКлиенте

Перем СохраненныеЭлементы;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Инициализация.
	СопоставленоОтбор = "Все";
	РазрешитьСохранение = Истина;
	ЕстьПравоДобавленияНоменклатуры = ЕстьПравоДобавленияНоменклатуры();
	
	// Обработка параметров формы.
	Если Параметры.Свойство("НоменклатураКонтрагентов") Тогда
		ЗаполнитьНоменклатуруКонтрагентов(Параметры.НоменклатураКонтрагентов);
		Модифицированность = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("РазрешитьСохранение") Тогда
		РазрешитьСохранение = Параметры.РазрешитьСохранение;
	КонецЕсли;
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	СписокТиповМетаданныхУпаковок.ЗагрузитьЗначения(Метаданные.ОпределяемыеТипы.УпаковкаНоменклатурыБЭД.Тип.Типы());
	ГиперссылкаЦвет    = ЦветаСтиля.ГиперссылкаЦвет;
	
	УстановитьРежимПоискаВариантовСопоставления(Истина);
	
	// Настройка формы.
	ОпределитьИспользованиеСервисаНоменклатуры();
	УстановитьВидимостьОшибкаПоиска(Ложь);
	УстановитьСвойстваЭлементовФормы();
	УстановитьСвойстваПереопределяемыхЭлементовФормы();
	УстановитьСвойстваЭлементаОтбораПоВладельцу();
	УстановитьСвойстваЭлементаОтбораПоСопоставлению();
	УстановитьСвойстваЭлементовНоменклатурыСервиса();
	
	ТочностьПоискаПоУмолчанию = 50;
	
	Если ТочностьПоиска = 0 Тогда
		ТочностьПоиска            = ТочностьПоискаПоУмолчанию;
		ТочностьПоискаДоИзменения = ТочностьПоискаПоУмолчанию;
	КонецЕсли;

	// Поиск вариантов сопоставления в фоновом режиме.
	ЗапуститьПоискВариантов();
	
	ТолькоПросмотр = НЕ ОбменСКонтрагентамиСлужебный.ЕстьПравоСопоставленияНоменклатуры();
	
	Если НЕ Отказ Тогда
		Контекст = КонтекстФормы(ЭтотОбъект);
		ОбменСКонтрагентамиСлужебный.ПриСозданииФормыПодсистемы(Контекст, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьЗавершениеПоискаВариантов(ИспользоватьСервис);
	
	Если НЕ Отказ Тогда
		Контекст = КонтекстФормы(ЭтотОбъект);
		ОбменСКонтрагентамиСлужебныйКлиент.ПриОткрытииФормыПодсистемы(Контекст, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если НЕ ЗавершениеРаботы Тогда
			ПоказатьВопросОСохраненииПередЗакрытием();
		КонецЕсли;
		
	Иначе
		
		ОтборНеСопоставленныхЗаписей = Новый Структура("Сопоставлено", Ложь);
		НеСопоставленныеСтроки = Объект.Сопоставление.НайтиСтроки(ОтборНеСопоставленныхЗаписей);
		
		Если НЕ ЗавершениеРаботы И ЗначениеЗаполнено(НеСопоставленныеСтроки) Тогда
			Отказ = Истина;
			ПоказатьВопросОСопоставленииПередЗакрытием();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЖурналРегистрации" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Данные"        , НСтр("ru = 'Поиск вариантов сопоставления номенклатуры'"));
		ПараметрыОткрытия.Вставить("ДатаНачала"    , НачалоДня(ТекущаяДата));
		ПараметрыОткрытия.Вставить("ДатаОкончания" , КонецДня(ТекущаяДата));
		ПараметрыОткрытия.Вставить("Уровень"       , "Ошибка");
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыОткрытия, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВладелецОтборПриИзменении(Элемент)
	
	ОбработатьОтборЗаписейСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставленоОтборПриИзменении(Элемент)
	
	ОбработатьОтборЗаписейСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРаботаСНоменклатуройПодсказкаНажатие(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Сервис 1С:Номенклатура'"));
		ПараметрыОткрытия.Вставить("ОписаниеРаздела",
			НСтр("ru = 'Для возможности загрузки номенклатуры необходимо включить использование сервиса 1С:Номенклатура.'"));
		ПараметрыОткрытия.Вставить("Раздел", "НастройкиРаботаСНоменклатурой");
		
		Оповещение = Новый ОписаниеОповещения("РаботаСНоменклатуройПодсказкаЗавершение", ЭтотОбъект);
		
		МодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
		МодульРаботаСНоменклатуройКлиент.ОткрытьФормуПанелиАдминистрирования(
			ПараметрыОткрытия, ЭтотОбъект, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТочностьПоискаПриИзменении(Элемент)
	
	Если ТочностьПоиска > 100 Тогда
		ТочностьПоиска = 100;
	ИначеЕсли ТочностьПоиска < 30 Тогда
		ТочностьПоиска = 30;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗапускПоискаВариантовПриИзмененииТочности", 0.3, Истина);

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСопоставление

&НаКлиенте
Процедура СопоставлениеПриИзменении(Элемент)
	
	СопоставлениеПриИзмененииНаСервере(Элемент.ТекущийЭлемент.Имя);
	
	ОжидатьЗавершениеПоискаВариантов(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Сопоставление.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИдентификаторСопоставления = ТекущиеДанные.Идентификатор;
	
	ЗаполнитьСписокДействийСЭлементомСопоставления();
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Обработаем выбор действия с элементом сопоставления в подчиненной форме.
	Если ЭтоДействиеСЭлементомСопоставления(ВыбранноеЗначение) Тогда
		
		ОбработатьДействиеСЭлементомСопоставления(ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	// Обработаем создание номенклатуры по данным контрагента в подчиненной форме.
	Если Источник.ОписаниеОповещенияОЗакрытии <> Неопределено Тогда
		
		ДополнительныеПараметры = Источник.ОписаниеОповещенияОЗакрытии.ДополнительныеПараметры;
		
		Если ЭтоЭлементСопоставления(ДополнительныеПараметры) Тогда
			
			ЗакончитьСозданиеНоменклатурыИнформационнойБазыВручную(ДополнительныеПараметры, НовыйОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Номенклатура

&НаКлиенте
Процедура СопоставлениеНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// Обработаем выбор действия с элементом сопоставления из выпадающего списка.
	Если ЭтоДействиеСЭлементомСопоставления(ВыбранноеЗначение) Тогда
	
		СтандартнаяОбработка = Ложь;
		ОбработатьДействиеСЭлементомСопоставления(ВыбранноеЗначение);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Характеристика

&НаКлиенте
Процедура СопоставлениеХарактеристикаПриИзменении(Элемент)
	
	Подключаемый_ЭлементПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Подключаемый_ЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеХарактеристикаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Подключаемый_ЭлементНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеХарактеристикаОчистка(Элемент, СтандартнаяОбработка)
	
	Подключаемый_ЭлементОчистка(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	Подключаемый_ЭлементСоздание(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеХарактеристикаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Подключаемый_ЭлементОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеХарактеристикаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Подключаемый_ЭлементИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеХарактеристикаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Подключаемый_ЭлементАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеХарактеристикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Подключаемый_ЭлементОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Упаковка

&НаКлиенте
Процедура СопоставлениеУпаковкаПриИзменении(Элемент)
	
	Подключаемый_ЭлементПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Подключаемый_ЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
	Если НЕ СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если СписокТиповМетаданныхУпаковок.Количество() > 1 Тогда
		
		ТекущаяСтрока = Элементы.Сопоставление.ТекущаяСтрока;
		
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Запись = Объект.Сопоставление.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Элемент.КнопкаВыбора = Ложь;
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			
			КлючЗаписи = Новый Структура("Владелец,Идентификатор,Номенклатура");
			ЗаполнитьЗначенияСвойств(КлючЗаписи, Запись);
			
			СтруктураДанных = ПолучитьВариантыСопоставленияХарактеристикИУпаковок(КлючЗаписи, АдресТаблицыВариантовСопоставления);
			
			Если ЗначениеЗаполнено(СтруктураДанных) Тогда
				Если СтруктураДанных.Свойство("ВариантыСопоставленияУпаковки") Тогда
					ДанныеВыбора.ЗагрузитьЗначения(СтруктураДанных.ВариантыСопоставленияУпаковки);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого ТипМетаданных Из СписокТиповМетаданныхУпаковок Цикл
			ЗначениеТипаМетаданных = ТипМетаданных.Значение;
			
			ПредставлениеУпаковки = Новый ФорматированнаяСтрока(
				СтрШаблон(НСтр("ru = 'Выбрать из: %1'"), Строка(ЗначениеТипаМетаданных)), , ГиперссылкаЦвет, , Строка(ЗначениеТипаМетаданных));
			ДанныеВыбора.Добавить(ЗначениеТипаМетаданных, ПредставлениеУпаковки);

		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеУпаковкаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Подключаемый_ЭлементНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеУпаковкаОчистка(Элемент, СтандартнаяОбработка)
	
	Подключаемый_ЭлементОчистка(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеУпаковкаСоздание(Элемент, СтандартнаяОбработка)
	
	Подключаемый_ЭлементСоздание(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеУпаковкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если СписокТиповМетаданныхУпаковок.Количество() > 1 Тогда
		
		ТекущаяСтрока = Элементы.Сопоставление.ТекущаяСтрока;
		
		Если ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Запись = Объект.Сопоставление.НайтиПоИдентификатору(ТекущаяСтрока);
		
		НайденныйТип = СписокТиповМетаданныхУпаковок.НайтиПоЗначению(ВыбранноеЗначение);
		Если НайденныйТип <> Неопределено Тогда
			ИмяФормыВыбора = ПолучитьНаименованиеПоТипу(ВыбранноеЗначение);
			Если ИмяФормыВыбора <> Неопределено Тогда
				
				Подключаемый_ЭлементОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
				
				Если СтандартнаяОбработка Тогда
					
					ПараметрыВыбора = Новый Структура;
					Если ЗначениеЗаполнено(Элемент.СвязиПараметровВыбора) Тогда
						СвязиПараметровВыбора = Элемент.СвязиПараметровВыбора[0];
						ПараметрыВыбора.Вставить(СтрЗаменить(СвязиПараметровВыбора.Имя, "Отбор.", ""), Запись.Номенклатура);
					КонецЕсли;
					
					ПараметрыФормы = Новый Структура;
					ПараметрыФормы.Вставить("Отбор", ПараметрыВыбора);
					ПараметрыФормы.Вставить("ТекущаяСтрока", Запись.Упаковка);
					
					ЭлементСопоставления = ЭлементСопоставленияПоЗаписи(Запись);
					
					ОбработкаОповещения = Новый ОписаниеОповещения("ЗавершитьОбработкуВыбораУпаковки", ЭтотОбъект, Запись);
					ОткрытьФорму(ИмяФормыВыбора, ПараметрыФормы, ЭтаФорма, , , , ОбработкаОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
					
					Если ЗначениеЗаполнено(Запись.Упаковка) Тогда
						ВыбранноеЗначение = Запись.Упаковка;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	Иначе
		Подключаемый_ЭлементОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеУпаковкаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Подключаемый_ЭлементИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеУпаковкаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Подключаемый_ЭлементАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеУпаковкаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Подключаемый_ЭлементОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	СохраненныеЭлементы = СохранитьСопоставление();
	
	Если СохраненныеЭлементы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть(СохраненныеЭлементы);
	
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	СохраненныеЭлементы = СохранитьСопоставление();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	
	ВыделенныеЭлементыСопоставления = Новый Массив;
	
	Для Каждого Идентификатор Из Элементы.Сопоставление.ВыделенныеСтроки Цикл
		
		Запись = Объект.Сопоставление.НайтиПоИдентификатору(Идентификатор);
		ЭлементСопоставления = ЭлементСопоставленияПоЗаписи(Запись);
		ВыделенныеЭлементыСопоставления.Добавить(ЭлементСопоставления);
		
	КонецЦикла;
	
	ПоказатьВопросОСозданииНоменклатуры(ВыделенныеЭлементыСопоставления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьСловарьСопоставления(Команда)
	
	ОчиститьСообщения();
	
	ТекстВопроса = НСтр("ru = 'Внимание! Операция перезаполнения словаря может занимать от нескольких минут до нескольких часов. 
	|После запуска операции можете продолжить работу в программе. Не рекомендуется прерывать работу процедуры для корректной работы функционала сопоставления.
	|Не рекомендуется во время перезаполнения словаря изменять наименование номенклатуры, характеристики, если используется,
	|или же их необходимо будет перезаписать после перезаполнения словаря, чтобы измененные данные попали в словарь сопоставления.'");

	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОПерезаполнениеСловаря", ЭтотОбъект);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("КнопкаПоУмолчанию", КодВозвратаДиалога.Отмена);
	ДополнительныеПараметры.Вставить("ПредлагатьБольшеНеЗадаватьЭтотВопрос", Ложь);
	ДополнительныеПараметры.Вставить("Картинка", БиблиотекаКартинок.Предупреждение32);
	ДополнительныеПараметры.Вставить("Заголовок", НСтр("ru = 'Перезаполнение словаря сопоставления.'"));
	
	СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСФормой

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	МетаданныеСопоставления = ОбменСКонтрагентамиСлужебный.МетаданныеСопоставленияНоменклатуры();
	
	// Управление видимостью поля характеристики контрагента. Отключаем видимость, если поле не заполнено.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.НаименованиеХарактеристики");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеНаименованиеХарактеристики.Имя);
	
	// Управление видимостью поля характеристики ИБ, если она не используется или не заполнена номенклатура.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.ИспользоватьХарактеристики");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеХарактеристика.Имя);
	
	// Включение отметки незаполненного поля характеристики ИБ, если она используется.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.ИспользоватьХарактеристики");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.ОбязательноеЗаполнениеХарактеристики");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Характеристика");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеХарактеристика.Имя);
	
	// Включение подсказки ввода для незаполненной номенклатуры ИБ.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ШрифтПодсказкиВвода = Новый Шрифт(Элементы.СопоставлениеНоменклатура.Шрифт,,,, Истина,,, 85);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтПодсказкиВвода);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Сопоставление.ПодсказкаНайденныхВариантовНоменклатуры"));
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Номенклатура");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеНоменклатура.Имя);
	
	// Включение подсказки ввода для незаполненной характеристики ИБ.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ШрифтПодсказкиВвода = Новый Шрифт(Элементы.СопоставлениеХарактеристика.Шрифт,,,, Истина,,, 85);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтПодсказкиВвода);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Сопоставление.ПодсказкаНайденныхВариантовХарактеристики"));
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Характеристика");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеХарактеристика.Имя);
	
	// Включение подсказки ввода для незаполненной упаковки ИБ.

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ШрифтПодсказкиВвода = Новый Шрифт(Элементы.СопоставлениеУпаковка.Шрифт,,,, Истина,,, 85);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтПодсказкиВвода);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Сопоставление.ПодсказкаНайденныхВариантовУпаковки"));
	
	ОтборГруппа = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборГруппа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Упаковка");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ОтборГруппа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Номенклатура");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеУпаковка.Имя);
	
	// Включение отметки незаполненного поля упаковки ИБ, если она используется.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ГруппаЭлементовОтбораДанных = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаЭлементовОтбораДанных.Использование = Истина;

	ОтборЭлемента = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.ИспользоватьУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Сопоставление.Упаковка");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СопоставлениеУпаковка.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	Элементы.КомандаСохранить.Видимость = РазрешитьСохранение;
	
	ЗаголовокСохранитьИЗакрыть = НСтр("ru = 'Сохранить и закрыть'");
	Если НЕ РазрешитьСохранение Тогда
		ЗаголовокСохранитьИЗакрыть = НСтр("ru = 'Готово'");
	КонецЕсли;
	Элементы.КомандаСохранитьИЗакрыть.Заголовок = ЗаголовокСохранитьИЗакрыть;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОшибкаПоиска(Знач ВключитьВидимость)
	
	Элементы.ГруппаОшибкаВыполнения.Видимость = ВключитьВидимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПереопределяемыхЭлементовФормы()
	
	МетаданныеСопоставления = ОбменСКонтрагентамиСлужебный.МетаданныеСопоставленияНоменклатуры();
	
	Элементы.ВладелецОтбор.Заголовок               = МетаданныеСопоставления.ВладелецНоменклатурыПредставлениеОбъекта;
	Элементы.СопоставлениеВладелец.Заголовок       = МетаданныеСопоставления.ВладелецНоменклатурыПредставлениеОбъекта;
	Элементы.СопоставлениеНоменклатура.Заголовок   = МетаданныеСопоставления.НоменклатураПредставлениеОбъекта;
	Элементы.СопоставлениеХарактеристика.Заголовок = МетаданныеСопоставления.ХарактеристикаПредставлениеОбъекта;
	Элементы.СопоставлениеУпаковка.Заголовок       = МетаданныеСопоставления.УпаковкаПредставлениеОбъекта;
	
	Если ЗначениеЗаполнено(МетаданныеСопоставления.ИмяПараметраСвязиХарактеристики) Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(МетаданныеСопоставления.ИмяПараметраСвязиХарактеристики, 
			"Элементы.Сопоставление.ТекущиеДанные.Номенклатура");
		ВсеСвязи = Новый Массив();
		ВсеСвязи.Добавить(НоваяСвязь);
		Элементы.СопоставлениеХарактеристика.СвязиПараметровВыбора = Новый ФиксированныйМассив(ВсеСвязи);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МетаданныеСопоставления.ИмяПараметраСвязиУпаковки) Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(МетаданныеСопоставления.ИмяПараметраСвязиУпаковки, 
			"Элементы.Сопоставление.ТекущиеДанные.Номенклатура");
		ВсеСвязи = Новый Массив();
		ВсеСвязи.Добавить(НоваяСвязь);
		Элементы.СопоставлениеУпаковка.СвязиПараметровВыбора = Новый ФиксированныйМассив(ВсеСвязи);
		
	КонецЕсли;
	
	Элементы.КомандаСоздатьНоменклатуру.Видимость = ЕстьПравоДобавленияНоменклатуры;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПоискаВариантовСопоставления(ПоискВключен)
	
	Элементы.ГруппаОтображенияСопоставления.ТекущаяСтраница = ?(ПоискВключен, Элементы.ГруппаПоискСопоставления, Элементы.ГруппаСопоставление);
	Элементы.КомандаСохранитьИЗакрыть.Доступность           = НЕ ПоискВключен;
	Элементы.КомандаСохранить.Доступность                   = НЕ ПоискВключен;
	Элементы.КомандаНайти.Доступность                       = НЕ ПоискВключен;
	Элементы.КомандаОтменитьПоиск.Доступность               = НЕ ПоискВключен;
	Элементы.КомандаСоздатьНоменклатуру.Доступность         = НЕ ПоискВключен;
	Элементы.ГруппаПоискВариантов.Видимость                 = ПоискВключен;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаОтбораПоВладельцу()
	
	ВсеВладельцы = Новый Массив;
	Для Каждого Запись Из Объект.Сопоставление Цикл
		Если ВсеВладельцы.Найти(Запись.Владелец) = Неопределено Тогда
			ВсеВладельцы.Добавить(Запись.Владелец);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ВладелецОтбор.СписокВыбора.ЗагрузитьЗначения(ВсеВладельцы);
	Элементы.ВладелецОтбор.СписокВыбора.СортироватьПоЗначению();
	
	Если ВсеВладельцы.Количество() = 1 Тогда
		ВладелецОтбор = ВсеВладельцы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементаОтбораПоСопоставлению()
	
	ВсегоЗаписей = Объект.Сопоставление.Количество();
	ВсеСопоставленныеЗаписи = Объект.Сопоставление.НайтиСтроки(Новый Структура("Сопоставлено", Истина));
	СопоставленоЗаписей     = ВсеСопоставленныеЗаписи.Количество();
	НеСопоставленоЗаписей   = ВсегоЗаписей - СопоставленоЗаписей;
	
	Элементы.СопоставленоОтбор.СписокВыбора[0].Представление = СтрШаблон(НСтр("ru = 'Все (%1)'"), ВсегоЗаписей);
	Элементы.СопоставленоОтбор.СписокВыбора[1].Представление = СтрШаблон(НСтр("ru = 'Сопоставленные (%1)'"), СопоставленоЗаписей);
	Элементы.СопоставленоОтбор.СписокВыбора[2].Представление = СтрШаблон(НСтр("ru = 'Несопоставленные (%1)'"), НеСопоставленоЗаписей);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовНоменклатурыСервиса()
	
	Элементы.СопоставлениеГруппаНоменклатураСервиса.Видимость = ИспользоватьСервис;
	Элементы.ГруппаРаботаСНоменклатуройПодсказка.Видимость    = ОтображатьПодсказкуСервиса;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьИспользованиеСервисаНоменклатуры()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		
		МодульРаботаСНоменклатурой = ОбщегоНазначения.ОбщийМодуль("РаботаСНоменклатурой");
		
		ИспользоватьСервисРаботаСНоменклатурой = МодульРаботаСНоменклатурой.ДоступнаФункциональностьПодсистемы();
		
		ИспользоватьСервис = ИспользоватьСервисРаботаСНоменклатурой
			И МодульРаботаСНоменклатурой.ПравоИзмененияДанных();
		
		ОтображатьПодсказкуСервиса = НЕ ИспользоватьСервисРаботаСНоменклатурой
			И МодульРаботаСНоменклатурой.ПравоИзмененияНастроек()
			И ПереданыИдентификаторыНоменклатурыСервиса();
		
	Иначе
		ИспользоватьСервис         = Ложь;
		ОтображатьПодсказкуСервиса = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОтборЗаписейСопоставления()
	
	СтруктураОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(ВладелецОтбор) Тогда
		СтруктураОтбора.Вставить("Владелец", ВладелецОтбор);
	КонецЕсли;
	Если СопоставленоОтбор = "Сопоставленные" Тогда
		СтруктураОтбора.Вставить("Сопоставлено", Истина);
	ИначеЕсли СопоставленоОтбор = "Несопоставленные" Тогда
		СтруктураОтбора.Вставить("Сопоставлено", Ложь);
	КонецЕсли;
	
	Элементы.Сопоставление.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	ЭлементСопоставления = ТекущийЭлементСопоставления();
	Если ЭлементСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеПараметраВыбора = Новый Структура;
	ЗначениеПараметраВыбора.Вставить("НоменклатураКонтрагента", ЭлементСопоставления.НоменклатураКонтрагента);
	
	ПараметрыВыбораНоменклатуры = Новый ПараметрВыбора("Дополнительно.ОбменСКонтрагентами", ЗначениеПараметраВыбора);
	
	ВсеПараметрыВыбора = Новый Массив;
	ВсеПараметрыВыбора.Добавить(ПараметрыВыбораНоменклатуры);
	
	Элементы.СопоставлениеНоменклатура.ПараметрыВыбора   = Новый ФиксированныйМассив(ВсеПараметрыВыбора);
	Элементы.СопоставлениеХарактеристика.ПараметрыВыбора = Новый ФиксированныйМассив(ВсеПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапускПоискаВариантовПриИзмененииТочности()
	
	ТекстВопроса = НСтр("ru = 'Выберите для каких позиций выполнить поиск вариантов сопоставления'");
	ВывестиВопросПовторногоПоискаВариантов(ТекстВопроса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеПоТипу(НайденныйТип)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(НайденныйТип);
	
	ЭтоСправочник = ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных);
	
	Если ЭтоСправочник Тогда
		Возврат СтрШаблон("Справочник.%1.ФормаВыбора", ОбъектМетаданных.Имя);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьОбработкуВыбораУпаковки(Результат, ЗаписьСопоставления) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьСопоставления.Упаковка = Результат;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВариантами

&НаСервере
Процедура ЗапуститьПоискВариантов(Знач ПолныйПоиск = Истина)
	
	ОчиститьНайденныеВариантыСопоставленияПриПовторномПолномПоиске(ПолныйПоиск);
	
	НачатьПоискВариантов(Неопределено, , ПолныйПоиск);

КонецПроцедуры

&НаСервере
Процедура НачатьПоискВариантов(НаборНоменклатурыКонтрагентов, Знач ТребуетсяПоискНоменклатуры = Истина, Знач ПолныйПоиск = Истина, Знач ОтборПоиска = Неопределено)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Поиск вариантов сопоставления номенклатуры'");
	
	Если НаборНоменклатурыКонтрагентов = Неопределено Тогда
		НаборНоменклатурыКонтрагентов = ПолучитьЭлементыСопоставления(ОтборПоиска, "НоменклатураКонтрагента");
	КонецЕсли;
	
	Если НЕ НаборНоменклатурыКонтрагентов.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("НаборНоменклатурыКонтрагентов"     , НаборНоменклатурыКонтрагентов);
	ПараметрыМетода.Вставить("ПроцентТочностиПоискаНоменклатуры" , ТочностьПоиска);
	ПараметрыМетода.Вставить("ТребуетсяПоискНоменклатуры"        , ТребуетсяПоискНоменклатуры);
	ПараметрыМетода.Вставить("ПолныйПоиск"                       , ПолныйПоиск);
	ПараметрыМетода.Вставить("ИспользоватьСервис"                , ИспользоватьСервис);
	Если ЭтоАдресВременногоХранилища(АдресТаблицыВариантовСопоставления) Тогда
		ПараметрыМетода.Вставить("ТаблицаВариантовСопоставления" , ПолучитьИзВременногоХранилища(АдресТаблицыВариантовСопоставления));
	КонецЕсли;
	ПараметрыМетода.Вставить("ТаблицаСопоставления"              , Объект.Сопоставление.Выгрузить());
	
	ИмяМетода = "Обработка.СопоставлениеНоменклатурыБЭД.МодульОбъекта.НайтиВариантыСопоставленияНоменклатуры";
	
	УстановитьРежимПоискаВариантовСопоставления(Истина);
	
	ОперацияПоискаВариантов = ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыМетода, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершениеПоискаВариантов(ЭтоПоискПоИдентификаторам = Ложь, Знач ПолныйПоиск = Истина)
	
	Если ОперацияПоискаВариантов = Неопределено Тогда
		УстановитьРежимПоискаВариантовСопоставления(Ложь);
		Возврат;
	КонецЕсли;
	
	ОбработкаЗавершенияПоискаВариантов = Новый ОписаниеОповещения("ЗакончитьПоискВариантов", ЭтотОбъект, 
		Новый Структура("ПолныйПоиск", ПолныйПоиск));
	
	ПараметрыОжидания                                 = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
	ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
	ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
	ПараметрыОжидания.ВыводитьСообщения               = Ложь;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПоискаВариантов, ОбработкаЗавершенияПоискаВариантов, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьПоискВариантов(Результат, ДополнительныеПараметры) Экспорт
	
	ЗакончитьПоискВариантовНаСервере(Результат, ДополнительныеПараметры);
	ЗаполнитьСписокДействийСЭлементомСопоставления();
	
	ОжидатьЗавершениеПоискаВариантов(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьПоискВариантовНаСервере(Результат, ДополнительныеПараметры)
	
	ОперацияПоискаВариантов = Неопределено;
	Элементы.ГруппаПоискВариантов.Видимость = Ложь;
		
	Если Результат = Неопределено
		ИЛИ Результат.Статус <> "Выполнено" Тогда
		УстановитьРежимПоискаВариантовСопоставления(Ложь);
		УстановитьВидимостьОшибкаПоиска(Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьОшибкаПоиска(Ложь);
	
	Модифицированность = Истина;
	
	СтруктураРезультата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если СтруктураРезультата = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить поиск вариантов сопоставления по причине:'")
			+ Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если СтруктураРезультата.Свойство("ТаблицаВариантовСопоставления") Тогда
		АдресТаблицыВариантовСопоставления = ПоместитьВоВременноеХранилище(СтруктураРезультата.ТаблицаВариантовСопоставления, УникальныйИдентификатор);
	КонецЕсли;
	Объект.Сопоставление.Загрузить(СтруктураРезультата.ТаблицаСопоставления);
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Идентификатор", ТекущийИдентификаторСопоставления);
	НайденныеСтроки = Объект.Сопоставление.НайтиСтроки(ПараметрыОтбора);
	Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
		Элементы.Сопоставление.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	РезультатПоиска = СтрШаблон(НСтр("ru = 'Поиск вариантов завершен. Автоматически сопоставлено: %1'"), СтруктураРезультата.СопоставленоАвтоматически);
	Элементы.НадписьРезультатПоискаВариантов.Заголовок = РезультатПоиска;
	Элементы.НадписьРезультатПоискаВариантов.Видимость = Истина;
	
	УстановитьСвойстваЭлементаОтбораПоСопоставлению();
	
	УстановитьРежимПоискаВариантовСопоставления(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВариантыСопоставления(Знач ЭлементСопоставления)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЭлементСопоставления"              , ЭлементСопоставления);
	ПараметрыФормы.Вставить("АдресТаблицыВариантовСопоставления", АдресТаблицыВариантовСопоставления);
	
	ОткрытьФорму("Обработка.СопоставлениеНоменклатурыБЭД.Форма.ФормаВариантов",
		ПараметрыФормы, Элементы.Сопоставление, ЭлементСопоставления,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССопоставлением

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементСопоставленияПоЗаписи(Знач Запись)
	
	ЭлементСопоставления = Новый Структура;
	ЭлементСопоставления.Вставить("НоменклатураКонтрагента", 
		НоменклатураКонтрагентаПоЗаписиСопоставления(Запись));
		
	ЭлементСопоставления.Вставить("НоменклатураИБ", 
		НоменклатураИБПоЗаписиСопоставления(Запись));
		
	ЭлементСопоставления.Вставить("КоличествоВариантовНоменклатуры", Запись.КоличествоВариантовНоменклатуры);
	ЭлементСопоставления.Вставить("ПоискВариантовНеТребуется"      , Запись.ПоискВариантовНеТребуется);
	ЭлементСопоставления.Вставить("ПодсказкаНайденныхВариантовХарактеристики"  , Запись.ПодсказкаНайденныхВариантовХарактеристики);
	ЭлементСопоставления.Вставить("ПодсказкаНайденныхВариантовУпаковки"        , Запись.ПодсказкаНайденныхВариантовУпаковки);
	ЭлементСопоставления.Вставить("ПодсказкаНайденныхВариантовНоменклатуры"    , Запись.ПодсказкаНайденныхВариантовНоменклатуры);
	ЭлементСопоставления.Вставить("ИспользоватьХарактеристики"                 , Запись.ИспользоватьХарактеристики);

	Возврат ЭлементСопоставления;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоменклатураКонтрагентаПоЗаписиСопоставления(Знач Запись)
	
	НоменклатураКонтрагента = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураКонтрагента();
	ЗаполнитьЗначенияСвойств(НоменклатураКонтрагента, Запись);
	НоменклатураКонтрагента.Характеристика = Запись.НаименованиеХарактеристики;
	НоменклатураКонтрагента.Вставить("НоменклатураИБ"  , Запись.Номенклатура);
	НоменклатураКонтрагента.Вставить("ХарактеристикаИБ", Запись.Характеристика);
	НоменклатураКонтрагента.Вставить("УпаковкаИБ"      , Запись.Упаковка);
	
	Возврат НоменклатураКонтрагента;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоменклатураИБПоЗаписиСопоставления(Знач Запись)
	
	НоменклатураИБ = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы();
	ЗаполнитьЗначенияСвойств(НоменклатураИБ, Запись);
	Возврат НоменклатураИБ;
	
КонецФункции

&НаКлиенте
Функция ЭтоДействиеСЭлементомСопоставления(Знач ПроверяемоеЗначение)
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("Структура") Тогда
		
		Если ПроверяемоеЗначение.Свойство("Действие") 
			И ПроверяемоеЗначение.Свойство("ЭлементСопоставления") Тогда
			
			ДопустимыеДействия = Новый Массив;
			ДопустимыеДействия.Добавить("ПоказатьВарианты");
			ДопустимыеДействия.Добавить("ИдетПоискВариантов");
			ДопустимыеДействия.Добавить("ПрименитьВариант");
			ДопустимыеДействия.Добавить("ОткрытьСписок");
			ДопустимыеДействия.Добавить("СоздатьНоменклатуру");
			ДопустимыеДействия.Добавить("ЗагрузитьИзСервиса");
			ДопустимыеДействия.Добавить("ПодобратьИзСервиса");
			
			Если ДопустимыеДействия.Найти(ПроверяемоеЗначение.Действие) <> Неопределено Тогда
			
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДействиеСЭлементомСопоставления(Знач ОписаниеДействия)
	
	Действие = ОписаниеДействия.Действие;
	ЭлементСопоставления = ОписаниеДействия.ЭлементСопоставления;
	Если ЭлементСопоставления = Неопределено Тогда
		ЭлементСопоставления = ТекущийЭлементСопоставления();
	КонецЕсли;
	
	Если Действие = "ПоказатьВарианты" Тогда
		
		ПоказатьВариантыСопоставления(ЭлементСопоставления);
		
	ИначеЕсли Действие = "ИдетПоискВариантов" Тогда
		
		ТекстСообщения = НСтр("ru = 'Поиск вариантов еще не завершен. Попробуйте позже.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	ИначеЕсли Действие = "ПрименитьВариант" Тогда
		
		ОбработатьЭлементыСопоставленияНоменклатуры(ЭлементСопоставления, Ложь);
		Элементы.Сопоставление.ЗакончитьРедактированиеСтроки(Ложь);
		
		ОжидатьЗавершениеПоискаВариантов(Ложь);
		
	ИначеЕсли Действие = "СоздатьНоменклатуру" Тогда
		
		ПоказатьВопросОСозданииНоменклатуры(ЭлементСопоставления);
		Элементы.Сопоставление.ЗакончитьРедактированиеСтроки(Ложь);
		
	ИначеЕсли Действие = "ОткрытьСписок" Тогда
		
		ОткрытьФормуВыбораНоменклатурыИнформационнойБазы(ЭлементСопоставления);
		
	ИначеЕсли Действие = "ПодобратьИзСервиса" Тогда
		
		ПоказатьПодборИзСервиса(ЭлементСопоставления);
		Элементы.Сопоставление.ЗакончитьРедактированиеСтроки(Ложь);
		
	ИначеЕсли Действие = "ЗагрузитьИзСервиса" Тогда
		
		НачатьЗагрузкуНоменклатуруИзСервиса(ЭлементСопоставления);
		Элементы.Сопоставление.ЗакончитьРедактированиеСтроки(Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокДействийСЭлементомСопоставления()
	
	СписокДействий = Элементы.СопоставлениеНоменклатура.СписокВыбора;
	СписокДействий.Очистить();
	
	СписокДействийХарактеристики = Элементы.СопоставлениеХарактеристика.СписокВыбора;
	СписокДействийХарактеристики.Очистить();
	
	СписокДействийУпаковки = Элементы.СопоставлениеУпаковка.СписокВыбора;
	СписокДействийУпаковки.Очистить();
	
	ЭлементСопоставления = ТекущийЭлементСопоставления();
	Если ЭлементСопоставления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = ЭлементСопоставления.НоменклатураИБ.Номенклатура;
	
	// Показать варианты.
	Если ОперацияПоискаВариантов = Неопределено Тогда
		
		Если ЭлементСопоставления.КоличествоВариантовНоменклатуры > 0 Тогда
			
			НовоеДействие = Новый Структура("Действие,ЭлементСопоставления", "ПоказатьВарианты", Неопределено);
			Представление = СтрШаблон(НСтр("ru = 'Найдено в моей базе (%1)'"), ЭлементСопоставления.КоличествоВариантовНоменклатуры);
			СписокДействий.Добавить(НовоеДействие, Представление,, БиблиотекаКартинок.ВыбратьЗначение);
			
			Если ЗначениеЗаполнено(Номенклатура)
				И ЭтоАдресВременногоХранилища(АдресТаблицыВариантовСопоставления) Тогда
				
				КлючЗаписи = Новый Структура("Владелец,Идентификатор,Номенклатура");
				КлючЗаписи.Владелец      = ЭлементСопоставления.НоменклатураКонтрагента.Владелец;
				КлючЗаписи.Идентификатор = ЭлементСопоставления.НоменклатураКонтрагента.Идентификатор;
				КлючЗаписи.Номенклатура  = Номенклатура;
				
				СтруктураДанных = ПолучитьВариантыСопоставленияХарактеристикИУпаковок(КлючЗаписи, АдресТаблицыВариантовСопоставления);
				
				Если ЗначениеЗаполнено(СтруктураДанных) Тогда
					Если СтруктураДанных.Свойство("ВариантыСопоставленияХарактеристики") Тогда
						СписокДействийХарактеристики.ЗагрузитьЗначения(СтруктураДанных.ВариантыСопоставленияХарактеристики);
					КонецЕсли;
					Если СписокТиповМетаданныхУпаковок.Количество() = 1
						И СтруктураДанных.Свойство("ВариантыСопоставленияУпаковки") Тогда
						СписокДействийУпаковки.ЗагрузитьЗначения(СтруктураДанных.ВариантыСопоставленияУпаковки);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		НовоеДействие = Новый Структура("Действие,ЭлементСопоставления", "ИдетПоискВариантов", ЭлементСопоставления);
		Представление = НСтр("ru = 'Идет поиск вариантов'");
		СписокДействий.Добавить(НовоеДействие, Представление,, БиблиотекаКартинок.ДлительнаяОперация16);
			
	КонецЕсли;
	
	// Создать по данным контрагента.
	Если ЕстьПравоДобавленияНоменклатуры Тогда
		НовоеДействие = Новый Структура("Действие,ЭлементСопоставления", "СоздатьНоменклатуру", ЭлементСопоставления);
		Представление = НСтр("ru = 'Создать по данным контрагента'");
		СписокДействий.Добавить(НовоеДействие, Представление,, БиблиотекаКартинок.СоздатьЭлементСписка);
	КонецЕсли;
	
	// Загрузить/Подобрать из сервиса 1С:Номенклатура.
	Если ИспользоватьСервис Тогда
		
		Если ЗначениеЗаполнено(ЭлементСопоставления.НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса) Тогда
			
			НовоеДействие = Новый Структура("Действие,ЭлементСопоставления", "ЗагрузитьИзСервиса", ЭлементСопоставления);
			Представление = НСтр("ru = 'Загрузить из 1С:Номенклатура'");
			СписокДействий.Добавить(НовоеДействие, Представление, , БиблиотекаКартинок["ДобавитьРаботаСНоменклатурой"]);
			
		Иначе
			
			НовоеДействие = Новый Структура("Действие,ЭлементСопоставления", "ПодобратьИзСервиса", ЭлементСопоставления);
			Представление = НСтр("ru = 'Подобрать из 1С:Номенклатура'");
			СписокДействий.Добавить(НовоеДействие, Представление, , БиблиотекаКартинок["ИконкаБелыйФонРаботаСНоменклатурой"]);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВариантыСопоставленияХарактеристикИУпаковок(Знач КлючЗаписи, Знач АдресТаблицыВариантовСопоставления)
	
	Если ЭтоАдресВременногоХранилища(АдресТаблицыВариантовСопоставления) Тогда
		ТаблицаВариантовСопоставления = ПолучитьИзВременногоХранилища(АдресТаблицыВариантовСопоставления);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаВариантовСопоставления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтрокиВариантовСопоставления = ТаблицаВариантовСопоставления.НайтиСтроки(КлючЗаписи);
	
	Если ЗначениеЗаполнено(СтрокиВариантовСопоставления) Тогда
		
		СтруктураДанных = Новый Структура;
		
		Если СтрокиВариантовСопоставления[0].ВариантыСопоставленияХарактеристики.Количество() Тогда
			СтруктураДанных.Вставить("ВариантыСопоставленияХарактеристики", СтрокиВариантовСопоставления[0].ВариантыСопоставленияХарактеристики);
		КонецЕсли;
		Если СтрокиВариантовСопоставления[0].ВариантыСопоставленияУпаковки.Количество() Тогда
			СтруктураДанных.Вставить("ВариантыСопоставленияУпаковки", СтрокиВариантовСопоставления[0].ВариантыСопоставленияУпаковки);
		КонецЕсли;
		
		Возврат СтруктураДанных;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Функция ЭтоЭлементСопоставления(Знач ПроверяемоеЗначение)
	
	Если ТипЗнч(ПроверяемоеЗначение) = Тип("Структура") Тогда
		
		Если ПроверяемоеЗначение.Свойство("НоменклатураКонтрагента") 
			И ПроверяемоеЗначение.Свойство("НоменклатураИБ") Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ТекущийЭлементСопоставления()
	
	Запись = Элементы.Сопоставление.ТекущиеДанные;
	Если Запись = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЭлементСопоставленияПоЗаписи(Запись);
	
КонецФункции

&НаСервере
Функция ПолучитьЭлементыСопоставления(Знач Отбор = Неопределено, Режим = "Полный")
	
	ЗаписиСопоставления = Объект.Сопоставление;
	Если ЗначениеЗаполнено(Отбор) Тогда
		Если ТипЗнч(Отбор) = Тип("Структура") Тогда
			ЗаписиСопоставления = Объект.Сопоставление.НайтиСтроки(Отбор);
		ИначеЕсли ТипЗнч(Отбор) = Тип("Массив") Тогда
			ЗаписиСопоставления = Отбор;
		КонецЕсли;
	КонецЕсли;
	
	ВыбранныеЭлементыСопоставления = Новый Массив;
	
	Для Каждого Запись Из ЗаписиСопоставления Цикл
		
		ЭлементСопоставления = ЭлементСопоставленияПоЗаписи(Запись);
		
		Если Режим = "НоменклатураКонтрагента" Тогда
			ВыбранныеЭлементыСопоставления.Добавить(ЭлементСопоставления.НоменклатураКонтрагента);
		Иначе
			ВыбранныеЭлементыСопоставления.Добавить(ЭлементСопоставления);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыбранныеЭлементыСопоставления;
	
КонецФункции

&НаСервере
Процедура УстановитьПризнакСопоставленияСтрокамСопоставления()
	
	Для Каждого Запись Из Объект.Сопоставление Цикл
		Запись.Сопоставлено = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЭлементыСопоставленияНоменклатуры(Знач ЭлементыСопоставления, Знач СозданиеЭлементов = Истина)
	
	Если ТипЗнч(ЭлементыСопоставления) <> Тип("Массив") Тогда
		ЭлементыСопоставления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ЭлементыСопоставления);
	КонецЕсли;
	
	НаборНоменклатурыКонтрагента = Новый Массив;
	ТребуетсяПоискВариантов = Ложь;
	НаборНоменклатурИБ      = Новый Массив;
	ДанныеДляОбработки      = Новый Массив;
	Для Каждого Элемент Из ЭлементыСопоставления Цикл
		
		Если НЕ СозданиеЭлементов Тогда
			ЗаполнитьСопоставлениеИзВариантов(Элемент);
			Если НЕ Элемент.ПоискВариантовНеТребуется Тогда
				ТребуетсяПоискВариантов = Истина;
			КонецЕсли;
		Иначе
			ТребуетсяПоискВариантов = Истина;
		КонецЕсли;

		ПараметрыОтбора = Новый Структура("Владелец,Идентификатор");
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Элемент.НоменклатураКонтрагента);
		ИзменитьЗаписиСопоставленияНоменклатуры(Элемент, ПараметрыОтбора, ТребуетсяПоискВариантов, НаборНоменклатурыКонтрагента);
		
		НаборНоменклатурИБ.Добавить(Элемент.НоменклатураИБ.Номенклатура);
		ДанныеДляОбработки.Добавить(Элемент);
			
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборНоменклатурИБ) Тогда
		
		СвойстваНоменклатурИБ = ОбменСКонтрагентамиСлужебный.СвойстваНоменклатурыИнформационнойБазы(НаборНоменклатурИБ);
		
		Для Каждого Элемент Из ДанныеДляОбработки Цикл
			Свойства = СвойстваНоменклатурИБ.Получить(Элемент.НоменклатураИБ.Номенклатура);
			Если Свойства <> Неопределено Тогда
				
				Если Свойства.ИспользоватьХарактеристики Тогда
					
					ТребуетсяПоискВариантов = Истина;
					
					ПараметрыОтбора = Новый Структура("Владелец,ИдентификаторНоменклатуры,Номенклатура");
					ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Элемент.НоменклатураКонтрагента);
					ПараметрыОтбора.Номенклатура = ПустаяНоменклатураБЭД;
					ИзменитьЗаписиСопоставленияНоменклатуры(Элемент, ПараметрыОтбора, ТребуетсяПоискВариантов, НаборНоменклатурыКонтрагента, Свойства);
					
				КонецЕсли;
				
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Если ТребуетсяПоискВариантов Тогда
		НачатьПоискВариантов(НаборНоменклатурыКонтрагента, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаписиСопоставленияНоменклатуры(Элемент, ПараметрыОтбора,ТребуетсяПоискВариантов, НаборНоменклатурыКонтрагента, Свойства = Неопределено)
	
	ЗаписиСопоставления = Объект.Сопоставление.НайтиСтроки(ПараметрыОтбора);
	
	ЕстьДополнительныеПоля = Элемент.Свойство("ПодсказкаНайденныхВариантовНоменклатуры");
	
	Для Каждого Запись Из ЗаписиСопоставления Цикл
		
		Если Свойства <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Запись, Свойства);
		КонецЕсли;
		
		Запись.Номенклатура                            = Элемент.НоменклатураИБ.Номенклатура;
		Запись.ПоискВариантовНеТребуется               = НЕ ТребуетсяПоискВариантов;
		Запись.ПодсказкаНайденныхВариантовНоменклатуры = ?(ЕстьДополнительныеПоля, Элемент.ПодсказкаНайденныхВариантовНоменклатуры, "");
		
		Если Запись.ИдентификаторУпаковки = Элемент.НоменклатураКонтрагента.ИдентификаторУпаковки Тогда
			Запись.Упаковка                            = Элемент.НоменклатураИБ.Упаковка;
			Запись.ПодсказкаНайденныхВариантовУпаковки = ?(ЕстьДополнительныеПоля, Элемент.ПодсказкаНайденныхВариантовУпаковки, "");
		КонецЕсли;
		Если Запись.ИдентификаторХарактеристики = Элемент.НоменклатураКонтрагента.ИдентификаторХарактеристики Тогда
			Запись.Характеристика                            = Элемент.НоменклатураИБ.Характеристика;
			Запись.ПодсказкаНайденныхВариантовХарактеристики = ?(ЕстьДополнительныеПоля, Элемент.ПодсказкаНайденныхВариантовХарактеристики, "");
		КонецЕсли;
		
		ОбработатьЗаписьСопоставления(Запись);
		
		Если ТребуетсяПоискВариантов Тогда
			НоменклатураКонтрагента = НоменклатураКонтрагентаПоЗаписиСопоставления(Запись);
			НаборНоменклатурыКонтрагента.Добавить(НоменклатураКонтрагента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗаписьСопоставления(Запись, СвойстваНоменклатурИБ = Неопределено)
	
	Модифицированность = Истина;
	
	ЗаписьСопоставлено = Запись.Сопоставлено;
	
	Обработки.СопоставлениеНоменклатурыБЭД.ЗаполнитьПризнакСопоставления(Запись, СвойстваНоменклатурИБ);
		
	Если ЗаписьСопоставлено <> Запись.Сопоставлено Тогда
		УстановитьСвойстваЭлементаОтбораПоСопоставлению();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СохранитьСопоставление()
	
	ОтборЭлементовДляСохранения = Новый Структура("Сопоставлено,Сохранено", Истина, Ложь);
	
	Если РазрешитьСохранение Тогда
		
		ЭлементыДляСохранения = ПолучитьЭлементыСопоставления(ОтборЭлементовДляСохранения);
		
		Отказ       = Ложь;
		ТекстОшибки = "";
		
		Для Каждого Элемент Из ЭлементыДляСохранения Цикл
			
			ОбменСКонтрагентамиСлужебный.УстановитьСоответствиеНоменклатуры(
				Элемент.НоменклатураКонтрагента, Элемент.НоменклатураИБ, Элемент.ИспользоватьХарактеристики, Истина);
				
			ОбменСКонтрагентамиПереопределяемый.ПриСохраненииСопоставленияНоменклатурыКонтрагентов(Элемент.НоменклатураКонтрагента, Элемент.НоменклатураИБ, Отказ, ТекстОшибки);
			
			Если Отказ Тогда
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
				КонецЕсли;
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СохраненныеЗаписи = Объект.Сопоставление.НайтиСтроки(ОтборЭлементовДляСохранения);
	
	Для Каждого Запись Из СохраненныеЗаписи Цикл
		
		Запись.Сохранено = Истина;
		
	КонецЦикла;
	
	ОтборСохраненныхЭлементов = Новый Структура("Сопоставлено,Сохранено", Истина,Истина);
	СохраненныеЭлементы = ПолучитьЭлементыСопоставления(ОтборСохраненныхЭлементов);
	
	Модифицированность = Ложь;
	
	Возврат СохраненныеЭлементы;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОСохраненииПередЗакрытием()
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОСохраненииПередЗакрытием", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	Если НЕ РазрешитьСохранение Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Применить изменения?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОСохраненииПередЗакрытием(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СохраненныеЭлементы = СохранитьСопоставление();
		
		Если СохраненныеЭлементы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Закрыть(СохраненныеЭлементы);
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		Модифицированность = Ложь;
		
		УстановитьПризнакСопоставленияСтрокамСопоставления();
		Если РазрешитьСохранение Тогда
			Закрыть(СохраненныеЭлементы);
		Иначе
			Закрыть();
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОЗапускаТочностиПоиска(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПолныйПоиск = Истина;
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ПолныйПоиск = Ложь;
	Иначе
		ТочностьПоиска = ТочностьПоискаДоИзменения;
		Возврат;
	КонецЕсли;
	
	ТочностьПоискаДоИзменения = ТочностьПоиска;
	
	ПовторныйПоиск = Истина;
	ЗапуститьПоискВариантов(ПолныйПоиск);
	
	ОжидатьЗавершениеПоискаВариантов(ИспользоватьСервис, ПолныйПоиск);

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросОСопоставленииПередЗакрытием()
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОСопоставленииПередЗакрытием", ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru = 'Сопоставлены не все позиции номенклатуры. Закрыть помощник сопоставления?'");
	
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОСопоставленииПередЗакрытием(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		УстановитьПризнакСопоставленияСтрокамСопоставления();
		Закрыть(СохраненныеЭлементы);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораНоменклатурыИнформационнойБазы(Знач ЭлементСопоставления)
	
	ПараметрыФормы = Новый Структура;
		
	ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.УстановитьСвойствоСтруктуры(
		ПараметрыФормы, "ДополнительныеПараметры.ОбменСКонтрагентами.НоменклатураКонтрагента", ЭлементСопоставления.НоменклатураКонтрагента);
		
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуВыбораНоменклатуры(
		ПараметрыФормы, Элементы.СопоставлениеНоменклатура, ЭлементСопоставления);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуруКонтрагентов(НаборНоменклатурыКонтрагентов)
	
	Объект.Сопоставление.Очистить();
	
	НаборНоменклатурИБ = Новый Массив;
	
	Для Каждого НоменклатураКонтрагента Из НаборНоменклатурыКонтрагентов Цикл
		
		НоваяЗапись = Объект.Сопоставление.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, НоменклатураКонтрагента);
		НоваяЗапись.НаименованиеХарактеристики = НоменклатураКонтрагента.Характеристика;
		
		Если ЗначениеЗаполнено(НоваяЗапись.Номенклатура) Тогда
			НаборНоменклатурИБ.Добавить(НоваяЗапись.Номенклатура);
		Иначе
			ОбработатьЗаписьСопоставления(НоваяЗапись);
		КонецЕсли;
				
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НаборНоменклатурИБ) Тогда
		СвойстваНоменклатурИБ = ОбменСКонтрагентамиСлужебный.СвойстваНоменклатурыИнформационнойБазы(НаборНоменклатурИБ);
		Для Каждого Запись Из Объект.Сопоставление Цикл
			ОбработатьЗаписьСопоставления(Запись, СвойстваНоменклатурИБ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СопоставлениеПриИзмененииНаСервере(Знач ИмяЭлемента)
	
	ТекущаяСтрока = Элементы.Сопоставление.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запись = Объект.Сопоставление.НайтиПоИдентификатору(ТекущаяСтрока);
	
	СвойстваНоменклатурыИБ = ОбменСКонтрагентамиСлужебный.СвойстваНоменклатурыИнформационнойБазы(Запись.Номенклатура);
	
	Если ИмяЭлемента = "СопоставлениеНоменклатура" Тогда
		Если ЗначениеЗаполнено(Запись.Номенклатура) Тогда
			ЭлементСопоставления = ЭлементСопоставленияПоЗаписи(Запись);
			ОбработатьЭлементыСопоставленияНоменклатуры(ЭлементСопоставления, Ложь);
		Иначе
			Запись.Характеристика = ПустаяСсылкаХарактеристикиБЭД;
			Запись.Упаковка       = ПустаяСсылкаУпаковкиНоменклатурыБЭД;
			ОбработатьЗаписьСопоставления(Запись, СвойстваНоменклатурыИБ);
		КонецЕсли;
	Иначе
		Если ИмяЭлемента = "СопоставлениеХарактеристика"
			И ЗначениеЗаполнено(Запись.Характеристика) Тогда
			ОбработатьЭлементыСопоставленияХарактеристики(Запись);
		ИначеЕсли ИмяЭлемента = "СопоставлениеУпаковка"
			И ЗначениеЗаполнено(Запись.Упаковка) Тогда
			ОбработатьЭлементыСопоставленияУпаковки(Запись);
		КонецЕсли;
		ОбработатьЗаписьСопоставления(Запись, СвойстваНоменклатурыИБ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСопоставлениеИзВариантов(Запись)
	
	Если ЭтоАдресВременногоХранилища(АдресТаблицыВариантовСопоставления) Тогда
		ТаблицаВариантовСопоставления = ПолучитьИзВременногоХранилища(АдресТаблицыВариантовСопоставления);
	Иначе
		Возврат;
	КонецЕсли;

	НоменклатураИБ = Запись.НоменклатураИБ;
	
	КлючЗаписи = Новый Структура("Владелец,Идентификатор,Номенклатура");
	ЗаполнитьЗначенияСвойств(КлючЗаписи, Запись.НоменклатураКонтрагента);
	КлючЗаписи.Номенклатура = НоменклатураИБ.Номенклатура;

	НайденныеСтроки = ТаблицаВариантовСопоставления.НайтиСтроки(КлючЗаписи);
	
	Если ЗначениеЗаполнено(НайденныеСтроки)
		И ЗначениеЗаполнено(НайденныеСтроки[0].Номенклатура) Тогда
		НоменклатураИБ.Характеристика    = НайденныеСтроки[0].Характеристика;
		НоменклатураИБ.Упаковка          = НайденныеСтроки[0].Упаковка;
		Запись.ПоискВариантовНеТребуется = НайденныеСтроки[0].ПоискВариантовНеТребуется;
	Иначе
		Запись.ПоискВариантовНеТребуется = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПереданыИдентификаторыНоменклатурыСервиса()
	
	Для Каждого ДанныеСопоставления Из Объект.Сопоставление Цикл
		Если НЕ ПустаяСтрока(ДанныеСопоставления.ИдентификаторНоменклатурыСервиса) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ОбработатьЭлементыСопоставленияУпаковки(Знач ЭлементСопоставления)
	
	ВладелецНоменклатура = Ложь;
	ОбменСКонтрагентамиПереопределяемый.ВладелецУпаковкиЕдиницыИзмеренияНоменклатура(ЭлементСопоставления.Упаковка, ВладелецНоменклатура);

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец"             , ЭлементСопоставления.Владелец);
	ПараметрыОтбора.Вставить("ИдентификаторУпаковки", ЭлементСопоставления.ИдентификаторУпаковки);
	ЗаписиСопоставления = Объект.Сопоставление.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого Запись Из ЗаписиСопоставления Цикл
		
		Если ЗначениеЗаполнено(Запись.Упаковка)
			ИЛИ НЕ ЗначениеЗаполнено(Запись.Номенклатура)
			ИЛИ Запись.ИспользоватьУпаковки И ВладелецНоменклатура
			И Запись.Номенклатура <> ЭлементСопоставления.Номенклатура Тогда
			Продолжить;
		КонецЕсли;
		
		Запись.Упаковка = ЭлементСопоставления.Упаковка;
		ОбработатьЗаписьСопоставления(Запись);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьЭлементыСопоставленияХарактеристики(Знач ЭлементСопоставления)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец"                   , ЭлементСопоставления.Владелец);
	Запрос.УстановитьПараметр("ИдентификаторХарактеристики", ЭлементСопоставления.ИдентификаторХарактеристики);
	Запрос.УстановитьПараметр("ПустаяНоменклатура"         , ПустаяНоменклатураБЭД);
	Запрос.УстановитьПараметр("Характеристика"             , ЭлементСопоставления.Характеристика);
	Запрос.УстановитьПараметр("ПустаяХарактеристика"       , ПустаяСсылкаХарактеристикиБЭД);
	Запрос.УстановитьПараметр("НоменклатураКонтрагента"    , Объект.Сопоставление.Выгрузить());

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НоменклатураКонтрагента.Номенклатура КАК НоменклатураИБ,
		|	НоменклатураКонтрагента.Идентификатор КАК Идентификатор,
		|	НоменклатураКонтрагента.Владелец КАК Владелец
		|ПОМЕСТИТЬ ТаблицаСопоставления
		|ИЗ
		|	&НоменклатураКонтрагента КАК НоменклатураКонтрагента
		|ГДЕ
		|	НоменклатураКонтрагента.ИдентификаторХарактеристики = &ИдентификаторХарактеристики
		|	И НоменклатураКонтрагента.Владелец = &Владелец
		|	И НоменклатураКонтрагента.Характеристика = &ПустаяХарактеристика
		|	И НоменклатураКонтрагента.Номенклатура <> &ПустаяНоменклатура
		|	И НоменклатураКонтрагента.ИспользоватьХарактеристики
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НоменклатураКонтрагента.Номенклатура,
		|	Идентификатор";
	
	ТекстЗапроса = "";
	ОбменСКонтрагентамиПереопределяемый.ТекстЗапросаОтбораСтрокСопоставленияДляЗаполненияХарактеристик(ТекстЗапроса);
		
	Запрос.Текст = Запрос.Текст + ОбщегоНазначения.РазделительПакетаЗапросов() + ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Владелец", ЭлементСопоставления.Владелец);

	Пока Выборка.Следующий() Цикл
		
		ПараметрыОтбора.Вставить("Идентификатор", Выборка.Идентификатор);
		НайденныеСтроки = Объект.Сопоставление.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.Характеристика = ЭлементСопоставления.Характеристика;
			ОбработатьЗаписьСопоставления(Строка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОПерезаполнениеСловаря(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ.Значение = КодВозвратаДиалога.ОК Тогда
		
		УстановитьРежимПерезаполненияСловаря(Истина);
		
		ПараметрыПроцедуры = Новый Структура;
		
		ОперацияПерезаполненияСловаря = 
			ОбменСКонтрагентамиСлужебныйВызовСервера.ЗапуститьПерезаполнениеСловаряСопоставленияНоменклатурыВФоне(
				Новый УникальныйИдентификатор, ПараметрыПроцедуры);
		
		ОбработкаЗавершенияПерезаполненияСловаря = Новый ОписаниеОповещения("ЗавершитьПерезаполнениеСловаря", ЭтотОбъект);
		
		ПараметрыОжидания                                 = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьПрогрессВыполнения      = Ложь;
		ПараметрыОжидания.ВыводитьОкноОжидания            = Ложь;
		ПараметрыОжидания.ОповещениеПользователя.Показать = Ложь;
		ПараметрыОжидания.ВыводитьСообщения               = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ОперацияПерезаполненияСловаря, ОбработкаЗавершенияПерезаполненияСловаря, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПерезаполнениеСловаря(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьРежимПерезаполненияСловаря(Ложь);
	
	Если Результат <> Неопределено Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Если РезультатВыполнения.Свойство("ВыполненоСОшибками") Тогда
			Если РезультатВыполнения.ВыполненоСОшибками Тогда
				ТекстСообщения = НСтр("ru = 'При перезаполнении словаря сопоставления произошли ошибки. Подробнее см. в журнале регистрации.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Иначе
				ТекстСообщения = НСтр("ru = 'Перезаполнение словаря выполнено успешно.'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимПерезаполненияСловаря(ОжиданиеВыполнения)
	
	Элементы.ГруппаОтображенияСопоставления.ТекущаяСтраница = ?(ОжиданиеВыполнения, Элементы.СтраницаОжиданияПерезаполненияСловаря, Элементы.ГруппаСопоставление);
	Элементы.КомандаСохранитьИЗакрыть.Доступность           = НЕ ОжиданиеВыполнения;
	Элементы.КомандаСохранить.Доступность                   = НЕ ОжиданиеВыполнения;
	Элементы.КомандаНайти.Доступность                       = НЕ ОжиданиеВыполнения;
	Элементы.КомандаОтменитьПоиск.Доступность               = НЕ ОжиданиеВыполнения;
	Элементы.КомандаСоздатьНоменклатуру.Доступность         = НЕ ОжиданиеВыполнения;
		
КонецПроцедуры


#КонецОбласти

#Область СозданиеНоменклатуры

&НаСервереБезКонтекста
Функция ЕстьПравоДобавленияНоменклатуры()
	
	ЕстьПраво = Истина;
	
	Для каждого ТипНоменклатуры Из Метаданные.ОпределяемыеТипы.НоменклатураБЭД.Тип.Типы() Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипНоменклатуры);
		Если МетаданныеТипа = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЕстьПравоДобавления = ПравоДоступа("Добавление", МетаданныеТипа);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ЕстьПраво = ЕстьПраво И ЕстьПравоДобавления;
		
	КонецЦикла;
	
	Возврат ЕстьПраво;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьВопросОСозданииНоменклатуры(Знач НаборЭлементовСопоставления)
	
	Если ТипЗнч(НаборЭлементовСопоставления) <> Тип("Массив") Тогда
		НаборЭлементовСопоставления = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НаборЭлементовСопоставления);
	КонецЕсли;
	
	КоличествоСтрок = НаборЭлементовСопоставления.Количество();
	
	ТекстВопроса = "";
	
	Если КоличествоСтрок = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru = 'Для создания номенклатуры необходимо выбрать хотя бы одну строку.'"));
		Возврат;
		
	ИначеЕсли КоличествоСтрок = 1 Тогда
	
		ТекстВопроса = НСтр("ru = 'Создать номенклатуру для выбранной строки?'");
		
	Иначе
		
		ТекстВопроса = НСтр("ru = 'Создать номенклатуру для выбранных строк?'");
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("НаборЭлементовСопоставления", НаборЭлементовСопоставления);
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОСозданииНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОСозданииНоменклатуры(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьНоменклатуруИнформационнойБазы(ДополнительныеПараметры.НаборЭлементовСопоставления);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруИнформационнойБазы(Знач НаборЭлементовСопоставления)
	
	// Пробуем создать номенклатуру автоматически.
	
	ПараметрыОбработки = Новый Структура("НаборЭлементовСопоставления", НаборЭлементовСопоставления);
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗакончитьСозданиеНоменклатурыИнформационнойБазыАвтоматически", ЭтотОбъект, ПараметрыОбработки);
	
	НачатьСозданиеНоменклатурыИнформационнойБазыАвтоматически(НаборЭлементовСопоставления, ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеНоменклатурыИнформационнойБазыАвтоматически(Знач НаборЭлементовСопоставления, ОбработкаЗавершения)
	
	НаборНоменклатурыКонтрагентов = Новый Массив;
	Для Каждого ЭлементСопоставления Из НаборЭлементовСопоставления Цикл
		НаборНоменклатурыКонтрагентов.Добавить(ЭлементСопоставления.НоменклатураКонтрагента);
	КонецЦикла;
	
	ОбменСКонтрагентамиСлужебныйКлиент.НачатьСозданиеНоменклатурыПоДаннымКонтрагента(НаборНоменклатурыКонтрагентов, ОбработкаЗавершения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьСозданиеНоменклатурыИнформационнойБазыАвтоматически(Знач СозданныеЭлементы, Знач ДополнительныеПараметры) Экспорт
	
	НаборЭлементовСопоставления = ДополнительныеПараметры.НаборЭлементовСопоставления;

	Если ЗначениеЗаполнено(СозданныеЭлементы) Тогда
		ОбработатьЭлементыСопоставленияНоменклатуры(СозданныеЭлементы);
		
		ОжидатьЗавершениеПоискаВариантов(Ложь);

	КонецЕсли;
	
	// Если создать номенклатуру автоматически не получилось
	// и выбрана только одна строка,
	// то предлагаем создать ее вручную.
	
	ВсегоЭлементов = НаборЭлементовСопоставления.Количество();
	СозданоЭлементов = СозданныеЭлементы.Количество();
	
	Если СозданоЭлементов = 0 И ВсегоЭлементов = 1 Тогда
		
		НачатьСозданиеНоменклатурыИнформационнойБазыВручную(НаборЭлементовСопоставления);
		
	ИначеЕсли ВсегоЭлементов <> СозданоЭлементов Тогда
		
		ТекстСообщения = НСтр("ru = 'Данных контрагента недостаточно для группового создания номенклатуры.'") + Символы.ПС
			+ НСтр("ru = 'Выберите одну строку и повторите попытку.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьСозданиеНоменклатурыИнформационнойБазыВручную(Знач НаборЭлементовСопоставления)
	
	Для Каждого ЭлементСопоставления Из НаборЭлементовСопоставления Цикл
		
		ПараметрыФормы = Новый Структура;
		
		ЭлектронноеВзаимодействиеСлужебныйКлиентСервер.УстановитьСвойствоСтруктуры(
			ПараметрыФормы, "ДополнительныеПараметры.ОбменСКонтрагентами.НоменклатураКонтрагента", ЭлементСопоставления.НоменклатураКонтрагента);
		
		// Передадим через ОписаниеОповещения элемент сопоставления для анализа в обработчике события СопоставлениеОбработкаЗаписиНового.
		ОбработкаЗакрытия = Новый ОписаниеОповещения("ПослеЗакрытияФормыСозданияНоменклатурыВручную", ЭтотОбъект, ЭлементСопоставления);
		ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуНоменклатуры(ПараметрыФормы, Элементы.Сопоставление, ЭлементСопоставления, ОбработкаЗакрытия);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьСозданиеНоменклатурыИнформационнойБазыВручную(Знач ЭлементСопоставления, Знач НоваяНоменклатура)
	
	НоменклатураИБ = ОбменСКонтрагентамиСлужебныйКлиентСервер.НоваяНоменклатураИнформационнойБазы(НоваяНоменклатура);
	ЭлементСопоставления.НоменклатураИБ = НоменклатураИБ;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыСозданияНоменклатурыВручную(Знач Результат, Знач ЭлементСопоставления) Экспорт
	
	Если ЭлементСопоставления.НоменклатураИБ.Номенклатура = ПустаяНоменклатураБЭД Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьЭлементыСопоставленияНоменклатуры(ЭлементСопоставления);
	
	ОжидатьЗавершениеПоискаВариантов(Ложь);

КонецПроцедуры

#КонецОбласти

#Область РаботаССервисом

&НаКлиенте
Процедура ПоказатьПодборИзСервиса(Знач ЭлементСопоставления) 
	
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
	
	ПараметрыФормыЗагрузки = МодульРаботаСНоменклатуройКлиент.ПараметрыФормыЗагрузкиНоменклатуры();
	ПараметрыФормыЗагрузки.СтрокаПоиска = ЭлементСопоставления.НоменклатураКонтрагента.Наименование;
	ПараметрыФормыЗагрузки.РежимВыбораНоменклатуры = Истина;
	ПараметрыФормыЗагрузки.СоздаватьНоменклатуруПриВыборе = Истина;
	ПараметрыФормыЗагрузки.ПодтверждатьСозданиеНоменклатуры = Истина;
	
	ПараметрыОбработки = Новый Структура("ЭлементСопоставления", ЭлементСопоставления);
	ОбработкаЗавершенияПодбора = Новый ОписаниеОповещения("ОбработатьПодборИзСервиса", ЭтотОбъект, ПараметрыОбработки);
	
	МодульРаботаСНоменклатуройКлиент.ОткрытьФормуЗагрузкиНоменклатуры(
		ПараметрыФормыЗагрузки, ЭтотОбъект, ОбработкаЗавершенияПодбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПодборИзСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Результат.ВыбранныеОбъекты) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСопоставлениеДаннымиИзСервиса(Результат.ВыбранныеОбъекты[0], ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗагрузкуНоменклатуруИзСервиса(Знач ЭлементСопоставления) 
	
	Если НЕ ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторНоменклатурыСервиса = ЭлементСопоставления.НоменклатураКонтрагента.ИдентификаторНоменклатурыСервиса;
	ИдентификаторХарактеристикиСервиса = ЭлементСопоставления.НоменклатураКонтрагента.ИдентификаторХарактеристикиСервиса;
	Если НЕ ЗначениеЗаполнено(ИдентификаторНоменклатурыСервиса) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСервиса = Новый Структура;
	ИдентификаторСервиса.Вставить("ИдентификаторНоменклатуры", ИдентификаторНоменклатурыСервиса);
	ИдентификаторСервиса.Вставить("ИдентификаторХарактеристики", ИдентификаторХарактеристикиСервиса);
	НаборИдентификаторовСервиса = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторСервиса);
	
	Попытка
		
		МодульРаботаСНоменклатуройКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСНоменклатуройКлиент");
		
		ПараметрыОбработки = Новый Структура("ЭлементСопоставления", ЭлементСопоставления);
		ОбработкаЗавершенияЗагрузки = Новый ОписаниеОповещения("ЗакончитьЗагрузкуНоменклатурыИзСервиса", ЭтотОбъект, ПараметрыОбработки);
		
		МодульРаботаСНоменклатуройКлиент.ЗагрузитьНоменклатуруИХарактеристики(
			ОбработкаЗавершенияЗагрузки, НаборИдентификаторовСервиса, ЭтотОбъект);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось загрузить номенклатуру из сервиса 1С:Номенклатура по причине:'")
			+ Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьЗагрузкуНоменклатурыИзСервиса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Результат.НовыеЭлементы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСопоставлениеДаннымиИзСервиса(Результат.НовыеЭлементы[0], ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСопоставлениеДаннымиИзСервиса(ВыбранныйЭлемент, ДополнительныеПараметры)
	
	Если ЗначениеЗаполнено(ВыбранныйЭлемент.Номенклатура) Тогда
		
		ЭлементСопоставления = ДополнительныеПараметры.ЭлементСопоставления;
		ЭлементСопоставления.НоменклатураИБ.Номенклатура = ВыбранныйЭлемент.Номенклатура;
		Если ЗначениеЗаполнено(ВыбранныйЭлемент.Характеристика) Тогда
			ЭлементСопоставления.НоменклатураИБ.Характеристика = ВыбранныйЭлемент.Характеристика;
		КонецЕсли;
		
		ОбработатьЭлементыСопоставленияНоменклатуры(ЭлементСопоставления);
		
		ОжидатьЗавершениеПоискаВариантов(Ложь);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботаСНоменклатуройПодсказкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТребуетсяПересчетВариантов = Ложь;
	РаботаСНоменклатуройПодсказкаЗавершениеНаСервере(ТребуетсяПересчетВариантов);
		
	Если ТребуетсяПересчетВариантов Тогда
		
		ТекстВопроса = НСтр("ru = 'Подключен сервис 1С:Номенклатура. Выполнить поиск вариантов сопоставления?'");
		
		ВывестиВопросПовторногоПоискаВариантов(ТекстВопроса);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РаботаСНоменклатуройПодсказкаЗавершениеНаСервере(ТребуетсяПересчетВариантов)
	
	ТекущееЗначениеИспользованияСервиса = ИспользоватьСервис;
	ОпределитьИспользованиеСервисаНоменклатуры();
	УстановитьСвойстваЭлементовНоменклатурыСервиса();
	
	ТребуетсяПересчетВариантов = ТекущееЗначениеИспользованияСервиса <> ИспользоватьСервис;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиВопросПовторногоПоискаВариантов(ТекстВопроса)
	
	ОбработкаОтвета = Новый ОписаниеОповещения("ОбработатьВопросОЗапускаТочностиПоиска", ЭтотОбъект);
	
	СписокВариантов = Новый СписокЗначений;
	СписокВариантов.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Для всех позиций'"));
	СписокВариантов.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Только для незаполненных'"));
	СписокВариантов.Добавить(КодВозвратаДиалога.Отмена);
	
	ПоказатьВопрос(ОбработкаОтвета, ТекстВопроса, СписокВариантов, , КодВозвратаДиалога.Отмена);

КонецПроцедуры

&НаСервере
Процедура ОчиститьНайденныеВариантыСопоставленияПриПовторномПолномПоиске(ПолныйПоиск)
	
	Если ПовторныйПоиск И ПолныйПоиск
		И Объект.Сопоставление.Количество() Тогда
		
		АдресТаблицыВариантовСопоставления = "";
		
		Для Каждого Запись Из Объект.Сопоставление Цикл
			
			Запись.Номенклатура   = ПустаяНоменклатураБЭД;
			Запись.Характеристика = ПустаяСсылкаХарактеристикиБЭД;
			Запись.Упаковка       = ПустаяСсылкаУпаковкиНоменклатурыБЭД;
			
			Запись.ПодсказкаНайденныхВариантовХарактеристики = "";
			Запись.ПодсказкаНайденныхВариантовУпаковки       = "";
			Запись.ПодсказкаНайденныхВариантовНоменклатуры   = "";
			Запись.КоличествоВариантовНоменклатуры           = 0;
			Запись.ПоискВариантовНеТребуется                 = Ложь;
			Запись.Сопоставлено                              = Ложь;
			Запись.ИспользоватьХарактеристики                = Ложь;
			Запись.ИспользоватьУпаковки                      = Ложь;
			Запись.ОбязательноеЗаполнениеХарактеристики      = Ложь;
			Запись.Упаковка                                  = Ложь;
			Запись.Сохранено                                 = Ложь;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры


#КонецОбласти

#Область ПереопределениеФормы

&НаКлиентеНаСервереБезКонтекста
Функция КонтекстФормы(ЭтотОбъект, Элемент = Неопределено)
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", ЭтотОбъект);
	Контекст.Вставить("Назначение", "СопоставлениеНоменклатуры");
	Контекст.Вставить("Префикс", "_");
	Контекст.Вставить("СтандартныйЭлемент", Неопределено);
	
	Если Элемент = ЭтотОбъект.Элементы.СопоставлениеХарактеристика Тогда
		Контекст.Вставить("СтандартныйЭлемент", "Характеристика");
	ИначеЕсли Элемент = ЭтотОбъект.Элементы.СопоставлениеУпаковка Тогда
		Контекст.Вставить("СтандартныйЭлемент", "Упаковка");
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(Контекст);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЭлементПриИзменении(Элемент)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыПриИзменении(Контекст, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыНачалоВыбора(
		Контекст, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыНачалоВыбораИзСписка(
		Контекст, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементОчистка(Элемент, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыОчистка(
		Контекст, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементСоздание(Элемент, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыСоздание(
		Контекст, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыОбработкаВыбора(
		Контекст, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыИзменениеТекстаРедактирования(
		Контекст, Элемент, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыАвтоПодбор(
		Контекст, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыОкончаниеВводаТекста(
		Контекст, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементНажатие(Элемент)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыНажатие(
		Контекст, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЭлементОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Элемент);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.ЭлементФормыПодсистемыОбработкаНавигационнойСсылки(
		Контекст, Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КомандаДействие(Команда)
	
	Контекст = КонтекстФормы(ЭтотОбъект, Команда);
	
	ОбменСКонтрагентамиКлиентПереопределяемый.КомандаФормыПодсистемыДействие(Контекст, Команда);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти


