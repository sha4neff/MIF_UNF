#Область ПеременныеМодуля

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытий

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияПодсистемы=ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ("КП_Процессы");
	
	УстановитьОформлениеЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбновитьИнтерфейсПрограммы();
	
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПолучитьВерсиюПодсистемыСервером();	
КонецПроцедуры

// Подключаемая процедура при изменении реквизита
// Параметры:
//	Элемент - элемент
//	ОбновлятьИнтерфейс - флаг обновления интерфейса
&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если Результат.Свойство("ТекстОшибки") Тогда
		
		// Нет возможности использовать ОбщегоНазначенияКлиентСервер.СообщитьПользователю, 
		// так как требуется передать UID формы
		ПользовательскоеСообщение = Новый СообщениеПользователю;
		Результат.Свойство("Поле", ПользовательскоеСообщение.Поле);
		Результат.Свойство("ТекстОшибки", ПользовательскоеСообщение.Текст);
		ПользовательскоеСообщение.ИдентификаторНазначения = УникальныйИдентификатор;
		ПользовательскоеСообщение.Сообщить();
		
		ОбновлятьИнтерфейс = Ложь;
		
	КонецЕсли;
	
	Если ОбновлятьИнтерфейс Тогда
		#Если НЕ ВебКлиент Тогда
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		ОбновитьИнтерфейс = Истина;
		#КонецЕсли
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеФорм") Тогда
		Оповестить(Результат.ОповещениеФорм.ИмяСобытия, Результат.ОповещениеФорм.Параметр, Результат.ОповещениеФорм.Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	Если Результат.Свойство("ТекущееЗначение") Тогда
		
		// Откат значения к предыдущему
		ВернутьЗначениеРеквизитаФормы(РеквизитПутьКДанным, Результат.ТекущееЗначение);
		
	Иначе
		
		СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
		
		//УстановитьДоступность(РеквизитПутьКДанным);
		
		ОбновитьПовторноИспользуемыеЗначения();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		ОповещениеФорм = Новый Структура("ИмяСобытия, Параметр, Источник", "Запись_НаборКонстант", Новый Структура, КонстантаИмя);
		Результат.Вставить("ОповещениеФорм", ОповещениеФорм);
	КонецЕсли;
	
КонецПроцедуры

// Процедура присваивает переданое значение реквизиту формы
// Используется в случае, если новое значение не прошло проверку
&НаСервере
Процедура ВернутьЗначениеРеквизитаФормы(РеквизитПутьКДанным, ТекущееЗначение)
	
	Если РеквизитПутьКДанным = "НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Тогда
		
		ЭтаФорма.НаборКонстант.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата = ТекущееЗначение;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ФункциональнаяОпцияИспользоватьСовместительство" Тогда
		
		НаборКонстант.ФункциональнаяОпцияИспользоватьСовместительство = ТекущееЗначение;
		
	ИначеЕсли РеквизитПутьКДанным = "НаборКонстант.ФункциональнаяОпцияВестиУчетНалогаНаДоходы" Тогда
		
		НаборКонстант.ФункциональнаяОпцияВестиУчетНалогаНаДоходы = ТекущееЗначение;
		
	КонецЕсли;
	
КонецПроцедуры // ВернутьЗначениеРеквизитаФормы()

&НаКлиенте
Процедура КП_ЗапретитьИнициаторамКБПВыполнятьЗадачиЗаИсполнителяПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КП_ОсновнойКалендарьПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаСервере
Функция ПолучитьВерсиюПодсистемыСервером()
	Возврат ОбновлениеИнформационнойБазыСлужебный.ВерсияИБ("КП_Процессы");
КонецФункции

&НаКлиенте
Процедура КП_ОпцияИспользоватьРолевуюАдресациюПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСайтРазработчикаНажатие(Элемент)
	АдресСайта="https://kp-unf.ru";
	ЗапуститьПриложение(АдресСайта);
КонецПроцедуры

&НаКлиенте
Процедура КП_ТекущиеДелаПоказыватьАвтораПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КП_РазмещениеВТекущиеДелаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КП_ПоддержкаМобильногоКлиентаПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КП_ИспользоватьКалендарьЗадачПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура КП_ИспользоватьЦветовоеОформлениеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	Оповестить("КП_ИзменениеНастройкиЦвета");
КонецПроцедуры

&НаКлиенте
Процедура КП_ФункциональнаяОпцияИспользоватьПодсистемуПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);	
	УстановитьОформлениеЭлементов();
	ОбновитьИнтерфейс();
КонецПроцедуры

Процедура УстановитьОформлениеЭлементов()
	
	ПодсистемаВключена=НаборКонстант.КП_ФункциональнаяОпцияИспользоватьПодсистему;
	
	Элементы.ГруппаЗаголовок.Доступность=ПодсистемаВключена;
	Элементы.ВЕБПриложение.Доступность=ПодсистемаВключена;
	Элементы.ГруппаПараметрыРаздела.Доступность=ПодсистемаВключена;
	
КонецПроцедуры

&НаКлиенте
Процедура КП_ИзменятьПлановыеДатыИнициаторомПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);	
КонецПроцедуры

#КонецОбласти
