
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоБазоваяВерсия = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("БазоваяВерсия");
	
	ИспользуетсяНесколькоОрганизацийЭД = ЭлектронноеВзаимодействиеСлужебный.ИспользуетсяНесколькоОрганизаций();
	
	// Настройки видимости при запуске.
	Элементы.ГруппаИспользоватьОбменМеждуОрганизациями.Видимость = Не ЭтоБазоваяВерсия
		И ИспользуетсяНесколькоОрганизацийЭД;
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	ЕстьИнтеграцияСЯндексКассой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой");
	ТребуетсяВзаимодействие = Ложь;

	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	Если РазделениеВключено И ТребуетсяВзаимодействие Тогда
		Обсуждения = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	КонецЕсли;
	
	Если ЕстьОбменСКонтрагентами Тогда
		НеИспользоватьОбменМеждуОрганизациями = Ложь;
		МодульОбменСКонтрагентамиПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиПереопределяемый");
		МодульОбменСКонтрагентамиПереопределяемый.ИспользоватьОбменЭДМеждуОрганизациями(НеИспользоватьОбменМеждуОрганизациями);
		Если НеИспользоватьОбменМеждуОрганизациями Тогда
			Элементы.ГруппаИспользоватьОбменМеждуОрганизациями.Видимость = Ложь;
		Иначе
			Элементы.ГруппаИспользоватьОбменМеждуОрганизациями.Видимость = Не ЭтоБазоваяВерсия
				И ИспользуетсяНесколькоОрганизацийЭД;
		КонецЕсли;
		
		МодульОбменСКонтрагентамиСлужебный = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебный");
		Элементы.ГруппаИспользоватьПрямойОбмен.Видимость = МодульОбменСКонтрагентамиСлужебный.ПрямойОбменДоступен()
			И Не ОбщегоНазначения.РазделениеВключено();
			
		Элементы.ГруппаИспользоватьВнутренниеДокументы.Видимость = МодульОбменСКонтрагентамиСлужебный.ИспользуетсяВнутреннийЭДО();
	КонецЕсли;
	
	Элементы.ГруппаНастройкиОбменаСКонтрагентами.Видимость = ЕстьОбменСКонтрагентами;
	Элементы.ГруппаНастройкиОбменаСБанками.Видимость =
		ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");
	Элементы.ГруппаНастройкиИнтеграцияСЯндексКассой.Видимость = ЕстьИнтеграцияСЯндексКассой;
		
	// Настройки регламентных заданий.
	УстановитьНастройкиЗаданий();
	
	// Если регламентные задания по отправке или получению включены,
	// тогда нужно выполнить проверки их настроек.
	Если ИспользоватьАвтоматическуюОтправкуЭД Или ИспользоватьАвтоматическоеПолучениеЭД Тогда
		НачатьПроверкуРегламентныхЗаданийНаСервере();
	КонецЕсли;
	
	// Обновление состояния элементов.
	ПрочитатьУстановитьДоступность();
	
	// Добавление элементов управления.
	ДобавитьКомандыСозданияШаблона();
	
	ВыбранныйРаздел = Неопределено;
	
	Если Параметры.Свойство("Раздел", ВыбранныйРаздел) Тогда 
		
		ОтображатьЭДО 				= Элементы.ГруппаНастройкиОбменаСКонтрагентами.Видимость 	И ВыбранныйРаздел = "НастройкиЭДО";
		ОтображатьБС  				= Элементы.ГруппаНастройкиБизнесСеть.Видимость 		  	 	И ВыбранныйРаздел = "НастройкиБизнесСеть";
		ОтображатьОбменаСБанками  	= Элементы.ГруппаНастройкиОбменаСБанками.Видимость 	  	 	И ВыбранныйРаздел = "НастройкиОбменаСБанками";
		ОтображатьЯКасса  			= Элементы.ГруппаНастройкиИнтеграцияСЯндексКассой.Видимость И ВыбранныйРаздел = "НастройкиЯКасса";
		
		Элементы.ГруппаНастройкиОбменаСБанками.Видимость 			= ОтображатьОбменаСБанками;
		Элементы.ЗаголовокГруппаУправлениеОбменомЭД.Видимость 		= ОтображатьЭДО ИЛИ ОтображатьОбменаСБанками;
		Элементы.ГруппаНастройкиОбменаСКонтрагентами.Видимость 		= ОтображатьЭДО;
		Элементы.ГруппаНастройкиБизнесСеть.Видимость 				= ОтображатьБС;
		Элементы.ГруппаНастройкиИнтеграцияСЯндексКассой.Видимость 	= ОтображатьЯКасса;
		
		Если НЕ ОтображатьЭДО
				И НЕ ОтображатьОбменаСБанками Тогда 
				
			Элементы.ГруппаНастройкиОбменаСБанками.Поведение 			= ПоведениеОбычнойГруппы.Обычное;
			Элементы.ЗаголовокГруппаУправлениеОбменомЭД.Поведение 		= ПоведениеОбычнойГруппы.Обычное;
			Элементы.ГруппаНастройкиОбменаСКонтрагентами.Поведение 		= ПоведениеОбычнойГруппы.Обычное;
			Элементы.ГруппаНастройкиБизнесСеть.Поведение 				= ПоведениеОбычнойГруппы.Обычное;
			Элементы.ГруппаНастройкиИнтеграцияСЯндексКассой.Поведение 	= ПоведениеОбычнойГруппы.Обычное;
		
			Элементы.ГруппаНастройкиОбменаСБанками.ОтображатьЗаголовок 			= Ложь;
			Элементы.ЗаголовокГруппаУправлениеОбменомЭД.ОтображатьЗаголовок 	= Ложь;
			Элементы.ГруппаНастройкиОбменаСКонтрагентами.ОтображатьЗаголовок 	= Ложь;
			Элементы.ГруппаНастройкиБизнесСеть.ОтображатьЗаголовок 				= Ложь;
			Элементы.ГруппаНастройкиИнтеграцияСЯндексКассой.ОтображатьЗаголовок = Ложь;
			
		Иначе
			
			Элементы.ГруппаНастройкиОбменаСБанками.Показать();
			Элементы.ГруппаНастройкиОбменаСКонтрагентами.Показать();
			
		КонецЕсли;
		
		Если Параметры.Свойство("ОписаниеРаздела") Тогда 
			Параметры.Свойство("ОписаниеРаздела", Элементы.ОписаниеРаздела.Заголовок);
		КонецЕсли;
		
		Если Параметры.Свойство("Заголовок") Тогда 
			
			АвтоЗаголовок = Ложь;
			Параметры.Свойство("Заголовок", Заголовок);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ОбновитьИнтерфейсПрограммы();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения формы.
//
// Параметры:
//  ИмяСобытия - Строка - обрабатывается только событие Запись_НаборКонстант, генерируемое панелями администрирования.
//  Параметр   - Структура - содержит имена констант, подчиненных измененной константе, "вызвавшей" оповещение.
//  Источник   - Строка - имя измененной константы, вызвавшей оповещение.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		ТребуетсяОбновление = Ложь;
		Если ТипЗнч(Источник) = Тип("Строка") Тогда
			ТребуетсяОбновление = Элементы.Найти(Источник) <> Неопределено;
		ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
			Для Каждого ЭлементСтруктуры Из Источник Цикл
				ТребуетсяОбновление = Элементы.Найти(ЭлементСтруктуры.Ключ) <> Неопределено;
				Если ТребуетсяОбновление Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТребуетсяОбновление Тогда
			ОбновитьЭлементыФормы();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СинхронизацияТорговыхПредложений_ПриИзменении" Тогда
		УстановитьНастройкиЗаданий();
		
	ИначеЕсли ИмяСобытия = "ПомощникНастроекРегламентныхЗаданийВключитьЗадание" Тогда
		
		Если НРег(Параметр) = "отправка" Тогда
			
			ИспользоватьАвтоматическуюОтправкуЭД = Истина;
			ИзменитьИспользованиеЗадания("ОтправкаЭлектронныхДокументов", ИспользоватьАвтоматическуюОтправкуЭД);
			Элементы.ОтправкаЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическуюОтправкуЭД;
			
		ИначеЕсли НРег(Параметр) = "получение" Тогда
			
			ИспользоватьАвтоматическоеПолучениеЭД = Истина;
			ИзменитьИспользованиеЗадания("ПолучениеЭлектронныхДокументов", ИспользоватьАвтоматическоеПолучениеЭД);
			Элементы.ПолучениеЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическоеПолучениеЭД;
			
		КонецЕсли;
		
		Элементы.КнопкаЕстьПроблемаОтправка.Видимость  = Ложь;
		Элементы.КнопкаЕстьПроблемаПолучение.Видимость = Ложь;
		
	ИначеЕсли ИмяСобытия = "РегистрацияВзаимодействия" Тогда
		
		Обсуждения = Параметр;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключитьДиалог", "Видимость",
			РазделениеВключено И Не Параметр И ОповещатьОСобытияхЭДО И ТребуетсяВзаимодействие);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключитеДиалог", "Видимость",
			РазделениеВключено И Не Параметр И ОповещатьОСобытияхЭДО И Не ТребуетсяВзаимодействие);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьАвтоматическоеПолучениеЭД Или ИспользоватьАвтоматическуюОтправкуЭД Тогда
		ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Константа_СоздаватьКонтрагентовАвтоматическиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектронныеПодписиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменСБанкамиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭДПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменЭДМеждуОрганизациямиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура Константа_ИспользоватьПрямойОбменПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнутренниеДокументыПриИзменении(Элемент)
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	
	Если ЕстьОбменСКонтрагентами Тогда
		
		МодульОбменСКонтрагентамиСлужебныйВызовСервера = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиСлужебныйВызовСервера");
		
		Если Не ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ЗначениеФункциональнойОпции("ИспользоватьВнутренниеДокументыЭДО")
			И Не МодульОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьНастройкиВнутреннегоЭДО() Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ИспользоватьВнутренниеДокументыПриИзмененииПродолжить", ЭтотОбъект, Элемент);
			
			ТекстПредупреждения = НСтр("ru = 'При использовании функциональности внутреннего электронного документооборота 
											|возможно замедление работы системы на медленных компьютерах.'");
			
			ПоказатьПредупреждение(ОписаниеОповещения, ТекстПредупреждения); 
			
		Иначе
			Подключаемый_ПриИзмененииРеквизита(Элемент);
		КонецЕсли;

	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВнутренниеДокументыПриИзмененииПродолжить(Результат) Экспорт
	Подключаемый_ПриИзмененииРеквизита(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьНемедленнуюОтправкуЭДПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическуюОтправкуЭДПриИзменении(Элемент)
	
	Если ИспользоватьАвтоматическуюОтправкуЭД Тогда
		
		ИспользоватьАвтоматическуюОтправкуЭД = Ложь; // установим флаг только по результатам проверок
		НачатьПроверкуРегламентныхЗаданийНаСервере(Истина, "Отправка");
		ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий(Истина);
		
	Иначе
		
		ИзменитьИспользованиеЗадания("ОтправкаЭлектронныхДокументов", ИспользоватьАвтоматическуюОтправкуЭД);
		Элементы.ОтправкаЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическуюОтправкуЭД;
		Элементы.КнопкаЕстьПроблемаОтправка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеЭДПриИзменении(Элемент)
	
	Если ИспользоватьАвтоматическоеПолучениеЭД Тогда
		
		ИспользоватьАвтоматическоеПолучениеЭД = Ложь; // установим флаг только по результатам проверок
		НачатьПроверкуРегламентныхЗаданийНаСервере(Истина, "Получение");
		ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий(Истина);
		
	Иначе
		
		ИзменитьИспользованиеЗадания("ПолучениеЭлектронныхДокументов", ИспользоватьАвтоматическоеПолучениеЭД);
		Элементы.ПолучениеЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическоеПолучениеЭД;
		Элементы.КнопкаЕстьПроблемаПолучение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбменБизнесСетьПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическуюПубликациюТорговыхПредложенийПриИзменении(Элемент)
	
	ИзменитьИспользованиеЗадания("СинхронизацияТорговыхПредложений", ИспользоватьАвтоматическуюПубликациюТорговыхПредложений);
	Элементы.СинхронизацияТорговыхПредложений.Доступность = ИспользоватьАвтоматическуюПубликациюТорговыхПредложений;
	Оповестить("СинхронизацияТорговыхПредложений_ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура Константа_НеВыгружатьИзображенияТорговыхПредложений(Элемент)
	
	Константа_НеВыгружатьИзображенияТорговыхПредложений
		= НЕ Константа_НеВыгружатьИзображенияТорговыхПредложений;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьВходящиеДокументыНаУтверждениеПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ВключитьДиалогНажатие(Элемент)
	
	НавигационнаяСсылка = "e1cib/command/Обработка.РегистрацияВСистемеВзаимодействия.Команда.РегистрацияВзаимодействий";
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСервис1СДоставкаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИнтеграцияСЯндексКассой

&НаКлиенте
Процедура ИспользоватьИнтеграциюСЯндексКассойПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПриИзменении(Элемент)
	
	Если ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассы Тогда
		
		ОбработкаПродолжения = Новый ОписаниеОповещения("ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПродолжение",
			ЭтотОбъект, Параметры);
			
		МодульИнтеграцияСЯндексКассойСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияСЯндексКассойСлужебныйКлиент");	
		МодульИнтеграцияСЯндексКассойСлужебныйКлиент.НачатьПроверкуИПодключениеИПП(ОбработкаПродолжения);
					
	Иначе
		ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыПродолжение(Результат,
		ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		Или Не Результат Тогда
		ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассы = Ложь;
	Иначе
		ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассыЗавершение()
	
	ИзменитьИспользованиеЗадания("ПолучениеУведомленийОтЯндексКассы",
		ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассы);
	
	Элементы.ПолучениеУведомленийОтЯндексКассы.Доступность = ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассы;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ЕстьИдеяНажатие(Элемент)
	
	МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиСлужебныйКлиент");
	МодульОбработки.ОткрытьСтраницуОпроса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОзнакомлениеСЭлектроннымиДокументамиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокХраненияПакетаЭДПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияДиректБанкНажатие(Элемент)

	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://v8.1c.ru/edi/edi_app/bank/standards.htm");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиЭлектроннойПодписиИШифрования(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиПрофилейЭДО(Команда)
	
	ФормаСписка = "РегистрСведений.УчетныеЗаписиЭДО.ФормаСписка";
	ОткрытьФорму(ФормаСписка, , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСоглашенияОбИспользованииЭД(Команда)
	
	ФормаСписка = "РегистрСведений.НастройкиОтправкиЭлектронныхДокументов.ФормаСписка";
	ОткрытьФорму(ФормаСписка, , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникПодключенияКПорталу1СЭДО(Команда)
	
	МодульОбработки = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиКлиент");
	МодульОбработки.ПомощникПодключенияКСервису1СЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтправкуЭД(Команда)
	
	ОткрытьНастройкуРасписанияОбмена("ОтправкаЭлектронныхДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолучениеЭД(Команда)
	
	ОткрытьНастройкуРасписанияОбмена("ПолучениеЭлектронныхДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещатьОСобытияхЭДОПриИзменении(Элемент)
	
	ИзменитьИспользованиеЗадания("ПроверкаНовыхЭлектронныхДокументов", ОповещатьОСобытияхЭДО);
	Элементы.ПроверкаНовыхЭлектронныхДокументов.Доступность = ОповещатьОСобытияхЭДО;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОповещатьОСобытияхЭДО Тогда
		Если ОповещатьОСобытияхЭДО() Тогда
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
				МодульОбменаСКонтрагентами = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиКлиент");
				МодульОбменаСКонтрагентами.ИзменитьОповещенияЭДО(Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
			МодульОбменаСКонтрагентами = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиКлиент");
			МодульОбменаСКонтрагентами.ИзменитьОповещенияЭДО();
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ВключитьДиалог", "Видимость", РазделениеВключено И Не Обсуждения И ОповещатьОСобытияхЭДО И ТребуетсяВзаимодействие);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ВключитеДиалог", "Видимость", РазделениеВключено И Не Обсуждения И ОповещатьОСобытияхЭДО И НЕ ТребуетсяВзаимодействие);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОповещенияЭДО(Команда)
	
	ОткрытьНастройкуРасписанияОбмена("ПроверкаНовыхЭлектронныхДокументов");	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиОбменаСБанками(Команда)
	
	ФормаСписка = "Справочник.НастройкиОбменСБанками.Форма.ФормаСписка";
	ОткрытьФорму(ФормаСписка, , ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Бизнес-сеть

&НаКлиенте
Процедура ОткрытьПомощникПодключенияКСервисуБизнесСеть(Команда)
	
	ФормаПомощникаБизнесСети = "Обработка.БизнесСеть.Форма.РегистрацияОрганизаций";
	ОткрытьФорму(ФормаПомощникаБизнесСети);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникПубликацииТорговыхПредложений(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		
		ОчиститьСообщения();
		
		ОбщийМодульТорговыеПредложенияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ТорговыеПредложенияКлиент");
		ОбщийМодульТорговыеПредложенияКлиент.ОткрытьФормуПомощникаПубликации(Неопределено, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеПубликацииТорговыхПредложений(Команда)
	
	ОткрытьНастройкуРасписанияОбмена("СинхронизацияТорговыхПредложений");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрофильАбонента1СБизнесСеть(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть") Тогда
		
		ОбщийМодульБизнесСетьСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("БизнесСетьСлужебныйКлиент");
		
		ИдентификаторОрганизации = Неопределено;
		
		Если ПодключеноНесколькоОрганизаций(ИдентификаторОрганизации) Тогда
			ОбщийМодульБизнесСетьСлужебныйКлиент.ОткрытьФормуВыбораОрганизации();
		Иначе
			Если ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда // есть только одна организация
				ОбщийМодульБизнесСетьСлужебныйКлиент.ОткрытьПрофильОрганизацииНаСайтеБизнесСети(ИдентификаторОрганизации);
			Иначе
				ОбщийМодульБизнесСетьСлужебныйКлиент.ПоказатьОповещениеБизнесСети(НСтр("ru = 'Ни одна организация не подключена к сервису'"));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодключеноНесколькоОрганизаций(ИдентификаторОрганизации)
	
	ОбщийМодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
	
	ПодключенныеОрганизации = ОбщийМодульБизнесСеть.ПодключенныеОрганизации();
	
	КоличествоОрганизаций = ПодключенныеОрганизации.Количество();
	
	Результат = КоличествоОрганизаций > 1;
	
	Если КоличествоОрганизаций = 1 Тогда
		ИдентификаторОрганизации = ПодключенныеОрганизации[0].Идентификатор;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПоказыватьПодсказкиПоставщиковПриИзменении(Элемент)
	
	Константа_НеПоказыватьПодсказкиПоставщиковБизнесСеть = Не Константа_НеПоказыватьПодсказкиПоставщиковБизнесСеть;
	
	Подключаемый_ПриИзмененииРеквизита(Элементы.Константа_НеПоказыватьПодсказкиПоставщиковБизнесСеть);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПодсказкиПокупателейПриИзменении(Элемент)
	
	Константа_НеПоказыватьПодсказкиПокупателейБизнесСеть = Не Константа_НеПоказыватьПодсказкиПокупателейБизнесСеть;
	
	Подключаемый_ПриИзмененииРеквизита(Элементы.Константа_НеПоказыватьПодсказкиПокупателейБизнесСеть);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИнтеграцияСЯндексКассой

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуСоздатьШаблон(Команда)
	
	Кнопка                  = Элементы.Найти(Команда.Имя);
	ИмяДокумента            = СтрЗаменить(Команда.Имя, "СоздатьШаблон", "");
	ПредставлениеДокумента  = СокрЛП(СтрЗаменить(СтрЗаменить(Кнопка.Заголовок, НСтр("ru = 'Шаблон для'"), ""), """", ""));
	НаименованиеШаблона     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Счет на оплату через Яндекс.Кассу (%1)'"), ПредставлениеДокумента);
	
	СоздатьШаблон(Новый Структура("ПолноеИмяТипаПараметраВводаНаОсновании, Наименование", 
		"Документ." + ИмяДокумента, НаименованиеШаблона));
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолучениеУведомленийОтЯндексКассы(Команда)
	
	ОткрытьНастройкуРасписанияОбмена("ПолучениеУведомленийОтЯндексКассы");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЯндексКассы(Команда)
	
	ФормаСписка = "Справочник.НастройкиЯндексКассы.Форма.ФормаСписка";
	ОткрытьФорму(ФормаСписка, , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВШаблоныСообщений(Команда)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат;
	КонецЕсли;
	
	ОтборФормы = Новый Структура();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", ОтборФормы);
	
	Форма = "Справочник.ШаблоныСообщений.ФормаСписка";
	
	ОткрытьФорму(Форма, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Маршруты подписания

&НаКлиенте
Процедура ОткрытьМаршрутыПодписания(Команда)
	
	ОткрытьФорму("Справочник.МаршрутыПодписания.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПомощникаНастройкиОтправкиПолученияЭД()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РезультатПроверки", РезультатПроверкиНастроекОтправкиПолученияЭД);
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияЭДО.Форма.ПомощникНастройкиРегламентныхЗаданий",
		ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникНастроекАвтоматическойОтправкиПолученияЭД(Команда)
	
	ОткрытьФормуПомощникаНастройкиОтправкиПолученияЭД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПомечатьНаУдалениеПакетыЭДПриИзменении(Элемент)
	
	ИзменитьИспользованиеЗадания("ПометкаНаУдалениеПакетовЭД", ПомечатьНаУдалениеПакетыЭД);
	
	Элементы.ПометкаНаУдалениеПакетовЭД.Доступность = ПомечатьНаУдалениеПакетыЭД;
	Элементы.ГруппаСрокХраненияПакетов.Доступность = ПомечатьНаУдалениеПакетыЭД;
	
	Если ПомечатьНаУдалениеПакетыЭД И Не ЗначениеЗаполнено(Константа_СрокХраненияПакетаЭД) Тогда
		Константа_СрокХраненияПакетаЭД = 90; // по умолчанию в днях
		Подключаемый_ПриИзмененииРеквизита(Элементы.СрокХраненияПакетаЭД, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПометкуНаУдалениеПакетовЭД(Команда)
	
	ОткрытьНастройкуРасписанияОбмена("ПометкаНаУдалениеПакетовЭД");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура РазблокироватьРаботуСВнешнимиРесурсами(Команда)
	
	РазблокироватьРаботуСВнешнимиРесурсамиНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	УстановитьНастройкиЗаданий();
	ПрочитатьУстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Функция ОповещатьОСобытияхЭДО()
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОповещатьОСобытияхЭДО();
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если ОбновлятьИнтерфейс Тогда
		
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 1, Истина);
		
	КонецЕсли;
	
	Если Результат.Свойство("ОповещениеФорм") Тогда
		Оповестить(Результат.ОповещениеФорм.ИмяСобытия, Результат.ОповещениеФорм.Параметр,
			Результат.ОповещениеФорм.Источник);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	ПрочитатьУстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 10)) = НРег("Константа_") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 11);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = Константы[КонстантаИмя].Получить();
		
		Если Константы[КонстантаИмя].Получить() <> ЭтотОбъект[РеквизитПутьКДанным] Тогда
			Константы[КонстантаИмя].Установить(ЭтотОбъект[РеквизитПутьКДанным]);
		КонецЕсли;
		
		ОповещениеФорм = Новый Структура(
			"ИмяСобытия, Параметр, Источник",
			"Запись_НаборКонстант", Неопределено, КонстантаИмя);
		Результат.Вставить("ОповещениеФорм", ОповещениеФорм);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьУстановитьДоступность(РеквизитПутьКДанным = "")
	
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь();
	ВнешниеРесурсыЗаблокированы = РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована();
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаБлокировкаВнешнихРесурсов", "Видимость", ВнешниеРесурсыЗаблокированы);
	
	ЕстьОбменСКонтрагентами = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами");
	// Права следует проверять до установки привилегированного режима.
	ЕстьПравоНастройкиОбменаСКонтрагентами = Ложь;
	Если ЕстьОбменСКонтрагентами Тогда
		МодульОбменСКонтрагентамиСлужебныйВызовСервера = ОбщегоНазначения.ОбщийМодуль("ОбменСКонтрагентамиСлужебныйВызовСервера");
		ЕстьПравоНастройкиОбменаСКонтрагентами = МодульОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
	КонецЕсли;
	
	ЕстьОбменБизнесСеть     = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.БизнесСеть");
	Если ЕстьОбменБизнесСеть Тогда
		МодульБизнесСеть = ОбщегоНазначения.ОбщийМодуль("БизнесСеть");
		ЕстьОбменБизнесСеть = МодульБизнесСеть.ПравоНастройкиОбменаДокументами();
	КонецЕсли;
	
	ЕстьТорговыеПредложения = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения")
		И ЕстьОбменБизнесСеть;
		
	ИмяОбщегоМодуляДоставки = "СервисДоставкиСлужебный";
	ЕстьСервисДоставки = Метаданные.ОбщиеМодули.Найти(ИмяОбщегоМодуляДоставки) <> Неопределено;
	ОбщийМодульДоставки = Неопределено;
	Если ЕстьСервисДоставки Тогда
		ОбщийМодульДоставки = ОбщегоНазначения.ОбщийМодуль(ИмяОбщегоМодуляДоставки);
		ОбщийМодульДоставки.ПроверитьДоступностьСервисаДоставки(ЕстьСервисДоставки);
	КонецЕсли;
		
	ЕстьСервисДоставки = ЕстьСервисДоставки
		И ЕстьОбменБизнесСеть;
		
	ДоступнаПубликацияТорговыхПредложений = Ложь;
	Если ЕстьТорговыеПредложения Тогда
		МодульТорговыеПредложения = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложения");
		ЕстьТорговыеПредложения = МодульТорговыеПредложения.ПравоНастройкиТорговыхПредложений();
		
		МодульТорговыеПредложенияСлужебный = ОбщегоНазначения.ОбщийМодуль("ТорговыеПредложенияСлужебный");
		
		ПубликоватьИзображения = МодульТорговыеПредложенияСлужебный.ПубликоватьИзображенияТоваровПоставщика();
		Константа_НеВыгружатьИзображенияТорговыхПредложений = ПубликоватьИзображения;
		
		ДоступнаПубликацияТорговыхПредложений = МодульТорговыеПредложенияСлужебный.ИспользоватьФункционалПубликации();
		Если Не ДоступнаПубликацияТорговыхПредложений Тогда
			Элементы.ГруппаНастройкиБизнесСетьТорговыеПредложения.Видимость = Ложь;
			Элементы.ИспользоватьОбменБизнесСеть.Подсказка =
				НСтр("ru = 'Обмен документами без электронной подписи, поиск торговых предложений в сервисе 1С:Торговая площадка.'");
			Элементы.ОткрытьПрофильАбонента1СБизнесСеть.РасширеннаяПодсказка.Заголовок =
				НСтр("ru = 'Настройка регионов поиска торговых предложений и управление подсказками.'");
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаГиперссылкаПодсказок.Видимость = Ложь;
		Элементы.ГруппаПрофиляАбонента.Видимость = Ложь;
		Элементы.ИспользоватьОбменБизнесСеть.Подсказка = НСтр("ru = 'Обмен документами без электронной подписи.'");
		Элементы.ОткрытьПомощникПодключенияКСервисуБизнесСеть.РасширеннаяПодсказка.Заголовок =
			НСтр("ru = 'Обмен электронными документами без электронной подписи.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьЭлектронныеПодписи = Константы["ИспользоватьЭлектронныеПодписи"].Получить();
	
	Если ЕстьОбменСКонтрагентами
		И (РеквизитПутьКДанным = "Константа_СоздаватьКонтрагентовАвтоматическиБЭД" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		Константа_СоздаватьКонтрагентовАвтоматическиБЭД = Константы["СоздаватьКонтрагентовАвтоматическиБЭД"].Получить();
		
	КонецЕсли;
	
	Если ЕстьОбменСКонтрагентами
		И (РеквизитПутьКДанным = "Константа_ИспользоватьОбменЭД" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		Константа_ИспользоватьОбменЭД = Константы["ИспользоватьОбменЭД"].Получить();
		Константа_ИспользоватьОбменЭДМеждуОрганизациями = Константы["ИспользоватьОбменЭДМеждуОрганизациями"].Получить();
		Константа_ИспользоватьПрямойОбменЭлектроннымиДокументами =
			Константы["ИспользоватьПрямойОбменЭлектроннымиДокументами"].Получить();
			
		Константа_ИспользоватьВнутренниеДокументыЭДО =
			Константы["ИспользоватьВнутренниеДокументыЭДО"].Получить();
		
		Константа_ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов =
			Константы["ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов"].Получить();
		
		Константа_ИспользоватьОзнакомлениеСЭлектроннымиДокументами =
			Константы["ИспользоватьОзнакомлениеСЭлектроннымиДокументами"].Получить();
					
		Константа_ОтправлятьВходящиеДокументыНаУтверждение =
			Константы["ОтправлятьВходящиеДокументыНаУтверждение"].Получить();

		Константа_СрокХраненияПакетаЭД = Константы["СрокХраненияПакетаЭД"].Получить();
		
		ВключеныЭДИЭП = Константа_ИспользоватьОбменЭД И ИспользоватьЭлектронныеПодписи;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОткрытьТиповыеСоглашенияОбИспользованииЭД", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОткрытьСоглашенияОбИспользованииЭД", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИспользоватьОбменЭДМеждуОрганизациями", "Доступность", ВключеныЭДИЭП);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИспользоватьПрямойОбмен", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИспользоватьВнутренниеДокументы", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОткрытьПомощникПодключенияКСервису1СЭДО", "Доступность", ВключеныЭДИЭП);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОткрытьАрхивЭДО", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаОтправкаЭД", "Доступность", Не ВнешниеРесурсыЗаблокированы);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИспользоватьАвтоматическуюОтправкуЭД", "Доступность", ЕстьОбменСКонтрагентами);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Константа_СоздаватьКонтрагентовАвтоматически", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПолучениеЭД", "Доступность", Не ВнешниеРесурсыЗаблокированы);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИспользоватьАвтоматическоеПолучениеЭД", "Доступность", ЕстьОбменСКонтрагентами);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаДиагностикаЭДО", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОповещатьОСобытияхЭДО", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ДоступноАдминистрирование = ЕстьПраваАдминистрированияРегламентныхЗаданий();
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаНастройкиРегламентногоЗадания", "Доступность", Константа_ИспользоватьОбменЭД И ДоступноАдминистрирование);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаНастройкиРегламентногоЗадания", "Видимость", Не РазделениеВключено);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаОповещенияЭДО", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаОповещенияЭДО", "Видимость", ДоступноАдминистрирование);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПомечатьНаУдалениеПакетыЭД", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПомечатьНаУдалениеПакетыЭД", "Видимость", ДоступноАдминистрирование);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаНастройкиОбменаСКонтрагентами", "ТолькоПросмотр", Не ЕстьПравоНастройкиОбменаСКонтрагентами);
		
		ЗаголовокГруппы = НСтр("ru = 'Обмен с контрагентами'") 
			+ ?(ЕстьПравоНастройкиОбменаСКонтрагентами, "", " " + НСтр("ru = '(только просмотр)'"));
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаНастройкиОбменаСКонтрагентами", "Заголовок", ЗаголовокГруппы);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаОзнакомлениеЭД", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаОтправлятьВходящиеДокументыНаУтверждение", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаИспользоватьВнутренниеДокументы", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ВключитьДиалог", "Доступность", Константа_ИспользоватьОбменЭД);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключитьДиалог", "Видимость",
			РазделениеВключено И Не Обсуждения И ОповещатьОСобытияхЭДО И ТребуетсяВзаимодействие);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВключитеДиалог", "Видимость",
			РазделениеВключено И Не Обсуждения И ОповещатьОСобытияхЭДО И НЕ ТребуетсяВзаимодействие И Константа_ИспользоватьОбменЭД);
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "Константа_ИспользоватьЭлектронныеПодписи" ИЛИ РеквизитПутьКДанным = "" Тогда
		Константа_ИспользоватьЭлектронныеПодписи = ИспользоватьЭлектронныеПодписи;
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ИспользоватьЭлектронныеПодписи", "Доступность", ЭтоПолноправныйПользователь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"НастройкиЭлектроннойПодписиИШифрования", "Доступность", ИспользоватьЭлектронныеПодписи);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"МаршрутыПодписания", "Доступность", ИспользоватьЭлектронныеПодписи);
	КонецЕсли;
	
	ЕстьОбменСБанками = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСБанками");
	
	Если ЕстьОбменСБанками
		И (РеквизитПутьКДанным = "Константа_ИспользоватьОбменСБанками" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		МодульОбменСБанками = ОбщегоНазначения.ОбщийМодуль("ОбменСБанками");
		
		УстановитьПривилегированныйРежим(Ложь);
		ПравоНастройки = МодульОбменСБанками.ПравоНастройки();
		ПравоЧтенияНастроек = МодульОбменСБанками.ПравоЧтенияНастроек();
		УстановитьПривилегированныйРежим(Истина);
		
		Константа_ИспользоватьОбменСБанками = Константы["ИспользоватьОбменСБанками"].Получить();
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОткрытьНастройкиОбмена", "Доступность", Константа_ИспользоватьОбменСБанками И ПравоЧтенияНастроек);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ИспользоватьОбменСБанками", "Доступность", ПравоНастройки);
		
	КонецЕсли;
		
	// БизнесСеть
	Если ЕстьОбменБизнесСеть
		И (РеквизитПутьКДанным = "Константа_ИспользоватьОбменБизнесСеть" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		Константа_ИспользоватьОбменБизнесСеть = Константы["ИспользоватьОбменБизнесСеть"].Получить();
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаСервисныеКомандыБизнесСеть", "Доступность", Константа_ИспользоватьОбменБизнесСеть);
		
		// ТорговыеПредложения
		Если ЕстьТорговыеПредложения Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаНастройкиБизнесСетьТорговыеПредложенияПубликация", "Доступность", Константа_ИспользоватьОбменБизнесСеть);
			Если Не Константа_ИспользоватьОбменБизнесСеть И Не РазделениеВключено Тогда
				ИзменитьИспользованиеЗадания("СинхронизацияТорговыхПредложений", Константа_ИспользоватьОбменЭД);
				ИспользоватьАвтоматическуюПубликациюТорговыхПредложений = Ложь;
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
				"ГруппаПрофиляАбонента", "Доступность", Константа_ИспользоватьОбменБизнесСеть);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьТорговыеПредложения
		И (РеквизитПутьКДанным = "Константа_НеПоказыватьПодсказкиПокупателейБизнесСеть" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		Константа_НеПоказыватьПодсказкиПокупателейБизнесСеть = Константы["НеПоказыватьПодсказкиПокупателейБизнесСеть"].Получить();
		ПоказыватьПодсказкиПокупателейБизнесСеть = Не Константа_НеПоказыватьПодсказкиПокупателейБизнесСеть;
	КонецЕсли;
	
	Если ЕстьТорговыеПредложения
		И (РеквизитПутьКДанным = "Константа_НеПоказыватьПодсказкиПоставщиковБизнесСеть" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		Константа_НеПоказыватьПодсказкиПоставщиковБизнесСеть = Константы["НеПоказыватьПодсказкиПоставщиковБизнесСеть"].Получить();
		ПоказыватьПодсказкиПоставщиковБизнесСеть = Не Константа_НеПоказыватьПодсказкиПоставщиковБизнесСеть;
	КонецЕсли;
	
	// СервисДоставки
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаНастройкиБизнесСетьСервисДоставки", "Видимость", ЕстьСервисДоставки);
	
	Если ЕстьСервисДоставки
		И (РеквизитПутьКДанным = "Константа_ИспользоватьСервис1СДоставка" 
		ИЛИ РеквизитПутьКДанным = "Константа_ИспользоватьОбменБизнесСеть"
		ИЛИ РеквизитПутьКДанным = "") Тогда
		
		Константа_ИспользоватьСервис1СДоставка = Константы["ИспользоватьСервис1СДоставка"].Получить();
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"Константа_ИспользоватьСервис1СДоставка", "Доступность", Константа_ИспользоватьОбменБизнесСеть);
		
		ОбщийМодульДоставки.УстановитьДоступностьНастройкиСервисаДоставки(ЭтаФорма);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаНастройкиБизнесСеть", "Видимость", ЕстьОбменСКонтрагентами И ЕстьОбменБизнесСеть);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаНастройкиБизнесСетьТорговыеПредложения", "Видимость", ЕстьОбменСКонтрагентами И ЕстьТорговыеПредложения
			И ДоступнаПубликацияТорговыхПредложений);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаПрофиляАбонента", "Видимость", ЕстьТорговыеПредложения);
	
	// ИнтеграцияСЯндексКассой
	ЕстьИнтеграцияСЯндексКассой = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой");
	
	Если ЕстьИнтеграцияСЯндексКассой
		И (РеквизитПутьКДанным = "Константа_ИспользоватьИнтеграциюСЯндексКассой" ИЛИ РеквизитПутьКДанным = "") Тогда
		
		Константа_ИспользоватьИнтеграциюСЯндексКассой = Константы["ИспользоватьИнтеграциюСЯндексКассой"].Получить();
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ОткрытьНастройкиЯндексКассы", "Доступность", Константа_ИспользоватьИнтеграциюСЯндексКассой);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаПолучениеУведомлений", "Доступность", Константа_ИспользоватьИнтеграциюСЯндексКассой);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаНастройкаШаблонов", "Доступность", Константа_ИспользоватьИнтеграциюСЯндексКассой);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаНастройкаШаблонов", "Видимость", ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(
				Метаданные.НайтиПоПолномуИмени("Справочник.ШаблоныСообщений")));
		
	КонецЕсли;
	// Конец ИнтеграцияСЯндексКассой
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию(ИмяЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	Элемент = Элементы[ИмяЗадания];
	Если Элемент <> Неопределено Тогда
		Элемент.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	ИдентификаторЗадания = РегламентноеЗаданиеПоНаименованию(ИмяЗадания);
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(ИдентификаторЗадания, РасписаниеРегламентногоЗадания);
	
	Элемент = Элементы[ИмяЗадания];
	Если Элемент <> Неопределено Тогда
		Элемент.Заголовок = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ИмяЗадания)
	
	Расписание = ПолучитьПараметрРегламентногоЗадания(ИмяЗадания, "Расписание", Новый РасписаниеРегламентногоЗадания);
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение",
		ЭтотОбъект, ИмяЗадания);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция ТекстРасписанияРегламентногоЗадания(ИдентификаторЗадания)
	
	Расписание = ИдентификаторЗадания.Расписание;
	Если Расписание = Неопределено Тогда
		Возврат НСтр("ru = 'Настроить расписание'")
	Иначе
		Возврат Строка(Расписание);
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкиЗаданий()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоАдминистраторСистемы = Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь);
	
	// Торговые предложения
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ТорговыеПредложения") Тогда
		
		РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию("СинхронизацияТорговыхПредложений");
		ЭлементНастройкиРасписания = Элементы.СинхронизацияТорговыхПредложений;
		ВидимостьФлажка = (РегламентноеЗадание <> Неопределено);
		Если ВидимостьФлажка Тогда
			ИспользоватьАвтоматическуюПубликациюТорговыхПредложений = РегламентноеЗадание.Использование;
			ЭлементНастройкиРасписания.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
			ЭлементНастройкиРасписания.Доступность = РегламентноеЗадание.Использование;
		КонецЕсли;
		ВидимостьРасписания = ВидимостьФлажка И Не РазделениеВключено И ЭтоАдминистраторСистемы;
		ЭлементНастройкиРасписания.Видимость = ВидимостьРасписания;
		
	КонецЕсли;
	
	// ЯндексКасса
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		
		РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию("ПолучениеУведомленийОтЯндексКассы");
		ЭлементНастройкиРасписания = Элементы.ПолучениеУведомленийОтЯндексКассы;
		ВидимостьФлажка = (РегламентноеЗадание <> Неопределено);
		Если ВидимостьФлажка Тогда
			ИспользоватьАвтоматическоеПолучениеУведомленияОтЯндексКассы = РегламентноеЗадание.Использование;
			ЭлементНастройкиРасписания.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
			ЭлементНастройкиРасписания.Доступность = РегламентноеЗадание.Использование;
		КонецЕсли;
		ВидимостьРасписания = ВидимостьФлажка И Не РазделениеВключено И ЭтоАдминистраторСистемы;
		ЭлементНастройкиРасписания.Видимость = ВидимостьРасписания;
		
	КонецЕсли;
	
	// ОбменСКонтрагентам
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию("ОтправкаЭлектронныхДокументов");
		ЭлементНастройкиРасписания = Элементы.ОтправкаЭлектронныхДокументов;
		ВидимостьФлажка = (РегламентноеЗадание <> Неопределено);
		Если ВидимостьФлажка Тогда
			ИспользоватьАвтоматическуюОтправкуЭД = РегламентноеЗадание.Использование;
			ЭлементНастройкиРасписания.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
			ЭлементНастройкиРасписания.Доступность = РегламентноеЗадание.Использование;
		КонецЕсли;
		ВидимостьРасписания = ВидимостьФлажка И Не РазделениеВключено И ЭтоАдминистраторСистемы;
		ЭлементНастройкиРасписания.Видимость = ВидимостьРасписания;
		
		РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию("ПолучениеЭлектронныхДокументов");
		ЭлементНастройкиРасписания = Элементы.ПолучениеЭлектронныхДокументов;
		ВидимостьФлажка = (РегламентноеЗадание <> Неопределено);
		Если ВидимостьФлажка Тогда
			ИспользоватьАвтоматическоеПолучениеЭД = РегламентноеЗадание.Использование;
			ЭлементНастройкиРасписания.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
			ЭлементНастройкиРасписания.Доступность = РегламентноеЗадание.Использование;
		КонецЕсли;
		ВидимостьРасписания = ВидимостьФлажка И Не РазделениеВключено И ЭтоАдминистраторСистемы;
		ЭлементНастройкиРасписания.Видимость = ВидимостьРасписания;
		
		РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию("ПроверкаНовыхЭлектронныхДокументов");
		ЭлементНастройкиРасписания = Элементы.ПроверкаНовыхЭлектронныхДокументов;
		ВидимостьФлажка = (РегламентноеЗадание <> Неопределено);
		Если ВидимостьФлажка Тогда
			ОповещатьОСобытияхЭДО = РегламентноеЗадание.Использование;
			ЭлементНастройкиРасписания.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
			ЭлементНастройкиРасписания.Доступность = РегламентноеЗадание.Использование;
		КонецЕсли;
		ВидимостьРасписания = ВидимостьФлажка И Не РазделениеВключено И ЭтоАдминистраторСистемы;
		ЭлементНастройкиРасписания.Видимость = ВидимостьРасписания;
		
		РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию("ПометкаНаУдалениеПакетовЭД");
		ЭлементНастройкиРасписания = Элементы.ПометкаНаУдалениеПакетовЭД;
		ВидимостьФлажка = (РегламентноеЗадание <> Неопределено);
		Если ВидимостьФлажка Тогда
			ПомечатьНаУдалениеПакетыЭД = РегламентноеЗадание.Использование;
			ЭлементНастройкиРасписания.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
			ЭлементНастройкиРасписания.Доступность = РегламентноеЗадание.Использование;
			Элементы.ГруппаСрокХраненияПакетов.Доступность = РегламентноеЗадание.Использование;
		КонецЕсли;
		ВидимостьРасписания = ВидимостьФлажка И Не РазделениеВключено И ЭтоАдминистраторСистемы;
		ЭлементНастройкиРасписания.Видимость = ВидимостьРасписания;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРасписаниеЗадания(ДополнительныеПараметры, РасписаниеЗадания);
	
КонецПроцедуры

&НаСервере
Функция РегламентноеЗаданиеПоНаименованию(ИмяЗадания)
	
	Отбор = Новый Структура("Метаданные", ИмяЗадания);
	Найденные = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Задание = ?(Найденные.Количество() = 0, Неопределено, Найденные[0]);
	
	Возврат Задание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИнтеграцияСЯндексКассой

&НаСервере
Процедура ДобавитьКомандыСозданияШаблона()
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		Возврат;
	КонецЕсли;
	
	МодульИнтеграцияСЯндексКассойСлужебный = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияСЯндексКассойСлужебный");
	ИменаОснованийПлатежа = МодульИнтеграцияСЯндексКассойСлужебный.ОснованияПлатежа();
	
	КомандыДобавлены = Ложь;
	Для Каждого ПолноеИмя Из ИменаОснованийПлатежа Цикл
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПравоДоступа("Чтение", ОбъектМетаданных) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеОбъектаМетаданных = ?(ПустаяСтрока(ОбъектМетаданных.ПредставлениеОбъекта), ОбъектМетаданных.Представление(), ОбъектМетаданных.ПредставлениеОбъекта);
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолноеИмя,".");
		ИмяКоманды     = МассивПодстрок[1];

		ПредставлениеКоманды = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Шаблон для ""%1""'"), ПредставлениеОбъектаМетаданных);
		ОписаниеКоманды = Новый Структура();
		ОписаниеКоманды.Вставить("ИмяКоманды", ИмяКоманды);
		ОписаниеКоманды.Вставить("Представление", ПредставлениеКоманды);
		
		ДобавитьКомандуСозданияШаблона(ОписаниеКоманды);
		КомандыДобавлены = Истина;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ГруппаКнопокСоздать",
		"Видимость",
		КомандыДобавлены);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуСозданияШаблона(ОписаниеКоманды)

	ИмяКоманды = "СоздатьШаблон" + ОписаниеКоманды.ИмяКоманды;
	
	Если ЭтотОбъект.Команды.Найти(ИмяКоманды) = Неопределено Тогда
		КомандаФормы = ЭтотОбъект.Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКомандуСоздатьШаблон";
		КомандаФормы.Заголовок = ОписаниеКоманды.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		КомандаФормы.Отображение = ОтображениеКнопки.Текст;
	КонецЕсли;
	
	МестоРазмещения = Элементы.ГруппаКнопокСоздатьШаблон;
	
	Если ЭтотОбъект.Элементы.Найти(ИмяКоманды) = Неопределено Тогда
		НовыйЭлемент = ЭтотОбъект.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещения);
		НовыйЭлемент.Вид = ВидКнопкиФормы.Гиперссылка;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
		НовыйЭлемент.Заголовок  = ОписаниеКоманды.Представление;
		НовыйЭлемент.Видимость  = Истина;
		НовыйЭлемент.ТолькоВоВсехДействиях = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьШаблон(ПараметрыСозданияШаблона)
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ИнтеграцияСЯндексКассой") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		Возврат;
	КонецЕсли;
	
	МодульИнтеграцияСЯндексКассойСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияСЯндексКассойСлужебныйКлиент");
	
	СпособРедактированияЭлектронныхПисемHTML = "Перечисление.СпособыРедактированияЭлектронныхПисем.HTML";
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("Наименование",            ПараметрыСозданияШаблона.Наименование);
	ДанныеЗаполнения.Вставить("ПолноеИмяТипаНазначения", ПараметрыСозданияШаблона.ПолноеИмяТипаПараметраВводаНаОсновании);
	ДанныеЗаполнения.Вставить("ТипШаблона",              "Письмо");
	ДанныеЗаполнения.Вставить("ФорматПисьма",            ПредопределенноеЗначение(СпособРедактированияЭлектронныхПисемHTML));
	ДанныеЗаполнения.Вставить("Тема",                    НСтр("ru = 'Вам выставлен счет'"));
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыСозданияШаблона.ПолноеИмяТипаПараметраВводаНаОсновании,".");
	ИмяДокумента   = МассивПодстрок[1];
	ДанныеЗаполнения.Вставить("Текст", СтрЗаменить(ТекстМакета(),"ИмяДокумента", ИмяДокумента));
	
	МодульИнтеграцияСЯндексКассойСлужебныйКлиент.ПолучитьДанныеЗаполненияПредопределенногоШаблона(ДанныеЗаполнения);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Основание", ДанныеЗаполнения);
	ПараметрыФормы.Вставить("ПолноеИмяТипаОснования", ДанныеЗаполнения.ПолноеИмяТипаНазначения);
	
	Форма = "Справочник.ШаблоныСообщений.ФормаОбъекта";
	
	ОткрытьФорму(Форма, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстМакета()
	
	НастройкиЯндексКассы = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("Справочник.НастройкиЯндексКассы");
	
	ШаблонСообщения = НастройкиЯндексКассы.ПолучитьМакет("ШаблонСообщения");
	
	ШаблонСообщения.КодЯзыкаМакета = Метаданные.Языки.Русский.КодЯзыка;
	
	ТекстМакета = ШаблонСообщения.ПолучитьТекст();
	
	ТекстМакета = СтрЗаменить(ТекстМакета, "ТекстСообщения", НСтр("ru = 'Счет можно оплатить нажав на кнопку'"));
	
	Возврат ТекстМакета;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

&НаСервере
Функция ПолучитьПараметрРегламентногоЗадания(ИмяЗадания, ИмяПараметра, ЗначениеПоУмолчанию)
	
	// Проверка отсутствие поставляемого регламентного задания в конфигурации.
	РегламентноеЗадание = Метаданные.РегламентныеЗадания[ИмяЗадания];
	Если РегламентноеЗадание = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	// Поиск задания.
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", РегламентноеЗадание);
	Если Не РазделениеВключено Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", РегламентноеЗадание.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() Тогда
		Возврат СписокЗаданий[0][ИмяПараметра];
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НачатьПроверкуРегламентныхЗаданийНаСервере(ИнициировалПользователь = Ложь, Операция = "ПоУмолчанию")
	
	ПроверкаНастроекОтправкиПолученияЭД =
		Обработки.ПанельАдминистрированияЭДО.НачатьПроверкуНастроекРегламентныхЗаданий(УникальныйИдентификатор, ИнициировалПользователь, Операция);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий(ВыводитьОкноОжидания = Ложь)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru='Проверяется возможность включения регламентного задания.'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьНастройкиРегламентныхЗаданийЭДООбработкаРезультата", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ПроверкаНастроекОтправкиПолученияЭД, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройкиРегламентныхЗаданийЭДООбработкаРезультата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				НСтр("ru='Автоматическая проверка настроек регламентных заданий'"),
				Результат.ПодробноеПредставлениеОшибки,
				Результат.КраткоеПредставлениеОшибки);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РезультатПроверкиНастроекОтправкиПолученияЭД = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	РезультатПроверкиНастроек = РезультатПроверкиНастроекОтправкиПолученияЭД;
	
	Если РезультатПроверкиНастроек.ИнициировалПользователь Тогда
		
		Если РезультатПроверкиНастроек.Успех Тогда
			
			Если НРег(РезультатПроверкиНастроек.Операция) = НРег("Отправка") Тогда
				
				ИспользоватьАвтоматическуюОтправкуЭД = Истина;
				ИзменитьИспользованиеЗадания("ОтправкаЭлектронныхДокументов", ИспользоватьАвтоматическуюОтправкуЭД);
				Элементы.ОтправкаЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическуюОтправкуЭД;
				
			ИначеЕсли НРег(РезультатПроверкиНастроек.Операция) = НРег("Получение") Тогда
				
				ИспользоватьАвтоматическоеПолучениеЭД = Истина;
				ИзменитьИспользованиеЗадания("ПолучениеЭлектронныхДокументов", ИспользоватьАвтоматическоеПолучениеЭД);
				Элементы.ПолучениеЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическоеПолучениеЭД;
				
			КонецЕсли;
			
		Иначе
			
			ОткрытьФормуПомощникаНастройкиОтправкиПолученияЭД();
			
		КонецЕсли;
		
	Иначе
		
		Если Не РезультатПроверкиНастроек.Успех Тогда
			
			// Проверка была запущена при создании формы. Нужно обратить внимание пользователя на проблему.
			Элементы.КнопкаЕстьПроблемаОтправка.Видимость  = ИспользоватьАвтоматическуюОтправкуЭД;
			Элементы.КнопкаЕстьПроблемаПолучение.Видимость = ИспользоватьАвтоматическоеПолучениеЭД;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПраваАдминистрированияРегламентныхЗаданий()
	
	ПроверятьПраваАдминистрированияСистемы = Истина;
	Если ОбщегоНазначения.РазделениеВключено()
		И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		ПроверятьПраваАдминистрированияСистемы = Ложь;
	КонецЕсли;
	
	ЕстьПрава = Пользователи.ЭтоПолноправныйПользователь(, ПроверятьПраваАдминистрированияСистемы, Ложь);
	
	Возврат ЕстьПрава;
	
КонецФункции

&НаСервере
Процедура РазблокироватьРаботуСВнешнимиРесурсамиНаСервере()
	
	РегламентныеЗаданияСервер.РазблокироватьРаботуСВнешнимиРесурсами();
	
	ПрочитатьУстановитьДоступность();
	
КонецПроцедуры

#КонецОбласти
