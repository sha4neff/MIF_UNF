#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СодержимоеКонстанты = ИнтеграцияИСМПВызовСервера.НастройкиСканированияКодовМаркировки();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СодержимоеКонстанты);
	
	НастроитьЭлементыФормы();
	// Обновление состояния элементов
	УстановитьДоступность();
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтролироватьСтатусыКодовМаркировкиИСМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьСтатусыКодовМаркировкиВРозницеИСМППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСДПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьСтандартнуюВложенностьПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьАлфавитКодовМаркировкиПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьМРЦПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТППриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент)
	
	Результат = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если Результат <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	Результат = Новый Структура;
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьЗначениеРеквизита(РеквизитПутьКДанным, Результат)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую (в отношении один-к-одному).
	Если РеквизитПутьКДанным = "" Тогда
		Возврат;
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
	КонецЕсли;
	
	// Сохранения значения константы.
	Если КонстантаИмя <> "" Тогда
		
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			КонстантаМенеджер.Установить(КонстантаЗначение);
		КонецЕсли;
		
		СобытияФормИСПереопределяемый.ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(ЭтотОбъект, КонстантаИмя, КонстантаЗначение);
		
		Если КонтролироватьСтандартнуюВложенность
			И Не НаборКонстант.КонтролироватьСтатусыКодовМаркировкиИСМП
			И Не НаборКонстант.КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП Тогда
			КонтролироватьСтандартнуюВложенность = Ложь;
			КонстантаИмя = "";
		КонецЕсли;
		
		Если ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП
			И Не НаборКонстант.КонтролироватьСтатусыКодовМаркировкиИСМП
			И Не НаборКонстант.КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП Тогда
			ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП = Ложь;
			КонстантаИмя = "";
		КонецЕсли;
		
		Если ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП
			И Не НаборКонстант.КонтролироватьСтатусыКодовМаркировкиИСМП
			И Не НаборКонстант.КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП Тогда
			ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП = Ложь;
			КонстантаИмя = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонстантаИмя = "" Тогда
		
		Настройки = Новый Структура;
		Настройки.Вставить("КонтролироватьСтандартнуюВложенность",      КонтролироватьСтандартнуюВложенность);
		Настройки.Вставить("ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД", ПропускатьСтрокиСОшибкамиПриЗагрузкеИзТСД);
		Настройки.Вставить("ПроверятьАлфавитКодовМаркировки",           ПроверятьАлфавитКодовМаркировки);
		
		// Табачная продукция
		Настройки.Вставить("ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП",          ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП);
		Настройки.Вставить("ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП", ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП);
		Настройки.Вставить("УчитыватьМРЦ",                                                       УчитыватьМРЦ);
		Настройки.Вставить("ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП",          ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП);
		
		КонстантаЗначение = Новый ХранилищеЗначения(Настройки);
		Константы.НастройкиСканированияКодовМаркировкиИСМП.Установить(КонстантаЗначение);
		
		СобытияФормИСПереопределяемый.ОбновитьФормуНастройкиПриЗаписиПодчиненныхКонстант(ЭтотОбъект, "НастройкиСканированияКодовМаркировкиИСМП", Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Элементы.ГруппаРаботаСУпаковками.Доступность = НаборКонстант.КонтролироватьСтатусыКодовМаркировкиИСМП
		Или НаборКонстант.КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП;
	
	Элементы.ГруппаСераяЗона.Доступность = НаборКонстант.КонтролироватьСтатусыКодовМаркировкиИСМП
		Или НаборКонстант.КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП;
	
	Элементы.ДатаПроизводстваНачалаКонтроляСтатусовКодовМаркировкиМОТП.Доступность = НаборКонстант.КонтролироватьСтатусыКодовМаркировкиИСМП
		Или НаборКонстант.КонтролироватьСтатусыКодовМаркировкиВРозницеИСМП;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	// МРЦ
	ВозможноВключение              = Истина;
	ВозможноОтключение             = Истина;
	ПричинаНевозможностиВключения  = "";
	ПричинаНевозможностиОтключения = "";
	ИнтеграцияИСМППереопределяемый.ПриОпределенииВозможностиВключенияОтключенияВеденияУчетаМРЦ(
		ВозможноВключение,
		ПричинаНевозможностиВключения,
		ВозможноОтключение,
		ПричинаНевозможностиОтключения);
	
	ОписаниеВеденияУчета = Новый Массив;
	ОписаниеВеденияУчета.Добавить(
		НСтр("ru = 'При проверке поступления табачной продукции или при сканировании табачных кодов маркировки'"));
	ОписаниеВеденияУчета.Добавить(" ");
	ОписаниеВеденияУчета.Добавить(
		НСтр("ru = 'МРЦ будет распознаваться из состава кода маркировки или запрашиваться из сервиса ГИС МТ.'"));
	ОписаниеВеденияУчета.Добавить(" ");
	ОписаниеВеденияУчета.Добавить(
		НСтр("ru = 'МРЦ может использоваться при ведении классификаторов номенклатуры или для контроля цены при оформлении розничных продаж.'"));
	
	ВключенаТабачнаяПродукция = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(
		Перечисления.ВидыПродукцииИС.Табак);
	ВключенаАльтернативнаяТабачнаяПродукция = ИнтеграцияИСМПВызовСервера.ВестиУчетМаркируемойПродукции(
		Перечисления.ВидыПродукцииИС.АльтернативныйТабак);
	
	Если УчитыватьМРЦ Тогда
		
		Если ВозможноОтключение Тогда
			Элементы.УчитыватьМРЦ.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.УчитыватьМРЦ.ТолькоПросмотр = Истина;
			ОписаниеВеденияУчета.Добавить(Символы.ПС);
			ОписаниеВеденияУчета.Добавить(ПричинаНевозможностиОтключения);
		КонецЕсли;
		
	Иначе
		
		Если ВозможноВключение Тогда
			Элементы.УчитыватьМРЦ.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.УчитыватьМРЦ.ТолькоПросмотр = Истина;
			ОписаниеВеденияУчета.Добавить(Символы.ПС);
			ОписаниеВеденияУчета.Добавить(ПричинаНевозможностиВключения);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаСераяЗона.Видимость = ВключенаТабачнаяПродукция;
	
	ОписаниеВеденияУчета.Добавить(Символы.ПС);
	ОписаниеВеденияУчета.Добавить(НСтр("ru = 'Не поддерживается для альтернативной табачной продукции.'"));
	
	Элементы.УчитыватьМРЦ.РасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(ОписаниеВеденияУчета);
	Элементы.УчитыватьМРЦ.Видимость = ВключенаТабачнаяПродукция;
	
	Элементы.ГруппаТабачнаяПродукция.Видимость = ВключенаТабачнаяПродукция Или ВключенаАльтернативнаяТабачнаяПродукция;
	
КонецПроцедуры

#КонецОбласти