
#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	ПолучитьЗначенияКонстантРазмещенныхНаФормеУНФ();
	ПриПолученииЗначенийНастроекУНФ();
	ПрочитатьКонстантыИзНабораВРеквизитыФормы();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СформироватьПереходныеДекорацииКРазделам();
	
	РежимРаботы = Новый ФиксированнаяСтруктура(УправлениеНебольшойФирмойПовтИсп.РежимРаботыПрограммы());
	
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		ВведеннаяСтрокаПоиска = Параметры.СтрокаПоиска;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ЗаполнитьДеревоРазделов();
	
	ПриУстановкеДоступностиНастроекУНФ();
	ПриСозданииНаСервереБСП(Отказ, СтандартнаяОбработка);
	ПослеСозданияНаСервереБСП();
	ПриСозданииНаСервереБЭД(Отказ, СтандартнаяОбработка);
	ПриУстановкеВидимостиНастроекУНФ();
	ОпределитьДоступностьПоПравам();
	
	ЗаполнитьТаблицуПоиска(Элементы.СтраницыНастроек.ПодчиненныеЭлементы);
	Если НЕ ПустаяСтрока(ВведеннаяСтрокаПоиска) Тогда
		ВыполнитьПоискСервер();
	Иначе
		УстановитьВидимостьРазделовРекурсивно(ДеревоРазделов.ПолучитьЭлементы());
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Параметры.РазделПоУмолчанию) Тогда
		АктивизироватьРазделНастроек(Параметры.РазделПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПриОткрытииБСП(Отказ);
	РазвернутьРазделыПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбсужденияПодключены" Тогда
		РегистрацияВзаимодействия = Параметр;
	КонецЕсли;
	
	ОбработкаОповещенияБСП(ИмяСобытия, Параметр, Источник);
	
	Если ИмяСобытия = "Запись_НаборКонстант"
		ИЛИ ИмяСобытия = "ОбсужденияПодключены" Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура АвтоПодборНомеровГТДПриИзменении(Элемент)
	
	АвтоПодборНомеровГТДПриИзмененииНаСервере();
	
КонецПроцедуры

#Область ОбработчикиСобытийОбщихЭлементовФормы

&НаКлиенте
Процедура ВведеннаяСтрокаПоискаПриИзменении(Элемент)
	
	ВосстановитьИсходнуюВидимостьНастроек();
	ВыполнитьПоискСервер();
	СформироватьПереходныеДекорацииКРазделам();
	
КонецПроцедуры

&НаКлиенте
Процедура ВведеннаяСтрокаПоискаОчистка(Элемент, СтандартнаяОбработка)
	
	ВосстановитьИсходнуюВидимостьНастроек();
	СформироватьПереходныеДекорацииКРазделам();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазделовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоРазделов.ТекущаяСтрока = Неопределено Или Элементы.ДеревоРазделов.ТекущиеДанные.Видимость = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоРазделов.Развернуть(Элементы.ДеревоРазделов.ТекущаяСтрока);
#Если МобильныйКлиент Тогда
	Если Элементы.ДеревоРазделов.ТекущиеДанные.ЭтоГруппа = Истина Тогда
		Возврат;
	КонецЕсли;
#КонецЕсли
	
	СоответствующаяРазделуСтраница = Элементы.Найти(Элементы.ДеревоРазделов.ТекущиеДанные.Имя);
	
	Если СоответствующаяРазделуСтраница = Неопределено Тогда
		Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы.СтраницаНеНайдено;
	Иначе
		Элементы.СтраницыНастроек.ТекущаяСтраница = СоответствующаяРазделуСтраница;
	КонецЕсли;
	
//#Если МобильныйКлиент Тогда
//	НастроитьВидимостьДеревоНастройки(Элементы, Ложь);
//#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиСтраницаПерсональныеНастройкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКСтраницеНастроек(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиСтраницаИнтеграцияСДругимиПрограммамиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКСтраницеНастроек(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиСтраницаОбменЭлектроннымиДокументамиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКСтраницеНастроек(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиСтраницаАдминистрированиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКСтраницеНастроек(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьВозможностьНажатие(Элемент)
	
	УправлениеНебольшойФирмойКлиент.ПредложитьВозможностьНажатие("Настройка программы");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийНастроекУНФ

&НаКлиенте
Процедура СписокСостоянияОригиналовПервичныхДокументовНажатие(Элемент)
	ОткрытьФорму("Справочник.СостоянияОригиналовПервичныхДокументов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура СписокСостоянияСобытийИЗаданийНажатие(Элемент)
	ОткрытьФорму("Справочник.СостоянияСобытий.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаЕГАИСНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.НастройкиОбменаЕГАИС.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиИСМПНажатие(Элемент)
	ОткрытьФорму("Обработка.ПанельАдминистрированияИСМП.Форма.НастройкиИСМП");
КонецПроцедуры

&НаКлиенте
Процедура ВыборОператораТелефонииИНастройкаИнтеграцииНажатие(Элемент)
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаТелефонии");
КонецПроцедуры

&НаКлиенте
Процедура ВыборСервисаРассылокИНастройкаИнтеграцииНажатие(Элемент)
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаИнтеграцииМассовойРассылки");
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВзаимодействияПриИзменении(Элемент)
	Если РегистрацияВзаимодействия Тогда
		ПоказатьПодключениеОбсуждений();
	Иначе
		ПоказатьОтключениеОбсуждений();
	КонецЕсли;
	РегистрацияВзаимодействия = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникВидыЗаказовПокупателейНажатие(Элемент)
	ОткрытьФорму("Справочник.ВидыЗаказовПокупателей.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура РассылкаЭлектронныхЧековРасписаниеНажатие(Элемент)
	НачатьИзменениеРасписанияРегламентногоЗадания("РассылкаЭлектронныхЧеков", Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОчередьЭлектронныхЧековНажатие(Элемент)
	ОткрытьФорму("Справочник.ОчередьЭлектронныхЧековКОтправке.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСправочникВидыЗаказНарядовНажатие(Элемент)
	ОткрытьФорму("Справочник.ВидыЗаказНарядов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПереводыВПутиНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.ПрименениеПереводовВПути.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНапоминанияПользователейНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.НапоминанияПользователя.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическиЗагружатьЭлектроннуюПочтуРасписаниеНажатие(Элемент)
	ОбменСGoogleКлиент.ОткрытьДиалогНастройкиРасписания(ПредопределенноеЗначение("Перечисление.ОбластиДоступаGoogle.Почта"));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДиапазоновSKUВесовогоТовараНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.НастройкаДиапазоновSKU");
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОПодключенииКассКФискальномуРегистраторуНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://v8.1c.ru/cnt.jsp/:kd_unf:/https://portal.1c.ru/applications/56");
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееО54ФЗНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://v8.1c.ru/cnt.jsp/:kd_unf:/http://v8.1c.ru/kkt/");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЯндексДоставкиНажатие(Элемент)
	ОткрытьФорму("Справочник.НастройкиЯндексДоставки.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура Декорация2Нажатие(Элемент)
	ОткрытьФорму("ПланОбмена.ОбменУправлениеНебольшойФирмойСайт.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОбменССайтомНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://1cfresh.com/articles/unf_site");
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУчетныеЗаписиНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/command/РегистрСведений.УчетныеЗаписиПользователя.Команда.НастроитьУчетныеЗаписи");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПодписиПисемНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/command/Обработка.НастройкаПрограммы.Команда.НастройкаПодписиПисем");
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныСообщенийНажатие(Элемент)
	ОткрытьФорму("Справочник.ШаблоныСообщений.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьКалендарьGoogle(Команда)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
		"e1cib/command/Обработка.ОбменСGoogle.Команда.СинхронизироватьКалендарьGoogle");
КонецПроцедуры

&НаКлиенте
Процедура РабочийКаталогПечатиНажатие(Элемент)
	РаботаСФайламиКлиент.ОткрытьФормуНастройкиРабочегоКаталога();
КонецПроцедуры

&НаКлиенте
Процедура СведенияОПользователеНажатие(Элемент)
	ПоказатьЗначение(Неопределено, ПользователиКлиент.АвторизованныйПользователь());
КонецПроцедуры

&НаКлиенте
Процедура ПолнотекстовыйПоискНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/app/Обработка.ПолнотекстовыйПоискВДанных");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДоступаКПроксиНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НастройкаПроксиНаКлиенте", Истина);
	ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеПриЗавершенииПрограммыПриИзменении(Элемент)
	ПерсональныеНастройки = Новый Структура;
	ПерсональныеНастройки.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ПодтверждениеПриЗавершенииПрограммы);
	ОбщегоНазначенияКлиент.СохранитьПерсональныеНастройки(ПерсональныеНастройки);
	
	ПодтверждениеПриЗавершенииПрограммыПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПодтверждениеПриЗавершенииПрограммыПриИзмененииСервер()
	
	ПерсональныеНастройки = Новый Структура;
	ПерсональныеНастройки.Вставить("ЗапрашиватьПодтверждениеПриЗавершенииПрограммы", ПодтверждениеПриЗавершенииПрограммы);
	ОбщегоНазначения.СохранитьПерсональныеНастройки(ПерсональныеНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСканированияНажатие(Элемент)
	РаботаСФайламиКлиент.ОткрытьФормуНастройкиСканирования();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаРабочегоКаталогаФайловНажатие(Элемент)
	РаботаСФайламиКлиент.ОткрытьФормуНастройкиРабочегоКаталога();
КонецПроцедуры

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайламиНажатие(Элемент)
	НачатьУстановкуРасширенияРаботыСФайлами(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЭлектроннойПодписиИШифрованияНажатие(Элемент)
	ЭлектроннаяПодписьКлиент.ОткрытьНастройкиЭлектроннойПодписиИШифрования();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРасширениеРаботыСКриптографиейНажатие(Элемент)
	НачатьУстановкуРасширенияРаботыСКриптографией(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОбязательностиЗаполненияИсточникПривлеченияНажатие(Элемент)
	ОткрытьФорму("Справочник.ИсточникиПривлеченияПокупателей.Форма.ФормаВыбораОбязательногоЗаполнения");
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОНастройкеПравДоступаНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/db/updinfo#content:142:1:issogl2_8");
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументыКорректировкиРегистровНажатие(Элемент)
	ОткрытьФорму("Документ.КорректировкаРегистров.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСквознойКонтрольДублейНоменклатурыНажатие(Элемент)
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаКонтроляДублейНоменклатуры");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСквознойКонтрольДублейНажатие(Элемент)
	ОткрытьФорму("Обработка.НастройкаПрограммы.Форма.НастройкаСквозногоКонтроляДублей");
КонецПроцедуры

&НаКлиенте
Процедура ФункциональнаяОпцияПлатежныйКалендарьПриИзменении(Элемент)
	
	ПриИзмененииЭлементаУНФ(Элемент);
	
	Если НЕ ФункциональнаяОпцияПлатежныйКалендарь И ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств Тогда
		ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств = Ложь;
		ПриИзмененииЭлементаУНФ(Элементы.ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтеграцияСМессенджерамиНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ПодключениеОбсуждений.Форма.НастройкиСообщенийИзДругихПрограмм",,ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийНастроекБЭД

&НаКлиенте
Процедура ПодробнееОТорговыхПредложенияхНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://its.1c.ru/bmk/unf16/BN_TradeOffers");
КонецПроцедуры

&НаКлиенте
Процедура ПубликацияТорговыхПредложенийНажатие(Элемент)
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ПомощникПубликации",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПоискТорговыхПредложенийНажатие(Элемент)
	ОткрытьФорму("Обработка.ТорговыеПредложения.Форма.ПоискПоОтборам",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РаботаСНоменклатуройПанельАдминистрированияНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
		"e1cib/command/Обработка.РаботаСНоменклатурой.Команда.РаботаСНоменклатурой");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОбменаСБанкамиНажатие(Элемент)
	ОткрытьФорму("Справочник.НастройкиОбменСБанками.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияЭДООбменСБанкамиНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/db/bspdoc#content:303:1:issogl1_1.2_обмен_с_банками");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЯндексКассыНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("e1cib/list/Справочник.НастройкиЯндексКассы");
КонецПроцедуры

&НаКлиенте
Процедура СостояниеИнтеграцииЯндексКассаНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.СтатусОбменовСЯндексКассой.Форма.ФормаПросмотраСостоянияОбменов");
КонецПроцедуры

&НаКлиенте
Процедура ШаблоныСообщенийЯндексКассаНажатие(Элемент)
	ОткрытьФорму("Справочник.ШаблоныСообщений.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура ПолучатьУведомленияОтЯндексКассыАвтоматическиПриИзменении(Элемент)
	ПолучатьУведомленияОтЯндексКассыАвтоматическиПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПолучатьУведомленияОтЯндексКассыАвтоматическиПриИзмененииСервер()
	ИнтеграцияСЯндексКассойУНФ.ИзменитьСостояниеРегламентногоЗаданияЯндексКасса(ПолучатьУведомленияОтЯндексКассыАвтоматически);
	ПриУстановкеДоступностиНастроекУНФ("ПолучатьУведомленияОтЯндексКассыАвтоматически");
КонецПроцедуры

&НаКлиенте
Процедура ПолучениеУведомленийОтЯндексКассыРасписаниеНажатие(Элемент)
	НачатьИзменениеРасписанияРегламентногоЗадания("ПолучениеУведомленийОтЯндексКассы");
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияИнтеграцияЯндексКассаНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://its.1c.ru/db/metod81#content:7052:hdoc");
КонецПроцедуры

&НаКлиенте
Процедура ТиповыеСоглашенияОбИспользованииЭДНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура СоглашенияОбИспользованииЭДНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.НастройкиОтправкиЭлектронныхДокументов.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЭлектроннойПодписиИШифрованияНажатие(Элемент)
	ОткрытьФорму("ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования");
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтправкуЭД(Команда)
	
	ОткрытьНастройкуРасписанияОбмена("ОтправкаЭлектронныхДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПолучениеЭД(Команда)
	
	ОткрытьНастройкуРасписанияОбмена("ПолучениеЭлектронныхДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОповещенияЭДО(Команда)
	
	ОткрытьНастройкуРасписанияОбмена("ПроверкаНовыхЭлектронныхДокументов");	
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПометкуНаУдалениеПакетовЭД(Команда)
	
	ОткрытьНастройкуРасписанияОбмена("ПометкаНаУдалениеПакетовЭД");
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключениеКСервису1С_ЭДОНажатие(Элемент)
	ОбменСКонтрагентамиКлиент.ПомощникПодключенияКСервису1СЭДО();
КонецПроцедуры

&НаКлиенте
Процедура ПомощникПодключенияКСервисуБизнесСетьНажатие(Элемент)
	ОткрытьФорму("Обработка.БизнесСеть.Форма.РегистрацияОрганизаций");
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияЭДОНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/db/bspdoc#content:303:1:issogl1_1.1_обмен_с_контрагентами");
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияЭДОБизнесСетьНажатие(Элемент)
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("http://its.1c.ru/db/bspdoc#content:303:1:issogl1_1.4_бизнес-сеть");
КонецПроцедуры

&НаКлиенте
Процедура НастройкиНумерацииДоговоровОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "Нумерация" Тогда
		ОткрытьФорму("Справочник.НастройкиНумерацииДоговоровКонтрагентов.ФормаСписка");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ШаблоныНаименований" Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Новый Структура("ВидНаименования", ПредопределенноеЗначение("Перечисление.ВидыНаименованийОбъектов.ДоговорКонтрагента")));
		ОткрытьФорму("Справочник.ШаблоныНаименований.ФормаСписка", ПараметрыФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическуюОтправкуЭДПриИзменении(Элемент)
	
	Если ИспользоватьАвтоматическуюОтправкуЭД Тогда
		
		ИспользоватьАвтоматическуюОтправкуЭД = Ложь; // установим флаг только по результатам проверок
		НачатьПроверкуРегламентныхЗаданийНаСервере(Истина, "Отправка");
		ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий(Истина);
		
	Иначе
		
		ИзменитьИспользованиеЗадания("ОтправкаЭлектронныхДокументов", ИспользоватьАвтоматическуюОтправкуЭД);
		Элементы.ОтправкаЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическуюОтправкуЭД;
		Элементы.КнопкаЕстьПроблемаОтправка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьАвтоматическоеПолучениеЭДПриИзменении(Элемент)
	
	Если ИспользоватьАвтоматическоеПолучениеЭД Тогда
		
		ИспользоватьАвтоматическоеПолучениеЭД = Ложь; // установим флаг только по результатам проверок
		НачатьПроверкуРегламентныхЗаданийНаСервере(Истина, "Получение");
		ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий(Истина);
		
	Иначе
		
		ИзменитьИспользованиеЗадания("ПолучениеЭлектронныхДокументов", ИспользоватьАвтоматическоеПолучениеЭД);
		Элементы.ПолучениеЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическоеПолучениеЭД;
		Элементы.КнопкаЕстьПроблемаПолучение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещатьОСобытияхЭДОПриИзменении(Элемент)
	
	ИзменитьИспользованиеЗадания("ПроверкаНовыхЭлектронныхДокументов", ОповещатьОСобытияхЭДО);
	Элементы.ПроверкаНовыхЭлектронныхДокументов.Доступность = ОповещатьОСобытияхЭДО;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОповещатьОСобытияхЭДО Тогда
		Если ОповещатьОСобытияхЭДО() Тогда
			Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
				МодульОбменаСКонтрагентами = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиКлиент");
				МодульОбменаСКонтрагентами.ИзменитьОповещенияЭДО(Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
			МодульОбменаСКонтрагентами = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменСКонтрагентамиКлиент");
			МодульОбменаСКонтрагентами.ИзменитьОповещенияЭДО();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомечатьНаУдалениеПакетыЭДПриИзменении(Элемент)
	
	ИзменитьИспользованиеЗадания("ПометкаНаУдалениеПакетовЭД", ПомечатьНаУдалениеПакетыЭД);
	
	Элементы.ПометкаНаУдалениеПакетовЭД.Доступность = ПомечатьНаУдалениеПакетыЭД;
	Элементы.ГруппаСрокХраненияПакетов.Доступность = ПомечатьНаУдалениеПакетыЭД;
	
	Если ПомечатьНаУдалениеПакетыЭД И Не ЗначениеЗаполнено(СрокХраненияПакетаЭД) Тогда
		СрокХраненияПакетаЭД = 90; // по умолчанию в днях
		ПриИзмененииЭлементаУНФ(Элементы.СрокХраненияПакетаЭД, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура АвтоПодборНомеровГТДПриИзмененииНаСервере();
	
	НовоеЗначение = ?(АвтоПодборНомеровГТД = Истина, Перечисления.ДаНет.Да, Перечисления.ДаНет.Нет);
	
	Константы.АвтоПодборНомеровГТД.Установить(НовоеЗначение);
	
КонецПроцедуры

#Область УНФ_РаботаСНастройками

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ПриИзмененииЭлементаУНФ(Элемент, ОбновлятьИнтерфейс = Истина)
	
	ОчиститьСообщения();
	
	ИмяКонстанты = ПриИзмененииРеквизитаСерверУНФ(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммыУНФ", 2, Истина);
	КонецЕсли;
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
	БСП__ОбщН__НаборКонстантИспользоватьЭлектронныеПодписи = ИспользоватьЭлектронныеПодписи;
	Подключаемый_ПриИзмененииРеквизита(Элементы.БСП__ОбщН__ИспользоватьЭлектронныеПодписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммыУНФ()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ПолучитьЗначенияКонстантРазмещенныхНаФормеУНФ()
	
	Для каждого Константа Из Метаданные.Константы Цикл
		ИмяРеквизитаПеренесенногоИзНабораВФорму = Константа.Имя;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяРеквизитаПеренесенногоИзНабораВФорму) Тогда
			ЭтотОбъект[ИмяРеквизитаПеренесенногоИзНабораВФорму] = НаборКонстант[Константа.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСерверУНФ(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеРеквизитаУНФ(РеквизитПутьКДанным);
	Прочитать();
	ПриУстановкеДоступностиНастроекУНФ(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизитаУНФ(РеквизитПутьКДанным)
	
	НовоеЗначение = ЭтотОбъект[РеквизитПутьКДанным];
	
	Отказ = Ложь;
	ПроверитьКорректностьНастройкиПередИзменениемУНФ(РеквизитПутьКДанным, НовоеЗначение, Отказ);
	Если Отказ Тогда
		Возврат "";
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	ПриСохраненииЗначенияНастройкиУНФ(РеквизитПутьКДанным, НовоеЗначение, СтандартнаяОбработка);
	Если НЕ СтандартнаяОбработка Тогда
		Возврат "";
	КонецЕсли;
	
	Если ВсеИменаКонстант().Найти(РеквизитПутьКДанным) Тогда
		ИмяКонстанты = РеквизитПутьКДанным;
	Иначе
		ИмяКонстанты = "";
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяКонстанты) Тогда
		Возврат "";
	КонецЕсли;
	
	СохранитьЗначениеНастройкиАвтоматическиУНФ(ИмяКонстанты, НовоеЗначение);
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Процедура ПроверитьКорректностьНастройкиПередИзменениемУНФ(РеквизитПутьКДанным, НовоеЗначение, Отказ)
	
	ТекстОшибки = "";
	ПриПроверкеКорректностиНастройкиПередИзменениемУНФ(РеквизитПутьКДанным, НовоеЗначение, ТекстОшибки);
	
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,, РеквизитПутьКДанным, Отказ);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеНастройкиАвтоматическиУНФ(ИмяКонстанты, НовоеЗначение)
	
	КонстантаМенеджер = Константы[ИмяКонстанты];
	
	Если НаборКонстант[ИмяКонстанты] <> НовоеЗначение Тогда
		КонстантаМенеджер.Установить(НовоеЗначение);
		НаборКонстант[ИмяКонстанты] = НовоеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УНФ_РаботаСНастройкамиРеализация

&НаСервере
Процедура ПриПолученииЗначенийНастроекУНФ()
	
	УстановитьПривилегированныйРежим(Истина);
	АвтоПодборНомеровГТД = (Константы.АвтоПодборНомеровГТД.Получить() = Перечисления.ДаНет.Да);
	ИспользоватьТелефонию = Константы.ИспользоватьМобильнуюТелефонию.Получить() ИЛИ Константы.ИспользоватьОблачнуюТелефонию.Получить();
	РегистрацияВзаимодействия = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	ИспользоватьЧатботов = Константы.ИспользоватьЧатботов.Получить();
	КонтрагентДляПредоплаты = Константы.КонтрагентДляПодарочныхСертификатов.Получить();
	ОтправкаЭлектронныхЧековПослеПробитияЧека = Число(Не Константы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Получить());
	РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.РассылкаЭлектронныхЧеков);
	АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию = ?(РегЗадание = Неопределено, Неопределено, РегЗадание.Использование);
	ИспользоватьРемонты2 = Константы.ИспользоватьРемонты.Получить();
	ОтправлятьСлепыеКопииПисем = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтправкиСкрытыхКопий", "ОтправлятьСлепыеКопииПисем", Ложь);
	АдресПолучателяСкрытойКопии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтправкиСкрытыхКопий", "АдресПолучателяСкрытойКопии", "");
	ИмяОтправителяSMS = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиSMS", "ИмяОтправителяSMS", "");
	ОтключенныеОбластиДоступа = РегистрыСведений.СеансовыеДанныеGoogle.ОтключенныеОбластиДоступа(Пользователи.ТекущийПользователь());
	СинхронизацияКалендаряGoogle = ОтключенныеОбластиДоступа.Найти(Перечисления.ОбластиДоступаGoogle.Календарь) = Неопределено;
	ПолучатьУведомленияОтЯндексКассыАвтоматически = ИнтеграцияСЯндексКассойУНФ.ПолучитьСостояниеРегламентногоЗаданияЯндексКасса();
	РегЗадание = РегистрыСведений.ЗаданияОбменаСGoogle.РегламентноеЗадание(Перечисления.ОбластиДоступаGoogle.Почта);
	АвтоматическиЗагружатьПочту = ?(РегЗадание = Неопределено, Ложь, РегЗадание.Использование);
	ПодтверждениеПриЗавершенииПрограммы = СтандартныеПодсистемыСервер.ЗапрашиватьПодтверждениеПриЗавершенииПрограммы();
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", Истина);
	СпрашиватьРежимРедактированияПриОткрытииФайла = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", Истина);
	ПоказыватьПодсказкиПриРедактированииФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "ПоказыватьПодсказкиПриРедактированииФайлов", Истина);
	ДействиеСФайламиПоДвойномуЩелчкуМыши = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл);
	СпособСравненияВерсийФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов", Перечисления.СпособыСравненияВерсийФайлов.MicrosoftOfficeWord);
	
КонецПроцедуры

&НаСервере
Процедура ПриПроверкеКорректностиНастройкиПередИзменениемУНФ(РеквизитПутьКДанным, НовоеЗначение, ТекстОшибки)
	
	Если РеквизитПутьКДанным = "ИспользоватьНесколькоОрганизаций" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьИспользоватьНесколькоОрганизаций();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "УчетПоКомпании" Тогда
		
		Если НовоеЗначение Тогда
			Если УправлениеНебольшойФирмойСервер.ЕстьДвиженияПоДругимОрганизациям(Справочники.Организации.ОсновнаяОрганизация) Тогда
				ТекстОшибки = НСтр("ru='В базе есть движения по организации, отличной от основной. Для включения опции необходимо очистить данные по прочим организациям.'");
			КонецЕсли;
		Иначе
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьУчетПоКомпании();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "Компания" Тогда
		
		Если Не ЗначениеЗаполнено(НовоеЗначение) И Константы.УчетПоКомпании.Получить() Тогда
			ТекстОшибки = НСтр("ru='Не заполнена организация-компания для ведения учета по компании'");
		ИначеЕсли НовоеЗначение <> Константы.Компания.Получить() Тогда
			Если УправлениеНебольшойФирмойСервер.ЕстьДвиженияПоДругимОрганизациям(НовоеЗначение) Тогда
				ТекстОшибки = НСтр("ru='В базе есть движения по организации, отличной от выбранной. Для включения опции необходимо очистить данные по прочим организациям.'");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ПередачаТоваровМеждуОрганизациями" Тогда
		
		Если НовоеЗначение Тогда
			Если УчетПоКомпании Тогда
				ТекстОшибки = НСтр("ru='Включена настройка учета по компании. Для включения опции необходимо отключить учет по компании '");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоНесколькимПодразделениям" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоНесколькимПодразделениям.Получить()
			И Справочники.СтруктурныеЕдиницы.КоличествоСтруктурныхЕдиниц(Перечисления.ТипыСтруктурныхЕдиниц.Подразделение, Ложь) > 0 Тогда
			
			ТекстОшибки = НСтр("ru='В базе имеются подразделения, отличные от основного! Снятие опции запрещено!'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить()
			И Справочники.НаправленияДеятельности.КоличествоНаправленийДеятельности(Ложь, Ложь) > 0 Тогда
			
			ТекстОшибки = НСтр("ru='В базе имеются направления деятельности, отличные от основного! Снятие опции запрещено!'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов" Тогда
		
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов.Получить()
			И Не ПолучитьФункциональнуюОпцию("РазноситьОплатуОтЭквайрераПоЭквайринговымОперациям")
			И РегистрыНакопления.РасчетыПоЭквайрингу.ЕстьДвиженияПоЭквайрингу() Тогда
			
			ТекстОшибки = НСтр("ru = 'Регистр накопления ""Расчеты по эквайрингу"" содержит информацию об эквайринговых операциях! Установка опции запрещена!
						|Выполнить анализ можно в отчете ""Расчеты по эквайрингу (сводно)"" с детализацией до регистратора. Отчет вызывается из раздела ""Деньги"".'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетВнеоборотныхАктивов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетВнеоборотныхАктивов.Получить()
			И Справочники.ВнеоборотныеАктивы.ЕстьДвиженияПоВнеоборотнымАктивам() Тогда
			
			ТекстОшибки = НСтр("ru='В базе присутствуют движения по внеоборотным активам! Снятие опции запрещено!'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьНесколькоВариантовКП" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияНесколькоВариантовКП();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтрольДоговоровКонтрагентов" Тогда
		
		Если УправлениеНебольшойФирмойПовтИсп.ТребуетсяКонтрольДоговоровКонтрагентов() 
			И НовоеЗначение = 1 Тогда
			ТекстОшибки = НСтр("ru = 'Настроена синхронизация с ""1C: Бухгалтерия предприятия, контролировать договора необходимо обязательно.'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьСкидкиНаценки();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьДисконтныеКарты" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьДисконтныеКарты();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодарочныеСертификаты" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПодарочныеСертификаты();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтрагентДляПредоплаты" Тогда
		
		ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказИзменитьКонтрагентДляПредоплаты();
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПередачаТоваровНаКомиссию" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПередачаТоваровНаКомиссию.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПередачаТоваровНаКомиссию();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПриемТоваровНаКомиссию" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПриемТоваровНаКомиссию.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПриемТоваровНаКомиссию();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьРемонты" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьРемонты.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьРемонты();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьНаборы" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьНаборы.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьНаборы();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьВидыЗаказовПокупателей" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьВидыЗаказовПокупателей();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияУчетРозничныхПродаж();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтролироватьОстаткиПриПробитииЧековККМ" Тогда
		
		// От значения константы зависит работа РМК.
		ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятиеФункциональнаяОпцияКонтролироватьОстаткиПриПробитииЧековККМ();
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговле();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьБиллинг" Тогда
		
		Если НЕ НовоеЗначение И Справочники.ДоговорыКонтрагентов.ЕстьДоговорыОбслуживания() Тогда
			ТекстОшибки = НСтр("ru='В базе имеются договоры обслуживания! Снятие опции запрещено!'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "БиллингВестиУчетРасходовПоДоговорамОбслуживания" Тогда
		
		Если НЕ НовоеЗначение И Справочники.ДоговорыКонтрагентов.ЕстьДоговорыОбслуживанияСУникальнымиНаправлениямиДеятельности() Тогда
			ТекстОшибки = НСтр("ru='В базе имеются договоры обслуживания с выбранными направлениями деятельности! Снятие опции запрещено!'");
		КонецЕсли;
		Если НЕ НовоеЗначение И Справочники.ТарифныеПланыДоговоровОбслуживания.ЕстьТарифныеПланыСУчетомЗатрат() Тогда
			ТекстОшибки = НСтр("ru='В базе имеются тарифные планы с заданными правилами выставления затрат! Снятие опции запрещено!'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоНесколькимСкладам" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятиеУчетПоНесколькимСкладам();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятиеРазрешитьСкладыВТабличныхЧастях();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьХарактеристики" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьХарактеристики.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьХарактеристики();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПартии" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПартии.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПартии();
		КонецЕсли;
			
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьНеуникальныеШтрихКоды" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьНеуникальныеШтрихКоды.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьКонстантуИспользоватьНеуникальныеШтрихКоды();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьСерийныеНомера" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьСерийныеНомера.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьСерийныеНомера();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтрольОстатковСерийныхНомеров" Тогда
		
		Если НовоеЗначение = Ложь И Константы.КонтрольОстатковСерийныхНомеров.Получить() = Истина Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьСерийныеНомера();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетГТД" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетГТД.Получить()
			И РегистрыНакопления.ЗапасыВРазрезеГТД.ЕстьОстаткиПоЗапасамВРазрезеГТД() Тогда
			
			ТекстОшибки = НСтр("ru='В базе есть остатки по запасам в разрезе ГТД. Снятие флага запрещено!'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтролироватьОстаткиПоНомерамГТД" Тогда
		
		Если НЕ ГрузовыеТаможенныеДекларацииСервер.МожноВключитьКонтролироватьОстаткиПоНомерамГТД() Тогда
			ТекстОшибки = НСтр("ru='Нельзя изменить значение опции Контроль остатков в разрезе ГТД, потому что в программе зафиксированы отрицательные остатки по ГТД.'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетЦенКонтрагентов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетЦенКонтрагентов.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияУчетЦенКонтрагентов();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетНоменклатурыПоставщиков" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетЦенКонтрагентов.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияУчетЦенКонтрагентов();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияРезервированиеЗапасов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияРезервированиеЗапасов.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияРезервированиеЗапасов();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПриемЗапасовНаОтветхранение" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПриемЗапасовНаОтветхранение.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПриемЗапасовНаОтветхранение();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПередачаСырьяВПереработку" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПередачаСырьяВПереработку.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПередачаСырьяВПереработку();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПередачаЗапасовНаОтветхранение" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПередачаЗапасовНаОтветхранение.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПередачаЗапасовНаОтветхранение();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОрдерныйСклад" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьОрдерныйСклад.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьОрдерныйСклад();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоЯчейкам" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияУчетПоЯчейкам.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияУчетПоЯчейкам();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодсистемуРаботы.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуРаботы();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьВидыЗаказНарядов" Тогда
		
		Если Не НовоеЗначение Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьВидыЗаказНарядов();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьРемонты2" Тогда
		
		Если Не НовоеЗначение И Константы.ИспользоватьРемонты.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьРемонты();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуПроизводство();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЭтапыПроизводства" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьЭтапыПроизводства.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятиеФункциональнаяОпцияИспользоватьЭтапыПроизводства();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятиеФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПараметрическиеСпецификации" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПараметрическиеСпецификации.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятиеФункциональнаяОпцияИспользоватьПараметрическиеСпецификации();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьТехоперации" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьТехоперации.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьТехоперации();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПереработкаДавальческогоСырья" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияПереработкаДавальческогоСырья.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияПереработкаДавальческогоСырья();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяУчетВалютныхОпераций" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяУчетВалютныхОпераций.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяУчетВалютныхОпераций();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ВалютаУчета" Тогда
		
		ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказИзменитьВалютаУчета();
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПлатежныйКалендарь" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяИспользоватьСтатьиДвиженияДенежныхСредств();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияКредитыИЗаймы" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияКредитыИЗаймы.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияКредитыИЗаймы();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПодсистемуЗарплата();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьСовместительство" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьСовместительство.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьСовместительство();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "АдресПолучателяСкрытойКопии" Тогда
		
		ТекстОшибки = СобытияУНФКлиентСервер.ПроверитьКорректностьАдресаЭлектроннойПочты(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ИдентификацияПриложенияGoogle" Тогда
		
		Если Не ПустаяСтрока(НовоеЗначение) Тогда
			ТекстОшибки = ОбменСGoogle.ИдентификацияПриложенияGoogleКорректна(НовоеЗначение);
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОбменССайтами" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьОбменССайтами.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьИспользоватьОбменССайтом();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование" Тогда
		
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияИспользоватьПодключаемоеОборудование.Получить() Тогда
			ТекстОшибки = УправлениеНебольшойФирмойСервер.ОтказСнятьФункциональнаяОпцияИспользоватьПодключаемоеОборудование();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "АвтоматическиЗагружатьПочту" Тогда
		
		РегЗадание = РегистрыСведений.ЗаданияОбменаСGoogle.РегламентноеЗадание(Перечисления.ОбластиДоступаGoogle.Почта);
		Если РегЗадание = Неопределено Тогда
			ТекстОшибки = НСтр("ru='Учетная запись электронной почты не подключена'");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "МаксимальныйРазмерФайла" Тогда
		
		ТекстОшибки = ?(НовоеЗначение = 0, НСтр("ru='Поле ""Максимальный размер файла"" не заполнено.'"),"");
		
	ИначеЕсли РеквизитПутьКДанным = "МаксимальныйРазмерФайлаОбластиДанных" Тогда
		
		ТекстОшибки = ?(НовоеЗначение = 0, НСтр("ru='Поле ""Максимальный размер файла"" не заполнено.'"),"");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииЗначенияНастройкиУНФ(РеквизитПутьКДанным, НовоеЗначение, СтандартнаяОбработка)
	
	Если РеквизитПутьКДанным = "ИспользоватьНесколькоОрганизаций" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ИспользоватьНесколькоОрганизаций.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ИспользоватьНесколькоОрганизаций");
		Если Не НовоеЗначение Тогда
			Константы.УчетПоКомпании.Установить(Ложь);
			Константы.Компания.Установить(Справочники.Организации.ПустаяСсылка());
			ИзмененныеКонстантыУНФ.Добавить("УчетПоКомпании");
			ИзмененныеКонстантыУНФ.Добавить("Компания");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "УчетПоКомпании" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.УчетПоКомпании.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("УчетПоКомпании");
		Если НовоеЗначение И Не ЗначениеЗаполнено(Константы.Компания.Получить()) Тогда
			Константы.Компания.Установить(Справочники.Организации.ОсновнаяОрганизация);
			ИзмененныеКонстантыУНФ.Добавить("Компания");
		ИначеЕсли Не НовоеЗначение Тогда
			Константы.Компания.Установить(Справочники.Организации.ПустаяСсылка());
			ИзмененныеКонстантыУНФ.Добавить("Компания");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОтчетность" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьОтчетность.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОтчетность");
		Если НовоеЗначение Тогда
			Константы.ВестиРасчетыПоДокументам.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ВестиРасчетыПоДокументам");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов");
		Если НовоеЗначение Тогда
			Константы.ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям.Установить(Истина);
			Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям");
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ВестиУчетМаркировкиПродукцииВГИСМ" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ВестиУчетМаркировкиПродукцииВГИСМ.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ВестиУчетМаркировкиПродукцииВГИСМ");
		Если НовоеЗначение Тогда
			Константы.ИспользоватьСерийныеНомера.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ИспользоватьСерийныеНомера");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьТелефонию" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если НЕ НовоеЗначение Тогда
			НачатьТранзакцию();
			Попытка
				Если ТелефонияСервер.СоздатьИзменитьСлужебногоПользователяТелефонии(Ложь) Тогда
					Константы.ИспользоватьМобильнуюТелефонию.Установить(Ложь);
					Константы.ИспользоватьОблачнуюТелефонию.Установить(Ложь);
					Константы.ИспользуемаяАТС.Установить(Перечисления.ДоступныеАТС.ПустаяСсылка());
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ТелефонияПереопределяемый.ЗаписатьЗапросВЖурналРегистрации("ИспользоватьТелефонию", ТекстОшибки, УровеньЖурналаРегистрации.Ошибка);
				ВызватьИсключение ТекстОшибки;
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьЧатботов" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЧатботСервер.ПереключитьИспользованиеЧатботов(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьЧатВОбсуждениях" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ИспользоватьЧатВОбсуждениях.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ИспользоватьЧатВОбсуждениях");
		Если НовоеЗначение Тогда
			ОбновитьПовторноИспользуемыеЗначения();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи");
		Если НовоеЗначение Тогда
			Документы.Событие.СоздатьПоставляемыеШаблоныСообщенийПоУслугам();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьЧатбот" Тогда
		
		СтандартнаяОбработка = Ложь;
		ЧатботСервер.ПереключитьИспользованиеЧатботов(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьМобильныйЛичныйКабинет" Тогда
		
		СтандартнаяОбработка = Ложь;
		НачатьТранзакцию();
		Попытка
			Константы.ИспользоватьМобильныйЛичныйКабинет.Установить(НовоеЗначение);
			КонструкторМобильногоПриложения.СоздатьИзменитьСлужебногоПользователяМобильногоЛичногоКабинета(НовоеЗначение);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьДисконтныеКарты" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Установить(НовоеЗначение);
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи");
		КонецЕсли;
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки");
			ДисконтныеКартыСервер.ПроверитьИСоздатьУсловиеПоДисконтнойКарте();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьБонусныеПрограммы" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьБонусныеПрограммы.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьБонусныеПрограммы");
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи");
		КонецЕсли;
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки");
		КонецЕсли;
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьДисконтныеКарты.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьДисконтныеКарты");
		КонецЕсли;
		Если НовоеЗначение Тогда
			РаботаСБонусами.СоздатьШаблоныСообщенийПоУмолчанию();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодарочныеСертификаты" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьПодарочныеСертификаты.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьПодарочныеСертификаты");
		Если НовоеЗначение Тогда
			РаботаСПодарочнымиСертификатами.СоздатьСлужебногоКонтрагента();
			ИзмененныеКонстантыУНФ.Добавить("КонтрагентДляПредоплаты");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "КонтрагентДляПредоплаты" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.КонтрагентДляПодарочныхСертификатов.Установить(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов");
		Если НовоеЗначение Тогда
			Константы.ИспользоватьСерийныеНомера.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ИспользоватьСерийныеНомера");
			Константы.КонтрольОстатковСерийныхНомеров.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("КонтрольОстатковСерийныхНомеров");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияУчетРозничныхПродаж");
		// Если установили опцию, то установим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		Если НовоеЗначение Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
			// Если нет движений оплаты платежными картами и
			// все 3 опции сброшены, то сбросим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		ИначеЕсли НЕ РегистрыНакопления.ОплатаПлатежнымиКартами.ЕстьДвиженияПоОплате()
			И НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле.Получить()
			И НЕ Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек.Установить(НовоеЗначение);
		Константы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговле.Установить(НовоеЗначение И Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить());
		
	ИначеЕсли РеквизитПутьКДанным = "ВариантВозвратаПоЗакрытойСмене" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ВариантВозвратаПоЗакрытойСмене.Установить(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ОтправкаЭлектронныхЧековПослеПробитияЧека" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтправкаЭлектронныхЧековПослеПробития = Не Булево(НовоеЗначение);
		Константы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Установить(ОтправкаЭлектронныхЧековПослеПробития);
		Если ОтправкаЭлектронныхЧековПослеПробития Тогда
			РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.РассылкаЭлектронныхЧеков);
			РегЗадание.Использование = НовоеЗначение;
			РегЗадание.Записать();
			ИзмененныеКонстантыУНФ.Добавить("АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию" Тогда
		
		СтандартнаяОбработка = Ложь;
		РегЗадание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.РассылкаЭлектронныхЧеков);
		РегЗадание.Использование = НовоеЗначение;
		РегЗадание.Записать();
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьБиллинг" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ИспользоватьБиллинг.Установить(НовоеЗначение);
		Если НовоеЗначение = Ложь Тогда
			Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Установить(Ложь);
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "БиллингВестиУчетРасходовПоДоговорамОбслуживания" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Установить(НовоеЗначение);
		Если НовоеЗначение И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Получить() Тогда
			Константы.ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности.Установить(НовоеЗначение);
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "БиллингГоловноеНаправлениеДеятельности" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.БиллингГоловноеНаправлениеДеятельности.Установить(НовоеЗначение);
		Справочники.НаправленияДеятельности.СгруппироватьНаправленияДеятельностиДоговоровОбслуживания();
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоЯчейкам" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если НовоеЗначение = Истина И НЕ Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Получить() Тогда
			Константы.ФункциональнаяОпцияУчетПоНесколькимСкладам.Установить(Истина);
		КонецЕсли;
		Константы.ФункциональнаяОпцияУчетПоЯчейкам.Установить(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьРемонты2" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ИспользоватьРемонты.Установить(НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы");
		Если НовоеЗначение Тогда
			Документы.ЗаказПокупателя.СоздатьПоставляемыеШаблоныСообщенийПоУслугам();
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьПодсистемуПроизводство.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьПодсистемуПроизводство");
		Если НовоеЗначение = Ложь Тогда
			Константы.ФункциональнаяОпцияПереработкаДавальческогоСырья.Установить(Ложь);
			Константы.ФункциональнаяОпцияИспользоватьТехоперации.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияПереработкаДавальческогоСырья");
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьТехоперации");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером");
		Если Не НовоеЗначение И Константы.ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям.Получить() = Истина Тогда
			Константы.ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияРазноситьОплатуОтЭквайрераПоЭквайринговымОперациям");
		КонецЕсли;
		
		// Если установили опцию, то установим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		Если НовоеЗначение Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
			// Если нет движений оплаты платежными картами и
			// все 4 опции сброшены, то сбросим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		ИначеЕсли НЕ РегистрыНакопления.ОплатаПлатежнымиКартами.ЕстьДвиженияПоОплате()
			И НЕ Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить()
			И НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле.Получить()
			И НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКредитом.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле");
		// Если установили опцию, то установим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
			// Если нет движений оплаты платежными картами и
			// все 4 опции сброшены, то сбросим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		ИначеЕсли НЕ РегистрыНакопления.ОплатаПлатежнымиКартами.ЕстьДвиженияПоОплате()
			И НЕ Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить()
			И НЕ Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Получить()
			И НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКредитом.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОплатуКредитом" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьОплатуКредитом.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКредитом");
		Если НовоеЗначение И Не Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Истина);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
			// Если нет движений оплаты платежными картами и
			// все 4 опции сброшены, то сбросим и служебную опцию "ФункциональнаяОпцияИспользоватьОплатуКартами".
		ИначеЕсли НЕ РегистрыНакопления.ОплатаПлатежнымиКартами.ЕстьДвиженияПоОплате()
			И НЕ Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Получить()
			И НЕ Константы.ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером.Получить()
			И НЕ Константы.ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле.Получить() Тогда
			Константы.ФункциональнаяОпцияИспользоватьОплатуКартами.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьОплатуКартами");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" Тогда
		
		СтандартнаяОбработка = Ложь;
		Константы.ФункциональнаяОпцияИспользоватьПодсистемуЗарплата.Установить(НовоеЗначение);
		ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьПодсистемуЗарплата");
		Если НовоеЗначение = Ложь Тогда
			Константы.ФункциональнаяОпцияИспользоватьСовместительство.Установить(Ложь);
			Константы.ФункциональнаяОпцияВестиШтатноеРасписание.Установить(Ложь);
			Константы.ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов.Установить(Ложь);
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияИспользоватьСовместительство");
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияВестиШтатноеРасписание");
			ИзмененныеКонстантыУНФ.Добавить("ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов");
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "АвтоматическиЗагружатьПочту" Тогда
		
		СтандартнаяОбработка = Ложь;
		РегЗадание = РегистрыСведений.ЗаданияОбменаСGoogle.РегламентноеЗадание(Перечисления.ОбластиДоступаGoogle.Почта);
		РегЗадание.Использование = НовоеЗначение;
		РегЗадание.Записать();
		
	ИначеЕсли РеквизитПутьКДанным = "ИспользоватьОбменСКассойMinikassir" Тогда
		
		Если НовоеЗначение Тогда
			Константы.ФункциональнаяОпцияУчетРозничныхПродаж.Установить(Истина);
		КонецЕсли;
		
	ИначеЕсли РеквизитПутьКДанным = "ОтправлятьСлепыеКопииПисем" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ПараметрыОтправкиСкрытыхКопий",
			"ОтправлятьСлепыеКопииПисем",
			НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "АдресПолучателяСкрытойКопии" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"ПараметрыОтправкиСкрытыхКопий",
			"АдресПолучателяСкрытойКопии",
			НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ИмяОтправителяSMS" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиSMS", "ИмяОтправителяSMS", НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "СинхронизацияКалендаряGoogle" Тогда
		
		СтандартнаяОбработка = Ложь;
		// todo
		//Обработки.НастройкаПрограммы.ДобавитьОповещение(ОповещенияНаКлиенте, "ОчиститьСеансовыеДанные", Новый Структура, Идентификатор);
		
		РегистрыСведений.СеансовыеДанныеGoogle.ОтключитьОбластьДоступа(
			Пользователи.ТекущийПользователь(),
			Перечисления.ОбластиДоступаGoogle.Календарь,
			Не НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы" Тогда
		
		СтандартнаяОбработка = Ложь;
		ХранилищеОбщихНастроек.Сохранить("НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы", НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "СпрашиватьРежимРедактированияПриОткрытииФайла" Тогда
		
		СтандартнаяОбработка = Ложь;
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ПоказыватьПодсказкиПриРедактированииФайлов" Тогда
		
		СтандартнаяОбработка = Ложь;
		ХранилищеОбщихНастроек.Сохранить("НастройкиОткрытияФайлов", "ПоказыватьПодсказкиПриРедактированииФайлов", НовоеЗначение);
		
	ИначеЕсли РеквизитПутьКДанным = "ДействиеСФайламиПоДвойномуЩелчкуМыши" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", НовоеЗначение);
		
	//ИначеЕсли РеквизитПутьКДанным = "СпособСравненияВерсийФайлов" Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	ХранилищеОбщихНастроек.Сохранить("НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов", НовоеЗначение);
	//	
	//ИначеЕсли РеквизитПутьКДанным = "ИспользоватьПрямойОбменЭлектроннымиДокументами" Тогда
	//	
	//	СтандартнаяОбработка = Ложь;
	//	Константы.ИспользоватьПрямойОбменЭлектроннымиДокументами.Установить(НовоеЗначение);
	//	
	//ИначеЕсли РеквизитПутьКДанным = "ИспользоватьАвтоматическуюОтправкуЭД" Тогда
		
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриУстановкеДоступностиНастроекУНФ(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "ИспользоватьНесколькоОрганизаций"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.УчетПоКомпании.Доступность = ИспользоватьНесколькоОрганизаций;
		Элементы.ГруппаПередачаТоваров.Доступность = ИспользоватьНесколькоОрганизаций;
		Элементы.ГруппаНастройкаПередачиТоваров.Доступность = ИспользоватьНесколькоОрганизаций;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ИспользоватьНесколькоОрганизаций"
		ИЛИ РеквизитПутьКДанным = "УчетПоКомпании"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.Компания.Доступность = ИспользоватьНесколькоОрганизаций И УчетПоКомпании;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ВестиСведенияДляДекларацийПоАлкогольнойПродукции.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		ИЛИ РеквизитПутьКДанным = "ВестиСведенияДляДекларацийПоАлкогольнойПродукции"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ДатаНачалаРегистрацииРозничныхПродажВЕГАИС.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж И ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ВестиСведенияДляДекларацийПоАлкогольнойПродукции" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС.Доступность = ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		ИЛИ РеквизитПутьКДанным = "ВестиСведенияДляДекларацийПоАлкогольнойПродукции"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.НастройкиОбменаЕГАИС.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж И ВестиСведенияДляДекларацийПоАлкогольнойПродукции;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки" ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбработкаВидыСкидокНаценокРучныеИАвтоматическиеОткрытьОкругления", "Доступность", ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки);
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодарочныеСертификаты" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.КонтрагентДляПредоплаты.Доступность = ФункциональнаяОпцияИспользоватьПодарочныеСертификаты;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодарочныеСертификаты" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов.Доступность = ФункциональнаяОпцияИспользоватьПодарочныеСертификаты;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПартии" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияПриемТоваровНаКомиссию.Доступность = ФункциональнаяОпцияИспользоватьПартии;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьВидыЗаказовПокупателей" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьСправочникВидыЗаказовПокупателей.Видимость = ИспользоватьВидыЗаказовПокупателей;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		ИЛИ РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.АрхивироватьЧекиККМПриЗакрытииКассовойСмены.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж И НЕ ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.КонтролироватьОстаткиПриПробитииЧековККМ.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		ИЛИ РеквизитПутьКДанным = "АрхивироватьЧекиККМПриЗакрытииКассовойСмены"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж И Не АрхивироватьЧекиККМПриЗакрытииКассовойСмены;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ВариантВозвратаПоЗакрытойСмене.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОтправкаЭлектронныхЧековПослеПробитияЧека.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		ИЛИ РеквизитПутьКДанным = "ОтправкаЭлектронныхЧековПослеПробитияЧека"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж И ОтправкаЭлектронныхЧековПослеПробитияЧека = 1;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		ИЛИ РеквизитПутьКДанным = "ОтправкаЭлектронныхЧековПослеПробитияЧека"
		ИЛИ РеквизитПутьКДанным = "АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.РассылкаЭлектронныхЧековРасписание.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж
			И ОтправкаЭлектронныхЧековПослеПробитияЧека = 1
			И АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьОчередьЭлектронныхЧеков.Доступность = ФункциональнаяОпцияУчетРозничныхПродаж;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьБиллинг" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.БиллингВестиУчетРасходовПоДоговорамОбслуживания.Доступность = ИспользоватьБиллинг;
	КонецЕсли;
	Если РеквизитПутьКДанным = "БиллингВестиУчетРасходовПоДоговорамОбслуживания" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.БиллингГоловноеНаправлениеДеятельности.Доступность = БиллингВестиУчетРасходовПоДоговорамОбслуживания;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоНесколькимСкладам" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях.Доступность = ФункциональнаяОпцияУчетПоНесколькимСкладам;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьСерийныеНомера" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.КонтрольОстатковСерийныхНомеров.Доступность = ИспользоватьСерийныеНомера;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияУчетГТД" ИЛИ РеквизитПутьКДанным = "" Тогда
		
		Элементы.КонтролироватьОстаткиПоНомерамГТД.Доступность = ФункциональнаяОпцияУчетГТД;
		Элементы.ТребоватьЗаполнениеГТДИмпортногоТовара.Доступность = ФункциональнаяОпцияУчетГТД;
		Элементы.АвтоПодборНомеровГТД.Доступность = ФункциональнаяОпцияУчетГТД;
		
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПартии" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияПриемЗапасовНаОтветхранение.Доступность = ФункциональнаяОпцияИспользоватьПартии;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьВидыЗаказНарядов.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуРаботы;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьВидыЗаказНарядов" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОткрытьСправочникВидыЗаказНарядов.Видимость = ИспользоватьВидыЗаказНарядов;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьРемонты.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуРаботы;
		Элементы.ИспользоватьРемонты2.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуРаботы;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуРаботы" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуРаботы;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство"
		ИЛИ РеквизитПутьКДанным = "ФункциональнаяОпцияРезервированиеЗапасов"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьЭтапыПроизводства.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуПроизводство
			И ФункциональнаяОпцияРезервированиеЗапасов;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЭтапыПроизводства"
		ИЛИ РеквизитПутьКДанным = "ФункциональнаяОпцияУчетПоНесколькимПодразделениям"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями.Доступность = ФункциональнаяОпцияИспользоватьЭтапыПроизводства
			И ФункциональнаяОпцияУчетПоНесколькимПодразделениям;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьТехоперации.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуПроизводство;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьТехоперации" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.АвтоматическиПланироватьОперацийЗаказомНаПроизводство.Доступность = ФункциональнаяОпцияИспользоватьТехоперации;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство"
		ИЛИ РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПартии"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияПереработкаДавальческогоСырья.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуПроизводство
			И ФункциональнаяОпцияИспользоватьПартии;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуПроизводство" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятия.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуПроизводство;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяУчетВалютныхОпераций" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.НациональнаяВалюта.Доступность = ФункциональнаяУчетВалютныхОпераций;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяУчетВалютныхОпераций" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ВалютаУчета.Доступность = ФункциональнаяУчетВалютныхОпераций;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияПлатежныйКалендарь" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств.Доступность = ФункциональнаяОпцияПлатежныйКалендарь;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяУчетВалютныхОпераций" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ЧастотаРасчетаКурсовыхРазниц.Доступность = ФункциональнаяУчетВалютныхОпераций;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОтчетность" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ВестиРасчетыПоДокументам.Доступность = НЕ ФункциональнаяОпцияИспользоватьОтчетность;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияВестиШтатноеРасписание.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуЗарплата;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияИспользоватьСовместительство.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуЗарплата;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодсистемуЗарплата" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов.Доступность = ФункциональнаяОпцияИспользоватьПодсистемуЗарплата;
	КонецЕсли;
	Если РеквизитПутьКДанным = "БСП__НПП__НаборКонстантОграничиватьДоступНаУровнеЗаписей"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьГруппыДоступаКонтрагентов.Доступность = БСП__НПП__НаборКонстантОграничиватьДоступНаУровнеЗаписей;
		Элементы.ИспользоватьГруппыДоступаЛидов.Доступность = БСП__НПП__НаборКонстантОграничиватьДоступНаУровнеЗаписей;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьГруппыДоступаКонтрагентов"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СправочникГруппыДоступаКонтрагентовОткрытьСписок", "Доступность", ИспользоватьГруппыДоступаКонтрагентов);
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьГруппыДоступаЛидов"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СправочникГруппыДоступаЛидовОткрытьСписок", "Доступность", ИспользоватьГруппыДоступаЛидов);
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СправочникПодключаемоеОборудованиеОткрытьПодключаемоеОборудование", "Доступность", ФункциональнаяОпцияИспользоватьПодключаемоеОборудование);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СправочникРабочиеМестаОткрытьСписок", "Доступность", ФункциональнаяОпцияИспользоватьПодключаемоеОборудование);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ИспользоватьОбменСПодключаемымОборудованиемOffline", "Доступность", ФункциональнаяОпцияИспользоватьПодключаемоеОборудование);
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование"
		ИЛИ РеквизитПутьКДанным = "ИспользоватьОбменСПодключаемымОборудованиемOffline"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"СправочникПравилаОбменаСПодключаемымОборудованиемOfflineОткрытьСписок",
			"Доступность",
			ФункциональнаяОпцияИспользоватьПодключаемоеОборудование И ИспользоватьОбменСПодключаемымОборудованиемOffline);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			"НастройкаДиапазоновSKUВесовогоТовара",
			"Доступность",
			ФункциональнаяОпцияИспользоватьПодключаемоеОборудование И ИспользоватьОбменСПодключаемымОборудованиемOffline);
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОбменССайтами" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.НастройкаОбменаССайтами.Доступность = ФункциональнаяОпцияИспользоватьОбменССайтами;
		Элементы.ПрефиксДляОбменаССайтом.Доступность = ФункциональнаяОпцияИспользоватьОбменССайтами;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьОбменССайтами"
		ИЛИ РеквизитПутьКДанным = "ФункциональнаяОпцияУчетРозничныхПродаж"
		ИЛИ РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек"
		ИЛИ РеквизитПутьКДанным = "ФункциональнаяОпцияИспользоватьПодключаемоеОборудование"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьОнлайнОплаты.Доступность = ФункциональнаяОпцияИспользоватьОбменССайтами
			И ФункциональнаяОпцияУчетРозничныхПродаж
			И ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек
			И ФункциональнаяОпцияИспользоватьПодключаемоеОборудование;
		КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьОбменБизнесСеть" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ПоискТорговыхПредложений.Доступность = ИспользоватьОбменБизнесСеть;
		Элементы.НеВыгружатьИзображенияТорговыхПредложений.Доступность = ИспользоватьОбменБизнесСеть;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьОбменСБанками" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.НастройкиОбменаСБанками.Доступность = ИспользоватьОбменСБанками;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьИнтеграциюСЯндексКассой" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.НастройкиЯндексКассы.Доступность = ИспользоватьИнтеграциюСЯндексКассой;
		Элементы.СостояниеИнтеграцииЯндексКасса.Доступность = ИспользоватьИнтеграциюСЯндексКассой;
		Элементы.ШаблоныСообщенийЯндексКасса.Доступность = ИспользоватьИнтеграциюСЯндексКассой;
		Элементы.ПолучатьУведомленияОтЯндексКассыАвтоматически.Доступность = ИспользоватьИнтеграциюСЯндексКассой;
	КонецЕсли;
	Если НЕ Элементы.ПолучатьУведомленияОтЯндексКассыАвтоматически.Доступность Тогда 
		ИнтеграцияСЯндексКассойУНФ.ИзменитьСостояниеРегламентногоЗаданияЯндексКасса(Ложь);
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьИнтеграциюСЯндексКассой"
		ИЛИ РеквизитПутьКДанным = "ПолучатьУведомленияОтЯндексКассыАвтоматически"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ПолучениеУведомленийОтЯндексКассыРасписание.Доступность = ИспользоватьИнтеграциюСЯндексКассой
			И ПолучатьУведомленияОтЯндексКассыАвтоматически;
		КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьОбменЭД" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ТиповыеСоглашенияОбИспользованииЭД.Доступность = ИспользоватьОбменЭД;
		Элементы.СоглашенияОбИспользованииЭД.Доступность = ИспользоватьОбменЭД;
		Элементы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Доступность = ИспользоватьОбменЭД;
		Элементы.ИспользоватьОтложеннуюОтправкуЭлектронныхДокументов.Доступность = ИспользоватьОбменЭД;
		Элементы.ГруппаИспользоватьОбменЭДПодчиненные.Доступность = ИспользоватьОбменЭД;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьАвтоматическуюОтправкуЭД" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ОтправкаЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическуюОтправкуЭД;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьАвтоматическоеПолучениеЭД" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ПолучениеЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическоеПолучениеЭД;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ОповещатьОСобытияхЭДО" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ПроверкаНовыхЭлектронныхДокументов.Доступность = ОповещатьОСобытияхЭДО;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ПомечатьНаУдалениеПакетыЭД" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ПометкаНаУдалениеПакетовЭД.Доступность = ПомечатьНаУдалениеПакетыЭД;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьЭлектронныеПодписи"
		ИЛИ РеквизитПутьКДанным = "БСП__ОбщН__НаборКонстантИспользоватьЭлектронныеПодписи"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.НастройкиЭлектроннойПодписиИШифрования.Доступность = ИспользоватьЭлектронныеПодписи;
		Элементы.ПодключениеКСервису1С_ЭДО.Доступность = ИспользоватьЭлектронныеПодписи;
	КонецЕсли;
	Если РеквизитПутьКДанным = "СинхронизацияКалендаряGoogle" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.СинхронизироватьКалендарьGoogle.Доступность = СинхронизацияКалендаряGoogle;
	КонецЕсли;
	Если РеквизитПутьКДанным = "АвтоматическиЗагружатьПочту" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.АвтоматическиЗагружатьЭлектроннуюПочтуРасписание.Доступность = АвтоматическиЗагружатьПочту;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ОтправлятьСлепыеКопииПисем" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.АдресПолучателяСкрытойКопии.Доступность = ОтправлятьСлепыеКопииПисем;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьНеуникальныеШтрихКоды" ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьНеуникальныеШтрихКоды.Доступность = Константы.МиграцияШтрихкодовВыполнена.Получить();
	КонецЕсли;
	Если РеквизитПутьКДанным = "ИспользоватьУчетОригиналовПервичныхДокументов"
		Или РеквизитПутьКДанным = "" Тогда
		Элементы.СостоянияОригиналовПервичныхДокументов.Доступность = ИспользоватьУчетОригиналовПервичныхДокументов;
	КонецЕсли;
	Если РеквизитПутьКДанным = "ПередачаТоваровМеждуОрганизациями" 
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.НастройкаПередачиТоваровМеждуОрганизациями.Доступность = ПередачаТоваровМеждуОрганизациями;
	КонецЕсли;
	Если РеквизитПутьКДанным = "РегистрацияВзаимодействия"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ИнтеграцияСМессенджерами.Доступность = РегистрацияВзаимодействия
			И ОбсужденияУНФИнтеграцияСМессенджерами.ИнтеграцииДоступны();
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервере
Процедура ПриУстановкеВидимостиНастроекУНФ()
	
	УстановитьВидимость(
		"ИспользоватьЧатВОбсуждениях",
		УправлениеНебольшойФирмойПовтИсп.ДоступнаНастройкаЧатВОбсуждениях()
		И УправлениеНебольшойФирмойПовтИсп.ИспользоватьЧатВОбсуждениях());
	УстановитьВидимость(
		"НастройкаДоступаКПрокси",
		Не ПолучитьФункциональнуюОпцию("ИспользуютсяПрофилиБезопасности"));
	УстановитьВидимость(
		"СправочникПодключаемоеОборудованиеОткрытьПодключаемоеОборудование1",
		РежимРаботы.ЭтоАдминистраторПрограммы);
	УстановитьВидимость(
		"ГруппаСинхронизацияКалендаряGoogle",
		ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных());
	УстановитьВидимость(
		"ИнформацияОбменССайтом",
		РежимРаботы.МодельСервиса);
	УстановитьВидимость(
		"ОтправкаЭлектронныхЧековПослеПробитияЧека",
		Не РежимРаботы.МодельСервиса);
	УстановитьВидимость(
		"АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию",
		Не РежимРаботы.МодельСервиса);
	УстановитьВидимость(
		"РассылкаЭлектронныхЧековРасписание",
		Не РежимРаботы.МодельСервиса);
	УстановитьВидимость(
		"ИспользоватьОбменСКассойMinikassir",
		РежимРаботы.МодельСервиса И Константы.ИспользоватьОбменССерверомШтрихМ.Получить());
	УстановитьВидимость(
		"ГруппаМобильныйЛичныйКабинет",
		РежимРаботы.ЭтоАдминистраторПрограммы И ОбщегоНазначения.РазделениеВключено());
	УстановитьВидимость(
		"УстановкаРасширенияРаботыСФайлами",
		РежимРаботы.ЭтоВебКлиент);
	УстановитьВидимость(
		"УстановитьРасширениеРаботыСКриптографией",
		РежимРаботы.ЭтоВебКлиент);
	УстановитьВидимость(
		"НастройкаСканирования",
		РежимРаботы.ЭтоАдминистраторПрограммы И НЕ РежимРаботы.ЭтоМобильныйКлиент);
	УстановитьВидимость(
		"ПоказыватьПодсказкиПриРедактированииФайлов",
		РежимРаботы.ЭтоВебКлиент);
	УстановитьВидимость(
		"ОбщаяКомандаОбновитьОтчеты",
		Не РежимРаботы.МодельСервиса И РежимРаботы.ЭтоАдминистраторСистемы);
	УстановитьВидимость(
		"ГруппаАвтоматическиЗагружатьПочту",
		Не РежимРаботы.МодельСервиса);
	
	Если Не ОбсужденияУНФИнтеграцияСМессенджерами.ИнтеграцииДоступны() Тогда
		Элементы.ИнтеграцияСМессенджерами.Подсказка = НСтр("ru='Получать и отправлять сообщения в мессенджеры.
			|Например, Telerram, VK.
			|
			|Интеграция доступна начиная с версии платформы 8.3.17'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДоступностьПоПравам()
	
	ЭтоПолноправныйПользователь = РежимРаботы.ЭтоАдминистраторПрограммы ИЛИ РежимРаботы.ЭтоАдминистраторСистемы;
	
	Если ЭтоПолноправныйПользователь Тогда
		Возврат;
	КонецЕсли;
	
	НедоступныеРазделы = Новый Массив;
	НедоступныеРазделы.Добавить(Элементы.СтраницаКомпания);
	НедоступныеРазделы.Добавить(Элементы.СтраницаCRM);
	НедоступныеРазделы.Добавить(Элементы.СтраницаПродажи);
	НедоступныеРазделы.Добавить(Элементы.СтраницаЗакупки);
	НедоступныеРазделы.Добавить(Элементы.СтраницаРаботы);
	НедоступныеРазделы.Добавить(Элементы.СтраницаПроизводство);
	НедоступныеРазделы.Добавить(Элементы.СтраницаДеньги);
	НедоступныеРазделы.Добавить(Элементы.КП_СтраницаПроцессы); //kp-unf.ru	
	НедоступныеРазделы.Добавить(Элементы.СтраницаЗарплата);
	НедоступныеРазделы.Добавить(Элементы.СтраницаИнтеграцияСДругимиПрограммамиСинхронизацияСПрограммами1СиРИБ);
	НедоступныеРазделы.Добавить(Элементы.СтраницаИнтеграцияСДругимиПрограммамиСинхронизацияСМобильнымПриложением);
	НедоступныеРазделы.Добавить(Элементы.СтраницаИнтеграцияСДругимиПрограммамиОбменССайтом);
	НедоступныеРазделы.Добавить(Элементы.СтраницаИнтеграцияСДругимиПрограммамиЯндексДоставка);
	НедоступныеРазделы.Добавить(Элементы.СтраницаОбменЭлектроннымиДокументамиБизнесСеть);
	НедоступныеРазделы.Добавить(Элементы.СтраницаОбменЭлектроннымиДокументами1СНоменклатура);
	НедоступныеРазделы.Добавить(Элементы.СтраницаОбменЭлектроннымиДокументамиОбменСКонтрагентами);
	НедоступныеРазделы.Добавить(Элементы.СтраницаОбменЭлектроннымиДокументамиОбменСБанками);
	НедоступныеРазделы.Добавить(Элементы.СтраницаОбменЭлектроннымиДокументамиИнтеграцияСЯндексКассой);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеВерсионированиеОбъектов);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеДополнительныеРеквизиты);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеЗащитаПерсональныхДанных);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеИнтернетПоддержкаИСервисы);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеКонтактнаяИнформация);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеКорректировкаДанных);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеМониторингОценкаПроизводительности);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеНастройкиПользователейИПрав);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеОбщиеНастройки);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеПечатныеФормыОтчетыИОбработки);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеОбслуживание);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеПодключаемоеОборудование);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеПочтаСмс);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеРаботаВСервисе);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеНастройкиРаботыСФайлами);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеОрганайзер);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеСинхронизацияДанных);
	НедоступныеРазделы.Добавить(Элементы.СтраницаАдминистрированиеРегламентныеОперации);
	
	Для каждого Раздел Из НедоступныеРазделы Цикл
		Для каждого ЭлементФормы Из Раздел.ПодчиненныеЭлементы Цикл
			ЭлементФормы.Доступность = Ложь;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодключениеОбсуждений()
	
	ОбсужденияКлиент.ПоказатьПодключение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияОбсуждений(Результат, ДополнительныеПараметры) Экспорт
	
	ПослеПодключенияОбсужденийСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПослеПодключенияОбсужденийСервер()
	
	РегистрацияВзаимодействия = СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована();
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОтключениеОбсуждений()
	
	ОбсужденияКлиент.ПоказатьОтключение();
	
КонецПроцедуры

#КонецОбласти

#Область УНФ_РаботаСНастройкамиСловарьПоиска

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаКомпания()
	
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьНесколькоОрганизаций",
		НСтр("ru='виды бизнеса'"),
		НСтр("ru='компания'"),
		НСтр("ru='обособленный учет'"),
		НСтр("ru='по разным компаниям'"));
	ДобавитьСтрокиПоискаВСловарь(
		"УчетПоКомпании",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"Компания",
		НСтр("ru='головная организация'"),
		НСтр("ru='централизованная'"),
		НСтр("ru='общая'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетПоНесколькимПодразделениям",
		НСтр("ru='перемещения'"),
		НСтр("ru='склады'"),
		НСтр("ru='обособленные'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетПоНесколькимНаправлениямДеятельности",
		НСтр("ru='различные'"),
		НСтр("ru='виды бизнеса'"),
		НСтр("ru='многофирменный'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьОтчетность",
		НСтр("ru='сдача отчетности'"),
		НСтр("ru='упрощенка'"),
		НСтр("ru='налогооблажение'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияКассовыйМетодУчетаДоходовИРасходов",
		НСтр("ru='оплата'"),
		НСтр("ru='списание'"),
		НСтр("ru='поступление'"),
		НСтр("ru='денежные средства'"),
		НСтр("ru='деньги'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьБюджетирование",
		НСтр("ru='финансовый план'"),
		НСтр("ru='контроль'"),
		НСтр("ru='компания'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетВнеоборотныхАктивов",
		НСтр("ru='имущество'"),
		НСтр("ru='средства компании'"),
		НСтр("ru='активы'"));
	ДобавитьСтрокиПоискаВСловарь(
		"СписокСостоянияСобытийИЗаданий",
		НСтр("ru='звонки'"),
		НСтр("ru='встречи'"),
		НСтр("ru='задачи'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВестиУчетПодконтрольныхТоваровВЕТИС",
		НСтр("ru='маркировка'"),
		НСтр("ru='меркурий'"),
		НСтр("ru='ветеринарный'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВестиУчетМаркировкиПродукцииВГИСМ",
		НСтр("ru='маркировка'"),
		НСтр("ru='одежда'"),
		НСтр("ru='GLN'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВестиСведенияДляДекларацийПоАлкогольнойПродукции",
		НСтр("ru='маркировка'"),
		НСтр("ru='егаис'"),
		НСтр("ru='розница'"),
		НСтр("ru='пивная продукция'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ДатаНачалаРегистрацииРозничныхПродажВЕГАИС",
		НСтр("ru='маркировка'"),
		НСтр("ru='розничная продажа'"),
		НСтр("ru='сканирование марки'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВыгружатьПродажиНемаркируемойПродукцииВЕГАИС",
		НСтр("ru='маркировка'"),
		НСтр("ru='передача'"),
		НСтр("ru='пиво'"),
		НСтр("ru='пробитие чека'"));
	ДобавитьСтрокиПоискаВСловарь(
		"НастройкиОбменаЕГАИС",
		НСтр("ru='маркировка'"),
		НСтр("ru='служба УТМ'"),
		НСтр("ru='подключение'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВестиУчетШинИПокрышек",
		НСтр("ru='маркировка'"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"НастройкиИСМП",
		НСтр("ru='маркировка'"),
		НСтр("ru='табак'"),
		НСтр("ru='обувь'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьУчетОригиналовПервичныхДокументов",
		НСтр("ru='первичка'"),
		НСтр("ru='оригинал'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПередачаТоваровМеждуОрганизациями",
		НСтр("ru='интеркампани'"),
		НСтр("ru='элиминирование'"),
		НСтр("ru='эллеминирование'"),
		НСтр("ru='элеминирование'"),
		НСтр("ru='взаимозависимы'"),
		НСтр("ru='передача'"));
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаCRM()
	
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьТелефонию",
		НСтр("ru='Виртуальная АТС'"),
		НСтр("ru='Звонки'"),
		НСтр("ru='Подключение'"),
		НСтр("ru='Asterisk'"));
	ПоисковыеСтроки = Новый Массив;
	ПоисковыеСтроки.Добавить(НСтр("ru='Оператор облачной АТС'"));
	Для каждого ЗначениеАТС Из Перечисления.ДоступныеАТС.ПустаяСсылка().Метаданные().ЗначенияПеречисления Цикл
		ПоисковыеСтроки.Добавить(ЗначениеАТС.Представление());
	КонецЦикла;
	ДобавитьСтрокиПоискаВСловарь(
		"ВыборОператораТелефонииИНастройкаИнтеграции",
		ПоисковыеСтроки);
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьМассовыеРассылкиИнтеграция",
		НСтр("ru='Массовые рассылки'"),
		НСтр("ru='Отправка писем'"),
		НСтр("ru='Почтовый сервис'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВыборСервисаРассылокИНастройкаИнтеграции",
		НСтр("ru='токен'"),
		НСтр("ru='ключ доступа'"),
		НСтр("ru='sendpulse'"),
		НСтр("ru='unisender'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьНесколькоВариантовКП",
		НСтр("ru='варианты КП'"),
		НСтр("ru='отправка'"),
		НСтр("ru='различные'"),
		НСтр("ru='разные'"),
		НСтр("ru='заказ'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияКонтрольДоговоров",
		НСтр("ru='Контроль договоров контрагентов'"),
		НСтр("ru='соответствие'"),
		НСтр("ru='предупреждать'"),
		НСтр("ru='при проведении'"));
	ДобавитьСтрокиПоискаВСловарь(
		"НастройкиНумерацииДоговоров",
		НСтр("ru='настройки нумерации договоров'"),
		НСтр("ru='организации'"),
		НСтр("ru='вид договора'"),
		НСтр("ru='группа договоров'"),
		НСтр("ru='номер'"));
	ДобавитьСтрокиПоискаВСловарь(
		"РегистрацияВзаимодействия",
		НСтр("ru='обсуждения'"),
		НСтр("ru='переписка'"),
		НСтр("ru='пользователи'"),
		НСтр("ru='уведомления'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьЧатВОбсуждениях",
		НСтр("ru='обсуждения'"),
		НСтр("ru='переписка'"),
		НСтр("ru='пользователи'"),
		НСтр("ru='уведомления'"));
	ДобавитьСтрокиПоискаВСловарь(
		"НастройкаОбязательностиЗаполненияИсточникПривлечения",
		НСтр("ru='причина'"),
		НСтр("ru='воронка'"),
		НСтр("ru='мероприятие'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияЖурналЗаписи",
		НСтр("ru='планировщик'"),
		НСтр("ru='заказы'"),
		НСтр("ru='заказ наряд'"),
		НСтр("ru='клиенты'"),
		НСтр("ru='расписание сотрудников'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьЧатботов",
		НСтр("ru='telegram'"),
		НСтр("ru='телеграм'"),
		НСтр("ru='запись на услуги'"),
		НСтр("ru='чат'"),
		НСтр("ru='мессенджер'"),
		НСтр("ru='дистанционная запись'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьМобильныйЛичныйКабинет",
		НСтр("ru='мобильное приложение'"),
		НСтр("ru='конструктор'"),
		НСтр("ru='запись на услуги'"),
		НСтр("ru='клиент'"),
		НСтр("ru='дистанционная запись'"));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаПродажи()
	
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиПродажи",
		НСтр("ru='процент'"),
		НСтр("ru='дисконт'"),
		НСтр("ru='прайс'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьАвтоматическиеСкидкиНаценки",
		НСтр("ru='бонусы'"),
		НСтр("ru='процент'"),
		НСтр("ru='условия предоставления'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбработкаВидыСкидокНаценокРучныеИАвтоматическиеОткрытьОкругления",
		НСтр("ru='суммы'"),
		НСтр("ru='копейки'"),
		НСтр("ru='целые'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьДисконтныеКарты",
		НСтр("ru='бонусы'"),
		НСтр("ru='скидки'"),
		НСтр("ru='накопление'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьБонусныеПрограммы",
		НСтр("ru='бонусные карты'"),
		НСтр("ru='сканирование'"),
		НСтр("ru='скидки'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьПодарочныеСертификаты",
		НСтр("ru='серийные номера'"),
		НСтр("ru='скидки'"),
		НСтр("ru='чек ККМ'"));
	ДобавитьСтрокиПоискаВСловарь(
		"КонтрагентДляПредоплаты",
		НСтр("ru='настройка'"),
		НСтр("ru='предоплата'"),
		НСтр("ru='бонусы'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьЧастичноеПогашениеСертификатов",
		НСтр("ru='контроль'"),
		НСтр("ru='серийные номера'"),
		НСтр("ru='остатки'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияПередачаТоваровНаКомиссию",
		НСтр("ru='комиссионный'"),
		НСтр("ru='комиссионер'"),
		НСтр("ru='комитент'"),
		НСтр("ru='многофирменный'"),
		НСтр("ru='реализация'"),
		НСтр("ru='собственность'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияПриемТоваровНаКомиссию",
		НСтр("ru='баланс'"),
		НСтр("ru='счет-фактура'"),
		НСтр("ru='расчеты'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьКорректировкиРеализаций",
		НСтр("ru='корректировочный'"),
		НСтр("ru='счет фактура'"),
		НСтр("ru='первичные документы'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьПланПродаж",
		НСтр("ru='план-фактный анализ'"),
		НСтр("ru='достижение'"),
		НСтр("ru='сравнительный'"),
		НСтр("ru='доходы'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьСверкиВзаиморасчетов",
		НСтр("ru='расхождения'"),
		НСтр("ru='поступления'"),
		НСтр("ru='анализ'"),
		НСтр("ru='задолженность'"),
		НСтр("ru='деньги'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьКорректировкиДолга",
		НСтр("ru='переуступка'"),
		НСтр("ru='перенос'"),
		НСтр("ru='кредитор'"),
		НСтр("ru='дебитор'"),
		НСтр("ru='зачет аванса'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетПоПроектам",
		НСтр("ru='затраты'"),
		НСтр("ru='доходы и расходы'"),
		НСтр("ru='анализ'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьПечатьЭтикетокИЦенников",
		НСтр("ru='касса'"),
		НСтр("ru='шаблоны'"),
		НСтр("ru='розница'"),
		НСтр("ru='макет'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьРемонты",
		НСтр("ru='серийные номера'"),
		НСтр("ru='сторонний сервис'"),
		НСтр("ru='возврат'"),
		НСтр("ru='сервисный центр'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьНаборы",
		НСтр("ru='комплект'"),
		НСтр("ru='совместные'"),
		НСтр("ru='составляющие'"));
	ДобавитьСтрокиПоискаВСловарь(
		"СрокОплатыПокупателя",
		НСтр("ru='отсрочка'"),
		НСтр("ru='срок'"),
		НСтр("ru='условия'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьВидыЗаказовПокупателей",
		НСтр("ru='воронка'"),
		НСтр("ru='состояния'"),
		НСтр("ru='различные'"),
		НСтр("ru='разные'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОткрытьСправочникВидыЗаказовПокупателей",
		НСтр("ru='настройка'"),
		НСтр("ru='справочник'"),
		НСтр("ru='варианты'"));
	ДобавитьСтрокиПоискаВСловарь(
		"БиллингГоловноеНаправлениеДеятельности",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БиллингВестиУчетРасходовПоДоговорамОбслуживания",
		НСтр("ru='расходы'"),
		НСтр("ru='траты'"),
		НСтр("ru='стоимость'"),
		НСтр("ru='подсчет'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьБиллинг",
		НСтр("ru='повторяющиеся'"),
		НСтр("ru='обслуживание'"),
		НСтр("ru='тарифные планы'"),
		НСтр("ru='тарификация'"));
	
	ДополнитьТаблицуПоискаСтраницаПродажиРозничныеПродажи();

КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаПродажиРозничныеПродажи()

	ДобавитьСтрокиПоискаВСловарь(
		"ОбработкаМенеджерПодсказокТиповыеСхемыУчета_Розница",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОткрытьОчередьЭлектронныхЧеков",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"РассылкаЭлектронныхЧековРасписание",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"АвтоматическаяОтправкаЭлектронныхЧековПоРасписанию",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОтправкаЭлектронныхЧековПослеПробитияЧека",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВариантВозвратаПоЗакрытойСмене",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьПредоплатуВЧекахККМ",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьЗаказыВРозничнойТорговлеДляНастроек",
		НСтр("ru='оформление под заказ'"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"КонтролироватьОстаткиПриПробитииЧековККМ",
		НСтр("ru='контроль'"),
		НСтр("ru='отрицательные'"),
		НСтр("ru='склад'"));
	ДобавитьСтрокиПоискаВСловарь(
		"УдалятьНепробитыеЧекиПриЗакрытииКассовойСмены",
		НСтр("ru='фискальные'"),
		НСтр("ru='удаление'"),
		НСтр("ru='экономия'"));
	ДобавитьСтрокиПоискаВСловарь(
		"АрхивироватьЧекиККМПриЗакрытииКассовойСмены",
		НСтр("ru='кассовая схема'"),
		НСтр("ru='отчет о розничных продажах'"),
		НСтр("ru='свертка'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетРозничныхПродаж",
		НСтр("ru='розница'"),
		НСтр("ru='кассы'"),
		НСтр("ru='наличные'"));

КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаЗакупки()
	
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетПоНесколькимСкладам",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияРазрешитьСкладыВТабличныхЧастях",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетВРазличныхЕдиницахИзмерения",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьХарактеристики",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьПартии",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьНеуникальныеШтрихКоды",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьСерийныеНомера",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"КонтрольОстатковСерийныхНомеров",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"НастройкаСквознойКонтрольДублейНоменклатуры",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетГТД",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"КонтролироватьОстаткиПоНомерамГТД",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ТребоватьЗаполнениеГТДИмпортногоТовара",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"АвтоПодборНомеровГТД",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьРучныеСкидкиНаценкиЗакупки",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетЦенКонтрагентов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетНоменклатурыПоставщиков",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияРезервированиеЗапасов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияПриемЗапасовНаОтветхранение",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияПередачаСырьяВПереработку",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияПередачаЗапасовНаОтветхранение",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьКорректировкиПоступлений",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьОрдерныйСклад",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияУчетПоЯчейкам",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьСервисРасчетПотребностей",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьСервисЗакупкаТоваров",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"СрокОплатыПоставщику",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаРаботы()
	
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьПодсистемуРаботы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьВидыЗаказНарядов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОткрытьСправочникВидыЗаказНарядов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьРемонты2",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятияРаботы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));

КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаПроизводство()
	
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьПодсистемуПроизводство",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьРучноеРаспределениеМатериаловПоУмолчанию",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьЭтапыПроизводства",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияВыполнениеЭтаповРазнымиПодразделениями",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьПараметрическиеСпецификации",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьТехоперации",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"АвтоматическиПланироватьОперацийЗаказомНаПроизводство",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"РасчетСтоимостиОперацийПоНормеВремени",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияПереработкаДавальческогоСырья",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияПланироватьЗагрузкуРесурсовПредприятия",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));

КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаДеньги()
	
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяУчетВалютныхОпераций",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"НациональнаяВалюта",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВалютаУчета",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияПлатежныйКалендарь",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьРезервированиеДенежныхСредств",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьСтатьиДвиженияДенежныхСредств",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияВестиУчетРасчетовСБанкомЭквайрером",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьОплатуКартамиВОптовойТорговле",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияКредитыИЗаймы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьОплатуКредитом",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ЧастотаРасчетаКурсовыхРазниц",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ЗачитыватьАвансыДолгиАвтоматически",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВестиРасчетыПоДоговорам",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВестиРасчетыПоДокументам",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВестиРасчетыПоЗаказам",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВестиУчетОплатыПоСчетам",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"СпособРазнесенияОплатыПоУмолчанию",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"СпособЗачетаПредоплатыПоУмолчанию",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПереводыВПути",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
		
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаЗарплата()
	
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьПодсистемуЗарплата",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияВестиШтатноеРасписание",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьСовместительство",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияВестиУчетНалогаНаДоходыИВзносов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТаблицуПоискаСтраницаАдминистрирование()
	
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__НастроитьХранениеИсторииИзменений",
		НСтр("ru='версионирование'"),
		НСтр("ru='автор'"),
		НСтр("ru='логирование'"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ХранитьИсториюИзменений",
		НСтр("ru='срок'"),
		НСтр("ru='авторство'"),
		НСтр("ru='настройка'"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ИспользоватьДополнительныеРеквизитыИСведения",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ДополнительныеРеквизиты",
		НСтр("ru='настройка дополнительных полей'"),
		НСтр("ru='дополнительные реквизиты'"),
		НСтр("ru='расширение'"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ДополнительныеСведения",
		НСтр("ru='настройка дополнительных сведений'"),
		НСтр("ru='дополнительные сведений'"),
		НСтр("ru='редактирование'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОткрытьНастройкиРегистрацииСобытийДоступаКПерсональнымДанным",
		НСтр("ru='настройки регистраций событий доступа к персональным данным'"),
		НСтр("ru='закон о персональных данных'"),
		НСтр("ru='личные'"),
		НСтр("ru='паспортные'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьСкрытиеПерсональныхДанных",
		НСтр("ru='истечение согласия'"),
		НСтр("ru='срок согласия'"),
		НСтр("ru='срок хранения данных'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбработкаЗащитаПерсональныхДанных",
		НСтр("ru='защита персональных данных'"),
		НСтр("ru='обращения к персональным данным'"),
		НСтр("ru='регистрация доступа'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВойтиИлиВыйтиИПП",
		НСтр("ru='подключить интернет поддержку пользователей'"),
		НСтр("ru='ИПП'"),
		НСтр("ru='авторизация'"),
		НСтр("ru='сервис'"));
	ДобавитьСтрокиПоискаВСловарь(
		"БИПСообщениеВСлужбуТехническойПоддержки",
		НСтр("ru='сообщение в службу технической поддержки'"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БИПМониторИнтернетПоддержки",
		НСтр("ru='монитор портала ИТС'"),
		НСтр("ru='1с'"),
		НСтр("ru='информация о поддержке'"));
	ДобавитьСтрокиПоискаВСловарь(
		"БИПОбновлениеКлассификаторов",
		НСтр("ru='обновление классификаторов'"),
		НСтр("ru='портал 1с'"),
		НСтр("ru='загрузка'"),
		НСтр("ru='скачивание'"));
	ДобавитьСтрокиПоискаВСловарь(
		"БИПВариантОбновленияКлассификаторов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БИПФайлКлассификаторов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ДекорацияРасписаниеОбновленияКлассификаторов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"РегистрСведенийАдресныеОбъектыЗагрузитьАдресныйКлассификатор",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"РегистрСведенийАдресныеОбъектыОчиститьАдресныйКлассификатор",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбработкаЗагрузкаКурсовВалютОткрыть",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БИПОбновлениеПрограммы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОткрытьОписаниеИзмененийСистемы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ДекорацияРасписаниеПроверкиОбновлений",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"АвтоматическаяПроверкаОбновлений",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БИПЗагружатьИУстанавливатьИсправленияАвтоматически",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ДекорацияРасписаниеУстановкаИсправлений",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"РезультатыОбновленияИДополнительнаяОбработкаДанных",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ДетализироватьОбновлениеИБВЖурналеРегистрации",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"КаталогДистрибутиваПлатформы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БИПВключитьРаботуСНовостями",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БИПУправлениеНовостями",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БИПИспользоватьСервисСПАРКРиски",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВызовОнлайнПоддержки",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"НастройкаОнлайнПоддержки",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьСервисСклоненияMorpher",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"НастройкаДоступаКСервисуСклонения",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбработкаУправлениеВнешнимиКомпонентами",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ОткрытьВидыКонтактнойИнформации",
		НСтр("ru='виды контактной информации'"),
		НСтр("ru='настройка'"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаГрупповоеИзменениеОбъектовГрупповоеИзменениеРеквизитов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбработкаГрупповоеПерепроведениеДокументовОткрыть",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаПоискИУдалениеДублейПоискИУдалениеДублей",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбработкаОчисткаИсторииОбсужденийОткрыть",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОткрытьДокументыКорректировкиРегистров",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ЦентрМониторингаРазрешитьОтправлятьДанные",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ЦентрМониторингаНастройки",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ЦентрМониторингаОтправитьКонтактнуюИнформацию",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ЦентрМониторингаАдресСервиса",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ЦентрМониторингаРазрешитьОтправлятьДанныеСтороннему",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ЦентрМониторингаЗапретитьОтправлятьДанные",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ВыполнятьЗамерыПроизводительности",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__СправочникПрофилиКлючевыхОперацийОткрытьСписок",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаНастройкиОценкиПроизводительности",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаОценкаПроизводительностиЭкспортДанных",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаОценкаПроизводительностиИмпортЗамеровПроизводительности",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__НПП__НастройкиВхода",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__НПП__ОткрытьПользователи",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__НПП__КопированиеНастроекПользователей",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__НПП__НастройкиПользователей",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__НПП__ОчисткаНастроекПользователей",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__НПП__ОграничиватьДоступНаУровнеЗаписей",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьГруппыДоступаКонтрагентов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"СправочникГруппыДоступаКонтрагентовОткрытьСписок",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьГруппыДоступаЛидов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"СправочникГруппыДоступаЛидовОткрытьСписок",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИнформацияОНастройкеПравДоступа",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__НПП__ИспользоватьДатыЗапретаИзменения",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__НПП__НастроитьДатыЗапретаИзменения",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ЗаголовокПрограммы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__РегиональныеНастройки",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПереноситьДатуЗапретаРедактирования",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"КонтролироватьОстаткиПриПроведении",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ОткрытьПараметрыПроксиСервера",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ОткрытьНастройкиИспользованияПрофилейБезопасности",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ДобавитьСловоДоговорВПредставлениеДоговораОснованияПечати",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПредставлениеКодовВПечатныхФормах",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПредставлениеСкидкиВПечатнойФорме",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"КонтактнаяИнформацияТоварногоЧека",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПечатьПользовательскихЕдиницИзмерения",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ВариантПечатиДоставки",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПредставлениеНомераДокументаБезПрефиксаИнформационнойБазы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПредставлениеНомераДокументаБезПрефиксаОрганизации",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПредставлениеНомераДокументаБезПрефиксаПользователя",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПредставлениеНомераДокументаСЛидирующимиНулями",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ПФО__ОткрытьМакетыПечатныхФорм",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ПФО__ПодменюПечать",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ПФО__НастройкаКолонтитулов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ПФО__ОткрытьВариантыОтчетов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ПФО__ОткрытьРассылкиОтчетов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ПФО__УниверсальныйОтчет",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбщаяКомандаОбновитьОтчеты",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ПФО__Расширения",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ПФО__ОбработкаУправлениеВнешнимиКомпонентами",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ПФО__ИспользоватьДополнительныеОтчетыИОбработки",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ПФО__ОткрытьДополнительныеОтчетыИОбработки",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбщаяКомандаПанельОтчетовАдминистрирование",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ДополнительныеОтчетыПоАдминистрированию",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ДополнительныеОбработкиПоАдминистрированию",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"НастройкаРезервногоКопированияИБ",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбработкаРезервноеКопированиеИБВыполнитьВосстановлениеДанных",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбработкаРезервноеКопированиеИБОткрыть",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"СпособРезервногоКопирования",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__УстановкаОбновлений",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__УстановленныеИсправленияОткрыть",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__РезультатыОбновленияИДополнительнаяОбработкаДанных",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОткрытьОписаниеИзмененийСистемы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ПриоритетРаботаПользователей",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ПриоритетОбработкаДанных",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ДетализироватьОбновлениеИБВЖурналеРегистрации",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОблачныйАрхивНастройкаРезервногоКопирования",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОблачныйАрхивВосстановлениеИзРезервнойКопии",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОблачныйАрхивРезервноеКопированиеПрограммы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаУдалениеПомеченныхОбъектовОткрыть",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаБлокировкаСоединенийСИнформационнойБазойОткрыть",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаАктивныеПользователиОткрыть",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаЖурналРегистрацииОткрыть",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ФункциональнаяОпцияИспользоватьПодключаемоеОборудование",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"СправочникПодключаемоеОборудованиеОткрытьПодключаемоеОборудование",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"СправочникРабочиеМестаОткрытьСписок",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьОбменСПодключаемымОборудованиемOffline",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"СправочникПравилаОбменаСПодключаемымОборудованиемOfflineОткрытьСписок",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"НастройкаДиапазоновSKUВесовогоТовара",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ИспользоватьОбменСКассойMinikassir",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПодробнееОПодключенииКассКФискальномуРегистратору",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ПодробнееО54ФЗ",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Орг__ОткрытьНастройкиСистемнойУчетнойЗаписиЭП",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Орг__ОткрытьУчетныеЗаписиЭлектроннойПочты",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"АвтоматическиЗагружатьПочту",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"АвтоматическиЗагружатьЭлектроннуюПочтуРасписание",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ДекорацияНапоминанияПользователей",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Орг__ОбщаяФормаНастройкаОтправкиSMS",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбщаяКомандаАвтономнаяРаботаВМоделиСервиса",
		НСтр("ru='Автономная работа'"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбщаяКомандаАвтономнаяРабота",
		НСтр("ru='Автономная работа'"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбщаяКомандаПерейтиВОблачныйСервис",
		НСтр("ru='Выгрузить данные для перехода в облачный сервис'"),
		НСтр("ru='Перейти в облачный сервис'"),
		НСтр("ru='Перейти в сервис'"),
		НСтр("ru='Выгрузка'"),
		НСтр("ru='dump'"),
		НСтр("ru='дамп'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбщаяФормаЗагрузкаДанныхИзСервисаОткрыть",
		НСтр("ru='Загрузка данных из сервиса'"),
		НСтр("ru='Перейти из сервиса'"),
		НСтр("ru='Переход'"),
		НСтр("ru='dump'"),
		НСтр("ru='дамп'"));
	ДобавитьСтрокиПоискаВСловарь(
		"ОбщаяКомандаПереносДанныхПриложения",
		НСтр("ru='Выгрузить данные в локальную версию'"),
		НСтр("ru='Перенос данных приложения'"),
		НСтр("ru='Перейти в коробку'"),
		НСтр("ru='Переход'"),
		НСтр("ru='dump'"),
		НСтр("ru='дамп'"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__СпособХраненияФайлов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__ПереносФайлов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__СправочникТомаХраненияФайлов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__СоздаватьПодкаталогиСИменамиВладельцев",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__РасширенияФайловВИБ",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__МаксимальныйРазмерФайлаВИБ",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__ЗапрещатьЗагрузкуФайловПоРасширению",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__МаксимальныйРазмерФайлаОбластиДанных",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__НастройкаОчисткиФайлов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__СписокРасширенийФайловOpenDocumentОбластиДанных",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__СписокРасширенийТекстовыхФайлов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__СинхронизироватьФайлы",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__НастройкиСинхронизацииФайлов",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__МаксимальныйРазмерФайла",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__СписокЗапрещенныхРасширений",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__РФ__СписокРасширенийФайловOpenDocument",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ИспользоватьЭлектронныеПодписи",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ИспользоватьШифрование",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__НастройкиЭлектроннойПодписиИШифрования",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаРегламентныеИФоновыеЗадания",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__РазблокироватьРаботуСВнешнимиРесурсами",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__Обсл__ОбработкаУправлениеИтогамиИАгрегатамиОткрыть",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__ИспользоватьПолнотекстовыйПоиск",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	ДобавитьСтрокиПоискаВСловарь(
		"БСП__ОбщН__НастроитьПолнотекстовыйПоиск",
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
	
КонецПроцедуры

#КонецОбласти

#Область Библиотеки_РаботаСНастройками

&НаСервере
Процедура ПослеСозданияНаСервереБСП()
	
	Элементы.БСП__НПП__ГруппаГруппыДоступа.Видимость = Ложь;
	Элементы.БСП__СД___ДемоГруппаДругиеНастройкиСинхронизацииДанных.Видимость = Ложь;
	Элементы.БСП__ОбщН__ГруппаИспользоватьДополнительныеРеквизитыИСведения.Видимость = Ложь;
	Элементы.БСП__Обсл__ГруппаОтчетыИОбработки.Видимость = Ложь;
	Элементы.БСП__ОбщН__АдресПубликацииИнформационнойБазыВЛокальнойСети.Подсказка =
		Элементы.БСП__ОбщН__ПояснениеПоПубликации.Заголовок;
	Элементы.БСП__ОбщН__АдресПубликацииИнформационнойБазыВИнтернете.Подсказка = 
		Элементы.БСП__ОбщН__ПояснениеПоПубликации.Заголовок;
	Элементы.БСП__ОбщН__ПояснениеПоПубликации.Видимость = Ложь;
	Элементы.БСП__ОбщН__ГруппаПубликацияИнформационнойБазы.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКонстантыИзНабораВРеквизитыФормы()
	
	Для каждого КлючЗначение Из ЛокальныеКонстантыИзНабора() Цикл
		ИмяРеквизита = КлючЗначение.Ключ;
		ИмяКонстанты = КлючЗначение.Значение;
		ЭтотОбъект[ИмяРеквизита] = НаборКонстант[ИмяКонстанты];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначенияРеквизитовФормыВНабореКонстант(ЭлементИмя)
	
	Для каждого КлючЗначение Из ЛокальныеКонстантыИзНабора() Цикл
		ИмяКонстанты = КлючЗначение.Значение;
		ИмяРеквизита = КлючЗначение.Ключ;
		НаборКонстант[ИмяКонстанты] = ЭтотОбъект[ИмяРеквизита];
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЛокальныеКонстантыИзНабора()
	
	Результат = Новый Соответствие;
	Результат.Вставить("БСП__НПП__НаборКонстантДнейДоСкрытияПерсональныхДанныхСубъектов", "ДнейДоСкрытияПерсональныхДанныхСубъектов");
	Результат.Вставить("БСП__НПП__НаборКонстантИспользоватьВнешнихПользователей", "ИспользоватьВнешнихПользователей");
	Результат.Вставить("БСП__НПП__НаборКонстантИспользоватьГруппыПользователей", "ИспользоватьГруппыПользователей");
	Результат.Вставить("БСП__НПП__НаборКонстантИспользоватьДатыЗапретаИзменения", "ИспользоватьДатыЗапретаИзменения");
	Результат.Вставить("БСП__НПП__НаборКонстантИспользоватьСкрытиеПерсональныхДанныхСубъектов", "ИспользоватьСкрытиеПерсональныхДанныхСубъектов");
	Результат.Вставить("БСП__НПП__НаборКонстантОграничиватьДоступНаУровнеЗаписей", "ОграничиватьДоступНаУровнеЗаписей");
	Результат.Вставить("БСП__НПП__НаборКонстантОграничиватьДоступНаУровнеЗаписейУниверсально", "ОграничиватьДоступНаУровнеЗаписейУниверсально");
	Результат.Вставить("БСП__Обсл__НаборКонстантВыполнятьЗамерыПроизводительности", "ВыполнятьЗамерыПроизводительности");
	Результат.Вставить("БСП__Обсл__НаборКонстантДетализироватьОбновлениеИБВЖурналеРегистрации", "ДетализироватьОбновлениеИБВЖурналеРегистрации");
	Результат.Вставить("БСП__ОбщН__НаборКонстантАдресПубликацииИнформационнойБазыВИнтернете", "АдресПубликацииИнформационнойБазыВИнтернете");
	Результат.Вставить("БСП__ОбщН__НаборКонстантАдресПубликацииИнформационнойБазыВЛокальнойСети", "АдресПубликацииИнформационнойБазыВЛокальнойСети");
	Результат.Вставить("БСП__ОбщН__НаборКонстантЗаголовокСистемы", "ЗаголовокСистемы");
	Результат.Вставить("БСП__ОбщН__НаборКонстантИспользоватьДополнительныеРеквизитыИСведения", "ИспользоватьДополнительныеРеквизитыИСведения");
	Результат.Вставить("БСП__ОбщН__НаборКонстантИспользоватьШифрование", "ИспользоватьШифрование");
	Результат.Вставить("БСП__ОбщН__НаборКонстантИспользоватьЭлектронныеПодписи", "ИспользоватьЭлектронныеПодписи");
	Результат.Вставить("БСП__Орг__НаборКонстантИспользоватьНапоминанияПользователя", "ИспользоватьНапоминанияПользователя");
	Результат.Вставить("БСП__Орг__НаборКонстантИспользоватьШаблоныСообщений", "ИспользоватьШаблоныСообщений");
	Результат.Вставить("БСП__ПФО__НаборКонстантИспользоватьДополнительныеОтчетыИОбработки", "ИспользоватьДополнительныеОтчетыИОбработки");
	Результат.Вставить("БСП__РФ__НаборКонстантСинхронизироватьФайлы", "СинхронизироватьФайлы");
	Результат.Вставить("БСП__РФ__НаборКонстантСоздаватьПодкаталогиСИменамиВладельцев", "СоздаватьПодкаталогиСИменамиВладельцев");
	Результат.Вставить("БСП__РФ__НаборКонстантСписокЗапрещенныхРасширений", "СписокЗапрещенныхРасширений");
	Результат.Вставить("БСП__РФ__НаборКонстантСписокЗапрещенныхРасширенийОбластиДанных", "СписокЗапрещенныхРасширенийОбластиДанных");
	Результат.Вставить("БСП__РФ__НаборКонстантСписокРасширенийТекстовыхФайлов", "СписокРасширенийТекстовыхФайлов");
	Результат.Вставить("БСП__РФ__НаборКонстантСписокРасширенийФайловOpenDocument", "СписокРасширенийФайловOpenDocument");
	Результат.Вставить("БСП__РФ__НаборКонстантСписокРасширенийФайловOpenDocumentОбластиДанных", "СписокРасширенийФайловOpenDocumentОбластиДанных");
	Результат.Вставить("БСП__РФ__НаборКонстантСпособХраненияФайлов", "СпособХраненияФайлов");
	Результат.Вставить("БСП__СД__НаборКонстантИспользоватьДатыЗапретаЗагрузки", "ИспользоватьДатыЗапретаЗагрузки");
	Результат.Вставить("БСП__СД__НаборКонстантИспользоватьСинхронизациюДанных", "ИспользоватьСинхронизациюДанных");
	Результат.Вставить("БСП__СД__НаборКонстантКаталогСообщенийОбменаДаннымиДляLinux", "КаталогСообщенийОбменаДаннымиДляLinux");
	Результат.Вставить("БСП__СД__НаборКонстантКаталогСообщенийОбменаДаннымиДляWindows", "КаталогСообщенийОбменаДаннымиДляWindows");
	Результат.Вставить("БСП__СД__НаборКонстантПрефиксУзлаРаспределеннойИнформационнойБазы", "ПрефиксУзлаРаспределеннойИнформационнойБазы");
	Результат.Вставить("БИПИспользоватьОнлайнПоддержку", "ИспользоватьОнлайнПоддержку");
	Результат.Вставить("БИПИспользоватьСервисСклоненияMorpher", "ИспользоватьСервисСклоненияMorpher");
	Возврат Результат;
	
КонецФункции

#Область БСП_ОбщиеПроцедурыФормНастроек

// Эти методы "универсальные" для всех форм и не внедряются автоматически.

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, ОбновлятьИнтерфейс = Истина)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	ИмяКонстанты = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	ОбновитьПовторноИспользуемыеЗначения();
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если ИмяКонстанты <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	ИмяКонстанты = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	УстановитьДоступность(РеквизитПутьКДанным);
	ОбновитьПовторноИспользуемыеЗначения();
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	ДлинаПрефикса = СтрНайти(РеквизитПутьКДанным, "__", НаправлениеПоиска.СНачала, 1, 2) + 1;
	ПрефиксФормы = Сред(РеквизитПутьКДанным, 1, ДлинаПрефикса);
	РеквизитПутьКДаннымБезПрефикса = Прав(РеквизитПутьКДанным, СтрДлина(РеквизитПутьКДанным) - ДлинаПрефикса);
	
	ЭтотРеквизитНаследованИзНабораКонстант = СтрНачинаетсяС(РеквизитПутьКДаннымБезПрефикса, "НаборКонстант");
	Если НЕ ЭтотРеквизитНаследованИзНабораКонстант Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяКонстанты = Прав(РеквизитПутьКДаннымБезПрефикса, СтрДлина(РеквизитПутьКДаннымБезПрефикса) - СтрДлина("НаборКонстант"));
	КонстантаМенеджер = Константы[ИмяКонстанты];
	КонстантаЗначение = ЭтотОбъект[РеквизитПутьКДанным];
	
	Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
		КонстантаМенеджер.Установить(КонстантаЗначение);
	КонецЕсли;
	
	Возврат ИмяКонстанты;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")
	БСП__НПП__УстановитьДоступность(РеквизитПутьКДанным);
	БСП__ОбщН__УстановитьДоступность(РеквизитПутьКДанным);
	БСП__РФ__УстановитьДоступность(РеквизитПутьКДанным);
	БСП__Обсл__УстановитьДоступность(РеквизитПутьКДанным);
	БСП__Орг__УстановитьДоступность(РеквизитПутьКДанным);
	БСП__ПФО__УстановитьДоступность(РеквизитПутьКДанным);
	БСП__СД__УстановитьДоступность(РеквизитПутьКДанным);
	БСП__ИПП__УстановитьДоступность(РеквизитПутьКДанным);
КонецПроцедуры

#КонецОбласти

#Область БСП_ВызовПроцедурИзУНФ

&НаСервере
Процедура ПриСозданииНаСервереБСП(Отказ, СтандартнаяОбработка)
	БСП__НПП__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	БСП__ОбщН__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	БСП__РФ__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	БСП__Обсл__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	БСП__Орг__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	БСП__ПФО__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	БСП__СД__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	БСП__ИПП__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииБСП(Отказ)
	БСП__Обсл__ПриОткрытии(Отказ);
	БСП__ИПП__ПриОткрытии(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияБСП(ИмяСобытия, Параметр, Источник)
	БСП__НПП__ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	БСП__ОбщН__ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	БСП__Обсл__ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	БСП__Орг__ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	БСП__СД__ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
	БСП__ИПП__ОбработкаОповещения(ИмяСобытия, Параметр, Источник);
КонецПроцедуры

#КонецОбласти

#Область БСП_Внедрение

#Область БСП_НастройкиПользователейИПрав

&НаСервере
Процедура БСП__НПП__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ РежимРаботы.ЭтоАдминистраторПрограммы
		И НЕ РежимРаботы.ЭтоАдминистраторСистемы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Пользователи.ОбщиеНастройкиВходаИспользуются() Тогда
		Элементы.БСП__НПП__ГруппаНастройкиВходаПользователей.Видимость = Ложь;
		Элементы.БСП__НПП__ГруппаСписокВнешнихПользователейОтступ.Видимость = Ложь;
		Элементы.БСП__НПП__ГруппаНастройкиВходаВнешнихПользователей.Видимость = Ложь;
		Элементы.БСП__НПП__ГруппаВнешниеПользователи.Группировка
			= ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	КонецЕсли;
	
	Если ОбщегоНазначения.РазделениеВключено()
	 Или СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
	 Или ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
	 Или Не ПользователиСлужебный.ВнешниеПользователиВнедрены() Тогда
		
		Элементы.БСП__НПП__ГруппаВнешниеПользователи.Видимость = Ложь;
		// УНФ
		//Элементы.БСП__НПП__ОписаниеРаздела.Заголовок =
		//	НСтр("ru = 'Администрирование пользователей, настройка групп доступа, управление пользовательскими настройками.'");
		// Конец УНФ.
	КонецЕсли;
	
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
	 Или ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
		
		Элементы.БСП__НПП__ИспользоватьГруппыПользователей.Доступность = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступомСлужебный");
		БСП__НПП__УпрощенныйИнтерфейс = МодульУправлениеДоступомСлужебный.УпрощенныйИнтерфейсНастройкиПравДоступа();
		Элементы.БСП__НПП__ОткрытьГруппыДоступа.Видимость            = НЕ БСП__НПП__УпрощенныйИнтерфейс;
		Элементы.БСП__НПП__ИспользоватьГруппыПользователей.Видимость = НЕ БСП__НПП__УпрощенныйИнтерфейс;
		Элементы.БСП__НПП__ОбновлениеДоступаНаУровнеЗаписей.Видимость =
			МодульУправлениеДоступомСлужебный.ОграничиватьДоступНаУровнеЗаписейУниверсально(Истина);
		
		Если ОбщегоНазначения.ЭтоАвтономноеРабочееМесто() Тогда
			Элементы.БСП__НПП__ОграничиватьДоступНаУровнеЗаписей.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.БСП__НПП__ГруппаГруппыДоступа.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		Элементы.БСП__НПП__ГруппаДатыЗапретаИзменения.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		Элементы.ГруппаОткрытьНастройкиРегистрацииСобытийДоступаКПерсональнымДанным.Видимость =
			  Не ОбщегоНазначения.РазделениеВключено()
			И Пользователи.ЭтоПолноправныйПользователь(, Истина);
	Иначе
		Элементы.ГруппаЗащитаПерсональныхДанных.Видимость = Ложь;
	КонецЕсли;
	
	// Обновление состояния элементов.
	БСП__НПП__УстановитьДоступность();
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник = "ИспользоватьАнкетирование" 
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Анкетирование") Тогда
		
		Прочитать();
		БСП__НПП__УстановитьДоступность();
		
	ИначеЕсли Источник = "ИспользоватьСкрытиеПерсональныхДанныхСубъектов" Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__ИспользоватьГруппыПользователейПриИзменении(Элемент)
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__ОграничиватьДоступНаУровнеЗаписейУниверсальноПриИзменении(Элемент)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Если НаборКонстант.ОграничиватьДоступНаУровнеЗаписейУниверсально Тогда
		БСП__НПП__ТекстВопроса =
			НСтр("ru = 'Включить производительный вариант ограничения доступа?
			           |
			           |Включение произойдет после окончания первого обновления
			           |(см. ход по ссылке ""Обновление доступа на уровне записей"").'");
	ИначеЕсли НаборКонстант.ОграничиватьДоступНаУровнеЗаписей Тогда
		БСП__НПП__ТекстВопроса =
			НСтр("ru = 'Выключить производительный вариант ограничения доступа?
			           |
			           |Потребуется заполнение данных, которое будет выполняться частями
			           |регламентным заданием ""Заполнение данных для ограничения доступа""
			           |(ход выполнения в журнале регистрации).'");
	Иначе
		БСП__НПП__ТекстВопроса =
			НСтр("ru = 'Выключить производительный вариант ограничения доступа?
			           |
			           |Потребуется частичное заполнение данных, которое будет выполняться частями
			           |регламентным заданием ""Заполнение данных для ограничения доступа""
			           |(ход выполнения в журнале регистрации).'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БСП__НПП__ТекстВопроса) Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"БСП__НПП__ОграничиватьДоступНаУровнеЗаписейУниверсальноПриИзмененииЗавершение",
				ЭтотОбъект, Элемент),
			БСП__НПП__ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		БСП__НПП__ОграничиватьДоступНаУровнеЗаписейУниверсальноПриИзмененииЗавершение(КодВозвратаДиалога.Да, Элемент);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__ОграничиватьДоступНаУровнеЗаписейПриИзменении(Элемент)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Если НаборКонстант.ОграничиватьДоступНаУровнеЗаписейУниверсально Тогда
		БСП__НПП__ТекстВопроса =
			НСтр("ru = 'Настройки групп доступа вступят в силу постепенно
			           |(см. ход по ссылке ""Обновление доступа на уровне записей"").
			           |
			           |Обновление доступа может замедлить работу программы и выполняться
			           |от нескольких секунд до часов (в зависимости от объема данных).'");
		Если НаборКонстант.ОграничиватьДоступНаУровнеЗаписей Тогда
			БСП__НПП__ТекстВопроса = НСтр("ru = 'Включить ограничение доступа на уровне записей?'")
				+ Символы.ПС + Символы.ПС + БСП__НПП__ТекстВопроса;
		Иначе
			БСП__НПП__ТекстВопроса = НСтр("ru = 'Выключить ограничение доступа на уровне записей?'")
				+ Символы.ПС + Символы.ПС + БСП__НПП__ТекстВопроса;
		КонецЕсли;
		
	ИначеЕсли НаборКонстант.ОграничиватьДоступНаУровнеЗаписей Тогда
		БСП__НПП__ТекстВопроса =
			НСтр("ru = 'Включить ограничение доступа на уровне записей?
			           |
			           |Потребуется заполнение данных, которое будет выполняться частями
			           |регламентным заданием ""Заполнение данных для ограничения доступа""
			           |(ход выполнения в журнале регистрации).
			           |
			           |Выполнение может сильно замедлить работу программы и выполняться
			           |от нескольких секунд до многих часов (в зависимости от объема данных).'");
	Иначе
		БСП__НПП__ТекстВопроса = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БСП__НПП__ТекстВопроса) Тогда
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"БСП__НПП__ОграничиватьДоступНаУровнеЗаписейПриИзмененииЗавершение",
				ЭтотОбъект, Элемент),
			БСП__НПП__ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		БСП__НПП__ОграничиватьДоступНаУровнеЗаписейПриИзмененииЗавершение(КодВозвратаДиалога.Да, Элемент);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__ИспользоватьВнешнихПользователейПриИзменении(Элемент)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Если НаборКонстант.ИспользоватьВнешнихПользователей Тогда
		
		БСП__НПП__ТекстВопроса =
			НСтр("ru = 'Разрешить доступ внешним пользователям?
			           |
			           |При входе в программу список выбора пользователей станет пустым
			           |(реквизит ""Показывать в списке выбора"" в карточках всех
			           | пользователей будет очищен и скрыт).'");
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"БСП__НПП__ИспользоватьВнешнихПользователейПриИзмененииЗавершение",
				ЭтотОбъект,
				Элемент),
			БСП__НПП__ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	Иначе
		БСП__НПП__ТекстВопроса =
			НСтр("ru = 'Запретить доступ внешним пользователям?
			           |
			           |Реквизит ""Вход в программу разрешен"" будет
			           |очищен в карточках всех внешних пользователей.'");
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения(
				"БСП__НПП__ИспользоватьВнешнихПользователейПриИзмененииЗавершение",
				ЭтотОбъект,
				Элемент),
			БСП__НПП__ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__СправочникВнешниеПользователи(Команда)
	ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаСписка", , ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__НастройкиВходаВнешнихПользователей(Команда)
	
	БСП__НПП__ПараметрыФормы = Новый Структура;
	БСП__НПП__ПараметрыФормы.Вставить("ПоказатьНастройкиВнешнихПользователей", Истина);
	
	ОткрытьФорму("ОбщаяФорма.НастройкиВходаПользователей", БСП__НПП__ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__ОбновлениеДоступаНаУровнеЗаписей(Команда)
	
	ОткрытьФорму("РегистрСведений" + "." + "ОбновлениеКлючейДоступаКДанным" + "."
		+ "Форма" + "." + "ОбновлениеДоступаНаУровнеЗаписей");
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__НастроитьДатыЗапретаИзменения(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		МодульДатыЗапретаИзмененияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДатыЗапретаИзмененияСлужебныйКлиент");
		МодульДатыЗапретаИзмененияСлужебныйКлиент.ОткрытьДатыЗапретаИзмененияДанных(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__Подключаемый_НастройкиСкрытияПДнПриИзменении(Элемент)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗащитаПерсональныхДанных") Тогда
		МодульЗащитаПерсональныхДанныхКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗащитаПерсональныхДанныхКлиент");
		МодульЗащитаПерсональныхДанныхКлиент.НастройкиСкрытияПерсональныхДанныхПриИзменении(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__ОграничиватьДоступНаУровнеЗаписейУниверсальноПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НаборКонстант.ОграничиватьДоступНаУровнеЗаписейУниверсально
			= Не НаборКонстант.ОграничиватьДоступНаУровнеЗаписейУниверсально;
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	Элементы.БСП__НПП__ОбновлениеДоступаНаУровнеЗаписей.Видимость =
		Элементы.БСП__НПП__ОграничиватьДоступНаУровнеЗаписейУниверсально.Видимость
		И НаборКонстант.ОграничиватьДоступНаУровнеЗаписейУниверсально;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__ОграничиватьДоступНаУровнеЗаписейПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НаборКонстант.ОграничиватьДоступНаУровнеЗаписей = Не НаборКонстант.ОграничиватьДоступНаУровнеЗаписей;
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
	Если НЕ НаборКонстант.ОграничиватьДоступНаУровнеЗаписей Тогда
		Если ИспользоватьГруппыДоступаКонтрагентов Тогда
			ИспользоватьГруппыДоступаКонтрагентов = Ложь;
			ПриИзмененииЭлементаУНФ(Элементы.ИспользоватьГруппыДоступаКонтрагентов);
		КонецЕсли;
		Если ИспользоватьГруппыДоступаЛидов Тогда
			ИспользоватьГруппыДоступаЛидов = Ложь;
			ПриИзмененииЭлементаУНФ(Элементы.ИспользоватьГруппыДоступаЛидов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__НПП__ИспользоватьВнешнихПользователейПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		НаборКонстант.ИспользоватьВнешнихПользователей = Не НаборКонстант.ИспользоватьВнешнихПользователей;
	Иначе
		Подключаемый_ПриИзмененииРеквизита(Элемент);
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура БСП__НПП__УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "БСП__НПП__НаборКонстантИспользоватьВнешнихПользователей"
	 Или РеквизитПутьКДанным = "" Тогда
		
		БСП__НПП__ИспользоватьВнешнихПользователей = НаборКонстант.ИспользоватьВнешнихПользователей;
		
		Элементы.БСП__НПП__ОткрытьВнешниеПользователи.Доступность         = БСП__НПП__ИспользоватьВнешнихПользователей;
		Элементы.БСП__НПП__НастройкиВходаВнешнихПользователей.Доступность = БСП__НПП__ИспользоватьВнешнихПользователей;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения")
		И (РеквизитПутьКДанным = "БСП__НПП__НаборКонстантИспользоватьДатыЗапретаИзменения"
		Или РеквизитПутьКДанным = "") Тогда
		
		Элементы.БСП__НПП__НастроитьДатыЗапретаИзменения.Доступность = НаборКонстант.ИспользоватьДатыЗапретаИзменения;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "БСП__НПП__НаборКонстантОграничиватьДоступНаУровнеЗаписей"
		ИЛИ РеквизитПутьКДанным = "" Тогда
		Элементы.ИспользоватьГруппыДоступаКонтрагентов.Доступность = БСП__НПП__НаборКонстантОграничиватьДоступНаУровнеЗаписей;
		Элементы.ИспользоватьГруппыДоступаЛидов.Доступность = БСП__НПП__НаборКонстантОграничиватьДоступНаУровнеЗаписей;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
#Область БСП_ОбщиеНастройки

&НаСервере
Процедура БСП__ОбщН__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		БСП__ОбщН__МодульРаботаВБезопасномРежимеСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежимеСлужебный");
		
		Элементы.БСП__ОбщН__ГруппаНастройкаИспользованияПрофилейБезопасности.Видимость =
			  Пользователи.ЭтоПолноправныйПользователь(, Истина)
			И БСП__ОбщН__МодульРаботаВБезопасномРежимеСлужебный.ДоступнаНастройкаПрофилейБезопасности();
	Иначе
		Элементы.БСП__ОбщН__ГруппаНастройкаИспользованияПрофилейБезопасности.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Элементы.БСП__ОбщН__ГруппаОткрытьПараметрыПроксиСервера.Видимость =
			  Пользователи.ЭтоПолноправныйПользователь(, Истина)
			И Не ОбщегоНазначения.ИнформационнаяБазаФайловая();
	Иначе
		Элементы.БСП__ОбщН__ГруппаОткрытьПараметрыПроксиСервера.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		Элементы.БСП__ОбщН__ГруппаЭлектроннаяПодписьИШифрование.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		Элементы.БСП__ОбщН__ГруппаДополнительныеРеквизитыИСведения.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		Элементы.БСП__ОбщН__ГруппаВерсионирование.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.БСП__ОбщН__ГруппаПубликацияИнформационнойБазы.Видимость = Не (ОбщегоНазначения.РазделениеВключено() 
		Или ОбщегоНазначения.ЭтоАвтономноеРабочееМесто());
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		БСП__ОбщН__МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		БСП__ОбщН__ХранитьИсториюИзменений = БСП__ОбщН__МодульВерсионированиеОбъектов.ЗначениеФлажкаХранитьИсторию();
	Иначе 
		Элементы.БСП__ОбщН__ГруппаВерсионирование.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") 
		И Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		
		БСП__ОбщН__МодульПолнотекстовыйПоискСервер = ОбщегоНазначения.ОбщийМодуль("ПолнотекстовыйПоискСервер");
		БСП__ОбщН__ИспользоватьПолнотекстовыйПоиск = БСП__ОбщН__МодульПолнотекстовыйПоискСервер.ЗначениеФлажкаИспользоватьПоиск();
	Иначе
		Элементы.БСП__ОбщН__ГруппаУправлениеПолнотекстовымПоиском.Видимость = Ложь;
	КонецЕсли;
	
	БСП__ОбщН__УстановитьДоступность();
	
	// УНФ.
	//НастройкиПрограммыПереопределяемый.ОбщиеНастройкиПриСозданииНаСервере(ЭтотОбъект);
	// Конец УНФ.
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		БСП__ОбщН__МодульВерсионированиеОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВерсионированиеОбъектовКлиент");
		БСП__ОбщН__МодульВерсионированиеОбъектовКлиент.ОбработкаОповещенияИзмененияФлажкаХранитьИсторию(
			ИмяСобытия, 
			БСП__ОбщН__ХранитьИсториюИзменений);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		БСП__ОбщН__МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
		БСП__ОбщН__МодульПолнотекстовыйПоискКлиент.ОбработкаОповещенияИзмененияФлажкаИспользоватьПоиск(
			ИмяСобытия, 
			БСП__ОбщН__ИспользоватьПолнотекстовыйПоиск);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__ЗаголовокПрограммыПриИзменении(Элемент)
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__ИспользоватьДополнительныеРеквизитыИСведенияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__АдресПубликацииИнформационнойБазыПриИзменении(Элемент)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__АдресПубликацииИнформационнойБазыВИнтернетеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("БСП__ОбщН__АдресПубликацииИнформационнойБазыВИнтернетеНачалоВыбораПродолжение", 0.1, Истина);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__АдресПубликацииИнформационнойБазыВЛокальнойСетиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодключитьОбработчикОжидания("БСП__ОбщН__АдресПубликацииИнформационнойБазыВЛокальнойСетиНачалоВыбораПродолжение", 0.1, Истина);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__ХранитьИсториюИзмененийПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		БСП__ОбщН__МодульВерсионированиеОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВерсионированиеОбъектовКлиент");
		БСП__ОбщН__МодульВерсионированиеОбъектовКлиент.ПриИзмененииФлажкаХранитьИсторию(БСП__ОбщН__ХранитьИсториюИзменений);
	КонецЕсли;
	
	БСП__ОбщН__УстановитьДоступность("БСП__ОбщН__ХранитьИсториюИзменений");
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__ИспользоватьПолнотекстовыйПоискПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		БСП__ОбщН__МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
		БСП__ОбщН__МодульПолнотекстовыйПоискКлиент.ПриИзмененииФлажкаИспользоватьПоиск(БСП__ОбщН__ИспользоватьПолнотекстовыйПоиск);
	КонецЕсли;
	
	БСП__ОбщН__УстановитьДоступность("БСП__ОбщН__ИспользоватьПолнотекстовыйПоиск");
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__ИспользованиеПрофилейБезопасности(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		БСП__ОбщН__МодульРаботаВБезопасномРежимеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаВБезопасномРежимеКлиент");
		БСП__ОбщН__МодульРаботаВБезопасномРежимеКлиент.ОткрытьДиалогНастройкиИспользованияПрофилейБезопасности();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__ДополнительныеРеквизиты(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		БСП__ОбщН__МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		БСП__ОбщН__МодульУправлениеСвойствамиКлиент.ОткрытьСписокСвойств(Истина);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__ДополнительныеСведения(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		БСП__ОбщН__МодульУправлениеСвойствамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеСвойствамиКлиент");
		БСП__ОбщН__МодульУправлениеСвойствамиКлиент.ОткрытьСписокСвойств();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__НастроитьХранениеИсторииИзменений(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		БСП__ОбщН__МодульВерсионированиеОбъектовКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВерсионированиеОбъектовКлиент");
		БСП__ОбщН__МодульВерсионированиеОбъектовКлиент.ПоказатьНастройку();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__НастроитьПолнотекстовыйПоиск(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		БСП__ОбщН__МодульПолнотекстовыйПоискКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолнотекстовыйПоискКлиент");
		БСП__ОбщН__МодульПолнотекстовыйПоискКлиент.ПоказатьНастройку();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__РегиональныеНастройки(Команда)
	ПараметрыФормы = Новый Структура("Источник", "ПанельАдминистрированияБСП");
	ОткрытьФорму("ОбщаяФорма.РегиональныеНастройки", ПараметрыФормы);
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__АдресПубликацииИнформационнойБазыВИнтернетеНачалоВыбораПродолжение()
	
	БСП__ОбщН__АдресПубликацииИнформационнойНачалоВыбораЗавершение("АдресПубликацииИнформационнойБазыВИнтернете");
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__АдресПубликацииИнформационнойБазыВЛокальнойСетиНачалоВыбораПродолжение()
	
	БСП__ОбщН__АдресПубликацииИнформационнойНачалоВыбораЗавершение("АдресПубликацииИнформационнойБазыВЛокальнойСети");
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ОбщН__АдресПубликацииИнформационнойНачалоВыбораЗавершение(ИмяРеквизита)
	
	Если ОбщегоНазначенияКлиент.КлиентПодключенЧерезВебСервер() Тогда
		БСП__ОбщН__АдресПубликацииИнформационнойБазыНачалоВыбораНаСервере(ИмяРеквизита, СтрокаСоединенияИнформационнойБазы());
		Подключаемый_ПриИзмененииРеквизита(Элементы[ИмяРеквизита]);
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не удалось автоматически заполнить поле, т.к. клиентское приложение не подключено через веб-сервер.'"));
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура БСП__ОбщН__АдресПубликацииИнформационнойБазыНачалоВыбораНаСервере(ИмяРеквизита, СтрокаСоединения)
	
	БСП__ОбщН__ПараметрыСоединения = СтроковыеФункцииКлиентСервер.ПараметрыИзСтроки(СтрокаСоединения);
	Если БСП__ОбщН__ПараметрыСоединения.Свойство("WS") Тогда
		НаборКонстант[ИмяРеквизита] = БСП__ОбщН__ПараметрыСоединения.WS;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура БСП__ОбщН__УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если (РеквизитПутьКДанным = "БСП__ОбщН__НаборКонстантИспользоватьДополнительныеРеквизитыИСведения" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		
		Элементы.БСП__ОбщН__ГруппаДополнительныеРеквизитыИлиСведения.Доступность =
			НаборКонстант.ИспользоватьДополнительныеРеквизитыИСведения;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "БСП__ОбщН__ХранитьИсториюИзменений" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		
		Элементы.БСП__ОбщН__НастроитьХранениеИсторииИзменений.Доступность = БСП__ОбщН__ХранитьИсториюИзменений;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "БСП__ОбщН__ИспользоватьПолнотекстовыйПоиск" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПолнотекстовыйПоиск") Тогда
		
		Элементы.БСП__ОбщН__НастроитьПолнотекстовыйПоиск.Доступность = БСП__ОбщН__ИспользоватьПолнотекстовыйПоиск;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "БСП__ОбщН__НаборКонстантИспользоватьЭлектронныеПодписи"
		Или РеквизитПутьКДанным = "БСП__ОбщН__НаборКонстантИспользоватьШифрование" Или РеквизитПутьКДанным = ""
		ИЛИ РеквизитПутьКДанным = "ИспользоватьЭлектронныеПодписи")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЭлектроннаяПодпись") Тогда
		
		Элементы.БСП__ОбщН__ГруппаНастройкиЭлектроннойПодписиИШифрования.Доступность =
			НаборКонстант.ИспользоватьЭлектронныеПодписи Или НаборКонстант.ИспользоватьШифрование;
		
		ИспользоватьЭлектронныеПодписи = БСП__ОбщН__НаборКонстантИспользоватьЭлектронныеПодписи;
		ПриУстановкеДоступностиНастроекУНФ("БСП__ОбщН__НаборКонстантИспользоватьЭлектронныеПодписи");
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		БСП__ОбщН__МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		БСП__ОбщН__ИспользуютсяПрофилиБезопасности = БСП__ОбщН__МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности();
	Иначе
		БСП__ОбщН__ИспользуютсяПрофилиБезопасности = Ложь;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "" Тогда
		БСП__ОбщН__ДоступностьНастройкиПроксиНаСервере = Не БСП__ОбщН__ИспользуютсяПрофилиБезопасности;
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "БСП__ОбщН__ГруппаОткрытьПараметрыПроксиСервера",
			"Доступность", БСП__ОбщН__ДоступностьНастройкиПроксиНаСервере);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "БСП__ОбщН__ГруппаНастройкаПроксиСервераНаСервереНедоступнаПриИспользованииПрофилейБезопасности",
			"Видимость", Не БСП__ОбщН__ДоступностьНастройкиПроксиНаСервере);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
#Область БСП_НастройкиРаботыСФайлами

&НаСервере
Процедура БСП__РФ__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		ВызватьИсключение НСтр("ru = 'Не внедрена подсистема Работа с файлами.
			|Рекомендуется отключить видимость этой панели.'");
	КонецЕсли;
	
	БСП__РФ__МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	БСП__РФ__МаксимальныйРазмерФайла = БСП__РФ__МодульРаботаСФайлами.МаксимальныйРазмерФайлаОбщий() / (1024*1024);
	БСП__РФ__МаксимальныйРазмерФайлаОбластиДанных = БСП__РФ__МодульРаботаСФайлами.МаксимальныйРазмерФайла() / (1024*1024);
	
	БСП__РФ__РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	Если БСП__РФ__РазделениеВключено Тогда
		Элементы.БСП__РФ__МаксимальныйРазмерФайла.МаксимальноеЗначение = БСП__РФ__МаксимальныйРазмерФайла;
	КонецЕсли;
	
	БСП__РФ__ЗапрещатьЗагрузкуФайловПоРасширению = НаборКонстант.ЗапрещатьЗагрузкуФайловПоРасширению;
	
	БСП__РФ__ПараметрыХраненияФайловВИБ = РаботаСФайламиВТомахСлужебный.ПараметрыХраненияФайловВИнформационнойБазе();
	Если БСП__РФ__ПараметрыХраненияФайловВИБ <> Неопределено Тогда
		БСП__РФ__РасширенияФайловВИБ = БСП__РФ__ПараметрыХраненияФайловВИБ.РасширенияФайлов;
		БСП__РФ__МаксимальныйРазмерФайлаВИБ = БСП__РФ__ПараметрыХраненияФайловВИБ.МаксимальныйРазмер / (1024*1024);
	КонецЕсли;
	
	РаботаСФайламиСлужебный.ЗаполнитьСписокТипамиФайлов(Элементы.БСП__РФ__РасширенияФайловВИБ.СписокВыбора);
	
	БСП__РФ__ЭтоАдминистраторСистемы = Пользователи.ЭтоПолноправныйПользователь(, Истина);
	Элементы.БСП__РФ__УправлениеХранениемФайлов.Видимость = БСП__РФ__ЭтоАдминистраторСистемы;
	Элементы.БСП__РФ__ГруппаУправлениеТомамиФайлов.Видимость = БСП__РФ__ЭтоАдминистраторСистемы;
	Элементы.БСП__РФ__ГруппаУправлениеРазмеромФайловВИБ.Видимость = БСП__РФ__ЭтоАдминистраторСистемы;
	Элементы.БСП__РФ__ОбщиеПараметрыДляВсехОбластейДанных.Видимость = БСП__РФ__ЭтоАдминистраторСистемы И БСП__РФ__РазделениеВключено;
	Элементы.БСП__РФ__ГруппаСписокРасширенийТекстовыхФайлов.Видимость = Не БСП__РФ__РазделениеВключено;
	Элементы.БСП__РФ__ГруппаУправлениеРасширениямиФайловВИБ.Видимость = БСП__РФ__ЭтоАдминистраторСистемы;
	
	Если БСП__РФ__ЭтоАдминистраторСистемы Тогда
		БСП__РФ__ЗначениеСпособаХраненияФайлов = НаборКонстант.СпособХраненияФайлов;
		БСП__РФ__УстановитьДоступностьНастроекХраненияВТомах();
	КонецЕсли;
	
	// Обновление состояния элементов.
	БСП__РФ__УстановитьДоступность();
	
	// УНФ.
	//НастройкиПрограммыПереопределяемый.НастройкиРаботыСФайламиПриСозданииНаСервере(ЭтотОбъект);
	// Конец УНФ.
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		Элементы.БСП__РФ__ОтступРазмерФайловВИБ.Видимость = Ложь;
		Элементы.БСП__РФ__ОтступРасширенияФайловВИБ.Видимость = Ложь;
		Элементы.БСП__РФ__МаксимальныйРазмерФайлаВИБ.КнопкаРегулирования = Ложь;
		Элементы.БСП__РФ__РасширенияФайловВИБ.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.БСП__РФ__СписокРасширенийТекстовыхФайлов.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.БСП__РФ__СписокРасширенийФайловOpenDocumentОбластиДанных.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__СпособХраненияФайловПриИзменении(Элемент)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Если НаборКонстант.СпособХраненияФайлов = БСП__РФ__ЗначениеСпособаХраненияФайлов Тогда
		Возврат;
	КонецЕсли;
	
	НаборКонстант.ХранитьФайлыВТомахНаДиске = НаборКонстант.СпособХраненияФайлов <> "ВИнформационнойБазе";
	
	ОбработкаОповещения = Новый ОписаниеОповещения(
		"БСП__РФ__СпособХраненияФайловПриИзмененииЗавершение", ЭтотОбъект, Элемент);
	
	Если БСП__РФ__ЗначениеСпособаХраненияФайлов <> "ВИнформационнойБазе"
		И НаборКонстант.ХранитьФайлыВТомахНаДиске Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаОповещения, КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;
	
	Попытка
		
		БСП__РФ__ЗапросыНаИспользованиеВнешнихРесурсов = БСП__РФ__ЗапросыНаИспользованиеВнешнихРесурсовТомовХраненияФайлов(
			НаборКонстант.ХранитьФайлыВТомахНаДиске);
		
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
			БСП__РФ__МодульРаботаВБезопасномРежимеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаВБезопасномРежимеКлиент");
			БСП__РФ__МодульРаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(
				БСП__РФ__ЗапросыНаИспользованиеВнешнихРесурсов, ЭтотОбъект, ОбработкаОповещения);
		Иначе
			ВыполнитьОбработкуОповещения(ОбработкаОповещения, КодВозвратаДиалога.ОК);
		КонецЕсли;
		
	Исключение
		
		НаборКонстант.СпособХраненияФайлов = БСП__РФ__ЗначениеСпособаХраненияФайлов;
		НаборКонстант.ХранитьФайлыВТомахНаДиске = БСП__РФ__ЗначениеСпособаХраненияФайлов <> "ВИнформационнойБазе";
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__СоздаватьПодкаталогиСИменамиВладельцевПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__РасширенияФайловВИБПриИзменении(Элемент)
	
	БСП__РФ__ПриИзмененииНастроекХраненияФайловВИБ();
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__РасширенияФайловВИБОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БСП__РФ__РасширенияФайловВИБ = РаботаСФайламиСлужебныйКлиент.РасширенияПоТипуФайла(ВыбранноеЗначение);
	БСП__РФ__ПриИзмененииНастроекХраненияФайловВИБ();
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__МаксимальныйРазмерФайлаВИБПриИзменении(Элемент)
	
	БСП__РФ__ПриИзмененииНастроекХраненияФайловВИБ();
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__ЗапрещатьЗагрузкуФайловПоРасширениюПриИзменении(Элемент)
	
	Если Не БСП__РФ__ЗапрещатьЗагрузкуФайловПоРасширению Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"БСП__РФ__ЗапрещатьЗагрузкуФайловПоРасширениюПослеПодтверждения", ЭтотОбъект, Новый Структура("Элемент", Элемент));
		ОткрытьФорму("ОбщаяФорма.ПредупреждениеБезопасности",
			Новый Структура("Ключ", "ПриИзмененииСпискаЗапрещенныхРасширений"), , , , , Оповещение);
		Возврат;
		
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__СинхронизироватьФайлыПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__СписокЗапрещенныхРасширенийОбластиДанныхПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__МаксимальныйРазмерФайлаОбластиДанныхПриИзменении(Элемент)
	
	Если БСП__РФ__МаксимальныйРазмерФайлаОбластиДанных = 0 Тогда
		
		БСП__РФ__ТекстСообщения = НСтр("ru = 'Поле ""Максимальный размер файла"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(БСП__РФ__ТекстСообщения, ,"БСП__РФ__МаксимальныйРазмерФайлаОбластиДанных");
		Возврат;
		
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__СписокРасширенийФайловOpenDocumentОбластиДанныхПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__СписокРасширенийТекстовыхФайловПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__МаксимальныйРазмерФайлаПриИзменении(Элемент)
	
	Если БСП__РФ__МаксимальныйРазмерФайла = 0 Тогда
		
		БСП__РФ__ТекстСообщения = НСтр("ru = 'Поле ""Максимальный размер файла"" не заполнено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(БСП__РФ__ТекстСообщения, ,"БСП__РФ__МаксимальныйРазмерФайла");
		Возврат;
		
	КонецЕсли;
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__СписокЗапрещенныхРасширенийПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__СписокРасширенийФайловOpenDocumentПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__СправочникТомаХраненияФайлов(Команда)
	
	ОткрытьФорму("Справочник.ТомаХраненияФайлов.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__НастройкаСинхронизацииФайлов(Команда)
	
	ОткрытьФорму("РегистрСведений.НастройкиСинхронизацииФайлов.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__ПереносФайлов(Команда)
	
	РаботаСФайламиСлужебныйКлиент.ПеренестиФайлы();
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__СпособХраненияФайловПриИзмененииЗавершение(Ответ, Элемент) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		НаборКонстант.СпособХраненияФайлов = БСП__РФ__ЗначениеСпособаХраненияФайлов;
		НаборКонстант.ХранитьФайлыВТомахНаДиске = БСП__РФ__ЗначениеСпособаХраненияФайлов <> "ВИнформационнойБазе";
	Иначе
		
		Если БСП__РФ__ЗначениеСпособаХраненияФайлов = "ВИнформационнойБазе"
			И НаборКонстант.ХранитьФайлыВТомахНаДиске
			И Не БСП__РФ__ЕстьТомаХраненияФайлов() Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Включено хранение файлов в томах на диске, но тома еще не настроены.
				|Добавляемые файлы будут сохраняться в информационной базе до тех пор, пока не будет настроен хотя бы один том хранения файлов.'"));
		КонецЕсли;
		
		БСП__РФ__ПриИзмененииСпособаХраненияФайловНаСервере();
		ОбновитьПовторноИспользуемыеЗначения();
		БСП__РФ__ПослеИзмененияРеквизита("БСП__РФ__СпособХраненияФайлов", Ложь);
		БСП__РФ__ПослеИзмененияРеквизита("ХранитьФайлыВТомахНаДиске");
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__ЗапрещатьЗагрузкуФайловПоРасширениюПослеПодтверждения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
		И Результат = "Продолжить" Тогда
		
		Подключаемый_ПриИзмененииРеквизита(ДополнительныеПараметры.Элемент);
	Иначе
		БСП__РФ__ЗапрещатьЗагрузкуФайловПоРасширению = Истина;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__ПриИзмененииНастроекХраненияФайловВИБ()
	
	БСП__РФ__УстановитьПараметрыХраненияФайловВИБ(
		Новый Структура("РасширенияФайлов, МаксимальныйРазмер",
		БСП__РФ__РасширенияФайловВИБ, БСП__РФ__МаксимальныйРазмерФайлаВИБ*1024*1024));
	
	ОбновитьПовторноИспользуемыеЗначения();
	БСП__РФ__ПослеИзмененияРеквизита("ПараметрыХраненияФайловВИБ", Ложь);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__РФ__ПослеИзмененияРеквизита(КонстантаИмя, ОбновлятьИнтерфейс = Истина)
	
	Если ОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура БСП__РФ__ПриИзмененииСпособаХраненияФайловНаСервере()
	
	БСП__РФ__ЗначениеСпособаХраненияФайлов = НаборКонстант.СпособХраненияФайлов;
	Константы.СпособХраненияФайлов.Установить(НаборКонстант.СпособХраненияФайлов);
	Константы.ХранитьФайлыВТомахНаДиске.Установить(НаборКонстант.ХранитьФайлыВТомахНаДиске);
	БСП__РФ__УстановитьДоступность("БСП__РФ__НаборКонстантСпособХраненияФайлов");
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры
&НаСервере
Процедура БСП__РФ__УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "БСП__РФ__НаборКонстантСпособХраненияФайлов" Тогда
		БСП__РФ__УстановитьДоступностьНастроекХраненияВТомах();
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "БСП__РФ__ЗапрещатьЗагрузкуФайловПоРасширению"
		Или РеквизитПутьКДанным = "" Тогда
		
		Элементы.БСП__РФ__СписокЗапрещенныхРасширенийОбластиДанных.Доступность = БСП__РФ__ЗапрещатьЗагрузкуФайловПоРасширению;
	КонецЕсли;
	
	Если РеквизитПутьКДанным = "БСП__РФ__НаборКонстантСинхронизироватьФайлы"
		Или РеквизитПутьКДанным = "" Тогда
		
		Элементы.БСП__РФ__НастройкиСинхронизацииФайлов.Доступность = НаборКонстант.СинхронизироватьФайлы;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура БСП__РФ__УстановитьДоступностьНастроекХраненияВТомах()
	
	Элементы.БСП__РФ__ГруппаУправлениеТомамиФайлов.Доступность = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	Элементы.БСП__РФ__СправочникТомаХраненияФайлов.Доступность = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	Элементы.БСП__РФ__СоздаватьПодкаталогиСИменамиВладельцев.Доступность = НаборКонстант.ХранитьФайлыВТомахНаДиске;
	Элементы.БСП__РФ__ГруппаУправлениеРазмеромФайловВИБ.Доступность =
		НаборКонстант.СпособХраненияФайлов = "ВИнформационнойБазеИТомахНаДиске";
	Элементы.БСП__РФ__ГруппаУправлениеРасширениямиФайловВИБ.Доступность =
		НаборКонстант.СпособХраненияФайлов = "ВИнформационнойБазеИТомахНаДиске";
	
КонецПроцедуры
&НаСервереБезКонтекста
Процедура БСП__РФ__УстановитьПараметрыХраненияФайловВИБ(ПараметрыХранения)
	
	РаботаСФайламиВТомахСлужебный.УстановитьПараметрыХраненияФайловВИнформационнойБазе(ПараметрыХранения);
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция БСП__РФ__ЗапросыНаИспользованиеВнешнихРесурсовТомовХраненияФайлов(Включение)
	
	БСП__РФ__ЗапросыНаИспользование = Новый Массив;
	БСП__РФ__ИмяСправочника = "ТомаХраненияФайлов";
	
	Если Включение Тогда
		Справочники[БСП__РФ__ИмяСправочника].ДобавитьЗапросыНаИспользованиеВнешнихРесурсовВсехТомов(
			БСП__РФ__ЗапросыНаИспользование);
	Иначе
		Справочники[БСП__РФ__ИмяСправочника].ДобавитьЗапросыНаОтменуИспользованияВнешнихРесурсовВсехТомов(
			БСП__РФ__ЗапросыНаИспользование);
	КонецЕсли;
	
	Возврат БСП__РФ__ЗапросыНаИспользование;
	
КонецФункции
&НаСервереБезКонтекста
Функция БСП__РФ__ЕстьТомаХраненияФайлов()
	
	БСП__РФ__МодульРаботаСФайламиВТомахСлужебный = ОбщегоНазначения.ОбщийМодуль("РаботаСФайламиВТомахСлужебный");
	Возврат БСП__РФ__МодульРаботаСФайламиВТомахСлужебный.ЕстьТомаХраненияФайлов();
	
КонецФункции

#КонецОбласти
#Область БСП_Обслуживание

&НаСервере
Процедура БСП__Обсл__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РегламентныеЗадания") Тогда
		Элементы.БСП__Обсл__ГруппаБлокировкаРаботыСВнешнимиРесурсами.Видимость =
			РегламентныеЗаданияСервер.РаботаСВнешнимиРесурсамиЗаблокирована();
		
		Элементы.БСП__Обсл__ГруппаОбработкаРегламентныеИФоновыеЗадания.Видимость =
			Пользователи.ЭтоПолноправныйПользователь(, Истина);
	Иначе
		Элементы.БСП__Обсл__ГруппаОбработкаРегламентныеИФоновыеЗадания.Видимость = Ложь;
		Элементы.БСП__Обсл__ГруппаБлокировкаРаботыСВнешнимиРесурсами.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеИтогамиИАгрегатами") Тогда
		Элементы.БСП__Обсл__ГруппаОбработкаУправлениеИтогамиИАгрегатамиОткрыть.Видимость =
			  Пользователи.ЭтоПолноправныйПользователь()
			И Не ОбщегоНазначения.РазделениеВключено();
	Иначе
		Элементы.БСП__Обсл__ГруппаОбработкаУправлениеИтогамиИАгрегатамиОткрыть.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ") Тогда
		Элементы.ГруппаРезервноеКопированиеИВосстановление.Видимость =
			  Пользователи.ЭтоПолноправныйПользователь(, Истина)
			И Не ОбщегоНазначения.РазделениеВключено()
			И Не ОбщегоНазначения.КлиентПодключенЧерезВебСервер()
			И ОбщегоНазначения.ЭтоWindowsКлиент();
		
		БСП__Обсл__ОбновитьНастройкиРезервногоКопирования();
	Иначе
		Элементы.ГруппаРезервноеКопированиеИВосстановление.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности") Тогда
		Элементы.БСП__Обсл__ГруппаОценкаПроизводительности.Видимость =
			Пользователи.ЭтоПолноправныйПользователь(, Истина);
	Иначе
		Элементы.БСП__Обсл__ГруппаОценкаПроизводительности.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов") Тогда
		Элементы.БСП__Обсл__ГруппаОбработкаГрупповоеИзменениеОбъектов.Видимость =
			Пользователи.ЭтоПолноправныйПользователь();
	Иначе
		Элементы.БСП__Обсл__ГруппаОбработкаГрупповоеИзменениеОбъектов.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПоискИУдалениеДублей") Тогда
		Элементы.БСП__Обсл__ГруппаПоискИУдалениеДублей.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Элементы.БСП__Обсл__ГруппаДополнительныеОтчетыИОбработки.Видимость =
			НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	Иначе
		Элементы.БСП__Обсл__ГруппаДополнительныеОтчетыИОбработки.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбновлениеКонфигурации") Тогда
		МодульОбновлениеКонфигурации = ОбщегоНазначения.ОбщийМодуль("ОбновлениеКонфигурации");
		Элементы.БСП__Обсл__ГруппаУстановкаОбновлений.Видимость =
			  Пользователи.ЭтоПолноправныйПользователь(, Истина)
			И Не ОбщегоНазначения.ЭтоАвтономноеРабочееМесто()
			И Не ОбщегоНазначения.РазделениеВключено()
			И Не ОбщегоНазначения.КлиентПодключенЧерезВебСервер()
			И ОбщегоНазначения.ЭтоWindowsКлиент();
		
		Элементы.БСП__Обсл__ГруппаУстановленныеИсправления.Видимость =
			Пользователи.ЭтоПолноправныйПользователь();
			
		Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
			И Не СтандартныеПодсистемыСервер.ДоступнаУстановкаПодписанныхРасширенийВБазовойВерсии() Тогда
			Элементы.БСП__Обсл__УстановкаОбновлений.Заголовок = НСтр("ru = 'Установка обновлений'");
			Элементы.БСП__Обсл__УстановкаОбновлений.РасширеннаяПодсказка.Заголовок =
				НСтр("ru = 'Обновление программы из файла на локальном диске или в сетевом каталоге.'");
		КонецЕсли;
	Иначе
		Элементы.БСП__Обсл__ГруппаУстановкаОбновлений.Видимость = Ложь;
		Элементы.БСП__Обсл__ГруппаУстановленныеИсправления.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		МодульОблачныйАрхив = ОбщегоНазначения.ОбщийМодуль("ОблачныйАрхив");
		МодульОблачныйАрхив.ПанельАдминистрированияБСП_ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Если Элементы.Найти("БСП__Обсл__ПравилПроверкиУчета") <> Неопределено Тогда
			Элементы.БСП__Обсл__ПравилаПроверкиУчета.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Или ОбщегоНазначения.РазделениеВключено() Тогда
		Элементы.БСП__Обсл__ГруппаНастройкаПриоритетаОбновления.Видимость = Ложь;
	Иначе
		БСП__Обсл__КоличествоПотоковОбновления = ОбновлениеИнформационнойБазы.КоличествоПотоковОбновления();
		БСП__Обсл__ПриоритетОбработкиДанных    = ОбновлениеИнформационнойБазы.ПриоритетОтложеннойОбработки();
		Элементы.БСП__Обсл__КоличествоПотоковОбновления.Видимость = ОбновлениеИнформационнойБазы.РазрешеноМногопоточноеОбновление();
		БСП__Обсл__НастроитьИспользованиеКоличестваПотоковОбновления(БСП__Обсл__ПриоритетОбработкиДанных);
	КонецЕсли;
	
	// Обновление состояния элементов.
	УстановитьДоступность();
	
	// УНФ.
	//НастройкиПрограммыПереопределяемый.ОбслуживаниеПриСозданииНаСервере(ЭтотОбъект);
	// Конец УНФ.
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__ПриОткрытии(Отказ)

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		БСП__Обсл__МодульОблачныйАрхивКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхивКлиент");
		БСП__Обсл__МодульОблачныйАрхивКлиент.ПанельАдминистрированияБСП_ПриОткрытии(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаНастройкиРезервногоКопирования"
		И ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РезервноеКопированиеИБ") Тогда
		БСП__Обсл__ОбновитьНастройкиРезервногоКопирования();
	ИначеЕсли ИмяСобытия = "РазрешенаРаботаСВнешнимиРесурсами" Тогда
		Элементы.БСП__Обсл__ГруппаБлокировкаРаботыСВнешнимиРесурсами.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		БСП__Обсл__МодульОблачныйАрхивКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхивКлиент");
		БСП__Обсл__МодульОблачныйАрхивКлиент.ПанельАдминистрированияБСП_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__ВыполнятьЗамерыПроизводительностиПриИзменении(Элемент)
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__ДетализироватьОбновлениеИБВЖурналеРегистрацииПриИзменении(Элемент)
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__ПриоритетОтложеннойОбработкиДанныхПриИзменении(Элемент)
	БСП__Обсл__УстановитьПриоритетОтложеннойОбработки(Элемент.Имя);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__КоличествоПотоковОбновленияИнформационнойБазыПриИзменении(Элемент)
	БСП__Обсл__УстановитьКоличествоПотоковОбновления();
КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__ОблачныйАрхивОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Истина;

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		БСП__Обсл__МодульОблачныйАрхивКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхивКлиент");
		БСП__Обсл__МодульОблачныйАрхивКлиент.ОбработкаНавигационнойСсылки(
			ЭтотОбъект, Элемент, НавигационнаяСсылкаФорматированнойСтроки,
			СтандартнаяОбработка, Новый Структура);
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__СпособРезервногоКопированияПриИзменении(Элемент)

	// В зависимости от состояния, вывести правильную страницу.
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		БСП__Обсл__МодульОблачныйАрхивКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхивКлиент");
		БСП__Обсл__МодульОблачныйАрхивКлиент.ПанельАдминистрированияБСП_СпособРезервногоКопированияПриИзменении(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__РазблокироватьРаботуСВнешнимиРесурсами(Команда)
	БСП__Обсл__РазблокироватьРаботуСВнешнимиРесурсамиНаСервере();
	СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
	Оповестить("РазрешенаРаботаСВнешнимиРесурсами");
	ОбновитьИнтерфейс();
КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__ОтложеннаяОбработкаДанных(Команда)
	ПараметрыФормы = Новый Структура("ОткрытиеИзПанелиАдминистрирования", Истина);
	ОткрытьФорму("Обработка.РезультатыОбновленияПрограммы.Форма.ИндикацияХодаОтложенногоОбновленияИБ", ПараметрыФормы);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__ПодключитьСервисОблачныйАрхив(Команда)

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		БСП__Обсл__МодульОблачныйАрхивКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхивКлиент");
		БСП__Обсл__МодульОблачныйАрхивКлиент.ПодключитьСервисОблачныйАрхив();
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__ОблачныйАрхивВосстановлениеИзРезервнойКопииНажатие(Элемент)

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		БСП__Обсл__МодульОблачныйАрхивКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхивКлиент");
		БСП__Обсл__МодульОблачныйАрхивКлиент.ВосстановлениеИзРезервнойКопии();
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура БСП__Обсл__ОблачныйАрхивНастройкаРезервногоКопированияНажатие(Элемент)

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		БСП__Обсл__МодульОблачныйАрхивКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхивКлиент");
		БСП__Обсл__МодульОблачныйАрхивКлиент.НастройкаРезервногоКопирования();
	КонецЕсли;

КонецПроцедуры
&НаСервере
Процедура БСП__Обсл__УстановитьПриоритетОтложеннойОбработки(ИмяЭлемента)
	ОбновлениеИнформационнойБазы.УстановитьПриоритетОтложеннойОбработки(БСП__Обсл__ПриоритетОбработкиДанных);
	БСП__Обсл__НастроитьИспользованиеКоличестваПотоковОбновления(БСП__Обсл__ПриоритетОбработкиДанных);
КонецПроцедуры
&НаСервере
Процедура БСП__Обсл__НастроитьИспользованиеКоличестваПотоковОбновления(Приоритет)
	Элементы.БСП__Обсл__КоличествоПотоковОбновления.Доступность = (Приоритет = "ОбработкаДанных");
КонецПроцедуры
&НаСервере
Процедура БСП__Обсл__УстановитьКоличествоПотоковОбновления()
	ОбновлениеИнформационнойБазы.УстановитьКоличествоПотоковОбновления(БСП__Обсл__КоличествоПотоковОбновления);
КонецПроцедуры
&НаСервере
Процедура БСП__Обсл__УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОценкаПроизводительности")
		И (РеквизитПутьКДанным = "БСП__Обсл__НаборКонстантВыполнятьЗамерыПроизводительности"
		Или РеквизитПутьКДанным = "") Тогда
			БСП__Обсл__ЭлементОбработкаОценкаПроизводительностиИмпортЗамеровПроизводительности = Элементы.Найти("БСП__Обсл__ОбработкаОценкаПроизводительностиИмпортЗамеровПроизводительности");
			БСП__Обсл__ЭлементОбработкаОценкаПроизводительностиЭкспортДанных = Элементы.Найти("БСП__Обсл__ОбработкаОценкаПроизводительностиЭкспортДанных");
			БСП__Обсл__ЭлементСправочникПрофилиКлючевыхОперацийОткрытьСписок = Элементы.Найти("БСП__Обсл__СправочникПрофилиКлючевыхОперацийОткрытьСписок");
			БСП__Обсл__ЭлементОбработкаНастройкиОценкиПроизводительности = Элементы.Найти("БСП__Обсл__ОбработкаНастройкиОценкиПроизводительности");
			// УНФ.
			//Если (БСП__Обсл__ЭлементОбработкаНастройкиОценкиПроизводительности <> Неопределено
			//	И БСП__Обсл__ЭлементОбработкаОценкаПроизводительностиЭкспортДанных <> Неопределено				
			//	И БСП__Обсл__ЭлементСправочникПрофилиКлючевыхОперацийОткрытьСписок <> Неопределено
			//	И БСП__Обсл__ЭлементОбработкаОценкаПроизводительностиИмпортЗамеровПроизводительности <> Неопределено
			//	И НаборКонстант.Свойство("ВыполнятьЗамерыПроизводительности")) Тогда
			//	БСП__Обсл__ЭлементОбработкаНастройкиОценкиПроизводительности.Доступность = НаборКонстант.ВыполнятьЗамерыПроизводительности;
			//	БСП__Обсл__ЭлементОбработкаОценкаПроизводительностиЭкспортДанных.Доступность = НаборКонстант.ВыполнятьЗамерыПроизводительности;
			//	БСП__Обсл__ЭлементСправочникПрофилиКлючевыхОперацийОткрытьСписок.Доступность = НаборКонстант.ВыполнятьЗамерыПроизводительности;
			//	БСП__Обсл__ЭлементОбработкаОценкаПроизводительностиИмпортЗамеровПроизводительности.Доступность = НаборКонстант.ВыполнятьЗамерыПроизводительности;
			//КонецЕсли;
			Если НаборКонстант.Свойство("ВыполнятьЗамерыПроизводительности") Тогда
				Если БСП__Обсл__ЭлементОбработкаНастройкиОценкиПроизводительности <> Неопределено Тогда
					БСП__Обсл__ЭлементОбработкаНастройкиОценкиПроизводительности.Доступность = НаборКонстант.ВыполнятьЗамерыПроизводительности;
				КонецЕсли;
				Если БСП__Обсл__ЭлементОбработкаОценкаПроизводительностиЭкспортДанных <> Неопределено Тогда
					БСП__Обсл__ЭлементОбработкаОценкаПроизводительностиЭкспортДанных.Доступность = НаборКонстант.ВыполнятьЗамерыПроизводительности;
				КонецЕсли;
				Если БСП__Обсл__ЭлементСправочникПрофилиКлючевыхОперацийОткрытьСписок <> Неопределено Тогда
					БСП__Обсл__ЭлементСправочникПрофилиКлючевыхОперацийОткрытьСписок.Доступность = НаборКонстант.ВыполнятьЗамерыПроизводительности;
				КонецЕсли;
				Если БСП__Обсл__ЭлементОбработкаОценкаПроизводительностиИмпортЗамеровПроизводительности <> Неопределено Тогда
					БСП__Обсл__ЭлементОбработкаОценкаПроизводительностиИмпортЗамеровПроизводительности.Доступность = НаборКонстант.ВыполнятьЗамерыПроизводительности;
				КонецЕсли;
			КонецЕсли;
			// Конец УНФ.
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура БСП__Обсл__ОбновитьНастройкиРезервногоКопирования()
	
	Если Не ОбщегоНазначения.РазделениеВключено()
	   И Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		
		МодульРезервноеКопированиеИБСервер = ОбщегоНазначения.ОбщийМодуль("РезервноеКопированиеИБСервер");
		Элементы.НастройкаРезервногоКопированияИБ.РасширеннаяПодсказка.Заголовок = МодульРезервноеКопированиеИБСервер.ТекущаяНастройкаРезервногоКопирования();
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура БСП__Обсл__РазблокироватьРаботуСВнешнимиРесурсамиНаСервере()
	Элементы.БСП__Обсл__ГруппаБлокировкаРаботыСВнешнимиРесурсами.Видимость = Ложь;
	БСП__Обсл__МодульРегламентныеЗаданияСервер = ОбщегоНазначения.ОбщийМодуль("РегламентныеЗаданияСервер");
	БСП__Обсл__МодульРегламентныеЗаданияСервер.РазблокироватьРаботуСВнешнимиРесурсами();
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПроверитьСостояниеОблачногоАрхива()

	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ОблачныйАрхив") Тогда
		БСП__Обсл__МодульОблачныйАрхивКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОблачныйАрхивКлиент");
		БСП__Обсл__МодульОблачныйАрхивКлиент.ПанельАдминистрированияБСП_ПроверитьСостояниеОблачногоАрхива(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
#Область БСП_Органайзер

&НаСервере
Процедура БСП__Орг__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			БСП__Орг__ЕстьПочта = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСПочтовымиСообщениями");
			БСП__Орг__РегламентноеЗадание = БСП__Орг__НайтиРегламентноеЗадание("МониторингЗадач");
			Если БСП__Орг__ЕстьПочта И БСП__Орг__РегламентноеЗадание <> Неопределено Тогда
				БСП__Орг__МониторингЗадачИспользование = БСП__Орг__РегламентноеЗадание.Использование;
				БСП__Орг__МониторингЗадачРасписание    = БСП__Орг__РегламентноеЗадание.Расписание;
			Иначе
				Элементы.БСП__Орг__ГруппаМониторингЗадач.Видимость = Ложь;
			КонецЕсли;
			БСП__Орг__РегламентноеЗадание = БСП__Орг__НайтиРегламентноеЗадание("УведомлениеИсполнителейОНовыхЗадачах");
			Если БСП__Орг__ЕстьПочта И БСП__Орг__РегламентноеЗадание <> Неопределено Тогда
				БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахИспользование = БСП__Орг__РегламентноеЗадание.Использование;
				БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахРасписание    = БСП__Орг__РегламентноеЗадание.Расписание;
			Иначе
				Элементы.БСП__Орг__ГруппаУведомлениеИсполнителейОНовыхЗадачах.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.БСП__Орг__ГруппаМониторингЗадач.Видимость = Ложь;
			Элементы.БСП__Орг__ГруппаУведомлениеИсполнителейОНовыхЗадачах.Видимость = Ложь;
		КонецЕсли;
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Элементы.БСП__Орг__МониторингЗадачНастроитьРасписание.Видимость = Ложь;
			Элементы.БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахНастроитьРасписание.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.БСП__Орг__ГруппаБизнесПроцессыИЗадачи.Видимость = Ложь;
	КонецЕсли;
	
	// Обновление состояния элементов.
	БСП__Орг__УстановитьДоступность();
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия <> "Запись_НаборКонстант" Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник = "ИспользоватьВнешнихПользователей" Тогда
		
		ЭтотОбъект.Прочитать();
		БСП__Орг__УстановитьДоступность();
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьПочтовыйКлиентПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьПрочиеВзаимодействияПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ОтправлятьПисьмаВФорматеHTMLПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьПризнакРассмотреноПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ЗапретитьОтображениеНебезопасногоСодержимогоВПисьмахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьЗаметкиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьНапоминанияПользователяПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьАнкетированиеПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьШаблоныСообщенийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьБизнесПроцессыИЗадачиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьПодчиненныеБизнесПроцессыПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИзменятьЗаданияЗаднимЧисломПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьДатуНачалаЗадачПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ИспользоватьДатуИВремяВСрокахЗадачПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__ШаблоныСообщений(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		БСП__Орг__МодульШаблоныСообщенийКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ШаблоныСообщенийКлиент");
		БСП__Орг__МодульШаблоныСообщенийКлиент.ОткрытьСписокШаблонов();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__РолиИИсполнителиЗадач(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		БСП__Орг__МодульБизнесПроцессыИЗадачиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("БизнесПроцессыИЗадачиКлиент");
		БСП__Орг__МодульБизнесПроцессыИЗадачиКлиент.ОткрытьСписокРолейИИсполнителейЗадач();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__МониторингЗадачНастроитьРасписание(Команда)
	БСП__Орг__Диалог = Новый ДиалогРасписанияРегламентногоЗадания(БСП__Орг__МониторингЗадачРасписание);
	БСП__Орг__Диалог.Показать(Новый ОписаниеОповещения("БСП__Орг__МониторингЗадачПослеИзмененияРасписания", ЭтотОбъект));
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахНастроитьРасписание(Команда)
	БСП__Орг__Диалог = Новый ДиалогРасписанияРегламентногоЗадания(БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахРасписание);
	БСП__Орг__Диалог.Показать(Новый ОписаниеОповещения("БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахПослеИзмененияРасписания", ЭтотОбъект));
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__МониторингЗадачПослеИзмененияРасписания(Расписание, ПараметрыВыполнения) Экспорт
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БСП__Орг__МониторингЗадачРасписание = Расписание;
	БСП__Орг__МониторингЗадачИспользование = Истина;
	БСП__Орг__ЗаписатьРегламентноеЗадание("МониторингЗадач", БСП__Орг__МониторингЗадачИспользование, 
		БСП__Орг__МониторингЗадачРасписание, "БСП__Орг__МониторингЗадачРасписание");
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__МониторингЗадачИспользованиеПриИзменении(Элемент)
	БСП__Орг__ЗаписатьРегламентноеЗадание("МониторингЗадач", БСП__Орг__МониторингЗадачИспользование, 
		БСП__Орг__МониторингЗадачРасписание, "БСП__Орг__МониторингЗадачРасписание");
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахПослеИзмененияРасписания(Расписание, ПараметрыВыполнения) Экспорт
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахРасписание = Расписание;
	БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахИспользование = Истина;
	БСП__Орг__ЗаписатьРегламентноеЗадание("УведомлениеИсполнителейОНовыхЗадачах", БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахИспользование, 
		БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахРасписание, "БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахРасписание");
КонецПроцедуры
&НаКлиенте
Процедура БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахИспользованиеПриИзменении(Элемент)
	БСП__Орг__ЗаписатьРегламентноеЗадание("УведомлениеИсполнителейОНовыхЗадачах", БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахИспользование, 
		БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахРасписание, "БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахРасписание");
КонецПроцедуры
&НаСервере
Процедура БСП__Орг__УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если (РеквизитПутьКДанным = "БСП__Орг__НаборКонстантИспользоватьПочтовыйКлиент" ИЛИ РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		
		Элементы.БСП__Орг__ИспользоватьПрочиеВзаимодействия.Доступность             = НаборКонстант.ИспользоватьПочтовыйКлиент;
		Элементы.БСП__Орг__ИспользоватьПризнакРассмотрено.Доступность               = НаборКонстант.ИспользоватьПочтовыйКлиент;
		Элементы.БСП__Орг__ОтправлятьПисьмаВФорматеHTML.Доступность                 = НаборКонстант.ИспользоватьПочтовыйКлиент;
		Элементы.БСП__Орг__ЗапретитьОтображениеНебезопасногоСодержимогоВПисьмах.Доступность = НаборКонстант.ИспользоватьПочтовыйКлиент;
		
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "БСП__Орг__НаборКонстантИспользоватьШаблоныСообщений" ИЛИ РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ШаблоныСообщений") Тогда
		
		Элементы.БСП__Орг__ГруппаНастройкаШаблоныСообщений.Доступность = НаборКонстант.ИспользоватьШаблоныСообщений;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "БСП__Орг__НаборКонстантИспользоватьБизнесПроцессыИЗадачи" ИЛИ РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		
		Элементы.БСП__Орг__ОткрытьРолиИИсполнителиБизнесПроцессов.Доступность = НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи;
		Элементы.БСП__Орг__ИспользоватьПодчиненныеБизнесПроцессы.Доступность  = НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи;
		Элементы.БСП__Орг__ИзменятьЗаданияЗаднимЧислом.Доступность            = НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи;
		Элементы.БСП__Орг__ИспользоватьДатуНачалаЗадач.Доступность            = НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи;
		Элементы.БСП__Орг__ИспользоватьДатуИВремяВСрокахЗадач.Доступность     = НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи;
		Элементы.БСП__Орг__ГруппаМониторингЗадач.Доступность					= НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи;
		Элементы.БСП__Орг__ГруппаУведомлениеИсполнителейОНовыхЗадачах.Доступность = НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи;
		
	КонецЕсли;
	
	Если Элементы.БСП__Орг__ГруппаМониторингЗадач.Видимость
		И (РеквизитПутьКДанным = "БСП__Орг__МониторингЗадачРасписание" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		Элементы.БСП__Орг__МониторингЗадачНастроитьРасписание.Доступность	= БСП__Орг__МониторингЗадачИспользование;
		Если БСП__Орг__МониторингЗадачИспользование Тогда
			БСП__Орг__РасписаниеПредставление = Строка(БСП__Орг__МониторингЗадачРасписание);
			БСП__Орг__Представление = ВРег(Лев(БСП__Орг__РасписаниеПредставление, 1)) + Сред(БСП__Орг__РасписаниеПредставление, 2);
		Иначе
			БСП__Орг__Представление = "";
		КонецЕсли;
		Элементы.БСП__Орг__МониторингЗадачПояснение.Заголовок = БСП__Орг__Представление;
	КонецЕсли;
	
	Если Элементы.БСП__Орг__ГруппаУведомлениеИсполнителейОНовыхЗадачах.Видимость
		И (РеквизитПутьКДанным = "БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахРасписание" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		Элементы.БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахНастроитьРасписание.Доступность	= БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахИспользование;
		Если БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахИспользование Тогда
			БСП__Орг__РасписаниеПредставление = Строка(БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахРасписание);
			БСП__Орг__Представление = ВРег(Лев(БСП__Орг__РасписаниеПредставление, 1)) + Сред(БСП__Орг__РасписаниеПредставление, 2);
		Иначе
			БСП__Орг__Представление = "";
		КонецЕсли;
		Элементы.БСП__Орг__УведомлениеИсполнителейОНовыхЗадачахПояснение.Заголовок = БСП__Орг__Представление;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура БСП__Орг__ЗаписатьРегламентноеЗадание(ИмяПредопределенного, Использование, Расписание, РеквизитПутьКДанным)
	БСП__Орг__РегламентноеЗадание = БСП__Орг__НайтиРегламентноеЗадание(ИмяПредопределенного);
	
	БСП__Орг__ПараметрыЗадания = Новый Структура;
	БСП__Орг__ПараметрыЗадания.Вставить("Использование", Использование);
	БСП__Орг__ПараметрыЗадания.Вставить("Расписание", Расписание);
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(БСП__Орг__РегламентноеЗадание, БСП__Орг__ПараметрыЗадания);
	
	Если РеквизитПутьКДанным <> Неопределено Тогда
		БСП__Орг__УстановитьДоступность(РеквизитПутьКДанным);
	КонецЕсли;
КонецПроцедуры
&НаСервере
Функция БСП__Орг__НайтиРегламентноеЗадание(ИмяПредопределенного)
	Отбор = Новый Структура;
	Отбор.Вставить("Метаданные", ИмяПредопределенного);
	
	БСП__Орг__РезультатПоиска = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Возврат ?(БСП__Орг__РезультатПоиска.Количество() = 0, Неопределено, БСП__Орг__РезультатПоиска[0]);
КонецФункции

#КонецОбласти
#Область БСП_ПечатныеФормыОтчетыИОбработки

&НаСервере
Процедура БСП__ПФО__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ РежимРаботы.ЭтоАдминистраторПрограммы
		И НЕ РежимРаботы.ЭтоАдминистраторСистемы Тогда
		Возврат;
	КонецЕсли;
	
	// Настройки видимости при запуске.
	Элементы.БСП__ПФО__Расширения.Видимость = Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		БСП__ПФО__РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
		Элементы.БСП__ПФО__ИспользоватьДополнительныеОтчетыИОбработки.Видимость = Не БСП__ПФО__РазделениеВключено;
		Элементы.БСП__ПФО__ОткрытьДополнительныеОтчетыИОбработки.Видимость      = Не БСП__ПФО__РазделениеВключено
			// При работе в модели сервиса, если включено администратором сервиса.
			Или НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	Иначе
		Элементы.БСП__ПФО__ГруппаДополнительныеОтчетыИОбработки.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		БСП__ПФО__МодульРассылкаОтчетов = ОбщегоНазначения.ОбщийМодуль("РассылкаОтчетов");
		Элементы.БСП__ПФО__ОткрытьРассылкиОтчетов.Видимость = БСП__ПФО__МодульРассылкаОтчетов.ПравоДобавления();
	Иначе
		Элементы.БСП__ПФО__ГруппаРассылкиОтчетов.Видимость = Ложь;
	КонецЕсли;
	
	// Обновление состояния элементов.
	БСП__ПФО__УстановитьДоступность();
	
	// УНФ.
	//НастройкиПрограммыПереопределяемый.ПечатныеФормыОтчетыИОбработкиПриСозданииНаСервере(ЭтотОбъект);
	// Конец УНФ.
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ПФО__ИспользоватьДополнительныеОтчетыИОбработкиПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура БСП__ПФО__ДополнительныеОтчетыИОбработки(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		БСП__ПФО__МодульДополнительныеОтчетыИОбработкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиент");
		БСП__ПФО__МодульДополнительныеОтчетыИОбработкиКлиент.ОткрытьСписокДополнительныхОтчетовИОбработок();
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура БСП__ПФО__УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если РеквизитПутьКДанным = "БСП__ПФО__НаборКонстантИспользоватьДополнительныеОтчетыИОбработки" ИЛИ РеквизитПутьКДанным = ""
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		Элементы.БСП__ПФО__ОткрытьДополнительныеОтчетыИОбработки.Доступность = НаборКонстант.ИспользоватьДополнительныеОтчетыИОбработки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
#Область БСП_СинхронизацияДанных

&НаСервере
Процедура БСП__СД__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	БСП__СД__РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	БСП__СД__ПодсистемаСуществуетОбменДанными         = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными");
	БСП__СД__ПодсистемаСуществуетДатыЗапретаИзменения = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения");
	
	БСП__СД__УстановитьВидимость();
	БСП__СД__УстановитьДоступность();
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__СД__ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БСП__СД__ОбработчикОповещений(ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__СД__ИспользоватьСинхронизациюДанныхПриИзменении(Элемент)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	БСП__СД__ОбновитьРазрешенияПрофилейБезопасности(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__СД__ПрефиксУзлаРаспределеннойИнформационнойБазыПриИзменении(Элемент)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	БСП__СД__ФоновоеЗадание = БСП__СД__ЗапуститьИзменениеПрефиксаИБВФоновомЗадании();
	
	Если БСП__СД__ФоновоеЗадание <> Неопределено
		И БСП__СД__ФоновоеЗадание.Статус = "Выполняется" Тогда
		
		Элементы.БСП__СД__ПрефиксУзлаРаспределеннойИнформационнойБазы.Доступность = Ложь;
		Элементы.БСП__СД__ДекорацияОжиданиеИзмененияПрефикса.Видимость = Истина;
		
	КонецЕсли;
	
	БСП__СД__НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	БСП__СД__НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
	
	БСП__СД__Обработчик = Новый ОписаниеОповещения("БСП__СД__ПослеИзмененияПрефикса", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(БСП__СД__ФоновоеЗадание, БСП__СД__Обработчик, БСП__СД__НастройкиОжидания);
	
КонецПроцедуры
&НаСервере
Функция БСП__СД__ЗапуститьИзменениеПрефиксаИБВФоновомЗадании()
	
	БСП__СД__ПараметрыПроцедуры = Новый Структура("НовыйПрефиксИБ, ПродолжитьНумерацию",
		НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы, Истина);
		
	БСП__СД__ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	БСП__СД__ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Изменение префикса'");
	БСП__СД__ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ПрефиксацияОбъектовСлужебный.ИзменитьПрефиксИБ", БСП__СД__ПараметрыПроцедуры, БСП__СД__ПараметрыВыполнения);
	
КонецФункции
&НаКлиенте
Процедура БСП__СД__ПослеИзмененияПрефикса(БСП__СД__ФоновоеЗадание, ДополнительныеПараметры) Экспорт

	Если Не Элементы.БСП__СД__ПрефиксУзлаРаспределеннойИнформационнойБазы.Доступность Тогда
		Элементы.БСП__СД__ПрефиксУзлаРаспределеннойИнформационнойБазы.Доступность = Истина;
	КонецЕсли;
	Если Элементы.БСП__СД__ДекорацияОжиданиеИзмененияПрефикса.Видимость Тогда
		Элементы.БСП__СД__ДекорацияОжиданиеИзмененияПрефикса.Видимость = Ложь;
	КонецЕсли;
	
	Если БСП__СД__ФоновоеЗадание <> Неопределено
		И БСП__СД__ФоновоеЗадание.Статус = "Выполнено" Тогда
		
		ПоказатьОповещениеПользователя(НСтр("ru = 'Префикс изменен.'"));
		
	Иначе
		
		НаборКонстант.ПрефиксУзлаРаспределеннойИнформационнойБазы = БСП__СД__ПрефиксЗачитанныйИзИнформационнойБазы();
		Элементы.БСП__СД__ПрефиксУзлаРаспределеннойИнформационнойБазы.ОбновитьТекстРедактирования();
		
		Если БСП__СД__ФоновоеЗадание <> Неопределено Тогда
			БСП__СД__ТекстОшибки = НСтр("ru = 'Не удалось изменить префикс.
				|См. подробности в журнале регистрации.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(БСП__СД__ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
&НаСервереБезКонтекста
Функция БСП__СД__ПрефиксЗачитанныйИзИнформационнойБазы()
	
	Возврат Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	
КонецФункции
&НаКлиенте
Процедура БСП__СД__КаталогСообщенийОбменаДаннымиДляWindowsПриИзменении(Элемент)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	БСП__СД__ОбновитьРазрешенияПрофилейБезопасности(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__СД__КаталогСообщенийОбменаДаннымиДляLinuxПриИзменении(Элемент)
	
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	БСП__СД__ОбновитьРазрешенияПрофилейБезопасности(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__СД__НастройкиСинхронизацииДанных(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ОбменДанными") Тогда
		БСП__СД__МодульОбменДаннымиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбменДаннымиКлиент");
		БСП__СД__МодульОбменДаннымиКлиент.ОткрытьНастройкиСинхронизацииДанных();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__СД__НастроитьДатыЗапретаЗагрузки(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		БСП__СД__МодульДатыЗапретаИзмененияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ДатыЗапретаИзмененияСлужебныйКлиент");
		БСП__СД__МодульДатыЗапретаИзмененияСлужебныйКлиент.ОткрытьДатыЗапретаЗагрузкиДанных(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__СД__ОбработчикОповещений(ИмяСобытия, Параметр, Источник)
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__СД__ОбновитьРазрешенияПрофилейБезопасности(Элемент)
	
	БСП__СД__ОповещениеОЗакрытии = Новый ОписаниеОповещения("БСП__СД__ОбновитьРазрешенияПрофилейБезопасностиЗавершение", ЭтотОбъект, Элемент);
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		
		// УНФ.
		//БСП__СД__МассивЗапросов = БСП__СД__СоздатьЗапросНаИспользованиеВнешнихРесурсов(Элемент.Имя);
		БСП__СД__МассивЗапросов = БСП__СД__СоздатьЗапросНаИспользованиеВнешнихРесурсов("ИспользоватьСинхронизациюДанных");
		// Конец УНФ.
		
		Если БСП__СД__МассивЗапросов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		БСП__СД__МодульРаботаВБезопасномРежимеКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаВБезопасномРежимеКлиент");
		БСП__СД__МодульРаботаВБезопасномРежимеКлиент.ПрименитьЗапросыНаИспользованиеВнешнихРесурсов(
			БСП__СД__МассивЗапросов, ЭтотОбъект, БСП__СД__ОповещениеОЗакрытии);
	Иначе
		ВыполнитьОбработкуОповещения(БСП__СД__ОповещениеОЗакрытии, КодВозвратаДиалога.ОК);
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция БСП__СД__СоздатьЗапросНаИспользованиеВнешнихРесурсов(ИмяКонстанты)
	
	КонстантаМенеджер = Константы[ИмяКонстанты];
	КонстантаЗначение = НаборКонстант[ИмяКонстанты];
	
	Если КонстантаМенеджер.Получить() = КонстантаЗначение Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьСинхронизациюДанных" Тогда
		
		МодульОбменДаннымиСервер = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиСервер");
		Если КонстантаЗначение Тогда
			Запрос = МодульОбменДаннымиСервер.ЗапросНаИспользованиеВнешнихРесурсовПриВключенииОбмена();
		Иначе
			Запрос = МодульОбменДаннымиСервер.ЗапросНаОчисткуРазрешенийИспользованияВнешнихРесурсов();
		КонецЕсли;
		Возврат Запрос;
		
	Иначе
		
		МенеджерЗначения = КонстантаМенеджер.СоздатьМенеджерЗначения();
		ИдентификаторКонстанты = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МенеджерЗначения.Метаданные());
		
		МодульРаботаВБезопасномРежиме = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		Если ПустаяСтрока(КонстантаЗначение) Тогда
			
			Запрос = МодульРаботаВБезопасномРежиме.ЗапросНаОчисткуРазрешенийИспользованияВнешнихРесурсов(ИдентификаторКонстанты);
			
		Иначе
			
			Разрешения = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				МодульРаботаВБезопасномРежиме.РазрешениеНаИспользованиеКаталогаФайловойСистемы(КонстантаЗначение, Истина, Истина));
			Запрос = МодульРаботаВБезопасномРежиме.ЗапросНаИспользованиеВнешнихРесурсов(Разрешения, ИдентификаторКонстанты);
			
		КонецЕсли;
		
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Запрос);
		
	КонецЕсли;
	
КонецФункции
&НаКлиенте
Процедура БСП__СД__ОбновитьРазрешенияПрофилейБезопасностиЗавершение(Результат, Элемент) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
	
		Подключаемый_ПриИзмененииРеквизита(Элемент);
		
	Иначе
		
		ЭтотОбъект.Прочитать();
	
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура БСП__СД__УстановитьВидимость()
	
	// УНФ.
	//Если БСП__СД__РазделениеВключено Тогда
	//	Элементы.БСП__СД__ОписаниеРаздела.Заголовок = НСтр("ru = 'Синхронизация данных с моими приложениями.'");
	//КонецЕсли;
	// Конец УНФ.
	
	Если БСП__СД__ПодсистемаСуществуетОбменДанными Тогда
		БСП__СД__МассивДоступныхВерсий = Новый Соответствие;
		БСП__СД__МодульОбменДаннымиПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ОбменДаннымиПереопределяемый");
		БСП__СД__МодульОбменДаннымиПереопределяемый.ПриПолученииДоступныхВерсийФормата(БСП__СД__МассивДоступныхВерсий);
		
		Элементы.БСП__СД__ГруппаЗагрузкаДанныхEnterpriseData.Видимость = ?(БСП__СД__МассивДоступныхВерсий.Количество() = 0, Ложь, Истина);
		
		// УНФ.
		//Элементы.БСП__СД__ГруппаПрефиксУзлаРаспределеннойИнформационнойБазы.РасширеннаяПодсказка.Заголовок =
		//	Метаданные.Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Подсказка;
		Элементы.БСП__СД__ПрефиксУзлаРаспределеннойИнформационнойБазы.РасширеннаяПодсказка.Заголовок =
			Метаданные.Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Подсказка;
		// Конец УНФ.
		
		Если БСП__СД__РазделениеВключено Тогда
			Элементы.БСП__СД__ГруппаИспользоватьСинхронизациюДанных.Видимость   = Ложь;
			Элементы.БСП__СД__ГруппаВременныеКаталогиКластераСерверов.Видимость = Ложь;
			
			// УНФ.
			//Элементы.БСП__СД__ПрефиксУзлаРаспределеннойИнформационнойБазы.Заголовок = НСтр("ru = 'Префикс в этой программе'");
			// Конец УНФ.
		Иначе
			Элементы.БСП__СД__ГруппаВременныеКаталогиКластераСерверов.Видимость = Не ОбщегоНазначения.ИнформационнаяБазаФайловая()
				И Пользователи.ЭтоПолноправныйПользователь(, Истина);
		КонецЕсли;
	Иначе
		Элементы.БСП__СД__ГруппаСинхронизацияДанных.Видимость = Ложь;
		Элементы.БСП__СД__ГруппаПрефиксУзлаРаспределеннойИнформационнойБазы.Видимость = Ложь;
		Элементы.БСП__СД__ГруппаСинхронизацияДанныхДополнительно.Видимость  = Ложь;
		Элементы.БСП__СД__ГруппаВременныеКаталогиКластераСерверов.Видимость = Ложь;
	КонецЕсли;
	
	Если БСП__СД__ПодсистемаСуществуетДатыЗапретаИзменения Тогда
		БСП__СД__МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
		БСП__СД__СвойстваРазделов = БСП__СД__МодульДатыЗапретаИзмененияСлужебный.СвойстваРазделов();
		
		Элементы.БСП__СД__ГруппаДатыЗапретаЗагрузки.Видимость = БСП__СД__СвойстваРазделов.ДатыЗапретаЗагрузкиВнедрены;
		
		Если БСП__СД__РазделениеВключено
			И БСП__СД__СвойстваРазделов.ДатыЗапретаЗагрузкиВнедрены Тогда
			Элементы.БСП__СД__ИспользоватьДатыЗапретаЗагрузки.РасширеннаяПодсказка.Заголовок =
				НСтр("ru = 'Запрет загрузки данных прошлых периодов из других приложений.
				           |Не влияет на загрузку данных из автономных рабочих мест.'");
		КонецЕсли;
	Иначе
		Элементы.БСП__СД__ГруппаДатыЗапретаЗагрузки.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.БСП__СД__ДекорацияОжиданиеИзмененияПрефикса.Видимость = Ложь;
	
КонецПроцедуры
&НаСервере
Процедура БСП__СД__УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если (РеквизитПутьКДанным = "БСП__СД__НаборКонстантИспользоватьДатыЗапретаЗагрузки"
			Или РеквизитПутьКДанным = "")
		И БСП__СД__ПодсистемаСуществуетДатыЗапретаИзменения Тогда
		
		Элементы.БСП__СД__НастроитьДатыЗапретаЗагрузки.Доступность = НаборКонстант.ИспользоватьДатыЗапретаЗагрузки;
			
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "БСП__СД__НаборКонстантИспользоватьСинхронизациюДанных"
			Или РеквизитПутьКДанным = "")
		И БСП__СД__ПодсистемаСуществуетОбменДанными Тогда
		
		Элементы.БСП__СД__НастройкиСинхронизацииДанных.Доступность            = НаборКонстант.ИспользоватьСинхронизациюДанных;
		Элементы.БСП__СД__ГруппаДатыЗапретаЗагрузки.Доступность               = НаборКонстант.ИспользоватьСинхронизациюДанных;
		Элементы.БСП__СД__РезультатыСинхронизацииДанных.Доступность           = НаборКонстант.ИспользоватьСинхронизациюДанных;
		Элементы.БСП__СД__ГруппаВременныеКаталогиКластераСерверов.Доступность = НаборКонстант.ИспользоватьСинхронизациюДанных;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область БСП_ИнтернетПоддержкаИСервисы

&НаСервере
Процедура БСП__ИПП__ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоАдминистраторСистемы   = Пользователи.ЭтоПолноправныйПользователь(, Истина);
	РазделениеВключено        = ОбщегоНазначения.РазделениеВключено();
	ЭтоАвтономноеРабочееМесто = ОбщегоНазначения.ЭтоАвтономноеРабочееМесто();
	
	Элементы.ГруппаКлассификаторы.Видимость = Не РазделениеВключено;
	
	Если Элементы.ГруппаКлассификаторы.Видимость Тогда
		
		Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
			МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
			Если МодульАдресныйКлассификаторСлужебный.ЕстьПравоДобавлениеИзменениеАдресныхСведений() Тогда
				СведенияОДоступностиАдресныхСведений = МодульАдресныйКлассификаторСлужебный.СведенияОДоступностиАдресныхСведений();
				АдресныйКлассификаторСодержитЗагруженныеСведения = СведенияОДоступностиАдресныхСведений.Получить("ЕстьЗагруженныеСведения") = Истина;
				Элементы.РегистрСведенийАдресныеОбъектыОчиститьАдресныйКлассификатор.Доступность = АдресныйКлассификаторСодержитЗагруженныеСведения;
			Иначе
				Элементы.АдресныйКлассификаторНастройки.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.АдресныйКлассификаторНастройки.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		Элементы.ГруппаОбработкаЗагрузкаКурсовВалют.Видимость =
			  Не РазделениеВключено
			И Не ЭтоАвтономноеРабочееМесто;
	Иначе
		Элементы.ГруппаОбработкаЗагрузкаКурсовВалют.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.СклонениеПредставленийОбъектов") Тогда
		Элементы.ГруппаСклонения.Видимость =
			  Не РазделениеВключено
			И Не ЭтоАвтономноеРабочееМесто
			И ЭтоАдминистраторСистемы;
	Иначе
		Элементы.ГруппаСклонения.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВызовОнлайнПоддержки") Тогда
		Элементы.ГруппаИнтеграцияВызовОнлайнПоддержки.Видимость =
			ОбщегоНазначения.ЭтоWindowsКлиент();
	Иначе
		Элементы.ГруппаИнтеграцияВызовОнлайнПоддержки.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЦентрМониторинга") Тогда
		Элементы.ГруппаЦентрМониторинга.Видимость = ЭтоАдминистраторСистемы;
		Если ЭтоАдминистраторСистемы Тогда
			ПараметрыЦентраМониторинга = БСП__ИПП__ПолучитьПараметрыЦентраМониторинга();
			ЦентрМониторингаРазрешитьОтправлятьДанные = БСП__ИПП__ПолучитьПереключательОтправкиДанных(ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга, ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме);
			
			ПараметрыСервиса = Новый Структура("Сервер, АдресРесурса, Порт");
			Если ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
				ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.СерверПоУмолчанию;
				ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурсаПоУмолчанию;
				ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.ПортПоУмолчанию;
			ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
				ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.Сервер;
				ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурса;
				ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.Порт;
			ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
				ПараметрыСервиса = Неопределено;
			КонецЕсли;
			
			Если ПараметрыСервиса <> Неопределено Тогда
				Если ПараметрыСервиса.Порт = 80 Тогда
					Схема = "http://";
					Порт = "";
				ИначеЕсли ПараметрыСервиса.Порт = 443 Тогда
					Схема = "https://";
					Порт = "";
				Иначе
					Схема = "http://";
					Порт = ":" + Формат(ПараметрыСервиса.Порт, "ЧН=0; ЧГ=");
				КонецЕсли;
				
				ЦентрМониторингаАдресСервиса = Схема + ПараметрыСервиса.Сервер + Порт + "/" + ПараметрыСервиса.АдресРесурса;
			Иначе
				ЦентрМониторингаАдресСервиса = "";
			КонецЕсли;
			
			Элементы.ЦентрМониторингаАдресСервиса.Доступность = (ЦентрМониторингаРазрешитьОтправлятьДанные = 1);
			Элементы.ЦентрМониторингаНастройки.Доступность = (ЦентрМониторингаРазрешитьОтправлятьДанные <> 2);
			Элементы.ГруппаОтправитьКонтактнуюИнформацию.Видимость = ПараметрыЦентраМониторинга.ЗапросКонтактнойИнформации <> 2;
		КонецЕсли;
	Иначе
		Элементы.ГруппаЦентрМониторинга.Видимость = Ложь;
	КонецЕсли;
	
	ВидимостьГруппыВнешниеКомпоненты = Ложь;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВнешниеКомпоненты") Тогда 
		
		МодульВнешниеКомпонентыСлужебный = ОбщегоНазначения.ОбщийМодуль("ВнешниеКомпонентыСлужебный");
		ВидимостьГруппыВнешниеКомпоненты = МодульВнешниеКомпонентыСлужебный.ДоступнаЗагрузкаСПортала();
		
	КонецЕсли;
	
	Элементы.ГруппаВнешниеКомпоненты.Видимость = ВидимостьГруппыВнешниеКомпоненты;
	
	// Обновление состояния элементов.
	УстановитьДоступность();
	
	ОбрабатыватьНастройкиБИП = ОбщегоНазначения.ПодсистемаСуществует("ИнтернетПоддержкаПользователей");
	
	Если ОбрабатыватьНастройкиБИП Тогда
		МодульИнтеграцияПодсистемБИП = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияПодсистемБИП");
		МодульИнтеграцияПодсистемБИП.ИнтернетПоддержкаИСервисы_ПриСозданииНаСервере(ЭтотОбъект);
	Иначе
		Элементы.БИПГруппаНастройки.Видимость                 = Ложь;
		Элементы.БИПГруппаНовости.Видимость                   = Ложь;
		Элементы.БИПГруппаОбновлениеПрограммы.Видимость       = Ложь;
		Элементы.БИПГруппаОбновлениеКлассификаторов.Видимость = Ложь;
		Элементы.БИПГруппаПроверкаКонтрагентов.Видимость      = Ложь;
		Элементы.БИПГруппаСПАРКРиски.Видимость                = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаОбсуждения.Видимость = ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения");
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ИПП__ПриОткрытии(Отказ)
	
	БСП__ИПП__ПриИзмененииСостоянияПодключенияОбсуждений();
	
КонецПроцедуры
&НаКлиенте
Процедура БСП__ИПП__ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОчищенАдресныйКлассификатор" Или ИмяСобытия = "ЗагруженАдресныйКлассификатор" Тогда
		Элементы.РегистрСведенийАдресныеОбъектыОчиститьАдресныйКлассификатор.Доступность = (Параметр = Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "ИнтернетПоддержкаОтключена" Или ИмяСобытия = "ИнтернетПоддержкаПодключена" Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	Если ОбрабатыватьНастройкиБИП Тогда
		Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
			МодульИнтеграцияПодсистемБИПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияПодсистемБИПКлиент");
			МодульИнтеграцияПодсистемБИПКлиент.ИнтернетПоддержкаИСервисы_ОбработкаОповещения(
				ЭтотОбъект,
				ИмяСобытия,
				Параметр,
				Источник);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбсужденияПодключены" Тогда 
		БСП__ИПП__ПриИзмененииСостоянияПодключенияОбсуждений(Параметр);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Функция БСП__ИПП__ПолучитьАдресСервиса()
	
	ПараметрыЦентраМониторинга = БСП__ИПП__ПолучитьПараметрыЦентраМониторинга();
			
	ПараметрыСервиса = Новый Структура("Сервер, АдресРесурса, Порт");
	
	Если ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
		ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.СерверПоУмолчанию;
		ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурсаПоУмолчанию;
		ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.ПортПоУмолчанию;
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
		ПараметрыСервиса.Сервер = ПараметрыЦентраМониторинга.Сервер;
		ПараметрыСервиса.АдресРесурса = ПараметрыЦентраМониторинга.АдресРесурса;
		ПараметрыСервиса.Порт = ПараметрыЦентраМониторинга.Порт;
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
		ПараметрыСервиса = Неопределено;	
	КонецЕсли;
	
	Если ПараметрыСервиса <> Неопределено Тогда
		Если ПараметрыСервиса.Порт = 80 Тогда
			Схема = "http://";
			Порт = "";
		ИначеЕсли ПараметрыСервиса.Порт = 443 Тогда
			Схема = "https://";
			Порт = "";
		Иначе
			Схема = "http://";
			Порт = ":" + Формат(ПараметрыСервиса.Порт, "ЧН=0; ЧГ=");
		КонецЕсли;
		
		АдресСервиса = Схема + ПараметрыСервиса.Сервер + Порт + "/" + ПараметрыСервиса.АдресРесурса;
	Иначе
		АдресСервиса = "";
	КонецЕсли;
	
	Возврат АдресСервиса;
КонецФункции
&НаСервере
Процедура БСП__ИПП__УстановитьДоступность(РеквизитПутьКДанным = "")
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "БИПИспользоватьОнлайнПоддержку" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВызовОнлайнПоддержки") Тогда
		Элементы.ГруппаНастройкаОнлайнПоддержки.Доступность = НаборКонстант.ИспользоватьОнлайнПоддержку;
	КонецЕсли;
	
	Если (РеквизитПутьКДанным = "БИПИспользоватьСервисСклоненияMorpher" Или РеквизитПутьКДанным = "")
		И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.СклонениеПредставленийОбъектов") Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, "ГруппаНастройкаСклонения", "Доступность",
			НаборКонстант.ИспользоватьСервисСклоненияMorpher);
			
	КонецЕсли;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция БСП__ИПП__ПолучитьПереключательОтправкиДанных(ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме)
	Состояние = ?(ВключитьЦентрМониторинга, "1", "0") + ?(ЦентрОбработкиИнформацииОПрограмме, "1", "0");
	
	Если Состояние = "00" Тогда
		Результат = 2;
	ИначеЕсли Состояние = "01" Тогда
		Результат = 1;
	ИначеЕсли Состояние = "10" Тогда
		Результат = 0;
	ИначеЕсли Состояние = "11" Тогда
		// А такого быть не может...
	КонецЕсли;
	
	Возврат Результат;
КонецФункции
&НаСервереБезКонтекста
Функция БСП__ИПП__ПолучитьПараметрыЦентраМониторинга()
	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
	ПараметрыЦентраМониторинга = МодульЦентрМониторингаСлужебный.ПолучитьПараметрыЦентраМониторингаВнешнийВызов();
	
	ПараметрыСервисаПоУмолчанию = МодульЦентрМониторингаСлужебный.ПолучитьПараметрыПоУмолчаниюВнешнийВызов();
	ПараметрыЦентраМониторинга.Вставить("СерверПоУмолчанию", ПараметрыСервисаПоУмолчанию.Сервер);
	ПараметрыЦентраМониторинга.Вставить("АдресРесурсаПоУмолчанию", ПараметрыСервисаПоУмолчанию.АдресРесурса);
	ПараметрыЦентраМониторинга.Вставить("ПортПоУмолчанию", ПараметрыСервисаПоУмолчанию.Порт);
	
	Возврат ПараметрыЦентраМониторинга;
КонецФункции
&НаСервереБезКонтекста
Процедура БСП__ИПП__РазрешитьОтправлятьДанныеПриИзмененииНаСервере(ПараметрыЦентраМониторинга, РезультатЗапуска)
	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
	МодульЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
	
	ВключитьЦентрМониторинга = ПараметрыЦентраМониторинга.ВключитьЦентрМониторинга;
	ЦентрОбработкиИнформацииОПрограмме = ПараметрыЦентраМониторинга.ЦентрОбработкиИнформацииОПрограмме;
	
	Результат = БСП__ИПП__ПолучитьПереключательОтправкиДанных(ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме);
	
	Если Результат = 0 Или Результат = 1 Тогда
		// Отправка ознакомительного пакета.
		РезультатЗапуска = МодульЦентрМониторингаСлужебный.ЗапускОтправкиОзнакомительногоПакета();
	КонецЕсли;
	
	Если Результат = 0 Тогда
		// Включение задания сбора и отправки статистики.
		РегЗадание = МодульЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
		МодульЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	ИначеЕсли Результат = 1 Тогда
		РегЗадание = МодульЦентрМониторингаСлужебный.ПолучитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики", Истина);
		МодульЦентрМониторингаСлужебный.УстановитьРасписаниеПоУмолчаниюВнешнийВызов(РегЗадание);
	ИначеЕсли Результат = 2 Тогда
		МодульЦентрМониторингаСлужебный.УдалитьРегламентноеЗаданиеВнешнийВызов("СборИОтправкаСтатистики");
	КонецЕсли;
КонецПроцедуры
&НаСервереБезКонтекста
Процедура БСП__ИПП__ЦентрМониторингаАдресСервисаПриИзмененииНаСервере(СтруктураАдреса)
	ПараметрыЦентраМониторинга = Новый Структура();
	ПараметрыЦентраМониторинга.Вставить("Сервер", СтруктураАдреса.Хост);
	ПараметрыЦентраМониторинга.Вставить("АдресРесурса", СтруктураАдреса.ПутьНаСервере);
	ПараметрыЦентраМониторинга.Вставить("Порт", СтруктураАдреса.Порт);
	ПараметрыЦентраМониторинга.Вставить("ЗащищенноеСоединение", СтруктураАдреса.ЗащищенноеСоединение);
	
	МодульЦентрМониторингаСлужебный = ОбщегоНазначения.ОбщийМодуль("ЦентрМониторингаСлужебный");
	МодульЦентрМониторингаСлужебный.УстановитьПараметрыЦентраМониторингаВнешнийВызов(ПараметрыЦентраМониторинга);
КонецПроцедуры
&НаКлиенте
Процедура БСП__ИПП__ПриИзмененииСостоянияПодключенияОбсуждений(ОбсужденияПодключены = Неопределено)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
		
		Если ОбсужденияПодключены = Неопределено Тогда 
			МодульОбсужденияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияСлужебныйКлиент");
			ОбсужденияПодключены = МодульОбсужденияСлужебныйКлиент.Подключены();
		КонецЕсли;
		
		Если ОбсужденияПодключены Тогда 
			Элементы.ПодключитьОтключитьОбсуждения.Заголовок = НСтр("ru = 'Отключить'");
			Элементы.СостояниеПодключенияОбсуждений.Заголовок = НСтр("ru = 'Обсуждения подключены.'");
		Иначе 
			Элементы.ПодключитьОтключитьОбсуждения.Заголовок = НСтр("ru = 'Подключить'");
			Элементы.СостояниеПодключенияОбсуждений.Заголовок = НСтр("ru = 'Подключение обсуждений не выполнено.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПодключитьОтключитьОбсуждения(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
		
		МодульОбсужденияСлужебныйКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбсужденияСлужебныйКлиент");
		
		Если МодульОбсужденияСлужебныйКлиент.Подключены() Тогда
			МодульОбсужденияСлужебныйКлиент.ПоказатьОтключение();
		Иначе 
			МодульОбсужденияСлужебныйКлиент.ПоказатьПодключение();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура НастройкаОнлайнПоддержки(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ВызовОнлайнПоддержки") Тогда
		МодульВызовОнлайнПоддержкиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВызовОнлайнПоддержкиКлиент");
		МодульВызовОнлайнПоддержкиКлиент.ОткрытьФормуНастройкаОнлайнПоддержки();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПВойтиИлиВыйти(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
		МодульИнтеграцияПодсистемБИПКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияПодсистемБИПКлиент");
		МодульИнтеграцияПодсистемБИПКлиент.ИнтернетПоддержкаИСервисы_БИПВойтиИлиВыйти(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПСообщениеВСлужбуТехническойПоддержки(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.БазоваяФункциональностьБИП") Тогда
		МодульИнтеграцияПодсистемБИПКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияПодсистемБИПКлиент");
		МодульИнтеграцияПодсистемБИПКлиент.ИнтернетПоддержкаИСервисы_СообщениеВСлужбуТехническойПоддержки(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПМониторИнтернетПоддержки(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.МониторПортала1СИТС") Тогда
		МодульМониторПортала1СИТСКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("МониторПортала1СИТСКлиент");
		МодульМониторПортала1СИТСКлиент.ИнтернетПоддержкаИСервисы_МониторПортала1СИТС(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПУправлениеНовостями(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.ИнтернетПоддержкаИСервисы_УправлениеНовостями(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПОбновлениеПрограммы(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
		МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_ОбновлениеПрограммы(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПОбновлениеКлассификаторов(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульПолучениеРаботаСКлассификаторамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКлассификаторамиКлиент");
		МодульПолучениеРаботаСКлассификаторамиКлиент.ИнтернетПоддержкаИСервисы_ОбновлениеКлассификаторов(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПФайлКлассификаторовПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульПолучениеРаботаСКлассификаторамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКлассификаторамиКлиент");
		МодульПолучениеРаботаСКлассификаторамиКлиент.ИнтернетПоддержкаИСервисы_БИПФайлКлассификаторовПриИзменении(
			ЭтотОбъект,
			Элемент);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПДекорацияОбновлениеКлассификаторовНеВыполняетсяОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульПолучениеРаботаСКлассификаторамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКлассификаторамиКлиент");
		МодульПолучениеРаботаСКлассификаторамиКлиент.ИнтернетПоддержкаИСервисы_БИПДекорацияОбновлениеКлассификаторовНеВыполняетсяОбработкаНавигационнойСсылки(
			ЭтотОбъект,
			Элемент,
			НавигационнаяСсылкаФорматированнойСтроки,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПИспользоватьПроверкуКонтрагентовПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентамиКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКонтрагентамиКлиент");
		МодульРаботаСКонтрагентамиКлиент.ИнтернетПоддержкаИСервисы_ИспользоватьПроверкуКонтрагентовПриИзменении(
			ЭтотОбъект,
			Элемент);
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИППроверкаКонтрагентовПроверитьДоступКВебСервису(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКонтрагентами") Тогда
		МодульРаботаСКонтрагентамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКонтрагентамиКлиент");
		МодульРаботаСКонтрагентамиКлиент.ИнтернетПоддержкаИСервисы_БИППроверкаКонтрагентовПроверитьДоступКВебСервису(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПНастройкаИнтеграцииСПлатежнымиСистемами(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ИнтеграцияСПлатежнымиСистемами") Тогда
		МодульИнтеграцияСПлатежнымиСистемамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияСПлатежнымиСистемамиКлиент");
		МодульИнтеграцияСПлатежнымиСистемамиКлиент.ИнтернетПоддержкаИСервисы_БИПНастройкаИнтеграцииСПлатежнымиСистемами(
			ЭтотОбъект,
			Команда);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ОтложеннаяОбработкаДанных(Команда)
	
	ПараметрыФормы = Новый Структура("ОткрытиеИзПанелиАдминистрирования", Истина);
	ОткрытьФорму(
		"Обработка.РезультатыОбновленияПрограммы.Форма.ИндикацияХодаОтложенногоОбновленияИБ",
		ПараметрыФормы);
	
КонецПроцедуры
&НаКлиенте
Процедура РазрешитьОтправлятьДанныеПриИзменении(Элемент)
	Перем РезультатЗапуска;
	Элементы.ЦентрМониторингаАдресСервиса.Доступность = (ЦентрМониторингаРазрешитьОтправлятьДанные = 1);
	Элементы.ЦентрМониторингаНастройки.Доступность = (ЦентрМониторингаРазрешитьОтправлятьДанные <> 2);
	Если ЦентрМониторингаРазрешитьОтправлятьДанные = 2 Тогда
		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Ложь, Ложь);
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 1 Тогда
		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Ложь, Истина);
	ИначеЕсли ЦентрМониторингаРазрешитьОтправлятьДанные = 0 Тогда
		ПараметрыЦентраМониторингаЗапись = Новый Структура("ВключитьЦентрМониторинга, ЦентрОбработкиИнформацииОПрограмме", Истина, Ложь);
	КонецЕсли;
	ЦентрМониторингаАдресСервиса = БСП__ИПП__ПолучитьАдресСервиса();
	БСП__ИПП__РазрешитьОтправлятьДанныеПриИзмененииНаСервере(ПараметрыЦентраМониторингаЗапись, РезультатЗапуска);
	Если РезультатЗапуска <> Неопределено Тогда
		ЦентрМониторингаИдентификаторЗадания = РезультатЗапуска.ИдентификаторЗадания;
		ЦентрМониторингаАдресРезультатаЗадания = РезультатЗапуска.АдресРезультата;
		МодульЦентрМониторингаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЦентрМониторингаКлиент");
		Оповещение = Новый ОписаниеОповещения("ПослеОбновленияИдентификатора", МодульЦентрМониторингаКлиент);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатЗапуска, Оповещение, ПараметрыОжидания); 
	КонецЕсли;
КонецПроцедуры
&НаКлиенте
Процедура ЦентрМониторингаАдресСервисаПриИзменении(Элемент)
	Попытка
		СтруктураАдреса = ОбщегоНазначенияКлиентСервер.СтруктураURI(ЦентрМониторингаАдресСервиса);
		
		Если СтруктураАдреса.Схема = "http" Тогда
			СтруктураАдреса.Вставить("ЗащищенноеСоединение", Ложь);
		ИначеЕсли СтруктураАдреса.Схема = "https" Тогда
			СтруктураАдреса.Вставить("ЗащищенноеСоединение", Истина);
        Иначе
            СтруктураАдреса.Вставить("ЗащищенноеСоединение", Ложь);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтруктураАдреса.Порт) Тогда
			Если СтруктураАдреса.Схема = "http" Тогда
				СтруктураАдреса.Порт = 80;
			ИначеЕсли СтруктураАдреса.Схема = "https" Тогда
				СтруктураАдреса.Порт = 443;
            Иначе
                СтруктураАдреса.Порт = 80;
			КонецЕсли;
		КонецЕсли;
	Исключение
		// Внимание, формат адреса должен соответствовать RFC 3986 
		// см. описание функции ОбщегоНазначенияКлиентСервер.СтруктураURI.
		ОписаниеОшибки = НСтр("ru = 'Адрес сервиса'") + " "
			+ ЦентрМониторингаАдресСервиса + " "
			+ НСтр("ru = 'не является допустимым адресом веб-сервиса для отправки отчетов об использовании программы.'"); 
		ВызватьИсключение(ОписаниеОшибки);
	КонецПопытки;
	
	БСП__ИПП__ЦентрМониторингаАдресСервисаПриИзмененииНаСервере(СтруктураАдреса);
КонецПроцедуры
&НаКлиенте
Процедура ИнтеграцияВызовОнлайнПоддержкиПриИзменении(Элемент)
	СохранитьЗначенияРеквизитовФормыВНабореКонстант(Элемент.Имя);
	
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура ДекорацияЛогинИППОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	МодульИнтеграцияПодсистемБИПКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("ИнтеграцияПодсистемБИПКлиент");
	МодульИнтеграцияПодсистемБИПКлиент.ИнтернетПоддержкаИСервисы_ДекорацияОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры
&НаКлиенте
Процедура АвтоматическаяПроверкаОбновленийПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммыКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
		МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_АвтоматическаяПроверкаОбновленийПриИзменении(
			ЭтотОбъект,
			Элемент);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ДекорацияРасписаниеПроверкиОбновленийНажатие(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.ПолучениеОбновленийПрограммы") Тогда
		МодульПолучениеОбновленийПрограммыКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
		МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_ДекорацияРасписаниеПроверкиОбновленийНажатие(
			ЭтотОбъект,
			Элемент);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура КаталогДистрибутиваПлатформыНажатие(Элемент, СтандартнаяОбработка)
	
	МодульПолучениеОбновленийПрограммыКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_КаталогДистрибутиваПлатформыНажатие(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры
&НаКлиенте
Процедура ДетализироватьОбновлениеИБВЖурналеРегистрацииПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент);
КонецПроцедуры
&НаКлиенте
Процедура ДекорацияРасписаниеУстановкаИсправленийНажатие(Элемент)
	
	МодульПолучениеОбновленийПрограммыКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_ДекорацияРасписаниеУстановкаИсправленийНажатие(
		ЭтотОбъект,
		Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БИПВключитьРаботуСНовостямиПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.Новости") Тогда
		МодульОбработкаНовостейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ОбработкаНовостейКлиент");
		МодульОбработкаНовостейКлиент.ИнтернетПоддержкаИСервисы_ВключитьРаботуСНовостямиПриИзменении(
			ЭтотОбъект,
			Элемент);
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПИспользоватьСервисСПАРКРискиПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.СПАРКРиски") Тогда
		МодульСПАРКРискиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СПАРКРискиКлиент");
		МодульСПАРКРискиКлиент.ИнтернетПоддержкаИСервисы_ИспользоватьСервисСПАРКРискиПриИзменении(
			ЭтотОбъект,
			Элемент);
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПЗагружатьИУстанавливатьИсправленияАвтоматическиПриИзменении(Элемент)
	
	МодульПолучениеОбновленийПрограммыКлиент =
		ОбщегоНазначенияКлиент.ОбщийМодуль("ПолучениеОбновленийПрограммыКлиент");
	МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_ЗагружатьИУстанавливатьИсправленияАвтоматическиПриИзменении(
		ЭтотОбъект,
		Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура БИПФайлКлассификаторовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульПолучениеРаботаСКлассификаторамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКлассификаторамиКлиент");
		МодульПолучениеРаботаСКлассификаторамиКлиент.ИнтернетПоддержкаИСервисы_БИПФайлКлассификаторовНачалоВыбора(
			ЭтотОбъект,
			Элемент,
			ДанныеВыбора,
			СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура БИПВариантОбновленияКлассификаторовПриИзменении(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульПолучениеРаботаСКлассификаторамиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКлассификаторамиКлиент");
		МодульПолучениеРаботаСКлассификаторамиКлиент.ИнтернетПоддержкаИСервисы_БИПВариантОбновленияКлассификаторовПриИзменении(
			ЭтотОбъект,
			Элемент);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ДекорацияРасписаниеОбновленияКлассификаторовНажатие(Элемент)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("ИнтернетПоддержкаПользователей.РаботаСКлассификаторами") Тогда
		МодульПолучениеОбновленийПрограммыКлиент =
			ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСКлассификаторамиКлиент");
		МодульПолучениеОбновленийПрограммыКлиент.ИнтернетПоддержкаИСервисы_ДекорацияРасписаниеОбновленияКлассификаторовНажатие(
			ЭтотОбъект,
			Элемент);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура НастройкаПередачиТоваровМеждуОрганизациямиНажатие(Элемент)
	ОткрытьФорму("РегистрСведений.НастройкаПередачиТоваровМеждуОрганизациями.Форма.ФормаСписка");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область БЭД_ВызовПроцедурИзУНФ

&НаСервере
Процедура ПриСозданииНаСервереБЭД(Отказ, СтандартнаяОбработка)
	
	ЕстьКлиентЭДО = ОбщегоНазначения.ПодсистемаСуществует("КлиентЭДО");
	
	УстановитьНастройкиЗаданийБЭД();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область НастройкиРегламентныхЗаданий

&НаСервереБезКонтекста
Функция ПолучитьПредопределенноеРегламентноеЗадание(ИмяПредопределенного)
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Неопределено;
	
	МетаданныеПредопределенного = Метаданные.РегламентныеЗадания.Найти(ИмяПредопределенного);
	Если МетаданныеПредопределенного <> Неопределено Тогда
		Результат = РегламентныеЗадания.НайтиПредопределенное(МетаданныеПредопределенного);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРасписаниеПредопределенного(ИмяПредопределенного)
	
	Результат = Неопределено;
	
	РегламентноеЗадание = ПолучитьПредопределенноеРегламентноеЗадание(ИмяПредопределенного);
	Если РегламентноеЗадание <> Неопределено Тогда
		Результат = РегламентноеЗадание.Расписание;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УстановитьРасписаниеПредопределенного(ИмяПредопределенного, Расписание)
	
	РегламентноеЗадание = ПолучитьПредопределенноеРегламентноеЗадание(ИмяПредопределенного);
	Если РегламентноеЗадание <> Неопределено Тогда
		РегламентноеЗадание.Расписание = Расписание;
		РегламентноеЗадание.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьИзменениеРасписанияРегламентногоЗадания(ИмяПредопределенного, ИмяЭлемента = Неопределено)
	
	РасписаниеРегламентногоЗадания = ПолучитьРасписаниеПредопределенного(ИмяПредопределенного);
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("ИмяПредопределенного", ИмяПредопределенного);
	ПараметрыВыполнения.Вставить("ИмяЭлемента", ИмяЭлемента);
	
	Обработчик = Новый ОписаниеОповещения("ПослеИзмененияРасписания", ЭтотОбъект, ПараметрыВыполнения);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияРасписания(Расписание, ПараметрыВыполнения) Экспорт
	
	Если Расписание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьРасписаниеПредопределенного(ПараметрыВыполнения.ИмяПредопределенного, Расписание);
	Если ПараметрыВыполнения.Свойство("ИмяЭлемента") И ЗначениеЗаполнено(ПараметрыВыполнения.ИмяЭлемента) Тогда
		Элементы[ПараметрыВыполнения.ИмяЭлемента].Подсказка = Строка(Расписание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеБЭД

&НаСервере
Функция ПолучитьПараметрРегламентногоЗадания(ИмяЗадания, ИмяПараметра, ЗначениеПоУмолчанию)
	
	// Проверка отсутствие поставляемого регламентного задания в конфигурации.
	РегламентноеЗадание = Метаданные.РегламентныеЗадания[ИмяЗадания];
	Если РегламентноеЗадание = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	// Поиск задания.
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Метаданные", РегламентноеЗадание);
	Если НЕ ОбщегоНазначения.РазделениеВключено() Тогда
		ПараметрыЗадания.Вставить("ИмяМетода", РегламентноеЗадание.ИмяМетода);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыЗадания);
	Если СписокЗаданий.Количество() Тогда
		Возврат СписокЗаданий[0][ИмяПараметра];
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьНастройкуРасписанияОбмена(ИмяЗадания)
	
	Расписание = ПолучитьПараметрРегламентногоЗадания(ИмяЗадания, "Расписание", Новый РасписаниеРегламентногоЗадания);
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение",
		ЭтотОбъект, ИмяЗадания);
	ДиалогРасписания.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(РасписаниеЗадания, ДополнительныеПараметры) Экспорт
	
	Если РасписаниеЗадания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРасписаниеЗадания(ДополнительныеПараметры, РасписаниеЗадания);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРасписаниеЗадания(ИмяЗадания, РасписаниеРегламентногоЗадания)
	
	ИдентификаторЗадания = РегламентноеЗаданиеПоНаименованию(ИмяЗадания);
	РегламентныеЗаданияСервер.УстановитьРасписаниеРегламентногоЗадания(ИдентификаторЗадания, РасписаниеРегламентногоЗадания);
	
	Элемент = Элементы[ИмяЗадания];
	Если Элемент <> Неопределено Тогда
		Элемент.Заголовок = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РегламентноеЗаданиеПоНаименованию(ИмяЗадания)
	
	Отбор = Новый Структура("Метаданные", ИмяЗадания);
	Найденные = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Задание = ?(Найденные.Количество() = 0, Неопределено, Найденные[0]);
	
	Возврат Задание;
	
КонецФункции

&НаСервере
Процедура НачатьПроверкуРегламентныхЗаданийНаСервере(ИнициировалПользователь = Ложь, Операция = "ПоУмолчанию")
	
	ПроверкаНастроекОтправкиПолученияЭД =
		Обработки.ПанельАдминистрированияЭДО.НачатьПроверкуНастроекРегламентныхЗаданий(УникальныйИдентификатор, ИнициировалПользователь, Операция);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьЗавершенияПроверкиНастроекРегламентныхЗаданий(ВыводитьОкноОжидания = Ложь)
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
	ПараметрыОжидания.ТекстСообщения = НСтр("ru='Проверяется возможность включения регламентного задания.'");
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьНастройкиРегламентныхЗаданийЭДООбработкаРезультата", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ПроверкаНастроекОтправкиПолученияЭД, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройкиРегламентныхЗаданийЭДООбработкаРезультата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус <> "Выполнено" Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОбработатьОшибку(
				НСтр("ru='Автоматическая проверка настроек регламентных заданий'"),
				Результат.ПодробноеПредставлениеОшибки,
				Результат.КраткоеПредставлениеОшибки);
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	РезультатПроверкиНастроекОтправкиПолученияЭД = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	РезультатПроверкиНастроек = РезультатПроверкиНастроекОтправкиПолученияЭД;
	
	Если РезультатПроверкиНастроек.ИнициировалПользователь Тогда
		
		Если РезультатПроверкиНастроек.Успех Тогда
			
			Если НРег(РезультатПроверкиНастроек.Операция) = НРег("Отправка") Тогда
				
				ИспользоватьАвтоматическуюОтправкуЭД = Истина;
				ИзменитьИспользованиеЗадания("ОтправкаЭлектронныхДокументов", ИспользоватьАвтоматическуюОтправкуЭД);
				Элементы.ОтправкаЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическуюОтправкуЭД;
				
			ИначеЕсли НРег(РезультатПроверкиНастроек.Операция) = НРег("Получение") Тогда
				
				ИспользоватьАвтоматическоеПолучениеЭД = Истина;
				ИзменитьИспользованиеЗадания("ПолучениеЭлектронныхДокументов", ИспользоватьАвтоматическоеПолучениеЭД);
				Элементы.ПолучениеЭлектронныхДокументов.Доступность = ИспользоватьАвтоматическоеПолучениеЭД;
				
			КонецЕсли;
			
		Иначе
			
			ОткрытьФормуПомощникаНастройкиОтправкиПолученияЭД();
			
		КонецЕсли;
		
	Иначе
		
		Если Не РезультатПроверкиНастроек.Успех Тогда
			
			// Проверка была запущена при создании формы. Нужно обратить внимание пользователя на проблему.
			Элементы.КнопкаЕстьПроблемаОтправка.Видимость  = ИспользоватьАвтоматическуюОтправкуЭД;
			Элементы.КнопкаЕстьПроблемаПолучение.Видимость = ИспользоватьАвтоматическоеПолучениеЭД;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПомощникаНастройкиОтправкиПолученияЭД()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РезультатПроверки", РезультатПроверкиНастроекОтправкиПолученияЭД);
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияЭДО.Форма.ПомощникНастройкиРегламентныхЗаданий",
		ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьИспользованиеЗадания(ИмяЗадания, Использование)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Использование);
	РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию(ИмяЗадания);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание.УникальныйИдентификатор, ПараметрыЗадания);
	
	Элемент = Элементы[ИмяЗадания];
	Если Элемент <> Неопределено Тогда
		Элемент.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекстРасписанияРегламентногоЗадания(ИдентификаторЗадания)
	
	Расписание = ИдентификаторЗадания.Расписание;
	Если Расписание = Неопределено Тогда
		Возврат НСтр("ru = 'Настроить расписание'")
	Иначе
		Возврат Строка(Расписание);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОповещатьОСобытияхЭДО()
	
	Возврат ЭлектронноеВзаимодействиеСлужебныйВызовСервера.ОповещатьОСобытияхЭДО();
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкиЗаданийБЭД()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоАдминистраторСистемы = Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь);
	РазделениеВключено = ОбщегоНазначения.РазделениеВключено();
	
	// ОбменСКонтрагентам
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСКонтрагентами") Тогда
		
		РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию("ОтправкаЭлектронныхДокументов");
		ЭлементНастройкиРасписания = Элементы.ОтправкаЭлектронныхДокументов;
		ВидимостьФлажка = (РегламентноеЗадание <> Неопределено);
		Если ВидимостьФлажка Тогда
			ИспользоватьАвтоматическуюОтправкуЭД = РегламентноеЗадание.Использование;
			ЭлементНастройкиРасписания.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
			ЭлементНастройкиРасписания.Доступность = РегламентноеЗадание.Использование;
		КонецЕсли;
		ВидимостьРасписания = ВидимостьФлажка И Не РазделениеВключено И ЭтоАдминистраторСистемы;
		ЭлементНастройкиРасписания.Видимость = ВидимостьРасписания;
		
		РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию("ПолучениеЭлектронныхДокументов");
		ЭлементНастройкиРасписания = Элементы.ПолучениеЭлектронныхДокументов;
		ВидимостьФлажка = (РегламентноеЗадание <> Неопределено);
		Если ВидимостьФлажка Тогда
			ИспользоватьАвтоматическоеПолучениеЭД = РегламентноеЗадание.Использование;
			ЭлементНастройкиРасписания.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
			ЭлементНастройкиРасписания.Доступность = РегламентноеЗадание.Использование;
		КонецЕсли;
		ВидимостьРасписания = ВидимостьФлажка И Не РазделениеВключено И ЭтоАдминистраторСистемы;
		ЭлементНастройкиРасписания.Видимость = ВидимостьРасписания;
		
		РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию("ПроверкаНовыхЭлектронныхДокументов");
		ЭлементНастройкиРасписания = Элементы.ПроверкаНовыхЭлектронныхДокументов;
		ВидимостьФлажка = (РегламентноеЗадание <> Неопределено);
		Если ВидимостьФлажка Тогда
			ОповещатьОСобытияхЭДО = РегламентноеЗадание.Использование;
			ЭлементНастройкиРасписания.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
			ЭлементНастройкиРасписания.Доступность = РегламентноеЗадание.Использование;
		КонецЕсли;
		ВидимостьРасписания = ВидимостьФлажка И Не РазделениеВключено И ЭтоАдминистраторСистемы;
		ЭлементНастройкиРасписания.Видимость = ВидимостьРасписания;
		
		РегламентноеЗадание = РегламентноеЗаданиеПоНаименованию("ПометкаНаУдалениеПакетовЭД");
		ЭлементНастройкиРасписания = Элементы.ПометкаНаУдалениеПакетовЭД;
		ВидимостьФлажка = (РегламентноеЗадание <> Неопределено);
		Если ВидимостьФлажка Тогда
			ПомечатьНаУдалениеПакетыЭД = РегламентноеЗадание.Использование;
			ЭлементНастройкиРасписания.Заголовок = ТекстРасписанияРегламентногоЗадания(РегламентноеЗадание);
			ЭлементНастройкиРасписания.Доступность = РегламентноеЗадание.Использование;
			Элементы.ГруппаСрокХраненияПакетов.Доступность = РегламентноеЗадание.Использование;
		КонецЕсли;
		ВидимостьРасписания = ВидимостьФлажка И Не РазделениеВключено И ЭтоАдминистраторСистемы;
		ЭлементНастройкиРасписания.Видимость = ВидимостьРасписания;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимость(ИмяЭлемента, Значение)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, ИмяЭлемента, "Видимость", Значение);
	
КонецПроцедуры

&НаСервере
Функция ВсеИменаКонстант()
	
	ВсеИменаКонстант = Новый Массив;
	Для каждого Константа Из Метаданные.Константы Цикл
		ВсеИменаКонстант.Добавить(Константа.Имя);
	КонецЦикла;
	Возврат ВсеИменаКонстант;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	РаботаСФормой.ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоРазделов.Видимость", Ложь);
	РаботаСФормой.ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ДеревоРазделовПредставление.Имя);
	РаботаСФормой.ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура АктивизироватьРазделНастроек(ИмяРаздела)
	
	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Имя",
		ИдентификаторСтроки,
		ДеревоРазделов.ПолучитьЭлементы(),
		ИмяРаздела,
		Ложь);
	Элементы.ДеревоРазделов.ТекущаяСтрока = ИдентификаторСтроки;
	
КонецПроцедуры

#Область ДеревоРазделов

&НаСервереБезКонтекста
Функция ДеревоРазделов()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ДеревоРазделов = Новый ДеревоЗначений;
	ДеревоРазделов.Колонки.Добавить("Имя", ТипСтрока);
	ДеревоРазделов.Колонки.Добавить("Представление", ТипСтрока);
	ДеревоРазделов.Колонки.Добавить("Видимость", ТипБулево);
	ДеревоРазделов.Колонки.Добавить("ЭтоГруппа", ТипБулево);
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаКомпания";
	Раздел.Представление = НСтр("ru='Компания'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаCRM";
	Раздел.Представление = НСтр("ru='CRM'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаПродажи";
	Раздел.Представление = НСтр("ru='Продажи'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаЗакупки";
	Раздел.Представление = НСтр("ru='Закупки'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаРаботы";
	Раздел.Представление = НСтр("ru='Работы'");
	
	//{kp-unf.ru
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "КП_СтраницаПроцессы";
	Раздел.Представление = НСтр("ru='Процессы'");
	//kp-unf.ru}	
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаПроизводство";
	Раздел.Представление = НСтр("ru='Производство'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаДеньги";
	Раздел.Представление = НСтр("ru='Деньги'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаЗарплата";
	Раздел.Представление = НСтр("ru='Зарплата'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаПерсональныеНастройки";
	Раздел.Представление = НСтр("ru='Персональные настройки'");
	Раздел.ЭтоГруппа = Истина;
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаПерсональныеНастройкиПочтаСмс";
		Подраздел.Представление = НСтр("ru='Почта и SMS'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаПерсональныеНастройкиОбменСGoogle";
		Подраздел.Представление = НСтр("ru='Обмен с Google'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаПерсональныеНастройкиПараметрыПечати";
		Подраздел.Представление = НСтр("ru='Параметры печати'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаПерсональныеНастройкиРаботаСФайлами";
		Подраздел.Представление = НСтр("ru='Работа с файлами'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаПерсональныеНастройкиПрочее";
		Подраздел.Представление = НСтр("ru='Прочее'");
		
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаИнтеграцияСДругимиПрограммами";
	Раздел.Представление = НСтр("ru='Интеграция с другими программами'");
	Раздел.ЭтоГруппа = Истина;
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаИнтеграцияСДругимиПрограммамиСинхронизацияСПрограммами1СиРИБ";
		Подраздел.Представление = НСтр("ru='Синхронизация с программами 1С:Предприятие и РИБ'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаИнтеграцияСДругимиПрограммамиСинхронизацияСМобильнымПриложением";
		Подраздел.Представление = НСтр("ru='Мобильные приложения'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаИнтеграцияСДругимиПрограммамиОбменССайтом";
		Подраздел.Представление = НСтр("ru='Обмен с сайтом'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаИнтеграцияСДругимиПрограммамиЯндексДоставка";
		Подраздел.Представление = НСтр("ru='Яндекс.Доставка'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаОбменЭлектроннымиДокументами";
	Раздел.Представление = НСтр("ru='Обмен электронными документами'");
	Раздел.ЭтоГруппа = Истина;
	
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаОбменЭлектроннымиДокументамиБизнесСеть";
		Подраздел.Представление = НСтр("ru='1C:Бизнес-сеть'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаОбменЭлектроннымиДокументами1СНоменклатура";
		Подраздел.Представление = НСтр("ru='1С:Номенклатура'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаОбменЭлектроннымиДокументамиОбменСКонтрагентами";
		Подраздел.Представление = НСтр("ru='Обмен с контрагентами'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаОбменЭлектроннымиДокументамиОбменСБанками";
		Подраздел.Представление = НСтр("ru='Обмен с банками'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаОбменЭлектроннымиДокументамиИнтеграцияСЯндексКассой";
		Подраздел.Представление = НСтр("ru='Яндекс.Касса'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаАдминистрирование";
	Раздел.Представление = НСтр("ru='Администрирование'");
	Раздел.ЭтоГруппа = Истина;
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеВерсионированиеОбъектов";
		Подраздел.Представление = НСтр("ru='Версионирование объектов'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеДополнительныеРеквизиты";
		Подраздел.Представление = НСтр("ru='Дополнительные реквизиты'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеЗащитаПерсональныхДанных";
		Подраздел.Представление = НСтр("ru='Защита персональных данных'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеИнтернетПоддержкаИСервисы";
		Подраздел.Представление = НСтр("ru='Интернет-поддержка и сервисы'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеКонтактнаяИнформация";
		Подраздел.Представление = НСтр("ru='Контактная информация'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеКорректировкаДанных";
		Подраздел.Представление = НСтр("ru='Корректировка данных'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеМониторингОценкаПроизводительности";
		Подраздел.Представление = НСтр("ru='Мониторинг и оценка производительности'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеНастройкиПользователейИПрав";
		Подраздел.Представление = НСтр("ru='Настройки пользователей и прав'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеОбщиеНастройки";
		Подраздел.Представление = НСтр("ru='Общие настройки'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеПечатныеФормыОтчетыИОбработки";
		Подраздел.Представление = НСтр("ru='Печатные формы, отчеты и обработки'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеОбслуживание";
		Подраздел.Представление = НСтр("ru='Поддержка и обслуживание'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеПодключаемоеОборудование";
		Подраздел.Представление = НСтр("ru='Подключаемое оборудование'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеПочтаСмс";
		Подраздел.Представление = НСтр("ru='Почта, SMS, напоминания'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеРаботаВСервисе";
		Подраздел.Представление = НСтр("ru='Работа в сервисе'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеНастройкиРаботыСФайлами";
		Подраздел.Представление = НСтр("ru='Работа с файлами'");
		
		Подраздел = Раздел.Строки.Добавить();
		Подраздел.Имя = "СтраницаАдминистрированиеРегламентныеОперации";
		Подраздел.Представление = НСтр("ru='Регламентные операции'");
		
	ЗаполнитьПредставлениеРазделов(ДеревоРазделов.Строки);
	
	Возврат ДеревоРазделов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеРазделов(Разделы)
	
	Для каждого Раздел Из Разделы Цикл
		
		Если Раздел.Строки.Количество() <> 0 Тогда
			ЗаполнитьПредставлениеРазделов(Раздел.Строки);
		КонецЕсли;
		
		Раздел.Видимость = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРазделов()
	
	ЗначениеВРеквизитФормы(ДеревоРазделов(), "ДеревоРазделов");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазворачиваемыеПоУмолчаниюРазделы()
	
	РазворачиваемыеРазделы = Новый Массив;
	РазворачиваемыеРазделы.Добавить("Продажи");
	Возврат РазворачиваемыеРазделы;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьРазделыПоУмолчанию()
	
	РазворачиваемыеРазделы = Новый Массив;
	
	РазделыДерева = ДеревоРазделов.ПолучитьЭлементы();
	Для каждого Раздел Из РазделыДерева Цикл
		Если РазворачиваемыеПоУмолчаниюРазделы().Найти(Раздел.Имя) <> Неопределено Тогда
			РазворачиваемыеРазделы.Добавить(Раздел.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ИдентификаторРаздела Из РазворачиваемыеРазделы Цикл
		Элементы.ДеревоРазделов.Развернуть(ИдентификаторРаздела);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПереходнуюДекорациюКРазделам(Декорация, ПрефиксСтраницДляПоиска)
	
	Строки = Новый Массив;
	
	Для каждого Страница Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл
		Если Страница.Имя = ПрефиксСтраницДляПоиска Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрНачинаетсяС(Страница.Имя, ПрефиксСтраницДляПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Страница.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЕстьВидимыеЭлементыВнутриЭлемента(Страница) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПерехода = Новый ФорматированнаяСтрока(Страница.Заголовок,,,, Страница.Имя);
		Строки.Добавить(СтрокаПерехода);
		Строки.Добавить(Символы.ПС);
		Строки.Добавить(Символы.ПС);
	КонецЦикла;
	
	Декорация.Заголовок = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтраницеНастроек(СтраницаНастроек)
	
	Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы[СтраницаНастроек];
	
	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Имя",
		ИдентификаторСтроки,
		ДеревоРазделов.ПолучитьЭлементы(),
		СтраницаНастроек,
		Ложь);
	Элементы.ДеревоРазделов.ТекущаяСтрока = ИдентификаторСтроки;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПереходныеДекорацииКРазделам()
	
	СформироватьПереходнуюДекорациюКРазделам(
		Элементы.ДекорацияПерейтиСтраницаАдминистрирование,
		"СтраницаАдминистрирование");
	СформироватьПереходнуюДекорациюКРазделам(
		Элементы.ДекорацияПерейтиСтраницаПерсональныеНастройки,
		"СтраницаПерсональныеНастройки");
	СформироватьПереходнуюДекорациюКРазделам(
		Элементы.ДекорацияПерейтиСтраницаИнтеграцияСДругимиПрограммами,
		"СтраницаИнтеграцияСДругимиПрограммами");
	СформироватьПереходнуюДекорациюКРазделам(
		Элементы.ДекорацияПерейтиСтраницаОбменЭлектроннымиДокументами,
		"СтраницаОбменЭлектроннымиДокументами");
	
КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаСервере
Функция ПолучитьЗаголовкиПодчиненныхЭлементовГруппыРекурсивно(Элемент)
	
	Результат = Новый Соответствие;
	
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") ИЛИ ТипЗнч(Элемент) = Тип("СтраницаФормы") Тогда
		Для каждого ЭлементГруппы Из Элемент.ПодчиненныеЭлементы Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат, ПолучитьЗаголовкиПодчиненныхЭлементовГруппыРекурсивно(ЭлементГруппы));
		КонецЦикла;
	Иначе
		ЗаголовокЭлемента = ЗаголовокЭлемента(Элемент);
		Если ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
			Результат.Вставить(Элемент.Имя, ЗаголовокЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаголовокЭлемента(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Заголовок) Тогда
		Возврат Элемент.Заголовок;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "ИмяКоманды") И ЗначениеЗаполнено(Элемент.ИмяКоманды) Тогда
		Возврат Команды[Элемент.ИмяКоманды].Заголовок;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПоиска(ВыбранныеЭлементы)
	
	СтраницыНастроекИсключения = Новый Массив;
	СтраницыНастроекИсключения.Добавить("СтраницаНеНайдено");
	
	Для каждого СтраницаНастроек Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл
		Если СтраницыНастроекИсключения.Найти(СтраницаНастроек.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого Элемент Из СтраницаНастроек.ПодчиненныеЭлементы Цикл
			ЗаголовкиЭлементов = ПолучитьЗаголовкиПодчиненныхЭлементовГруппыРекурсивно(Элемент);
			Для каждого КлючЗначение Из ЗаголовкиЭлементов Цикл
				ДобавитьСтрокиПоискаВСловарь(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ДополнитьТаблицуПоискаСтраницаКомпания();
	ДополнитьТаблицуПоискаСтраницаCRM();
	ДополнитьТаблицуПоискаСтраницаПродажи();
	ДополнитьТаблицуПоискаСтраницаЗакупки();
	ДополнитьТаблицуПоискаСтраницаРаботы();
	ДополнитьТаблицуПоискаСтраницаПроизводство();
	ДополнитьТаблицуПоискаСтраницаДеньги();
	ДополнитьТаблицуПоискаСтраницаЗарплата();
	ДополнитьТаблицуПоискаСтраницаАдминистрирование();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиПоискаВСловарь(Элемент, СтрокаПоиска1,
		СтрокаПоиска2 = "", СтрокаПоиска3 = "", СтрокаПоиска4 = "", СтрокаПоиска5 = "", СтрокаПоиска6 = "")
	
	Если ТипЗнч(СтрокаПоиска1) = Тип("Массив") Тогда
		СтрокиПоиска = СтрокаПоиска1;
	Иначе
		СтрокиПоиска = Новый Массив;
		СтрокиПоиска.Добавить(СтрокаПоиска1);
		Если ЗначениеЗаполнено(СтрокаПоиска2) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска2);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска3) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска3);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска4) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска4);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска5) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска5);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска6) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска6);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		ИмяЭлемента = Элемент;
	Иначе
		ИмяЭлемента = Элемент.Имя;
	КонецЕсли;
	
	Для каждого СтрокаПоиска Из СтрокиПоиска Цикл
		ПриведеннаяСтрокаПоиска = НРег(СтрокаПоиска);
		ОтборСтрокаПоиска = Новый Структура;
		ОтборСтрокаПоиска.Вставить("ИмяЭлемента", ИмяЭлемента);
		ОтборСтрокаПоиска.Вставить("СтрокаПоиска", ПриведеннаяСтрокаПоиска);
		
		Строки = СловарьПоиска.НайтиСтроки(ОтборСтрокаПоиска);
		Если Строки.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СловарьПоиска.Добавить(), ОтборСтрокаПоиска);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискСервер()
	
	Если НЕ ЗначениеЗаполнено(ВведеннаяСтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Соответствие;
	
	Для каждого СтрокаСловаря Из СловарьПоиска Цикл
		ПроцентСхожести = ПроцентСхожестиСтрок(
			ПолучитьНГраммыСтроки(ВведеннаяСтрокаПоиска),
			ПолучитьНГраммыСтроки(СтрокаСловаря.СтрокаПоиска));
		
		СловоПохожее = ПроцентСхожести >= УдовлетворительныйПроцентСхожестиНГрамм();
		
		Если СловоПохожее Тогда
			Результат.Вставить(СтрокаСловаря.ИмяЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	СкрытьВсеЭлементыСтраницНастроек();
	ПоказатьНайденныеПоискомЭлементы(Результат);
	УстановитьВидимостьРазделовРекурсивно(ДеревоРазделов.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервере
Функция ЭтоСтраницаГруппа(Страница)
	
	ЭлементыДерева = ДеревоРазделов.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Имя = Страница.Имя Тогда
			Возврат ЭлементДерева.ЭтоГруппа;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРазделовРекурсивно(ЭлементыДерева)
	
	Для каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			УстановитьВидимостьРазделовРекурсивно(ПодчиненныеСтроки);
			
			ЕстьПодчиненныеВидимыеРазделы = Ложь;
			Для каждого ПодчиненныйРаздел Из ПодчиненныеСтроки Цикл
				Если ПодчиненныйРаздел.Видимость Тогда
					ЕстьПодчиненныеВидимыеРазделы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаДерева.Видимость = ЕстьПодчиненныеВидимыеРазделы;
		Иначе
			СтраницаФормы = Элементы.Найти(СтрокаДерева.Имя);
			Если СтраницаФормы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.Видимость = ЕстьВидимыеЭлементыВнутриЭлемента(СтраницаФормы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВнутриЭлемента(ПроверяемыйЭлементФормы)
	
	ЭтоГруппа = ТипЗнч(ПроверяемыйЭлементФормы) = Тип("ГруппаФормы");
	
	Если ЭтоГруппа И НЕ ПроверяемыйЭлементФормы.Видимость Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		Возврат ПроверяемыйЭлементФормы.Видимость;
	КонецЕсли;
	
	Для каждого ЭлементФормы Из ПроверяемыйЭлементФормы.ПодчиненныеЭлементы Цикл
		ЕстьВидимыеЭлементыВнутриЭлемента = ЕстьВидимыеЭлементыВнутриЭлемента(ЭлементФормы);
		Если ЕстьВидимыеЭлементыВнутриЭлемента Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СкрытьВсеЭлементыСтраницНастроек()
	
	Для каждого СтраницаНастроек Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл
		
		Если ЭтоСтраницаГруппа(СтраницаНастроек) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтраницаНастроек = Элементы.СтраницаНеНайдено Тогда
			Продолжить;
		КонецЕсли;
		
		СкрытьВсеЭлементыСтраницыНастроек(СтраницаНастроек);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьВсеЭлементыСтраницыНастроек(СтраницаНастроек)
	
	Для каждого Элемент Из СтраницаНастроек.ПодчиненныеЭлементы Цикл
		
		НоваяСтрока = КэшЭлементовНастроек.Добавить();
		НоваяСтрока.ИмяЭлемента = Элемент.Имя;
		НоваяСтрока.Видимость = Элемент.Видимость;
		
		Элемент.Видимость = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИсходнуюВидимостьНастроек()
	
	Для каждого ДанныеЭлемента Из КэшЭлементовНастроек Цикл
		Элементы[ДанныеЭлемента.ИмяЭлемента].Видимость = ДанныеЭлемента.Видимость;
	КонецЦикла;
	
	УстановитьВидимостьРазделовРекурсивно(ДеревоРазделов.ПолучитьЭлементы());
	
	КэшЭлементовНастроек.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьВидимостьЭлементовРекурсивно(ВыбранныеЭлементы)
	
	Для каждого Элемент Из ВыбранныеЭлементы Цикл
		
		Если Элемент.ПодчиненныеЭлементы.Количество() <> 0 Тогда
			ЗапомнитьВидимостьЭлементовРекурсивно(Элемент.ПодчиненныеЭлементы);
		КонецЕсли;
		
		НоваяСтрока = КэшЭлементовНастроек.Добавить();
		НоваяСтрока.ИмяЭлемента = Элемент.Имя;
		НоваяСтрока.Видимость = Элемент.Видимость;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоказатьНайденныеПоискомЭлементы(Результат)
	
	СтраницыСНастройками = Новый Массив;
	
	Для каждого КлючЗначение Из Результат Цикл
		
		ИмяЭлемента = КлючЗначение.Ключ;
		Элемент = Элементы[ИмяЭлемента];
		
		РодительДляОтображения = ВерхнийЭлементРодительНастройки(Элемент);
		ДанныеЭлементов = КэшЭлементовНастроек.НайтиСтроки(Новый Структура("ИмяЭлемента", РодительДляОтображения.Имя));
		
		Если ДанныеЭлементов.Количество() <> 0
			И ДанныеЭлементов[0].Видимость Тогда
			
			РодительДляОтображения.Видимость = Истина;
			СтраницаРодитель = РодительДляОтображения.Родитель;
			
			Если СтраницыСНастройками.Найти(СтраницаРодитель.Имя) = Неопределено Тогда
				СтраницыСНастройками.Добавить(СтраницаРодитель.Имя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтраницыСНастройками;
	
КонецФункции

&НаСервере
Функция ВерхнийЭлементРодительНастройки(Элемент)
	
	РодительТекущегоЭлемента = Элемент.Родитель;
	
	Если РодительТекущегоЭлемента.Родитель = Элементы.СтраницыНастроек Тогда
		Возврат Элемент;
	КонецЕсли;
	
	Возврат ВерхнийЭлементРодительНастройки(РодительТекущегоЭлемента);
	
КонецФункции

&НаСервере
Функция СтраницаРодительЭлементаНастройки(Элемент)
	
	РодительТекущегоЭлемента = Элемент.Родитель;
	
	Если РодительТекущегоЭлемента.Родитель = Элементы.СтраницыНастроек Тогда
		Возврат РодительТекущегоЭлемента;
	КонецЕсли;
	
	Возврат СтраницаРодительЭлементаНастройки(РодительТекущегоЭлемента);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УдовлетворительныйПроцентСхожестиНГрамм()
	
	Возврат 50;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДлинаНГраммы()
	
	Возврат 3;
	
КонецФункции

&НаСервере
Функция ПроцентСхожестиСтрок(МассивНГраммПоисковойСтроки, МассивНГраммСловаря)
	
	КоличествоСовпавшихНГрамм = ЭлементыВходногоМассиваПрисутствующиеВИскомом(
		МассивНГраммПоисковойСтроки,
		МассивНГраммСловаря).Количество();
	
	Возврат ПроцентОт(КоличествоСовпавшихНГрамм, МассивНГраммПоисковойСтроки.Количество());
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроцентОт(Значение, ЗначениеОт)
	
	Возврат Значение * 100 / ЗначениеОт;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭлементыВходногоМассиваПрисутствующиеВИскомом(ВходнойМассив, ИсковыйМассив)
	
	Результат = Новый Массив;
	
	Для каждого Значение Из ВходнойМассив Цикл
		Если ИсковыйМассив.Найти(Значение) <> Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНГраммыСтроки(Знач ИсходнаяСтрока)
	
	НГраммыСтроки = Новый Массив;
	
	ИсходнаяСтрока = НРег(ИсходнаяСтрока);
	СловаИсходнойСтроки = СтрРазделить(ИсходнаяСтрока, " ", Ложь);
	
	Для каждого Слово Из СловаИсходнойСтроки Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НГраммыСтроки, НГраммыСлова(Слово));
	КонецЦикла;
	
	Возврат НГраммыСтроки;
	
КонецФункции

&НаСервере
Функция НГраммыСлова(Слово)
	
	НГраммыСлова = Новый Массив;
	
	Для Итератор = 0 По СтрДлина(Слово) - ДлинаНГраммы() Цикл
		НГрамма = "";
		Для ИтераторНГраммы = 0 По ДлинаНГраммы() - 1 Цикл
			НГрамма = НГрамма + Сред(Слово, ИтераторНГраммы + 1 + Итератор, 1);
		КонецЦикла;
		НГраммыСлова.Добавить(НГрамма);
	КонецЦикла;
	
	Возврат НГраммыСлова;
	
КонецФункции

//{kp-unf.ru
&НаКлиенте
Процедура КП_ДекорацияОткрытьНастройкиНажатие(Элемент)
	ОткрытьФорму("Обработка.КП_Администрирование.Форма",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры
//kp-unf.ru}

#КонецОбласти

#КонецОбласти
