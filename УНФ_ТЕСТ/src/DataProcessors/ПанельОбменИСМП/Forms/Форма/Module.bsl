#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьЭлементыФормыНаСервере();
	
	ЛичныйКабинет = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Личный кабинет'"), , ЦветаСтиля.ЦветГиперссылкиГосИС, , "ПерейтиВЛичныйКабинет");
	Если ОбщегоНазначения.РежимОтладки() Тогда
		ЛичныйКабинетТест = Новый ФорматированнаяСтрока(
			НСтр("ru = '(Тестовый контур)'"), , ЦветаСтиля.ЦветГиперссылкиГосИС, , "ПерейтиВЛичныйКабинетТест");
		ПерейтиВЛичныйКабинет = Новый ФорматированнаяСтрока(ЛичныйКабинет, " ", ЛичныйКабинетТест);
	Иначе
		ПерейтиВЛичныйКабинет = ЛичныйКабинет;
	КонецЕсли;
	
	ИнтеграцияИС.УстановитьВидимостьКомандыВыполнитьОбмен(ЭтотОбъект, Метаданные.ОпределяемыеТипы.ДокументыИСМП, "ВыполнитьОбмен");
	
	ВосстановитьНастройкиФормы();
	ОбновитьСпискиДокументов();
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиВЛичныйКабинет" Тогда
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://markirovka.crpt.ru/");
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиВЛичныйКабинетТест" Тогда
		СтандартнаяОбработка = Ложь;
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку("https://demo.lp.crpt.tech/");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ДокументыИСМП

#Область ЗаказНаЭмиссиюКодовМаркировкиСУЗ

&НаКлиенте
Процедура ОткрытьЗаказНаЭмиссиюКодовМаркировкиСУЗ(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗаказНаЭмиссиюСУЗ.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказНаЭмиссиюКодовМаркировкиСУЗОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗаказНаЭмиссиюСУЗ.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказНаЭмиссиюКодовМаркировкиСУЗОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗаказНаЭмиссиюСУЗ.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказНаЭмиссиюКодовМаркировкиСУЗОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗаказНаЭмиссиюСУЗ.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область МаркировкаТоваровИСМП

&НаКлиенте
Процедура ОткрытьМаркировкаТоваровИСМП(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.МаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМаркировкаТоваровИСМПОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.МаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМаркировкаТоваровИСМПОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.МаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМаркировкаТоваровИСМПОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.МаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область ПеремаркировкаТоваровИСМП

&НаКлиенте
Процедура ОткрытьПеремаркировкаТоваровИСМП(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПеремаркировкаТоваровИСМПОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПеремаркировкаТоваровИСМПОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПеремаркировкаТоваровИСМПОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПеремаркировкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область СписаниеКодовМаркировкиИСМП

&НаКлиенте
Процедура ОткрытьСписаниеКодовМаркировкиИСМП(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьСписаниеКодовМаркировкиИСМПОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписаниеКодовМаркировкиИСМПОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписаниеКодовМаркировкиИСМПОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.СписаниеКодовМаркировкиИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область ВыводИзОборотаИСМП

&НаКлиенте
Процедура ОткрытьВыводИзОборотаИСМП(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВыводИзОборотаИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ВыводИзОборотаИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыводИзОборотаИСМПОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВыводИзОборотаИСМП.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.ВыводИзОборотаИСМП.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыводИзОборотаИСМПОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВыводИзОборотаИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ВыводИзОборотаИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыводИзОборотаИСМПОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВыводИзОборотаИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ВыводИзОборотаИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область ОтгрузкаТоваровИСМП

&НаКлиенте
Процедура ОткрытьОтгрузкаТоваровИСМП(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтгрузкаТоваровИСМПОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтгрузкаТоваровИСМПОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтгрузкаТоваровИСМПОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область ПриемкаТоваровИСМП

&НаКлиенте
Процедура ОткрытьПриемкаТоваровИСМП(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПриемкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПриемкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьПриемкаТоваровИСМПОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПриемкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПриемкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриемкаТоваровИСМПОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПриемкаТоваровИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ПриемкаТоваровИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#Область ВозвратВОборотИСМП

&НаКлиенте
Процедура ОткрытьВозвратВОборотИСМП(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВозвратВОборотИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ВозвратВОборотИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействияИлиОжидания");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВозвратВОборотИСМПОформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВозвратВОборотИСМП.Форма.ФормаСпискаДокументов.ОткрытиеСпискаРаспоряжений");
	ОткрытьФормуСпискаДокументов("Документ.ВозвратВОборотИСМП.Форма.ФормаСпискаДокументов", Неопределено, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВозвратВОборотИСМПОтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВозвратВОборотИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ВозвратВОборотИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеДействия");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВозвратВОборотИСМПОжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВозвратВОборотИСМП.Форма.ФормаСпискаДокументов.ОткрытиеОсновногоСписка");
	ОткрытьФормуСпискаДокументов("Документ.ВозвратВОборотИСМП.Форма.ФормаСпискаДокументов", "ВсеТребующиеОжидания");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДокументыЭДО

&НаКлиенте
Функция ИмяФормыОбработкиОбменаПоЭДО()
	
	ИмяОбработки = "ОбменСКонтрагентами";
	Форма = "ТекущиеДелаПоЭДО";
	ЭлектронноеВзаимодействиеИСМПКлиентСерверПереопределяемый.ПриОпределенииИмениОбработкиОбменаПоЭДО(ИмяОбработки);
	ЭлектронноеВзаимодействиеИСМПКлиентСерверПереопределяемый.ПриОпределенииИмениФормыОбработкиОбменаПоЭДО(Форма);
	Возврат СтрШаблон("Обработка.%1.Форма.%2", ИмяОбработки, Форма);

КонецФункции

#Область ЭлектронныйДокументВходящий

&НаКлиенте
Процедура ОткрытьВходящиеДокументыЭДО(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.ОткрытиеОсновногоСписка");
	
	ПараметрыОткрытия = ПараметрыОткрытияПанелиЭДОИзИСМП(Организации);
	ПараметрыОткрытия.Раздел           = "Входящие";
	ОткрытьФорму(ИмяФормыОбработкиОбменаПоЭДО(), ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВходящиеДокументыЭДООтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.ОткрытиеОсновногоСписка");
	
	ПараметрыОткрытия = ПараметрыОткрытияПанелиЭДОИзИСМП(Организации);
	ПараметрыОткрытия.РежимОтображения = "КИсполнению";
	ПараметрыОткрытия.Раздел           = "Входящие";
	ОткрытьФорму(ИмяФормыОбработкиОбменаПоЭДО(), ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВходящиеДокументыЭДООжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.ОткрытиеОсновногоСписка");
	
	ПараметрыОткрытия = ПараметрыОткрытияПанелиЭДОИзИСМП(Организации);
	ПараметрыОткрытия.Раздел           = "НаКонтроле";
	ОткрытьФорму(ИмяФормыОбработкиОбменаПоЭДО(), ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ЭлектронныйДокументИсходящий

&НаКлиенте
Процедура ОткрытьИсходящиеДокументыЭДО(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.ОткрытиеОсновногоСписка");
	
	ПараметрыОткрытия = ПараметрыОткрытияПанелиЭДОИзИСМП(Организации);
	ПараметрыОткрытия.Раздел           = "Исходящие";
	ОткрытьФорму(ИмяФормыОбработкиОбменаПоЭДО(), ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходящиеДокументыЭДООформите(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.ОткрытиеОсновногоСписка");
	
	ПараметрыОткрытия = ПараметрыОткрытияПанелиЭДОИзИСМП(Организации);
	ПараметрыОткрытия.Раздел           = "Сформировать";
	ОткрытьФорму(ИмяФормыОбработкиОбменаПоЭДО(), ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходящиеДокументыЭДООтработайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.ОткрытиеОсновногоСписка");
	
	ПараметрыОткрытия = ПараметрыОткрытияПанелиЭДОИзИСМП(Организации);
	ПараметрыОткрытия.РежимОтображения = "КИсполнению";
	ПараметрыОткрытия.Раздел           = "Исходящие";
	ОткрытьФорму(ИмяФормыОбработкиОбменаПоЭДО(), ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИсходящиеДокументыЭДООжидайте(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.ОткрытиеОсновногоСписка");
	
	ПараметрыОткрытия = ПараметрыОткрытияПанелиЭДОИзИСМП(Организации);
	ПараметрыОткрытия.Раздел           = "НаКонтролеИсх";
	ОткрытьФорму(ИмяФормыОбработкиОбменаПоЭДО(), ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбъектыИСМП

&НаКлиенте
Процедура ПодготовкаСведенийВКаталогGS46(Команда)
	
	ОткрытьФорму("Обработка.ПодготовкаСведенийВКаталогGS46.Форма.Форма", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассыНеПередающиеДанныеВИСМП(Команда)
	
	ОткрытьФорму("РегистрСведений.КассыНеПередающиеДанныеВИСМП.ФормаСписка", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭлектроннойПодписиИШифрования(Команда)
	
	ОткрытьФорму("ОбщаяФорма.НастройкиЭлектроннойПодписиИШифрования", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИСМП(Команда)
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияИСМП.Форма.НастройкиИСМП", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтанцииУправленияЗаказамиИСМП(Команда)
	
	ОткрытьФорму("Справочник.СтанцииУправленияЗаказамиИСМП.ФормаСписка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПулКодовМаркировкиСУЗ(Команда)
	
	ОткрытьФорму("РегистрСведений.ПулКодовМаркировкиСУЗ.Форма.ФормаСписка");
	
КонецПроцедуры



#КонецОбласти

#Область ПрикладныеОбъекты

&НаКлиенте
Процедура ОткрытьВидыНоменклатуры(Команда)
	
	ИнтеграцияИСКлиентПереопределяемый.ОткрытьФормуСпискаВидыНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуру(Команда)

	ИнтеграцияИСКлиентПереопределяемый.ОткрытьФормуСпискаНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ИнтеграцияИСМПКлиент.ВыполнитьОбмен(
		ЭтотОбъект,
		ИнтеграцияИСМПКлиент.ОрганизацииДляОбмена(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ОтборПоОрганизации

&НаКлиенте
Процедура ОтборОрганизацииПриИзменении(Элемент)
	
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организации, Ложь, "Отбор");
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Отбор", , ОповещениеВыбораОрганизаций());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Ложь, "Отбор");
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Ложь, "Отбор");
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Организация, Ложь, "Отбор");
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Отбор", , ОповещениеВыбораОрганизаций());
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Неопределено, Ложь, "Отбор");
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСМПКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Ложь, "Отбор");
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСообщенияОжидающиеОтправкиНажатие(Элемент)
	
	ПараметрыОткрытияФормы = Неопределено;
	Если Организации.Количество() > 0 Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Организации.ВыгрузитьЗначения());
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Отбор", Отбор);
		
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.ОчередьСообщенийИСМП.ФормаСписка", ПараметрыОткрытияФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ДействияСФормамиДокументовИСМП

&НаКлиенте
Процедура ОткрытьФормуСпискаДокументов(ИмяФормы,
                                       ДальнейшееДействиеИСМП,
                                       ОткрытьРаспоряжения = Ложь)
	
	СтруктураБыстрогоОтбора = Новый Структура();
	ПараметрыФормы = Новый Структура;
	
	Если ОткрытьРаспоряжения Тогда
		ПараметрыФормы.Вставить("ОткрытьРаспоряжения", Истина);
	Иначе
		СтруктураБыстрогоОтбора.Вставить("ДальнейшееДействиеИСМП", ДальнейшееДействиеИСМП);
	КонецЕсли;
	
	ИмяПоляОтветственный = "Ответственный";
	ИмяПоляОрганизации = "Организации";
	ИмяПоляОрганизация = "Организация";
	ИмяПоляПредставления = "ОрганизацииПредставление";
	
	СтруктураБыстрогоОтбора.Вставить(ИмяПоляОтветственный, Ответственный);
	СтруктураБыстрогоОтбора.Вставить(ИмяПоляОрганизации,   Организации);
	СтруктураБыстрогоОтбора.Вставить(ИмяПоляОрганизация,   Организация);
	СтруктураБыстрогоОтбора.Вставить(ИмяПоляПредставления, ОрганизацииПредставление);
	
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	ОткрытьФорму(ИмяФормы, ПараметрыФормы);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДействияСНастройкамиФормы

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПанельОбменИСМП", "Ответственный",            Ответственный);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПанельОбменИСМП", "Организация",              Организация);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПанельОбменИСМП", "ОрганизацииПредставление", ОрганизацииПредставление);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПанельОбменИСМП", "Организации",              Организации);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	Организации              = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПанельОбменИСМП", "Организации");
	Ответственный            = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПанельОбменИСМП", "Ответственный", Ответственный);
	Организация              = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПанельОбменИСМП", "Организация", Организация);
	ОрганизацииПредставление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ПанельОбменИСМП", "ОрганизацииПредставление", ОрганизацииПредставление);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеЭлементовФормы

&НаСервере
Процедура ОбновитьСпискиДокументов()
	
	ОбновитьСпискиДокументовЭДО();
	ОбновитьСпискиДокументовИСМП();
	ОтобразитьСостояниеОбмена();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыНаСервере()
	
	Элементы.ОткрытьВидыНоменклатуры.Видимость              = ИнтеграцияИС.ВидыНоменклатурыИспользуются();
	Элементы.ОткрытьПулКодовМаркировкиСУЗ.Видимость         = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ПулКодовМаркировкиСУЗ);
	Элементы.ОткрытьКассыНеПередающиеДанныеВИСМП.Видимость  = ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.КассыНеПередающиеДанныеВИСМП);
	Элементы.СтанцииУправленияЗаказамиИСМП.Видимость        = ПравоДоступа("Чтение", Метаданные.Справочники.СтанцииУправленияЗаказамиИСМП);
	Элементы.ПодготовкаСведенийВКаталогGS46.Видимость = ИнтеграцияИС.ПравоРегистрацииШтрихкодовНоменклатуры();
	
	ПравоДоступаОбменЭДО = ПравоДоступа("Использование", ЭлектронноеВзаимодействиеИСМП.МетаданныеОбработкиОбменаПоЭДО());
	Элементы.ГруппаЭлектронныйДокументВходящий.Видимость =  ПравоДоступаОбменЭДО;
	Элементы.ГруппаЭлектронныйДокументИсходящий.Видимость = ПравоДоступаОбменЭДО;
	
	ЭлементыПоМетаданным = Новый Соответствие();
	
	ЭлементыПоМетаданным.Вставить(Элементы.ГруппаПеремаркировкаТоваровИСМП, Метаданные.Документы.ПеремаркировкаТоваровИСМП);
	ЭлементыПоМетаданным.Вставить(Элементы.ГруппаПриемкаТоваровИСМП,        Метаданные.Документы.ПриемкаТоваровИСМП);
	ЭлементыПоМетаданным.Вставить(Элементы.ГруппаОтгрузкаТоваровИСМП,       Метаданные.Документы.ОтгрузкаТоваровИСМП);
	ЭлементыПоМетаданным.Вставить(Элементы.ГруппаВозвратВОборотИСМП,        Метаданные.Документы.ВозвратВОборотИСМП);
	ЭлементыПоМетаданным.Вставить(Элементы.ГруппаВыводИзОборотаИСМП,        Метаданные.Документы.ВыводИзОборотаИСМП);
	
	Для Каждого КлючИЗначение Из ЭлементыПоМетаданным Цикл
		КлючИЗначение.Ключ.Видимость = ИнтеграцияИСМППовтИсп.ОбъектМетаданныхДоступен(КлючИЗначение.Значение.ПолноеИмя());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпискиДокументовЭДО()
	
	Если Не ПравоДоступа("Использование", ЭлектронноеВзаимодействиеИСМП.МетаданныеОбработкиОбменаПоЭДО()) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организации",              Организации);
	Запрос.УстановитьПараметр("БезОтбораПоОрганизации",   Организации.Количество() = 0);
	Запрос.УстановитьПараметр("Ответственный",            ?(ЗначениеЗаполнено(Ответственный), Ответственный, Неопределено));
	Запрос.УстановитьПараметр("БезОтбораПоОтветственным", НЕ ЗначениеЗаполнено(Ответственный));
	
#Область ЭлектронныйДокументВходящий
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ЭлектронныйДокументВходящий) Тогда
		Элементы["ГруппаЭлектронныйДокументВходящий"].Видимость = Ложь;
	Иначе
		ТекстыЗапроса = Новый СписокЗначений;
		
		ТекстыЗапроса.Добавить(ТекстЗапросаОтработайтеВходящиеДокументыЭДО(), "Отработайте");
		ТекстыЗапроса.Добавить(ТекстЗапросаОжидайтеВходящиеДокументыЭДО(), "Ожидайте");
		
		РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
		ОбщееКоличество = 0;
		
		// Обновим тексты надписей действий с документом.
		ОбщееКоличество = ВывестиПоказатель(
			РезультатыЗапроса["Отработайте"].Выбрать(),
			Элементы.ОткрытьЭлектронныйДокументВходящийОтработайте,
			НСтр("ru='отработайте'"),
			Истина);
			
		ОбщееКоличество = ОбщееКоличество + ВывестиПоказатель(
			РезультатыЗапроса["Ожидайте"].Выбрать(),
			Элементы.ОткрытьЭлектронныйДокументВходящийОжидайте,
			НСтр("ru='ожидайте'"),
			Истина);
			
		ВывестиПоказатель(
			ОбщееКоличество,
			Элементы.ОткрытьЭлектронныйДокументВходящий,
			НСтр("ru='Входящие документы ЭДО'"),
			Истина);
		
	КонецЕсли;
#КонецОбласти
	
#Область ЭлектронныйДокументИсходящий
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ЭлектронныйДокументИсходящий) Тогда
		Элементы["ГруппаЭлектронныйДокументИсходящий"].Видимость = Ложь;
	Иначе
		ТекстыЗапроса = Новый СписокЗначений;
		ПравоДобавления = ПравоДоступа("Добавление", Метаданные.Документы.ЭлектронныйДокументИсходящий);
		
		ТекстыЗапроса.Добавить(ТекстЗапросаОформитеИсходящиеДокументыЭДО(), "Оформите");
		ТекстыЗапроса.Добавить(ТекстЗапросаОтработайтеИсходящиеДокументыЭДО(), "Отработайте");
		ТекстыЗапроса.Добавить(ТекстЗапросаОжидайтеИсходящиеДокументыЭДО(), "Ожидайте");
		
		Запрос.УстановитьПараметр("ОграничениеИсходящихДокументовЭДО", Истина);
		
		РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
		
		ОбщееКоличество = 0;
		
		// Обновим тексты надписей действий с документом.
		ОбщееКоличество = ВывестиПоказатель(
			РезультатыЗапроса["Оформите"].Выбрать(),
			Элементы.ОткрытьЭлектронныйДокументИсходящийОформите,
			НСтр("ru='оформите'"),
			ПравоДобавления);
			
		ОбщееКоличество = ВывестиПоказатель(
			РезультатыЗапроса["Отработайте"].Выбрать(),
			Элементы.ОткрытьЭлектронныйДокументИсходящийОтработайте,
			НСтр("ru='отработайте'"),
			Истина);
			
		ОбщееКоличество = ОбщееКоличество + ВывестиПоказатель(
			РезультатыЗапроса["Ожидайте"].Выбрать(),
			Элементы.ОткрытьЭлектронныйДокументИсходящийОжидайте,
			НСтр("ru='ожидайте'"),
			Истина);
			
		ВывестиПоказатель(
			ОбщееКоличество,
			Элементы.ОткрытьЭлектронныйДокументИсходящий,
			НСтр("ru='Исходящие документы ЭДО'"),
			Истина);
		
	КонецЕсли;
#КонецОбласти

КонецПроцедуры

&НаСервере
Функция ТекстЗапросаОжидайтеИсходящиеДокументыЭДО()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(1) КАК КоличествоДокументов
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1000
	|		1 КАК _Счетчик
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|			ПО (ЭлектронныйДокументИсходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
	|			И (НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления)
	|			И ЭлектронныйДокументИсходящий.СодержитДанныеОМаркируемыхТоварах
	|	ГДЕ
	|		ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
	|		И ЭлектронныйДокументИсходящий.СостояниеЭДО В
	|		(ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИсправление),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора))
	|		И (&БезОтбораПоОрганизации
	|		ИЛИ ЭлектронныйДокументИсходящий.Организация В (&Организации))
	|		И (&БезОтбораПоОтветственным
	|		ИЛИ ЭлектронныйДокументИсходящий.Ответственный = &Ответственный)) КАК ВложенныйЗапрос";
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОтработайтеИсходящиеДокументыЭДО()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(1) КАК КоличествоДокументов
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1000
	|		1 КАК _Счетчик
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|			ПО (ЭлектронныйДокументИсходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
	|			И (НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления)
	|			И ЭлектронныйДокументИсходящий.СодержитДанныеОМаркируемыхТоварах
	|	ГДЕ
	|		(ЭлектронныйДокументИсходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НаПодписи)
	|					И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
	|				ИЛИ НЕ ЭлектронныйДокументИсходящий.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПолученОтказОтКонтрагента))
	|					И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПУПДУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОИПЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДОЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИППДПЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПУУЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИОП), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ИПЭСФ))
	|					И ЭДПрисоединенныеФайлы.СтатусЭД = ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.Утвержден))
	|		И 1 В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					1
	|				ИЗ
	|					РегистрСведений.СостояниеПодписанияЭД КАК ЭДНаПодписи
	|				ГДЕ
	|					ЭДПрисоединенныеФайлы.Ссылка = ЭДНаПодписи.Объект
	|					И ЭДНаПодписи.Текущий
	|					И ЭДНаПодписи.Объект ССЫЛКА Справочник.ЭДПрисоединенныеФайлы)
	|		И (&БезОтбораПоОрганизации
	|		ИЛИ ЭлектронныйДокументИсходящий.Организация В (&Организации))
	|		И (&БезОтбораПоОтветственным
	|		ИЛИ ЭлектронныйДокументИсходящий.Ответственный = &Ответственный)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1000
	|		1
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|			ПО (ЭлектронныйДокументИсходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
	|			И (НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления)
	|			И ЭлектронныйДокументИсходящий.СодержитДанныеОМаркируемыхТоварах
	|	ГДЕ
	|		ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
	|		И ЭлектронныйДокументИсходящий.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОшибкаПередачи), ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяУточнитьДокумент))
	|		И (&БезОтбораПоОрганизации
	|		ИЛИ ЭлектронныйДокументИсходящий.Организация В (&Организации))
	|		И (&БезОтбораПоОтветственным
	|		ИЛИ ЭлектронныйДокументИсходящий.Ответственный = &Ответственный)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1000
	|		1
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументИсходящий КАК ЭлектронныйДокументИсходящий
	|			ПО (ЭлектронныйДокументИсходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
	|			И (НЕ ЭлектронныйДокументИсходящий.ПометкаУдаления)
	|			И ЭлектронныйДокументИсходящий.СодержитДанныеОМаркируемыхТоварах
	|	ГДЕ
	|		ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
	|		И ЭлектронныйДокументИсходящий.СостояниеЭДО = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ТребуетсяАннулировать)
	|		И (&БезОтбораПоОрганизации
	|		ИЛИ ЭлектронныйДокументИсходящий.Организация В (&Организации))
	|		И (&БезОтбораПоОтветственным
	|		ИЛИ ЭлектронныйДокументИсходящий.Ответственный = &Ответственный)
	|) КАК ВложенныйЗапрос";
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОформитеИсходящиеДокументыЭДО()
	
	Результат = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(1) КАК КоличествоДокументов
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|		СтатусыОформленияДокументовИСМП.Основание КАК _Счетчик
	|	ИЗ
	|		РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовИСМП КАК СтатусыОформленияДокументовИСМП
	|			ПО СостоянияЭД.СсылкаНаОбъект = СтатусыОформленияДокументовИСМП.Основание
	|	ГДЕ
	|		СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
	|		И &ОграничениеИсходящихДокументовЭДО
	|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.УдалитьПроизвольныйЭД
	|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.ПакетЭД
	|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.УдалитьСоглашенияОбИспользованииЭД
	|		И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.НастройкиЭДО
	|		И (&БезОтбораПоОрганизации
	|		ИЛИ СостоянияЭД.Организация В (&Организации))) КАК ВложенныйЗапрос";
	//ИнтеграцияИСМППереопределяемый.ПриПолучениТекстаЗапросаНеоформленныхДокументовЭДО(Результат);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОжидайтеВходящиеДокументыЭДО()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(1) КАК КоличествоДокументов
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1000
	|		1 КАК _Счетчик
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|			ПО ЭлектронныйДокументВходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла
	|			И НЕ ЭлектронныйДокументВходящий.ПометкаУдаления
	|			И ЭлектронныйДокументВходящий.СодержитДанныеОМаркируемыхТоварах
	|	ГДЕ
	|		ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
	|		И ЭлектронныйДокументВходящий.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяСогласиеКонтрагента),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИзвещениеОПолучении),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяИсправление),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправка),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаИзвещения),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяОтправкаПолучателю),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПередачаОператору),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждение),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяПодтверждениеОператора))
	|		И (&БезОтбораПоОрганизации
	|		ИЛИ ЭлектронныйДокументВходящий.Организация В (&Организации))
	|		И (&БезОтбораПоОтветственным
	|		ИЛИ ЭлектронныйДокументВходящий.Ответственный = &Ответственный)) КАК ВложенныйЗапрос";
		
КонецФункции

&НаСервере
Функция ТекстЗапросаОтработайтеВходящиеДокументыЭДО()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(1) КАК КоличествоДокументов
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1000
	|		1 КАК _Счетчик
	|	ИЗ
	|		Справочник.ЭДПрисоединенныеФайлы КАК ЭДПрисоединенныеФайлы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйДокументВходящий КАК ЭлектронныйДокументВходящий
	|			ПО (ЭлектронныйДокументВходящий.Ссылка = ЭДПрисоединенныеФайлы.ВладелецФайла)
	|			И (НЕ ЭлектронныйДокументВходящий.ПометкаУдаления)
	|			И ЭлектронныйДокументВходящий.СодержитДанныеОМаркируемыхТоварах
	|	ГДЕ
	|		НЕ ЭлектронныйДокументВходящий.СостояниеЭДО В (ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Отклонен),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.Аннулирован),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ОжидаетсяАннулирование),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ЗакрытПринудительно),
	|			ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.ПолученОтказОтКонтрагента))
	|		И ЭДПрисоединенныеФайлы.ТипЭлементаВерсииЭД В (ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ПервичныйЭД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ЭСФ), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФДОПУПД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.СЧФУПД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОПУПД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.КСЧФУКД),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДИСУКД), ЗНАЧЕНИЕ(Перечисление.ТипыЭлементовВерсииЭД.ДОП))
	|		И 1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				РегистрСведений.КонтрольОтраженияВУчетеЭДО КАК Контроль
	|			ГДЕ
	|				ЭлектронныйДокументВходящий.Ссылка = Контроль.ЭлектронныйДокумент)
	|		И (&БезОтбораПоОрганизации
	|		ИЛИ ЭлектронныйДокументВходящий.Организация В (&Организации))
	|		И (&БезОтбораПоОтветственным
	|		ИЛИ ЭлектронныйДокументВходящий.Ответственный = &Ответственный)) КАК ВложенныйЗапрос";
	
КонецФункции

&НаСервере
Процедура ОбновитьСпискиДокументовИСМП()
	
	// Заполним таблицу документов ИСМП.
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Метаданные");
	ТаблицаДокументы.Колонки.Добавить("Заголовок");
	ТаблицаДокументы.Колонки.Добавить("Оформите");
	ТаблицаДокументы.Колонки.Добавить("Отработайте");
	ТаблицаДокументы.Колонки.Добавить("Ожидайте");
	ТаблицаДокументы.Колонки.Добавить("ЕстьПравоЧтение");
	ТаблицаДокументы.Колонки.Добавить("ЕстьПравоДобавление");
	ТаблицаДокументы.Колонки.Добавить("ЕстьПравоРедактирование");
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ,
		НСтр("ru='Заказы на эмиссию кодов маркировки СУЗ'"),
		Истина,  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.МаркировкаТоваровИСМП,
		НСтр("ru='Маркировка товаров ИС МП'"),
		Метаданные.ОпределяемыеТипы.ОснованиеМаркировкаТоваровИСМП.Тип.Типы()[0] <> Тип("Строка"),  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.ПеремаркировкаТоваровИСМП,
		НСтр("ru='Перемаркировка товаров ИС МП'"),
		Метаданные.ОпределяемыеТипы.ОснованиеПеремаркировкиТоваровИСМП.Тип.Типы()[0] <> Тип("Строка"),  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.СписаниеКодовМаркировкиИСМП,
		НСтр("ru='Списания кодов маркировки ИС МП'"),
		Метаданные.ОпределяемыеТипы.ОснованиеСписаниеКодовМаркировкиИСМП.Тип.Типы()[0] <> Тип("Строка"),  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.ВыводИзОборотаИСМП,
		НСтр("ru='Вывод из оборота ИС МП'"),
		Метаданные.ОпределяемыеТипы.ОснованиеВыводаИзОборотаИСМП.Тип.Типы()[0] <> Тип("Строка"),  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.ВозвратВОборотИСМП,
		НСтр("ru='Возврат в оборот ИС МП'"),
		Метаданные.ОпределяемыеТипы.ОснованиеВозвратВОборотИСМП.Тип.Типы()[0] <> Тип("Строка"),  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.ОтгрузкаТоваровИСМП,
		НСтр("ru='Отгрузка товаров ИС МП'"),
		Истина,  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
	
	ДобавитьДокумент(
		ТаблицаДокументы,
		Метаданные.Документы.ПриемкаТоваровИСМП,
		НСтр("ru='Приемка товаров ИС МП'"),
		Истина,  // Оформите
		Истина,  // Отработайте
		Истина); // Ожидайте
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организации",              Организации);
	Запрос.УстановитьПараметр("БезОтбораПоОрганизации",   Организации.Количество() = 0);
	Запрос.УстановитьПараметр("Ответственный",            ?(ЗначениеЗаполнено(Ответственный), Ответственный, Неопределено));
	Запрос.УстановитьПараметр("БезОтбораПоОтветственным", НЕ ЗначениеЗаполнено(Ответственный));
	
	Для Каждого ТекЭлемент Из ТаблицаДокументы Цикл
		
		Если НЕ ТекЭлемент.ЕстьПравоЧтение Тогда
			Элементы["Группа" + ТекЭлемент.Метаданные.Имя].Видимость = Ложь;
			Продолжить;
		КонецЕсли;
		
		МетаРеквизитОснование = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(ТекЭлемент.Метаданные);
		
		Если МетаРеквизитОснование = Неопределено Тогда
			Запрос.УстановитьПараметр("ПустойДокументОснование", Неопределено);
		Иначе
			Запрос.УстановитьПараметр("ПустойДокументОснование", 
				ИнтеграцияИС.МассивПустыхЗначенийСоставногоТипа(МетаРеквизитОснование.Тип));
		КонецЕсли;
		
		// Сформируем текст запроса выборки количества документов для каждого действия.
		ТекстыЗапроса = Новый СписокЗначений;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("Оформите",
			Новый Структура("Представление, Доступно",
				НСтр("ru='оформите'"),
				ТекЭлемент.ЕстьПравоДобавление));
		Если Не ТекЭлемент.Оформите Тогда
			СтруктураДействий.Оформите.Вставить("СкрытьЭлемент");
		КонецЕсли;
		СтруктураДействий.Вставить("Отработайте",
			Новый Структура("Представление, Доступно",
				НСтр("ru='отработайте'"),
				ТекЭлемент.ЕстьПравоРедактирование));
		СтруктураДействий.Вставить("Ожидайте",
			Новый Структура("Представление, Доступно",
				НСтр("ru='ожидайте'"),
				ТекЭлемент.ЕстьПравоЧтение));
		
		Если ТекЭлемент.Оформите Тогда
			ТекстыЗапроса.Добавить(
				ТекстЗапросаОформите(ТекЭлемент.Метаданные),
				ТекЭлемент.Метаданные.Имя + "Оформите");
		КонецЕсли;
		
		Если ТекЭлемент.Отработайте Тогда
			ТекстыЗапроса.Добавить(
				ТекстЗапросаОтработайте(ТекЭлемент.Метаданные),
				ТекЭлемент.Метаданные.Имя + "Отработайте");
		КонецЕсли;
		
		Если ТекЭлемент.Ожидайте Тогда
			ТекстыЗапроса.Добавить(
				ТекстЗапросаОжидайте(ТекЭлемент.Метаданные),
				ТекЭлемент.Метаданные.Имя + "Ожидайте");
		КонецЕсли;
		
		// Получим запросом количество документов.
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ТекЭлемент.Метаданные.ПолноеИмя());
		Запрос.УстановитьПараметр("ВсеТребующиеОжидания", МенеджерДокумента.ВсеТребующиеОжидания());
		Запрос.УстановитьПараметр("ВсеТребующиеДействия", МенеджерДокумента.ВсеТребующиеДействия());
		
		РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
		
		ОбщееКоличество = 0;
		
		// Обновим тексты надписей действий с документом.
		Для Каждого КлючИЗначение Из СтруктураДействий Цикл
			
			ЭлементНадписи = Элементы.Найти("Открыть" + ТекЭлемент.Метаданные.Имя + КлючИЗначение.Ключ);
			
			Если ЭлементНадписи = Неопределено Тогда
				// Такое действие для документа не предусмотрено.
			ИначеЕсли КлючИЗначение.Значение.Свойство("СкрытьЭлемент") Тогда
				// Не определены соответствующие операции
				ЭлементНадписи.Видимость = Ложь;
				Элементы[ЭлементНадписи.Имя + "Декорация"].Заголовок = " ";
			ИначеЕсли Не ТекЭлемент[КлючИЗначение.Ключ] Тогда
				ВывестиПоказатель(
					0,
					ЭлементНадписи,
					КлючИЗначение.Значение.Представление,
					КлючИЗначение.Значение.Доступно);
			Иначе
				ОбщееКоличество = ОбщееКоличество + ВывестиПоказатель(
					РезультатыЗапроса[ТекЭлемент.Метаданные.Имя + КлючИЗначение.Ключ].Выбрать(),
					ЭлементНадписи,
					КлючИЗначение.Значение.Представление,
					КлючИЗначение.Значение.Доступно);
			КонецЕсли;
			
		КонецЦикла;
		
		// Обновим текст надписи самого документа.
		ВывестиПоказатель(
			ОбщееКоличество,
			Элементы["Открыть" + ТекЭлемент.Метаданные.Имя], 
			ТекЭлемент.Заголовок,
			Истина);
		
	КонецЦикла;
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСостояниеОбмена()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО (РАЗЛИЧНЫЕ ОчередьСообщенийИСМП.Сообщение), 0) КАК КоличествоСообщений
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийИСМП КАК ОчередьСообщенийИСМП
	|ГДЕ
	|	ОчередьСообщенийИСМП.Организация В(&Организация)
	|	ИЛИ &БезОтбора
	|");
	Запрос.УстановитьПараметр("Организация", Организации);
	Запрос.УстановитьПараметр("БезОтбора",   Организации.Количество() = 0);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() И Выборка.КоличествоСообщений > 0 Тогда
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'Есть сообщения (%1), ожидающие отправки в ИС МП. Выполните обмен.'"), Выборка.КоличествоСообщений);
		Элементы.НадписьСообщенияОжидающиеОтправки.Заголовок   = ТекстЗаголовка;
		Элементы.ДекорацияСообщенияОжидающиеОтправки.Видимость = Истина;
		Элементы.НадписьСообщенияОжидающиеОтправки.Видимость   = Истина;
	Иначе
		Элементы.ДекорацияСообщенияОжидающиеОтправки.Видимость = Ложь;
		Элементы.НадписьСообщенияОжидающиеОтправки.Видимость   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДокумент(Таблица, ОбъектМетаданных, Заголовок, Оформите, Отработайте, Ожидайте)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Метаданные  = ОбъектМетаданных;
	НоваяСтрока.Заголовок   = Заголовок;
	
	ОпцияВключена = ИнтеграцияИСМППовтИсп.ОбъектМетаданныхДоступен(ОбъектМетаданных.ПолноеИмя());
	
	НоваяСтрока.ЕстьПравоЧтение         = ОпцияВключена И ПравоДоступа("Чтение",         ОбъектМетаданных);
	НоваяСтрока.ЕстьПравоДобавление     = ОпцияВключена И ПравоДоступа("Добавление",     ОбъектМетаданных);
	НоваяСтрока.ЕстьПравоРедактирование = ОпцияВключена И ПравоДоступа("Редактирование", ОбъектМетаданных);
	
	НоваяСтрока.Оформите    = Оформите;
	НоваяСтрока.Отработайте = Отработайте;
	НоваяСтрока.Ожидайте    = Ожидайте;
	
КонецПроцедуры

&НаСервере
Функция ВывестиПоказатель(Выборка, Кнопка, ТекстПоказателя, ДействиеДоступно)
	
	Если ДействиеДоступно Тогда
		
		Если ТипЗнч(Выборка) = Тип("Число") Тогда
			КоличествоДокументов = Выборка;
		ИначеЕсли Выборка.Следующий() Тогда
			КоличествоДокументов = Выборка.КоличествоДокументов;
		Иначе
			КоличествоДокументов = 0;
		КонецЕсли;
		
		Если КоличествоДокументов > 0 Тогда
			ТекстЗаголовка = СтрШаблон(НСтр("ru = '%1 (%2)'"), ТекстПоказателя, КоличествоДокументов);
			ЦветТекста     = ЦветаСтиля.ЦветГиперссылкиГосИС;
		Иначе
			ТекстЗаголовка = ТекстПоказателя;
			ЦветТекста     = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
		КонецЕсли;
		
	Иначе
		
		КоличествоДокументов = 0;
		ТекстЗаголовка       = " ";
		ЦветТекста           = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
		
	КонецЕсли;
	
	Кнопка.Заголовок   = ТекстЗаголовка;
	Кнопка.ЦветТекста  = ЦветТекста;
	Кнопка.Видимость   = Истина;
	Кнопка.Доступность = НЕ ПустаяСтрока(ТекстЗаголовка);
	
	Возврат КоличествоДокументов;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОтработайте(МетаданныеДокументаИСМП)
	
	ТекстЗапроса = ТекстЗапросаКоличестваДокументовПоДальнейшемуДействию(
		МетаданныеДокументаИСМП,
		"&ВсеТребующиеДействия");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОжидайте(МетаданныеДокументаИСМП)
	
	ТекстЗапроса = ТекстЗапросаКоличестваДокументовПоДальнейшемуДействию(
		МетаданныеДокументаИСМП,
		"&ВсеТребующиеОжидания");
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаОформите(МетаданныеДокументаИСМП)
	
	ТипыДокументаОснования     = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокументаИСМП).Тип.Типы();
	СтрокиСоединенияДокументов = Новый Массив;
	СтрокиОтбораДокументов     = Новый Массив;
	
	Для Каждого ТипОснования Из ТипыДокументаОснования Цикл
		
		МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
		
		Если НЕ ПравоДоступа("Чтение", МетаданныеОснования) Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим соединение с документом-основанием для RLS.
		СтрокиСоединенияДокументов.Добавить("	ЛЕВОЕ СОЕДИНЕНИЕ Документ." + МетаданныеОснования.Имя + " КАК Документ" + МетаданныеОснования.Имя + "
			|		ПО Статусы.Основание = Документ" + МетаданныеОснования.Имя + ".Ссылка");
		
		СтрокиОтбораДокументов.Добавить("Документ" + МетаданныеОснования.Имя + ".Ссылка ЕСТЬ НЕ NULL");
		
	КонецЦикла;
	
	Если СтрокиОтбораДокументов.Количество() = 0 Тогда
		
		// Нет ни одного доступного документа-основания.
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	0 КАК КоличествоДокументов";
		
	Иначе
		
		ТекстСоединения = СтрСоединить(СтрокиСоединенияДокументов, Символы.ПС);
		ТекстОтбора 	= " И (" + СтрСоединить(СтрокиОтбораДокументов, Символы.ПС + "		ИЛИ ") + ")";
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Статусы.Основание) КАК КоличествоДокументов
		|ИЗ
		|	РегистрСведений.СтатусыОформленияДокументовИСМП КАК Статусы
		|%2
		|ГДЕ
		|	Статусы.Документ = ЗНАЧЕНИЕ(Документ.%1.ПустаяСсылка)
		|	И Статусы.СтатусОформления В
		|		(ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.НеОформлено),
		|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ОформленоЧастично),
		|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ЕстьОшибкиОформления),
		|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ТребуетсяСопоставлениеНоменклатуры))
		|	И НЕ Статусы.Архивный
		|	И (&БезОтбораПоОрганизации  ИЛИ Статусы.Контрагент В(&Организации))
		|	%3";
		
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстЗапроса,
			МетаданныеДокументаИСМП.Имя,
			ТекстСоединения,
			ТекстОтбора);
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаКоличестваДокументовПоДальнейшемуДействию(МетаданныеДокументаИСМП, ОтборДействия)
	
	МетаРеквизитОснование = ИнтеграцияИС.РеквизитДокументОснованиеДокументаИС(МетаданныеДокументаИСМП);
	
	ТекстСоединения = "";
	ТекстОтбора     = "";
	
	Если МетаРеквизитОснование <> Неопределено Тогда
		
		ТипыДокументаОснования     = МетаРеквизитОснование.Тип.Типы();
		СтрокиСоединенияДокументов = Новый Массив;
		СтрокиОтбораДокументов     = Новый Массив;
		ДокументИмеетОснования     = Ложь;
		
		Для Каждого ТипОснования Из ТипыДокументаОснования Цикл
			
			МетаданныеОснования = Метаданные.НайтиПоТипу(ТипОснования);
			
			Если МетаданныеОснования = Неопределено Тогда
				Продолжить
			ИначеЕсли Не Метаданные.Документы.Содержит(МетаданныеОснования) Тогда
				Продолжить;
			Иначе
				ДокументИмеетОснования = Истина;
			КонецЕсли;
			Если НЕ ПравоДоступа("Чтение", МетаданныеОснования) Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавим соединение с документом-основанием для RLS.
			СтрокиСоединенияДокументов.Добавить(
				"	ЛЕВОЕ СОЕДИНЕНИЕ Документ." + МетаданныеОснования.Имя + " КАК Документ" + МетаданныеОснования.Имя + "
				|		ПО ДокументИСМП.ДокументОснование = Документ" + МетаданныеОснования.Имя + ".Ссылка");
			
			СтрокиОтбораДокументов.Добавить("Документ" + МетаданныеОснования.Имя + ".Ссылка ЕСТЬ НЕ NULL");
			
		КонецЦикла;
		
		Если ДокументИмеетОснования Тогда
			
			Если СтрокиОтбораДокументов.Количество() = 0 Тогда
				ТекстСоединения = "";
			Иначе
				ТекстСоединения = СтрСоединить(СтрокиСоединенияДокументов, Символы.ПС);
			КонецЕсли;
			
			СтрокиОтбораДокументов.Добавить("ДокументИСМП.ДокументОснование В (&ПустойДокументОснование)");
			ТекстОтбора = " И (" + СтрСоединить(СтрокиОтбораДокументов, Символы.ПС + "		ИЛИ ") + ")";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовИСМП.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовИСМП КАК СтатусыДокументовИСМП
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.%1 КАК ДокументИСМП
	|		ПО СтатусыДокументовИСМП.Документ = ДокументИСМП.Ссылка
	|%2
	|ГДЕ
	|	СтатусыДокументовИСМП.ДальнейшееДействие1 В (%3)
	|	И НЕ ДокументИСМП.ПометкаУдаления
	|	И (&БезОтбораПоОрганизации ИЛИ ДокументИСМП.Организация В(&Организации))
	|	И (&БезОтбораПоОтветственным ИЛИ ДокументИСМП.Ответственный = &Ответственный)
	|	%4";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстЗапроса,
		МетаданныеДокументаИСМП.Имя,
		ТекстСоединения,
		ОтборДействия,
		ТекстОтбора);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ДокументыЭДО

// Заполняет параметры открытия формы обмена ЭДО с действующими фильтрами по организациям и маркируемой продукции.
//   См Обработка.ОбменСКонтрагентами.Форма.ТекущиеДелаПоЭДО.
//
// Параметры:
//   Организации - Массив Из ОпределяемыйТип.Организация - фильтр по организациям
// Возвращаемое значение:
//   Структура - общие параметры открытия формы:
// * ОтборИсходящихДокументов - Массив               - отбор исходящих документов ЭДО
// * ОтборВходящихДокументов  - Массив               - отбор входящих документов ЭДО
// * ОтборУчетныхДокументов   - Массив               - отбор учетных документов (к оформлению в ЭДО)
// * Раздел                   - Строка, Неопределено - начальная страница отображения
// * РежимОтображения         - Строка               - начальный режим отображения
//
&НаСервереБезКонтекста
Функция ПараметрыОткрытияПанелиЭДОИзИСМП(Знач Организации)
	
	Результат = Новый Структура;
	Результат.Вставить("РежимОтображения", "ВсеДокументы");
	Результат.Вставить("Раздел", Неопределено);
	Результат.Вставить("ОтборУчетныхДокументов", ОтборУчетныхДокументов(Организации)); 
	Результат.Вставить("ОтборВходящихДокументов", Новый Массив);
	Результат.Вставить("ОтборИсходящихДокументов", Новый Массив);
	Результат.ОтборВходящихДокументов.Добавить(Новый Структура("Поле,ВидСравнения,Значение",
		"Ссылка.СодержитДанныеОМаркируемыхТоварах", ВидСравненияКомпоновкиДанных.Равно, Истина));
	Результат.ОтборИсходящихДокументов.Добавить(Новый Структура("Поле,ВидСравнения,Значение",
		"Ссылка.СодержитДанныеОМаркируемыхТоварах", ВидСравненияКомпоновкиДанных.Равно, Истина));
	Если Организации.Количество() Тогда
		Результат.ОтборВходящихДокументов.Добавить(Новый Структура("Поле,ВидСравнения,Значение",
			"Организация", ВидСравненияКомпоновкиДанных.ВСписке, Организации));
		Результат.ОтборИсходящихДокументов.Добавить(Новый Структура("Поле,ВидСравнения,Значение",
			"Организация", ВидСравненияКомпоновкиДанных.ВСписке, Организации));
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОтборУчетныхДокументов(Организации)
	
	УчетныеДокументыТребующиеФормированияЭД = Новый СписокЗначений;
	
	ЗапросСсылок = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтатусыОформленияДокументовИСМП.Основание КАК Ссылка
	|ИЗ
	|	РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|ГДЕ
	|	СостоянияЭД.СостояниеВерсииЭД = ЗНАЧЕНИЕ(Перечисление.СостоянияВерсийЭД.НеСформирован)
	|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.УдалитьПроизвольныйЭД
	|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Документ.ПакетЭД
	|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.УдалитьСоглашенияОбИспользованииЭД
	|	И НЕ СостоянияЭД.СсылкаНаОбъект ССЫЛКА Справочник.НастройкиЭДО
	|	И (&БезОтбораПоОрганизации
	|	ИЛИ СостоянияЭД.Организация В (&Организации))";
	ИнтеграцияИСМППереопределяемый.ПриПолучениТекстаЗапросаНеоформленныхДокументовЭДО(ТекстЗапроса);
	ЗапросСсылок.Текст = ТекстЗапроса;
	ЗапросСсылок.УстановитьПараметр("Организации", Организации);
	ЗапросСсылок.УстановитьПараметр("БезОтбораПоОрганизации", Организации.Количество()=0);
	УстановитьПривилегированныйРежим(Истина);
	УчетныеДокументыТребующиеФормированияЭД.ЗагрузитьЗначения(ЗапросСсылок.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	УстановитьПривилегированныйРежим(Ложь);
	Результат = Новый Массив;
	Результат.Добавить(Новый Структура("Поле,ВидСравнения,Значение",
		"Ссылка", ВидСравненияКомпоновкиДанных.ВСписке, УчетныеДокументыТребующиеФормированияЭД));
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтборПоОрганизации

&НаКлиенте
Функция ОповещениеВыбораОрганизаций()
	
	Возврат Новый ОписаниеОповещения("ПослеВыбораОрганизации", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораОрганизации(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьСпискиДокументов();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти